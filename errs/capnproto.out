projects/top_C++/capnproto
Going to process projects/top_C++/capnproto/all_log.txt 
---------- capnproto ------------

===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  KJ_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,')]
===========================================
===========================================
Total add: 34
Total del: 0
Header: OrphanBuilder::asDataReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  KJ_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  KJ_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,')]
===========================================
Class:  class TestKeywordMethodsImpl: public test::TestKeywordMethods::Server {   class TestKeywordMethodsImpl: public test::TestKeywordMethods::Server 
Class:  class TestKeywordMethodsImpl final: public test::TestKeywordMethods::Server {   class TestKeywordMethodsImpl final: public test::TestKeywordMethods::Server 
Class:  class TestKeywordMethodsImpl: public test::TestKeywordMethods::Server {   class TestKeywordMethodsImpl: public test::TestKeywordMethods::Server 
Class:class TimerImpl final: public Timer { class TimerImpl final: public Timer 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+  ASSERT_EQ(expected.size(), actual.size());')]
===========================================
===========================================
Total add: 33
Total del: 0
Header: TEST_F
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+  ASSERT_EQ(expected.size(), actual.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+  ASSERT_EQ(expected.size(), actual.size());')]
===========================================
Class:class UnixEventPort::TimerPromiseAdapter { class UnixEventPort::TimerPromiseAdapter 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    ASSERT_EQ(2, segments.size());')]
===========================================
===========================================
Total add: 108
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    ASSERT_EQ(2, segments.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    ASSERT_EQ(2, segments.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      KJ_ASSERT(connection.is<Connected>(),')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      KJ_ASSERT(connection.is<Connected>(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      KJ_ASSERT(connection.is<Connected>(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        KJ_ASSERT(connectionState->connection.is<Connected>(),')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        KJ_ASSERT(connectionState->connection.is<Connected>(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        KJ_ASSERT(connectionState->connection.is<Connected>(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+  ASSERT_EQ(schema.getMethods().size(), schema.getProto().getInterface().getMethods().size());')]
===========================================
===========================================
Total add: 41
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+  ASSERT_EQ(schema.getMethods().size(), schema.getProto().getInterface().getMethods().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+  ASSERT_EQ(schema.getMethods().size(), schema.getProto().getInterface().getMethods().size());')]
===========================================
Class:class TestMessageBuilder: public MallocMessageBuilder { class TestMessageBuilder: public MallocMessageBuilder 
Class:class TestPipe: public kj::BufferedInputStream, public kj::OutputStream { class TestPipe: public kj::BufferedInputStream, public kj::OutputStream 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(98, 2, u'-    KJ_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");'), (106, 2, u'-    KJ_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
Class:class SnappyInputStream::InputStreamSnappySource: public snappy::Source { class SnappyInputStream::InputStreamSnappySource: public snappy::Source 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-    KJ_FAIL_ASSERT("Snappy doesn\'t actually call this.");'), (137, 2, u'-  KJ_DASSERT(SNAPPY_COMPRESSED_BUFFER_SIZE >= snappy::MaxCompressedLength(snappy::kBlockSize),'), (169, 2, u'-    KJ_ASSERT(n <= compressedBuffer.size(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-    KJ_DASSERT(segment0.getArray().begin() == baseSegment->getArray().begin());'), (32, 2, u'-      KJ_DASSERT(iter->second->getArray().begin() == baseSegment->getArray().begin());'), (62, 2, u'-    KJ_FAIL_ASSERT("Invalid capability descriptor in message.") {')]
===========================================
===========================================
Total add: 3
Total del: 62
Header: BasicReaderArena::reportReadLimitReached
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-    KJ_DASSERT(segment0.getArray().begin() == baseSegment->getArray().begin());'), (32, 2, u'-      KJ_DASSERT(iter->second->getArray().begin() == baseSegment->getArray().begin());'), (62, 2, u'-    KJ_FAIL_ASSERT("Invalid capability descriptor in message.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-    KJ_DASSERT(segment0.getArray().begin() == baseSegment->getArray().begin());'), (32, 2, u'-      KJ_DASSERT(iter->second->getArray().begin() == baseSegment->getArray().begin());'), (62, 2, u'-    KJ_FAIL_ASSERT("Invalid capability descriptor in message.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 2, u'-  KJ_DASSERT(result->getArray().begin() == baseSegment->getArray().begin());'), (74, 2, u'-    KJ_FAIL_ASSERT("Invalid capability descriptor in message.") {')]
===========================================
===========================================
Total add: 3
Total del: 74
Header: BasicBuilderArena::reportReadLimitReached
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 2, u'-  KJ_DASSERT(result->getArray().begin() == baseSegment->getArray().begin());'), (74, 2, u'-    KJ_FAIL_ASSERT("Invalid capability descriptor in message.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 2, u'-  KJ_DASSERT(result->getArray().begin() == baseSegment->getArray().begin());'), (74, 2, u'-    KJ_FAIL_ASSERT("Invalid capability descriptor in message.") {')]
===========================================
Class:class BrokenCapFactoryImpl: public _::BrokenCapFactory { class BrokenCapFactoryImpl: public _::BrokenCapFactory 
Class:class BrokenPipeline final: public PipelineHook, public kj::Refcounted { class BrokenPipeline final: public PipelineHook, public kj::Refcounted 
Class: class BrokenRequest final: public RequestHook { class BrokenRequest final: public RequestHook 
Class: class BrokenClient final: public ClientHook, public kj::Refcounted { class BrokenClient final: public ClientHook, public kj::Refcounted 
Class:class BrokenCapFactoryImpl: public _::BrokenCapFactory { class BrokenCapFactoryImpl: public _::BrokenCapFactory 
Class:class BrokenPipeline final: public PipelineHook, public kj::Refcounted { class BrokenPipeline final: public PipelineHook, public kj::Refcounted 
Class: class BrokenRequest final: public RequestHook { class BrokenRequest final: public RequestHook 
Class: class BrokenClient final: public ClientHook, public kj::Refcounted { class BrokenClient final: public ClientHook, public kj::Refcounted 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    static_assert(sizeof(_::BasicReaderArena) <= sizeof(arenaSpace),'), (4, 1, u'+    static_assert(sizeof(_::ReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: MessageReader::getRootInternal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    static_assert(sizeof(_::BasicReaderArena) <= sizeof(arenaSpace),'), (4, 1, u'+    static_assert(sizeof(_::ReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    static_assert(sizeof(_::BasicReaderArena) <= sizeof(arenaSpace),'), (4, 1, u'+    static_assert(sizeof(_::ReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    static_assert(sizeof(_::BasicBuilderArena) <= sizeof(arenaSpace),'), (3, 1, u'+    static_assert(sizeof(_::BuilderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MessageBuilder::getRootSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    static_assert(sizeof(_::BasicBuilderArena) <= sizeof(arenaSpace),'), (3, 1, u'+    static_assert(sizeof(_::BuilderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    static_assert(sizeof(_::BasicBuilderArena) <= sizeof(arenaSpace),'), (3, 1, u'+    static_assert(sizeof(_::BuilderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        capHook = KJ_ASSERT_NONNULL(capTable[0])->addRef();')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        capHook = KJ_ASSERT_NONNULL(capTable[0])->addRef();')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        capHook = KJ_ASSERT_NONNULL(capTable[0])->addRef();')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+    KJ_ASSERT(response.getValue() == 123);'), (119, 1, u'+    KJ_ASSERT(response.getValue() == 101);'), (183, 1, u'+    KJ_ASSERT(add3Promise.wait(waitScope).getValue() == 27);'), (184, 1, u'+    KJ_ASSERT(add5Promise.wait(waitScope).getValue() == 29);'), (290, 1, u'+    KJ_ASSERT(fEvalPromise.wait(waitScope).getValue() == 1234);'), (291, 1, u'+    KJ_ASSERT(gEvalPromise.wait(waitScope).getValue() == 4244);'), (340, 1, u'+    KJ_ASSERT(response.getValue() == 512);')]
===========================================
Class: class ValueImpl final: public Calculator::Value::Server { class ValueImpl final: public Calculator::Value::Server 
Class: class FunctionImpl final: public Calculator::Function::Server { class FunctionImpl final: public Calculator::Function::Server 
Class: class OperatorImpl final: public Calculator::Function::Server { class OperatorImpl final: public Calculator::Function::Server 
Class: class CalculatorImpl final: public Calculator::Server { class CalculatorImpl final: public Calculator::Server 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      static_assert(__has_trivial_copy(Text::Reader) &&'), (8, 1, u'+      static_assert(kj::canMemcpy<Text::Reader>() &&')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: DynamicValue::Reader::Reader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      static_assert(__has_trivial_copy(Text::Reader) &&'), (8, 1, u'+      static_assert(kj::canMemcpy<Text::Reader>() &&')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      static_assert(__has_trivial_copy(Text::Reader) &&'), (8, 1, u'+      static_assert(kj::canMemcpy<Text::Reader>() &&')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      static_assert(__has_trivial_copy(Text::Reader) &&'), (8, 1, u'+      static_assert(kj::canMemcpy<Text::Reader>() &&')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: DynamicValue::Reader::Reader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      static_assert(__has_trivial_copy(Text::Reader) &&'), (8, 1, u'+      static_assert(kj::canMemcpy<Text::Reader>() &&')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      static_assert(__has_trivial_copy(Text::Reader) &&'), (8, 1, u'+      static_assert(kj::canMemcpy<Text::Reader>() &&')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        static_assert(__has_trivial_copy(SocketAddress), "Can\'t write() SocketAddress...");'), (3, 1, u'+        static_assert(canMemcpy<SocketAddress>(), "Can\'t write() SocketAddress...");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: SocketAddress::lookupHost
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        static_assert(__has_trivial_copy(SocketAddress), "Can\'t write() SocketAddress...");'), (3, 1, u'+        static_assert(canMemcpy<SocketAddress>(), "Can\'t write() SocketAddress...");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        static_assert(__has_trivial_copy(SocketAddress), "Can\'t write() SocketAddress...");'), (3, 1, u'+        static_assert(canMemcpy<SocketAddress>(), "Can\'t write() SocketAddress...");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  ASSERT_EQ(3u, result.size());')]
===========================================
===========================================
Total add: 19
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  ASSERT_EQ(3u, result.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  ASSERT_EQ(3u, result.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("Method not implemented", methodName);'), (3, 1, u'+      KJ_FAIL_ASSERT("Method not implemented", methodName) { break; }')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("Method not implemented", methodName);'), (3, 1, u'+      KJ_FAIL_ASSERT("Method not implemented", methodName) { break; }')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("Method not implemented", methodName);'), (3, 1, u'+      KJ_FAIL_ASSERT("Method not implemented", methodName) { break; }')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  evalLater([]() { KJ_FAIL_ASSERT("foo"); }).detach([&](kj::Exception&& e) { ran3 = true; });'), (3, 1, u'+  evalLater([]() { KJ_FAIL_ASSERT("foo"){break;} }).detach([&](kj::Exception&& e) { ran3 = true; });')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  evalLater([]() { KJ_FAIL_ASSERT("foo"); }).detach([&](kj::Exception&& e) { ran3 = true; });'), (3, 1, u'+  evalLater([]() { KJ_FAIL_ASSERT("foo"){break;} }).detach([&](kj::Exception&& e) { ran3 = true; });')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  evalLater([]() { KJ_FAIL_ASSERT("foo"); }).detach([&](kj::Exception&& e) { ran3 = true; });'), (3, 1, u'+  evalLater([]() { KJ_FAIL_ASSERT("foo"){break;} }).detach([&](kj::Exception&& e) { ran3 = true; });')]
===========================================
Class:   class Canceler {   class Canceler 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      return kj::mv(KJ_ASSERT_NONNULL(contextPtr->response));'), (14, 1, u'+      return kj::mv(KJ_ASSERT_NONNULL(context->response));')]
===========================================
===========================================
Total add: 5
Total del: 9
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      return kj::mv(KJ_ASSERT_NONNULL(contextPtr->response));'), (14, 1, u'+      return kj::mv(KJ_ASSERT_NONNULL(context->response));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      return kj::mv(KJ_ASSERT_NONNULL(contextPtr->response));'), (14, 1, u'+      return kj::mv(KJ_ASSERT_NONNULL(context->response));')]
===========================================
Class:class NeverReadyPromiseNode final: public _::PromiseNode { class NeverReadyPromiseNode final: public _::PromiseNode 
Class:class NeverDonePromiseNode final: public _::PromiseNode { class NeverDonePromiseNode final: public _::PromiseNode 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    KJ_FAIL_ASSERT("Invalid capability descriptor in message.") {')]
===========================================
===========================================
Total add: 11
Total del: 5
Header: ImbuedReaderArena::reportReadLimitReached
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    KJ_FAIL_ASSERT("Invalid capability descriptor in message.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    KJ_FAIL_ASSERT("Invalid capability descriptor in message.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    KJ_FAIL_ASSERT("Invalid capability descriptor in message.") {')]
===========================================
===========================================
Total add: 11
Total del: 5
Header: ImbuedBuilderArena::reportReadLimitReached
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    KJ_FAIL_ASSERT("Invalid capability descriptor in message.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    KJ_FAIL_ASSERT("Invalid capability descriptor in message.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  KJ_ASSERT(index < capTable.size(), "Invalid capability descriptor in message.") {')]
===========================================
===========================================
Total add: 11
Total del: 6
Header: ImbuedBuilderArena::allocate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  KJ_ASSERT(index < capTable.size(), "Invalid capability descriptor in message.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  KJ_ASSERT(index < capTable.size(), "Invalid capability descriptor in message.") {')]
===========================================
Class:class BrokenCapFactoryImpl: public _::BrokenCapFactory { class BrokenCapFactoryImpl: public _::BrokenCapFactory 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    static_assert(sizeof(arena()) <= sizeof(arenaSpace),')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: CapReaderContext::~CapReaderContext
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    static_assert(sizeof(arena()) <= sizeof(arenaSpace),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    static_assert(sizeof(arena()) <= sizeof(arenaSpace),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(sizeof(arena()) <= sizeof(arenaSpace),')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: CapBuilderContext::~CapBuilderContext
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(sizeof(arena()) <= sizeof(arenaSpace),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(sizeof(arena()) <= sizeof(arenaSpace),')]
===========================================
Class:class LocalCapDescriptor::Reader { class LocalCapDescriptor::Reader 
Class: class LocalCapDescriptor::Builder { class LocalCapDescriptor::Builder 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-  KJ_ASSERT(descriptor.getIndex() < lock->caps.size(),'), (23, 2, u'-  KJ_ASSERT(descriptor.getIndex() < lock->caps.size(),')]
===========================================
===========================================
Total add: 0
Total del: 26
Header: LocalMessage::LocalMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-  KJ_ASSERT(descriptor.getIndex() < lock->caps.size(),'), (23, 2, u'-  KJ_ASSERT(descriptor.getIndex() < lock->caps.size(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-  KJ_ASSERT(descriptor.getIndex() < lock->caps.size(),'), (23, 2, u'-  KJ_ASSERT(descriptor.getIndex() < lock->caps.size(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        KJ_FAIL_ASSERT("Unexpected OTHER pointer.") {')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        KJ_FAIL_ASSERT("Unexpected OTHER pointer.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        KJ_FAIL_ASSERT("Unexpected OTHER pointer.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        KJ_FAIL_ASSERT("Far pointer should have been handled above.") {')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        KJ_FAIL_ASSERT("Far pointer should have been handled above.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        KJ_FAIL_ASSERT("Far pointer should have been handled above.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        KJ_FAIL_ASSERT("Far pointer should have been handled above.") {')]
===========================================
===========================================
Total add: 0
Total del: 5
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        KJ_FAIL_ASSERT("Far pointer should have been handled above.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        KJ_FAIL_ASSERT("Far pointer should have been handled above.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: OrphanBuilder::asListReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
Class:   class CapExtractorImpl: public CapExtractor<rpc::CapDescriptor> {   class CapExtractorImpl: public CapExtractor<rpc::CapDescriptor> 
Class:   class ResolutionChain: public kj::Refcounted {   class ResolutionChain: public kj::Refcounted 
Class:        class CapExtractorImpl final: public CapExtractor<rpc::CapDescriptor> {   class CapExtractorImpl final: public CapExtractor<rpc::CapDescriptor> 
Class:      class CapInjectorImpl final: public CapInjector<rpc::CapDescriptor> {   class CapInjectorImpl final: public CapInjector<rpc::CapDescriptor> 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            *KJ_ASSERT_NONNULL(response)).send(), true);'), (9, 1, u'+        auto exports = kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send();')]
===========================================
===========================================
Total add: 9
Total del: 5
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            *KJ_ASSERT_NONNULL(response)).send(), true);'), (9, 1, u'+        auto exports = kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send();')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            *KJ_ASSERT_NONNULL(response)).send(), true);'), (9, 1, u'+        auto exports = kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send();')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        KJ_ASSERT(resultExports.size() == 0);'), (26, 1, u'+          KJ_ASSERT(resultExports.size() == 0);')]
===========================================
===========================================
Total add: 10
Total del: 11
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        KJ_ASSERT(resultExports.size() == 0);'), (26, 1, u'+          KJ_ASSERT(resultExports.size() == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        KJ_ASSERT(resultExports.size() == 0);'), (26, 1, u'+          KJ_ASSERT(resultExports.size() == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        KJ_DASSERT(capTable.size() == 1);')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        KJ_DASSERT(capTable.size() == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        KJ_DASSERT(capTable.size() == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 1, u'+      ASSERT_EQ(3u, list.size());'), (62, 1, u'+      ASSERT_EQ(3u, list.size());'), (74, 1, u'+      ASSERT_EQ(2u, list.size());'), (81, 1, u'+      ASSERT_EQ(2u, list.size());'), (90, 1, u'+      ASSERT_EQ(2u, list.size());'), (96, 1, u'+      ASSERT_EQ(2u, list.size());'), (104, 1, u'+      ASSERT_EQ(2u, list.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Objects can\'t have literal values.");'), (5, 1, u'+      KJ_FAIL_ASSERT("AnyPointers can\'t have literal values.");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ValueTranslator::compileValue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Objects can\'t have literal values.");'), (5, 1, u'+      KJ_FAIL_ASSERT("AnyPointers can\'t have literal values.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Objects can\'t have literal values.");'), (5, 1, u'+      KJ_FAIL_ASSERT("AnyPointers can\'t have literal values.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value.");'), (3, 1, u'+            KJ_FAIL_ASSERT("Unrecognized AnyPointer-typed member of schema::Value.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NodeTranslator::readConstant
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value.");'), (3, 1, u'+            KJ_FAIL_ASSERT("Unrecognized AnyPointer-typed member of schema::Value.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value.");'), (3, 1, u'+            KJ_FAIL_ASSERT("Unrecognized AnyPointer-typed member of schema::Value.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case schema::Type::OBJECT: KJ_FAIL_ASSERT("List(Object) not supported."); break;'), (3, 1, u'+    case schema::Type::ANY_POINTER: KJ_FAIL_ASSERT("List(AnyPointer) not supported."); break;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: elementSizeFor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case schema::Type::OBJECT: KJ_FAIL_ASSERT("List(Object) not supported."); break;'), (3, 1, u'+    case schema::Type::ANY_POINTER: KJ_FAIL_ASSERT("List(AnyPointer) not supported."); break;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case schema::Type::OBJECT: KJ_FAIL_ASSERT("List(Object) not supported."); break;'), (3, 1, u'+    case schema::Type::ANY_POINTER: KJ_FAIL_ASSERT("List(AnyPointer) not supported."); break;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.");'), (5, 1, u'+      KJ_FAIL_ASSERT("List(AnyPointer) not supported.");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: DynamicList::Builder::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.");'), (5, 1, u'+      KJ_FAIL_ASSERT("List(AnyPointer) not supported.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.");'), (5, 1, u'+      KJ_FAIL_ASSERT("List(AnyPointer) not supported.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.") {'), (5, 1, u'+      KJ_FAIL_ASSERT("List(AnyPointer) not supported.") {')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: DynamicList::Builder::set
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.") {'), (5, 1, u'+      KJ_FAIL_ASSERT("List(AnyPointer) not supported.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.") {'), (5, 1, u'+      KJ_FAIL_ASSERT("List(AnyPointer) not supported.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.");'), (5, 1, u'+      KJ_FAIL_ASSERT("List(AnyPointer) not supported.");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: DynamicList::Builder::init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.");'), (5, 1, u'+      KJ_FAIL_ASSERT("List(AnyPointer) not supported.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.");'), (5, 1, u'+      KJ_FAIL_ASSERT("List(AnyPointer) not supported.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.");'), (5, 1, u'+      KJ_FAIL_ASSERT("List(AnyPointer) not supported.");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: DynamicList::Builder::adopt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.");'), (5, 1, u'+      KJ_FAIL_ASSERT("List(AnyPointer) not supported.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.");'), (5, 1, u'+      KJ_FAIL_ASSERT("List(AnyPointer) not supported.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Can\'t get() an untyped Object orphan; there is no underlying pointer to "'), (6, 1, u'+      KJ_FAIL_ASSERT("Can\'t get() an AnyPointer orphan; there is no underlying pointer to "')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: Orphan<DynamicValue>::getReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Can\'t get() an untyped Object orphan; there is no underlying pointer to "'), (6, 1, u'+      KJ_FAIL_ASSERT("Can\'t get() an AnyPointer orphan; there is no underlying pointer to "')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Can\'t get() an untyped Object orphan; there is no underlying pointer to "'), (6, 1, u'+      KJ_FAIL_ASSERT("Can\'t get() an AnyPointer orphan; there is no underlying pointer to "')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 2, u'-      ASSERT_EQ(3u, list.size());'), (62, 2, u'-      ASSERT_EQ(3u, list.size());'), (74, 2, u'-      ASSERT_EQ(2u, list.size());'), (81, 2, u'-      ASSERT_EQ(2u, list.size());'), (90, 2, u'-      ASSERT_EQ(2u, list.size());'), (96, 2, u'-      ASSERT_EQ(2u, list.size());'), (103, 2, u'-      ASSERT_EQ(2u, list.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  ASSERT_EQ(2u, root.asReader().getObjectField().getAs<List<TestAllTypes>>().size());'), (13, 1, u'+  ASSERT_EQ(2u, root.asReader().getAnyPointerField().getAs<List<TestAllTypes>>().size());')]
===========================================
===========================================
Total add: 8
Total del: 6
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  ASSERT_EQ(2u, root.asReader().getObjectField().getAs<List<TestAllTypes>>().size());'), (13, 1, u'+  ASSERT_EQ(2u, root.asReader().getAnyPointerField().getAs<List<TestAllTypes>>().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  ASSERT_EQ(2u, root.asReader().getObjectField().getAs<List<TestAllTypes>>().size());'), (13, 1, u'+  ASSERT_EQ(2u, root.asReader().getAnyPointerField().getAs<List<TestAllTypes>>().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  evalLater([]() { KJ_FAIL_ASSERT("foo"); }).daemonize([&](kj::Exception&& e) { ran3 = true; });'), (5, 1, u'+  evalLater([]() { KJ_FAIL_ASSERT("foo"); }).detach([&](kj::Exception&& e) { ran3 = true; });')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  evalLater([]() { KJ_FAIL_ASSERT("foo"); }).daemonize([&](kj::Exception&& e) { ran3 = true; });'), (5, 1, u'+  evalLater([]() { KJ_FAIL_ASSERT("foo"); }).detach([&](kj::Exception&& e) { ran3 = true; });')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  evalLater([]() { KJ_FAIL_ASSERT("foo"); }).daemonize([&](kj::Exception&& e) { ran3 = true; });'), (5, 1, u'+  evalLater([]() { KJ_FAIL_ASSERT("foo"); }).detach([&](kj::Exception&& e) { ran3 = true; });')]
===========================================
Class:class TestTailCallerDynamicImpl final: public DynamicCapability::Server { class TestTailCallerDynamicImpl final: public DynamicCapability::Server 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(addrs.size() == 1,')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(addrs.size() == 1,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(addrs.size() == 1,')]
===========================================
Class: class SocketAddress::LookupReader { class SocketAddress::LookupReader 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(132, 1, u'+        static_assert(__has_trivial_copy(SocketAddress), "Can\'t write() SocketAddress...");')]
===========================================
===========================================
Total add: 144
Total del: 4
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(132, 1, u'+        static_assert(__has_trivial_copy(SocketAddress), "Can\'t write() SocketAddress...");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(132, 1, u'+        static_assert(__has_trivial_copy(SocketAddress), "Can\'t write() SocketAddress...");')]
===========================================
Class:class LocalSocketAddress final: public LocalAddress { class LocalSocketAddress final: public LocalAddress 
Class:class NetworkAddressImpl final: public NetworkAddress { class NetworkAddressImpl final: public NetworkAddress 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    KJ_ASSERT(addrs.size() == 1,')]
===========================================
===========================================
Total add: 11
Total del: 4
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    KJ_ASSERT(addrs.size() == 1,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    KJ_ASSERT(addrs.size() == 1,')]
===========================================
Class:class RemoteSocketAddress final: public RemoteAddress { class RemoteSocketAddress final: public RemoteAddress 
Class:class AsyncStreamFd: public AsyncIoStream { class AsyncStreamFd: public AsyncIoStream 
Class:class AsyncStreamFd: public OwnedFileDescriptor, public AsyncIoStream { class AsyncStreamFd: public OwnedFileDescriptor, public AsyncIoStream 
Class:class Socket final: public OwnedFileDescriptor, public AsyncStreamFd { class Socket final: public OwnedFileDescriptor, public AsyncStreamFd 
Class: class ThreadSocket final: public Thread, public OwnedFileDescriptor, public AsyncStreamFd { class ThreadSocket final: public Thread, public OwnedFileDescriptor, public AsyncStreamFd 
Class:class LowLevelAsyncIoProviderImpl final: public LowLevelAsyncIoProvider { class LowLevelAsyncIoProviderImpl final: public LowLevelAsyncIoProvider 
Class:class UnixAsyncIoProvider final: public AsyncIoProvider { class UnixAsyncIoProvider final: public AsyncIoProvider 
Class:class AsyncIoProviderImpl final: public AsyncIoProvider { class AsyncIoProviderImpl final: public AsyncIoProvider 
Class:class EzRpcContext: public kj::Refcounted { class EzRpcContext: public kj::Refcounted 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(139, 1, u'+      return KJ_ASSERT_NONNULL(impl->clientContext)->restore(name);')]
===========================================
Class:class DummyEventPort: public EventPort { class DummyEventPort: public EventPort 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  void wait() override { KJ_FAIL_ASSERT("Nothing to wait for."); }')]
===========================================
===========================================
Total add: 57
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  void wait() override { KJ_FAIL_ASSERT("Nothing to wait for."); }')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  void wait() override { KJ_FAIL_ASSERT("Nothing to wait for."); }')]
===========================================
Class:class CaptureSignalsOnInit { class CaptureSignalsOnInit 
Class: class ThreadSocket final: public Thread, public OwnedFileDescriptor, public AsyncStreamFd { class ThreadSocket final: public Thread, public OwnedFileDescriptor, public AsyncStreamFd 
Class:class UnixAsyncIoProvider final: public AsyncIoProvider { class UnixAsyncIoProvider final: public AsyncIoProvider 
Class:class UnixEventLoop::SignalPromiseAdapter { class UnixEventLoop::SignalPromiseAdapter 
Class:class UnixEventPort::SignalPromiseAdapter { class UnixEventPort::SignalPromiseAdapter 
Class:class UnixEventLoop::PollPromiseAdapter { class UnixEventLoop::PollPromiseAdapter 
Class:class UnixEventPort::PollPromiseAdapter { class UnixEventPort::PollPromiseAdapter 
Class:class UnixEventPort::PollContext { class UnixEventPort::PollContext 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+      KJ_FAIL_ASSERT("sigsuspend() shouldn\'t return because the signal handler should "')]
===========================================
===========================================
Total add: 56
Total del: 18
Header: UnixEventLoop::sleep
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+      KJ_FAIL_ASSERT("sigsuspend() shouldn\'t return because the signal handler should "')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+      KJ_FAIL_ASSERT("sigsuspend() shouldn\'t return because the signal handler should "')]
===========================================
Class:class NullEventPort: public EventPort { class NullEventPort: public EventPort 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  daemonize(evalLater([]() { KJ_FAIL_ASSERT("foo"); }), [&](kj::Exception&& e) { ran3 = true; });'), (5, 1, u'+  evalLater([]() { KJ_FAIL_ASSERT("foo"); }).daemonize([&](kj::Exception&& e) { ran3 = true; });')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  daemonize(evalLater([]() { KJ_FAIL_ASSERT("foo"); }), [&](kj::Exception&& e) { ran3 = true; });'), (5, 1, u'+  evalLater([]() { KJ_FAIL_ASSERT("foo"); }).daemonize([&](kj::Exception&& e) { ran3 = true; });')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  daemonize(evalLater([]() { KJ_FAIL_ASSERT("foo"); }), [&](kj::Exception&& e) { ran3 = true; });'), (5, 1, u'+  evalLater([]() { KJ_FAIL_ASSERT("foo"); }).daemonize([&](kj::Exception&& e) { ran3 = true; });')]
===========================================
Class:class NeverReadyPromiseNode final: public _::PromiseNode { class NeverReadyPromiseNode final: public _::PromiseNode 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  daemonize(evalLater([]() { KJ_FAIL_ASSERT("foo"); }), [&](kj::Exception&& e) { ran3 = true; });')]
===========================================
===========================================
Total add: 22
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  daemonize(evalLater([]() { KJ_FAIL_ASSERT("foo"); }), [&](kj::Exception&& e) { ran3 = true; });')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  daemonize(evalLater([]() { KJ_FAIL_ASSERT("foo"); }), [&](kj::Exception&& e) { ran3 = true; });')]
===========================================
Class:class BoolEvent: public _::Event { class BoolEvent: public _::Event 
Class:  class Task final: public EventLoop::Event {   class Task final: public EventLoop::Event 
Class:  class Task final: public Event {   class Task final: public Event 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_ASSERT(connectionState->questions.erase(id));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_ASSERT(connectionState->questions.erase(id));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_ASSERT(connectionState->questions.erase(id));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(), true);'), (6, 1, u'+            *KJ_ASSERT_NONNULL(response)).send(), true);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(), true);'), (6, 1, u'+            *KJ_ASSERT_NONNULL(response)).send(), true);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(), true);'), (6, 1, u'+            *KJ_ASSERT_NONNULL(response)).send(), true);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-        ASSERT_EQ(&me, head->owner);')]
===========================================
===========================================
Total add: 0
Total del: 65
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-        ASSERT_EQ(&me, head->owner);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-        ASSERT_EQ(&me, head->owner);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-        ASSERT_EQ(4u, item.size());')]
===========================================
===========================================
Total add: 0
Total del: 48
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-        ASSERT_EQ(4u, item.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-        ASSERT_EQ(4u, item.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 2, u'-      auto& question = KJ_ASSERT_NONNULL('), (53, 2, u'-        KJ_ASSERT(connectionState->questions.erase(id));'), (60, 1, u'+        auto& question = KJ_ASSERT_NONNULL('), (64, 1, u'+          KJ_ASSERT(connectionState->questions.erase(id));')]
===========================================
===========================================
Total add: 33
Total del: 31
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 2, u'-      auto& question = KJ_ASSERT_NONNULL('), (53, 2, u'-        KJ_ASSERT(connectionState->questions.erase(id));'), (60, 1, u'+        auto& question = KJ_ASSERT_NONNULL('), (64, 1, u'+          KJ_ASSERT(connectionState->questions.erase(id));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 2, u'-      auto& question = KJ_ASSERT_NONNULL('), (53, 2, u'-        KJ_ASSERT(connectionState->questions.erase(id));'), (60, 1, u'+        auto& question = KJ_ASSERT_NONNULL('), (64, 1, u'+          KJ_ASSERT(connectionState->questions.erase(id));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-        auto& exp = KJ_ASSERT_NONNULL(tables.exports.find(iter->second));'), (11, 1, u'+        auto& exp = KJ_ASSERT_NONNULL(exports.find(iter->second));')]
===========================================
===========================================
Total add: 5
Total del: 4
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-        auto& exp = KJ_ASSERT_NONNULL(tables.exports.find(iter->second));'), (11, 1, u'+        auto& exp = KJ_ASSERT_NONNULL(exports.find(iter->second));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-        auto& exp = KJ_ASSERT_NONNULL(tables.exports.find(iter->second));'), (11, 1, u'+        auto& exp = KJ_ASSERT_NONNULL(exports.find(iter->second));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));'), (5, 1, u'+      auto& exp = KJ_ASSERT_NONNULL(exports.find(exportId));')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));'), (5, 1, u'+      auto& exp = KJ_ASSERT_NONNULL(exports.find(exportId));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));'), (5, 1, u'+      auto& exp = KJ_ASSERT_NONNULL(exports.find(exportId));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_ASSERT(retainedCaps.getWithoutLock().size() == 0 ||'), (4, 1, u'+      KJ_ASSERT(retainedCaps.size() == 0 || connectionState.networkException != nullptr,')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_ASSERT(retainedCaps.getWithoutLock().size() == 0 ||'), (4, 1, u'+      KJ_ASSERT(retainedCaps.size() == 0 || connectionState.networkException != nullptr,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_ASSERT(retainedCaps.getWithoutLock().size() == 0 ||'), (4, 1, u'+      KJ_ASSERT(retainedCaps.size() == 0 || connectionState.networkException != nullptr,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-          KJ_ASSERT(tables.exports.find(*exportId) != nullptr);'), (6, 1, u'+          KJ_ASSERT(connectionState.exports.find(*exportId) != nullptr);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-          KJ_ASSERT(tables.exports.find(*exportId) != nullptr);'), (6, 1, u'+          KJ_ASSERT(connectionState.exports.find(*exportId) != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-          KJ_ASSERT(tables.exports.find(*exportId) != nullptr);'), (6, 1, u'+          KJ_ASSERT(connectionState.exports.find(*exportId) != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        auto& question = KJ_ASSERT_NONNULL('), (8, 2, u'-          KJ_ASSERT(lock->questions.erase(id));'), (12, 1, u'+      auto& question = KJ_ASSERT_NONNULL('), (16, 1, u'+        KJ_ASSERT(connectionState->questions.erase(id));')]
===========================================
===========================================
Total add: 7
Total del: 10
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        auto& question = KJ_ASSERT_NONNULL('), (8, 2, u'-          KJ_ASSERT(lock->questions.erase(id));'), (12, 1, u'+      auto& question = KJ_ASSERT_NONNULL('), (16, 1, u'+        KJ_ASSERT(connectionState->questions.erase(id));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        auto& question = KJ_ASSERT_NONNULL('), (8, 2, u'-          KJ_ASSERT(lock->questions.erase(id));'), (12, 1, u'+      auto& question = KJ_ASSERT_NONNULL('), (16, 1, u'+        KJ_ASSERT(connectionState->questions.erase(id));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (5, 1, u'+      KJ_ASSERT(state.is<Waiting>(), "Already resolved?");')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (5, 1, u'+      KJ_ASSERT(state.is<Waiting>(), "Already resolved?");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (5, 1, u'+      KJ_ASSERT(state.is<Waiting>(), "Already resolved?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (5, 1, u'+      KJ_ASSERT(state.is<Waiting>(), "Already resolved?");')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (5, 1, u'+      KJ_ASSERT(state.is<Waiting>(), "Already resolved?");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (5, 1, u'+      KJ_ASSERT(state.is<Waiting>(), "Already resolved?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(tables), true);'), (7, 1, u'+            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(), true);')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(tables), true);'), (7, 1, u'+            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(), true);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(tables), true);'), (7, 1, u'+            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(), true);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      KJ_DASSERT(connectionState->tables.getAlreadyLockedExclusive()')]
===========================================
===========================================
Total add: 0
Total del: 6
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      KJ_DASSERT(connectionState->tables.getAlreadyLockedExclusive()')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      KJ_DASSERT(connectionState->tables.getAlreadyLockedExclusive()')]
===========================================
Class:class CaptureSignalsOnInit { class CaptureSignalsOnInit 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-              KJ_ASSERT_NONNULL(redirectLater).addBranch(),'), (12, 1, u'+          resolveSelfPromise(KJ_ASSERT_NONNULL(redirectLater).addBranch().then(')]
===========================================
===========================================
Total add: 5
Total del: 6
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-              KJ_ASSERT_NONNULL(redirectLater).addBranch(),'), (12, 1, u'+          resolveSelfPromise(KJ_ASSERT_NONNULL(redirectLater).addBranch().then(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-              KJ_ASSERT_NONNULL(redirectLater).addBranch(),'), (12, 1, u'+          resolveSelfPromise(KJ_ASSERT_NONNULL(redirectLater).addBranch().then(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(tables));'), (3, 1, u'+            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(tables), true);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(tables));'), (3, 1, u'+            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(tables), true);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(tables));'), (3, 1, u'+            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(tables), true);')]
===========================================
Class: class UnixEventLoop::SignalJob { class UnixEventLoop::SignalJob 
Class: class UnixEventLoop::PollJob { class UnixEventLoop::PollJob 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      KJ_ASSERT(iter != taskSet.tasks.end());')]
===========================================
===========================================
Total add: 11
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      KJ_ASSERT(iter != taskSet.tasks.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      KJ_ASSERT(iter != taskSet.tasks.end());')]
===========================================
Class:class DummyErrorHandler: public TaskSet::ErrorHandler { class DummyErrorHandler: public TaskSet::ErrorHandler 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (4, 1, u'+      [&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (4, 1, u'+      [&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (4, 1, u'+      [&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (4, 1, u'+      [&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (4, 1, u'+      [&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (4, 1, u'+      [&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (4, 1, u'+      [&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (4, 1, u'+      [&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (4, 1, u'+      [&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (4, 1, u'+      [&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (4, 1, u'+      [&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (4, 1, u'+      [&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });')]
===========================================
Class:class DummyErrorHandler: public TaskSet::ErrorHandler { class DummyErrorHandler: public TaskSet::ErrorHandler 
Class:class RpcTest: public testing::Test { class RpcTest: public testing::Test 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_ASSERT(retainedCaps.getWithoutLock().size() == 0,'), (3, 1, u'+      KJ_ASSERT(retainedCaps.getWithoutLock().size() == 0 ||')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_ASSERT(retainedCaps.getWithoutLock().size() == 0,'), (3, 1, u'+      KJ_ASSERT(retainedCaps.getWithoutLock().size() == 0 ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_ASSERT(retainedCaps.getWithoutLock().size() == 0,'), (3, 1, u'+      KJ_ASSERT(retainedCaps.getWithoutLock().size() == 0 ||')]
===========================================
Class:   class Canceler {   class Canceler 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-            KJ_FAIL_ASSERT("Method implementation failed to fill in results.");'), (34, 1, u'+      return kj::mv(KJ_ASSERT_NONNULL(contextPtr->response));')]
===========================================
===========================================
Total add: 28
Total del: 9
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-            KJ_FAIL_ASSERT("Method implementation failed to fill in results.");'), (34, 1, u'+      return kj::mv(KJ_ASSERT_NONNULL(contextPtr->response));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-            KJ_FAIL_ASSERT("Method implementation failed to fill in results.");'), (34, 1, u'+      return kj::mv(KJ_ASSERT_NONNULL(contextPtr->response));')]
===========================================
Class:class TestCapDestructor final: public test::TestInterface::Server { class TestCapDestructor final: public test::TestInterface::Server 
Class:class RpcDumper { class RpcDumper 
Class:   class CapExtractorImpl: public CapExtractor<rpc::CapDescriptor> {   class CapExtractorImpl: public CapExtractor<rpc::CapDescriptor> 
Class:  class ConnectionImpl final: public Connection, public kj::Refcounted {   class ConnectionImpl final: public Connection, public kj::Refcounted 
Class:  class ConnectionImpl final       : public Connection, public kj::Refcounted, public kj::TaskSet::ErrorHandler {       : public Connection, public kj::Refcounted, public kj::TaskSet::ErrorHandler 
Class:    class IncomingRpcMessageImpl final: public IncomingRpcMessage {     class IncomingRpcMessageImpl final: public IncomingRpcMessage 
Class:    class IncomingRpcMessageImpl final: public IncomingRpcMessage, public kj::Refcounted {     class IncomingRpcMessageImpl final: public IncomingRpcMessage, public kj::Refcounted 
Class:class TaskSetImpl { class TaskSetImpl 
Class: class LoggingErrorHandler: public TaskSet::ErrorHandler { class LoggingErrorHandler: public TaskSet::ErrorHandler 
Class:class TaskSet::Impl { class TaskSet::Impl 
Class:   class Task final: public EventLoop::Event {   class Task final: public EventLoop::Event 
Class:class TestCapDestructor final: public test::TestInterface::Server { class TestCapDestructor final: public test::TestInterface::Server 
Class:  class RpcResponse final: public ResponseHook, public kj::Refcounted {   class RpcResponse final: public ResponseHook, public kj::Refcounted 
Class:  class RpcResponse: public ResponseHook {   class RpcResponse: public ResponseHook 
Class:   class RpcResponseImpl final: public RpcResponse, public kj::Refcounted {   class RpcResponseImpl final: public RpcResponse, public kj::Refcounted 
Class:   class RpcServerResponseImpl final: public RpcServerResponse {   class RpcServerResponseImpl final: public RpcServerResponse 
Class:  class LocallyRedirectedRpcResponse final       : public RpcResponse, public RpcServerResponse, public kj::Refcounted{       : public RpcResponse, public RpcServerResponse, public kj::Refcounted
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      KJ_ASSERT(redirectResults);'), (9, 1, u'+      return kj::downcast<LocallyRedirectedRpcResponse>(*KJ_ASSERT_NONNULL(response)).addRef();'), (13, 1, u'+      KJ_ASSERT(!redirectResults);')]
===========================================
===========================================
Total add: 11
Total del: 0
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      KJ_ASSERT(redirectResults);'), (9, 1, u'+      return kj::downcast<LocallyRedirectedRpcResponse>(*KJ_ASSERT_NONNULL(response)).addRef();'), (13, 1, u'+      KJ_ASSERT(!redirectResults);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      KJ_ASSERT(redirectResults);'), (9, 1, u'+      return kj::downcast<LocallyRedirectedRpcResponse>(*KJ_ASSERT_NONNULL(response)).addRef();'), (13, 1, u'+      KJ_ASSERT(!redirectResults);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        cleanupAnswerTable(kj::mv(lock), KJ_ASSERT_NONNULL(response)->send(tables));'), (4, 1, u'+            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(tables));')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        cleanupAnswerTable(kj::mv(lock), KJ_ASSERT_NONNULL(response)->send(tables));'), (4, 1, u'+            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(tables));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        cleanupAnswerTable(kj::mv(lock), KJ_ASSERT_NONNULL(response)->send(tables));'), (4, 1, u'+            kj::downcast<RpcServerResponseImpl>(*KJ_ASSERT_NONNULL(response)).send(tables));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      KJ_ASSERT(!redirectResults);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      KJ_ASSERT(!redirectResults);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      KJ_ASSERT(!redirectResults);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+            KJ_FAIL_ASSERT("Method implementation failed to fill in results.");')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+            KJ_FAIL_ASSERT("Method implementation failed to fill in results.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+            KJ_FAIL_ASSERT("Method implementation failed to fill in results.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+        KJ_ASSERT(!response) { break; }')]
===========================================
===========================================
Total add: 47
Total del: 0
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+        KJ_ASSERT(!response) { break; }')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+        KJ_ASSERT(!response) { break; }')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+              KJ_ASSERT_NONNULL(redirectLater).addBranch(),')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+              KJ_ASSERT_NONNULL(redirectLater).addBranch(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+              KJ_ASSERT_NONNULL(redirectLater).addBranch(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        KJ_ASSERT_NONNULL(response)->send();'), (6, 1, u'+        cleanupAnswerTable(kj::mv(lock), KJ_ASSERT_NONNULL(response)->send(tables));')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        KJ_ASSERT_NONNULL(response)->send();'), (6, 1, u'+        cleanupAnswerTable(kj::mv(lock), KJ_ASSERT_NONNULL(response)->send(tables));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        KJ_ASSERT_NONNULL(response)->send();'), (6, 1, u'+        cleanupAnswerTable(kj::mv(lock), KJ_ASSERT_NONNULL(response)->send(tables));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+          KJ_ASSERT(redirect == nullptr,')]
===========================================
===========================================
Total add: 41
Total del: 0
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+          KJ_ASSERT(redirect == nullptr,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+          KJ_ASSERT(redirect == nullptr,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+      auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));')]
===========================================
===========================================
Total add: 86
Total del: 0
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+      auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+      auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+          KJ_ASSERT_NONNULL(embargo->fulfiller)->fulfill();')]
===========================================
===========================================
Total add: 72
Total del: 0
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+          KJ_ASSERT_NONNULL(embargo->fulfiller)->fulfill();')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+          KJ_ASSERT_NONNULL(embargo->fulfiller)->fulfill();')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));')]
===========================================
===========================================
Total add: 1
Total del: 6
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));')]
===========================================
Class:   class ResolutionChain: public kj::Refcounted {   class ResolutionChain: public kj::Refcounted 
Class:   class ExportDisposer final: public kj::Disposer {   class ExportDisposer final: public kj::Disposer 
Class:  class QuestionRef {   class QuestionRef 
Class:  class QuestionRef: public kj::Refcounted {   class QuestionRef: public kj::Refcounted 
Class:  class ImportClient: public RpcClient {   class ImportClient: public RpcClient 
Class:  class SettledImportClient final: public ImportClient {   class SettledImportClient final: public ImportClient 
Class:  class PipelineClient final: public RpcClient {   class PipelineClient final: public RpcClient 
Class:  class PromiseImportClient final: public ImportClient {   class PromiseImportClient final: public ImportClient 
Class:  class PromisedAnswerClient final: public RpcClient {   class PromisedAnswerClient final: public RpcClient 
Class:  class PromiseClient final: public RpcClient {   class PromiseClient final: public RpcClient 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (10, 2, u'-      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");')]
===========================================
===========================================
Total add: 6
Total del: 10
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (10, 2, u'-      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (10, 2, u'-      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+          KJ_ASSERT(tables.exports.find(*exportId) != nullptr);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+          KJ_ASSERT(tables.exports.find(*exportId) != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+          KJ_ASSERT(tables.exports.find(*exportId) != nullptr);')]
===========================================
Class:class DestructorDetector { class DestructorDetector 
Class:class RpcConnectionState final: public kj::TaskSet::ErrorHandler { class RpcConnectionState final: public kj::TaskSet::ErrorHandler 
Class:class RpcConnectionState final: public kj::TaskSet::ErrorHandler, public kj::Refcounted { class RpcConnectionState final: public kj::TaskSet::ErrorHandler, public kj::Refcounted 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));'), (10, 1, u'+          auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));')]
===========================================
===========================================
Total add: 8
Total del: 5
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));'), (10, 1, u'+          auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));'), (10, 1, u'+          auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));')]
===========================================
Class:  class QuestionRef: public kj::Refcounted {   class QuestionRef: public kj::Refcounted 
Class:  class QuestionRef {   class QuestionRef 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_DASSERT(connectionState.tables.getAlreadyLockedExclusive()'), (3, 1, u'+      KJ_DASSERT(connectionState->tables.getAlreadyLockedExclusive()')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_DASSERT(connectionState.tables.getAlreadyLockedExclusive()'), (3, 1, u'+      KJ_DASSERT(connectionState->tables.getAlreadyLockedExclusive()')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_DASSERT(connectionState.tables.getAlreadyLockedExclusive()'), (3, 1, u'+      KJ_DASSERT(connectionState->tables.getAlreadyLockedExclusive()')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+          KJ_FAIL_ASSERT("foo") { break; }')]
===========================================
===========================================
Total add: 18
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+          KJ_FAIL_ASSERT("foo") { break; }')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+          KJ_FAIL_ASSERT("foo") { break; }')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_FAIL_ASSERT("Fired event list head.");')]
===========================================
===========================================
Total add: 1
Total del: 8
Header: EventLoop::isCurrent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_FAIL_ASSERT("Fired event list head.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_FAIL_ASSERT("Fired event list head.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    KJ_ASSERT(next == this,')]
===========================================
===========================================
Total add: 20
Total del: 39
Header: EventLoop::yieldIfSameThread
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    KJ_ASSERT(next == this,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    KJ_ASSERT(next == this,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        KJ_DASSERT(state == INITIALIZING_WITH_WAITERS);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: Once::runOnce
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        KJ_DASSERT(state == INITIALIZING_WITH_WAITERS);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        KJ_DASSERT(state == INITIALIZING_WITH_WAITERS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-    KJ_ASSERT(__atomic_load_n(&futex, __ATOMIC_ACQUIRE) == INITIALIZED);')]
===========================================
===========================================
Total add: 44
Total del: 6
Header: Once::runOnce
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-    KJ_ASSERT(__atomic_load_n(&futex, __ATOMIC_ACQUIRE) == INITIALIZED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-    KJ_ASSERT(__atomic_load_n(&futex, __ATOMIC_ACQUIRE) == INITIALIZED);')]
===========================================
Class:class NewWorkCallback { class NewWorkCallback 
Class: template <typename Item> class WorkQueue { class WorkQueue 
Class:      class InitializerImpl: public _::Once::Initializer {       class InitializerImpl: public _::Once::Initializer 
Class:class UnixEventLoop::SignalItem { class UnixEventLoop::SignalItem 
Class:class UnixEventLoop::SignalJob { class UnixEventLoop::SignalJob 
Class:class UnixEventLoop::PollItem { class UnixEventLoop::PollItem 
Class:class UnixEventLoop::PollJob { class UnixEventLoop::PollJob 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(next == nullptr || std::uncaught_exception(),'), (3, 1, u'+    KJ_ASSERT(next == this,')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: EventLoop::Event::~Event
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(next == nullptr || std::uncaught_exception(),'), (3, 1, u'+    KJ_ASSERT(next == this,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(next == nullptr || std::uncaught_exception(),'), (3, 1, u'+    KJ_ASSERT(next == this,')]
===========================================
Class:class YieldPromiseNode final: public _::PromiseNode { class YieldPromiseNode final: public _::PromiseNode 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("Unexpected pipeline type.", (uint)type) { type = UNKNOWN; break; }')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: DynamicValue::Pipeline::Pipeline
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("Unexpected pipeline type.", (uint)type) { type = UNKNOWN; break; }')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("Unexpected pipeline type.", (uint)type) { type = UNKNOWN; break; }')]
===========================================
Class:class UnixKernel: public OperatingSystem { class UnixKernel: public OperatingSystem 
Class:class BrokenPipeline final: public PipelineHook, public kj::Refcounted { class BrokenPipeline final: public PipelineHook, public kj::Refcounted 
Class: class BrokenRequest final: public RequestHook { class BrokenRequest final: public RequestHook 
Class: class BrokenClient final: public ClientHook, public kj::Refcounted { class BrokenClient final: public ClientHook, public kj::Refcounted 
Class:class BrokenPipeline final: public PipelineHook, public kj::Refcounted { class BrokenPipeline final: public PipelineHook, public kj::Refcounted 
Class: class BrokenRequest final: public RequestHook { class BrokenRequest final: public RequestHook 
Class: class BrokenClient final: public ClientHook, public kj::Refcounted { class BrokenClient final: public ClientHook, public kj::Refcounted 
Class:class TestInterfaceImpl final: public test::TestInterface::Server { class TestInterfaceImpl final: public test::TestInterface::Server 
Class:class TestExtendsImpl final: public test::TestExtends::Server { class TestExtendsImpl final: public test::TestExtends::Server 
Class:class TestPipelineImpl final: public test::TestPipeline::Server { class TestPipelineImpl final: public test::TestPipeline::Server 
Class:class TestInterfaceImpl final: public test::TestInterface::Server { class TestInterfaceImpl final: public test::TestInterface::Server 
Class: class TestExtendsImpl final: public test::TestExtends::Server { class TestExtendsImpl final: public test::TestExtends::Server 
Class: class TestPipelineImpl final: public test::TestPipeline::Server { class TestPipelineImpl final: public test::TestPipeline::Server 
Class: class TestRestorer final: public SturdyRefRestorer<test::TestSturdyRef> { class TestRestorer final: public SturdyRefRestorer<test::TestSturdyRef> 
Class:class TestRestorer final: public SturdyRefRestorer<test::TestSturdyRefObjectId> { class TestRestorer final: public SturdyRefRestorer<test::TestSturdyRefObjectId> 
Class:class TestRestorer final: public SturdyRefRestorer<test::TestSturdyRefObjectId> { class TestRestorer final: public SturdyRefRestorer<test::TestSturdyRefObjectId> 
Class:class TwoPartyVatNetwork::OutgoingMessageImpl final class TwoPartyVatNetwork::OutgoingMessageImpl final
Class: class TwoPartyVatNetwork::IncomingMessageImpl final: public IncomingRpcMessage { class TwoPartyVatNetwork::IncomingMessageImpl final: public IncomingRpcMessage 
Class:class FragmentingOutputStream: public kj::OutputStream { class FragmentingOutputStream: public kj::OutputStream 
Class:class TestMessageBuilder: public MallocMessageBuilder { class TestMessageBuilder: public MallocMessageBuilder 
Class:class SerializeAsyncTest: public testing::Test { class SerializeAsyncTest: public testing::Test 
Class:class AsyncMessageReader: public MessageReader { class AsyncMessageReader: public MessageReader 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        KJ_DASSERT(n == 0);'), (3, 1, u'+        KJ_DASSERT(n == firstPiece.size(), n);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        KJ_DASSERT(n == 0);'), (3, 1, u'+        KJ_DASSERT(n == firstPiece.size(), n);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        KJ_DASSERT(n == 0);'), (3, 1, u'+        KJ_DASSERT(n == firstPiece.size(), n);')]
===========================================
Class:class DummyErrorHandler: public TaskSet::ErrorHandler { class DummyErrorHandler: public TaskSet::ErrorHandler 
Class:class OwnedFileDescriptor { class OwnedFileDescriptor 
Class:   class FdConnectionReceiver final: public ConnectionReceiver, public OwnedFileDescriptor { class FdConnectionReceiver final: public ConnectionReceiver, public OwnedFileDescriptor 
Class:   class LocalSocketAddress final: public LocalAddress { class LocalSocketAddress final: public LocalAddress 
Class: class RemoteSocketAddress final: public RemoteAddress { class RemoteSocketAddress final: public RemoteAddress 
Class: class SocketNetwork final: public Network { class SocketNetwork final: public Network 
Class: class UnixKernel: public OperatingSystem { class UnixKernel: public OperatingSystem 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_ASSERT(pthread_join(*reinterpret_cast<pthread_t*>(&threadId), nullptr) == 0);')]
===========================================
===========================================
Total add: 11
Total del: 1
Header: Thread::Thread
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_ASSERT(pthread_join(*reinterpret_cast<pthread_t*>(&threadId), nullptr) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_ASSERT(pthread_join(*reinterpret_cast<pthread_t*>(&threadId), nullptr) == 0);')]
===========================================
Class:class DummyErrorHandler: public TaskSet::ErrorHandler { class DummyErrorHandler: public TaskSet::ErrorHandler 
Class: class AsyncUnixTest: public testing::Test { class AsyncUnixTest: public testing::Test 
Class:class NewWorkCallback { class NewWorkCallback 
Class: template <typename Item> class WorkQueue { class WorkQueue 
Class:      class InitializerImpl: public _::Once::Initializer {       class InitializerImpl: public _::Once::Initializer 
Class: class UnixEventLoop::SignalItem { class UnixEventLoop::SignalItem 
Class: class UnixEventLoop::SignalPromiseAdapter { class UnixEventLoop::SignalPromiseAdapter 
Class: class UnixEventLoop::PollItem { class UnixEventLoop::PollItem 
Class: class UnixEventLoop::PollPromiseAdapter { class UnixEventLoop::PollPromiseAdapter 
Class:class TestNetworkAdapter;
Class:class TestNetwork { class TestNetwork 
Class:class TestNetworkAdapter final: public TestNetworkAdapterBase { class TestNetworkAdapter final: public TestNetworkAdapterBase 
Class:   class TestInterfaceImpl final: public test::TestInterface::Server { class TestInterfaceImpl final: public test::TestInterface::Server 
Class: class TestExtendsImpl final: public test::TestExtends::Server { class TestExtendsImpl final: public test::TestExtends::Server 
Class: class TestPipelineImpl final: public test::TestPipeline::Server { class TestPipelineImpl final: public test::TestPipeline::Server 
Class: class TestRestorer final: public SturdyRefRestorer<test::TestSturdyRef> { class TestRestorer final: public SturdyRefRestorer<test::TestSturdyRef> 
Class: class RpcTest: public testing::Test { class RpcTest: public testing::Test 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_ASSERT(retainedCaps.getWithoutLock().size() > 0,'), (3, 1, u'+      KJ_ASSERT(retainedCaps.getWithoutLock().size() == 0,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_ASSERT(retainedCaps.getWithoutLock().size() > 0,'), (3, 1, u'+      KJ_ASSERT(retainedCaps.getWithoutLock().size() == 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_ASSERT(retainedCaps.getWithoutLock().size() > 0,'), (3, 1, u'+      KJ_ASSERT(retainedCaps.getWithoutLock().size() == 0,')]
===========================================
Class:                class SingleCapPipeline: public PipelineHook, public kj::Refcounted {   class SingleCapPipeline: public PipelineHook, public kj::Refcounted 
Class:class RpcSystemBase::Impl { class RpcSystemBase::Impl 
Class:class RpcSystemBase::Impl final: public kj::TaskSet::ErrorHandler { class RpcSystemBase::Impl final: public kj::TaskSet::ErrorHandler 
Class:class RpcConnectionState: public kj::TaskSet::ErrorHandler { class RpcConnectionState: public kj::TaskSet::ErrorHandler 
Class:class RpcConnectionState final: public kj::TaskSet::ErrorHandler { class RpcConnectionState final: public kj::TaskSet::ErrorHandler 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+        auto& exp = KJ_ASSERT_NONNULL(tables.exports.find(iter->second));')]
===========================================
===========================================
Total add: 16
Total del: 4
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+        auto& exp = KJ_ASSERT_NONNULL(tables.exports.find(iter->second));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+        auto& exp = KJ_ASSERT_NONNULL(tables.exports.find(iter->second));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+        auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));')]
===========================================
===========================================
Total add: 20
Total del: 2
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+        auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+        auto& exp = KJ_ASSERT_NONNULL(lock->exports.find(exportId));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+        KJ_FAIL_ASSERT("Peer did not implement required RPC message type.", (uint)message.which());')]
===========================================
===========================================
Total add: 9
Total del: 1
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+        KJ_FAIL_ASSERT("Peer did not implement required RPC message type.", (uint)message.which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+        KJ_FAIL_ASSERT("Peer did not implement required RPC message type.", (uint)message.which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (20, 1, u'+      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");')]
===========================================
===========================================
Total add: 24
Total del: 7
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (20, 1, u'+      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (20, 1, u'+      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");')]
===========================================
Class:  class QuestionRef: public kj::Refcounted {   class QuestionRef: public kj::Refcounted 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+        auto& question = KJ_ASSERT_NONNULL('), (27, 1, u'+          KJ_ASSERT(lock->questions.erase(id));')]
===========================================
===========================================
Total add: 45
Total del: 1
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+        auto& question = KJ_ASSERT_NONNULL('), (27, 1, u'+          KJ_ASSERT(lock->questions.erase(id));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+        auto& question = KJ_ASSERT_NONNULL('), (27, 1, u'+          KJ_ASSERT(lock->questions.erase(id));')]
===========================================
Class:  class RpcPipeline: public PipelineHook, public kj::Refcounted {   class RpcPipeline: public PipelineHook, public kj::Refcounted 
Class:  class RpcPipeline final: public PipelineHook, public kj::Refcounted {   class RpcPipeline final: public PipelineHook, public kj::Refcounted 
Class:  class RpcResponse: public ResponseHook {   class RpcResponse: public ResponseHook 
Class:  class RpcResponse final: public ResponseHook, public kj::Refcounted {   class RpcResponse final: public ResponseHook, public kj::Refcounted 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (23, 1, u'+      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");')]
===========================================
===========================================
Total add: 23
Total del: 2
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (23, 1, u'+      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");'), (23, 1, u'+      KJ_ASSERT(lock->is<Waiting>(), "Already resolved?");')]
===========================================
Class:  class ImportClient final: public RpcClient {   class ImportClient final: public RpcClient 
Class:  class ImportClient: public RpcClient {   class ImportClient: public RpcClient 
Class:  class SettledImportClient final: public ImportClient {   class SettledImportClient final: public ImportClient 
Class:   class PromiseImportClient final: public ImportClient {   class PromiseImportClient final: public ImportClient 
Class:  class RpcRequest: public RequestHook {   class RpcRequest: public RequestHook 
Class:  class RpcRequest final: public RequestHook {   class RpcRequest final: public RequestHook 
Class:  class RpcResponse {   class RpcResponse 
Class:  class RpcResponse: public ResponseHook {   class RpcResponse: public ResponseHook 
Class:          class RpcServerResponse {   class RpcServerResponse 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      KJ_ASSERT_NONNULL(response)->send();'), (14, 1, u'+        KJ_ASSERT_NONNULL(response)->send();'), (57, 1, u'+      KJ_DASSERT(connectionState.tables.getAlreadyLockedExclusive()')]
===========================================
===========================================
Total add: 57
Total del: 6
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      KJ_ASSERT_NONNULL(response)->send();'), (14, 1, u'+        KJ_ASSERT_NONNULL(response)->send();'), (57, 1, u'+      KJ_DASSERT(connectionState.tables.getAlreadyLockedExclusive()')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      KJ_ASSERT_NONNULL(response)->send();'), (14, 1, u'+        KJ_ASSERT_NONNULL(response)->send();'), (57, 1, u'+      KJ_DASSERT(connectionState.tables.getAlreadyLockedExclusive()')]
===========================================
Class:  class ClientHookImpl final: public ClientHook {   class ClientHookImpl final: public ClientHook 
Class:   class ExportDisposer final: public kj::Disposer {   class ExportDisposer final: public kj::Disposer 
Class:      class CapExtractorImpl final: public CapExtractor<rpc::CapDescriptor> {   class CapExtractorImpl final: public CapExtractor<rpc::CapDescriptor> 
Class:  class RpcClient: public ClientHook, public kj::Refcounted {   class RpcClient: public ClientHook, public kj::Refcounted 
Class:  class ImportClient final: public RpcClient {   class ImportClient final: public RpcClient 
Class:   class PromisedAnswerClient final: public RpcClient {   class PromisedAnswerClient final: public RpcClient 
Class:  class CapExtractorImpl final: public CapExtractor<rpc::CapDescriptor> {   class CapExtractorImpl final: public CapExtractor<rpc::CapDescriptor> 
Class:     class RpcCallContext final: public CallContextHook,                               public CapExtractor<rpc::CapDescriptor>,                               public CapInjector<rpc::CapDescriptor>,                               public kj::Refcounted {                               public kj::Refcounted 
Class:  class RpcRequest: public RequestHook {   class RpcRequest: public RequestHook 
Class:   class RpcPipeline: public PipelineHook, public kj::Refcounted {   class RpcPipeline: public PipelineHook, public kj::Refcounted 
Class:   class RpcResponse {   class RpcResponse 
Class:          class RpcCallContext final: public CallContextHook, public kj::Refcounted {   class RpcCallContext final: public CallContextHook, public kj::Refcounted 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 1, u'+        auto& question = KJ_ASSERT_NONNULL(lock->questions.find(questionId),'), (97, 1, u'+          KJ_ASSERT(lock->questions.erase(questionId));'), (176, 1, u'+      KJ_ASSERT_NONNULL(response)->send();')]
===========================================
===========================================
Total add: 166
Total del: 7
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 1, u'+        auto& question = KJ_ASSERT_NONNULL(lock->questions.find(questionId),'), (97, 1, u'+          KJ_ASSERT(lock->questions.erase(questionId));'), (176, 1, u'+      KJ_ASSERT_NONNULL(response)->send();')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 1, u'+        auto& question = KJ_ASSERT_NONNULL(lock->questions.find(questionId),'), (97, 1, u'+          KJ_ASSERT(lock->questions.erase(questionId));'), (176, 1, u'+      KJ_ASSERT_NONNULL(response)->send();')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  KJ_ASSERT(refcount == 0, "Refcounted object deleted with non-zero refcount.");')]
===========================================
===========================================
Total add: 8
Total del: 10
Header: namespace kj {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  KJ_ASSERT(refcount == 0, "Refcounted object deleted with non-zero refcount.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  KJ_ASSERT(refcount == 0, "Refcounted object deleted with non-zero refcount.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_FAIL_ASSERT("Supposendly-unreachable branch executed.");'), (3, 1, u'+  KJ_FAIL_ASSERT("Supposedly-unreachable branch executed.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: inlineAssertFailure
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_FAIL_ASSERT("Supposendly-unreachable branch executed.");'), (3, 1, u'+  KJ_FAIL_ASSERT("Supposedly-unreachable branch executed.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_FAIL_ASSERT("Supposendly-unreachable branch executed.");'), (3, 1, u'+  KJ_FAIL_ASSERT("Supposedly-unreachable branch executed.");')]
===========================================
Class:class RpcConnectionState { class RpcConnectionState 
Class:class RpcConnectionState: public kj::TaskSet::ErrorHandler { class RpcConnectionState: public kj::TaskSet::ErrorHandler 
Class:class ErrorHandlerImpl: public TaskSet::ErrorHandler { class ErrorHandlerImpl: public TaskSet::ErrorHandler 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+    KJ_FAIL_ASSERT("example TaskSet failure") { break; }')]
===========================================
===========================================
Total add: 39
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+    KJ_FAIL_ASSERT("example TaskSet failure") { break; }')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+    KJ_FAIL_ASSERT("example TaskSet failure") { break; }')]
===========================================
Class:class TaskSet::Impl { class TaskSet::Impl 
Class:   class Task final: public EventLoop::Event {   class Task final: public EventLoop::Event 
Class:class ExportTable { class ExportTable 
Class:class ImportTable { class ImportTable 
Class:class RpcConnectionState { class RpcConnectionState 
Class:  class ClientHookImpl final: public ClientHook {   class ClientHookImpl final: public ClientHook 
Class:       class CapExtractorImpl final: public CapExtractor<rpc::CapDescriptor> {   class CapExtractorImpl final: public CapExtractor<rpc::CapDescriptor> 
Class:       class CapInjectorImpl final: public CapInjector<rpc::CapDescriptor> {   class CapInjectorImpl final: public CapInjector<rpc::CapDescriptor> 
Class:       class RpcCallContext final: public CallContextHook,                               public CapExtractor<rpc::CapDescriptor>,                               public CapInjector<rpc::CapDescriptor>,                               public kj::Refcounted {                               public kj::Refcounted 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("bar") { break; }'), (3, 1, u'+      KJ_FAIL_ASSERT("this is a test, not a real bug") { break; }')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("bar") { break; }'), (3, 1, u'+      KJ_FAIL_ASSERT("this is a test, not a real bug") { break; }')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("bar") { break; }'), (3, 1, u'+      KJ_FAIL_ASSERT("this is a test, not a real bug") { break; }')]
===========================================
Class:class LocalCapDescriptor::Reader { class LocalCapDescriptor::Reader 
Class: class LocalCapDescriptor::Builder { class LocalCapDescriptor::Builder 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 1, u'+  KJ_ASSERT(descriptor.getIndex() < lock->caps.size(),'), (78, 1, u'+  KJ_ASSERT(descriptor.getIndex() < lock->caps.size(),')]
===========================================
===========================================
Total add: 83
Total del: 0
Header: CapBuilderContext::imbue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 1, u'+  KJ_ASSERT(descriptor.getIndex() < lock->caps.size(),'), (78, 1, u'+  KJ_ASSERT(descriptor.getIndex() < lock->caps.size(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 1, u'+  KJ_ASSERT(descriptor.getIndex() < lock->caps.size(),'), (78, 1, u'+  KJ_ASSERT(descriptor.getIndex() < lock->caps.size(),')]
===========================================
Class:  class TestInterfaceDynamicImpl final: public DynamicCapability::Server { class TestInterfaceDynamicImpl final: public DynamicCapability::Server 
Class: class TestExtendsDynamicImpl final: public DynamicCapability::Server { class TestExtendsDynamicImpl final: public DynamicCapability::Server 
Class: class TestPipelineDynamicImpl final: public DynamicCapability::Server { class TestPipelineDynamicImpl final: public DynamicCapability::Server 
Class:  class Reader {   class Reader 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: DynamicStruct::Reader::get
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: DynamicStruct::Builder::get
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: DynamicStruct::Builder::set
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: DynamicStruct::Builder::adopt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: DynamicStruct::Builder::clear
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: DynamicList::Reader::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: DynamicList::Builder::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
Total add: 7
Total del: 2
Header: DynamicList::Builder::set
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 8
Total del: 2
Header: DynamicList::Builder::adopt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+      static_assert(__has_trivial_copy(Text::Reader) &&'), (47, 1, u'+      static_assert(__has_trivial_copy(Text::Reader) &&'), (102, 1, u'+      static_assert(__has_trivial_destructor(Text::Builder) &&'), (136, 1, u'+      static_assert(__has_trivial_destructor(Text::Builder) &&')]
===========================================
===========================================
Total add: 172
Total del: 0
Header: DynamicValue::Reader::Reader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+      static_assert(__has_trivial_copy(Text::Reader) &&'), (47, 1, u'+      static_assert(__has_trivial_copy(Text::Reader) &&'), (102, 1, u'+      static_assert(__has_trivial_destructor(Text::Builder) &&'), (136, 1, u'+      static_assert(__has_trivial_destructor(Text::Builder) &&')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+      static_assert(__has_trivial_copy(Text::Reader) &&'), (47, 1, u'+      static_assert(__has_trivial_copy(Text::Reader) &&'), (102, 1, u'+      static_assert(__has_trivial_destructor(Text::Builder) &&'), (136, 1, u'+      static_assert(__has_trivial_destructor(Text::Builder) &&')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented."); return Reader();')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicValue::Builder::asReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented."); return Reader();')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented."); return Reader();')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      KJ_FAIL_ASSERT("Unexpected pipeline type.", (uint)type) { type = UNKNOWN; break; }'), (23, 1, u'+      KJ_FAIL_ASSERT("Unexpected pipeline type.", (uint)type) { type = UNKNOWN; break; }')]
===========================================
===========================================
Total add: 26
Total del: 0
Header: DynamicValue::Builder::asReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      KJ_FAIL_ASSERT("Unexpected pipeline type.", (uint)type) { type = UNKNOWN; break; }'), (23, 1, u'+      KJ_FAIL_ASSERT("Unexpected pipeline type.", (uint)type) { type = UNKNOWN; break; }')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      KJ_FAIL_ASSERT("Unexpected pipeline type.", (uint)type) { type = UNKNOWN; break; }'), (23, 1, u'+      KJ_FAIL_ASSERT("Unexpected pipeline type.", (uint)type) { type = UNKNOWN; break; }')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case DynamicValue::INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Orphan<DynamicValue>::Orphan
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case DynamicValue::INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case DynamicValue::INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: Orphan<DynamicValue>::get
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: Orphan<DynamicValue>::getReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case DynamicValue::INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Orphanage::newOrphanCopy<DynamicValue::Reader>
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case DynamicValue::INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case DynamicValue::INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: OrphanBuilder::asListReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Don\'t know how to print interfaces.") {')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: print
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Don\'t know how to print interfaces.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      KJ_FAIL_ASSERT("Don\'t know how to print interfaces.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(canConvert<long, int>(), "failure");'), (4, 1, u'+  static_assert(!canConvert<long, void*>(), "failure");'), (9, 1, u'+  static_assert(canConvert<Sub, Super>(), "failure");'), (10, 1, u'+  static_assert(!canConvert<Super, Sub>(), "failure");'), (11, 1, u'+  static_assert(canConvert<Sub*, Super*>(), "failure");'), (12, 1, u'+  static_assert(!canConvert<Super*, Sub*>(), "failure");'), (14, 1, u'+  static_assert(canConvert<void*, const void*>(), "failure");'), (15, 1, u'+  static_assert(!canConvert<const void*, void*>(), "failure");')]
===========================================
===========================================
Total add: 16
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(canConvert<long, int>(), "failure");'), (4, 1, u'+  static_assert(!canConvert<long, void*>(), "failure");'), (9, 1, u'+  static_assert(canConvert<Sub, Super>(), "failure");'), (10, 1, u'+  static_assert(!canConvert<Super, Sub>(), "failure");'), (11, 1, u'+  static_assert(canConvert<Sub*, Super*>(), "failure");'), (12, 1, u'+  static_assert(!canConvert<Super*, Sub*>(), "failure");'), (14, 1, u'+  static_assert(canConvert<void*, const void*>(), "failure");'), (15, 1, u'+  static_assert(!canConvert<const void*, void*>(), "failure");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(canConvert<long, int>(), "failure");'), (4, 1, u'+  static_assert(!canConvert<long, void*>(), "failure");'), (9, 1, u'+  static_assert(canConvert<Sub, Super>(), "failure");'), (10, 1, u'+  static_assert(!canConvert<Super, Sub>(), "failure");'), (11, 1, u'+  static_assert(canConvert<Sub*, Super*>(), "failure");'), (12, 1, u'+  static_assert(!canConvert<Super*, Sub*>(), "failure");'), (14, 1, u'+  static_assert(canConvert<void*, const void*>(), "failure");'), (15, 1, u'+  static_assert(!canConvert<const void*, void*>(), "failure");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(canConvert<Own<Sub>, Own<Super>>(), "failure");'), (7, 1, u'+  static_assert(!canConvert<Own<Super>, Own<Sub>>(), "failure");')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(canConvert<Own<Sub>, Own<Super>>(), "failure");'), (7, 1, u'+  static_assert(!canConvert<Own<Super>, Own<Sub>>(), "failure");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(canConvert<Own<Sub>, Own<Super>>(), "failure");'), (7, 1, u'+  static_assert(!canConvert<Own<Super>, Own<Sub>>(), "failure");')]
===========================================
Class:class TestPipelineImpl final: public test::TestPipeline::Server { class TestPipelineImpl final: public test::TestPipeline::Server 
Class:  class Reader {   class Reader 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(next == nullptr || std::uncaught_exception(), "Event destroyed while armed.");'), (3, 1, u'+    KJ_ASSERT(next == nullptr || std::uncaught_exception(),')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: EventLoop::Event::~Event
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(next == nullptr || std::uncaught_exception(), "Event destroyed while armed.");'), (3, 1, u'+    KJ_ASSERT(next == nullptr || std::uncaught_exception(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(next == nullptr || std::uncaught_exception(), "Event destroyed while armed.");'), (3, 1, u'+    KJ_ASSERT(next == nullptr || std::uncaught_exception(),')]
===========================================
Class:class BrokenPipeline final: public PipelineHook, public kj::Refcounted { class BrokenPipeline final: public PipelineHook, public kj::Refcounted 
Class: class BrokenRequest final: public RequestHook { class BrokenRequest final: public RequestHook 
Class: class BrokenClient final: public ClientHook, public kj::Refcounted { class BrokenClient final: public ClientHook, public kj::Refcounted 
Class:class DummyClientHook final: public ClientHook { class DummyClientHook final: public ClientHook 
Class:class TestInterfaceImpl final: public test::TestInterface::Server { class TestInterfaceImpl final: public test::TestInterface::Server 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {')]
===========================================
===========================================
Total add: 0
Total del: 5
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {')]
===========================================
===========================================
Total add: 0
Total del: 5
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+        KJ_FAIL_ASSERT("Far pointer should have been handled above.") {')]
===========================================
===========================================
Total add: 23
Total del: 3
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+        KJ_FAIL_ASSERT("Far pointer should have been handled above.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+        KJ_FAIL_ASSERT("Far pointer should have been handled above.") {')]
===========================================
Class:class LocalCallContext final: public CallContextHook { class LocalCallContext final: public CallContextHook 
Class:class LocalCallContext final: public CallContextHook, public kj::Refcounted { class LocalCallContext final: public CallContextHook, public kj::Refcounted 
Class:class BrokenPipeline final: public PipelineHook, public kj::Refcounted { class BrokenPipeline final: public PipelineHook, public kj::Refcounted 
Class: class BrokenClient final: public ClientHook, public kj::Refcounted { class BrokenClient final: public ClientHook, public kj::Refcounted 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_DASSERT(segmentState->forOutput.size() == segmentState->builders.size() + 1,'), (3, 1, u'+    KJ_DASSERT(segmentState->get()->forOutput.size() == segmentState->get()->builders.size() + 1,')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: kj::ArrayPtr<const kj::ArrayPtr<const word>> BasicBuilderArena::getSegmentsForOu
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_DASSERT(segmentState->forOutput.size() == segmentState->builders.size() + 1,'), (3, 1, u'+    KJ_DASSERT(segmentState->get()->forOutput.size() == segmentState->get()->builders.size() + 1,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_DASSERT(segmentState->forOutput.size() == segmentState->builders.size() + 1,'), (3, 1, u'+    KJ_DASSERT(segmentState->get()->forOutput.size() == segmentState->get()->builders.size() + 1,')]
===========================================
Class:class LocalResponse final: public ResponseHook { class LocalResponse final: public ResponseHook 
Class:class LocalResponse final: public ResponseHook, public kj::Refcounted { class LocalResponse final: public ResponseHook, public kj::Refcounted 
Class:class LocalPipelinedClient final: public ClientHook, public kj::Refcounted { class LocalPipelinedClient final: public ClientHook, public kj::Refcounted 
Class:class LocalRequest final: public RequestHook { class LocalRequest final: public RequestHook 
Class:class BrokenPipeline final: public PipelineHook, public kj::Refcounted { class BrokenPipeline final: public PipelineHook, public kj::Refcounted 
Class: class BrokenClient final: public ClientHook, public kj::Refcounted { class BrokenClient final: public ClientHook, public kj::Refcounted 
Class:       class QueuedPipeline final: public PipelineHook, public kj::Refcounted { class QueuedPipeline final: public PipelineHook, public kj::Refcounted 
Class:class QueuedClient final: public ClientHook, public kj::Refcounted { class QueuedClient final: public ClientHook, public kj::Refcounted 
Class:class LocalPipeline final: public PipelineHook, public kj::Refcounted { class LocalPipeline final: public PipelineHook, public kj::Refcounted 
Class:class LocalRequest final: public RequestHook { class LocalRequest final: public RequestHook 
Class:class LocalPipeline final: public PipelineHook, public kj::Refcounted { class LocalPipeline final: public PipelineHook, public kj::Refcounted 
Class:class LocalResponse final: public ResponseHook { class LocalResponse final: public ResponseHook 
Class: class LocalCallContext final: public CallContextHook { class LocalCallContext final: public CallContextHook 
Class: class LocalPipelinedClient final: public ClientHook, public kj::Refcounted { class LocalPipelinedClient final: public ClientHook, public kj::Refcounted 
Class: class LocalPipeline final: public PipelineHook, public kj::Refcounted { class LocalPipeline final: public PipelineHook, public kj::Refcounted 
Class: class LocalRequest final: public RequestHook { class LocalRequest final: public RequestHook 
Class: class LocalClient final: public ClientHook, public kj::Refcounted { class LocalClient final: public ClientHook, public kj::Refcounted 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 2, u'-          KJ_FAIL_ASSERT("Groups don\'t have ordinals.");'), (86, 2, u'-          KJ_FAIL_ASSERT("Unexpected member type.");'), (112, 2, u'-          KJ_FAIL_ASSERT("Unexpected member type.");'), (137, 2, u'-          default: KJ_FAIL_ASSERT("Expected 0, 1, 2, 3, 4, 5, or 6."); break;')]
===========================================
===========================================
Total add: 7
Total del: 146
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 2, u'-          KJ_FAIL_ASSERT("Groups don\'t have ordinals.");'), (86, 2, u'-          KJ_FAIL_ASSERT("Unexpected member type.");'), (112, 2, u'-          KJ_FAIL_ASSERT("Unexpected member type.");'), (137, 2, u'-          default: KJ_FAIL_ASSERT("Expected 0, 1, 2, 3, 4, 5, or 6."); break;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 2, u'-          KJ_FAIL_ASSERT("Groups don\'t have ordinals.");'), (86, 2, u'-          KJ_FAIL_ASSERT("Unexpected member type.");'), (112, 2, u'-          KJ_FAIL_ASSERT("Unexpected member type.");'), (137, 2, u'-          default: KJ_FAIL_ASSERT("Expected 0, 1, 2, 3, 4, 5, or 6."); break;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(79, 1, u'+          KJ_FAIL_ASSERT("Groups don\'t have ordinals.");'), (83, 1, u'+          KJ_FAIL_ASSERT("Unexpected member type.");'), (112, 1, u'+            KJ_FAIL_ASSERT("Unexpected member type.");'), (138, 1, u'+          default: KJ_FAIL_ASSERT("Expected 0, 1, 2, 3, 4, 5, or 6."); break;')]
===========================================
===========================================
Total add: 151
Total del: 0
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(79, 1, u'+          KJ_FAIL_ASSERT("Groups don\'t have ordinals.");'), (83, 1, u'+          KJ_FAIL_ASSERT("Unexpected member type.");'), (112, 1, u'+            KJ_FAIL_ASSERT("Unexpected member type.");'), (138, 1, u'+          default: KJ_FAIL_ASSERT("Expected 0, 1, 2, 3, 4, 5, or 6."); break;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(79, 1, u'+          KJ_FAIL_ASSERT("Groups don\'t have ordinals.");'), (83, 1, u'+          KJ_FAIL_ASSERT("Unexpected member type.");'), (112, 1, u'+            KJ_FAIL_ASSERT("Unexpected member type.");'), (138, 1, u'+          default: KJ_FAIL_ASSERT("Expected 0, 1, 2, 3, 4, 5, or 6."); break;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    KJ_FAIL_ASSERT("Dependency ID not present in compiler?", id);'), (12, 1, u'+    KJ_FAIL_ASSERT("Dependency ID not present in compiler?", depId);')]
===========================================
===========================================
Total add: 7
Total del: 2
Header: Compiler::Node::traverseType
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    KJ_FAIL_ASSERT("Dependency ID not present in compiler?", id);'), (12, 1, u'+    KJ_FAIL_ASSERT("Dependency ID not present in compiler?", depId);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    KJ_FAIL_ASSERT("Dependency ID not present in compiler?", id);'), (12, 1, u'+    KJ_FAIL_ASSERT("Dependency ID not present in compiler?", depId);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  KJ_FAIL_ASSERT("TODO: compile interfaces");')]
===========================================
===========================================
Total add: 79
Total del: 2
Header: NodeTranslator::compileStruct
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  KJ_FAIL_ASSERT("TODO: compile interfaces");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  KJ_FAIL_ASSERT("TODO: compile interfaces");')]
===========================================
Class:class DummyClientHook final: public ClientHook { class DummyClientHook final: public ClientHook 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    KJ_DASSERT(segment0.getArray().begin() == baseSegment->getArray().begin());'), (25, 1, u'+      KJ_DASSERT(iter->second->getArray().begin() == baseSegment->getArray().begin());')]
===========================================
===========================================
Total add: 53
Total del: 3
Header: ReaderArena::reportReadLimitReached
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    KJ_DASSERT(segment0.getArray().begin() == baseSegment->getArray().begin());'), (25, 1, u'+      KJ_DASSERT(iter->second->getArray().begin() == baseSegment->getArray().begin());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    KJ_DASSERT(segment0.getArray().begin() == baseSegment->getArray().begin());'), (25, 1, u'+      KJ_DASSERT(iter->second->getArray().begin() == baseSegment->getArray().begin());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_FAIL_ASSERT('), (6, 1, u'+  KJ_FAIL_ASSERT("Read limit reached for BuilderArena, but it should have been unlimited.") {')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: BuilderArena::tryGetSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_FAIL_ASSERT('), (6, 1, u'+  KJ_FAIL_ASSERT("Read limit reached for BuilderArena, but it should have been unlimited.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_FAIL_ASSERT('), (6, 1, u'+  KJ_FAIL_ASSERT("Read limit reached for BuilderArena, but it should have been unlimited.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 1, u'+  KJ_DASSERT(result->getArray().begin() == baseSegment->getArray().begin());')]
===========================================
===========================================
Total add: 56
Total del: 0
Header: BuilderArena::reportReadLimitReached
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 1, u'+  KJ_DASSERT(result->getArray().begin() == baseSegment->getArray().begin());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 1, u'+  KJ_DASSERT(result->getArray().begin() == baseSegment->getArray().begin());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    static_assert(sizeof(_::ReaderArena) <= sizeof(arenaSpace),'), (4, 1, u'+    static_assert(sizeof(_::BasicReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: MessageReader::getRootInternal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    static_assert(sizeof(_::ReaderArena) <= sizeof(arenaSpace),'), (4, 1, u'+    static_assert(sizeof(_::BasicReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    static_assert(sizeof(_::ReaderArena) <= sizeof(arenaSpace),'), (4, 1, u'+    static_assert(sizeof(_::BasicReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    static_assert(sizeof(_::BuilderArena) <= sizeof(arenaSpace),'), (3, 1, u'+    static_assert(sizeof(_::BasicBuilderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MessageBuilder::getRootSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    static_assert(sizeof(_::BuilderArena) <= sizeof(arenaSpace),'), (3, 1, u'+    static_assert(sizeof(_::BasicBuilderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    static_assert(sizeof(_::BuilderArena) <= sizeof(arenaSpace),'), (3, 1, u'+    static_assert(sizeof(_::BasicBuilderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 0
Total del: 12
Header: OrphanBuilder::asData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 0
Total del: 6
Header: OrphanBuilder::asDataReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      KJ_FAIL_ASSERT("Can\'t get() an untyped Object orphan; there is no underlying pointer to "')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: Orphan<DynamicValue>::getReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      KJ_FAIL_ASSERT("Can\'t get() an untyped Object orphan; there is no underlying pointer to "')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      KJ_FAIL_ASSERT("Can\'t get() an untyped Object orphan; there is no underlying pointer to "')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-      ASSERT_EQ(3u, list.size());'), (31, 2, u'-      ASSERT_EQ(3u, list.size());'), (43, 2, u'-      ASSERT_EQ(2u, list.size());'), (50, 2, u'-      ASSERT_EQ(2u, list.size());'), (59, 2, u'-      ASSERT_EQ(2u, list.size());'), (65, 2, u'-      ASSERT_EQ(2u, list.size());'), (72, 2, u'-      ASSERT_EQ(2u, list.size());')]
===========================================
===========================================
Total add: 0
Total del: 77
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-      ASSERT_EQ(3u, list.size());'), (31, 2, u'-      ASSERT_EQ(3u, list.size());'), (43, 2, u'-      ASSERT_EQ(2u, list.size());'), (50, 2, u'-      ASSERT_EQ(2u, list.size());'), (59, 2, u'-      ASSERT_EQ(2u, list.size());'), (65, 2, u'-      ASSERT_EQ(2u, list.size());'), (72, 2, u'-      ASSERT_EQ(2u, list.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-      ASSERT_EQ(3u, list.size());'), (31, 2, u'-      ASSERT_EQ(3u, list.size());'), (43, 2, u'-      ASSERT_EQ(2u, list.size());'), (50, 2, u'-      ASSERT_EQ(2u, list.size());'), (59, 2, u'-      ASSERT_EQ(2u, list.size());'), (65, 2, u'-      ASSERT_EQ(2u, list.size());'), (72, 2, u'-      ASSERT_EQ(2u, list.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 1, u'+      ASSERT_EQ(3u, list.size());'), (62, 1, u'+      ASSERT_EQ(3u, list.size());'), (74, 1, u'+      ASSERT_EQ(2u, list.size());'), (81, 1, u'+      ASSERT_EQ(2u, list.size());'), (90, 1, u'+      ASSERT_EQ(2u, list.size());'), (96, 1, u'+      ASSERT_EQ(2u, list.size());'), (103, 1, u'+      ASSERT_EQ(2u, list.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT_EQ(2u, root.asReader().getObjectField<List<TestAllTypes>>().size());'), (9, 1, u'+  ASSERT_EQ(2u, root.asReader().getObjectField().getAs<List<TestAllTypes>>().size());')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT_EQ(2u, root.asReader().getObjectField<List<TestAllTypes>>().size());'), (9, 1, u'+  ASSERT_EQ(2u, root.asReader().getObjectField().getAs<List<TestAllTypes>>().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT_EQ(2u, root.asReader().getObjectField<List<TestAllTypes>>().size());'), (9, 1, u'+  ASSERT_EQ(2u, root.asReader().getObjectField().getAs<List<TestAllTypes>>().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_DASSERT((uintptr_t)ptr % sizeof(void*) == 0,')]
===========================================
===========================================
Total add: 0
Total del: 32
Header: ListReader::getStructElement
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_DASSERT((uintptr_t)ptr % sizeof(void*) == 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  KJ_DASSERT((uintptr_t)ptr % sizeof(void*) == 0,')]
===========================================
Class:class YieldPromiseNode final: public _::PromiseNode, public EventLoop::Event { class YieldPromiseNode final: public _::PromiseNode, public EventLoop::Event 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_IASSERT(false, "Inner node returned empty value.");'), (3, 1, u'+    KJ_FAIL_ASSERT("Inner node returned empty value.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ChainPromiseNode::fire
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_IASSERT(false, "Inner node returned empty value.");'), (3, 1, u'+    KJ_FAIL_ASSERT("Inner node returned empty value.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_IASSERT(false, "Inner node returned empty value.");'), (3, 1, u'+    KJ_FAIL_ASSERT("Inner node returned empty value.");')]
===========================================
Class:class YieldPromiseNode final: public _::PromiseNode<_::Void>, public EventLoop::Event { class YieldPromiseNode final: public _::PromiseNode<_::Void>, public EventLoop::Event 
Class:class BoolEvent: public EventLoop::Event { class BoolEvent: public EventLoop::Event 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(110, 1, u'+  static_assert(sizeof(Promise<int>) == sizeof(PromiseBase),'), (134, 1, u'+    KJ_IASSERT(false, "Inner node returned empty value.");')]
===========================================
===========================================
Total add: 191
Total del: 0
Header: SimpleEventLoop::wake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(110, 1, u'+  static_assert(sizeof(Promise<int>) == sizeof(PromiseBase),'), (134, 1, u'+    KJ_IASSERT(false, "Inner node returned empty value.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(110, 1, u'+  static_assert(sizeof(Promise<int>) == sizeof(PromiseBase),'), (134, 1, u'+    KJ_IASSERT(false, "Inner node returned empty value.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 1, u'+  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (92, 1, u'+  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (105, 1, u'+  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });'), (121, 1, u'+  Promise<int> promise = loop.evalLater([&]() -> int { KJ_FAIL_ASSERT("foo") { return 123; } });')]
===========================================
Class:class YieldPromiseNode final: public _::PromiseNode<_::Void>, public EventLoop::Event { class YieldPromiseNode final: public _::PromiseNode<_::Void>, public EventLoop::Event 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+void inlineAssertFailure(const char* file, int line, const char* expectation,')]
===========================================
===========================================
Total add: 11
Total del: 0
Header: inlineRequireFailure
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+void inlineAssertFailure(const char* file, int line, const char* expectation,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+void inlineAssertFailure(const char* file, int line, const char* expectation,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      KJ_DASSERT(ref->isNull());')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      KJ_DASSERT(ref->isNull());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      KJ_DASSERT(ref->isNull());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 4
Total del: 6
Header: OrphanBuilder::copy
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: OrphanBuilder::asStruct
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 4
Total del: 8
Header: OrphanBuilder::asList
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: OrphanBuilder::asStructList
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: OrphanBuilder::asText
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: OrphanBuilder::asData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: OrphanBuilder::asObject
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: OrphanBuilder::asStructReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: OrphanBuilder::asListReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: OrphanBuilder::asTextReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: OrphanBuilder::asDataReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));')]
===========================================
Class:class RepeatChar { class RepeatChar 
Class:   class Iterator {   class Iterator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+          errorReporter.addErrorOn(KJ_ASSERT_NONNULL(ordinal).getReader(),'), (16, 1, u'+          errorReporter.addErrorOn(KJ_ASSERT_NONNULL(ordinal).getReader(),')]
===========================================
===========================================
Total add: 18
Total del: 4
Header: CapnpParser::CapnpParser
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+          errorReporter.addErrorOn(KJ_ASSERT_NONNULL(ordinal).getReader(),'), (16, 1, u'+          errorReporter.addErrorOn(KJ_ASSERT_NONNULL(ordinal).getReader(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+          errorReporter.addErrorOn(KJ_ASSERT_NONNULL(ordinal).getReader(),'), (16, 1, u'+          errorReporter.addErrorOn(KJ_ASSERT_NONNULL(ordinal).getReader(),')]
===========================================
Class:class DummyModule: public capnp::compiler::Module { class DummyModule: public capnp::compiler::Module 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(102, 1, u'+    KJ_ASSERT(segment0Offset % 8 == 0);')]
===========================================
===========================================
Total add: 321
Total del: 1
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(102, 1, u'+    KJ_ASSERT(segment0Offset % 8 == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(102, 1, u'+    KJ_ASSERT(segment0Offset % 8 == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_ASSERT(offset < 4096 && offset > -4096,'), (3, 1, u'+  KJ_ASSERT(offset < 65536 && offset > -65536,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ExceptionCallback::ExceptionCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_ASSERT(offset < 4096 && offset > -4096,'), (3, 1, u'+  KJ_ASSERT(offset < 65536 && offset > -65536,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_ASSERT(offset < 4096 && offset > -4096,'), (3, 1, u'+  KJ_ASSERT(offset < 65536 && offset > -65536,')]
===========================================
Class:class ModuleImpl final: public Module { class ModuleImpl final: public Module 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    ASSERT_EQ(4u, l.size());'), (31, 1, u'+    ASSERT_EQ(4u, l.size());')]
===========================================
===========================================
Total add: 37
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    ASSERT_EQ(4u, l.size());'), (31, 1, u'+    ASSERT_EQ(4u, l.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    ASSERT_EQ(4u, l.size());'), (31, 1, u'+    ASSERT_EQ(4u, l.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    KJ_ASSERT(sourceFiles.size() == 1);')]
===========================================
===========================================
Total add: 36
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    KJ_ASSERT(sourceFiles.size() == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    KJ_ASSERT(sourceFiles.size() == 1);')]
===========================================
Class:   class EncoderErrorReporter final: public ErrorReporter {   class EncoderErrorReporter final: public ErrorReporter 
Class:   class ValueResolverGlue final: public ValueTranslator::Resolver {   class ValueResolverGlue final: public ValueTranslator::Resolver 
Class:class ModuleLoader::ModuleImpl: public Module { class ModuleLoader::ModuleImpl: public Module 
Class:class ModuleLoader::ModuleImpl final: public Module { class ModuleLoader::ModuleImpl final: public Module 
Class:  class ResolverGlue: public ValueTranslator::Resolver {   class ResolverGlue: public ValueTranslator::Resolver 
Class:class SchemaParser::ModuleImpl: public compiler::Module { class SchemaParser::ModuleImpl: public compiler::Module 
Class:class SchemaParser::ModuleImpl final: public compiler::Module { class SchemaParser::ModuleImpl final: public compiler::Module 
Class:class NodeTranslator::DynamicSlot { class NodeTranslator::DynamicSlot 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");'), (47, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");'), (60, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");'), (80, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");'), (140, 2, u'-  KJ_FAIL_ASSERT("Unknown type.");')]
===========================================
===========================================
Total add: 0
Total del: 141
Header: NodeTranslator::compileDefaultDefaultValue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");'), (47, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");'), (60, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");'), (80, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");'), (140, 2, u'-  KJ_FAIL_ASSERT("Unknown type.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");'), (47, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");'), (60, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");'), (80, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");'), (140, 2, u'-  KJ_FAIL_ASSERT("Unknown type.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  kj::StringPtr fieldName = KJ_ASSERT_NONNULL(toDynamic(type).which()).getProto().getName();'), (181, 1, u'+      KJ_FAIL_ASSERT("Interfaces can\'t have literal values.");'), (184, 1, u'+      KJ_FAIL_ASSERT("Objects can\'t have literal values.");')]
===========================================
===========================================
Total add: 150
Total del: 32
Header: NodeTranslator::compileValue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  kj::StringPtr fieldName = KJ_ASSERT_NONNULL(toDynamic(type).which()).getProto().getName();'), (181, 1, u'+      KJ_FAIL_ASSERT("Interfaces can\'t have literal values.");'), (184, 1, u'+      KJ_FAIL_ASSERT("Objects can\'t have literal values.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  kj::StringPtr fieldName = KJ_ASSERT_NONNULL(toDynamic(type).which()).getProto().getName();'), (181, 1, u'+      KJ_FAIL_ASSERT("Interfaces can\'t have literal values.");'), (184, 1, u'+      KJ_FAIL_ASSERT("Objects can\'t have literal values.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      KJ_FAIL_ASSERT("DynamicList of structs does not support set().") {')]
===========================================
===========================================
Total add: 5
Total del: 7
Header: DynamicList::Builder::set
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      KJ_FAIL_ASSERT("DynamicList of structs does not support set().") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      KJ_FAIL_ASSERT("DynamicList of structs does not support set().") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.");'), (51, 1, u'+      KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 108
Total del: 0
Header: DynamicList::Builder::init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.");'), (51, 1, u'+      KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.");'), (51, 1, u'+      KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+    case DynamicValue::INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
Total add: 36
Total del: 0
Header: Orphan<DynamicValue>::releaseAs<DynamicList>
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+    case DynamicValue::INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+    case DynamicValue::INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 159
Total del: 0
Header: DynamicStruct::Builder::init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+    case DynamicValue::INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented.");'), (93, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.");'), (118, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
Total add: 134
Total del: 0
Header: Orphan<DynamicList>::getReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+    case DynamicValue::INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented.");'), (93, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.");'), (118, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+    case DynamicValue::INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented.");'), (93, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.");'), (118, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+      ASSERT_EQ(3u, listReader.size());'), (78, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (86, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (96, 1, u'+    ASSERT_EQ(3u, listReader.size());'), (117, 1, u'+    ASSERT_EQ(3u, listReader.size());')]
===========================================
===========================================
Total add: 122
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+      ASSERT_EQ(3u, listReader.size());'), (78, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (86, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (96, 1, u'+    ASSERT_EQ(3u, listReader.size());'), (117, 1, u'+    ASSERT_EQ(3u, listReader.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+      ASSERT_EQ(3u, listReader.size());'), (78, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (86, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (96, 1, u'+    ASSERT_EQ(3u, listReader.size());'), (117, 1, u'+    ASSERT_EQ(3u, listReader.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+      KJ_FAIL_ASSERT("Constants can\'t have interface type.");')]
===========================================
===========================================
Total add: 41
Total del: 0
Header: DynamicList::Builder::asReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+      KJ_FAIL_ASSERT("Constants can\'t have interface type.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+      KJ_FAIL_ASSERT("Constants can\'t have interface type.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+  ASSERT_EQ(3u, list.size());')]
===========================================
===========================================
Total add: 34
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+  ASSERT_EQ(3u, list.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+  ASSERT_EQ(3u, list.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+      KJ_FAIL_ASSERT("getDefaultValueSchemaOffset() can only be called on struct, list, "')]
===========================================
===========================================
Total add: 27
Total del: 0
Header: Schema::requireUsableAs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+      KJ_FAIL_ASSERT("getDefaultValueSchemaOffset() can only be called on struct, list, "')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+      KJ_FAIL_ASSERT("getDefaultValueSchemaOffset() can only be called on struct, list, "')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-      KJ_FAIL_ASSERT("getDefaultValueSchemaOffset() can only be called on struct, list, "')]
===========================================
===========================================
Total add: 1
Total del: 25
Header: StructSchema::getFieldByDiscriminant
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-      KJ_FAIL_ASSERT("getDefaultValueSchemaOffset() can only be called on struct, list, "')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-      KJ_FAIL_ASSERT("getDefaultValueSchemaOffset() can only be called on struct, list, "')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_DASSERT((uintptr_t)ptr % sizeof(WirePointer) == 0,'), (3, 1, u'+  KJ_DASSERT((uintptr_t)ptr % sizeof(void*) == 0,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ListReader::getStructElement
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_DASSERT((uintptr_t)ptr % sizeof(WirePointer) == 0,'), (3, 1, u'+  KJ_DASSERT((uintptr_t)ptr % sizeof(void*) == 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_DASSERT((uintptr_t)ptr % sizeof(WirePointer) == 0,'), (3, 1, u'+  KJ_DASSERT((uintptr_t)ptr % sizeof(void*) == 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+          KJ_ASSERT(nameText.size() == 0, "Don\'t know what naming rules to enforce for node type.",')]
===========================================
===========================================
Total add: 37
Total del: 0
Header: NodeTranslator::DuplicateNameDetector::check
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+          KJ_ASSERT(nameText.size() == 0, "Don\'t know what naming rules to enforce for node type.",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+          KJ_ASSERT(nameText.size() == 0, "Don\'t know what naming rules to enforce for node type.",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+  KJ_ASSERT(actualVersion == expectedVersion ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(4, barFields.size());'), (3, 1, u'+  ASSERT_EQ(4u, barFields.size());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(4, barFields.size());'), (3, 1, u'+  ASSERT_EQ(4u, barFields.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(4, barFields.size());'), (3, 1, u'+  ASSERT_EQ(4u, barFields.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(195, 1, u'+      KJ_DASSERT(!slot.isSupersetOf(prevSlot));')]
===========================================
===========================================
Total add: 204
Total del: 0
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(195, 1, u'+      KJ_DASSERT(!slot.isSupersetOf(prevSlot));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(195, 1, u'+      KJ_DASSERT(!slot.isSupersetOf(prevSlot));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    case schema2::Type::OBJECT: KJ_FAIL_ASSERT("List(Object) not supported."); break;'), (44, 1, u'+    case schema::Type::OBJECT: KJ_FAIL_ASSERT("List(Object) not supported."); break;')]
===========================================
===========================================
Total add: 21
Total del: 21
Header: double>
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    case schema2::Type::OBJECT: KJ_FAIL_ASSERT("List(Object) not supported."); break;'), (44, 1, u'+    case schema::Type::OBJECT: KJ_FAIL_ASSERT("List(Object) not supported."); break;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    case schema2::Type::OBJECT: KJ_FAIL_ASSERT("List(Object) not supported."); break;'), (44, 1, u'+    case schema::Type::OBJECT: KJ_FAIL_ASSERT("List(Object) not supported."); break;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-      KJ_FAIL_ASSERT("Need to compile value type:", (uint)type.which(),')]
===========================================
===========================================
Total add: 0
Total del: 19
Header: NodeTranslator::compileValue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-      KJ_FAIL_ASSERT("Need to compile value type:", (uint)type.which(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-      KJ_FAIL_ASSERT("Need to compile value type:", (uint)type.which(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-            KJ_FAIL_ASSERT("Union literal syntax is obsolete.");')]
===========================================
===========================================
Total add: 6
Total del: 16
Header: NodeTranslator::compileValueInner
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-            KJ_FAIL_ASSERT("Union literal syntax is obsolete.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-            KJ_FAIL_ASSERT("Union literal syntax is obsolete.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      root.get(KJ_ASSERT_NONNULL(schema.getUnnamedUnion())).as<DynamicUnion>();'), (5, 2, u'-  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (6, 1, u'+  EXPECT_EQ(schema.getFieldByName("foo"), KJ_ASSERT_NONNULL(root.which()));'), (9, 2, u'-  EXPECT_EQ(schema.getMemberByName("bar"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (10, 1, u'+  EXPECT_EQ(schema.getFieldByName("bar"), KJ_ASSERT_NONNULL(root.which()));')]
===========================================
===========================================
Total add: 2
Total del: 7
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      root.get(KJ_ASSERT_NONNULL(schema.getUnnamedUnion())).as<DynamicUnion>();'), (5, 2, u'-  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (6, 1, u'+  EXPECT_EQ(schema.getFieldByName("foo"), KJ_ASSERT_NONNULL(root.which()));'), (9, 2, u'-  EXPECT_EQ(schema.getMemberByName("bar"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (10, 1, u'+  EXPECT_EQ(schema.getFieldByName("bar"), KJ_ASSERT_NONNULL(root.which()));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      root.get(KJ_ASSERT_NONNULL(schema.getUnnamedUnion())).as<DynamicUnion>();'), (5, 2, u'-  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (6, 1, u'+  EXPECT_EQ(schema.getFieldByName("foo"), KJ_ASSERT_NONNULL(root.which()));'), (9, 2, u'-  EXPECT_EQ(schema.getMemberByName("bar"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (10, 1, u'+  EXPECT_EQ(schema.getFieldByName("bar"), KJ_ASSERT_NONNULL(root.which()));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (3, 1, u'+  EXPECT_EQ(schema.getFieldByName("foo"), KJ_ASSERT_NONNULL(root.which()));')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (3, 1, u'+  EXPECT_EQ(schema.getFieldByName("foo"), KJ_ASSERT_NONNULL(root.which()));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (3, 1, u'+  EXPECT_EQ(schema.getFieldByName("foo"), KJ_ASSERT_NONNULL(root.which()));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  EXPECT_EQ(schema.getMemberByName("bar"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (5, 1, u'+  EXPECT_EQ(schema.getFieldByName("bar"), KJ_ASSERT_NONNULL(root.which()));')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  EXPECT_EQ(schema.getMemberByName("bar"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (5, 1, u'+  EXPECT_EQ(schema.getFieldByName("bar"), KJ_ASSERT_NONNULL(root.which()));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  EXPECT_EQ(schema.getMemberByName("bar"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (5, 1, u'+  EXPECT_EQ(schema.getFieldByName("bar"), KJ_ASSERT_NONNULL(root.which()));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (5, 1, u'+  EXPECT_EQ(schema.getFieldByName("foo"), KJ_ASSERT_NONNULL(root.which()));')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (5, 1, u'+  EXPECT_EQ(schema.getFieldByName("foo"), KJ_ASSERT_NONNULL(root.which()));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (5, 1, u'+  EXPECT_EQ(schema.getFieldByName("foo"), KJ_ASSERT_NONNULL(root.which()));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_EQ(4, barImports.size());'), (15, 2, u'-  ASSERT_EQ(4, barMembers.size());'), (21, 1, u'+  ASSERT_EQ(4, barFields.size());')]
===========================================
===========================================
Total add: 10
Total del: 16
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_EQ(4, barImports.size());'), (15, 2, u'-  ASSERT_EQ(4, barMembers.size());'), (21, 1, u'+  ASSERT_EQ(4, barFields.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_EQ(4, barImports.size());'), (15, 2, u'-  ASSERT_EQ(4, barMembers.size());'), (21, 1, u'+  ASSERT_EQ(4, barFields.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(schema.getMembers().size(),'), (10, 1, u'+  ASSERT_EQ(schema.getFields().size(), schema.getProto().getStruct().getFields().size());')]
===========================================
===========================================
Total add: 13
Total del: 17
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(schema.getMembers().size(),'), (10, 1, u'+  ASSERT_EQ(schema.getFields().size(), schema.getProto().getStruct().getFields().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(schema.getMembers().size(),'), (10, 1, u'+  ASSERT_EQ(schema.getFields().size(), schema.getProto().getStruct().getFields().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      KJ_FAIL_ASSERT("Need to compile value type:", (uint)type.which());'), (12, 1, u'+      KJ_FAIL_ASSERT("Need to compile value type:", (uint)type.which(),')]
===========================================
===========================================
Total add: 10
Total del: 1
Header: NodeTranslator::compileValue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      KJ_FAIL_ASSERT("Need to compile value type:", (uint)type.which());'), (12, 1, u'+      KJ_FAIL_ASSERT("Need to compile value type:", (uint)type.which(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      KJ_FAIL_ASSERT("Need to compile value type:", (uint)type.which());'), (12, 1, u'+      KJ_FAIL_ASSERT("Need to compile value type:", (uint)type.which(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(191, 1, u'+    KJ_ASSERT(discriminantPos == structNode.getDiscriminantCount());'), (192, 1, u'+    KJ_ASSERT(nonDiscriminantPos == fields.size());')]
===========================================
===========================================
Total add: 79
Total del: 107
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(191, 1, u'+    KJ_ASSERT(discriminantPos == structNode.getDiscriminantCount());'), (192, 1, u'+    KJ_ASSERT(nonDiscriminantPos == fields.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(191, 1, u'+    KJ_ASSERT(discriminantPos == structNode.getDiscriminantCount());'), (192, 1, u'+    KJ_ASSERT(nonDiscriminantPos == fields.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    KJ_ASSERT(value.getBody().which() == replacement.getBody().which()) {'), (9, 1, u'+    KJ_ASSERT(value.which() == replacement.which()) {')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    KJ_ASSERT(value.getBody().which() == replacement.getBody().which()) {'), (9, 1, u'+    KJ_ASSERT(value.which() == replacement.which()) {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    KJ_ASSERT(value.getBody().which() == replacement.getBody().which()) {'), (9, 1, u'+    KJ_ASSERT(value.which() == replacement.which()) {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(sourceIds.size() > 0, "Shouldn\'t have gotten here without sources.");'), (3, 1, u'+    KJ_ASSERT(sourceFiles.size() > 0, "Shouldn\'t have gotten here without sources.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(sourceIds.size() > 0, "Shouldn\'t have gotten here without sources.");'), (3, 1, u'+    KJ_ASSERT(sourceFiles.size() > 0, "Shouldn\'t have gotten here without sources.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(sourceIds.size() > 0, "Shouldn\'t have gotten here without sources.");'), (3, 1, u'+    KJ_ASSERT(sourceFiles.size() > 0, "Shouldn\'t have gotten here without sources.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(sourceIds.size() == 1);'), (4, 1, u'+    KJ_ASSERT(sourceFiles.size() == 1);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(sourceIds.size() == 1);'), (4, 1, u'+    KJ_ASSERT(sourceFiles.size() == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    KJ_ASSERT(sourceIds.size() == 1);'), (4, 1, u'+    KJ_ASSERT(sourceFiles.size() == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+    entry.setId(KJ_ASSERT_NONNULL(importRelative(name)).rootNode.getId());')]
===========================================
===========================================
Total add: 70
Total del: 0
Header: kj::Maybe<const Compiler::CompiledModule&> Compiler::CompiledModule::importRelat
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+    entry.setId(KJ_ASSERT_NONNULL(importRelative(name)).rootNode.getId());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+    entry.setId(KJ_ASSERT_NONNULL(importRelative(name)).rootNode.getId());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 2, u'-  KJ_ASSERT(iter == imports.end());')]
===========================================
===========================================
Total add: 1
Total del: 52
Header: NodeTranslator::disallowNested
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 2, u'-  KJ_ASSERT(iter == imports.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 2, u'-  KJ_ASSERT(iter == imports.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+          KJ_FAIL_ASSERT("Groups don\'t have ordinals.");'), (22, 1, u'+          KJ_FAIL_ASSERT("Unexpected member type.");')]
===========================================
===========================================
Total add: 28
Total del: 8
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+          KJ_FAIL_ASSERT("Groups don\'t have ordinals.");'), (22, 1, u'+          KJ_FAIL_ASSERT("Unexpected member type.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+          KJ_FAIL_ASSERT("Groups don\'t have ordinals.");'), (22, 1, u'+          KJ_FAIL_ASSERT("Unexpected member type.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        KJ_FAIL_ASSERT("addDiscriminant() didn\'t set the offset?");')]
===========================================
===========================================
Total add: 1
Total del: 12
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        KJ_FAIL_ASSERT("addDiscriminant() didn\'t set the offset?");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        KJ_FAIL_ASSERT("addDiscriminant() didn\'t set the offset?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            KJ_FAIL_ASSERT("Fields don\'t have members.");'), (19, 2, u'-            KJ_FAIL_ASSERT("Unexpected member type.");'), (36, 1, u'+        structNode.setDiscriminantOffset(KJ_ASSERT_NONNULL(unionScope->discriminantOffset));')]
===========================================
===========================================
Total add: 16
Total del: 19
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            KJ_FAIL_ASSERT("Fields don\'t have members.");'), (19, 2, u'-            KJ_FAIL_ASSERT("Unexpected member type.");'), (36, 1, u'+        structNode.setDiscriminantOffset(KJ_ASSERT_NONNULL(unionScope->discriminantOffset));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            KJ_FAIL_ASSERT("Fields don\'t have members.");'), (19, 2, u'-            KJ_FAIL_ASSERT("Unexpected member type.");'), (36, 1, u'+        structNode.setDiscriminantOffset(KJ_ASSERT_NONNULL(unionScope->discriminantOffset));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");')]
===========================================
===========================================
Total add: 5
Total del: 18
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    KJ_FAIL_ASSERT("can\'t get here");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      KJ_FAIL_ASSERT("Need to compile value type:", (uint)type.which());')]
===========================================
===========================================
Total add: 11
Total del: 4
Header: NodeTranslator::compileBootstrapValue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      KJ_FAIL_ASSERT("Need to compile value type:", (uint)type.which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      KJ_FAIL_ASSERT("Need to compile value type:", (uint)type.which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 1, u'+            KJ_FAIL_ASSERT("Union literal syntax is obsolete.");')]
===========================================
===========================================
Total add: 2
Total del: 35
Header: NodeTranslator::compileValueInner
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 1, u'+            KJ_FAIL_ASSERT("Union literal syntax is obsolete.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 1, u'+            KJ_FAIL_ASSERT("Union literal syntax is obsolete.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-    KJ_FAIL_ASSERT("Didn\'t recognize schema::Value::Body type?");')]
===========================================
===========================================
Total add: 0
Total del: 23
Header: NodeTranslator::compileValueInner
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-    KJ_FAIL_ASSERT("Didn\'t recognize schema::Value::Body type?");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-    KJ_FAIL_ASSERT("Didn\'t recognize schema::Value::Body type?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      auto constValue = dynamicConst.get(KJ_ASSERT_NONNULL(dynamicConst.which()));')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: NodeTranslator::readConstant
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      auto constValue = dynamicConst.get(KJ_ASSERT_NONNULL(dynamicConst.which()));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      auto constValue = dynamicConst.get(KJ_ASSERT_NONNULL(dynamicConst.which()));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value::body.");'), (3, 1, u'+            KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NodeTranslator::readConstant
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value::body.");'), (3, 1, u'+            KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value::body.");'), (3, 1, u'+            KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    case schema::Type::Body::OBJECT_TYPE: KJ_FAIL_ASSERT("List(Object) not supported."); break;'), (44, 1, u'+    case schema2::Type::OBJECT: KJ_FAIL_ASSERT("List(Object) not supported."); break;')]
===========================================
===========================================
Total add: 21
Total del: 21
Header: double>
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    case schema::Type::Body::OBJECT_TYPE: KJ_FAIL_ASSERT("List(Object) not supported."); break;'), (44, 1, u'+    case schema2::Type::OBJECT: KJ_FAIL_ASSERT("List(Object) not supported."); break;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    case schema::Type::Body::OBJECT_TYPE: KJ_FAIL_ASSERT("List(Object) not supported."); break;'), (44, 1, u'+    case schema2::Type::OBJECT: KJ_FAIL_ASSERT("List(Object) not supported."); break;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(77, 2, u'-    KJ_ASSERT(w->getProto().getBody().which() == schema::StructNode::Member::Body::FIELD_MEMBER,')]
===========================================
===========================================
Total add: 11
Total del: 86
Header: DynamicUnion::Builder::get
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(77, 2, u'-    KJ_ASSERT(w->getProto().getBody().which() == schema::StructNode::Member::Body::FIELD_MEMBER,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(77, 2, u'-    KJ_ASSERT(w->getProto().getBody().which() == schema::StructNode::Member::Body::FIELD_MEMBER,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(247, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (267, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (286, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (305, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (326, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (346, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (365, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (384, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 24
Total del: 438
Header: DynamicUnion::Builder::setDiscriminant
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(247, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (267, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (286, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (305, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (326, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (346, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (365, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (384, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(247, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (267, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (286, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (305, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (326, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (346, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (365, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (384, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)proto.getBody().which());')]
===========================================
===========================================
Total add: 20
Total del: 18
Header: DynamicStruct::Reader::getImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)proto.getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)proto.getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 123
Total del: 57
Header: DynamicStruct::Builder::getImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 57
Total del: 17
Header: DynamicStruct::Builder::setImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 202
Total del: 44
Header: DynamicStruct::Builder::initImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  KJ_FAIL_ASSERT("MemberInfo for enum nonsensically expects unnamed unions.");'), (9, 2, u'-  KJ_FAIL_ASSERT("MemberInfo for interface nonsensically expects unnamed unions.");'), (34, 2, u'-  KJ_DASSERT(lower < raw->memberCount && list[result.index].getProto().getName().size() == 0,')]
===========================================
===========================================
Total add: 1
Total del: 41
Header: namespace {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  KJ_FAIL_ASSERT("MemberInfo for enum nonsensically expects unnamed unions.");'), (9, 2, u'-  KJ_FAIL_ASSERT("MemberInfo for interface nonsensically expects unnamed unions.");'), (34, 2, u'-  KJ_DASSERT(lower < raw->memberCount && list[result.index].getProto().getName().size() == 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  KJ_FAIL_ASSERT("MemberInfo for enum nonsensically expects unnamed unions.");'), (9, 2, u'-  KJ_FAIL_ASSERT("MemberInfo for interface nonsensically expects unnamed unions.");'), (34, 2, u'-  KJ_DASSERT(lower < raw->memberCount && list[result.index].getProto().getName().size() == 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-        KJ_DASSERT(uIndex < unnamedUnionMembers.size());')]
===========================================
===========================================
Total add: 7
Total del: 28
Header: findSchemaMemberByName
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-        KJ_DASSERT(uIndex < unnamedUnionMembers.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-        KJ_DASSERT(uIndex < unnamedUnionMembers.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        KJ_ASSERT(*containingUnion == *this,')]
===========================================
===========================================
Total add: 0
Total del: 52
Header: StructSchema::Field::getDefaultValueSchemaOffset
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        KJ_ASSERT(*containingUnion == *this,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        KJ_ASSERT(*containingUnion == *this,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            uint result = holes.assertHoleAndAllocate(lgSize);'), (3, 1, u'+            uint result = KJ_ASSERT_NONNULL(holes.tryAllocate(lgSize));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            uint result = holes.assertHoleAndAllocate(lgSize);'), (3, 1, u'+            uint result = KJ_ASSERT_NONNULL(holes.tryAllocate(lgSize));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            uint result = holes.assertHoleAndAllocate(lgSize);'), (3, 1, u'+            uint result = KJ_ASSERT_NONNULL(holes.tryAllocate(lgSize));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+      root.get(KJ_ASSERT_NONNULL(schema.getUnnamedUnion())).as<DynamicUnion>();'), (28, 1, u'+  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (31, 1, u'+  EXPECT_EQ(schema.getMemberByName("bar"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (40, 1, u'+  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (49, 1, u'+  EXPECT_EQ(schema.getMemberByName("bar"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (58, 1, u'+  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));')]
===========================================
===========================================
Total add: 57
Total del: 5
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+      root.get(KJ_ASSERT_NONNULL(schema.getUnnamedUnion())).as<DynamicUnion>();'), (28, 1, u'+  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (31, 1, u'+  EXPECT_EQ(schema.getMemberByName("bar"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (40, 1, u'+  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (49, 1, u'+  EXPECT_EQ(schema.getMemberByName("bar"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (58, 1, u'+  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+      root.get(KJ_ASSERT_NONNULL(schema.getUnnamedUnion())).as<DynamicUnion>();'), (28, 1, u'+  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (31, 1, u'+  EXPECT_EQ(schema.getMemberByName("bar"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (40, 1, u'+  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (49, 1, u'+  EXPECT_EQ(schema.getMemberByName("bar"), KJ_ASSERT_NONNULL(unionBuilder.which()));'), (58, 1, u'+  EXPECT_EQ(schema.getMemberByName("foo"), KJ_ASSERT_NONNULL(unionBuilder.which()));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)proto.getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Reader::getImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)proto.getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)proto.getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  KJ_FAIL_ASSERT("MemberInfo for enum nonsensically expects unnamed unions.");'), (9, 1, u'+  KJ_FAIL_ASSERT("MemberInfo for interface nonsensically expects unnamed unions.");'), (34, 1, u'+  KJ_DASSERT(lower < raw->memberCount && list[result.index].getProto().getName().size() == 0,')]
===========================================
===========================================
Total add: 41
Total del: 2
Header: namespace {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  KJ_FAIL_ASSERT("MemberInfo for enum nonsensically expects unnamed unions.");'), (9, 1, u'+  KJ_FAIL_ASSERT("MemberInfo for interface nonsensically expects unnamed unions.");'), (34, 1, u'+  KJ_DASSERT(lower < raw->memberCount && list[result.index].getProto().getName().size() == 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  KJ_FAIL_ASSERT("MemberInfo for enum nonsensically expects unnamed unions.");'), (9, 1, u'+  KJ_FAIL_ASSERT("MemberInfo for interface nonsensically expects unnamed unions.");'), (34, 1, u'+  KJ_DASSERT(lower < raw->memberCount && list[result.index].getProto().getName().size() == 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+        KJ_DASSERT(uIndex < unnamedUnionMembers.size());')]
===========================================
===========================================
Total add: 17
Total del: 2
Header: findSchemaMemberByName
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+        KJ_DASSERT(uIndex < unnamedUnionMembers.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+        KJ_DASSERT(uIndex < unnamedUnionMembers.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+        KJ_ASSERT(*containingUnion == *this,')]
===========================================
===========================================
Total add: 18
Total del: 1
Header: StructSchema::Union::getMembers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+        KJ_ASSERT(*containingUnion == *this,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+        KJ_ASSERT(*containingUnion == *this,')]
===========================================
Class:class NodeTranslator::DuplicateNameDetector { class NodeTranslator::DuplicateNameDetector 
Class:class FakeFileReader final: public SchemaFile::FileReader { class FakeFileReader final: public SchemaFile::FileReader 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+    KJ_ASSERT(iter != files.end(), "FakeFileReader has no such file.", path);'), (94, 1, u'+  ASSERT_EQ(4, barImports.size());'), (106, 1, u'+  ASSERT_EQ(4, barMembers.size());')]
===========================================
Class:class SchemaParser::ModuleImpl: public compiler::Module { class SchemaParser::ModuleImpl: public compiler::Module 
Class:class MmapDisposer: public kj::ArrayDisposer { class MmapDisposer: public kj::ArrayDisposer 
Class:   class SchemaFile::DiskSchemaFile final: public SchemaFile { class SchemaFile::DiskSchemaFile final: public SchemaFile 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-        KJ_FAIL_ASSERT("execlp() returned?");')]
===========================================
===========================================
Total add: 14
Total del: 3
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-        KJ_FAIL_ASSERT("execlp() returned?");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-        KJ_FAIL_ASSERT("execlp() returned?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+          static_assert(sizeof(mask) == sizeof(value), "bug");'), (50, 1, u'+          static_assert(sizeof(mask) == sizeof(value), "bug");')]
===========================================
===========================================
Total add: 35
Total del: 13
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+          static_assert(sizeof(mask) == sizeof(value), "bug");'), (50, 1, u'+          static_assert(sizeof(mask) == sizeof(value), "bug");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+          static_assert(sizeof(mask) == sizeof(value), "bug");'), (50, 1, u'+          static_assert(sizeof(mask) == sizeof(value), "bug");')]
===========================================
Class:class CapnpcCppMain { class CapnpcCppMain 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+      KJ_FAIL_ASSERT("getDefaultValueSchemaOffset() can only be called on struct, list, "')]
===========================================
===========================================
Total add: 35
Total del: 0
Header: StructSchema::Member::asUnion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+      KJ_FAIL_ASSERT("getDefaultValueSchemaOffset() can only be called on struct, list, "')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+      KJ_FAIL_ASSERT("getDefaultValueSchemaOffset() can only be called on struct, list, "')]
===========================================
Class:class CapnpcCapnpMain { class CapnpcCapnpMain 
Class:class TextBlob { class TextBlob 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(91, 2, u'-  KJ_ASSERT(textPos == text.end(), textPos - text.end());'), (92, 2, u'-  KJ_ASSERT(branchesPos == branches.end(), branchesPos - branches.end());')]
===========================================
===========================================
Total add: 0
Total del: 140
Header: namespace {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(91, 2, u'-  KJ_ASSERT(textPos == text.end(), textPos - text.end());'), (92, 2, u'-  KJ_ASSERT(branchesPos == branches.end(), branchesPos - branches.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(91, 2, u'-  KJ_ASSERT(textPos == text.end(), textPos - text.end());'), (92, 2, u'-  KJ_ASSERT(branchesPos == branches.end(), branchesPos - branches.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    KJ_ASSERT(sourceIds.size() > 0, "Shouldn\'t have gotten here without sources.");')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    KJ_ASSERT(sourceIds.size() > 0, "Shouldn\'t have gotten here without sources.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    KJ_ASSERT(sourceIds.size() > 0, "Shouldn\'t have gotten here without sources.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+    KJ_FAIL_ASSERT("Dependency ID not present in compiler?", id);')]
===========================================
===========================================
Total add: 58
Total del: 0
Header: Compiler::Node::traverse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+    KJ_FAIL_ASSERT("Dependency ID not present in compiler?", id);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+    KJ_FAIL_ASSERT("Dependency ID not present in compiler?", id);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+void Mutex::assertLockedByCaller(Exclusivity exclusivity) {'), (5, 1, u'+      KJ_ASSERT(futex & EXCLUSIVE_HELD,'), (9, 1, u'+      KJ_ASSERT(futex & SHARED_COUNT_MASK,')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: Mutex::unlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+void Mutex::assertLockedByCaller(Exclusivity exclusivity) {'), (5, 1, u'+      KJ_ASSERT(futex & EXCLUSIVE_HELD,'), (9, 1, u'+      KJ_ASSERT(futex & SHARED_COUNT_MASK,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+void Mutex::assertLockedByCaller(Exclusivity exclusivity) {'), (5, 1, u'+      KJ_ASSERT(futex & EXCLUSIVE_HELD,'), (9, 1, u'+      KJ_ASSERT(futex & SHARED_COUNT_MASK,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+void Mutex::assertLockedByCaller(Exclusivity exclusivity) {'), (8, 1, u'+        KJ_FAIL_ASSERT("Tried to call getAlreadyLocked*() but lock is not held.");'), (16, 1, u'+        KJ_FAIL_ASSERT("Tried to call getAlreadyLocked*() but lock is not held.");')]
===========================================
===========================================
Total add: 20
Total del: 0
Header: Mutex::unlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+void Mutex::assertLockedByCaller(Exclusivity exclusivity) {'), (8, 1, u'+        KJ_FAIL_ASSERT("Tried to call getAlreadyLocked*() but lock is not held.");'), (16, 1, u'+        KJ_FAIL_ASSERT("Tried to call getAlreadyLocked*() but lock is not held.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+void Mutex::assertLockedByCaller(Exclusivity exclusivity) {'), (8, 1, u'+        KJ_FAIL_ASSERT("Tried to call getAlreadyLocked*() but lock is not held.");'), (16, 1, u'+        KJ_FAIL_ASSERT("Tried to call getAlreadyLocked*() but lock is not held.");')]
===========================================
Class:class DummyModule: public capnp::compiler::Module { class DummyModule: public capnp::compiler::Module 
Class:class CompilerMain final: public GlobalErrorReporter { class CompilerMain final: public GlobalErrorReporter 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(300, 1, u'+        KJ_FAIL_ASSERT("execlp() returned?");'), (339, 1, u'+    KJ_ASSERT(sourceIds.size() == 1);')]
===========================================
Class:class DummyModule: public capnp::compiler::Module { class DummyModule: public capnp::compiler::Module 
Class:class CompilerMain final: public GlobalErrorReporter { class CompilerMain final: public GlobalErrorReporter 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(225, 2, u'-        KJ_FAIL_ASSERT("execlp() returned?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT_EQ(4, item.size());'), (3, 1, u'+        ASSERT_EQ(4u, item.size());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT_EQ(4, item.size());'), (3, 1, u'+        ASSERT_EQ(4u, item.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT_EQ(4, item.size());'), (3, 1, u'+        ASSERT_EQ(4u, item.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  KJ_FAIL_ASSERT("Supposendly-unreachable branch executed.");')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: inlineRequireFailure
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  KJ_FAIL_ASSERT("Supposendly-unreachable branch executed.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  KJ_FAIL_ASSERT("Supposendly-unreachable branch executed.");')]
===========================================
Class:class CompilerMain { class CompilerMain 
Class:class CompilerMain final: public GlobalErrorReporter { class CompilerMain final: public GlobalErrorReporter 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            return holes.assertHoleAndAllocate(lgSize);'), (3, 1, u'+            uint result = holes.assertHoleAndAllocate(lgSize);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            return holes.assertHoleAndAllocate(lgSize);'), (3, 1, u'+            uint result = holes.assertHoleAndAllocate(lgSize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            return holes.assertHoleAndAllocate(lgSize);'), (3, 1, u'+            uint result = holes.assertHoleAndAllocate(lgSize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 2, u'-          KJ_DASSERT(location.lgSize >= lgSize);')]
===========================================
===========================================
Total add: 0
Total del: 56
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 2, u'-          KJ_DASSERT(location.lgSize >= lgSize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 2, u'-          KJ_DASSERT(location.lgSize >= lgSize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+        KJ_FAIL_ASSERT("execlp() returned?");')]
===========================================
===========================================
Total add: 75
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+        KJ_FAIL_ASSERT("execlp() returned?");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+        KJ_FAIL_ASSERT("execlp() returned?");')]
===========================================
Class:class CompilerMain { class CompilerMain 
Class:  class OptionDisplayOrder;
Class: class MainBuilder::MainImpl { class MainBuilder::MainImpl 
Class: class MainBuilder::Impl::OptionDisplayOrder { class MainBuilder::Impl::OptionDisplayOrder 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(116, 1, u'+    KJ_ASSERT(argc > 0);')]
===========================================
Class:class CerrErrorReporter: public capnp::compiler::ErrorReporter { class CerrErrorReporter: public capnp::compiler::ErrorReporter 
Class:class DummyModule: public capnp::compiler::Module { class DummyModule: public capnp::compiler::Module 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-          KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value::body.");'), (57, 1, u'+            KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value::body.");')]
===========================================
===========================================
Total add: 60
Total del: 42
Header: NodeTranslator::readConstant
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-          KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value::body.");'), (57, 1, u'+            KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value::body.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-          KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value::body.");'), (57, 1, u'+            KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value::body.");')]
===========================================
Class:class MmapDisposer: public kj::ArrayDisposer { class MmapDisposer: public kj::ArrayDisposer 
Class:class ModuleLoader::Impl { class ModuleLoader::Impl 
Class: class ModuleLoader::ModuleImpl: public Module { class ModuleLoader::ModuleImpl: public Module 
Class:class NodeTranslator::DynamicSlot { class NodeTranslator::DynamicSlot 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (42, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (54, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (66, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (86, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (148, 1, u'+  KJ_FAIL_ASSERT("Unknown type.");')]
===========================================
===========================================
Total add: 149
Total del: 0
Header: NodeTranslator::compileDefaultDefaultValue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (42, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (54, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (66, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (86, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (148, 1, u'+  KJ_FAIL_ASSERT("Unknown type.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (42, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (54, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (66, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (86, 1, u'+    KJ_FAIL_ASSERT("can\'t get here");'), (148, 1, u'+  KJ_FAIL_ASSERT("Unknown type.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+          KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value::body.");')]
===========================================
===========================================
Total add: 87
Total del: 0
Header: NodeTranslator::copyValue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+          KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value::body.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+          KJ_FAIL_ASSERT("Unrecognized Object-typed member of schema::Value::body.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+          default: KJ_FAIL_ASSERT("Expected 0, 1, 2, 3, 4, 5, or 6."); break;')]
===========================================
===========================================
Total add: 28
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+          default: KJ_FAIL_ASSERT("Expected 0, 1, 2, 3, 4, 5, or 6."); break;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+          default: KJ_FAIL_ASSERT("Expected 0, 1, 2, 3, 4, 5, or 6."); break;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_FAIL_ASSERT("TODO: compile interfaces");')]
===========================================
===========================================
Total add: 120
Total del: 0
Header: NodeTranslator::compileInterface
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_FAIL_ASSERT("TODO: compile interfaces");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  KJ_FAIL_ASSERT("TODO: compile interfaces");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+    KJ_FAIL_ASSERT("Didn\'t recognize schema::Value::Body type?");')]
===========================================
===========================================
Total add: 44
Total del: 0
Header: NodeTranslator::compileFinalValue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+    KJ_FAIL_ASSERT("Didn\'t recognize schema::Value::Body type?");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+    KJ_FAIL_ASSERT("Didn\'t recognize schema::Value::Body type?");')]
===========================================
Class:class CoutErrorReporter: public capnp::compiler::ErrorReporter { class CoutErrorReporter: public capnp::compiler::ErrorReporter 
Class:class CerrErrorReporter: public capnp::compiler::ErrorReporter { class CerrErrorReporter: public capnp::compiler::ErrorReporter 
Class:class Compiler::Alias { class Compiler::Alias 
Class:class Compiler::Node: public NodeTranslator::Resolver { class Compiler::Node: public NodeTranslator::Resolver 
Class: class Compiler::CompiledModule { class Compiler::CompiledModule 
Class: class Compiler::Impl: public SchemaLoader::LazyLoadCallback { class Compiler::Impl: public SchemaLoader::LazyLoadCallback 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(430, 1, u'+            KJ_FAIL_ASSERT("unknown declaration type", nestedDecl);'), (572, 1, u'+  KJ_ASSERT(node != nullptr);')]
===========================================
Class:class NodeTranslator::StructLayout { class NodeTranslator::StructLayout 
Class:    class DataLocationUsage {     class DataLocationUsage 
Class: class NodeTranslator::DuplicateOrdinalDetector { class NodeTranslator::DuplicateOrdinalDetector 
Class:   class NodeTranslator::StructTranslator { class NodeTranslator::StructTranslator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_ASSERT(pthread_join(threadId, nullptr) == 0);'), (3, 1, u'+  KJ_ASSERT(pthread_join(*reinterpret_cast<pthread_t*>(&threadId), nullptr) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Thread::Thread
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_ASSERT(pthread_join(threadId, nullptr) == 0);'), (3, 1, u'+  KJ_ASSERT(pthread_join(*reinterpret_cast<pthread_t*>(&threadId), nullptr) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  KJ_ASSERT(pthread_join(threadId, nullptr) == 0);'), (3, 1, u'+  KJ_ASSERT(pthread_join(*reinterpret_cast<pthread_t*>(&threadId), nullptr) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  KJ_ASSERT(futex == 0, "Mutex destroyed while locked.") { break; }'), (58, 1, u'+      KJ_DASSERT(futex & EXCLUSIVE_HELD, "Unlocked a mutex that wasn\'t locked.");'), (73, 1, u'+      KJ_DASSERT(futex & SHARED_COUNT_MASK, "Unshared a mutex that wasn\'t shared.");'), (125, 1, u'+    KJ_ASSERT(__atomic_load_n(&futex, __ATOMIC_ACQUIRE) == INITIALIZED);')]
===========================================
===========================================
Total add: 131
Total del: 0
Header: namespace _ {  // private
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  KJ_ASSERT(futex == 0, "Mutex destroyed while locked.") { break; }'), (58, 1, u'+      KJ_DASSERT(futex & EXCLUSIVE_HELD, "Unlocked a mutex that wasn\'t locked.");'), (73, 1, u'+      KJ_DASSERT(futex & SHARED_COUNT_MASK, "Unshared a mutex that wasn\'t shared.");'), (125, 1, u'+    KJ_ASSERT(__atomic_load_n(&futex, __ATOMIC_ACQUIRE) == INITIALIZED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  KJ_ASSERT(futex == 0, "Mutex destroyed while locked.") { break; }'), (58, 1, u'+      KJ_DASSERT(futex & EXCLUSIVE_HELD, "Unlocked a mutex that wasn\'t locked.");'), (73, 1, u'+      KJ_DASSERT(futex & SHARED_COUNT_MASK, "Unshared a mutex that wasn\'t shared.");'), (125, 1, u'+    KJ_ASSERT(__atomic_load_n(&futex, __ATOMIC_ACQUIRE) == INITIALIZED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+        ASSERT_EQ(4, item.size());')]
===========================================
===========================================
Total add: 48
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+        ASSERT_EQ(4, item.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+        ASSERT_EQ(4, item.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        KJ_DASSERT(landingPad != nullptr,')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        KJ_DASSERT(landingPad != nullptr,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        KJ_DASSERT(landingPad != nullptr,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-  KJ_ASSERT(builder.segment == result.segment,')]
===========================================
===========================================
Total add: 2
Total del: 14
Header: ListReader::getObjectElement
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-  KJ_ASSERT(builder.segment == result.segment,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-  KJ_ASSERT(builder.segment == result.segment,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-  KJ_ASSERT(builder.segment == result.segment,')]
===========================================
===========================================
Total add: 3
Total del: 12
Header: OrphanBuilder::initList
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-  KJ_ASSERT(builder.segment == result.segment,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-  KJ_ASSERT(builder.segment == result.segment,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    KJ_ASSERT(builder.segment == result.segment,')]
===========================================
===========================================
Total add: 2
Total del: 5
Header: OrphanBuilder::initStructList
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    KJ_ASSERT(builder.segment == result.segment,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    KJ_ASSERT(builder.segment == result.segment,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
Total add: 3
Total del: 6
Header: OrphanBuilder::initText
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
Total add: 3
Total del: 5
Header: OrphanBuilder::initData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(ptr) <= result.segment->getSize(),')]
===========================================
===========================================
Total add: 3
Total del: 7
Header: OrphanBuilder::copy
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(ptr) <= result.segment->getSize(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(ptr) <= result.segment->getSize(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(ptr) <= result.segment->getSize(),')]
===========================================
===========================================
Total add: 3
Total del: 13
Header: OrphanBuilder::copy
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(ptr) <= result.segment->getSize(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(ptr) <= result.segment->getSize(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
Total add: 4
Total del: 8
Header: OrphanBuilder::copy
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
Total add: 4
Total del: 8
Header: OrphanBuilder::copy
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    KJ_ASSERT(segment->getSegmentId() == _::SegmentId(0),'), (14, 1, u'+    KJ_ASSERT(allocation.segment->getSegmentId() == _::SegmentId(0),'), (17, 2, u'-    KJ_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),'), (18, 1, u'+    KJ_ASSERT(allocation.words == allocation.segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Total add: 7
Total del: 9
Header: MessageBuilder::getRootSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    KJ_ASSERT(segment->getSegmentId() == _::SegmentId(0),'), (14, 1, u'+    KJ_ASSERT(allocation.segment->getSegmentId() == _::SegmentId(0),'), (17, 2, u'-    KJ_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),'), (18, 1, u'+    KJ_ASSERT(allocation.words == allocation.segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    KJ_ASSERT(segment->getSegmentId() == _::SegmentId(0),'), (14, 1, u'+    KJ_ASSERT(allocation.segment->getSegmentId() == _::SegmentId(0),'), (17, 2, u'-    KJ_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),'), (18, 1, u'+    KJ_ASSERT(allocation.words == allocation.segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  KJ_DASSERT(reinterpret_cast<uintptr_t>(result) % alignment == 0);')]
===========================================
===========================================
Total add: 15
Total del: 1
Header: Arena::allocateBytes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  KJ_DASSERT(reinterpret_cast<uintptr_t>(result) % alignment == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  KJ_DASSERT(reinterpret_cast<uintptr_t>(result) % alignment == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-  KJ_DASSERT(reinterpret_cast<uintptr_t>(result) % alignment == 0);')]
===========================================
===========================================
Total add: 2
Total del: 9
Header: Arena::allocateBytes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-  KJ_DASSERT(reinterpret_cast<uintptr_t>(result) % alignment == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-  KJ_DASSERT(reinterpret_cast<uintptr_t>(result) % alignment == 0);')]
===========================================
Class:  class Thread { class Thread 
Class:   class Thread { class Thread 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+  static_assert(sizeof(threadId) >= sizeof(pthread_t),'), (42, 1, u'+  KJ_ASSERT(pthread_join(threadId, nullptr) == 0);')]
===========================================
Class:  class Thread { class Thread 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  static_assert(isPowerOfTwo(sizeof(ChunkHeader)), "sizeof(ChunkHeader) is not a power of 2.");'), (9, 2, u'-  static_assert(isPowerOfTwo(sizeof(ObjectHeader)), "sizeof(ObjectHeader) is not a power of 2.");')]
===========================================
===========================================
Total add: 9
Total del: 9
Header: alignTo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  static_assert(isPowerOfTwo(sizeof(ChunkHeader)), "sizeof(ChunkHeader) is not a power of 2.");'), (9, 2, u'-  static_assert(isPowerOfTwo(sizeof(ObjectHeader)), "sizeof(ObjectHeader) is not a power of 2.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  static_assert(isPowerOfTwo(sizeof(ChunkHeader)), "sizeof(ChunkHeader) is not a power of 2.");'), (9, 2, u'-  static_assert(isPowerOfTwo(sizeof(ObjectHeader)), "sizeof(ObjectHeader) is not a power of 2.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  KJ_DASSERT(reinterpret_cast<uintptr_t>(result) % alignment == 0);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: Arena::allocateBytes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  KJ_DASSERT(reinterpret_cast<uintptr_t>(result) % alignment == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  KJ_DASSERT(reinterpret_cast<uintptr_t>(result) % alignment == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  KJ_DASSERT(reinterpret_cast<uintptr_t>(header) % alignof(ObjectHeader) == 0);')]
===========================================
===========================================
Total add: 11
Total del: 3
Header: Arena::copyString
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  KJ_DASSERT(reinterpret_cast<uintptr_t>(header) % alignof(ObjectHeader) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  KJ_DASSERT(reinterpret_cast<uintptr_t>(header) % alignof(ObjectHeader) == 0);')]
===========================================
Class: class FakeLoaderCallback: public SchemaLoader::LazyLoadCallback { class FakeLoaderCallback: public SchemaLoader::LazyLoadCallback 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    ASSERT_EQ(1u, list.size());'), (17, 1, u'+    ASSERT_EQ(2u, list.size());')]
===========================================
===========================================
Total add: 82
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    ASSERT_EQ(1u, list.size());'), (17, 1, u'+    ASSERT_EQ(2u, list.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    ASSERT_EQ(1u, list.size());'), (17, 1, u'+    ASSERT_EQ(2u, list.size());')]
===========================================
Class:class SchemaLoader::InitializerImpl: public _::RawSchema::Initializer { class SchemaLoader::InitializerImpl: public _::RawSchema::Initializer 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    KJ_ASSERT(mutableSchema == schema,')]
===========================================
===========================================
Total add: 26
Total del: 1
Header: SchemaLoader::Impl::getAllLoaded
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    KJ_ASSERT(mutableSchema == schema,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    KJ_ASSERT(mutableSchema == schema,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
Total add: 1
Total del: 22
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT_EQ(2u, orphan.getReader().size());')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT_EQ(2u, orphan.getReader().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT_EQ(2u, orphan.getReader().size());')]
===========================================
Class:class Thread { class Thread 
Class:class Indent { class Indent 
Class:class ExactString { class ExactString 
Class:class ExactString { class ExactString 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_EQ(2u, orphan.get().size());'), (22, 1, u'+  ASSERT_EQ(2u, root.asReader().getStructList().size());')]
===========================================
===========================================
Total add: 25
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_EQ(2u, orphan.get().size());'), (22, 1, u'+  ASSERT_EQ(2u, root.asReader().getStructList().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_EQ(2u, orphan.get().size());'), (22, 1, u'+  ASSERT_EQ(2u, root.asReader().getStructList().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  ASSERT_EQ(2u, orphan.get().size());'), (23, 1, u'+  ASSERT_EQ(2u, root.asReader().getObjectField<List<TestAllTypes>>().size());')]
===========================================
===========================================
Total add: 26
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  ASSERT_EQ(2u, orphan.get().size());'), (23, 1, u'+  ASSERT_EQ(2u, root.asReader().getObjectField<List<TestAllTypes>>().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  ASSERT_EQ(2u, orphan.get().size());'), (23, 1, u'+  ASSERT_EQ(2u, root.asReader().getObjectField<List<TestAllTypes>>().size());')]
===========================================
Class:class TestFailingErrorReporter: public ErrorReporter { class TestFailingErrorReporter: public ErrorReporter 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+  KJ_ASSERT(n == sizeof(result), "Incomplete read from /dev/urandom.", n);')]
===========================================
===========================================
Total add: 67
Total del: 0
Header: namespace compiler {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+  KJ_ASSERT(n == sizeof(result), "Incomplete read from /dev/urandom.", n);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+  KJ_ASSERT(n == sizeof(result), "Incomplete read from /dev/urandom.", n);')]
===========================================
Class:class ExactString { class ExactString 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    KJ_ASSERT(pos == builder.end());'), (18, 1, u'+  KJ_ASSERT(pos == builder.end());')]
===========================================
===========================================
Total add: 7
Total del: 9
Header: attachDocComment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    KJ_ASSERT(pos == builder.end());'), (18, 1, u'+  KJ_ASSERT(pos == builder.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    KJ_ASSERT(pos == builder.end());'), (18, 1, u'+  KJ_ASSERT(pos == builder.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    KJ_DASSERT(dst->isNull());')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    KJ_DASSERT(dst->isNull());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    KJ_DASSERT(dst->isNull());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+    KJ_ASSERT(index != throwAt);'), (39, 1, u'+    KJ_ASSERT(other.index != throwAt);'), (49, 1, u'+      KJ_ASSERT(count != throwAt);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 1, u'+  KJ_DASSERT(isPowerOfTwo(alignment), alignment);'), (81, 1, u'+  static_assert(isPowerOfTwo(sizeof(ChunkHeader)), "sizeof(ChunkHeader) is not a power of 2.");'), (82, 1, u'+  static_assert(isPowerOfTwo(sizeof(ObjectHeader)), "sizeof(ObjectHeader) is not a power of 2.");'), (83, 1, u'+  KJ_DASSERT(isPowerOfTwo(alignment), alignment);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(62, 1, u'+    KJ_ASSERT(pos == builder.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
Total add: 0
Total del: 5
Header: static_assert
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  KJ_ASSERT(builder.segment == result.segment,'), (38, 1, u'+  KJ_ASSERT(builder.segment == result.segment,'), (55, 1, u'+    KJ_ASSERT(builder.segment == result.segment,'), (68, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),'), (78, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),'), (89, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(ptr) <= result.segment->getSize(),'), (107, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(ptr) <= result.segment->getSize(),'), (120, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),'), (133, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
Total add: 220
Total del: 0
Header: ListReader::getObjectElement
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  KJ_ASSERT(builder.segment == result.segment,'), (38, 1, u'+  KJ_ASSERT(builder.segment == result.segment,'), (55, 1, u'+    KJ_ASSERT(builder.segment == result.segment,'), (68, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),'), (78, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),'), (89, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(ptr) <= result.segment->getSize(),'), (107, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(ptr) <= result.segment->getSize(),'), (120, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),'), (133, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  KJ_ASSERT(builder.segment == result.segment,'), (38, 1, u'+  KJ_ASSERT(builder.segment == result.segment,'), (55, 1, u'+    KJ_ASSERT(builder.segment == result.segment,'), (68, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),'), (78, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),'), (89, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(ptr) <= result.segment->getSize(),'), (107, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(ptr) <= result.segment->getSize(),'), (120, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),'), (133, 1, u'+  KJ_ASSERT(result.segment->getOffsetTo(result.location) <= result.segment->getSize(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(147, 1, u'+  ASSERT_EQ(2u, reader.size());'), (159, 1, u'+  ASSERT_EQ(8u, orphan.get().size());'), (171, 1, u'+  ASSERT_EQ(2u, orphan.get().size());'), (177, 1, u'+  ASSERT_EQ(2u, root.getDataField().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (12, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (20, 2, u'-  ASSERT_EQ(expected.size(), reader.size());')]
===========================================
===========================================
Total add: 0
Total del: 24
Header: dynamicInitTestMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (12, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (20, 2, u'-  ASSERT_EQ(expected.size(), reader.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (12, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (20, 2, u'-  ASSERT_EQ(expected.size(), reader.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-  ASSERT_EQ(expected.size(), list.size());'), (17, 2, u'-  ASSERT_EQ(expected.size(), typed.size());')]
===========================================
===========================================
Total add: 0
Total del: 21
Header: genericCheckTestMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-  ASSERT_EQ(expected.size(), list.size());'), (17, 2, u'-  ASSERT_EQ(expected.size(), typed.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-  ASSERT_EQ(expected.size(), list.size());'), (17, 2, u'-  ASSERT_EQ(expected.size(), typed.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+    ASSERT_FALSE(input.atEnd());')]
===========================================
===========================================
Total add: 38
Total del: 0
Header: typedef Span<const char*> TestLocation;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+    ASSERT_FALSE(input.atEnd());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+    ASSERT_FALSE(input.atEnd());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+  KJ_DASSERT(pos == buf.end());')]
===========================================
===========================================
Total add: 40
Total del: 0
Header: namespace parse {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+  KJ_DASSERT(pos == buf.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+  KJ_DASSERT(pos == buf.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(KJ_ASSERT(1 == 2), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_FATAL(KJ_ASSERT(1 == 2)); line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(KJ_ASSERT(1 == 2), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_FATAL(KJ_ASSERT(1 == 2)); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(KJ_ASSERT(1 == 2), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_FATAL(KJ_ASSERT(1 == 2)); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(KJ_ASSERT(1 == 2, i, "hi", str), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_FATAL(KJ_ASSERT(1 == 2, i, "hi", str)); line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(KJ_ASSERT(1 == 2, i, "hi", str), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_FATAL(KJ_ASSERT(1 == 2, i, "hi", str)); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(KJ_ASSERT(1 == 2, i, "hi", str), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_FATAL(KJ_ASSERT(1 == 2, i, "hi", str)); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(KJ_FAIL_ASSERT("foo"), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_FATAL(KJ_FAIL_ASSERT("foo")); line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(KJ_FAIL_ASSERT("foo"), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_FATAL(KJ_FAIL_ASSERT("foo")); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(KJ_FAIL_ASSERT("foo"), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_FATAL(KJ_FAIL_ASSERT("foo")); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    line = __LINE__; KJ_FAIL_ASSERT("foo");'), (16, 1, u'+      line = __LINE__; KJ_FAIL_ASSERT("foo") { break; }')]
===========================================
===========================================
Total add: 13
Total del: 11
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    line = __LINE__; KJ_FAIL_ASSERT("foo");'), (16, 1, u'+      line = __LINE__; KJ_FAIL_ASSERT("foo") { break; }')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    line = __LINE__; KJ_FAIL_ASSERT("foo");'), (16, 1, u'+      line = __LINE__; KJ_FAIL_ASSERT("foo") { break; }')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    line = __LINE__; KJ_FAIL_ASSERT("foo");'), (13, 1, u'+      line = __LINE__; KJ_FAIL_ASSERT("foo");'), (28, 1, u'+      line = __LINE__; KJ_FAIL_ASSERT("foo");')]
===========================================
===========================================
Total add: 25
Total del: 8
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    line = __LINE__; KJ_FAIL_ASSERT("foo");'), (13, 1, u'+      line = __LINE__; KJ_FAIL_ASSERT("foo");'), (28, 1, u'+      line = __LINE__; KJ_FAIL_ASSERT("foo");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    line = __LINE__; KJ_FAIL_ASSERT("foo");'), (13, 1, u'+      line = __LINE__; KJ_FAIL_ASSERT("foo");'), (28, 1, u'+      line = __LINE__; KJ_FAIL_ASSERT("foo");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (3, 1, u'+    EXPECT_FATAL(KJ_FAIL_ASSERT("bar")); line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (3, 1, u'+    EXPECT_FATAL(KJ_FAIL_ASSERT("bar")); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (3, 1, u'+    EXPECT_FATAL(KJ_FAIL_ASSERT("bar")); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (3, 1, u'+      EXPECT_FATAL(KJ_FAIL_ASSERT("bar")); line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (3, 1, u'+      EXPECT_FATAL(KJ_FAIL_ASSERT("bar")); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (3, 1, u'+      EXPECT_FATAL(KJ_FAIL_ASSERT("bar")); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (3, 1, u'+      EXPECT_FATAL(KJ_FAIL_ASSERT("bar")); line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (3, 1, u'+      EXPECT_FATAL(KJ_FAIL_ASSERT("bar")); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (3, 1, u'+      EXPECT_FATAL(KJ_FAIL_ASSERT("bar")); line = __LINE__;')]
===========================================
Class:class ThrowingDestructor: public UnwindDetector { class ThrowingDestructor: public UnwindDetector 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+    KJ_FAIL_ASSERT("foo") {'), (58, 1, u'+      KJ_FAIL_ASSERT("bar") { break; }'), (78, 1, u'+    KJ_FAIL_ASSERT("baz") {')]
===========================================
Class:class RecoverableExceptionCatcher: public ExceptionCallback { class RecoverableExceptionCatcher: public ExceptionCallback 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    static_assert(sizeof(internal::ReaderArena) <= sizeof(arenaSpace),'), (6, 1, u'+    static_assert(sizeof(_::ReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: MessageReader::~MessageReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    static_assert(sizeof(internal::ReaderArena) <= sizeof(arenaSpace),'), (6, 1, u'+    static_assert(sizeof(_::ReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    static_assert(sizeof(internal::ReaderArena) <= sizeof(arenaSpace),'), (6, 1, u'+    static_assert(sizeof(_::ReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    static_assert(sizeof(internal::BuilderArena) <= sizeof(arenaSpace),'), (9, 1, u'+    static_assert(sizeof(_::BuilderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: MessageBuilder::~MessageBuilder
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    static_assert(sizeof(internal::BuilderArena) <= sizeof(arenaSpace),'), (9, 1, u'+    static_assert(sizeof(_::BuilderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    static_assert(sizeof(internal::BuilderArena) <= sizeof(arenaSpace),'), (9, 1, u'+    static_assert(sizeof(_::BuilderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    KJ_ASSERT(segment->getSegmentId() == internal::SegmentId(0),'), (5, 1, u'+    KJ_ASSERT(segment->getSegmentId() == _::SegmentId(0),')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: MessageBuilder::getRootSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    KJ_ASSERT(segment->getSegmentId() == internal::SegmentId(0),'), (5, 1, u'+    KJ_ASSERT(segment->getSegmentId() == _::SegmentId(0),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    KJ_ASSERT(segment->getSegmentId() == internal::SegmentId(0),'), (5, 1, u'+    KJ_ASSERT(segment->getSegmentId() == _::SegmentId(0),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(176, 1, u'+    KJ_DASSERT(segmentState->forOutput.size() == segmentState->builders.size() + 1,'), (219, 1, u'+  KJ_FAIL_ASSERT(')]
===========================================
Class:class CarSalesTestCase { class CarSalesTestCase 
Class:class CatRankTestCase { class CatRankTestCase 
Class:class ExpressionTestCase { class ExpressionTestCase 
Class:class CarSalesTestCase { class CarSalesTestCase 
Class:class CatRankTestCase { class CatRankTestCase 
Class:class ExpressionTestCase { class ExpressionTestCase 
Class:class CarSalesTestCase { class CarSalesTestCase 
Class:class CatRankTestCase { class CatRankTestCase 
Class:class ExpressionTestCase { class ExpressionTestCase 
Class:class Gain { class Gain 
Class:class TextBlob { class TextBlob 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(129, 1, u'+  KJ_ASSERT(textPos == text.end(), textPos - text.end());'), (130, 1, u'+  KJ_ASSERT(branchesPos == branches.end(), branchesPos - branches.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+  ASSERT_EQ(expected.size(), list.size());'), (66, 1, u'+  ASSERT_EQ(expected.size(), typed.size());'), (172, 1, u'+      ASSERT_EQ(4u, list.size());'), (211, 1, u'+      ASSERT_EQ(4u, list.size());'), (306, 1, u'+  ASSERT_EQ(TestUnion::Union0::U0F1S32, reader.getUnion0().which());'), (309, 1, u'+  ASSERT_EQ(TestUnion::Union1::U1F1SP, reader.getUnion1().which());'), (312, 1, u'+  ASSERT_EQ(TestUnion::Union2::U2F0S1, reader.getUnion2().which());'), (315, 1, u'+  ASSERT_EQ(TestUnion::Union3::U3F0S64, reader.getUnion3().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 1, u'+  static_assert(sizeof(T) == sizeof(U), "Size must match.");'), (85, 1, u'+    case schema::Type::Body::OBJECT_TYPE: KJ_FAIL_ASSERT("List(Object) not supported."); break;'), (258, 1, u'+    KJ_ASSERT(w->getProto().getBody().which() == schema::StructNode::Member::Body::FIELD_MEMBER,'), (459, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (478, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (496, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (514, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (534, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (553, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (571, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (589, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (726, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");'), (734, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (829, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");'), (837, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (967, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");'), (977, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (1114, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.") {'), (1173, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.");'), (1177, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.") {'), (1226, 1, u'+      KJ_FAIL_ASSERT("DynamicList of structs does not support set().") {'), (1248, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.") {'), (1253, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.") {'), (1308, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.");'), (1344, 1, u'+    case INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented."); return Reader();'), (1347, 1, u'+  KJ_FAIL_ASSERT("Missing switch case.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (44, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (52, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (69, 1, u'+  ASSERT_EQ(1u, builder.getSegmentsForOutput().size());'), (159, 1, u'+      ASSERT_EQ(3u, list.size());'), (167, 1, u'+      ASSERT_EQ(3u, list.size());'), (179, 1, u'+      ASSERT_EQ(2u, list.size());'), (186, 1, u'+      ASSERT_EQ(2u, list.size());'), (195, 1, u'+      ASSERT_EQ(2u, list.size());'), (201, 1, u'+      ASSERT_EQ(2u, list.size());'), (208, 1, u'+      ASSERT_EQ(2u, list.size());'), (281, 1, u'+  KJ_ASSERT(segment.size() > 2, segment.size());'), (492, 1, u'+    ASSERT_EQ(3u, l.size());'), (506, 1, u'+    ASSERT_EQ(3u, l.size());'), (521, 1, u'+    ASSERT_EQ(3u, l.size());'), (542, 1, u'+    ASSERT_EQ(4u, l.size());'), (557, 1, u'+    ASSERT_EQ(4u, l.size());'), (575, 1, u'+    ASSERT_EQ(4u, l.size());'), (593, 1, u'+    ASSERT_EQ(4u, l.size());'), (844, 1, u'+  ASSERT_EQ(2u, builder.getSegmentsForOutput().size());'), (866, 1, u'+  ASSERT_EQ(3u, builder.getSegmentsForOutput().size());'), (875, 1, u'+  ASSERT_EQ(expectedData.size(), reader.size());'), (888, 1, u'+    ASSERT_EQ(expectedData.size(), builder.size());'), (911, 1, u'+    ASSERT_EQ(expectedData.size(), builder.size());'), (922, 1, u'+    ASSERT_EQ(expectedData.size(), builder.size());'), (1100, 1, u'+    ASSERT_EQ(4u, l.size());'), (1123, 1, u'+    ASSERT_EQ(4u, l.size());'), (1145, 1, u'+    ASSERT_EQ(4u, l.size());'), (1165, 1, u'+    ASSERT_EQ(4u, l.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(186, 1, u'+    ASSERT_EQ(3 * ELEMENTS, list.size());'), (194, 1, u'+    ASSERT_EQ(4 * ELEMENTS, list.size());'), (208, 1, u'+    ASSERT_EQ(5 * ELEMENTS, list.size());'), (211, 1, u'+      ASSERT_EQ((i + 1) * ELEMENTS, element.size());'), (240, 1, u'+    ASSERT_EQ(3 * ELEMENTS, list.size());'), (248, 1, u'+    ASSERT_EQ(4 * ELEMENTS, list.size());'), (260, 1, u'+    ASSERT_EQ(5 * ELEMENTS, list.size());'), (263, 1, u'+      ASSERT_EQ((i + 1) * ELEMENTS, element.size());'), (298, 1, u'+  ASSERT_EQ(1u, segments.size());'), (319, 1, u'+  ASSERT_EQ(15u, segments.size());'), (356, 1, u'+  ASSERT_EQ(6u, segments.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(186, 1, u'+static_assert(sizeof(WirePointer) == sizeof(word),'), (188, 1, u'+static_assert(POINTERS * WORDS_PER_POINTER * BYTES_PER_WORD / BYTES == sizeof(WirePointer),'), (190, 1, u'+static_assert(POINTERS * BYTES_PER_POINTER / BYTES == sizeof(WirePointer),'), (192, 1, u'+static_assert(POINTERS * BITS_PER_POINTER / BITS_PER_BYTE / BYTES == sizeof(WirePointer),'), (199, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");'), (204, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");'), (340, 1, u'+        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {'), (384, 1, u'+            KJ_ASSERT(elementTag->kind() == WirePointer::STRUCT,'), (408, 1, u'+        KJ_FAIL_ASSERT("Unexpected FAR pointer.") {'), (413, 1, u'+        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {'), (545, 1, u'+        KJ_FAIL_ASSERT("Unexpected FAR pointer.") {'), (648, 1, u'+            KJ_ASSERT(srcTag->kind() == WirePointer::STRUCT,'), (697, 1, u'+        KJ_DASSERT(landingPad != nullptr,'), (927, 1, u'+          KJ_FAIL_ASSERT("Can\'t get here.");'), (1164, 1, u'+        KJ_ASSERT(oldSize < FieldSize::EIGHT_BYTES);'), (1168, 1, u'+        KJ_ASSERT(elementSize.preferredListEncoding >= FieldSize::BIT);'), (1382, 1, u'+            KJ_FAIL_ASSERT("invalid list step size", value.step * ELEMENTS / BITS);'), (2163, 1, u'+  KJ_DASSERT(structPointerCount == 0 * POINTERS ||'), (2174, 1, u'+  KJ_DASSERT((uintptr_t)ptr % sizeof(WirePointer) == 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+    static_assert(sizeof(internal::ReaderArena) <= sizeof(arenaSpace),'), (75, 1, u'+    static_assert(sizeof(internal::BuilderArena) <= sizeof(arenaSpace),'), (83, 1, u'+    KJ_ASSERT(segment->getSegmentId() == internal::SegmentId(0),'), (86, 1, u'+    KJ_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),'), (164, 1, u'+        KJ_ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(208, 1, u'+  ASSERT_EQ(2u, list.size());')]
===========================================
Class:class SchemaLoader::Impl { class SchemaLoader::Impl 
Class:   class SchemaLoader::Validator { class SchemaLoader::Validator 
Class:   class SchemaLoader::CompatibilityChecker { class SchemaLoader::CompatibilityChecker 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");'), (122, 1, u'+    KJ_DASSERT(pos == *count);'), (134, 1, u'+    KJ_DASSERT(pos == *count);'), (941, 1, u'+    KJ_ASSERT(value.getBody().which() == replacement.getBody().which()) {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 1, u'+  ASSERT_EQ(schema.getMembers().size(),'), (159, 1, u'+  ASSERT_EQ(schema.getEnumerants().size(),')]
===========================================
Class:class TestPipe: public kj::BufferedInputStream, public kj::OutputStream { class TestPipe: public kj::BufferedInputStream, public kj::OutputStream 
Class:class TestMessageBuilder: public MallocMessageBuilder { class TestMessageBuilder: public MallocMessageBuilder 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+    KJ_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");'), (72, 1, u'+    KJ_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(68, 1, u'+    KJ_DASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,'), (124, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (136, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (179, 1, u'+  KJ_FAIL_ASSERT("Can\'t get here.");'), (250, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (261, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (298, 1, u'+  KJ_FAIL_ASSERT("Can\'t get here.");')]
===========================================
Class:class TestMessageBuilder: public MallocMessageBuilder { class TestMessageBuilder: public MallocMessageBuilder 
Class:class TestPipe: public kj::BufferedInputStream, public kj::OutputStream { class TestPipe: public kj::BufferedInputStream, public kj::OutputStream 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(98, 1, u'+    KJ_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");'), (106, 1, u'+    KJ_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
Class:class SnappyInputStream::InputStreamSnappySource: public snappy::Source { class SnappyInputStream::InputStreamSnappySource: public snappy::Source 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+    KJ_FAIL_ASSERT("Snappy doesn\'t actually call this.");'), (124, 1, u'+  KJ_DASSERT(SNAPPY_COMPRESSED_BUFFER_SIZE >= snappy::MaxCompressedLength(snappy::kBlockSize),'), (162, 1, u'+    KJ_ASSERT(n <= compressedBuffer.size(),')]
===========================================
Class:class TestMessageBuilder: public MallocMessageBuilder { class TestMessageBuilder: public MallocMessageBuilder 
Class:class TestInputStream: public kj::InputStream { class TestInputStream: public kj::InputStream 
Class:class TestOutputStream: public kj::OutputStream { class TestOutputStream: public kj::OutputStream 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(106, 1, u'+    KJ_ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");'), (261, 1, u'+  ASSERT_GE(tmpfile.get(), 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(125, 1, u'+  KJ_DASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(172, 1, u'+      KJ_FAIL_ASSERT("Don\'t know how to print interfaces.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(219, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (227, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (235, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (300, 1, u'+      ASSERT_EQ(3u, listReader.size());'), (321, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (329, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (339, 1, u'+    ASSERT_EQ(3u, listReader.size());'), (359, 1, u'+  ASSERT_EQ(expected.size(), list.size());'), (365, 1, u'+  ASSERT_EQ(expected.size(), typed.size());'), (382, 1, u'+  ASSERT_EQ(expected.size(), list.size());'), (445, 1, u'+      ASSERT_EQ(3u, listReader.size());'), (466, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (474, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (484, 1, u'+    ASSERT_EQ(3u, listReader.size());'), (753, 1, u'+  ASSERT_EQ(2u, lists.getList0().size());'), (754, 1, u'+  ASSERT_EQ(4u, lists.getList1().size());'), (755, 1, u'+  ASSERT_EQ(2u, lists.getList8().size());'), (756, 1, u'+  ASSERT_EQ(2u, lists.getList16().size());'), (757, 1, u'+  ASSERT_EQ(2u, lists.getList32().size());'), (758, 1, u'+  ASSERT_EQ(2u, lists.getList64().size());'), (759, 1, u'+  ASSERT_EQ(2u, lists.getListP().size());'), (780, 1, u'+    ASSERT_EQ(3u, l.size());'), (788, 1, u'+    ASSERT_EQ(3u, l.size());'), (796, 1, u'+    ASSERT_EQ(2u, l.size());'), (798, 1, u'+    ASSERT_EQ(2u, e.size());'), (802, 1, u'+    ASSERT_EQ(1u, e.size());'), (814, 1, u'+  ASSERT_EQ(2u, lists.get("list0").as<DynamicList>().size());'), (815, 1, u'+  ASSERT_EQ(4u, lists.get("list1").as<DynamicList>().size());'), (816, 1, u'+  ASSERT_EQ(2u, lists.get("list8").as<DynamicList>().size());'), (817, 1, u'+  ASSERT_EQ(2u, lists.get("list16").as<DynamicList>().size());'), (818, 1, u'+  ASSERT_EQ(2u, lists.get("list32").as<DynamicList>().size());'), (819, 1, u'+  ASSERT_EQ(2u, lists.get("list64").as<DynamicList>().size());'), (820, 1, u'+  ASSERT_EQ(2u, lists.get("listP").as<DynamicList>().size());'), (841, 1, u'+    ASSERT_EQ(3u, l.size());'), (849, 1, u'+    ASSERT_EQ(3u, l.size());'), (857, 1, u'+    ASSERT_EQ(2u, l.size());'), (859, 1, u'+    ASSERT_EQ(2u, e.size());'), (863, 1, u'+    ASSERT_EQ(1u, e.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(176, 2, u'-    KJ_DASSERT(segmentState->forOutput.size() == segmentState->builders.size() + 1,'), (219, 2, u'-  KJ_FAIL_ASSERT(')]
===========================================
Class:class CarSalesTestCase { class CarSalesTestCase 
Class:class CatRankTestCase { class CatRankTestCase 
Class:class ExpressionTestCase { class ExpressionTestCase 
Class:class CarSalesTestCase { class CarSalesTestCase 
Class:class CatRankTestCase { class CatRankTestCase 
Class:class ExpressionTestCase { class ExpressionTestCase 
Class:class CarSalesTestCase { class CarSalesTestCase 
Class:class CatRankTestCase { class CatRankTestCase 
Class:class ExpressionTestCase { class ExpressionTestCase 
Class:class Gain { class Gain 
Class:class TextBlob { class TextBlob 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(129, 2, u'-  KJ_ASSERT(textPos == text.end(), textPos - text.end());'), (130, 2, u'-  KJ_ASSERT(branchesPos == branches.end(), branchesPos - branches.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 2, u'-  ASSERT_EQ(expected.size(), list.size());'), (66, 2, u'-  ASSERT_EQ(expected.size(), typed.size());'), (172, 2, u'-      ASSERT_EQ(4u, list.size());'), (211, 2, u'-      ASSERT_EQ(4u, list.size());'), (306, 2, u'-  ASSERT_EQ(TestUnion::Union0::U0F1S32, reader.getUnion0().which());'), (309, 2, u'-  ASSERT_EQ(TestUnion::Union1::U1F1SP, reader.getUnion1().which());'), (312, 2, u'-  ASSERT_EQ(TestUnion::Union2::U2F0S1, reader.getUnion2().which());'), (315, 2, u'-  ASSERT_EQ(TestUnion::Union3::U3F0S64, reader.getUnion3().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 2, u'-  static_assert(sizeof(T) == sizeof(U), "Size must match.");'), (85, 2, u'-    case schema::Type::Body::OBJECT_TYPE: KJ_FAIL_ASSERT("List(Object) not supported."); break;'), (258, 2, u'-    KJ_ASSERT(w->getProto().getBody().which() == schema::StructNode::Member::Body::FIELD_MEMBER,'), (459, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (478, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (496, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (514, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (534, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (553, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (571, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (589, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (726, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");'), (734, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (829, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");'), (837, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (967, 2, u'-          KJ_FAIL_ASSERT("Interfaces not yet implemented.");'), (977, 2, u'-  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (1114, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.") {'), (1173, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.");'), (1177, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.") {'), (1226, 2, u'-      KJ_FAIL_ASSERT("DynamicList of structs does not support set().") {'), (1248, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.") {'), (1253, 2, u'-      KJ_FAIL_ASSERT("Interfaces not implemented.") {'), (1308, 2, u'-      KJ_FAIL_ASSERT("List(Object) not supported.");'), (1344, 2, u'-    case INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented."); return Reader();'), (1347, 2, u'-  KJ_FAIL_ASSERT("Missing switch case.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (44, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (52, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (69, 2, u'-  ASSERT_EQ(1u, builder.getSegmentsForOutput().size());'), (159, 2, u'-      ASSERT_EQ(3u, list.size());'), (167, 2, u'-      ASSERT_EQ(3u, list.size());'), (179, 2, u'-      ASSERT_EQ(2u, list.size());'), (186, 2, u'-      ASSERT_EQ(2u, list.size());'), (195, 2, u'-      ASSERT_EQ(2u, list.size());'), (201, 2, u'-      ASSERT_EQ(2u, list.size());'), (208, 2, u'-      ASSERT_EQ(2u, list.size());'), (281, 2, u'-  KJ_ASSERT(segment.size() > 2, segment.size());'), (492, 2, u'-    ASSERT_EQ(3u, l.size());'), (506, 2, u'-    ASSERT_EQ(3u, l.size());'), (521, 2, u'-    ASSERT_EQ(3u, l.size());'), (542, 2, u'-    ASSERT_EQ(4u, l.size());'), (557, 2, u'-    ASSERT_EQ(4u, l.size());'), (575, 2, u'-    ASSERT_EQ(4u, l.size());'), (593, 2, u'-    ASSERT_EQ(4u, l.size());'), (844, 2, u'-  ASSERT_EQ(2u, builder.getSegmentsForOutput().size());'), (866, 2, u'-  ASSERT_EQ(3u, builder.getSegmentsForOutput().size());'), (875, 2, u'-  ASSERT_EQ(expectedData.size(), reader.size());'), (888, 2, u'-    ASSERT_EQ(expectedData.size(), builder.size());'), (911, 2, u'-    ASSERT_EQ(expectedData.size(), builder.size());'), (922, 2, u'-    ASSERT_EQ(expectedData.size(), builder.size());'), (1100, 2, u'-    ASSERT_EQ(4u, l.size());'), (1123, 2, u'-    ASSERT_EQ(4u, l.size());'), (1145, 2, u'-    ASSERT_EQ(4u, l.size());'), (1165, 2, u'-    ASSERT_EQ(4u, l.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(186, 2, u'-    ASSERT_EQ(3 * ELEMENTS, list.size());'), (194, 2, u'-    ASSERT_EQ(4 * ELEMENTS, list.size());'), (208, 2, u'-    ASSERT_EQ(5 * ELEMENTS, list.size());'), (211, 2, u'-      ASSERT_EQ((i + 1) * ELEMENTS, element.size());'), (240, 2, u'-    ASSERT_EQ(3 * ELEMENTS, list.size());'), (248, 2, u'-    ASSERT_EQ(4 * ELEMENTS, list.size());'), (260, 2, u'-    ASSERT_EQ(5 * ELEMENTS, list.size());'), (263, 2, u'-      ASSERT_EQ((i + 1) * ELEMENTS, element.size());'), (298, 2, u'-  ASSERT_EQ(1u, segments.size());'), (319, 2, u'-  ASSERT_EQ(15u, segments.size());'), (356, 2, u'-  ASSERT_EQ(6u, segments.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(186, 2, u'-static_assert(sizeof(WirePointer) == sizeof(word),'), (188, 2, u'-static_assert(POINTERS * WORDS_PER_POINTER * BYTES_PER_WORD / BYTES == sizeof(WirePointer),'), (190, 2, u'-static_assert(POINTERS * BYTES_PER_POINTER / BYTES == sizeof(WirePointer),'), (192, 2, u'-static_assert(POINTERS * BITS_PER_POINTER / BITS_PER_BYTE / BYTES == sizeof(WirePointer),'), (199, 2, u'-    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");'), (204, 2, u'-    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");'), (340, 2, u'-        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {'), (384, 2, u'-            KJ_ASSERT(elementTag->kind() == WirePointer::STRUCT,'), (408, 2, u'-        KJ_FAIL_ASSERT("Unexpected FAR pointer.") {'), (413, 2, u'-        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {'), (545, 2, u'-        KJ_FAIL_ASSERT("Unexpected FAR pointer.") {'), (648, 2, u'-            KJ_ASSERT(srcTag->kind() == WirePointer::STRUCT,'), (697, 2, u'-        KJ_DASSERT(landingPad != nullptr,'), (927, 2, u'-          KJ_FAIL_ASSERT("Can\'t get here.");'), (1164, 2, u'-        KJ_ASSERT(oldSize < FieldSize::EIGHT_BYTES);'), (1168, 2, u'-        KJ_ASSERT(elementSize.preferredListEncoding >= FieldSize::BIT);'), (1382, 2, u'-            KJ_FAIL_ASSERT("invalid list step size", value.step * ELEMENTS / BITS);'), (2163, 2, u'-  KJ_DASSERT(structPointerCount == 0 * POINTERS ||'), (2174, 2, u'-  KJ_DASSERT((uintptr_t)ptr % sizeof(WirePointer) == 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 2, u'-    static_assert(sizeof(internal::ReaderArena) <= sizeof(arenaSpace),'), (75, 2, u'-    static_assert(sizeof(internal::BuilderArena) <= sizeof(arenaSpace),'), (83, 2, u'-    KJ_ASSERT(segment->getSegmentId() == internal::SegmentId(0),'), (86, 2, u'-    KJ_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),'), (164, 2, u'-        KJ_ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(208, 2, u'-  ASSERT_EQ(2u, list.size());')]
===========================================
Class:class SchemaLoader::Impl { class SchemaLoader::Impl 
Class:   class SchemaLoader::Validator { class SchemaLoader::Validator 
Class:   class SchemaLoader::CompatibilityChecker { class SchemaLoader::CompatibilityChecker 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 2, u'-    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");'), (122, 2, u'-    KJ_DASSERT(pos == *count);'), (134, 2, u'-    KJ_DASSERT(pos == *count);'), (941, 2, u'-    KJ_ASSERT(value.getBody().which() == replacement.getBody().which()) {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 2, u'-  ASSERT_EQ(schema.getMembers().size(),'), (159, 2, u'-  ASSERT_EQ(schema.getEnumerants().size(),')]
===========================================
Class:class TestPipe: public kj::BufferedInputStream, public kj::OutputStream { class TestPipe: public kj::BufferedInputStream, public kj::OutputStream 
Class:class TestMessageBuilder: public MallocMessageBuilder { class TestMessageBuilder: public MallocMessageBuilder 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 2, u'-    KJ_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");'), (72, 2, u'-    KJ_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(68, 2, u'-    KJ_DASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,'), (124, 2, u'-      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (136, 2, u'-      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (179, 2, u'-  KJ_FAIL_ASSERT("Can\'t get here.");'), (250, 2, u'-      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (261, 2, u'-      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (298, 2, u'-  KJ_FAIL_ASSERT("Can\'t get here.");')]
===========================================
Class:class TestMessageBuilder: public MallocMessageBuilder { class TestMessageBuilder: public MallocMessageBuilder 
Class:class TestPipe: public kj::BufferedInputStream, public kj::OutputStream { class TestPipe: public kj::BufferedInputStream, public kj::OutputStream 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(98, 2, u'-    KJ_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");'), (106, 2, u'-    KJ_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
Class:class SnappyInputStream::InputStreamSnappySource: public snappy::Source { class SnappyInputStream::InputStreamSnappySource: public snappy::Source 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 2, u'-    KJ_FAIL_ASSERT("Snappy doesn\'t actually call this.");'), (124, 2, u'-  KJ_DASSERT(SNAPPY_COMPRESSED_BUFFER_SIZE >= snappy::MaxCompressedLength(snappy::kBlockSize),'), (162, 2, u'-    KJ_ASSERT(n <= compressedBuffer.size(),')]
===========================================
Class:class TestMessageBuilder: public MallocMessageBuilder { class TestMessageBuilder: public MallocMessageBuilder 
Class:class TestInputStream: public kj::InputStream { class TestInputStream: public kj::InputStream 
Class:class TestOutputStream: public kj::OutputStream { class TestOutputStream: public kj::OutputStream 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(106, 2, u'-    KJ_ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");'), (261, 2, u'-  ASSERT_GE(tmpfile.get(), 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(125, 2, u'-  KJ_DASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(172, 2, u'-      KJ_FAIL_ASSERT("Don\'t know how to print interfaces.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(219, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (227, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (235, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (300, 2, u'-      ASSERT_EQ(3u, listReader.size());'), (321, 2, u'-    ASSERT_EQ(4u, listReader.size());'), (329, 2, u'-    ASSERT_EQ(4u, listReader.size());'), (339, 2, u'-    ASSERT_EQ(3u, listReader.size());'), (359, 2, u'-  ASSERT_EQ(expected.size(), list.size());'), (365, 2, u'-  ASSERT_EQ(expected.size(), typed.size());'), (382, 2, u'-  ASSERT_EQ(expected.size(), list.size());'), (445, 2, u'-      ASSERT_EQ(3u, listReader.size());'), (466, 2, u'-    ASSERT_EQ(4u, listReader.size());'), (474, 2, u'-    ASSERT_EQ(4u, listReader.size());'), (484, 2, u'-    ASSERT_EQ(3u, listReader.size());'), (753, 2, u'-  ASSERT_EQ(2u, lists.getList0().size());'), (754, 2, u'-  ASSERT_EQ(4u, lists.getList1().size());'), (755, 2, u'-  ASSERT_EQ(2u, lists.getList8().size());'), (756, 2, u'-  ASSERT_EQ(2u, lists.getList16().size());'), (757, 2, u'-  ASSERT_EQ(2u, lists.getList32().size());'), (758, 2, u'-  ASSERT_EQ(2u, lists.getList64().size());'), (759, 2, u'-  ASSERT_EQ(2u, lists.getListP().size());'), (780, 2, u'-    ASSERT_EQ(3u, l.size());'), (788, 2, u'-    ASSERT_EQ(3u, l.size());'), (796, 2, u'-    ASSERT_EQ(2u, l.size());'), (798, 2, u'-    ASSERT_EQ(2u, e.size());'), (802, 2, u'-    ASSERT_EQ(1u, e.size());'), (814, 2, u'-  ASSERT_EQ(2u, lists.get("list0").as<DynamicList>().size());'), (815, 2, u'-  ASSERT_EQ(4u, lists.get("list1").as<DynamicList>().size());'), (816, 2, u'-  ASSERT_EQ(2u, lists.get("list8").as<DynamicList>().size());'), (817, 2, u'-  ASSERT_EQ(2u, lists.get("list16").as<DynamicList>().size());'), (818, 2, u'-  ASSERT_EQ(2u, lists.get("list32").as<DynamicList>().size());'), (819, 2, u'-  ASSERT_EQ(2u, lists.get("list64").as<DynamicList>().size());'), (820, 2, u'-  ASSERT_EQ(2u, lists.get("listP").as<DynamicList>().size());'), (841, 2, u'-    ASSERT_EQ(3u, l.size());'), (849, 2, u'-    ASSERT_EQ(3u, l.size());'), (857, 2, u'-    ASSERT_EQ(2u, l.size());'), (859, 2, u'-    ASSERT_EQ(2u, e.size());'), (863, 2, u'-    ASSERT_EQ(1u, e.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    KJ_DASSERT(segmentState->forOutput.size() == segmentState->builders.size() + 1,')]
===========================================
===========================================
Total add: 14
Total del: 1
Header: BuilderArena::getSegmentsForOutput
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    KJ_DASSERT(segmentState->forOutput.size() == segmentState->builders.size() + 1,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    KJ_DASSERT(segmentState->forOutput.size() == segmentState->builders.size() + 1,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    KJ_DASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
===========================================
Total add: 0
Total del: 13
Header: BuilderArena::getSegmentsForOutput
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    KJ_DASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    KJ_DASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT_EQ(2u, i.size());'), (13, 1, u'+  ASSERT_EQ(2u, ci.size());'), (18, 1, u'+  ASSERT_EQ(2u, ci2.size());')]
===========================================
===========================================
Total add: 21
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT_EQ(2u, i.size());'), (13, 1, u'+  ASSERT_EQ(2u, ci.size());'), (18, 1, u'+  ASSERT_EQ(2u, ci2.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT_EQ(2u, i.size());'), (13, 1, u'+  ASSERT_EQ(2u, ci.size());'), (18, 1, u'+  ASSERT_EQ(2u, ci2.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); int line = __LINE__;'), (10, 1, u'+    EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); int line = __LINE__;'), (10, 1, u'+    EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); int line = __LINE__;'), (10, 1, u'+    EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
Class: class RepeatChar { class RepeatChar 
Class:   class Iterator {   class Iterator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  KJ_ASSERT(offset < 4096 && offset > -4096,')]
===========================================
===========================================
Total add: 13
Total del: 3
Header: ExceptionCallback* globalCallback = nullptr;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  KJ_ASSERT(offset < 4096 && offset > -4096,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  KJ_ASSERT(offset < 4096 && offset > -4096,')]
===========================================
Class: class ExceptionCallback::RootExceptionCallback: public ExceptionCallback { class ExceptionCallback::RootExceptionCallback: public ExceptionCallback 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    line = __LINE__; KJ_FAIL_ASSERT("foo");'), (17, 1, u'+    line = __LINE__; KJ_FAIL_ASSERT("foo");')]
===========================================
===========================================
Total add: 24
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    line = __LINE__; KJ_FAIL_ASSERT("foo");'), (17, 1, u'+    line = __LINE__; KJ_FAIL_ASSERT("foo");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    line = __LINE__; KJ_FAIL_ASSERT("foo");'), (17, 1, u'+    line = __LINE__; KJ_FAIL_ASSERT("foo");')]
===========================================
Class:class ExceptionImpl: public Exception, public std::exception { class ExceptionImpl: public Exception, public std::exception 
Class:class MockException 
Class:class MockExceptionCallback: public ExceptionCallback { class MockExceptionCallback: public ExceptionCallback 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(124, 1, u'+  KJ_ASSERT(1 == 1);'), (125, 1, u'+  EXPECT_THROW(KJ_ASSERT(1 == 2), MockException); line = __LINE__;'), (130, 1, u'+  KJ_ASSERT(1 == 1) {'), (136, 1, u'+  KJ_ASSERT(1 == 2, "1 is not 2") { recovered = true; break; } line = __LINE__;'), (142, 1, u'+  EXPECT_THROW(KJ_ASSERT(1 == 2, i, "hi", str), MockException); line = __LINE__;'), (152, 1, u'+  EXPECT_THROW(KJ_FAIL_ASSERT("foo"), MockException); line = __LINE__;'), (189, 1, u'+    EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); int line = __LINE__;'), (200, 1, u'+      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (211, 1, u'+      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(51, 1, u'+  ASSERTION,'), (114, 1, u'+  if (style == ASSERTION && code == nullptr) {'), (143, 1, u'+      case ASSERTION:'), (167, 1, u'+      case ASSERTION:'), (217, 1, u'+      makeDescription(nature == Exception::Nature::OS_ERROR ? SYSCALL : ASSERTION,')]
===========================================
Class:class MockException 
Class:class MockExceptionCallback: public ExceptionCallback { class MockExceptionCallback: public ExceptionCallback 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(124, 2, u'-  KJ_ASSERT(1 == 1);'), (125, 2, u'-  EXPECT_THROW(KJ_ASSERT(1 == 2), MockException); line = __LINE__;'), (130, 2, u'-  KJ_ASSERT(1 == 1) {'), (136, 2, u'-  KJ_ASSERT(1 == 2, "1 is not 2") { recovered = true; break; } line = __LINE__;'), (142, 2, u'-  EXPECT_THROW(KJ_ASSERT(1 == 2, i, "hi", str), MockException); line = __LINE__;'), (152, 2, u'-  EXPECT_THROW(KJ_FAIL_ASSERT("foo"), MockException); line = __LINE__;'), (189, 2, u'-    EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); int line = __LINE__;'), (200, 2, u'-      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (211, 2, u'-      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(51, 2, u'-  ASSERTION,'), (114, 2, u'-  if (style == ASSERTION && code == nullptr) {'), (143, 2, u'-      case ASSERTION:'), (167, 2, u'-      case ASSERTION:'), (217, 2, u'-      makeDescription(nature == Exception::Nature::OS_ERROR ? SYSCALL : ASSERTION,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_RECOVERABLE_ASSERT('), (4, 1, u'+  KJ_FAIL_ASSERT(')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: BuilderArena::tryGetSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_RECOVERABLE_ASSERT('), (4, 1, u'+  KJ_FAIL_ASSERT(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_RECOVERABLE_ASSERT('), (4, 1, u'+  KJ_FAIL_ASSERT(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}'), (4, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: DynamicList::Reader::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}'), (4, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}'), (4, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}'), (4, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: DynamicList::Builder::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}'), (4, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}'), (4, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("DynamicList of structs does not support set().");'), (4, 1, u'+      KJ_FAIL_ASSERT("DynamicList of structs does not support set().") {')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: DynamicList::Builder::set
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("DynamicList of structs does not support set().");'), (4, 1, u'+      KJ_FAIL_ASSERT("DynamicList of structs does not support set().") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("DynamicList of structs does not support set().");'), (4, 1, u'+      KJ_FAIL_ASSERT("DynamicList of structs does not support set().") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("List(Object) not supported.");'), (4, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.") {'), (9, 2, u'-      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}'), (11, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
Total add: 9
Total del: 5
Header: DynamicList::Builder::set
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("List(Object) not supported.");'), (4, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.") {'), (9, 2, u'-      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}'), (11, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("List(Object) not supported.");'), (4, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.") {'), (9, 2, u'-      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}'), (11, 1, u'+      KJ_FAIL_ASSERT("Interfaces not implemented.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        FAIL_RECOVERABLE_ASSERT("Don\'t know how to handle RESERVED_3.") {}'), (3, 1, u'+        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        FAIL_RECOVERABLE_ASSERT("Don\'t know how to handle RESERVED_3.") {}'), (3, 1, u'+        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        FAIL_RECOVERABLE_ASSERT("Don\'t know how to handle RESERVED_3.") {}'), (3, 1, u'+        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        FAIL_RECOVERABLE_ASSERT("Unexpected FAR pointer.") {}'), (3, 1, u'+        KJ_FAIL_ASSERT("Unexpected FAR pointer.") {'), (8, 2, u'-        FAIL_RECOVERABLE_ASSERT("Don\'t know how to handle RESERVED_3.") {}'), (9, 1, u'+        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        FAIL_RECOVERABLE_ASSERT("Unexpected FAR pointer.") {}'), (3, 1, u'+        KJ_FAIL_ASSERT("Unexpected FAR pointer.") {'), (8, 2, u'-        FAIL_RECOVERABLE_ASSERT("Don\'t know how to handle RESERVED_3.") {}'), (9, 1, u'+        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        FAIL_RECOVERABLE_ASSERT("Unexpected FAR pointer.") {}'), (3, 1, u'+        KJ_FAIL_ASSERT("Unexpected FAR pointer.") {'), (8, 2, u'-        FAIL_RECOVERABLE_ASSERT("Don\'t know how to handle RESERVED_3.") {}'), (9, 1, u'+        KJ_FAIL_ASSERT("Don\'t know how to handle RESERVED_3.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        FAIL_RECOVERABLE_ASSERT("Unexpected FAR pointer.") {'), (3, 1, u'+        KJ_FAIL_ASSERT("Unexpected FAR pointer.") {')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        FAIL_RECOVERABLE_ASSERT("Unexpected FAR pointer.") {'), (3, 1, u'+        KJ_FAIL_ASSERT("Unexpected FAR pointer.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        FAIL_RECOVERABLE_ASSERT("Unexpected FAR pointer.") {'), (3, 1, u'+        KJ_FAIL_ASSERT("Unexpected FAR pointer.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    RECOVERABLE_ASSERT(value.getBody().which() == replacement.getBody().which()) {'), (3, 1, u'+    KJ_ASSERT(value.getBody().which() == replacement.getBody().which()) {')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    RECOVERABLE_ASSERT(value.getBody().which() == replacement.getBody().which()) {'), (3, 1, u'+    KJ_ASSERT(value.getBody().which() == replacement.getBody().which()) {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    RECOVERABLE_ASSERT(value.getBody().which() == replacement.getBody().which()) {'), (3, 1, u'+    KJ_ASSERT(value.getBody().which() == replacement.getBody().which()) {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("Don\'t know how to print interfaces.") {}'), (3, 1, u'+      KJ_FAIL_ASSERT("Don\'t know how to print interfaces.") {')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: print
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("Don\'t know how to print interfaces.") {}'), (3, 1, u'+      KJ_FAIL_ASSERT("Don\'t know how to print interfaces.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_RECOVERABLE_ASSERT("Don\'t know how to print interfaces.") {}'), (3, 1, u'+      KJ_FAIL_ASSERT("Don\'t know how to print interfaces.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  RECOVERABLE_ASSERT(1 == 1) {'), (3, 1, u'+  KJ_ASSERT(1 == 1) {')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  RECOVERABLE_ASSERT(1 == 1) {'), (3, 1, u'+  KJ_ASSERT(1 == 1) {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  RECOVERABLE_ASSERT(1 == 1) {'), (3, 1, u'+  KJ_ASSERT(1 == 1) {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  RECOVERABLE_ASSERT(1 == 2, "1 is not 2") { recovered = true; } line = __LINE__;'), (3, 1, u'+  KJ_ASSERT(1 == 2, "1 is not 2") { recovered = true; break; } line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  RECOVERABLE_ASSERT(1 == 2, "1 is not 2") { recovered = true; } line = __LINE__;'), (3, 1, u'+  KJ_ASSERT(1 == 2, "1 is not 2") { recovered = true; break; } line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  RECOVERABLE_ASSERT(1 == 2, "1 is not 2") { recovered = true; } line = __LINE__;'), (3, 1, u'+  KJ_ASSERT(1 == 2, "1 is not 2") { recovered = true; break; } line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(KJ_ASSERT(false, "foo"), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_THROW(KJ_FAIL_ASSERT("foo"), MockException); line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(KJ_ASSERT(false, "foo"), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_THROW(KJ_FAIL_ASSERT("foo"), MockException); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(KJ_ASSERT(false, "foo"), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_THROW(KJ_FAIL_ASSERT("foo"), MockException); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  if (style == ASSERTION && code == nullptr) {')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: makeDescription
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  if (style == ASSERTION && code == nullptr) {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  if (style == ASSERTION && code == nullptr) {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    if (style == ASSERTION && strcmp(code, "false") == 0) {')]
===========================================
===========================================
Total add: 0
Total del: 5
Header: makeDescription
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    if (style == ASSERTION && strcmp(code, "false") == 0) {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    if (style == ASSERTION && strcmp(code, "false") == 0) {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));'), (21, 2, u'-                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));')]
===========================================
===========================================
Total add: 11
Total del: 12
Header: Log::logInternal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));'), (21, 2, u'-                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));'), (21, 2, u'-                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+      makeDescription(nature == Exception::Nature::OS_ERROR ? SYSCALL : ASSERTION,')]
===========================================
===========================================
Total add: 6
Total del: 15
Header: Log::fatalFaultInternal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+      makeDescription(nature == Exception::Nature::OS_ERROR ? SYSCALL : ASSERTION,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+      makeDescription(nature == Exception::Nature::OS_ERROR ? SYSCALL : ASSERTION,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,'), (3, 1, u'+    KJ_DASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: BuilderArena::getSegmentsForOutput
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,'), (3, 1, u'+    KJ_DASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,'), (3, 1, u'+    KJ_DASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(textPos == text.end(), textPos - text.end());'), (3, 2, u'-  ASSERT(branchesPos == branches.end(), branchesPos - branches.end());'), (4, 1, u'+  KJ_ASSERT(textPos == text.end(), textPos - text.end());'), (5, 1, u'+  KJ_ASSERT(branchesPos == branches.end(), branchesPos - branches.end());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TextBlob::allocate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(textPos == text.end(), textPos - text.end());'), (3, 2, u'-  ASSERT(branchesPos == branches.end(), branchesPos - branches.end());'), (4, 1, u'+  KJ_ASSERT(textPos == text.end(), textPos - text.end());'), (5, 1, u'+  KJ_ASSERT(branchesPos == branches.end(), branchesPos - branches.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(textPos == text.end(), textPos - text.end());'), (3, 2, u'-  ASSERT(branchesPos == branches.end(), branchesPos - branches.end());'), (4, 1, u'+  KJ_ASSERT(textPos == text.end(), textPos - text.end());'), (5, 1, u'+  KJ_ASSERT(branchesPos == branches.end(), branchesPos - branches.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case schema::Type::Body::OBJECT_TYPE: FAIL_ASSERT("List(Object) not supported."); break;'), (3, 1, u'+    case schema::Type::Body::OBJECT_TYPE: KJ_FAIL_ASSERT("List(Object) not supported."); break;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: elementSizeFor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case schema::Type::Body::OBJECT_TYPE: FAIL_ASSERT("List(Object) not supported."); break;'), (3, 1, u'+    case schema::Type::Body::OBJECT_TYPE: KJ_FAIL_ASSERT("List(Object) not supported."); break;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case schema::Type::Body::OBJECT_TYPE: FAIL_ASSERT("List(Object) not supported."); break;'), (3, 1, u'+    case schema::Type::Body::OBJECT_TYPE: KJ_FAIL_ASSERT("List(Object) not supported."); break;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(w->getProto().getBody().which() == schema::StructNode::Member::Body::FIELD_MEMBER,'), (3, 1, u'+    KJ_ASSERT(w->getProto().getBody().which() == schema::StructNode::Member::Body::FIELD_MEMBER,')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: DynamicUnion::Builder::checkIsObject
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(w->getProto().getBody().which() == schema::StructNode::Member::Body::FIELD_MEMBER,'), (3, 1, u'+    KJ_ASSERT(w->getProto().getBody().which() == schema::StructNode::Member::Body::FIELD_MEMBER,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(w->getProto().getBody().which() == schema::StructNode::Member::Body::FIELD_MEMBER,'), (3, 1, u'+    KJ_ASSERT(w->getProto().getBody().which() == schema::StructNode::Member::Body::FIELD_MEMBER,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::getObject
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::getObject
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::getObjectAsText
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::getObjectAsData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::initObject
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::initObject
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::initObjectAsText
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::initObjectAsData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          FAIL_ASSERT("Interfaces not yet implemented.");'), (3, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Reader::getImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          FAIL_ASSERT("Interfaces not yet implemented.");'), (3, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          FAIL_ASSERT("Interfaces not yet implemented.");'), (3, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Reader::getImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          FAIL_ASSERT("Interfaces not yet implemented.");'), (3, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::getImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          FAIL_ASSERT("Interfaces not yet implemented.");'), (3, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          FAIL_ASSERT("Interfaces not yet implemented.");'), (3, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::getImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          FAIL_ASSERT("Interfaces not yet implemented.");'), (3, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::setImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          FAIL_ASSERT("Interfaces not yet implemented.");'), (3, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          FAIL_ASSERT("Interfaces not yet implemented.");'), (3, 1, u'+          KJ_FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::setImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());'), (3, 1, u'+  KJ_FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_ASSERT("List(Object) not supported.");'), (3, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicList::Builder::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_ASSERT("List(Object) not supported.");'), (3, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_ASSERT("List(Object) not supported.");'), (3, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_ASSERT("List(Object) not supported.");'), (3, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicList::Builder::init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_ASSERT("List(Object) not supported.");'), (3, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      FAIL_ASSERT("List(Object) not supported.");'), (3, 1, u'+      KJ_FAIL_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case INTERFACE: FAIL_ASSERT("Interfaces not implemented."); return Reader();'), (3, 1, u'+    case INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented."); return Reader();'), (6, 2, u'-  FAIL_ASSERT("Missing switch case.");'), (7, 1, u'+  KJ_FAIL_ASSERT("Missing switch case.");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: DynamicValue::Builder::asReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case INTERFACE: FAIL_ASSERT("Interfaces not implemented."); return Reader();'), (3, 1, u'+    case INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented."); return Reader();'), (6, 2, u'-  FAIL_ASSERT("Missing switch case.");'), (7, 1, u'+  KJ_FAIL_ASSERT("Missing switch case.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    case INTERFACE: FAIL_ASSERT("Interfaces not implemented."); return Reader();'), (3, 1, u'+    case INTERFACE: KJ_FAIL_ASSERT("Interfaces not implemented."); return Reader();'), (6, 2, u'-  FAIL_ASSERT("Missing switch case.");'), (7, 1, u'+  KJ_FAIL_ASSERT("Missing switch case.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(segment.size() > 2, segment.size());'), (3, 1, u'+  KJ_ASSERT(segment.size() > 2, segment.size());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: initUnion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(segment.size() > 2, segment.size());'), (3, 1, u'+  KJ_ASSERT(segment.size() > 2, segment.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(segment.size() > 2, segment.size());'), (3, 1, u'+  KJ_ASSERT(segment.size() > 2, segment.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            ASSERT(elementTag->kind() == WirePointer::STRUCT,'), (3, 1, u'+            KJ_ASSERT(elementTag->kind() == WirePointer::STRUCT,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            ASSERT(elementTag->kind() == WirePointer::STRUCT,'), (3, 1, u'+            KJ_ASSERT(elementTag->kind() == WirePointer::STRUCT,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            ASSERT(elementTag->kind() == WirePointer::STRUCT,'), (3, 1, u'+            KJ_ASSERT(elementTag->kind() == WirePointer::STRUCT,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            ASSERT(srcTag->kind() == WirePointer::STRUCT,'), (3, 1, u'+            KJ_ASSERT(srcTag->kind() == WirePointer::STRUCT,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            ASSERT(srcTag->kind() == WirePointer::STRUCT,'), (3, 1, u'+            KJ_ASSERT(srcTag->kind() == WirePointer::STRUCT,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            ASSERT(srcTag->kind() == WirePointer::STRUCT,'), (3, 1, u'+            KJ_ASSERT(srcTag->kind() == WirePointer::STRUCT,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        DASSERT(landingPad != nullptr,'), (3, 1, u'+        KJ_DASSERT(landingPad != nullptr,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        DASSERT(landingPad != nullptr,'), (3, 1, u'+        KJ_DASSERT(landingPad != nullptr,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        DASSERT(landingPad != nullptr,'), (3, 1, u'+        KJ_DASSERT(landingPad != nullptr,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          FAIL_ASSERT("Can\'t get here.");'), (3, 1, u'+          KJ_FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          FAIL_ASSERT("Can\'t get here.");'), (3, 1, u'+          KJ_FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          FAIL_ASSERT("Can\'t get here.");'), (3, 1, u'+          KJ_FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT(oldSize < FieldSize::EIGHT_BYTES);'), (3, 1, u'+        KJ_ASSERT(oldSize < FieldSize::EIGHT_BYTES);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT(oldSize < FieldSize::EIGHT_BYTES);'), (3, 1, u'+        KJ_ASSERT(oldSize < FieldSize::EIGHT_BYTES);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT(oldSize < FieldSize::EIGHT_BYTES);'), (3, 1, u'+        KJ_ASSERT(oldSize < FieldSize::EIGHT_BYTES);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT(elementSize.preferredListEncoding >= FieldSize::BIT);'), (3, 1, u'+        KJ_ASSERT(elementSize.preferredListEncoding >= FieldSize::BIT);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT(elementSize.preferredListEncoding >= FieldSize::BIT);'), (3, 1, u'+        KJ_ASSERT(elementSize.preferredListEncoding >= FieldSize::BIT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT(elementSize.preferredListEncoding >= FieldSize::BIT);'), (3, 1, u'+        KJ_ASSERT(elementSize.preferredListEncoding >= FieldSize::BIT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            FAIL_ASSERT("invalid list step size", value.step * ELEMENTS / BITS);'), (3, 1, u'+            KJ_FAIL_ASSERT("invalid list step size", value.step * ELEMENTS / BITS);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            FAIL_ASSERT("invalid list step size", value.step * ELEMENTS / BITS);'), (3, 1, u'+            KJ_FAIL_ASSERT("invalid list step size", value.step * ELEMENTS / BITS);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            FAIL_ASSERT("invalid list step size", value.step * ELEMENTS / BITS);'), (3, 1, u'+            KJ_FAIL_ASSERT("invalid list step size", value.step * ELEMENTS / BITS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(structPointerCount == 0 * POINTERS ||'), (3, 1, u'+  KJ_DASSERT(structPointerCount == 0 * POINTERS ||')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ListReader::getStructElement
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(structPointerCount == 0 * POINTERS ||'), (3, 1, u'+  KJ_DASSERT(structPointerCount == 0 * POINTERS ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(structPointerCount == 0 * POINTERS ||'), (3, 1, u'+  KJ_DASSERT(structPointerCount == 0 * POINTERS ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT((uintptr_t)ptr % sizeof(WirePointer) == 0,'), (3, 1, u'+  KJ_DASSERT((uintptr_t)ptr % sizeof(WirePointer) == 0,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ListReader::getStructElement
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT((uintptr_t)ptr % sizeof(WirePointer) == 0,'), (3, 1, u'+  KJ_DASSERT((uintptr_t)ptr % sizeof(WirePointer) == 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT((uintptr_t)ptr % sizeof(WirePointer) == 0,'), (3, 1, u'+  KJ_DASSERT((uintptr_t)ptr % sizeof(WirePointer) == 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(segment->getSegmentId() == internal::SegmentId(0),'), (3, 1, u'+    KJ_ASSERT(segment->getSegmentId() == internal::SegmentId(0),'), (6, 2, u'-    ASSERT(location == segment->getPtrUnchecked(0 * WORDS),'), (7, 1, u'+    KJ_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: MessageBuilder::getRootSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(segment->getSegmentId() == internal::SegmentId(0),'), (3, 1, u'+    KJ_ASSERT(segment->getSegmentId() == internal::SegmentId(0),'), (6, 2, u'-    ASSERT(location == segment->getPtrUnchecked(0 * WORDS),'), (7, 1, u'+    KJ_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(segment->getSegmentId() == internal::SegmentId(0),'), (3, 1, u'+    KJ_ASSERT(segment->getSegmentId() == internal::SegmentId(0),'), (6, 2, u'-    ASSERT(location == segment->getPtrUnchecked(0 * WORDS),'), (7, 1, u'+    KJ_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT(segments[0].begin() == firstSegment,'), (3, 1, u'+        KJ_ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MallocMessageBuilder::~MallocMessageBuilder
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT(segments[0].begin() == firstSegment,'), (3, 1, u'+        KJ_ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT(segments[0].begin() == firstSegment,'), (3, 1, u'+        KJ_ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(pos == *count);'), (3, 1, u'+    KJ_DASSERT(pos == *count);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(pos == *count);'), (3, 1, u'+    KJ_DASSERT(pos == *count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(pos == *count);'), (3, 1, u'+    KJ_DASSERT(pos == *count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(pos == *count);'), (3, 1, u'+    KJ_DASSERT(pos == *count);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(pos == *count);'), (3, 1, u'+    KJ_DASSERT(pos == *count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(pos == *count);'), (3, 1, u'+    KJ_DASSERT(pos == *count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,'), (3, 1, u'+    KJ_DASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,'), (3, 1, u'+    KJ_DASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,'), (3, 1, u'+    KJ_DASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (3, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (3, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (3, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (3, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (3, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (3, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("Can\'t get here.");'), (4, 1, u'+  KJ_FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("Can\'t get here.");'), (4, 1, u'+  KJ_FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("Can\'t get here.");'), (4, 1, u'+  KJ_FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (3, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedInputStream::skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (3, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (3, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (3, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedInputStream::skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (3, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");'), (3, 1, u'+      KJ_DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("Can\'t get here.");'), (3, 1, u'+  KJ_FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedInputStream::skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("Can\'t get here.");'), (3, 1, u'+  KJ_FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  FAIL_ASSERT("Can\'t get here.");'), (3, 1, u'+  KJ_FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    FAIL_ASSERT("Snappy doesn\'t actually call this.");'), (3, 1, u'+    KJ_FAIL_ASSERT("Snappy doesn\'t actually call this.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    FAIL_ASSERT("Snappy doesn\'t actually call this.");'), (3, 1, u'+    KJ_FAIL_ASSERT("Snappy doesn\'t actually call this.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    FAIL_ASSERT("Snappy doesn\'t actually call this.");'), (3, 1, u'+    KJ_FAIL_ASSERT("Snappy doesn\'t actually call this.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(SNAPPY_COMPRESSED_BUFFER_SIZE >= snappy::MaxCompressedLength(snappy::kBlockSize),'), (3, 1, u'+  KJ_DASSERT(SNAPPY_COMPRESSED_BUFFER_SIZE >= snappy::MaxCompressedLength(snappy::kBlockSize),')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: SnappyOutputStream::SnappyOutputStream
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(SNAPPY_COMPRESSED_BUFFER_SIZE >= snappy::MaxCompressedLength(snappy::kBlockSize),'), (3, 1, u'+  KJ_DASSERT(SNAPPY_COMPRESSED_BUFFER_SIZE >= snappy::MaxCompressedLength(snappy::kBlockSize),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(SNAPPY_COMPRESSED_BUFFER_SIZE >= snappy::MaxCompressedLength(snappy::kBlockSize),'), (3, 1, u'+  KJ_DASSERT(SNAPPY_COMPRESSED_BUFFER_SIZE >= snappy::MaxCompressedLength(snappy::kBlockSize),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(n <= compressedBuffer.size(),'), (3, 1, u'+    KJ_ASSERT(n <= compressedBuffer.size(),')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: SnappyOutputStream::flush
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(n <= compressedBuffer.size(),'), (3, 1, u'+    KJ_ASSERT(n <= compressedBuffer.size(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(n <= compressedBuffer.size(),'), (3, 1, u'+    KJ_ASSERT(n <= compressedBuffer.size(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");'), (3, 1, u'+    KJ_ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");'), (3, 1, u'+  KJ_DASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: messageToFlatArray
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");'), (3, 1, u'+  KJ_DASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");'), (3, 1, u'+  KJ_DASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1, 2, u'-    ASSERT(index != throwAt);'), (2, 1, u'+    KJ_ASSERT(index != throwAt);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: struct TestObject {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1, 2, u'-    ASSERT(index != throwAt);'), (2, 1, u'+    KJ_ASSERT(index != throwAt);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1, 2, u'-    ASSERT(index != throwAt);'), (2, 1, u'+    KJ_ASSERT(index != throwAt);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(other.index != throwAt);'), (3, 1, u'+    KJ_ASSERT(other.index != throwAt);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct TestObject {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(other.index != throwAt);'), (3, 1, u'+    KJ_ASSERT(other.index != throwAt);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(other.index != throwAt);'), (3, 1, u'+    KJ_ASSERT(other.index != throwAt);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT(count != throwAt);'), (3, 1, u'+      KJ_ASSERT(count != throwAt);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct TestObject {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT(count != throwAt);'), (3, 1, u'+      KJ_ASSERT(count != throwAt);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT(count != throwAt);'), (3, 1, u'+      KJ_ASSERT(count != throwAt);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(n > 0, "write() returned zero.");'), (5, 1, u'+    KJ_ASSERT(n > 0, "write() returned zero.");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: FdOutputStream::write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(n > 0, "write() returned zero.");'), (5, 1, u'+    KJ_ASSERT(n > 0, "write() returned zero.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(n > 0, "write() returned zero.");'), (5, 1, u'+    KJ_ASSERT(n > 0, "write() returned zero.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(n > 0, "writev() returned zero.");'), (5, 1, u'+    KJ_ASSERT(n > 0, "writev() returned zero.");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: FdOutputStream::write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(n > 0, "writev() returned zero.");'), (5, 1, u'+    KJ_ASSERT(n > 0, "writev() returned zero.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(n > 0, "writev() returned zero.");'), (5, 1, u'+    KJ_ASSERT(n > 0, "writev() returned zero.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(1 == 1);'), (3, 2, u'-  EXPECT_THROW(ASSERT(1 == 2), MockException); line = __LINE__;'), (4, 1, u'+  KJ_ASSERT(1 == 1);'), (5, 1, u'+  EXPECT_THROW(KJ_ASSERT(1 == 2), MockException); line = __LINE__;')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(1 == 1);'), (3, 2, u'-  EXPECT_THROW(ASSERT(1 == 2), MockException); line = __LINE__;'), (4, 1, u'+  KJ_ASSERT(1 == 1);'), (5, 1, u'+  EXPECT_THROW(KJ_ASSERT(1 == 2), MockException); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(1 == 1);'), (3, 2, u'-  EXPECT_THROW(ASSERT(1 == 2), MockException); line = __LINE__;'), (4, 1, u'+  KJ_ASSERT(1 == 1);'), (5, 1, u'+  EXPECT_THROW(KJ_ASSERT(1 == 2), MockException); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(ASSERT(1 == 2, i, "hi", str), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_THROW(KJ_ASSERT(1 == 2, i, "hi", str), MockException); line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(ASSERT(1 == 2, i, "hi", str), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_THROW(KJ_ASSERT(1 == 2, i, "hi", str), MockException); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(ASSERT(1 == 2, i, "hi", str), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_THROW(KJ_ASSERT(1 == 2, i, "hi", str), MockException); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(ASSERT(false, "foo"), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_THROW(KJ_ASSERT(false, "foo"), MockException); line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(ASSERT(false, "foo"), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_THROW(KJ_ASSERT(false, "foo"), MockException); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  EXPECT_THROW(ASSERT(false, "foo"), MockException); line = __LINE__;'), (3, 1, u'+  EXPECT_THROW(KJ_ASSERT(false, "foo"), MockException); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    EXPECT_THROW(FAIL_ASSERT("bar"), MockException); int line = __LINE__;'), (5, 1, u'+    EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); int line = __LINE__;')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    EXPECT_THROW(FAIL_ASSERT("bar"), MockException); int line = __LINE__;'), (5, 1, u'+    EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); int line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    EXPECT_THROW(FAIL_ASSERT("bar"), MockException); int line = __LINE__;'), (5, 1, u'+    EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); int line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      EXPECT_THROW(FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (5, 1, u'+      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      EXPECT_THROW(FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (5, 1, u'+      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      EXPECT_THROW(FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (5, 1, u'+      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      EXPECT_THROW(FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (5, 1, u'+      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      EXPECT_THROW(FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (5, 1, u'+      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      EXPECT_THROW(FAIL_ASSERT("bar"), MockException); line = __LINE__;'), (5, 1, u'+      EXPECT_THROW(KJ_FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);'), (3, 1, u'+  KJ_DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DoubleToBuffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);'), (3, 1, u'+  KJ_DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);'), (3, 1, u'+  KJ_DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);'), (3, 1, u'+    KJ_DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DoubleToBuffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);'), (3, 1, u'+    KJ_DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);'), (3, 1, u'+    KJ_DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);'), (3, 1, u'+  KJ_DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: FloatToBuffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);'), (3, 1, u'+  KJ_DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);'), (3, 1, u'+  KJ_DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);'), (3, 1, u'+    KJ_DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: FloatToBuffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);'), (3, 1, u'+    KJ_DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);'), (3, 1, u'+    KJ_DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: BuilderArena::getSegmentsForOutput
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_RECOVERABLE_ASSERT(')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: BuilderArena::tryGetSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_RECOVERABLE_ASSERT(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_RECOVERABLE_ASSERT(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(textPos == text.end(), textPos - text.end());'), (5, 1, u'+  ASSERT(branchesPos == branches.end(), branchesPos - branches.end());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TextBlob::allocate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(textPos == text.end(), textPos - text.end());'), (5, 1, u'+  ASSERT(branchesPos == branches.end(), branchesPos - branches.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(textPos == text.end(), textPos - text.end());'), (5, 1, u'+  ASSERT(branchesPos == branches.end(), branchesPos - branches.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    case schema::Type::Body::OBJECT_TYPE: FAIL_ASSERT("List(Object) not supported."); break;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: elementSizeFor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    case schema::Type::Body::OBJECT_TYPE: FAIL_ASSERT("List(Object) not supported."); break;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    case schema::Type::Body::OBJECT_TYPE: FAIL_ASSERT("List(Object) not supported."); break;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(w->getProto().getBody().which() == schema::StructNode::Member::Body::FIELD_MEMBER,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicUnion::Builder::checkIsObject
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(w->getProto().getBody().which() == schema::StructNode::Member::Body::FIELD_MEMBER,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(w->getProto().getBody().which() == schema::StructNode::Member::Body::FIELD_MEMBER,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::getObject
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::getObject
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::getObjectAsText
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::getObjectAsData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::initObject
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::initObject
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::initObjectAsText
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::initObjectAsData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+          FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Reader::getImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+          FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+          FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Reader::getImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+          FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::getImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+          FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+          FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::getImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+          FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::setImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+          FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+          FAIL_ASSERT("Interfaces not yet implemented.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicStruct::Builder::setImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("switch() missing case.", (uint)member.getProto().getBody().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicList::Reader::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicList::Builder::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicList::Builder::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("DynamicList of structs does not support set().");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicList::Builder::set
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("DynamicList of structs does not support set().");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("DynamicList of structs does not support set().");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicList::Builder::set
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicList::Builder::set
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("Interfaces not implemented.") {}')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DynamicList::Builder::init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_ASSERT("List(Object) not supported.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    case INTERFACE: FAIL_ASSERT("Interfaces not implemented."); return Reader();'), (7, 1, u'+  FAIL_ASSERT("Missing switch case.");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: DynamicValue::Builder::asReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    case INTERFACE: FAIL_ASSERT("Interfaces not implemented."); return Reader();'), (7, 1, u'+  FAIL_ASSERT("Missing switch case.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    case INTERFACE: FAIL_ASSERT("Interfaces not implemented."); return Reader();'), (7, 1, u'+  FAIL_ASSERT("Missing switch case.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(segment.size() > 2, segment.size());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: initUnion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(segment.size() > 2, segment.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(segment.size() > 2, segment.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        FAIL_RECOVERABLE_ASSERT("Don\'t know how to handle RESERVED_3.") {}')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        FAIL_RECOVERABLE_ASSERT("Don\'t know how to handle RESERVED_3.") {}')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        FAIL_RECOVERABLE_ASSERT("Don\'t know how to handle RESERVED_3.") {}')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            ASSERT(elementTag->kind() == WirePointer::STRUCT,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            ASSERT(elementTag->kind() == WirePointer::STRUCT,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            ASSERT(elementTag->kind() == WirePointer::STRUCT,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        FAIL_RECOVERABLE_ASSERT("Unexpected FAR pointer.") {}'), (7, 1, u'+        FAIL_RECOVERABLE_ASSERT("Don\'t know how to handle RESERVED_3.") {}')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        FAIL_RECOVERABLE_ASSERT("Unexpected FAR pointer.") {}'), (7, 1, u'+        FAIL_RECOVERABLE_ASSERT("Don\'t know how to handle RESERVED_3.") {}')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        FAIL_RECOVERABLE_ASSERT("Unexpected FAR pointer.") {}'), (7, 1, u'+        FAIL_RECOVERABLE_ASSERT("Don\'t know how to handle RESERVED_3.") {}')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        FAIL_RECOVERABLE_ASSERT("Unexpected FAR pointer.") {')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        FAIL_RECOVERABLE_ASSERT("Unexpected FAR pointer.") {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        FAIL_RECOVERABLE_ASSERT("Unexpected FAR pointer.") {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            ASSERT(srcTag->kind() == WirePointer::STRUCT,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            ASSERT(srcTag->kind() == WirePointer::STRUCT,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            ASSERT(srcTag->kind() == WirePointer::STRUCT,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        DASSERT(landingPad != nullptr,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        DASSERT(landingPad != nullptr,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        DASSERT(landingPad != nullptr,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+          FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+          FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+          FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        ASSERT(oldSize < FieldSize::EIGHT_BYTES);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        ASSERT(oldSize < FieldSize::EIGHT_BYTES);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        ASSERT(oldSize < FieldSize::EIGHT_BYTES);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        ASSERT(elementSize.preferredListEncoding >= FieldSize::BIT);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        ASSERT(elementSize.preferredListEncoding >= FieldSize::BIT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        ASSERT(elementSize.preferredListEncoding >= FieldSize::BIT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            FAIL_ASSERT("invalid list step size", value.step * ELEMENTS / BITS);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            FAIL_ASSERT("invalid list step size", value.step * ELEMENTS / BITS);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            FAIL_ASSERT("invalid list step size", value.step * ELEMENTS / BITS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(structPointerCount == 0 * POINTERS ||')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ListReader::getStructElement
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(structPointerCount == 0 * POINTERS ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(structPointerCount == 0 * POINTERS ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT((uintptr_t)ptr % sizeof(WirePointer) == 0,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ListReader::getStructElement
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT((uintptr_t)ptr % sizeof(WirePointer) == 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT((uintptr_t)ptr % sizeof(WirePointer) == 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(segment->getSegmentId() == internal::SegmentId(0),'), (7, 1, u'+    ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: MessageBuilder::getRootSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(segment->getSegmentId() == internal::SegmentId(0),'), (7, 1, u'+    ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(segment->getSegmentId() == internal::SegmentId(0),'), (7, 1, u'+    ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MallocMessageBuilder::~MallocMessageBuilder
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(pos == *count);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(pos == *count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(pos == *count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(pos == *count);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(pos == *count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(pos == *count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    RECOVERABLE_ASSERT(value.getBody().which() == replacement.getBody().which()) {')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: private:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    RECOVERABLE_ASSERT(value.getBody().which() == replacement.getBody().which()) {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    RECOVERABLE_ASSERT(value.getBody().which() == replacement.getBody().which()) {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedInputStream::skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedInputStream::skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      DASSERT(BUFFER_REMAINING > 0, "Should always have non-empty buffer here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedInputStream::skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  FAIL_ASSERT("Can\'t get here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    FAIL_ASSERT("Snappy doesn\'t actually call this.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    FAIL_ASSERT("Snappy doesn\'t actually call this.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    FAIL_ASSERT("Snappy doesn\'t actually call this.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(SNAPPY_COMPRESSED_BUFFER_SIZE >= snappy::MaxCompressedLength(snappy::kBlockSize),')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: SnappyOutputStream::SnappyOutputStream
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(SNAPPY_COMPRESSED_BUFFER_SIZE >= snappy::MaxCompressedLength(snappy::kBlockSize),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(SNAPPY_COMPRESSED_BUFFER_SIZE >= snappy::MaxCompressedLength(snappy::kBlockSize),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(n <= compressedBuffer.size(),')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: SnappyOutputStream::flush
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(n <= compressedBuffer.size(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(n <= compressedBuffer.size(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: messageToFlatArray
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("Don\'t know how to print interfaces.") {}')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: print
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("Don\'t know how to print interfaces.") {}')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      FAIL_RECOVERABLE_ASSERT("Don\'t know how to print interfaces.") {}')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    ASSERT(index != throwAt);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: struct TestObject {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    ASSERT(index != throwAt);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    ASSERT(index != throwAt);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(other.index != throwAt);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct TestObject {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(other.index != throwAt);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(other.index != throwAt);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      ASSERT(count != throwAt);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct TestObject {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      ASSERT(count != throwAt);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      ASSERT(count != throwAt);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(n > 0, "write() returned zero.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: FdOutputStream::write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(n > 0, "write() returned zero.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(n > 0, "write() returned zero.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(n > 0, "writev() returned zero.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: FdOutputStream::write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(n > 0, "writev() returned zero.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(n > 0, "writev() returned zero.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(1 == 1);'), (5, 1, u'+  EXPECT_THROW(ASSERT(1 == 2), MockException); line = __LINE__;')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(1 == 1);'), (5, 1, u'+  EXPECT_THROW(ASSERT(1 == 2), MockException); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(1 == 1);'), (5, 1, u'+  EXPECT_THROW(ASSERT(1 == 2), MockException); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  RECOVERABLE_ASSERT(1 == 1) {')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  RECOVERABLE_ASSERT(1 == 1) {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  RECOVERABLE_ASSERT(1 == 1) {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  RECOVERABLE_ASSERT(1 == 2, "1 is not 2") { recovered = true; } line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  RECOVERABLE_ASSERT(1 == 2, "1 is not 2") { recovered = true; } line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  RECOVERABLE_ASSERT(1 == 2, "1 is not 2") { recovered = true; } line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  EXPECT_THROW(ASSERT(1 == 2, i, "hi", str), MockException); line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  EXPECT_THROW(ASSERT(1 == 2, i, "hi", str), MockException); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  EXPECT_THROW(ASSERT(1 == 2, i, "hi", str), MockException); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  EXPECT_THROW(ASSERT(false, "foo"), MockException); line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  EXPECT_THROW(ASSERT(false, "foo"), MockException); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  EXPECT_THROW(ASSERT(false, "foo"), MockException); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    EXPECT_THROW(FAIL_ASSERT("bar"), MockException); int line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    EXPECT_THROW(FAIL_ASSERT("bar"), MockException); int line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    EXPECT_THROW(FAIL_ASSERT("bar"), MockException); int line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      EXPECT_THROW(FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      EXPECT_THROW(FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      EXPECT_THROW(FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      EXPECT_THROW(FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      EXPECT_THROW(FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      EXPECT_THROW(FAIL_ASSERT("bar"), MockException); line = __LINE__;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DoubleToBuffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DoubleToBuffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(snprintf_result > 0 && snprintf_result < kDoubleToBufferSize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: FloatToBuffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: FloatToBuffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    DASSERT(snprintf_result > 0 && snprintf_result < kFloatToBufferSize);')]
===========================================
Class:class Bytes;
Class:class KiB;
Class:class Bytes;
Class:class KiB;
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(173, 1, u'+  static_assert(DBL_DIG < 20, "DBL_DIG is too big.");'), (229, 1, u'+  static_assert(FLT_DIG < 10, "FLT_DIG is too big");')]
===========================================
===========================================
Total add: 276
Total del: 0
Header: heapString
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(173, 1, u'+  static_assert(DBL_DIG < 20, "DBL_DIG is too big.");'), (229, 1, u'+  static_assert(FLT_DIG < 10, "FLT_DIG is too big");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(173, 1, u'+  static_assert(DBL_DIG < 20, "DBL_DIG is too big.");'), (229, 1, u'+  static_assert(FLT_DIG < 10, "FLT_DIG is too big");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(199, 2, u'-  static_assert(DBL_DIG < 20, "DBL_DIG is too big.");'), (255, 2, u'-  static_assert(FLT_DIG < 10, "FLT_DIG is too big");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_TRUE(u.which() != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(lookup != nullptr);')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(lookup != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(lookup != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(maybeUnion1 != nullptr);')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(maybeUnion1 != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(maybeUnion1 != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(maybeU1f0s8 != nullptr);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(maybeU1f0s8 != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(maybeU1f0s8 != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(lookup != nullptr);')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(lookup != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(lookup != nullptr);')]
===========================================
Class:class Foo { class Foo 
Class:class TestPipe: public BufferedInputStream, public OutputStream { class TestPipe: public BufferedInputStream, public OutputStream 
Class:class TestPipe: public kj::BufferedInputStream, public kj::OutputStream { class TestPipe: public kj::BufferedInputStream, public kj::OutputStream 
Class:class TestPipe: public BufferedInputStream, public OutputStream { class TestPipe: public BufferedInputStream, public OutputStream 
Class:class TestPipe: public kj::BufferedInputStream, public kj::OutputStream { class TestPipe: public kj::BufferedInputStream, public kj::OutputStream 
Class:class TestInputStream: public InputStream { class TestInputStream: public InputStream 
Class:class TestInputStream: public kj::InputStream { class TestInputStream: public kj::InputStream 
Class:class TestOutputStream: public OutputStream { class TestOutputStream: public OutputStream 
Class:class TestOutputStream: public kj::OutputStream { class TestOutputStream: public kj::OutputStream 
Class:class MockException 
Class:class MockExceptionCallback: public ExceptionCallback { class MockExceptionCallback: public ExceptionCallback 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(51, 2, u'-  ASSERTION,'), (121, 2, u'-    if (style == ASSERTION && strcmp(code, "false") == 0) {'), (142, 2, u'-      case ASSERTION:'), (165, 2, u'-      case ASSERTION:'), (204, 2, u'-                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));'), (212, 2, u'-                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));')]
===========================================
Class:class Bytes;
Class:class KiB;
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(200, 2, u'-  static_assert(DBL_DIG < 20, "DBL_DIG is too big.");'), (256, 2, u'-  static_assert(FLT_DIG < 10, "FLT_DIG is too big");')]
===========================================
Class:class MockException 
Class:class MockExceptionCallback: public ExceptionCallback { class MockExceptionCallback: public ExceptionCallback 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(51, 1, u'+  ASSERTION,'), (121, 1, u'+    if (style == ASSERTION && strcmp(code, "false") == 0) {'), (142, 1, u'+      case ASSERTION:'), (165, 1, u'+      case ASSERTION:'), (204, 1, u'+                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));'), (212, 1, u'+                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));')]
===========================================
Class:class Bytes;
Class:class KiB;
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(200, 1, u'+  static_assert(DBL_DIG < 20, "DBL_DIG is too big.");'), (256, 1, u'+  static_assert(FLT_DIG < 10, "FLT_DIG is too big");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(181, 2, u'-      ASSERT_EQ(3u, listReader.size());'), (202, 2, u'-    ASSERT_EQ(4u, listReader.size());'), (210, 2, u'-    ASSERT_EQ(4u, listReader.size());'), (220, 2, u'-    ASSERT_EQ(3u, listReader.size());'), (362, 2, u'-  ASSERT_EQ(2u, lists.get("list0").as<DynamicList>().size());'), (363, 2, u'-  ASSERT_EQ(4u, lists.get("list1").as<DynamicList>().size());'), (364, 2, u'-  ASSERT_EQ(2u, lists.get("list8").as<DynamicList>().size());'), (365, 2, u'-  ASSERT_EQ(2u, lists.get("list16").as<DynamicList>().size());'), (366, 2, u'-  ASSERT_EQ(2u, lists.get("list32").as<DynamicList>().size());'), (367, 2, u'-  ASSERT_EQ(2u, lists.get("list64").as<DynamicList>().size());'), (368, 2, u'-  ASSERT_EQ(2u, lists.get("listP").as<DynamicList>().size());'), (389, 2, u'-    ASSERT_EQ(3u, l.size());'), (397, 2, u'-    ASSERT_EQ(3u, l.size());'), (405, 2, u'-    ASSERT_EQ(2u, l.size());'), (407, 2, u'-    ASSERT_EQ(2u, e.size());'), (411, 2, u'-    ASSERT_EQ(1u, e.size());')]
===========================================
===========================================
Total add: 4
Total del: 400
Header: namespace {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(181, 2, u'-      ASSERT_EQ(3u, listReader.size());'), (202, 2, u'-    ASSERT_EQ(4u, listReader.size());'), (210, 2, u'-    ASSERT_EQ(4u, listReader.size());'), (220, 2, u'-    ASSERT_EQ(3u, listReader.size());'), (362, 2, u'-  ASSERT_EQ(2u, lists.get("list0").as<DynamicList>().size());'), (363, 2, u'-  ASSERT_EQ(4u, lists.get("list1").as<DynamicList>().size());'), (364, 2, u'-  ASSERT_EQ(2u, lists.get("list8").as<DynamicList>().size());'), (365, 2, u'-  ASSERT_EQ(2u, lists.get("list16").as<DynamicList>().size());'), (366, 2, u'-  ASSERT_EQ(2u, lists.get("list32").as<DynamicList>().size());'), (367, 2, u'-  ASSERT_EQ(2u, lists.get("list64").as<DynamicList>().size());'), (368, 2, u'-  ASSERT_EQ(2u, lists.get("listP").as<DynamicList>().size());'), (389, 2, u'-    ASSERT_EQ(3u, l.size());'), (397, 2, u'-    ASSERT_EQ(3u, l.size());'), (405, 2, u'-    ASSERT_EQ(2u, l.size());'), (407, 2, u'-    ASSERT_EQ(2u, e.size());'), (411, 2, u'-    ASSERT_EQ(1u, e.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(181, 2, u'-      ASSERT_EQ(3u, listReader.size());'), (202, 2, u'-    ASSERT_EQ(4u, listReader.size());'), (210, 2, u'-    ASSERT_EQ(4u, listReader.size());'), (220, 2, u'-    ASSERT_EQ(3u, listReader.size());'), (362, 2, u'-  ASSERT_EQ(2u, lists.get("list0").as<DynamicList>().size());'), (363, 2, u'-  ASSERT_EQ(4u, lists.get("list1").as<DynamicList>().size());'), (364, 2, u'-  ASSERT_EQ(2u, lists.get("list8").as<DynamicList>().size());'), (365, 2, u'-  ASSERT_EQ(2u, lists.get("list16").as<DynamicList>().size());'), (366, 2, u'-  ASSERT_EQ(2u, lists.get("list32").as<DynamicList>().size());'), (367, 2, u'-  ASSERT_EQ(2u, lists.get("list64").as<DynamicList>().size());'), (368, 2, u'-  ASSERT_EQ(2u, lists.get("listP").as<DynamicList>().size());'), (389, 2, u'-    ASSERT_EQ(3u, l.size());'), (397, 2, u'-    ASSERT_EQ(3u, l.size());'), (405, 2, u'-    ASSERT_EQ(2u, l.size());'), (407, 2, u'-    ASSERT_EQ(2u, e.size());'), (411, 2, u'-    ASSERT_EQ(1u, e.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(211, 1, u'+  ASSERT_EQ(2u, list.size());')]
===========================================
Class:class SchemaLoader::Impl { class SchemaLoader::Impl 
Class:   class SchemaLoader::Validator { class SchemaLoader::Validator 
Class:   class SchemaLoader::CompatibilityChecker { class SchemaLoader::CompatibilityChecker 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_EQ(expected.size(), list.size());'), (20, 1, u'+  ASSERT_EQ(expected.size(), typed.size());'), (29, 1, u'+  ASSERT_EQ(expected.size(), list.size());'), (94, 1, u'+      ASSERT_EQ(3u, listReader.size());'), (116, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (124, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (134, 1, u'+    ASSERT_EQ(3u, listReader.size());')]
===========================================
===========================================
Total add: 142
Total del: 0
Header: genericCheckTestMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_EQ(expected.size(), list.size());'), (20, 1, u'+  ASSERT_EQ(expected.size(), typed.size());'), (29, 1, u'+  ASSERT_EQ(expected.size(), list.size());'), (94, 1, u'+      ASSERT_EQ(3u, listReader.size());'), (116, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (124, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (134, 1, u'+    ASSERT_EQ(3u, listReader.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_EQ(expected.size(), list.size());'), (20, 1, u'+  ASSERT_EQ(expected.size(), typed.size());'), (29, 1, u'+  ASSERT_EQ(expected.size(), list.size());'), (94, 1, u'+      ASSERT_EQ(3u, listReader.size());'), (116, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (124, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (134, 1, u'+    ASSERT_EQ(3u, listReader.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  ASSERT_EQ(2u, lists.get("list0").as<DynamicList>().size());'), (10, 1, u'+  ASSERT_EQ(4u, lists.get("list1").as<DynamicList>().size());'), (11, 1, u'+  ASSERT_EQ(2u, lists.get("list8").as<DynamicList>().size());'), (12, 1, u'+  ASSERT_EQ(2u, lists.get("list16").as<DynamicList>().size());'), (13, 1, u'+  ASSERT_EQ(2u, lists.get("list32").as<DynamicList>().size());'), (14, 1, u'+  ASSERT_EQ(2u, lists.get("list64").as<DynamicList>().size());'), (15, 1, u'+  ASSERT_EQ(2u, lists.get("listP").as<DynamicList>().size());'), (36, 1, u'+    ASSERT_EQ(3u, l.size());'), (44, 1, u'+    ASSERT_EQ(3u, l.size());'), (52, 1, u'+    ASSERT_EQ(2u, l.size());'), (54, 1, u'+    ASSERT_EQ(2u, e.size());'), (58, 1, u'+    ASSERT_EQ(1u, e.size());')]
===========================================
===========================================
Total add: 63
Total del: 0
Header: genericCheckListDefaults
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  ASSERT_EQ(2u, lists.get("list0").as<DynamicList>().size());'), (10, 1, u'+  ASSERT_EQ(4u, lists.get("list1").as<DynamicList>().size());'), (11, 1, u'+  ASSERT_EQ(2u, lists.get("list8").as<DynamicList>().size());'), (12, 1, u'+  ASSERT_EQ(2u, lists.get("list16").as<DynamicList>().size());'), (13, 1, u'+  ASSERT_EQ(2u, lists.get("list32").as<DynamicList>().size());'), (14, 1, u'+  ASSERT_EQ(2u, lists.get("list64").as<DynamicList>().size());'), (15, 1, u'+  ASSERT_EQ(2u, lists.get("listP").as<DynamicList>().size());'), (36, 1, u'+    ASSERT_EQ(3u, l.size());'), (44, 1, u'+    ASSERT_EQ(3u, l.size());'), (52, 1, u'+    ASSERT_EQ(2u, l.size());'), (54, 1, u'+    ASSERT_EQ(2u, e.size());'), (58, 1, u'+    ASSERT_EQ(1u, e.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  ASSERT_EQ(2u, lists.get("list0").as<DynamicList>().size());'), (10, 1, u'+  ASSERT_EQ(4u, lists.get("list1").as<DynamicList>().size());'), (11, 1, u'+  ASSERT_EQ(2u, lists.get("list8").as<DynamicList>().size());'), (12, 1, u'+  ASSERT_EQ(2u, lists.get("list16").as<DynamicList>().size());'), (13, 1, u'+  ASSERT_EQ(2u, lists.get("list32").as<DynamicList>().size());'), (14, 1, u'+  ASSERT_EQ(2u, lists.get("list64").as<DynamicList>().size());'), (15, 1, u'+  ASSERT_EQ(2u, lists.get("listP").as<DynamicList>().size());'), (36, 1, u'+    ASSERT_EQ(3u, l.size());'), (44, 1, u'+    ASSERT_EQ(3u, l.size());'), (52, 1, u'+    ASSERT_EQ(2u, l.size());'), (54, 1, u'+    ASSERT_EQ(2u, e.size());'), (58, 1, u'+    ASSERT_EQ(1u, e.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT_EQ(expectedData.size(), builder.size());'), (7, 1, u'+  ASSERT_EQ(expectedData.size(), reader.size());')]
===========================================
===========================================
Total add: 4
Total del: 10
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT_EQ(expectedData.size(), builder.size());'), (7, 1, u'+  ASSERT_EQ(expectedData.size(), reader.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT_EQ(expectedData.size(), builder.size());'), (7, 1, u'+  ASSERT_EQ(expectedData.size(), reader.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      ASSERT_EQ(3u, list.size());')]
===========================================
===========================================
Total add: 1
Total del: 5
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      ASSERT_EQ(3u, list.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      ASSERT_EQ(3u, list.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      ASSERT_EQ(2u, list.size());')]
===========================================
===========================================
Total add: 1
Total del: 5
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      ASSERT_EQ(2u, list.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      ASSERT_EQ(2u, list.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT_EQ(expectedData.size(), builder.size());'), (24, 1, u'+    ASSERT_EQ(expectedData.size(), builder.size());'), (47, 1, u'+    ASSERT_EQ(expectedData.size(), builder.size());'), (58, 1, u'+    ASSERT_EQ(expectedData.size(), builder.size());'), (202, 1, u'+    ASSERT_EQ(4u, l.size());'), (222, 1, u'+    ASSERT_EQ(4u, l.size());'), (244, 1, u'+    ASSERT_EQ(4u, l.size());'), (264, 1, u'+    ASSERT_EQ(4u, l.size());')]
===========================================
===========================================
Total add: 286
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT_EQ(expectedData.size(), builder.size());'), (24, 1, u'+    ASSERT_EQ(expectedData.size(), builder.size());'), (47, 1, u'+    ASSERT_EQ(expectedData.size(), builder.size());'), (58, 1, u'+    ASSERT_EQ(expectedData.size(), builder.size());'), (202, 1, u'+    ASSERT_EQ(4u, l.size());'), (222, 1, u'+    ASSERT_EQ(4u, l.size());'), (244, 1, u'+    ASSERT_EQ(4u, l.size());'), (264, 1, u'+    ASSERT_EQ(4u, l.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT_EQ(expectedData.size(), builder.size());'), (24, 1, u'+    ASSERT_EQ(expectedData.size(), builder.size());'), (47, 1, u'+    ASSERT_EQ(expectedData.size(), builder.size());'), (58, 1, u'+    ASSERT_EQ(expectedData.size(), builder.size());'), (202, 1, u'+    ASSERT_EQ(4u, l.size());'), (222, 1, u'+    ASSERT_EQ(4u, l.size());'), (244, 1, u'+    ASSERT_EQ(4u, l.size());'), (264, 1, u'+    ASSERT_EQ(4u, l.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-static_assert(sizeof(WireReference) == sizeof(word),'), (4, 2, u'-static_assert(REFERENCES * WORDS_PER_REFERENCE * BYTES_PER_WORD / BYTES == sizeof(WireReference),'), (6, 2, u'-static_assert(REFERENCES * BYTES_PER_REFERENCE / BYTES == sizeof(WireReference),'), (8, 2, u'-static_assert(REFERENCES * BITS_PER_REFERENCE / BITS_PER_BYTE / BYTES == sizeof(WireReference),'), (10, 1, u'+static_assert(sizeof(WirePointer) == sizeof(word),'), (12, 1, u'+static_assert(POINTERS * WORDS_PER_POINTER * BYTES_PER_WORD / BYTES == sizeof(WirePointer),'), (14, 1, u'+static_assert(POINTERS * BYTES_PER_POINTER / BYTES == sizeof(WirePointer),'), (16, 1, u'+static_assert(POINTERS * BITS_PER_POINTER / BITS_PER_BYTE / BYTES == sizeof(WirePointer),')]
===========================================
===========================================
Total add: 8
Total del: 8
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-static_assert(sizeof(WireReference) == sizeof(word),'), (4, 2, u'-static_assert(REFERENCES * WORDS_PER_REFERENCE * BYTES_PER_WORD / BYTES == sizeof(WireReference),'), (6, 2, u'-static_assert(REFERENCES * BYTES_PER_REFERENCE / BYTES == sizeof(WireReference),'), (8, 2, u'-static_assert(REFERENCES * BITS_PER_REFERENCE / BITS_PER_BYTE / BYTES == sizeof(WireReference),'), (10, 1, u'+static_assert(sizeof(WirePointer) == sizeof(word),'), (12, 1, u'+static_assert(POINTERS * WORDS_PER_POINTER * BYTES_PER_WORD / BYTES == sizeof(WirePointer),'), (14, 1, u'+static_assert(POINTERS * BYTES_PER_POINTER / BYTES == sizeof(WirePointer),'), (16, 1, u'+static_assert(POINTERS * BITS_PER_POINTER / BITS_PER_BYTE / BYTES == sizeof(WirePointer),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-static_assert(sizeof(WireReference) == sizeof(word),'), (4, 2, u'-static_assert(REFERENCES * WORDS_PER_REFERENCE * BYTES_PER_WORD / BYTES == sizeof(WireReference),'), (6, 2, u'-static_assert(REFERENCES * BYTES_PER_REFERENCE / BYTES == sizeof(WireReference),'), (8, 2, u'-static_assert(REFERENCES * BITS_PER_REFERENCE / BITS_PER_BYTE / BYTES == sizeof(WireReference),'), (10, 1, u'+static_assert(sizeof(WirePointer) == sizeof(word),'), (12, 1, u'+static_assert(POINTERS * WORDS_PER_POINTER * BYTES_PER_WORD / BYTES == sizeof(WirePointer),'), (14, 1, u'+static_assert(POINTERS * BYTES_PER_POINTER / BYTES == sizeof(WirePointer),'), (16, 1, u'+static_assert(POINTERS * BITS_PER_POINTER / BITS_PER_BYTE / BYTES == sizeof(WirePointer),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(223, 1, u'+  ASSERT_EQ(2u, builder.getSegmentsForOutput().size());'), (245, 1, u'+  ASSERT_EQ(3u, builder.getSegmentsForOutput().size());')]
===========================================
===========================================
Total add: 249
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(223, 1, u'+  ASSERT_EQ(2u, builder.getSegmentsForOutput().size());'), (245, 1, u'+  ASSERT_EQ(3u, builder.getSegmentsForOutput().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(223, 1, u'+  ASSERT_EQ(2u, builder.getSegmentsForOutput().size());'), (245, 1, u'+  ASSERT_EQ(3u, builder.getSegmentsForOutput().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+  ASSERT_EQ(expected.size(), list.size());'), (38, 1, u'+  ASSERT_EQ(expected.size(), typed.size());'), (104, 1, u'+      ASSERT_EQ(3u, listReader.size());'), (125, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (133, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (143, 1, u'+    ASSERT_EQ(3u, listReader.size());'), (285, 1, u'+  ASSERT_EQ(2u, lists.get("list0").as<DynamicList>().size());'), (286, 1, u'+  ASSERT_EQ(4u, lists.get("list1").as<DynamicList>().size());'), (287, 1, u'+  ASSERT_EQ(2u, lists.get("list8").as<DynamicList>().size());'), (288, 1, u'+  ASSERT_EQ(2u, lists.get("list16").as<DynamicList>().size());'), (289, 1, u'+  ASSERT_EQ(2u, lists.get("list32").as<DynamicList>().size());'), (290, 1, u'+  ASSERT_EQ(2u, lists.get("list64").as<DynamicList>().size());'), (291, 1, u'+  ASSERT_EQ(2u, lists.get("listP").as<DynamicList>().size());'), (312, 1, u'+    ASSERT_EQ(3u, l.size());'), (320, 1, u'+    ASSERT_EQ(3u, l.size());'), (328, 1, u'+    ASSERT_EQ(2u, l.size());'), (330, 1, u'+    ASSERT_EQ(2u, e.size());'), (334, 1, u'+    ASSERT_EQ(1u, e.size());')]
===========================================
===========================================
Total add: 339
Total del: 7
Header: dynamicInitTestmessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+  ASSERT_EQ(expected.size(), list.size());'), (38, 1, u'+  ASSERT_EQ(expected.size(), typed.size());'), (104, 1, u'+      ASSERT_EQ(3u, listReader.size());'), (125, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (133, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (143, 1, u'+    ASSERT_EQ(3u, listReader.size());'), (285, 1, u'+  ASSERT_EQ(2u, lists.get("list0").as<DynamicList>().size());'), (286, 1, u'+  ASSERT_EQ(4u, lists.get("list1").as<DynamicList>().size());'), (287, 1, u'+  ASSERT_EQ(2u, lists.get("list8").as<DynamicList>().size());'), (288, 1, u'+  ASSERT_EQ(2u, lists.get("list16").as<DynamicList>().size());'), (289, 1, u'+  ASSERT_EQ(2u, lists.get("list32").as<DynamicList>().size());'), (290, 1, u'+  ASSERT_EQ(2u, lists.get("list64").as<DynamicList>().size());'), (291, 1, u'+  ASSERT_EQ(2u, lists.get("listP").as<DynamicList>().size());'), (312, 1, u'+    ASSERT_EQ(3u, l.size());'), (320, 1, u'+    ASSERT_EQ(3u, l.size());'), (328, 1, u'+    ASSERT_EQ(2u, l.size());'), (330, 1, u'+    ASSERT_EQ(2u, e.size());'), (334, 1, u'+    ASSERT_EQ(1u, e.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+  ASSERT_EQ(expected.size(), list.size());'), (38, 1, u'+  ASSERT_EQ(expected.size(), typed.size());'), (104, 1, u'+      ASSERT_EQ(3u, listReader.size());'), (125, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (133, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (143, 1, u'+    ASSERT_EQ(3u, listReader.size());'), (285, 1, u'+  ASSERT_EQ(2u, lists.get("list0").as<DynamicList>().size());'), (286, 1, u'+  ASSERT_EQ(4u, lists.get("list1").as<DynamicList>().size());'), (287, 1, u'+  ASSERT_EQ(2u, lists.get("list8").as<DynamicList>().size());'), (288, 1, u'+  ASSERT_EQ(2u, lists.get("list16").as<DynamicList>().size());'), (289, 1, u'+  ASSERT_EQ(2u, lists.get("list32").as<DynamicList>().size());'), (290, 1, u'+  ASSERT_EQ(2u, lists.get("list64").as<DynamicList>().size());'), (291, 1, u'+  ASSERT_EQ(2u, lists.get("listP").as<DynamicList>().size());'), (312, 1, u'+    ASSERT_EQ(3u, l.size());'), (320, 1, u'+    ASSERT_EQ(3u, l.size());'), (328, 1, u'+    ASSERT_EQ(2u, l.size());'), (330, 1, u'+    ASSERT_EQ(2u, e.size());'), (334, 1, u'+    ASSERT_EQ(1u, e.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(89, 1, u'+      ASSERT_EQ(4u, list.size());'), (128, 1, u'+      ASSERT_EQ(4u, list.size());'), (160, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (166, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (172, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (178, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (189, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (195, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (201, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (207, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (224, 1, u'+  ASSERT_EQ(TestUnion::Union0::U0F1S32, reader.getUnion0().which());'), (227, 1, u'+  ASSERT_EQ(TestUnion::Union1::U1F1SP, reader.getUnion1().which());'), (230, 1, u'+  ASSERT_EQ(TestUnion::Union2::U2F0S1, reader.getUnion2().which());'), (233, 1, u'+  ASSERT_EQ(TestUnion::Union3::U3F0S64, reader.getUnion3().which());')]
===========================================
===========================================
Total add: 231
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(89, 1, u'+      ASSERT_EQ(4u, list.size());'), (128, 1, u'+      ASSERT_EQ(4u, list.size());'), (160, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (166, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (172, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (178, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (189, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (195, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (201, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (207, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (224, 1, u'+  ASSERT_EQ(TestUnion::Union0::U0F1S32, reader.getUnion0().which());'), (227, 1, u'+  ASSERT_EQ(TestUnion::Union1::U1F1SP, reader.getUnion1().which());'), (230, 1, u'+  ASSERT_EQ(TestUnion::Union2::U2F0S1, reader.getUnion2().which());'), (233, 1, u'+  ASSERT_EQ(TestUnion::Union3::U3F0S64, reader.getUnion3().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(89, 1, u'+      ASSERT_EQ(4u, list.size());'), (128, 1, u'+      ASSERT_EQ(4u, list.size());'), (160, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (166, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (172, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (178, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (189, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (195, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (201, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (207, 1, u'+      ASSERT_TRUE(u.which() != nullptr);'), (224, 1, u'+  ASSERT_EQ(TestUnion::Union0::U0F1S32, reader.getUnion0().which());'), (227, 1, u'+  ASSERT_EQ(TestUnion::Union1::U1F1SP, reader.getUnion1().which());'), (230, 1, u'+  ASSERT_EQ(TestUnion::Union2::U2F0S1, reader.getUnion2().which());'), (233, 1, u'+  ASSERT_EQ(TestUnion::Union3::U3F0S64, reader.getUnion3().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(schema.members().size(),'), (3, 1, u'+  ASSERT_EQ(schema.getMembers().size(),')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(schema.members().size(),'), (3, 1, u'+  ASSERT_EQ(schema.getMembers().size(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(schema.members().size(),'), (3, 1, u'+  ASSERT_EQ(schema.getMembers().size(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(schema.enumerants().size(),'), (3, 1, u'+  ASSERT_EQ(schema.getEnumerants().size(),')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(schema.enumerants().size(),'), (3, 1, u'+  ASSERT_EQ(schema.getEnumerants().size(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(schema.enumerants().size(),'), (3, 1, u'+  ASSERT_EQ(schema.getEnumerants().size(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 1, u'+  ASSERT_EQ(schema.members().size(),'), (80, 1, u'+  ASSERT_TRUE(lookup != nullptr);'), (126, 1, u'+  ASSERT_TRUE(maybeUnion1 != nullptr);'), (133, 1, u'+  ASSERT_TRUE(maybeU1f0s8 != nullptr);'), (163, 1, u'+  ASSERT_EQ(schema.enumerants().size(),'), (170, 1, u'+  ASSERT_TRUE(lookup != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(102, 1, u'+  static_assert(sizeof(T) == sizeof(U), "Size must match.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    ASSERT_EQ(3u, l.size());'), (27, 1, u'+    ASSERT_EQ(3u, l.size());'), (42, 1, u'+    ASSERT_EQ(3u, l.size());'), (63, 1, u'+    ASSERT_EQ(4u, l.size());'), (78, 1, u'+    ASSERT_EQ(4u, l.size());'), (96, 1, u'+    ASSERT_EQ(4u, l.size());'), (114, 1, u'+    ASSERT_EQ(4u, l.size());')]
===========================================
===========================================
Total add: 133
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    ASSERT_EQ(3u, l.size());'), (27, 1, u'+    ASSERT_EQ(3u, l.size());'), (42, 1, u'+    ASSERT_EQ(3u, l.size());'), (63, 1, u'+    ASSERT_EQ(4u, l.size());'), (78, 1, u'+    ASSERT_EQ(4u, l.size());'), (96, 1, u'+    ASSERT_EQ(4u, l.size());'), (114, 1, u'+    ASSERT_EQ(4u, l.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    ASSERT_EQ(3u, l.size());'), (27, 1, u'+    ASSERT_EQ(3u, l.size());'), (42, 1, u'+    ASSERT_EQ(3u, l.size());'), (63, 1, u'+    ASSERT_EQ(4u, l.size());'), (78, 1, u'+    ASSERT_EQ(4u, l.size());'), (96, 1, u'+    ASSERT_EQ(4u, l.size());'), (114, 1, u'+    ASSERT_EQ(4u, l.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  static_assert(sizeof(WireReference::structRef.dataSize) == 2,'), (6, 2, u'-  static_assert(sizeof(WireReference::structRef.refCount) == 2,')]
===========================================
===========================================
Total add: 1
Total del: 7
Header: StructBuilder::getObjectField
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  static_assert(sizeof(WireReference::structRef.dataSize) == 2,'), (6, 2, u'-  static_assert(sizeof(WireReference::structRef.refCount) == 2,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  static_assert(sizeof(WireReference::structRef.dataSize) == 2,'), (6, 2, u'-  static_assert(sizeof(WireReference::structRef.refCount) == 2,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(2u, lists.getList1().size());'), (3, 1, u'+  ASSERT_EQ(4u, lists.getList1().size());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: genericCheckListDefaults
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(2u, lists.getList1().size());'), (3, 1, u'+  ASSERT_EQ(4u, lists.getList1().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(2u, lists.getList1().size());'), (3, 1, u'+  ASSERT_EQ(4u, lists.getList1().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (64, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (65, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (66, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (67, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (68, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (69, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (71, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (72, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (73, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (74, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (75, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (76, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (77, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (78, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (80, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (81, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (82, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (83, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (84, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (85, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (86, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (87, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
Total add: 1
Total del: 232
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (64, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (65, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (66, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (67, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (68, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (69, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (71, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (72, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (73, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (74, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (75, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (76, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (77, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (78, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (80, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (81, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (82, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (83, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (84, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (85, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (86, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (87, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (64, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (65, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (66, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (67, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (68, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (69, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (71, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (72, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (73, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (74, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (75, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (76, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (77, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (78, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (80, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (81, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (82, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (83, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (84, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (85, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (86, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (87, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (5, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (6, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (7, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (8, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (9, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (10, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (12, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (13, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (14, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (15, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (16, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (17, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (18, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (19, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (21, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (22, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (23, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (24, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (25, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (26, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (27, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (28, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
Total add: 4
Total del: 169
Header: genericInitInlineDefaults
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (5, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (6, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (7, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (8, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (9, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (10, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (12, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (13, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (14, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (15, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (16, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (17, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (18, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (19, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (21, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (22, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (23, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (24, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (25, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (26, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (27, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (28, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (5, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (6, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (7, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (8, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (9, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (10, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (12, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (13, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (14, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (15, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (16, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (17, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (18, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (19, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (21, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (22, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (23, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (24, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (25, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (26, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (27, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (28, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 2, u'-      ASSERT_EQ(3u, l[0].size());'), (70, 2, u'-      ASSERT_EQ(3u, l[1].size());'), (71, 2, u'-      ASSERT_EQ(3u, l[2].size());'), (101, 2, u'-      ASSERT_EQ(2u, l[0][0].size());'), (102, 2, u'-      ASSERT_EQ(2u, l[0][1].size());'), (103, 2, u'-      ASSERT_EQ(2u, l[0][2].size());'), (104, 2, u'-      ASSERT_EQ(2u, l[1][0].size());'), (105, 2, u'-      ASSERT_EQ(2u, l[1][1].size());'), (106, 2, u'-      ASSERT_EQ(2u, l[2][0].size());'), (120, 2, u'-      ASSERT_EQ(5u, l[0][0].size());'), (121, 2, u'-      ASSERT_EQ(5u, l[0][1].size());'), (122, 2, u'-      ASSERT_EQ(5u, l[1][0].size());'), (133, 2, u'-      ASSERT_EQ(3u, l[0][0].size());'), (134, 2, u'-      ASSERT_EQ(3u, l[0][1].size());'), (135, 2, u'-      ASSERT_EQ(3u, l[1][0].size());')]
===========================================
===========================================
Total add: 6
Total del: 161
Header: genericInitInlineDefaults
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 2, u'-      ASSERT_EQ(3u, l[0].size());'), (70, 2, u'-      ASSERT_EQ(3u, l[1].size());'), (71, 2, u'-      ASSERT_EQ(3u, l[2].size());'), (101, 2, u'-      ASSERT_EQ(2u, l[0][0].size());'), (102, 2, u'-      ASSERT_EQ(2u, l[0][1].size());'), (103, 2, u'-      ASSERT_EQ(2u, l[0][2].size());'), (104, 2, u'-      ASSERT_EQ(2u, l[1][0].size());'), (105, 2, u'-      ASSERT_EQ(2u, l[1][1].size());'), (106, 2, u'-      ASSERT_EQ(2u, l[2][0].size());'), (120, 2, u'-      ASSERT_EQ(5u, l[0][0].size());'), (121, 2, u'-      ASSERT_EQ(5u, l[0][1].size());'), (122, 2, u'-      ASSERT_EQ(5u, l[1][0].size());'), (133, 2, u'-      ASSERT_EQ(3u, l[0][0].size());'), (134, 2, u'-      ASSERT_EQ(3u, l[0][1].size());'), (135, 2, u'-      ASSERT_EQ(3u, l[1][0].size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 2, u'-      ASSERT_EQ(3u, l[0].size());'), (70, 2, u'-      ASSERT_EQ(3u, l[1].size());'), (71, 2, u'-      ASSERT_EQ(3u, l[2].size());'), (101, 2, u'-      ASSERT_EQ(2u, l[0][0].size());'), (102, 2, u'-      ASSERT_EQ(2u, l[0][1].size());'), (103, 2, u'-      ASSERT_EQ(2u, l[0][2].size());'), (104, 2, u'-      ASSERT_EQ(2u, l[1][0].size());'), (105, 2, u'-      ASSERT_EQ(2u, l[1][1].size());'), (106, 2, u'-      ASSERT_EQ(2u, l[2][0].size());'), (120, 2, u'-      ASSERT_EQ(5u, l[0][0].size());'), (121, 2, u'-      ASSERT_EQ(5u, l[0][1].size());'), (122, 2, u'-      ASSERT_EQ(5u, l[1][0].size());'), (133, 2, u'-      ASSERT_EQ(3u, l[0][0].size());'), (134, 2, u'-      ASSERT_EQ(3u, l[0][1].size());'), (135, 2, u'-      ASSERT_EQ(3u, l[1][0].size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 2, u'-    ASSERT_EQ(TestInlineUnions::Union0::F32, unions.getUnion0().which());'), (58, 2, u'-    ASSERT_EQ(TestInlineUnions::Union1::F128, unions.getUnion1().which());'), (62, 2, u'-    ASSERT_EQ(TestInlineUnions::Union3::F16P, unions.getUnion3().which());'), (72, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (73, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (74, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (75, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (76, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (77, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (78, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (80, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (81, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (82, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (83, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (84, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (85, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (86, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (87, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (89, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (90, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (91, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (92, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (93, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (94, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (95, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (96, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());'), (243, 1, u'+  ASSERT_EQ(2u, lists.getList0().size());'), (244, 1, u'+  ASSERT_EQ(2u, lists.getList1().size());'), (245, 1, u'+  ASSERT_EQ(2u, lists.getList8().size());'), (246, 1, u'+  ASSERT_EQ(2u, lists.getList16().size());'), (247, 1, u'+  ASSERT_EQ(2u, lists.getList32().size());'), (248, 1, u'+  ASSERT_EQ(2u, lists.getList64().size());'), (249, 1, u'+  ASSERT_EQ(2u, lists.getListP().size());'), (269, 2, u'-    ASSERT_EQ(2u, sl.getList0().size());'), (270, 2, u'-    ASSERT_EQ(2u, sl.getList1().size());'), (271, 2, u'-    ASSERT_EQ(2u, sl.getList8().size());'), (272, 2, u'-    ASSERT_EQ(2u, sl.getList16().size());'), (273, 2, u'-    ASSERT_EQ(2u, sl.getList32().size());'), (274, 2, u'-    ASSERT_EQ(2u, sl.getList64().size());'), (275, 2, u'-    ASSERT_EQ(2u, sl.getListP().size());'), (292, 1, u'+    ASSERT_EQ(3u, l.size());')]
===========================================
===========================================
Total add: 30
Total del: 262
Header: genericInitInlineDefaults
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 2, u'-    ASSERT_EQ(TestInlineUnions::Union0::F32, unions.getUnion0().which());'), (58, 2, u'-    ASSERT_EQ(TestInlineUnions::Union1::F128, unions.getUnion1().which());'), (62, 2, u'-    ASSERT_EQ(TestInlineUnions::Union3::F16P, unions.getUnion3().which());'), (72, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (73, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (74, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (75, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (76, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (77, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (78, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (80, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (81, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (82, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (83, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (84, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (85, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (86, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (87, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (89, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (90, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (91, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (92, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (93, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (94, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (95, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (96, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());'), (243, 1, u'+  ASSERT_EQ(2u, lists.getList0().size());'), (244, 1, u'+  ASSERT_EQ(2u, lists.getList1().size());'), (245, 1, u'+  ASSERT_EQ(2u, lists.getList8().size());'), (246, 1, u'+  ASSERT_EQ(2u, lists.getList16().size());'), (247, 1, u'+  ASSERT_EQ(2u, lists.getList32().size());'), (248, 1, u'+  ASSERT_EQ(2u, lists.getList64().size());'), (249, 1, u'+  ASSERT_EQ(2u, lists.getListP().size());'), (269, 2, u'-    ASSERT_EQ(2u, sl.getList0().size());'), (270, 2, u'-    ASSERT_EQ(2u, sl.getList1().size());'), (271, 2, u'-    ASSERT_EQ(2u, sl.getList8().size());'), (272, 2, u'-    ASSERT_EQ(2u, sl.getList16().size());'), (273, 2, u'-    ASSERT_EQ(2u, sl.getList32().size());'), (274, 2, u'-    ASSERT_EQ(2u, sl.getList64().size());'), (275, 2, u'-    ASSERT_EQ(2u, sl.getListP().size());'), (292, 1, u'+    ASSERT_EQ(3u, l.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 2, u'-    ASSERT_EQ(TestInlineUnions::Union0::F32, unions.getUnion0().which());'), (58, 2, u'-    ASSERT_EQ(TestInlineUnions::Union1::F128, unions.getUnion1().which());'), (62, 2, u'-    ASSERT_EQ(TestInlineUnions::Union3::F16P, unions.getUnion3().which());'), (72, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (73, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (74, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (75, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (76, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (77, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (78, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (80, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (81, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (82, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (83, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (84, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (85, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (86, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (87, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (89, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (90, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (91, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (92, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (93, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (94, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (95, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (96, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());'), (243, 1, u'+  ASSERT_EQ(2u, lists.getList0().size());'), (244, 1, u'+  ASSERT_EQ(2u, lists.getList1().size());'), (245, 1, u'+  ASSERT_EQ(2u, lists.getList8().size());'), (246, 1, u'+  ASSERT_EQ(2u, lists.getList16().size());'), (247, 1, u'+  ASSERT_EQ(2u, lists.getList32().size());'), (248, 1, u'+  ASSERT_EQ(2u, lists.getList64().size());'), (249, 1, u'+  ASSERT_EQ(2u, lists.getListP().size());'), (269, 2, u'-    ASSERT_EQ(2u, sl.getList0().size());'), (270, 2, u'-    ASSERT_EQ(2u, sl.getList1().size());'), (271, 2, u'-    ASSERT_EQ(2u, sl.getList8().size());'), (272, 2, u'-    ASSERT_EQ(2u, sl.getList16().size());'), (273, 2, u'-    ASSERT_EQ(2u, sl.getList32().size());'), (274, 2, u'-    ASSERT_EQ(2u, sl.getList64().size());'), (275, 2, u'-    ASSERT_EQ(2u, sl.getListP().size());'), (292, 1, u'+    ASSERT_EQ(3u, l.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      ASSERT_EQ(3u, l.size());'), (14, 2, u'-      ASSERT_EQ(3u, l.size());'), (22, 2, u'-      ASSERT_EQ(2u, l.size());'), (24, 2, u'-      ASSERT_EQ(2u, e.size());'), (28, 2, u'-      ASSERT_EQ(1u, e.size());'), (34, 2, u'-      ASSERT_EQ(2u, l.size());'), (41, 2, u'-      ASSERT_EQ(3u, l.size());'), (49, 2, u'-      ASSERT_EQ(3u, l.size());'), (50, 2, u'-      ASSERT_EQ(3u, l[0].size());'), (51, 2, u'-      ASSERT_EQ(3u, l[1].size());'), (52, 2, u'-      ASSERT_EQ(3u, l[2].size());'), (80, 2, u'-      ASSERT_EQ(3u, l.size());'), (82, 2, u'-      ASSERT_EQ(3u, l[0].size());'), (83, 2, u'-      ASSERT_EQ(2u, l[1].size());'), (84, 2, u'-      ASSERT_EQ(1u, l[2].size());'), (86, 2, u'-      ASSERT_EQ(2u, l[0][0].size());'), (87, 2, u'-      ASSERT_EQ(2u, l[0][1].size());'), (88, 2, u'-      ASSERT_EQ(2u, l[0][2].size());'), (89, 2, u'-      ASSERT_EQ(2u, l[1][0].size());'), (90, 2, u'-      ASSERT_EQ(2u, l[1][1].size());'), (91, 2, u'-      ASSERT_EQ(2u, l[2][0].size());'), (103, 2, u'-      ASSERT_EQ(2u, l.size());'), (105, 2, u'-      ASSERT_EQ(2u, l[0].size());'), (106, 2, u'-      ASSERT_EQ(1u, l[1].size());'), (108, 2, u'-      ASSERT_EQ(5u, l[0][0].size());'), (109, 2, u'-      ASSERT_EQ(5u, l[0][1].size());'), (110, 2, u'-      ASSERT_EQ(5u, l[1][0].size());'), (119, 2, u'-      ASSERT_EQ(2u, l.size());'), (121, 2, u'-      ASSERT_EQ(2u, l[0].size());'), (122, 2, u'-      ASSERT_EQ(1u, l[1].size());'), (124, 2, u'-      ASSERT_EQ(3u, l[0][0].size());'), (125, 2, u'-      ASSERT_EQ(3u, l[0][1].size());'), (126, 2, u'-      ASSERT_EQ(3u, l[1][0].size());'), (151, 2, u'-      ASSERT_EQ(2u, l.size());'), (169, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (170, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (171, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (172, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (173, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (174, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (175, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (177, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (178, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (179, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (180, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (181, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (182, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (183, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (184, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (186, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (187, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (188, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (189, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (190, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (191, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (192, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (193, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());'), (207, 1, u'+    ASSERT_EQ(3u, l.size());')]
===========================================
===========================================
Total add: 5
Total del: 204
Header: genericCheckInlineDefaults
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      ASSERT_EQ(3u, l.size());'), (14, 2, u'-      ASSERT_EQ(3u, l.size());'), (22, 2, u'-      ASSERT_EQ(2u, l.size());'), (24, 2, u'-      ASSERT_EQ(2u, e.size());'), (28, 2, u'-      ASSERT_EQ(1u, e.size());'), (34, 2, u'-      ASSERT_EQ(2u, l.size());'), (41, 2, u'-      ASSERT_EQ(3u, l.size());'), (49, 2, u'-      ASSERT_EQ(3u, l.size());'), (50, 2, u'-      ASSERT_EQ(3u, l[0].size());'), (51, 2, u'-      ASSERT_EQ(3u, l[1].size());'), (52, 2, u'-      ASSERT_EQ(3u, l[2].size());'), (80, 2, u'-      ASSERT_EQ(3u, l.size());'), (82, 2, u'-      ASSERT_EQ(3u, l[0].size());'), (83, 2, u'-      ASSERT_EQ(2u, l[1].size());'), (84, 2, u'-      ASSERT_EQ(1u, l[2].size());'), (86, 2, u'-      ASSERT_EQ(2u, l[0][0].size());'), (87, 2, u'-      ASSERT_EQ(2u, l[0][1].size());'), (88, 2, u'-      ASSERT_EQ(2u, l[0][2].size());'), (89, 2, u'-      ASSERT_EQ(2u, l[1][0].size());'), (90, 2, u'-      ASSERT_EQ(2u, l[1][1].size());'), (91, 2, u'-      ASSERT_EQ(2u, l[2][0].size());'), (103, 2, u'-      ASSERT_EQ(2u, l.size());'), (105, 2, u'-      ASSERT_EQ(2u, l[0].size());'), (106, 2, u'-      ASSERT_EQ(1u, l[1].size());'), (108, 2, u'-      ASSERT_EQ(5u, l[0][0].size());'), (109, 2, u'-      ASSERT_EQ(5u, l[0][1].size());'), (110, 2, u'-      ASSERT_EQ(5u, l[1][0].size());'), (119, 2, u'-      ASSERT_EQ(2u, l.size());'), (121, 2, u'-      ASSERT_EQ(2u, l[0].size());'), (122, 2, u'-      ASSERT_EQ(1u, l[1].size());'), (124, 2, u'-      ASSERT_EQ(3u, l[0][0].size());'), (125, 2, u'-      ASSERT_EQ(3u, l[0][1].size());'), (126, 2, u'-      ASSERT_EQ(3u, l[1][0].size());'), (151, 2, u'-      ASSERT_EQ(2u, l.size());'), (169, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (170, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (171, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (172, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (173, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (174, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (175, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (177, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (178, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (179, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (180, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (181, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (182, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (183, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (184, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (186, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (187, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (188, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (189, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (190, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (191, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (192, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (193, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());'), (207, 1, u'+    ASSERT_EQ(3u, l.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      ASSERT_EQ(3u, l.size());'), (14, 2, u'-      ASSERT_EQ(3u, l.size());'), (22, 2, u'-      ASSERT_EQ(2u, l.size());'), (24, 2, u'-      ASSERT_EQ(2u, e.size());'), (28, 2, u'-      ASSERT_EQ(1u, e.size());'), (34, 2, u'-      ASSERT_EQ(2u, l.size());'), (41, 2, u'-      ASSERT_EQ(3u, l.size());'), (49, 2, u'-      ASSERT_EQ(3u, l.size());'), (50, 2, u'-      ASSERT_EQ(3u, l[0].size());'), (51, 2, u'-      ASSERT_EQ(3u, l[1].size());'), (52, 2, u'-      ASSERT_EQ(3u, l[2].size());'), (80, 2, u'-      ASSERT_EQ(3u, l.size());'), (82, 2, u'-      ASSERT_EQ(3u, l[0].size());'), (83, 2, u'-      ASSERT_EQ(2u, l[1].size());'), (84, 2, u'-      ASSERT_EQ(1u, l[2].size());'), (86, 2, u'-      ASSERT_EQ(2u, l[0][0].size());'), (87, 2, u'-      ASSERT_EQ(2u, l[0][1].size());'), (88, 2, u'-      ASSERT_EQ(2u, l[0][2].size());'), (89, 2, u'-      ASSERT_EQ(2u, l[1][0].size());'), (90, 2, u'-      ASSERT_EQ(2u, l[1][1].size());'), (91, 2, u'-      ASSERT_EQ(2u, l[2][0].size());'), (103, 2, u'-      ASSERT_EQ(2u, l.size());'), (105, 2, u'-      ASSERT_EQ(2u, l[0].size());'), (106, 2, u'-      ASSERT_EQ(1u, l[1].size());'), (108, 2, u'-      ASSERT_EQ(5u, l[0][0].size());'), (109, 2, u'-      ASSERT_EQ(5u, l[0][1].size());'), (110, 2, u'-      ASSERT_EQ(5u, l[1][0].size());'), (119, 2, u'-      ASSERT_EQ(2u, l.size());'), (121, 2, u'-      ASSERT_EQ(2u, l[0].size());'), (122, 2, u'-      ASSERT_EQ(1u, l[1].size());'), (124, 2, u'-      ASSERT_EQ(3u, l[0][0].size());'), (125, 2, u'-      ASSERT_EQ(3u, l[0][1].size());'), (126, 2, u'-      ASSERT_EQ(3u, l[1][0].size());'), (151, 2, u'-      ASSERT_EQ(2u, l.size());'), (169, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (170, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (171, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (172, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (173, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (174, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (175, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (177, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (178, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (179, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (180, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (181, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (182, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (183, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (184, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (186, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (187, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (188, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (189, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (190, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (191, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (192, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (193, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());'), (207, 1, u'+    ASSERT_EQ(3u, l.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 1, u'+    ASSERT_EQ(2u, l.size());'), (85, 1, u'+    ASSERT_EQ(2u, e.size());'), (89, 1, u'+    ASSERT_EQ(1u, e.size());')]
===========================================
===========================================
Total add: 9
Total del: 80
Header: genericInitEmptyInlineLists
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 1, u'+    ASSERT_EQ(2u, l.size());'), (85, 1, u'+    ASSERT_EQ(2u, e.size());'), (89, 1, u'+    ASSERT_EQ(1u, e.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 1, u'+    ASSERT_EQ(2u, l.size());'), (85, 1, u'+    ASSERT_EQ(2u, e.size());'), (89, 1, u'+    ASSERT_EQ(1u, e.size());')]
===========================================
Class:class TextBlob { class TextBlob 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+      ASSERT_EQ(3u, list.size());'), (27, 1, u'+      ASSERT_EQ(3u, list.size());'), (35, 1, u'+      ASSERT_EQ(3u, list.size());'), (45, 1, u'+      ASSERT_EQ(2u, list.size());'), (51, 1, u'+      ASSERT_EQ(2u, list.size());'), (58, 1, u'+      ASSERT_EQ(2u, list.size());'), (67, 1, u'+      ASSERT_EQ(2u, list.size());'), (73, 1, u'+      ASSERT_EQ(2u, list.size());'), (80, 1, u'+      ASSERT_EQ(2u, list.size());')]
===========================================
===========================================
Total add: 85
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+      ASSERT_EQ(3u, list.size());'), (27, 1, u'+      ASSERT_EQ(3u, list.size());'), (35, 1, u'+      ASSERT_EQ(3u, list.size());'), (45, 1, u'+      ASSERT_EQ(2u, list.size());'), (51, 1, u'+      ASSERT_EQ(2u, list.size());'), (58, 1, u'+      ASSERT_EQ(2u, list.size());'), (67, 1, u'+      ASSERT_EQ(2u, list.size());'), (73, 1, u'+      ASSERT_EQ(2u, list.size());'), (80, 1, u'+      ASSERT_EQ(2u, list.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+      ASSERT_EQ(3u, list.size());'), (27, 1, u'+      ASSERT_EQ(3u, list.size());'), (35, 1, u'+      ASSERT_EQ(3u, list.size());'), (45, 1, u'+      ASSERT_EQ(2u, list.size());'), (51, 1, u'+      ASSERT_EQ(2u, list.size());'), (58, 1, u'+      ASSERT_EQ(2u, list.size());'), (67, 1, u'+      ASSERT_EQ(2u, list.size());'), (73, 1, u'+      ASSERT_EQ(2u, list.size());'), (80, 1, u'+      ASSERT_EQ(2u, list.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (64, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (65, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (66, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (67, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (68, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (69, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (71, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (72, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (73, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (74, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (75, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (76, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (77, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (78, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (80, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (81, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (82, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (83, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (84, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (85, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (86, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (87, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
Total add: 231
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (64, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (65, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (66, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (67, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (68, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (69, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (71, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (72, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (73, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (74, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (75, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (76, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (77, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (78, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (80, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (81, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (82, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (83, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (84, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (85, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (86, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (87, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (64, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (65, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (66, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (67, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (68, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (69, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (71, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (72, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (73, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (74, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (75, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (76, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (77, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (78, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (80, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (81, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (82, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (83, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (84, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (85, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (86, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (87, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (13, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (14, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (15, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (16, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (17, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (18, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (20, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (21, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (22, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (23, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (24, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (25, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (26, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (27, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (29, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (30, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (31, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (32, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (33, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (34, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (35, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (36, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
Total add: 133
Total del: 0
Header: genericCheckInlineDefaults
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (13, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (14, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (15, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (16, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (17, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (18, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (20, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (21, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (22, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (23, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (24, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (25, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (26, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (27, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (29, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (30, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (31, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (32, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (33, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (34, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (35, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (36, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (13, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (14, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (15, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (16, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (17, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (18, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (20, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (21, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (22, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (23, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (24, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (25, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (26, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (27, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (29, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (30, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (31, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (32, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (33, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (34, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (35, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (36, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (12, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (20, 1, u'+  ASSERT_EQ(expected.size(), reader.size());')]
===========================================
===========================================
Total add: 24
Total del: 0
Header: namespace {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (12, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (20, 1, u'+  ASSERT_EQ(expected.size(), reader.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (12, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (20, 1, u'+  ASSERT_EQ(expected.size(), reader.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 2, u'-    ASSERT_EQ(TestInlineUnions::Union0::F32, unions.getUnion0().which());'), (60, 2, u'-    ASSERT_EQ(TestInlineUnions::Union1::F128, unions.getUnion1().which());'), (64, 2, u'-    ASSERT_EQ(TestInlineUnions::Union3::F16P, unions.getUnion3().which());'), (78, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (79, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (80, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (81, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (82, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (83, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (84, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (86, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (87, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (88, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (89, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (90, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (91, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (92, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (93, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (95, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (96, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (97, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (98, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (99, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (100, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (101, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (102, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());'), (251, 2, u'-    ASSERT_EQ(2u, sl.getList0().size());'), (252, 2, u'-    ASSERT_EQ(2u, sl.getList1().size());'), (253, 2, u'-    ASSERT_EQ(2u, sl.getList8().size());'), (254, 2, u'-    ASSERT_EQ(2u, sl.getList16().size());'), (255, 2, u'-    ASSERT_EQ(2u, sl.getList32().size());'), (256, 2, u'-    ASSERT_EQ(2u, sl.getList64().size());'), (257, 2, u'-    ASSERT_EQ(2u, sl.getListP().size());')]
===========================================
===========================================
Total add: 12
Total del: 261
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 2, u'-    ASSERT_EQ(TestInlineUnions::Union0::F32, unions.getUnion0().which());'), (60, 2, u'-    ASSERT_EQ(TestInlineUnions::Union1::F128, unions.getUnion1().which());'), (64, 2, u'-    ASSERT_EQ(TestInlineUnions::Union3::F16P, unions.getUnion3().which());'), (78, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (79, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (80, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (81, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (82, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (83, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (84, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (86, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (87, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (88, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (89, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (90, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (91, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (92, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (93, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (95, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (96, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (97, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (98, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (99, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (100, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (101, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (102, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());'), (251, 2, u'-    ASSERT_EQ(2u, sl.getList0().size());'), (252, 2, u'-    ASSERT_EQ(2u, sl.getList1().size());'), (253, 2, u'-    ASSERT_EQ(2u, sl.getList8().size());'), (254, 2, u'-    ASSERT_EQ(2u, sl.getList16().size());'), (255, 2, u'-    ASSERT_EQ(2u, sl.getList32().size());'), (256, 2, u'-    ASSERT_EQ(2u, sl.getList64().size());'), (257, 2, u'-    ASSERT_EQ(2u, sl.getListP().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 2, u'-    ASSERT_EQ(TestInlineUnions::Union0::F32, unions.getUnion0().which());'), (60, 2, u'-    ASSERT_EQ(TestInlineUnions::Union1::F128, unions.getUnion1().which());'), (64, 2, u'-    ASSERT_EQ(TestInlineUnions::Union3::F16P, unions.getUnion3().which());'), (78, 2, u'-    ASSERT_EQ(2u, lists.getVoidList().size());'), (79, 2, u'-    ASSERT_EQ(3u, lists.getBoolList().size());'), (80, 2, u'-    ASSERT_EQ(4u, lists.getUInt8List().size());'), (81, 2, u'-    ASSERT_EQ(5u, lists.getUInt16List().size());'), (82, 2, u'-    ASSERT_EQ(6u, lists.getUInt32List().size());'), (83, 2, u'-    ASSERT_EQ(7u, lists.getUInt64List().size());'), (84, 2, u'-    ASSERT_EQ(8u, lists.getTextList().size());'), (86, 2, u'-    ASSERT_EQ(2u, lists.getStructList0().size());'), (87, 2, u'-    ASSERT_EQ(3u, lists.getStructList1().size());'), (88, 2, u'-    ASSERT_EQ(4u, lists.getStructList8().size());'), (89, 2, u'-    ASSERT_EQ(2u, lists.getStructList16().size());'), (90, 2, u'-    ASSERT_EQ(3u, lists.getStructList32().size());'), (91, 2, u'-    ASSERT_EQ(4u, lists.getStructList64().size());'), (92, 2, u'-    ASSERT_EQ(2u, lists.getStructList128().size());'), (93, 2, u'-    ASSERT_EQ(3u, lists.getStructList192().size());'), (95, 2, u'-    ASSERT_EQ(4u, lists.getStructList0p().size());'), (96, 2, u'-    ASSERT_EQ(2u, lists.getStructList1p().size());'), (97, 2, u'-    ASSERT_EQ(3u, lists.getStructList8p().size());'), (98, 2, u'-    ASSERT_EQ(4u, lists.getStructList16p().size());'), (99, 2, u'-    ASSERT_EQ(2u, lists.getStructList32p().size());'), (100, 2, u'-    ASSERT_EQ(3u, lists.getStructList64p().size());'), (101, 2, u'-    ASSERT_EQ(4u, lists.getStructList128p().size());'), (102, 2, u'-    ASSERT_EQ(2u, lists.getStructList192p().size());'), (251, 2, u'-    ASSERT_EQ(2u, sl.getList0().size());'), (252, 2, u'-    ASSERT_EQ(2u, sl.getList1().size());'), (253, 2, u'-    ASSERT_EQ(2u, sl.getList8().size());'), (254, 2, u'-    ASSERT_EQ(2u, sl.getList16().size());'), (255, 2, u'-    ASSERT_EQ(2u, sl.getList32().size());'), (256, 2, u'-    ASSERT_EQ(2u, sl.getList64().size());'), (257, 2, u'-    ASSERT_EQ(2u, sl.getListP().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (72, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (73, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (74, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (75, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (76, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (77, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (79, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (80, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (81, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (82, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (83, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (84, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (85, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (86, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (88, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (89, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (90, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (91, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (92, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (93, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (94, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (95, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());'), (308, 1, u'+      ASSERT_EQ(3u, l[0].size());'), (309, 1, u'+      ASSERT_EQ(3u, l[1].size());'), (310, 1, u'+      ASSERT_EQ(3u, l[2].size());'), (340, 1, u'+      ASSERT_EQ(2u, l[0][0].size());'), (341, 1, u'+      ASSERT_EQ(2u, l[0][1].size());'), (342, 1, u'+      ASSERT_EQ(2u, l[0][2].size());'), (343, 1, u'+      ASSERT_EQ(2u, l[1][0].size());'), (344, 1, u'+      ASSERT_EQ(2u, l[1][1].size());'), (345, 1, u'+      ASSERT_EQ(2u, l[2][0].size());'), (359, 1, u'+      ASSERT_EQ(5u, l[0][0].size());'), (360, 1, u'+      ASSERT_EQ(5u, l[0][1].size());'), (361, 1, u'+      ASSERT_EQ(5u, l[1][0].size());'), (372, 1, u'+      ASSERT_EQ(3u, l[0][0].size());'), (373, 1, u'+      ASSERT_EQ(3u, l[0][1].size());'), (374, 1, u'+      ASSERT_EQ(3u, l[1][0].size());'), (458, 1, u'+    ASSERT_EQ(TestInlineUnions::Union0::F32, unions.getUnion0().which());'), (462, 1, u'+    ASSERT_EQ(TestInlineUnions::Union1::F128, unions.getUnion1().which());'), (466, 1, u'+    ASSERT_EQ(TestInlineUnions::Union3::F16P, unions.getUnion3().which());'), (476, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (477, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (478, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (479, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (480, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (481, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (482, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (484, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (485, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (486, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (487, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (488, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (489, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (490, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (491, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (493, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (494, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (495, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (496, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (497, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (498, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (499, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (500, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());'), (648, 1, u'+    ASSERT_EQ(2u, sl.getList0().size());'), (649, 1, u'+    ASSERT_EQ(2u, sl.getList1().size());'), (650, 1, u'+    ASSERT_EQ(2u, sl.getList8().size());'), (651, 1, u'+    ASSERT_EQ(2u, sl.getList16().size());'), (652, 1, u'+    ASSERT_EQ(2u, sl.getList32().size());'), (653, 1, u'+    ASSERT_EQ(2u, sl.getList64().size());'), (654, 1, u'+    ASSERT_EQ(2u, sl.getListP().size());'), (677, 1, u'+      ASSERT_EQ(3u, l.size());'), (685, 1, u'+      ASSERT_EQ(3u, l.size());'), (693, 1, u'+      ASSERT_EQ(2u, l.size());'), (695, 1, u'+      ASSERT_EQ(2u, e.size());'), (699, 1, u'+      ASSERT_EQ(1u, e.size());'), (705, 1, u'+      ASSERT_EQ(2u, l.size());'), (712, 1, u'+      ASSERT_EQ(3u, l.size());'), (720, 1, u'+      ASSERT_EQ(3u, l.size());'), (721, 1, u'+      ASSERT_EQ(3u, l[0].size());'), (722, 1, u'+      ASSERT_EQ(3u, l[1].size());'), (723, 1, u'+      ASSERT_EQ(3u, l[2].size());'), (751, 1, u'+      ASSERT_EQ(3u, l.size());'), (753, 1, u'+      ASSERT_EQ(3u, l[0].size());'), (754, 1, u'+      ASSERT_EQ(2u, l[1].size());'), (755, 1, u'+      ASSERT_EQ(1u, l[2].size());'), (757, 1, u'+      ASSERT_EQ(2u, l[0][0].size());'), (758, 1, u'+      ASSERT_EQ(2u, l[0][1].size());'), (759, 1, u'+      ASSERT_EQ(2u, l[0][2].size());'), (760, 1, u'+      ASSERT_EQ(2u, l[1][0].size());'), (761, 1, u'+      ASSERT_EQ(2u, l[1][1].size());'), (762, 1, u'+      ASSERT_EQ(2u, l[2][0].size());'), (774, 1, u'+      ASSERT_EQ(2u, l.size());'), (776, 1, u'+      ASSERT_EQ(2u, l[0].size());'), (777, 1, u'+      ASSERT_EQ(1u, l[1].size());'), (779, 1, u'+      ASSERT_EQ(5u, l[0][0].size());'), (780, 1, u'+      ASSERT_EQ(5u, l[0][1].size());'), (781, 1, u'+      ASSERT_EQ(5u, l[1][0].size());'), (790, 1, u'+      ASSERT_EQ(2u, l.size());'), (792, 1, u'+      ASSERT_EQ(2u, l[0].size());'), (793, 1, u'+      ASSERT_EQ(1u, l[1].size());'), (795, 1, u'+      ASSERT_EQ(3u, l[0][0].size());'), (796, 1, u'+      ASSERT_EQ(3u, l[0][1].size());'), (797, 1, u'+      ASSERT_EQ(3u, l[1][0].size());'), (822, 1, u'+      ASSERT_EQ(2u, l.size());')]
===========================================
===========================================
Total add: 828
Total del: 0
Header: genericCheckTestMessageAllZero
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (72, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (73, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (74, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (75, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (76, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (77, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (79, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (80, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (81, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (82, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (83, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (84, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (85, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (86, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (88, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (89, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (90, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (91, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (92, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (93, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (94, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (95, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());'), (308, 1, u'+      ASSERT_EQ(3u, l[0].size());'), (309, 1, u'+      ASSERT_EQ(3u, l[1].size());'), (310, 1, u'+      ASSERT_EQ(3u, l[2].size());'), (340, 1, u'+      ASSERT_EQ(2u, l[0][0].size());'), (341, 1, u'+      ASSERT_EQ(2u, l[0][1].size());'), (342, 1, u'+      ASSERT_EQ(2u, l[0][2].size());'), (343, 1, u'+      ASSERT_EQ(2u, l[1][0].size());'), (344, 1, u'+      ASSERT_EQ(2u, l[1][1].size());'), (345, 1, u'+      ASSERT_EQ(2u, l[2][0].size());'), (359, 1, u'+      ASSERT_EQ(5u, l[0][0].size());'), (360, 1, u'+      ASSERT_EQ(5u, l[0][1].size());'), (361, 1, u'+      ASSERT_EQ(5u, l[1][0].size());'), (372, 1, u'+      ASSERT_EQ(3u, l[0][0].size());'), (373, 1, u'+      ASSERT_EQ(3u, l[0][1].size());'), (374, 1, u'+      ASSERT_EQ(3u, l[1][0].size());'), (458, 1, u'+    ASSERT_EQ(TestInlineUnions::Union0::F32, unions.getUnion0().which());'), (462, 1, u'+    ASSERT_EQ(TestInlineUnions::Union1::F128, unions.getUnion1().which());'), (466, 1, u'+    ASSERT_EQ(TestInlineUnions::Union3::F16P, unions.getUnion3().which());'), (476, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (477, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (478, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (479, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (480, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (481, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (482, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (484, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (485, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (486, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (487, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (488, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (489, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (490, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (491, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (493, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (494, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (495, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (496, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (497, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (498, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (499, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (500, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());'), (648, 1, u'+    ASSERT_EQ(2u, sl.getList0().size());'), (649, 1, u'+    ASSERT_EQ(2u, sl.getList1().size());'), (650, 1, u'+    ASSERT_EQ(2u, sl.getList8().size());'), (651, 1, u'+    ASSERT_EQ(2u, sl.getList16().size());'), (652, 1, u'+    ASSERT_EQ(2u, sl.getList32().size());'), (653, 1, u'+    ASSERT_EQ(2u, sl.getList64().size());'), (654, 1, u'+    ASSERT_EQ(2u, sl.getListP().size());'), (677, 1, u'+      ASSERT_EQ(3u, l.size());'), (685, 1, u'+      ASSERT_EQ(3u, l.size());'), (693, 1, u'+      ASSERT_EQ(2u, l.size());'), (695, 1, u'+      ASSERT_EQ(2u, e.size());'), (699, 1, u'+      ASSERT_EQ(1u, e.size());'), (705, 1, u'+      ASSERT_EQ(2u, l.size());'), (712, 1, u'+      ASSERT_EQ(3u, l.size());'), (720, 1, u'+      ASSERT_EQ(3u, l.size());'), (721, 1, u'+      ASSERT_EQ(3u, l[0].size());'), (722, 1, u'+      ASSERT_EQ(3u, l[1].size());'), (723, 1, u'+      ASSERT_EQ(3u, l[2].size());'), (751, 1, u'+      ASSERT_EQ(3u, l.size());'), (753, 1, u'+      ASSERT_EQ(3u, l[0].size());'), (754, 1, u'+      ASSERT_EQ(2u, l[1].size());'), (755, 1, u'+      ASSERT_EQ(1u, l[2].size());'), (757, 1, u'+      ASSERT_EQ(2u, l[0][0].size());'), (758, 1, u'+      ASSERT_EQ(2u, l[0][1].size());'), (759, 1, u'+      ASSERT_EQ(2u, l[0][2].size());'), (760, 1, u'+      ASSERT_EQ(2u, l[1][0].size());'), (761, 1, u'+      ASSERT_EQ(2u, l[1][1].size());'), (762, 1, u'+      ASSERT_EQ(2u, l[2][0].size());'), (774, 1, u'+      ASSERT_EQ(2u, l.size());'), (776, 1, u'+      ASSERT_EQ(2u, l[0].size());'), (777, 1, u'+      ASSERT_EQ(1u, l[1].size());'), (779, 1, u'+      ASSERT_EQ(5u, l[0][0].size());'), (780, 1, u'+      ASSERT_EQ(5u, l[0][1].size());'), (781, 1, u'+      ASSERT_EQ(5u, l[1][0].size());'), (790, 1, u'+      ASSERT_EQ(2u, l.size());'), (792, 1, u'+      ASSERT_EQ(2u, l[0].size());'), (793, 1, u'+      ASSERT_EQ(1u, l[1].size());'), (795, 1, u'+      ASSERT_EQ(3u, l[0][0].size());'), (796, 1, u'+      ASSERT_EQ(3u, l[0][1].size());'), (797, 1, u'+      ASSERT_EQ(3u, l[1][0].size());'), (822, 1, u'+      ASSERT_EQ(2u, l.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (72, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (73, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (74, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (75, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (76, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (77, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (79, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (80, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (81, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (82, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (83, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (84, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (85, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (86, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (88, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (89, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (90, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (91, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (92, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (93, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (94, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (95, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());'), (308, 1, u'+      ASSERT_EQ(3u, l[0].size());'), (309, 1, u'+      ASSERT_EQ(3u, l[1].size());'), (310, 1, u'+      ASSERT_EQ(3u, l[2].size());'), (340, 1, u'+      ASSERT_EQ(2u, l[0][0].size());'), (341, 1, u'+      ASSERT_EQ(2u, l[0][1].size());'), (342, 1, u'+      ASSERT_EQ(2u, l[0][2].size());'), (343, 1, u'+      ASSERT_EQ(2u, l[1][0].size());'), (344, 1, u'+      ASSERT_EQ(2u, l[1][1].size());'), (345, 1, u'+      ASSERT_EQ(2u, l[2][0].size());'), (359, 1, u'+      ASSERT_EQ(5u, l[0][0].size());'), (360, 1, u'+      ASSERT_EQ(5u, l[0][1].size());'), (361, 1, u'+      ASSERT_EQ(5u, l[1][0].size());'), (372, 1, u'+      ASSERT_EQ(3u, l[0][0].size());'), (373, 1, u'+      ASSERT_EQ(3u, l[0][1].size());'), (374, 1, u'+      ASSERT_EQ(3u, l[1][0].size());'), (458, 1, u'+    ASSERT_EQ(TestInlineUnions::Union0::F32, unions.getUnion0().which());'), (462, 1, u'+    ASSERT_EQ(TestInlineUnions::Union1::F128, unions.getUnion1().which());'), (466, 1, u'+    ASSERT_EQ(TestInlineUnions::Union3::F16P, unions.getUnion3().which());'), (476, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (477, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (478, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (479, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (480, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (481, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (482, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (484, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (485, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (486, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (487, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (488, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (489, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (490, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (491, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (493, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (494, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (495, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (496, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (497, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (498, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (499, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (500, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());'), (648, 1, u'+    ASSERT_EQ(2u, sl.getList0().size());'), (649, 1, u'+    ASSERT_EQ(2u, sl.getList1().size());'), (650, 1, u'+    ASSERT_EQ(2u, sl.getList8().size());'), (651, 1, u'+    ASSERT_EQ(2u, sl.getList16().size());'), (652, 1, u'+    ASSERT_EQ(2u, sl.getList32().size());'), (653, 1, u'+    ASSERT_EQ(2u, sl.getList64().size());'), (654, 1, u'+    ASSERT_EQ(2u, sl.getListP().size());'), (677, 1, u'+      ASSERT_EQ(3u, l.size());'), (685, 1, u'+      ASSERT_EQ(3u, l.size());'), (693, 1, u'+      ASSERT_EQ(2u, l.size());'), (695, 1, u'+      ASSERT_EQ(2u, e.size());'), (699, 1, u'+      ASSERT_EQ(1u, e.size());'), (705, 1, u'+      ASSERT_EQ(2u, l.size());'), (712, 1, u'+      ASSERT_EQ(3u, l.size());'), (720, 1, u'+      ASSERT_EQ(3u, l.size());'), (721, 1, u'+      ASSERT_EQ(3u, l[0].size());'), (722, 1, u'+      ASSERT_EQ(3u, l[1].size());'), (723, 1, u'+      ASSERT_EQ(3u, l[2].size());'), (751, 1, u'+      ASSERT_EQ(3u, l.size());'), (753, 1, u'+      ASSERT_EQ(3u, l[0].size());'), (754, 1, u'+      ASSERT_EQ(2u, l[1].size());'), (755, 1, u'+      ASSERT_EQ(1u, l[2].size());'), (757, 1, u'+      ASSERT_EQ(2u, l[0][0].size());'), (758, 1, u'+      ASSERT_EQ(2u, l[0][1].size());'), (759, 1, u'+      ASSERT_EQ(2u, l[0][2].size());'), (760, 1, u'+      ASSERT_EQ(2u, l[1][0].size());'), (761, 1, u'+      ASSERT_EQ(2u, l[1][1].size());'), (762, 1, u'+      ASSERT_EQ(2u, l[2][0].size());'), (774, 1, u'+      ASSERT_EQ(2u, l.size());'), (776, 1, u'+      ASSERT_EQ(2u, l[0].size());'), (777, 1, u'+      ASSERT_EQ(1u, l[1].size());'), (779, 1, u'+      ASSERT_EQ(5u, l[0][0].size());'), (780, 1, u'+      ASSERT_EQ(5u, l[0][1].size());'), (781, 1, u'+      ASSERT_EQ(5u, l[1][0].size());'), (790, 1, u'+      ASSERT_EQ(2u, l.size());'), (792, 1, u'+      ASSERT_EQ(2u, l[0].size());'), (793, 1, u'+      ASSERT_EQ(1u, l[1].size());'), (795, 1, u'+      ASSERT_EQ(3u, l[0][0].size());'), (796, 1, u'+      ASSERT_EQ(3u, l[0][1].size());'), (797, 1, u'+      ASSERT_EQ(3u, l[1][0].size());'), (822, 1, u'+      ASSERT_EQ(2u, l.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT_EQ(TestInlineUnions::Union2::F1P, unions.getUnion2().which());')]
===========================================
===========================================
Total add: 0
Total del: 3
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT_EQ(TestInlineUnions::Union2::F1P, unions.getUnion2().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT_EQ(TestInlineUnions::Union2::F1P, unions.getUnion2().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    ASSERT_EQ(2u, sl.getList0().size());'), (7, 1, u'+    ASSERT_EQ(2u, sl.getList1().size());'), (8, 1, u'+    ASSERT_EQ(2u, sl.getList8().size());'), (9, 1, u'+    ASSERT_EQ(2u, sl.getList16().size());'), (10, 1, u'+    ASSERT_EQ(2u, sl.getList32().size());'), (11, 1, u'+    ASSERT_EQ(2u, sl.getList64().size());'), (12, 1, u'+    ASSERT_EQ(2u, sl.getListP().size());')]
===========================================
===========================================
Total add: 68
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    ASSERT_EQ(2u, sl.getList0().size());'), (7, 1, u'+    ASSERT_EQ(2u, sl.getList1().size());'), (8, 1, u'+    ASSERT_EQ(2u, sl.getList8().size());'), (9, 1, u'+    ASSERT_EQ(2u, sl.getList16().size());'), (10, 1, u'+    ASSERT_EQ(2u, sl.getList32().size());'), (11, 1, u'+    ASSERT_EQ(2u, sl.getList64().size());'), (12, 1, u'+    ASSERT_EQ(2u, sl.getListP().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    ASSERT_EQ(2u, sl.getList0().size());'), (7, 1, u'+    ASSERT_EQ(2u, sl.getList1().size());'), (8, 1, u'+    ASSERT_EQ(2u, sl.getList8().size());'), (9, 1, u'+    ASSERT_EQ(2u, sl.getList16().size());'), (10, 1, u'+    ASSERT_EQ(2u, sl.getList32().size());'), (11, 1, u'+    ASSERT_EQ(2u, sl.getList64().size());'), (12, 1, u'+    ASSERT_EQ(2u, sl.getListP().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (7, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (8, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (9, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (10, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (11, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (12, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (14, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (15, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (16, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (17, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (18, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (19, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (20, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (21, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (23, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (24, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (25, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (26, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (27, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (28, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (29, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (30, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
Total add: 178
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (7, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (8, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (9, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (10, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (11, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (12, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (14, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (15, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (16, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (17, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (18, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (19, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (20, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (21, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (23, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (24, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (25, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (26, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (27, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (28, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (29, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (30, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    ASSERT_EQ(2u, lists.getVoidList().size());'), (7, 1, u'+    ASSERT_EQ(3u, lists.getBoolList().size());'), (8, 1, u'+    ASSERT_EQ(4u, lists.getUInt8List().size());'), (9, 1, u'+    ASSERT_EQ(5u, lists.getUInt16List().size());'), (10, 1, u'+    ASSERT_EQ(6u, lists.getUInt32List().size());'), (11, 1, u'+    ASSERT_EQ(7u, lists.getUInt64List().size());'), (12, 1, u'+    ASSERT_EQ(8u, lists.getTextList().size());'), (14, 1, u'+    ASSERT_EQ(2u, lists.getStructList0().size());'), (15, 1, u'+    ASSERT_EQ(3u, lists.getStructList1().size());'), (16, 1, u'+    ASSERT_EQ(4u, lists.getStructList8().size());'), (17, 1, u'+    ASSERT_EQ(2u, lists.getStructList16().size());'), (18, 1, u'+    ASSERT_EQ(3u, lists.getStructList32().size());'), (19, 1, u'+    ASSERT_EQ(4u, lists.getStructList64().size());'), (20, 1, u'+    ASSERT_EQ(2u, lists.getStructList128().size());'), (21, 1, u'+    ASSERT_EQ(3u, lists.getStructList192().size());'), (23, 1, u'+    ASSERT_EQ(4u, lists.getStructList0p().size());'), (24, 1, u'+    ASSERT_EQ(2u, lists.getStructList1p().size());'), (25, 1, u'+    ASSERT_EQ(3u, lists.getStructList8p().size());'), (26, 1, u'+    ASSERT_EQ(4u, lists.getStructList16p().size());'), (27, 1, u'+    ASSERT_EQ(2u, lists.getStructList32p().size());'), (28, 1, u'+    ASSERT_EQ(3u, lists.getStructList64p().size());'), (29, 1, u'+    ASSERT_EQ(4u, lists.getStructList128p().size());'), (30, 1, u'+    ASSERT_EQ(2u, lists.getStructList192p().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(294, 1, u'+    ASSERT_EQ(TestInlineUnions::Union0::F32, unions.getUnion0().which());'), (298, 1, u'+    ASSERT_EQ(TestInlineUnions::Union1::F128, unions.getUnion1().which());'), (302, 1, u'+    ASSERT_EQ(TestInlineUnions::Union2::F1P, unions.getUnion2().which());'), (305, 1, u'+    ASSERT_EQ(TestInlineUnions::Union3::F16P, unions.getUnion3().which());')]
===========================================
===========================================
Total add: 312
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(294, 1, u'+    ASSERT_EQ(TestInlineUnions::Union0::F32, unions.getUnion0().which());'), (298, 1, u'+    ASSERT_EQ(TestInlineUnions::Union1::F128, unions.getUnion1().which());'), (302, 1, u'+    ASSERT_EQ(TestInlineUnions::Union2::F1P, unions.getUnion2().which());'), (305, 1, u'+    ASSERT_EQ(TestInlineUnions::Union3::F16P, unions.getUnion3().which());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(294, 1, u'+    ASSERT_EQ(TestInlineUnions::Union0::F32, unions.getUnion0().which());'), (298, 1, u'+    ASSERT_EQ(TestInlineUnions::Union1::F128, unions.getUnion1().which());'), (302, 1, u'+    ASSERT_EQ(TestInlineUnions::Union2::F1P, unions.getUnion2().which());'), (305, 1, u'+    ASSERT_EQ(TestInlineUnions::Union3::F16P, unions.getUnion3().which());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (14, 1, u'+    ASSERT_EQ(4u, listReader.size());')]
===========================================
===========================================
Total add: 16
Total del: 2
Header: genericCheckTestMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (14, 1, u'+    ASSERT_EQ(4u, listReader.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    ASSERT_EQ(4u, listReader.size());'), (14, 1, u'+    ASSERT_EQ(4u, listReader.size());')]
===========================================
Class: class ThrowingErrorReporter: public ErrorReporter { class ThrowingErrorReporter: public ErrorReporter 
Class: class StderrErrorReporter: public ErrorReporter { class StderrErrorReporter: public ErrorReporter 
Class: class IgnoringErrorReporter: public ErrorReporter { class IgnoringErrorReporter: public ErrorReporter 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: BuilderArena::getSegmentsForOutput
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(segment.size() > 2, "bug");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: initUnion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(segment.size() > 2, "bug");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(segment.size() > 2, "bug");')]
===========================================
Class:class PrematureEofException: public std::exception { class PrematureEofException: public std::exception 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(size <= (size_t)(array.end() - fillPos),')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ArrayOutputStream::write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(size <= (size_t)(array.end() - fillPos),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(size <= (size_t)(array.end() - fillPos),')]
===========================================
Class:class OsException: public std::exception { class OsException: public std::exception 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      CAPNPROTO_ASSERT(n < 0, "write() returned zero.");')]
===========================================
===========================================
Total add: 2
Total del: 10
Header: FdOutputStream::write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      CAPNPROTO_ASSERT(n < 0, "write() returned zero.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      CAPNPROTO_ASSERT(n < 0, "write() returned zero.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-        CAPNPROTO_ASSERT(n < 0, "write() returned zero.");')]
===========================================
===========================================
Total add: 2
Total del: 8
Header: FdOutputStream::write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-        CAPNPROTO_ASSERT(n < 0, "write() returned zero.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-        CAPNPROTO_ASSERT(n < 0, "write() returned zero.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(kind() == FAR,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(kind() == FAR,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(kind() == FAR,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(kind() == FAR,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(kind() == FAR,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(kind() == FAR,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_DEBUG_ASSERT(ec < (1 << 29) * ELEMENTS,')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_DEBUG_ASSERT(ec < (1 << 29) * ELEMENTS,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_DEBUG_ASSERT(ec < (1 << 29) * ELEMENTS,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_DEBUG_ASSERT(wc < (1 << 29) * WORDS,')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_DEBUG_ASSERT(wc < (1 << 29) * WORDS,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_DEBUG_ASSERT(wc < (1 << 29) * WORDS,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            CAPNPROTO_ASSERT(srcTag->kind() == WireReference::STRUCT,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            CAPNPROTO_ASSERT(srcTag->kind() == WireReference::STRUCT,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            CAPNPROTO_ASSERT(srcTag->kind() == WireReference::STRUCT,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_ASSERT(false, "Copy source message contained unexpected kind.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_ASSERT(false, "Copy source message contained unexpected kind.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_ASSERT(false, "Copy source message contained unexpected kind.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->kind() == WireReference::STRUCT,'), (5, 2, u'-      CAPNPROTO_DEBUG_ASSERT('), (9, 2, u'-      CAPNPROTO_DEBUG_ASSERT(')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->kind() == WireReference::STRUCT,'), (5, 2, u'-      CAPNPROTO_DEBUG_ASSERT('), (9, 2, u'-      CAPNPROTO_DEBUG_ASSERT(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->kind() == WireReference::STRUCT,'), (5, 2, u'-      CAPNPROTO_DEBUG_ASSERT('), (9, 2, u'-      CAPNPROTO_DEBUG_ASSERT(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(tag->kind() == WireReference::STRUCT,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(tag->kind() == WireReference::STRUCT,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(tag->kind() == WireReference::STRUCT,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (5, 2, u'-      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (5, 2, u'-      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (5, 2, u'-      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (5, 2, u'-      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (5, 2, u'-      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (5, 2, u'-      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            CAPNPROTO_ASSERT(false, "can\'t get here");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            CAPNPROTO_ASSERT(false, "can\'t get here");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            CAPNPROTO_ASSERT(false, "can\'t get here");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_ASSERT(segment != nullptr, "Trusted message had incompatible list element type.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_ASSERT(segment != nullptr, "Trusted message had incompatible list element type.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_ASSERT(segment != nullptr, "Trusted message had incompatible list element type.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ListBuilder::asReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERTION,')]
===========================================
===========================================
Total add: 10
Total del: 2
Header: operator*
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERTION,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERTION,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+    if (style == ASSERTION && strcmp(code, "false") == 0) {'), (45, 1, u'+      case ASSERTION:')]
===========================================
===========================================
Total add: 44
Total del: 4
Header: makeDescription
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+    if (style == ASSERTION && strcmp(code, "false") == 0) {'), (45, 1, u'+      case ASSERTION:')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+    if (style == ASSERTION && strcmp(code, "false") == 0) {'), (45, 1, u'+      case ASSERTION:')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      case ASSERTION:')]
===========================================
===========================================
Total add: 15
Total del: 4
Header: makeDescription
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      case ASSERTION:')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      case ASSERTION:')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Log::recoverableFaultInternal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Log::fatalFaultInternal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                makeDescription(ASSERTION, condition, 0, macroArgs, argValues)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-void assertionFailure(const char* file, int line, const char* expectation, const char* message) {')]
===========================================
===========================================
Total add: 11
Total del: 3
Header: namespace internal {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-void assertionFailure(const char* file, int line, const char* expectation, const char* message) {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-void assertionFailure(const char* file, int line, const char* expectation, const char* message) {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (6, 2, u'-    CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: MessageBuilder::getRootSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (6, 2, u'-    CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (6, 2, u'-    CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
Class:class ParseException: public std::exception { class ParseException: public std::exception 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(firstSegment.size() > 0, "First segment size must be non-zero.");'), (6, 2, u'-  CAPNPROTO_ASSERT(*reinterpret_cast<uint64_t*>(firstSegment.begin()) == 0,')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: MallocMessageBuilder::MallocMessageBuilder
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(firstSegment.size() > 0, "First segment size must be non-zero.");'), (6, 2, u'-  CAPNPROTO_ASSERT(*reinterpret_cast<uint64_t*>(firstSegment.begin()) == 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(firstSegment.size() > 0, "First segment size must be non-zero.");'), (6, 2, u'-  CAPNPROTO_ASSERT(*reinterpret_cast<uint64_t*>(firstSegment.begin()) == 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MallocMessageBuilder::~MallocMessageBuilder
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_DEBUG_ASSERT(minBytes % sizeof(word) == 0,'), (4, 2, u'-  CAPNPROTO_DEBUG_ASSERT(maxBytes % sizeof(word) == 0,')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_DEBUG_ASSERT(minBytes % sizeof(word) == 0,'), (4, 2, u'-  CAPNPROTO_DEBUG_ASSERT(maxBytes % sizeof(word) == 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_DEBUG_ASSERT(minBytes % sizeof(word) == 0,'), (4, 2, u'-  CAPNPROTO_DEBUG_ASSERT(maxBytes % sizeof(word) == 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(buffer.size() > 0, "Premature end of packed input.");')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(buffer.size() > 0, "Premature end of packed input.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(buffer.size() > 0, "Premature end of packed input.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(buffer.size() > 0, "Premature end of packed input."); \\')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(buffer.size() > 0, "Premature end of packed input."); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(buffer.size() > 0, "Premature end of packed input."); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(runLength <= outEnd - out,')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(runLength <= outEnd - out,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(runLength <= outEnd - out,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(runLength <= outEnd - out,')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(runLength <= outEnd - out,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(runLength <= outEnd - out,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(false, "Can\'t get here.");')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: PackedInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(false, "Can\'t get here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(false, "Can\'t get here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_DEBUG_ASSERT(bytes % sizeof(word) == 0,')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: PackedInputStream::skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_DEBUG_ASSERT(bytes % sizeof(word) == 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_DEBUG_ASSERT(bytes % sizeof(word) == 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: PackedInputStream::skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(runLength <= bytes,')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: PackedInputStream::skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(runLength <= bytes,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(runLength <= bytes,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: PackedInputStream::skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(runLength <= bytes,')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: PackedInputStream::skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(runLength <= bytes,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(runLength <= bytes,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(false, "Can\'t get here.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedInputStream::skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(false, "Can\'t get here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(false, "Can\'t get here.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(false, "Snappy doesn\'t actually call this.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(false, "Snappy doesn\'t actually call this.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(false, "Snappy doesn\'t actually call this.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: SnappyInputStream::refill
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_DEBUG_ASSERT(')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: SnappyOutputStream::SnappyOutputStream
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_DEBUG_ASSERT(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_DEBUG_ASSERT(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(n <= compressedBuffer.size(),')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: SnappyOutputStream::flush
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(n <= compressedBuffer.size(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(n <= compressedBuffer.size(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(segments.size() > 0, "Tried to serialize uninitialized message.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: FlatArrayMessageReader::getSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(segments.size() > 0, "Tried to serialize uninitialized message.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(segments.size() > 0, "Tried to serialize uninitialized message.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_DEBUG_ASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: messageToFlatArray
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_DEBUG_ASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_DEBUG_ASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(segmentCount < 512, "Message has too many segments.");')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: InputStreamMessageReader::InputStreamMessageReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(segmentCount < 512, "Message has too many segments.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(segmentCount < 512, "Message has too many segments.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(totalWords <= options.traversalLimitInWords,')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: InputStreamMessageReader::InputStreamMessageReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(totalWords <= options.traversalLimitInWords,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(totalWords <= options.traversalLimitInWords,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(segments.size() > 0, "Tried to serialize uninitialized message.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: InputStreamMessageReader::getSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(segments.size() > 0, "Tried to serialize uninitialized message.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  CAPNPROTO_ASSERT(segments.size() > 0, "Tried to serialize uninitialized message.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-#define GOOGLE_DCHECK(cond) CAPNPROTO_DEBUG_ASSERT(cond, "Bug in code here.");')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: namespace {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-#define GOOGLE_DCHECK(cond) CAPNPROTO_DEBUG_ASSERT(cond, "Bug in code here.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-#define GOOGLE_DCHECK(cond) CAPNPROTO_DEBUG_ASSERT(cond, "Bug in code here.");')]
===========================================
Class:class MockException 
Class:class MockExceptionCallback: public ExceptionCallback { class MockExceptionCallback: public ExceptionCallback 
Class:class Exception: public std::exception { class Exception: public std::exception 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(108, 1, u'+#define GOOGLE_DCHECK(cond) CAPNPROTO_DEBUG_ASSERT(cond, "Bug in code here.");'), (185, 1, u'+  static_assert(DBL_DIG < 20, "DBL_DIG is too big.");'), (241, 1, u'+  static_assert(FLT_DIG < 10, "FLT_DIG is too big");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  CAPNPROTO_ASSERT(segmentCount < 512, "Message has too many segments.");')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: InputStreamMessageReader::InputStreamMessageReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  CAPNPROTO_ASSERT(segmentCount < 512, "Message has too many segments.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  CAPNPROTO_ASSERT(segmentCount < 512, "Message has too many segments.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  CAPNPROTO_ASSERT(totalWords <= options.traversalLimitInWords,')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: InputStreamMessageReader::InputStreamMessageReader
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  CAPNPROTO_ASSERT(totalWords <= options.traversalLimitInWords,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  CAPNPROTO_ASSERT(totalWords <= options.traversalLimitInWords,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    CAPNPROTO_DEBUG_ASSERT(kind() == FAR,')]
===========================================
===========================================
Total add: 9
Total del: 10
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    CAPNPROTO_DEBUG_ASSERT(kind() == FAR,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    CAPNPROTO_DEBUG_ASSERT(kind() == FAR,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 1, u'+  CAPNPROTO_ASSERT(segment.size() > 2, "bug");')]
===========================================
===========================================
Total add: 145
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 1, u'+  CAPNPROTO_ASSERT(segment.size() > 2, "bug");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 1, u'+  CAPNPROTO_ASSERT(segment.size() > 2, "bug");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  CAPNPROTO_ASSERT(firstSegment.size() > 0, "First segment size must be non-zero.");'), (7, 1, u'+  CAPNPROTO_ASSERT(*reinterpret_cast<uint64_t*>(firstSegment.begin()) == 0,'), (17, 2, u'-      CAPNPROTO_ASSERT(segments[0].begin() == firstSegment,'), (27, 1, u'+        CAPNPROTO_ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
Total add: 23
Total del: 13
Header: MallocMessageBuilder::MallocMessageBuilder
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  CAPNPROTO_ASSERT(firstSegment.size() > 0, "First segment size must be non-zero.");'), (7, 1, u'+  CAPNPROTO_ASSERT(*reinterpret_cast<uint64_t*>(firstSegment.begin()) == 0,'), (17, 2, u'-      CAPNPROTO_ASSERT(segments[0].begin() == firstSegment,'), (27, 1, u'+        CAPNPROTO_ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  CAPNPROTO_ASSERT(firstSegment.size() > 0, "First segment size must be non-zero.");'), (7, 1, u'+  CAPNPROTO_ASSERT(*reinterpret_cast<uint64_t*>(firstSegment.begin()) == 0,'), (17, 2, u'-      CAPNPROTO_ASSERT(segments[0].begin() == firstSegment,'), (27, 1, u'+        CAPNPROTO_ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      CAPNPROTO_DEBUG_ASSERT(')]
===========================================
===========================================
Total add: 0
Total del: 3
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      CAPNPROTO_DEBUG_ASSERT(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      CAPNPROTO_DEBUG_ASSERT(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  static_assert(sizeof(WireReference::structRef.fieldCount) == 1,'), (7, 2, u'-  static_assert(sizeof(WireReference::structRef.dataSize) == 1,'), (8, 1, u'+  static_assert(sizeof(WireReference::structRef.dataSize) == 2,'), (10, 2, u'-  static_assert(sizeof(WireReference::structRef.refCount) == 1,'), (11, 1, u'+  static_assert(sizeof(WireReference::structRef.refCount) == 2,')]
===========================================
===========================================
Total add: 4
Total del: 7
Header: StructBuilder::getDataField
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  static_assert(sizeof(WireReference::structRef.fieldCount) == 1,'), (7, 2, u'-  static_assert(sizeof(WireReference::structRef.dataSize) == 1,'), (8, 1, u'+  static_assert(sizeof(WireReference::structRef.dataSize) == 2,'), (10, 2, u'-  static_assert(sizeof(WireReference::structRef.refCount) == 1,'), (11, 1, u'+  static_assert(sizeof(WireReference::structRef.refCount) == 2,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  static_assert(sizeof(WireReference::structRef.fieldCount) == 1,'), (7, 2, u'-  static_assert(sizeof(WireReference::structRef.dataSize) == 1,'), (8, 1, u'+  static_assert(sizeof(WireReference::structRef.dataSize) == 2,'), (10, 2, u'-  static_assert(sizeof(WireReference::structRef.refCount) == 1,'), (11, 1, u'+  static_assert(sizeof(WireReference::structRef.refCount) == 2,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(181, 1, u'+    ASSERT_EQ(3 * ELEMENTS, list.size());'), (189, 1, u'+    ASSERT_EQ(4 * ELEMENTS, list.size());'), (201, 1, u'+    ASSERT_EQ(5 * ELEMENTS, list.size());'), (204, 1, u'+      ASSERT_EQ((i + 1) * ELEMENTS, element.size());'), (233, 1, u'+    ASSERT_EQ(3 * ELEMENTS, list.size());'), (241, 1, u'+    ASSERT_EQ(4 * ELEMENTS, list.size());'), (254, 1, u'+    ASSERT_EQ(5 * ELEMENTS, list.size());'), (257, 1, u'+      ASSERT_EQ((i + 1) * ELEMENTS, element.size());'), (291, 1, u'+  ASSERT_EQ(1u, segments.size());'), (311, 1, u'+  ASSERT_EQ(15u, segments.size());'), (347, 1, u'+  ASSERT_EQ(6u, segments.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(97, 1, u'+    CAPNPROTO_DEBUG_ASSERT(kind() == FAR,'), (149, 1, u'+        CAPNPROTO_DEBUG_ASSERT(ec < (1 << 29) * ELEMENTS,'), (155, 1, u'+        CAPNPROTO_DEBUG_ASSERT(wc < (1 << 29) * WORDS,'), (171, 1, u'+static_assert(sizeof(WireReference) == sizeof(word),'), (173, 1, u'+static_assert(REFERENCES * WORDS_PER_REFERENCE * BYTES_PER_WORD / BYTES == sizeof(WireReference),'), (175, 1, u'+static_assert(REFERENCES * BYTES_PER_REFERENCE / BYTES == sizeof(WireReference),'), (177, 1, u'+static_assert(REFERENCES * BITS_PER_REFERENCE / BITS_PER_BYTE / BYTES == sizeof(WireReference),'), (184, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");'), (190, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");'), (373, 1, u'+            CAPNPROTO_ASSERT(srcTag->kind() == WireReference::STRUCT,'), (389, 1, u'+        CAPNPROTO_ASSERT(false, "Copy source message contained unexpected kind.");'), (429, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->kind() == WireReference::STRUCT,'), (431, 1, u'+      CAPNPROTO_DEBUG_ASSERT('), (434, 1, u'+      CAPNPROTO_DEBUG_ASSERT('), (437, 1, u'+      CAPNPROTO_DEBUG_ASSERT('), (449, 1, u'+    CAPNPROTO_DEBUG_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,'), (518, 1, u'+      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (525, 1, u'+      CAPNPROTO_ASSERT(tag->kind() == WireReference::STRUCT,'), (566, 1, u'+      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (568, 1, u'+      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,'), (603, 1, u'+      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (605, 1, u'+      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,'), (829, 1, u'+            CAPNPROTO_ASSERT(false, "can\'t get here");'), (836, 1, u'+        CAPNPROTO_ASSERT(segment != nullptr, "Trusted message had incompatible list element type.");'), (1013, 1, u'+  static_assert(sizeof(WireReference::structRef.fieldCount) == 1,'), (1015, 1, u'+  static_assert(sizeof(WireReference::structRef.dataSize) == 1,'), (1017, 1, u'+  static_assert(sizeof(WireReference::structRef.refCount) == 1,'), (1119, 1, u'+  CAPNPROTO_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(181, 2, u'-    ASSERT_EQ(3 * ELEMENTS, list.size());'), (189, 2, u'-    ASSERT_EQ(4 * ELEMENTS, list.size());'), (201, 2, u'-    ASSERT_EQ(5 * ELEMENTS, list.size());'), (204, 2, u'-      ASSERT_EQ((i + 1) * ELEMENTS, element.size());'), (233, 2, u'-    ASSERT_EQ(3 * ELEMENTS, list.size());'), (241, 2, u'-    ASSERT_EQ(4 * ELEMENTS, list.size());'), (254, 2, u'-    ASSERT_EQ(5 * ELEMENTS, list.size());'), (257, 2, u'-      ASSERT_EQ((i + 1) * ELEMENTS, element.size());'), (291, 2, u'-  ASSERT_EQ(1u, segments.size());'), (311, 2, u'-  ASSERT_EQ(15u, segments.size());'), (347, 2, u'-  ASSERT_EQ(6u, segments.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(97, 2, u'-    CAPNPROTO_DEBUG_ASSERT(kind() == FAR,'), (149, 2, u'-        CAPNPROTO_DEBUG_ASSERT(ec < (1 << 29) * ELEMENTS,'), (155, 2, u'-        CAPNPROTO_DEBUG_ASSERT(wc < (1 << 29) * WORDS,'), (171, 2, u'-static_assert(sizeof(WireReference) == sizeof(word),'), (173, 2, u'-static_assert(REFERENCES * WORDS_PER_REFERENCE * BYTES_PER_WORD / BYTES == sizeof(WireReference),'), (175, 2, u'-static_assert(REFERENCES * BYTES_PER_REFERENCE / BYTES == sizeof(WireReference),'), (177, 2, u'-static_assert(REFERENCES * BITS_PER_REFERENCE / BITS_PER_BYTE / BYTES == sizeof(WireReference),'), (184, 2, u'-    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");'), (190, 2, u'-    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");'), (373, 2, u'-            CAPNPROTO_ASSERT(srcTag->kind() == WireReference::STRUCT,'), (389, 2, u'-        CAPNPROTO_ASSERT(false, "Copy source message contained unexpected kind.");'), (429, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->kind() == WireReference::STRUCT,'), (431, 2, u'-      CAPNPROTO_DEBUG_ASSERT('), (434, 2, u'-      CAPNPROTO_DEBUG_ASSERT('), (437, 2, u'-      CAPNPROTO_DEBUG_ASSERT('), (449, 2, u'-    CAPNPROTO_DEBUG_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,'), (518, 2, u'-      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (525, 2, u'-      CAPNPROTO_ASSERT(tag->kind() == WireReference::STRUCT,'), (566, 2, u'-      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (568, 2, u'-      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,'), (603, 2, u'-      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (605, 2, u'-      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,'), (829, 2, u'-            CAPNPROTO_ASSERT(false, "can\'t get here");'), (836, 2, u'-        CAPNPROTO_ASSERT(segment != nullptr, "Trusted message had incompatible list element type.");'), (1013, 2, u'-  static_assert(sizeof(WireReference::structRef.fieldCount) == 1,'), (1015, 2, u'-  static_assert(sizeof(WireReference::structRef.dataSize) == 1,'), (1017, 2, u'-  static_assert(sizeof(WireReference::structRef.refCount) == 1,'), (1119, 2, u'-  CAPNPROTO_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,')]
===========================================
Class:class PrematureEofException: public std::exception { class PrematureEofException: public std::exception 
Class:   class OsException: public std::exception { class OsException: public std::exception 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(230, 1, u'+    CAPNPROTO_ASSERT(size <= (size_t)(array.end() - fillPos),'), (304, 1, u'+      CAPNPROTO_ASSERT(n < 0, "write() returned zero.");'), (338, 1, u'+        CAPNPROTO_ASSERT(n < 0, "write() returned zero.");')]
===========================================
Class:class TestPipe: public BufferedInputStream, public OutputStream { class TestPipe: public BufferedInputStream, public OutputStream 
Class:class TestMessageBuilder: public MallocMessageBuilder { class TestMessageBuilder: public MallocMessageBuilder 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+    CAPNPROTO_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");'), (71, 1, u'+    CAPNPROTO_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+  CAPNPROTO_DEBUG_ASSERT(minBytes % sizeof(word) == 0,'), (44, 1, u'+  CAPNPROTO_DEBUG_ASSERT(maxBytes % sizeof(word) == 0,'), (52, 1, u'+  CAPNPROTO_ASSERT(buffer.size() > 0, "Premature end of packed input.");'), (58, 1, u'+  CAPNPROTO_ASSERT(buffer.size() > 0, "Premature end of packed input."); \\'), (67, 1, u'+    CAPNPROTO_DEBUG_ASSERT((out - reinterpret_cast<uint8_t*>(dst)) % sizeof(word) == 0,'), (123, 1, u'+      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,'), (128, 1, u'+      CAPNPROTO_ASSERT(runLength <= outEnd - out,'), (134, 1, u'+      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,'), (139, 1, u'+      CAPNPROTO_ASSERT(runLength <= outEnd - out,'), (176, 1, u'+  CAPNPROTO_ASSERT(false, "Can\'t get here.");'), (187, 1, u'+  CAPNPROTO_DEBUG_ASSERT(bytes % sizeof(word) == 0,'), (240, 1, u'+      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,'), (245, 1, u'+      CAPNPROTO_ASSERT(runLength <= bytes,'), (251, 1, u'+      CAPNPROTO_DEBUG_ASSERT(BUFFER_REMAINING > 0,'), (256, 1, u'+      CAPNPROTO_ASSERT(runLength <= bytes,'), (288, 1, u'+  CAPNPROTO_ASSERT(false, "Can\'t get here.");')]
===========================================
Class:class TestPipe: public InputStream, public OutputStream { class TestPipe: public InputStream, public OutputStream 
Class:class TestPipe: public BufferedInputStream, public OutputStream { class TestPipe: public BufferedInputStream, public OutputStream 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    CAPNPROTO_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
Total add: 11
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    CAPNPROTO_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    CAPNPROTO_ASSERT(bytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
Class:class InputStreamSource: public snappy::Source { class InputStreamSource: public snappy::Source 
Class:class SnappyInputStream::InputStreamSnappySource: public snappy::Source { class SnappyInputStream::InputStreamSnappySource: public snappy::Source 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    CAPNPROTO_ASSERT(snappy::GetUncompressedLength(buffer, firstSize, &uncompressedSize),')]
===========================================
===========================================
Total add: 4
Total del: 20
Header: namespace capnproto {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    CAPNPROTO_ASSERT(snappy::GetUncompressedLength(buffer, firstSize, &uncompressedSize),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    CAPNPROTO_ASSERT(snappy::GetUncompressedLength(buffer, firstSize, &uncompressedSize),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    CAPNPROTO_ASSERT(false, "Snappy doesn\'t actually call this.");')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    CAPNPROTO_ASSERT(false, "Snappy doesn\'t actually call this.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    CAPNPROTO_ASSERT(false, "Snappy doesn\'t actually call this.");')]
===========================================
Class:class SegmentArraySource: public snappy::Source { class SegmentArraySource: public snappy::Source 
Class:class AccumulatingSink: public snappy::Sink { class AccumulatingSink: public snappy::Sink 
Class:class SnappyOutputStream: public OutputStream { class SnappyOutputStream: public OutputStream 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-  CAPNPROTO_ASSERT(source.getUncompressedSize() % sizeof(word) == 0,'), (36, 2, u'-  CAPNPROTO_ASSERT('), (190, 1, u'+  CAPNPROTO_ASSERT('), (209, 1, u'+  CAPNPROTO_DEBUG_ASSERT('), (270, 1, u'+    CAPNPROTO_ASSERT(n <= compressedBuffer.size(),'), (277, 2, u'-    CAPNPROTO_ASSERT(false, "writeMessage() was not expected to call this.");'), (283, 2, u'-    CAPNPROTO_ASSERT(!sawWrite, "writeMessage() was expected to issue exactly one write.");')]
===========================================
===========================================
Total add: 110
Total del: 188
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-  CAPNPROTO_ASSERT(source.getUncompressedSize() % sizeof(word) == 0,'), (36, 2, u'-  CAPNPROTO_ASSERT('), (190, 1, u'+  CAPNPROTO_ASSERT('), (209, 1, u'+  CAPNPROTO_DEBUG_ASSERT('), (270, 1, u'+    CAPNPROTO_ASSERT(n <= compressedBuffer.size(),'), (277, 2, u'-    CAPNPROTO_ASSERT(false, "writeMessage() was not expected to call this.");'), (283, 2, u'-    CAPNPROTO_ASSERT(!sawWrite, "writeMessage() was expected to issue exactly one write.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-  CAPNPROTO_ASSERT(source.getUncompressedSize() % sizeof(word) == 0,'), (36, 2, u'-  CAPNPROTO_ASSERT('), (190, 1, u'+  CAPNPROTO_ASSERT('), (209, 1, u'+  CAPNPROTO_DEBUG_ASSERT('), (270, 1, u'+    CAPNPROTO_ASSERT(n <= compressedBuffer.size(),'), (277, 2, u'-    CAPNPROTO_ASSERT(false, "writeMessage() was not expected to call this.");'), (283, 2, u'-    CAPNPROTO_ASSERT(!sawWrite, "writeMessage() was expected to issue exactly one write.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  CAPNPROTO_ASSERT(segments.size() > 0, "Tried to serialize uninitialized message.");')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: FlatArrayMessageReader::getSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  CAPNPROTO_ASSERT(segments.size() > 0, "Tried to serialize uninitialized message.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  CAPNPROTO_ASSERT(segments.size() > 0, "Tried to serialize uninitialized message.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  CAPNPROTO_ASSERT(segments.size() > 0, "Tried to serialize uninitialized message.");')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: InputStreamMessageReader::getSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  CAPNPROTO_ASSERT(segments.size() > 0, "Tried to serialize uninitialized message.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  CAPNPROTO_ASSERT(segments.size() > 0, "Tried to serialize uninitialized message.");')]
===========================================
Class: class OsException: public std::exception { class OsException: public std::exception 
Class: class PrematureEofException: public std::exception { class PrematureEofException: public std::exception 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(78, 2, u'-      CAPNPROTO_ASSERT(n < 0, "write() returned zero.");'), (112, 2, u'-        CAPNPROTO_ASSERT(n < 0, "write() returned zero.");')]
===========================================
===========================================
Total add: 0
Total del: 127
Header: writeMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(78, 2, u'-      CAPNPROTO_ASSERT(n < 0, "write() returned zero.");'), (112, 2, u'-        CAPNPROTO_ASSERT(n < 0, "write() returned zero.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(78, 2, u'-      CAPNPROTO_ASSERT(n < 0, "write() returned zero.");'), (112, 2, u'-        CAPNPROTO_ASSERT(n < 0, "write() returned zero.");')]
===========================================
Class:class ExpressionTestCase { class ExpressionTestCase 
Class:class ExpressionTestCase { class ExpressionTestCase 
Class:class CatRankTestCase { class CatRankTestCase 
Class:class CarSalesTestCase { class CarSalesTestCase 
Class:class ExpressionTestCase { class ExpressionTestCase 
Class:class CatRankTestCase { class CatRankTestCase 
Class:class CarSalesTestCase { class CarSalesTestCase 
Class:class Gain { class Gain 
Class:class CarSalesTestCase { class CarSalesTestCase 
Class:class CatRankTestCase { class CatRankTestCase 
Class:class ExpressionTestCase { class ExpressionTestCase 
Class:class CarSalesTestCase { class CarSalesTestCase 
Class:class CatRankTestCase { class CatRankTestCase 
Class:class ExpressionTestCase { class ExpressionTestCase 
Class:class CarSalesTestCase { class CarSalesTestCase 
Class:class CatRankTestCase { class CatRankTestCase 
Class:class ExpressionTestCase { class ExpressionTestCase 
Class:class Gain { class Gain 
Class:template <typename T> class ProducerConsumerQueue { class ProducerConsumerQueue 
Class: class OsException: public std::exception { class OsException: public std::exception 
Class:template <typename T> class ProducerConsumerQueue { class ProducerConsumerQueue 
Class: class OsException: public std::exception { class OsException: public std::exception 
Class: class CarSalesTestCase { class CarSalesTestCase 
Class: class CarSalesTestCase { class CarSalesTestCase 
Class: class CarSalesTestCase { class CarSalesTestCase 
Class:   class ObjectSizeCounter {   class ObjectSizeCounter 
Class:   class ObjectSizeCounter {   class ObjectSizeCounter 
Class:class ExpressionTestCase { class ExpressionTestCase 
Class:class CatRankTestCase { class CatRankTestCase 
Class:class Gain { class Gain 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      CAPNPROTO_ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
Total add: 10
Total del: 1
Header: MallocMessageBuilder::MallocMessageBuilder
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      CAPNPROTO_ASSERT(segments[0].begin() == firstSegment,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      CAPNPROTO_ASSERT(segments[0].begin() == firstSegment,')]
===========================================
Class: class CatRankTestCase { class CatRankTestCase 
Class: class CatRankTestCase { class CatRankTestCase 
Class:class CountingOutputStream: public FdOutputStream { class CountingOutputStream: public FdOutputStream 
Class:  class MessageReader: public StreamFdMessageReader {   class MessageReader: public StreamFdMessageReader 
Class:  class MessageReader: public Compression::MessageReader {   class MessageReader: public Compression::MessageReader 
Class:  class MessageReader: public StreamFdMessageReader {   class MessageReader: public StreamFdMessageReader 
Class:  class MessageReader: public Compression::MessageReader {   class MessageReader: public Compression::MessageReader 
Class:class TestMessageBuilder: public MallocMessageBuilder { class TestMessageBuilder: public MallocMessageBuilder 
Class:class TestPipe: public InputStream, public OutputStream { class TestPipe: public InputStream, public OutputStream 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(77, 1, u'+    CAPNPROTO_ASSERT(maxBytes <= data.size() - readPos, "Overran end of stream.");')]
===========================================
Class:class InputStreamSource: public snappy::Source { class InputStreamSource: public snappy::Source 
Class:class SegmentArraySource: public snappy::Source { class SegmentArraySource: public snappy::Source 
Class: class AccumulatingSink: public snappy::Sink { class AccumulatingSink: public snappy::Sink 
Class: class SnappyOutputStream: public OutputStream { class SnappyOutputStream: public OutputStream 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+    CAPNPROTO_ASSERT(snappy::GetUncompressedLength(buffer, firstSize, &uncompressedSize),'), (96, 1, u'+  CAPNPROTO_ASSERT(source.getUncompressedSize() % sizeof(word) == 0,'), (105, 1, u'+  CAPNPROTO_ASSERT('), (274, 1, u'+    CAPNPROTO_ASSERT(false, "writeMessage() was not expected to call this.");'), (278, 1, u'+    CAPNPROTO_ASSERT(!sawWrite, "writeMessage() was expected to issue exactly one write.");')]
===========================================
Class:  class MessageReader: public StreamFdMessageReader {   class MessageReader: public StreamFdMessageReader 
Class:   class MessageBuilder: public MallocMessageBuilder {   class MessageBuilder: public MallocMessageBuilder 
Class:  class MessageReader: public StreamFdMessageReader {   class MessageReader: public StreamFdMessageReader 
Class:   class MessageBuilder: public MallocMessageBuilder {   class MessageBuilder: public MallocMessageBuilder 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (9, 2, u'-  CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),'), (14, 1, u'+    CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (17, 1, u'+    CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Total add: 9
Total del: 9
Header: MessageBuilder::allocateRootSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (9, 2, u'-  CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),'), (14, 1, u'+    CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (17, 1, u'+    CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (9, 2, u'-  CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),'), (14, 1, u'+    CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (17, 1, u'+    CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+    CAPNPROTO_ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");')]
===========================================
===========================================
Total add: 9
Total del: 11
Header: class TestInputStream: public InputStream {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+    CAPNPROTO_ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+    CAPNPROTO_ASSERT(maxBytes <= size_t(end - pos), "Overran end of stream.");')]
===========================================
Class:class TestInputFile: public InputFile { class TestInputFile: public InputFile 
Class: class PrematureEofException: public std::exception { class PrematureEofException: public std::exception 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+      CAPNPROTO_ASSERT(n < 0, "write() returned zero.");'), (68, 1, u'+        CAPNPROTO_ASSERT(n < 0, "write() returned zero.");')]
===========================================
===========================================
Total add: 38
Total del: 26
Header: FdInputStream::read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+      CAPNPROTO_ASSERT(n < 0, "write() returned zero.");'), (68, 1, u'+        CAPNPROTO_ASSERT(n < 0, "write() returned zero.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+      CAPNPROTO_ASSERT(n < 0, "write() returned zero.");'), (68, 1, u'+        CAPNPROTO_ASSERT(n < 0, "write() returned zero.");')]
===========================================
Class:class ProducerConsumerQueue { class ProducerConsumerQueue 
Class:class ProducerConsumerQueue { class ProducerConsumerQueue 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (8, 2, u'-    CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),'), (15, 1, u'+  CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (18, 1, u'+  CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Total add: 9
Total del: 9
Header: MessageBuilder::getRootSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (8, 2, u'-    CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),'), (15, 1, u'+  CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (18, 1, u'+  CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (8, 2, u'-    CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),'), (15, 1, u'+  CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (18, 1, u'+  CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(89, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (97, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (105, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (167, 2, u'-      ASSERT_EQ(3u, listReader.size());'), (191, 2, u'-    ASSERT_EQ(3u, listReader.size());')]
===========================================
===========================================
Total add: 0
Total del: 196
Header: namespace {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(89, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (97, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (105, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (167, 2, u'-      ASSERT_EQ(3u, listReader.size());'), (191, 2, u'-    ASSERT_EQ(3u, listReader.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(89, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (97, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (105, 2, u'-  ASSERT_EQ(expected.size(), reader.size());'), (167, 2, u'-      ASSERT_EQ(3u, listReader.size());'), (191, 2, u'-    ASSERT_EQ(3u, listReader.size());')]
===========================================
Class:class TestMessageBuilder: public MallocMessageBuilder { class TestMessageBuilder: public MallocMessageBuilder 
Class:class TestInputStream: public InputStream { class TestInputStream: public InputStream 
Class:class TestInputFile: public InputFile { class TestInputFile: public InputFile 
Class: class TestOutputStream: public OutputStream { class TestOutputStream: public OutputStream 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(342, 1, u'+  ASSERT_GE(tmpfile.get(), 0);')]
===========================================
Class:class OsException: public std::exception { class OsException: public std::exception 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(122, 1, u'+  CAPNPROTO_DEBUG_ASSERT(dst == result.end(), "Buffer overrun/underrun bug in code above.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(119, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (127, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (135, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (197, 1, u'+      ASSERT_EQ(3u, listReader.size());'), (221, 1, u'+    ASSERT_EQ(3u, listReader.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    static_assert(sizeof(internal::ReaderArena) <= sizeof(arenaSpace),'), (44, 1, u'+    static_assert(sizeof(internal::BuilderArena) <= sizeof(arenaSpace),'), (52, 1, u'+    CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (55, 1, u'+    CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Total add: 80
Total del: 2
Header: namespace capnproto {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    static_assert(sizeof(internal::ReaderArena) <= sizeof(arenaSpace),'), (44, 1, u'+    static_assert(sizeof(internal::BuilderArena) <= sizeof(arenaSpace),'), (52, 1, u'+    CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (55, 1, u'+    CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    static_assert(sizeof(internal::ReaderArena) <= sizeof(arenaSpace),'), (44, 1, u'+    static_assert(sizeof(internal::BuilderArena) <= sizeof(arenaSpace),'), (52, 1, u'+    CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (55, 1, u'+    CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
Class:class DefaultReaderContext: public ReaderContext { class DefaultReaderContext: public ReaderContext 
Class:class ThrowingErrorReporter: public ErrorReporter { class ThrowingErrorReporter: public ErrorReporter 
Class:class DefaultBuilderContext: public BuilderContext { class DefaultBuilderContext: public BuilderContext 
Class:class StderrErrorReporter: public ErrorReporter { class StderrErrorReporter: public ErrorReporter 
Class:class IgnoringErrorReporter: public ErrorReporter { class IgnoringErrorReporter: public ErrorReporter 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  static_assert(sizeof(ReaderArena) <= sizeof(arenaSpace),'), (20, 2, u'-  static_assert(sizeof(ReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Total add: 8
Total del: 29
Header: newFixedWidthBuilderContext
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  static_assert(sizeof(ReaderArena) <= sizeof(arenaSpace),'), (20, 2, u'-  static_assert(sizeof(ReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  static_assert(sizeof(ReaderArena) <= sizeof(arenaSpace),'), (20, 2, u'-  static_assert(sizeof(ReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  static_assert(sizeof(BuilderArena) <= sizeof(arenaSpace),'), (16, 2, u'-  static_assert(sizeof(BuilderArena) <= sizeof(arenaSpace),'), (71, 2, u'-  CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (74, 2, u'-  CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Total add: 32
Total del: 37
Header: MessageImpl::Reader::getRoot
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  static_assert(sizeof(BuilderArena) <= sizeof(arenaSpace),'), (16, 2, u'-  static_assert(sizeof(BuilderArena) <= sizeof(arenaSpace),'), (71, 2, u'-  CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (74, 2, u'-  CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  static_assert(sizeof(BuilderArena) <= sizeof(arenaSpace),'), (16, 2, u'-  static_assert(sizeof(BuilderArena) <= sizeof(arenaSpace),'), (71, 2, u'-  CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (74, 2, u'-  CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+    CAPNPROTO_DEBUG_ASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
===========================================
Total add: 27
Total del: 5
Header: BuilderArena::getSegmentWithAvailable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+    CAPNPROTO_DEBUG_ASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+    CAPNPROTO_DEBUG_ASSERT(moreSegments->forOutput.size() == moreSegments->builders.size() + 1,')]
===========================================
Class:class ParseException: public std::exception { class ParseException: public std::exception 
Class: class DefaultReaderContext: public ReaderContext { class DefaultReaderContext: public ReaderContext 
Class:class ParseException: public std::exception { class ParseException: public std::exception 
Class:class DefaultBuilderContext: public BuilderContext { class DefaultBuilderContext: public BuilderContext 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(sizeof(ReaderArena) <= sizeof(arenaSpace),'), (19, 1, u'+  static_assert(sizeof(ReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Total add: 22
Total del: 6
Header: namespace internal {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(sizeof(ReaderArena) <= sizeof(arenaSpace),'), (19, 1, u'+  static_assert(sizeof(ReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(sizeof(ReaderArena) <= sizeof(arenaSpace),'), (19, 1, u'+  static_assert(sizeof(ReaderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+  static_assert(sizeof(BuilderArena) <= sizeof(arenaSpace),'), (19, 1, u'+  static_assert(sizeof(BuilderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Total add: 20
Total del: 7
Header: MessageImpl::Reader::getRoot
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+  static_assert(sizeof(BuilderArena) <= sizeof(arenaSpace),'), (19, 1, u'+  static_assert(sizeof(BuilderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+  static_assert(sizeof(BuilderArena) <= sizeof(arenaSpace),'), (19, 1, u'+  static_assert(sizeof(BuilderArena) <= sizeof(arenaSpace),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  ASSERT_EQ(1u, builder.getSegmentsForOutput().size());')]
===========================================
===========================================
Total add: 13
Total del: 4
Header: checkMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  ASSERT_EQ(1u, builder.getSegmentsForOutput().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  ASSERT_EQ(1u, builder.getSegmentsForOutput().size());')]
===========================================
Class:class MallocMessage: public MessageBuilder { class MallocMessage: public MessageBuilder 
Class: class ParseException: public std::exception { class ParseException: public std::exception 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+  CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (48, 1, u'+  CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Total add: 24
Total del: 19
Header: MallocMessage::tryGetSegment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+  CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (48, 1, u'+  CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+  CAPNPROTO_ASSERT(segment->getSegmentId() == SegmentId(0),'), (48, 1, u'+  CAPNPROTO_ASSERT(location == segment->getPtrUnchecked(0 * WORDS),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT_EQ(1u, segments.size());')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT_EQ(1u, segments.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT_EQ(1u, segments.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(message->tryGetSegment(SegmentId(14)) != nullptr);'), (5, 1, u'+  ASSERT_EQ(15u, segments.size());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(message->tryGetSegment(SegmentId(14)) != nullptr);'), (5, 1, u'+  ASSERT_EQ(15u, segments.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(message->tryGetSegment(SegmentId(14)) != nullptr);'), (5, 1, u'+  ASSERT_EQ(15u, segments.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(message->tryGetSegment(SegmentId(5)) != nullptr);'), (5, 1, u'+  ASSERT_EQ(6u, segments.size());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(message->tryGetSegment(SegmentId(5)) != nullptr);'), (5, 1, u'+  ASSERT_EQ(6u, segments.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(message->tryGetSegment(SegmentId(5)) != nullptr);'), (5, 1, u'+  ASSERT_EQ(6u, segments.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  ASSERT_EQ(0u, builder.getNums().size());'), (38, 2, u'-    ASSERT_EQ(5u, listBuilder.size());')]
===========================================
===========================================
Total add: 56
Total del: 36
Header: namespace {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  ASSERT_EQ(0u, builder.getNums().size());'), (38, 2, u'-    ASSERT_EQ(5u, listBuilder.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  ASSERT_EQ(0u, builder.getNums().size());'), (38, 2, u'-    ASSERT_EQ(5u, listBuilder.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    ASSERT_EQ(3u, structListBuilder.size());'), (32, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (43, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (58, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (82, 2, u'-    ASSERT_EQ(3u, structListBuilder.size());'), (130, 1, u'+      ASSERT_EQ(3u, listReader.size());')]
===========================================
===========================================
Total add: 97
Total del: 25
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    ASSERT_EQ(3u, structListBuilder.size());'), (32, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (43, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (58, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (82, 2, u'-    ASSERT_EQ(3u, structListBuilder.size());'), (130, 1, u'+      ASSERT_EQ(3u, listReader.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    ASSERT_EQ(3u, structListBuilder.size());'), (32, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (43, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (58, 1, u'+  ASSERT_EQ(expected.size(), reader.size());'), (82, 2, u'-    ASSERT_EQ(3u, structListBuilder.size());'), (130, 1, u'+      ASSERT_EQ(3u, listReader.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    ASSERT_EQ(2u, listListBuilder.size());'), (7, 2, u'-    ASSERT_EQ(2u, sublist.size());'), (12, 2, u'-    ASSERT_EQ(4u, sublist.size());'), (35, 2, u'-    ASSERT_EQ(2u, listListBuilder.size());'), (38, 2, u'-    ASSERT_EQ(2u, sublist.size());'), (43, 2, u'-    ASSERT_EQ(4u, sublist.size());'), (49, 1, u'+    ASSERT_EQ(3u, listReader.size());'), (81, 2, u'-    ASSERT_EQ(5u, listReader.size());'), (105, 2, u'-    ASSERT_EQ(3u, structListReader.size());'), (129, 2, u'-    ASSERT_EQ(2u, listListReader.size());'), (132, 2, u'-    ASSERT_EQ(2u, sublist.size());'), (137, 2, u'-    ASSERT_EQ(4u, sublist.size());'), (148, 2, u'-    ASSERT_EQ(2u, listListReader.size());'), (151, 2, u'-    ASSERT_EQ(2u, sublist.size());'), (156, 2, u'-    ASSERT_EQ(4u, sublist.size());')]
===========================================
===========================================
Total add: 62
Total del: 104
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    ASSERT_EQ(2u, listListBuilder.size());'), (7, 2, u'-    ASSERT_EQ(2u, sublist.size());'), (12, 2, u'-    ASSERT_EQ(4u, sublist.size());'), (35, 2, u'-    ASSERT_EQ(2u, listListBuilder.size());'), (38, 2, u'-    ASSERT_EQ(2u, sublist.size());'), (43, 2, u'-    ASSERT_EQ(4u, sublist.size());'), (49, 1, u'+    ASSERT_EQ(3u, listReader.size());'), (81, 2, u'-    ASSERT_EQ(5u, listReader.size());'), (105, 2, u'-    ASSERT_EQ(3u, structListReader.size());'), (129, 2, u'-    ASSERT_EQ(2u, listListReader.size());'), (132, 2, u'-    ASSERT_EQ(2u, sublist.size());'), (137, 2, u'-    ASSERT_EQ(4u, sublist.size());'), (148, 2, u'-    ASSERT_EQ(2u, listListReader.size());'), (151, 2, u'-    ASSERT_EQ(2u, sublist.size());'), (156, 2, u'-    ASSERT_EQ(4u, sublist.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    ASSERT_EQ(2u, listListBuilder.size());'), (7, 2, u'-    ASSERT_EQ(2u, sublist.size());'), (12, 2, u'-    ASSERT_EQ(4u, sublist.size());'), (35, 2, u'-    ASSERT_EQ(2u, listListBuilder.size());'), (38, 2, u'-    ASSERT_EQ(2u, sublist.size());'), (43, 2, u'-    ASSERT_EQ(4u, sublist.size());'), (49, 1, u'+    ASSERT_EQ(3u, listReader.size());'), (81, 2, u'-    ASSERT_EQ(5u, listReader.size());'), (105, 2, u'-    ASSERT_EQ(3u, structListReader.size());'), (129, 2, u'-    ASSERT_EQ(2u, listListReader.size());'), (132, 2, u'-    ASSERT_EQ(2u, sublist.size());'), (137, 2, u'-    ASSERT_EQ(4u, sublist.size());'), (148, 2, u'-    ASSERT_EQ(2u, listListReader.size());'), (151, 2, u'-    ASSERT_EQ(2u, sublist.size());'), (156, 2, u'-    ASSERT_EQ(4u, sublist.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (34, 1, u'+      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,'), (69, 1, u'+      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (71, 1, u'+      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,')]
===========================================
===========================================
Total add: 76
Total del: 0
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (34, 1, u'+      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,'), (69, 1, u'+      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (71, 1, u'+      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (34, 1, u'+      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,'), (69, 1, u'+      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,'), (71, 1, u'+      CAPNPROTO_ASSERT(ref->listRef.elementSize() == FieldSize::BYTE,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(0, builder.getNums().size());'), (3, 1, u'+  ASSERT_EQ(0u, builder.getNums().size());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(0, builder.getNums().size());'), (3, 1, u'+  ASSERT_EQ(0u, builder.getNums().size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(0, builder.getNums().size());'), (3, 1, u'+  ASSERT_EQ(0u, builder.getNums().size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_EQ(5, listBuilder.size());'), (11, 1, u'+    ASSERT_EQ(5u, listBuilder.size());'), (35, 1, u'+    ASSERT_EQ(3u, structListBuilder.size());'), (59, 1, u'+    ASSERT_EQ(3u, structListBuilder.size());'), (77, 1, u'+    ASSERT_EQ(2u, listListBuilder.size());'), (80, 1, u'+    ASSERT_EQ(2u, sublist.size());'), (85, 1, u'+    ASSERT_EQ(4u, sublist.size());'), (94, 1, u'+    ASSERT_EQ(2u, listListBuilder.size());'), (97, 1, u'+    ASSERT_EQ(2u, sublist.size());'), (102, 1, u'+    ASSERT_EQ(4u, sublist.size());')]
===========================================
===========================================
Total add: 91
Total del: 11
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_EQ(5, listBuilder.size());'), (11, 1, u'+    ASSERT_EQ(5u, listBuilder.size());'), (35, 1, u'+    ASSERT_EQ(3u, structListBuilder.size());'), (59, 1, u'+    ASSERT_EQ(3u, structListBuilder.size());'), (77, 1, u'+    ASSERT_EQ(2u, listListBuilder.size());'), (80, 1, u'+    ASSERT_EQ(2u, sublist.size());'), (85, 1, u'+    ASSERT_EQ(4u, sublist.size());'), (94, 1, u'+    ASSERT_EQ(2u, listListBuilder.size());'), (97, 1, u'+    ASSERT_EQ(2u, sublist.size());'), (102, 1, u'+    ASSERT_EQ(4u, sublist.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_EQ(5, listBuilder.size());'), (11, 1, u'+    ASSERT_EQ(5u, listBuilder.size());'), (35, 1, u'+    ASSERT_EQ(3u, structListBuilder.size());'), (59, 1, u'+    ASSERT_EQ(3u, structListBuilder.size());'), (77, 1, u'+    ASSERT_EQ(2u, listListBuilder.size());'), (80, 1, u'+    ASSERT_EQ(2u, sublist.size());'), (85, 1, u'+    ASSERT_EQ(4u, sublist.size());'), (94, 1, u'+    ASSERT_EQ(2u, listListBuilder.size());'), (97, 1, u'+    ASSERT_EQ(2u, sublist.size());'), (102, 1, u'+    ASSERT_EQ(4u, sublist.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_EQ(5, listReader.size());'), (11, 1, u'+    ASSERT_EQ(5u, listReader.size());'), (32, 1, u'+    ASSERT_EQ(3u, structListReader.size());'), (50, 1, u'+    ASSERT_EQ(2u, listListReader.size());'), (53, 1, u'+    ASSERT_EQ(2u, sublist.size());'), (58, 1, u'+    ASSERT_EQ(4u, sublist.size());'), (67, 1, u'+    ASSERT_EQ(2u, listListReader.size());'), (70, 1, u'+    ASSERT_EQ(2u, sublist.size());'), (75, 1, u'+    ASSERT_EQ(4u, sublist.size());')]
===========================================
===========================================
Total add: 64
Total del: 11
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_EQ(5, listReader.size());'), (11, 1, u'+    ASSERT_EQ(5u, listReader.size());'), (32, 1, u'+    ASSERT_EQ(3u, structListReader.size());'), (50, 1, u'+    ASSERT_EQ(2u, listListReader.size());'), (53, 1, u'+    ASSERT_EQ(2u, sublist.size());'), (58, 1, u'+    ASSERT_EQ(4u, sublist.size());'), (67, 1, u'+    ASSERT_EQ(2u, listListReader.size());'), (70, 1, u'+    ASSERT_EQ(2u, sublist.size());'), (75, 1, u'+    ASSERT_EQ(4u, sublist.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_EQ(5, listReader.size());'), (11, 1, u'+    ASSERT_EQ(5u, listReader.size());'), (32, 1, u'+    ASSERT_EQ(3u, structListReader.size());'), (50, 1, u'+    ASSERT_EQ(2u, listListReader.size());'), (53, 1, u'+    ASSERT_EQ(2u, sublist.size());'), (58, 1, u'+    ASSERT_EQ(4u, sublist.size());'), (67, 1, u'+    ASSERT_EQ(2u, listListReader.size());'), (70, 1, u'+    ASSERT_EQ(2u, sublist.size());'), (75, 1, u'+    ASSERT_EQ(4u, sublist.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+  ASSERT_EQ(0, builder.getNums().size());'), (50, 1, u'+  ASSERT_EQ(5, listBuilder.size());'), (79, 1, u'+  ASSERT_EQ(5, listReader.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+    CAPNPROTO_DEBUG_ASSERT(kind() == FAR,')]
===========================================
===========================================
Total add: 67
Total del: 8
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+    CAPNPROTO_DEBUG_ASSERT(kind() == FAR,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+    CAPNPROTO_DEBUG_ASSERT(kind() == FAR,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            CAPNPROTO_ASSERT(srcTag->tag() == WireReference::STRUCT,'), (3, 1, u'+            CAPNPROTO_ASSERT(srcTag->kind() == WireReference::STRUCT,')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            CAPNPROTO_ASSERT(srcTag->tag() == WireReference::STRUCT,'), (3, 1, u'+            CAPNPROTO_ASSERT(srcTag->kind() == WireReference::STRUCT,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            CAPNPROTO_ASSERT(srcTag->tag() == WireReference::STRUCT,'), (3, 1, u'+            CAPNPROTO_ASSERT(srcTag->kind() == WireReference::STRUCT,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_ASSERT(false, "Copy source message contained unexpected tag.");'), (3, 1, u'+        CAPNPROTO_ASSERT(false, "Copy source message contained unexpected kind.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_ASSERT(false, "Copy source message contained unexpected tag.");'), (3, 1, u'+        CAPNPROTO_ASSERT(false, "Copy source message contained unexpected kind.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        CAPNPROTO_ASSERT(false, "Copy source message contained unexpected tag.");'), (3, 1, u'+        CAPNPROTO_ASSERT(false, "Copy source message contained unexpected kind.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->tag() == WireReference::STRUCT,'), (3, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->kind() == WireReference::STRUCT,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->tag() == WireReference::STRUCT,'), (3, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->kind() == WireReference::STRUCT,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->tag() == WireReference::STRUCT,'), (3, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->kind() == WireReference::STRUCT,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->tag() == WireReference::LIST,'), (3, 1, u'+      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->tag() == WireReference::LIST,'), (3, 1, u'+      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->tag() == WireReference::LIST,'), (3, 1, u'+      CAPNPROTO_ASSERT(ref->kind() == WireReference::LIST,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(tag->tag() == WireReference::STRUCT,'), (3, 1, u'+      CAPNPROTO_ASSERT(tag->kind() == WireReference::STRUCT,')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(tag->tag() == WireReference::STRUCT,'), (3, 1, u'+      CAPNPROTO_ASSERT(tag->kind() == WireReference::STRUCT,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(tag->tag() == WireReference::STRUCT,'), (3, 1, u'+      CAPNPROTO_ASSERT(tag->kind() == WireReference::STRUCT,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        CAPNPROTO_DEBUG_ASSERT(ec < (1 << 29) * ELEMENTS,'), (10, 1, u'+        CAPNPROTO_DEBUG_ASSERT(wc < (1 << 29) * WORDS,')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        CAPNPROTO_DEBUG_ASSERT(ec < (1 << 29) * ELEMENTS,'), (10, 1, u'+        CAPNPROTO_DEBUG_ASSERT(wc < (1 << 29) * WORDS,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        CAPNPROTO_DEBUG_ASSERT(ec < (1 << 29) * ELEMENTS,'), (10, 1, u'+        CAPNPROTO_DEBUG_ASSERT(wc < (1 << 29) * WORDS,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    CAPNPROTO_DEBUG_ASSERT(elementCount < (1 << 29) * ELEMENTS,'), (24, 2, u'-    CAPNPROTO_DEBUG_ASSERT(wordCount < (1 << 29) * WORDS,')]
===========================================
===========================================
Total add: 17
Total del: 26
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    CAPNPROTO_DEBUG_ASSERT(elementCount < (1 << 29) * ELEMENTS,'), (24, 2, u'-    CAPNPROTO_DEBUG_ASSERT(wordCount < (1 << 29) * WORDS,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    CAPNPROTO_DEBUG_ASSERT(elementCount < (1 << 29) * ELEMENTS,'), (24, 2, u'-    CAPNPROTO_DEBUG_ASSERT(wordCount < (1 << 29) * WORDS,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(elementsPerList < (1 << 29) * ELEMENTS,')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(elementsPerList < (1 << 29) * ELEMENTS,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(elementsPerList < (1 << 29) * ELEMENTS,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(85, 1, u'+            CAPNPROTO_ASSERT(srcTag->tag() == WireReference::STRUCT,'), (101, 1, u'+        CAPNPROTO_ASSERT(false, "Copy source message contained unexpected tag.");')]
===========================================
===========================================
Total add: 132
Total del: 9
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(85, 1, u'+            CAPNPROTO_ASSERT(srcTag->tag() == WireReference::STRUCT,'), (101, 1, u'+        CAPNPROTO_ASSERT(false, "Copy source message contained unexpected tag.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(85, 1, u'+            CAPNPROTO_ASSERT(srcTag->tag() == WireReference::STRUCT,'), (101, 1, u'+        CAPNPROTO_ASSERT(false, "Copy source message contained unexpected tag.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->structRef.fieldCount.get() == fieldCount,'), (3, 1, u'+      CAPNPROTO_DEBUG_ASSERT('), (6, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->structRef.dataSize.get() == dataSize,'), (7, 1, u'+      CAPNPROTO_DEBUG_ASSERT('), (10, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->structRef.refCount.get() == referenceCount,'), (11, 1, u'+      CAPNPROTO_DEBUG_ASSERT(')]
===========================================
===========================================
Total add: 10
Total del: 6
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->structRef.fieldCount.get() == fieldCount,'), (3, 1, u'+      CAPNPROTO_DEBUG_ASSERT('), (6, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->structRef.dataSize.get() == dataSize,'), (7, 1, u'+      CAPNPROTO_DEBUG_ASSERT('), (10, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->structRef.refCount.get() == referenceCount,'), (11, 1, u'+      CAPNPROTO_DEBUG_ASSERT(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->structRef.fieldCount.get() == fieldCount,'), (3, 1, u'+      CAPNPROTO_DEBUG_ASSERT('), (6, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->structRef.dataSize.get() == dataSize,'), (7, 1, u'+      CAPNPROTO_DEBUG_ASSERT('), (10, 2, u'-      CAPNPROTO_DEBUG_ASSERT(ref->structRef.refCount.get() == referenceCount,'), (11, 1, u'+      CAPNPROTO_DEBUG_ASSERT(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-    CAPNPROTO_ASSERT(ref->tag() == WireReference::LIST,'), (20, 1, u'+      CAPNPROTO_ASSERT(ref->tag() == WireReference::LIST,')]
===========================================
===========================================
Total add: 13
Total del: 8
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-    CAPNPROTO_ASSERT(ref->tag() == WireReference::LIST,'), (20, 1, u'+      CAPNPROTO_ASSERT(ref->tag() == WireReference::LIST,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-    CAPNPROTO_ASSERT(ref->tag() == WireReference::LIST,'), (20, 1, u'+      CAPNPROTO_ASSERT(ref->tag() == WireReference::LIST,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+    ASSERT_EQ(3 * ELEMENTS, list.size());'), (32, 1, u'+    ASSERT_EQ(4 * ELEMENTS, list.size());'), (44, 1, u'+    ASSERT_EQ(5 * ELEMENTS, list.size());'), (47, 1, u'+      ASSERT_EQ((i + 1) * ELEMENTS, element.size());')]
===========================================
===========================================
Total add: 53
Total del: 0
Header: setupStruct
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+    ASSERT_EQ(3 * ELEMENTS, list.size());'), (32, 1, u'+    ASSERT_EQ(4 * ELEMENTS, list.size());'), (44, 1, u'+    ASSERT_EQ(5 * ELEMENTS, list.size());'), (47, 1, u'+      ASSERT_EQ((i + 1) * ELEMENTS, element.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+    ASSERT_EQ(3 * ELEMENTS, list.size());'), (32, 1, u'+    ASSERT_EQ(4 * ELEMENTS, list.size());'), (44, 1, u'+    ASSERT_EQ(5 * ELEMENTS, list.size());'), (47, 1, u'+      ASSERT_EQ((i + 1) * ELEMENTS, element.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  ASSERT_TRUE(message->tryGetSegment(SegmentId(5)) != nullptr);')]
===========================================
===========================================
Total add: 29
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  ASSERT_TRUE(message->tryGetSegment(SegmentId(5)) != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  ASSERT_TRUE(message->tryGetSegment(SegmentId(5)) != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    CAPNPROTO_DEBUG_ASSERT(wordCount < (1 << 29) * WORDS,'), (13, 1, u'+    CAPNPROTO_DEBUG_ASSERT(elementsPerList < (1 << 29) * ELEMENTS,')]
===========================================
===========================================
Total add: 17
Total del: 0
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    CAPNPROTO_DEBUG_ASSERT(wordCount < (1 << 29) * WORDS,'), (13, 1, u'+    CAPNPROTO_DEBUG_ASSERT(elementsPerList < (1 << 29) * ELEMENTS,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    CAPNPROTO_DEBUG_ASSERT(wordCount < (1 << 29) * WORDS,'), (13, 1, u'+    CAPNPROTO_DEBUG_ASSERT(elementsPerList < (1 << 29) * ELEMENTS,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(elementSize != FieldSize::STRUCT,'), (3, 1, u'+    CAPNPROTO_DEBUG_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(elementSize != FieldSize::STRUCT,'), (3, 1, u'+    CAPNPROTO_DEBUG_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    CAPNPROTO_DEBUG_ASSERT(elementSize != FieldSize::STRUCT,'), (3, 1, u'+    CAPNPROTO_DEBUG_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      CAPNPROTO_ASSERT(tag->tag() == WireReference::STRUCT,')]
===========================================
===========================================
Total add: 10
Total del: 7
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      CAPNPROTO_ASSERT(tag->tag() == WireReference::STRUCT,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      CAPNPROTO_ASSERT(tag->tag() == WireReference::STRUCT,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        CAPNPROTO_ASSERT(segment != nullptr, "Trusted message had incompatible list element type.");')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        CAPNPROTO_ASSERT(segment != nullptr, "Trusted message had incompatible list element type.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        CAPNPROTO_ASSERT(segment != nullptr, "Trusted message had incompatible list element type.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  static_assert(sizeof(WireReference::structRef.dataSize) == 1,')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: StructBuilder::getListField
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  static_assert(sizeof(WireReference::structRef.dataSize) == 1,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  static_assert(sizeof(WireReference::structRef.dataSize) == 1,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  CAPNPROTO_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: ListBuilder::getListElement
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  CAPNPROTO_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  CAPNPROTO_ASSERT(elementSize != FieldSize::INLINE_COMPOSITE,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  ASSERT_TRUE(message->tryGetSegment(SegmentId(14)) != nullptr);')]
===========================================
===========================================
Total add: 5
Total del: 16
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  ASSERT_TRUE(message->tryGetSegment(SegmentId(14)) != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  ASSERT_TRUE(message->tryGetSegment(SegmentId(14)) != nullptr);')]
===========================================
Class:class MallocMessage: public MessageBuilder { class MallocMessage: public MessageBuilder 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(79, 1, u'+    ASSERT_EQ(3 * ELEMENTS, list.size());'), (88, 1, u'+    ASSERT_EQ(4 * ELEMENTS, list.size());'), (101, 1, u'+    ASSERT_EQ(5 * ELEMENTS, list.size());'), (104, 1, u'+      ASSERT_EQ((i + 1) * ELEMENTS, element.size());')]
===========================================
===========================================
Total add: 185
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(79, 1, u'+    ASSERT_EQ(3 * ELEMENTS, list.size());'), (88, 1, u'+    ASSERT_EQ(4 * ELEMENTS, list.size());'), (101, 1, u'+    ASSERT_EQ(5 * ELEMENTS, list.size());'), (104, 1, u'+      ASSERT_EQ((i + 1) * ELEMENTS, element.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(79, 1, u'+    ASSERT_EQ(3 * ELEMENTS, list.size());'), (88, 1, u'+    ASSERT_EQ(4 * ELEMENTS, list.size());'), (101, 1, u'+    ASSERT_EQ(5 * ELEMENTS, list.size());'), (104, 1, u'+      ASSERT_EQ((i + 1) * ELEMENTS, element.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
Total add: 6
Total del: 22
Header: static_assert
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+    static_assert(sizeof(word) == 8, "This code assumes 64-bit words.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->tag() == WireReference::STRUCT,'), (3, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->tag() == WireReference::STRUCT,'), (5, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.fieldCount.get() == fieldCount,'), (6, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->structRef.fieldCount.get() == fieldCount,'), (8, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.dataSize.get() == dataSize,'), (9, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->structRef.dataSize.get() == dataSize,'), (11, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.refCount.get() == referenceCount,'), (12, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->structRef.refCount.get() == referenceCount,')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->tag() == WireReference::STRUCT,'), (3, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->tag() == WireReference::STRUCT,'), (5, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.fieldCount.get() == fieldCount,'), (6, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->structRef.fieldCount.get() == fieldCount,'), (8, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.dataSize.get() == dataSize,'), (9, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->structRef.dataSize.get() == dataSize,'), (11, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.refCount.get() == referenceCount,'), (12, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->structRef.refCount.get() == referenceCount,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->tag() == WireReference::STRUCT,'), (3, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->tag() == WireReference::STRUCT,'), (5, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.fieldCount.get() == fieldCount,'), (6, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->structRef.fieldCount.get() == fieldCount,'), (8, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.dataSize.get() == dataSize,'), (9, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->structRef.dataSize.get() == dataSize,'), (11, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.refCount.get() == referenceCount,'), (12, 1, u'+      CAPNPROTO_DEBUG_ASSERT(ref->structRef.refCount.get() == referenceCount,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(sizeof(WireReference::structRef.fieldCount) == 1,'), (8, 1, u'+  static_assert(sizeof(WireReference::structRef.refCount) == 1,')]
===========================================
===========================================
Total add: 82
Total del: 66
Header: StructBuilder::getListFieldInternal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(sizeof(WireReference::structRef.fieldCount) == 1,'), (8, 1, u'+  static_assert(sizeof(WireReference::structRef.refCount) == 1,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(sizeof(WireReference::structRef.fieldCount) == 1,'), (8, 1, u'+  static_assert(sizeof(WireReference::structRef.refCount) == 1,')]
===========================================
Class:class Bytes;
Class:class KiB;
Class:class Bytes;
Class:class KiB;
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    CAPNPROTO_DEBUG_ASSERT((elementCount >> 29) == 0, "Lists are limited to 2**29 elements.");'), (6, 1, u'+    CAPNPROTO_DEBUG_ASSERT(elementCount < (1 << 29) * ELEMENTS,')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    CAPNPROTO_DEBUG_ASSERT((elementCount >> 29) == 0, "Lists are limited to 2**29 elements.");'), (6, 1, u'+    CAPNPROTO_DEBUG_ASSERT(elementCount < (1 << 29) * ELEMENTS,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    CAPNPROTO_DEBUG_ASSERT((elementCount >> 29) == 0, "Lists are limited to 2**29 elements.");'), (6, 1, u'+    CAPNPROTO_DEBUG_ASSERT(elementCount < (1 << 29) * ELEMENTS,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+static_assert(REFERENCES * WORDS_PER_REFERENCE * BYTES_PER_WORD / BYTES == sizeof(WireReference),'), (8, 1, u'+static_assert(REFERENCES * BYTES_PER_REFERENCE / BYTES == sizeof(WireReference),'), (10, 1, u'+static_assert(REFERENCES * BITS_PER_REFERENCE / BITS_PER_BYTE / BYTES == sizeof(WireReference),')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+static_assert(REFERENCES * WORDS_PER_REFERENCE * BYTES_PER_WORD / BYTES == sizeof(WireReference),'), (8, 1, u'+static_assert(REFERENCES * BYTES_PER_REFERENCE / BYTES == sizeof(WireReference),'), (10, 1, u'+static_assert(REFERENCES * BITS_PER_REFERENCE / BITS_PER_BYTE / BYTES == sizeof(WireReference),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+static_assert(REFERENCES * WORDS_PER_REFERENCE * BYTES_PER_WORD / BYTES == sizeof(WireReference),'), (8, 1, u'+static_assert(REFERENCES * BYTES_PER_REFERENCE / BYTES == sizeof(WireReference),'), (10, 1, u'+static_assert(REFERENCES * BITS_PER_REFERENCE / BITS_PER_BYTE / BYTES == sizeof(WireReference),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.fieldCount == fieldDescriptor->fieldCount,'), (3, 1, u'+      CAPNPROTO_ASSERT(ref->structRef.fieldCount.get() == fieldCount,'), (5, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.dataSize == fieldDescriptor->dataSize,'), (6, 1, u'+      CAPNPROTO_ASSERT(ref->structRef.dataSize.get() == dataSize,'), (8, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.refCount == fieldDescriptor->referenceCount,'), (9, 1, u'+      CAPNPROTO_ASSERT(ref->structRef.refCount.get() == referenceCount,')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.fieldCount == fieldDescriptor->fieldCount,'), (3, 1, u'+      CAPNPROTO_ASSERT(ref->structRef.fieldCount.get() == fieldCount,'), (5, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.dataSize == fieldDescriptor->dataSize,'), (6, 1, u'+      CAPNPROTO_ASSERT(ref->structRef.dataSize.get() == dataSize,'), (8, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.refCount == fieldDescriptor->referenceCount,'), (9, 1, u'+      CAPNPROTO_ASSERT(ref->structRef.refCount.get() == referenceCount,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.fieldCount == fieldDescriptor->fieldCount,'), (3, 1, u'+      CAPNPROTO_ASSERT(ref->structRef.fieldCount.get() == fieldCount,'), (5, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.dataSize == fieldDescriptor->dataSize,'), (6, 1, u'+      CAPNPROTO_ASSERT(ref->structRef.dataSize.get() == dataSize,'), (8, 2, u'-      CAPNPROTO_ASSERT(ref->structRef.refCount == fieldDescriptor->referenceCount,'), (9, 1, u'+      CAPNPROTO_ASSERT(ref->structRef.refCount.get() == referenceCount,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    CAPNPROTO_DEBUG_ASSERT(elementSize != FieldSize::STRUCT,')]
===========================================
===========================================
Total add: 32
Total del: 28
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    CAPNPROTO_DEBUG_ASSERT(elementSize != FieldSize::STRUCT,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    CAPNPROTO_DEBUG_ASSERT(elementSize != FieldSize::STRUCT,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(101, 1, u'+            CAPNPROTO_ASSERT(false, "can\'t get here");')]
===========================================
===========================================
Total add: 65
Total del: 43
Header: struct WireHelpers {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(101, 1, u'+            CAPNPROTO_ASSERT(false, "can\'t get here");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(101, 1, u'+            CAPNPROTO_ASSERT(false, "can\'t get here");')]
===========================================
Class:class Bytes;
Class:class KiB;
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-    CAPNPROTO_DEBUG_ASSERT((offset & 7) == 0, "Offsets must be word-aligned.");')]
===========================================
===========================================
Total add: 10
Total del: 7
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-    CAPNPROTO_DEBUG_ASSERT((offset & 7) == 0, "Offsets must be word-aligned.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-    CAPNPROTO_DEBUG_ASSERT((offset & 7) == 0, "Offsets must be word-aligned.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-static_assert(sizeof(WireReference) == 8, "Layout of capnproto::WireReference is wrong.");'), (3, 1, u'+static_assert(sizeof(WireReference) == sizeof(word),')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: struct WireReference {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-static_assert(sizeof(WireReference) == 8, "Layout of capnproto::WireReference is wrong.");'), (3, 1, u'+static_assert(sizeof(WireReference) == sizeof(word),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-static_assert(sizeof(WireReference) == 8, "Layout of capnproto::WireReference is wrong.");'), (3, 1, u'+static_assert(sizeof(WireReference) == sizeof(word),')]
===========================================
Class:class Exception: public std::exception { class Exception: public std::exception 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(73, 1, u'+void assertionFailure(const char* file, int line, const char* expectation, const char* message) {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(146, 1, u'+    CAPNPROTO_DEBUG_ASSERT((offset & 7) == 0, "Offsets must be word-aligned.");'), (162, 1, u'+    CAPNPROTO_DEBUG_ASSERT((elementCount >> 29) == 0, "Lists are limited to 2**29 elements.");'), (172, 1, u'+static_assert(sizeof(WireReference) == 8, "Layout of capnproto::WireReference is wrong.");'), (276, 1, u'+      CAPNPROTO_ASSERT(ref->tag() == WireReference::STRUCT,'), (278, 1, u'+      CAPNPROTO_ASSERT(ref->structRef.fieldCount == fieldDescriptor->fieldCount,'), (280, 1, u'+      CAPNPROTO_ASSERT(ref->structRef.dataSize == fieldDescriptor->dataSize,'), (282, 1, u'+      CAPNPROTO_ASSERT(ref->structRef.refCount == fieldDescriptor->referenceCount,'), (335, 1, u'+    CAPNPROTO_ASSERT(ref->tag() == WireReference::LIST,')]
===========================================
<type 'unicode'>
<type 'unicode'>
535
Mismatch count:24787
Normal count:425154
