projects/top_C/xbmc
Going to process projects/top_C/xbmc/all_log.txt 
---------- xbmc ------------

===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "zeroconf");'), (3, 1, u'+  assert(url.IsProtocol("zeroconf"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CZeroconfDirectory::GetDirectory
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "zeroconf");'), (3, 1, u'+  assert(url.IsProtocol("zeroconf"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "zeroconf");'), (3, 1, u'+  assert(url.IsProtocol("zeroconf"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: prepareWin32SMBDirectoryName
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CWin32SMBDirectory::GetDirectory
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CWin32SMBDirectory::RealCreate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CWin32SMBDirectory::RealExists
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CWin32SMBDirectory::Remove
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CWin32SMBDirectory::ConnectAndAuthenticate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(url.GetProtocol() == "smb");'), (3, 1, u'+  assert(url.IsProtocol("smb"));')]
===========================================
Class:class progress_info { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(hSourceProcessHandle == GetCurrentProcess()'), (3, 1, u'+  assert(hSourceProcessHandle == GetCurrentProcess()')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DuplicateHandle
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(hSourceProcessHandle == GetCurrentProcess()'), (3, 1, u'+  assert(hSourceProcessHandle == GetCurrentProcess()')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(hSourceProcessHandle == GetCurrentProcess()'), (3, 1, u'+  assert(hSourceProcessHandle == GetCurrentProcess()')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(rhs[m_channelCount] == AE_CH_NULL);'), (3, 1, u'+  assert(rhs[m_channelCount] == AE_CH_NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CAEChannelInfo::operator=
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(rhs[m_channelCount] == AE_CH_NULL);'), (3, 1, u'+  assert(rhs[m_channelCount] == AE_CH_NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(rhs[m_channelCount] == AE_CH_NULL);'), (3, 1, u'+  assert(rhs[m_channelCount] == AE_CH_NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(rhs > AE_CH_LAYOUT_INVALID && rhs < AE_CH_LAYOUT_MAX);'), (3, 1, u'+  assert(rhs > AE_CH_LAYOUT_INVALID && rhs < AE_CH_LAYOUT_MAX);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CAEChannelInfo::operator=
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(rhs > AE_CH_LAYOUT_INVALID && rhs < AE_CH_LAYOUT_MAX);'), (3, 1, u'+  assert(rhs > AE_CH_LAYOUT_INVALID && rhs < AE_CH_LAYOUT_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(rhs > AE_CH_LAYOUT_INVALID && rhs < AE_CH_LAYOUT_MAX);'), (3, 1, u'+  assert(rhs > AE_CH_LAYOUT_INVALID && rhs < AE_CH_LAYOUT_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_channelCount < AE_CH_MAX);'), (3, 2, u'-  ASSERT(rhs > AE_CH_NULL && rhs < AE_CH_MAX);'), (4, 1, u'+  assert(m_channelCount < AE_CH_MAX);'), (5, 1, u'+  assert(rhs > AE_CH_NULL && rhs < AE_CH_MAX);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: CAEChannelInfo::operator+=
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_channelCount < AE_CH_MAX);'), (3, 2, u'-  ASSERT(rhs > AE_CH_NULL && rhs < AE_CH_MAX);'), (4, 1, u'+  assert(m_channelCount < AE_CH_MAX);'), (5, 1, u'+  assert(rhs > AE_CH_NULL && rhs < AE_CH_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_channelCount < AE_CH_MAX);'), (3, 2, u'-  ASSERT(rhs > AE_CH_NULL && rhs < AE_CH_MAX);'), (4, 1, u'+  assert(m_channelCount < AE_CH_MAX);'), (5, 1, u'+  assert(rhs > AE_CH_NULL && rhs < AE_CH_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(rhs > AE_CH_NULL && rhs < AE_CH_MAX);'), (3, 1, u'+  assert(rhs > AE_CH_NULL && rhs < AE_CH_MAX);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CAEChannelInfo::operator-=
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(rhs > AE_CH_NULL && rhs < AE_CH_MAX);'), (3, 1, u'+  assert(rhs > AE_CH_NULL && rhs < AE_CH_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(rhs > AE_CH_NULL && rhs < AE_CH_MAX);'), (3, 1, u'+  assert(rhs > AE_CH_NULL && rhs < AE_CH_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(i < m_channelCount);'), (3, 1, u'+  assert(i < m_channelCount);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CAEChannelInfo::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(i < m_channelCount);'), (3, 1, u'+  assert(i < m_channelCount);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(i < m_channelCount);'), (3, 1, u'+  assert(i < m_channelCount);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(ch >= 0 && ch < AE_CH_MAX);'), (3, 1, u'+  assert(ch >= 0 && ch < AE_CH_MAX);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CAEChannelInfo::GetChName
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(ch >= 0 && ch < AE_CH_MAX);'), (3, 1, u'+  assert(ch >= 0 && ch < AE_CH_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(ch >= 0 && ch < AE_CH_MAX);'), (3, 1, u'+  assert(ch >= 0 && ch < AE_CH_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(result && !sseresult);'), (3, 1, u'+    assert(result && !sseresult);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CAEUtil::FloatRand4
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(result && !sseresult);'), (3, 1, u'+    assert(result && !sseresult);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(result && !sseresult);'), (3, 1, u'+    assert(result && !sseresult);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(sce.FAborted());  // the only kind we should get'), (3, 1, u'+    assert(sce.FAborted());  // the only kind we should get')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CScraper::RunNoThrow
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(sce.FAborted());  // the only kind we should get'), (3, 1, u'+    assert(sce.FAborted());  // the only kind we should get')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(sce.FAborted());  // the only kind we should get'), (3, 1, u'+    assert(sce.FAborted());  // the only kind we should get')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0);'), (3, 1, u'+  assert(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CHTSPDirectorySession::Release
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0);'), (3, 1, u'+  assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0);'), (3, 1, u'+  assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!(!m_state->m_easyHandle ^ !m_state->m_multiHandle));'), (3, 1, u'+  assert(!(!m_state->m_easyHandle ^ !m_state->m_multiHandle));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CCurlFile::Open
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!(!m_state->m_easyHandle ^ !m_state->m_multiHandle));'), (3, 1, u'+  assert(!(!m_state->m_easyHandle ^ !m_state->m_multiHandle));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!(!m_state->m_easyHandle ^ !m_state->m_multiHandle));'), (3, 1, u'+  assert(!(!m_state->m_easyHandle ^ !m_state->m_multiHandle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_easyHandle == NULL);'), (3, 1, u'+  assert(m_state->m_easyHandle == NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CCurlFile::OpenForWrite
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_easyHandle == NULL);'), (3, 1, u'+  assert(m_state->m_easyHandle == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_easyHandle == NULL);'), (3, 1, u'+  assert(m_state->m_easyHandle == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_multiHandle);'), (3, 1, u'+  assert(m_state->m_multiHandle);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CCurlFile::OpenForWrite
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_multiHandle);'), (3, 1, u'+  assert(m_state->m_multiHandle);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_multiHandle);'), (3, 1, u'+  assert(m_state->m_multiHandle);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_multiHandle);'), (3, 1, u'+  assert(m_state->m_multiHandle);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CCurlFile::Write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_multiHandle);'), (3, 1, u'+  assert(m_state->m_multiHandle);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_multiHandle);'), (3, 1, u'+  assert(m_state->m_multiHandle);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_easyHandle == NULL);'), (3, 1, u'+  assert(m_state->m_easyHandle == NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CCurlFile::Exists
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_easyHandle == NULL);'), (3, 1, u'+  assert(m_state->m_easyHandle == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_easyHandle == NULL);'), (3, 1, u'+  assert(m_state->m_easyHandle == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_easyHandle == NULL);'), (3, 1, u'+  assert(m_state->m_easyHandle == NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CCurlFile::Stat
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_easyHandle == NULL);'), (3, 1, u'+  assert(m_state->m_easyHandle == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_state->m_easyHandle == NULL);'), (3, 1, u'+  assert(m_state->m_easyHandle == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist, "",')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist, "",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist, "",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist, "",')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist, "",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist, "",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist, "",')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist, "",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist, "",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist));'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist));'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist));'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist));'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist));'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist));'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(rarUrl, itemlist));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strzippath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(zipUrl, itemlist, "",')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_F
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strzippath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(zipUrl, itemlist, "",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strzippath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(zipUrl, itemlist, "",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strzippath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(zipUrl, itemlist, "",')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_F
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strzippath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(zipUrl, itemlist, "",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strzippath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(zipUrl, itemlist, "",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strzippath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(zipUrl, itemlist, "",')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_F
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strzippath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(zipUrl, itemlist, "",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strzippath, itemlist, "",'), (5, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(zipUrl, itemlist, "",')]
===========================================
Class: class CShowLink { 
Class: class CShowItem { 
Class: class TestVideoInfoScanner : public Test,                              public WithParamInterface<TestEntry> { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+  ASSERT_TRUE(scanner.EnumerateEpisodeItem(&item, result));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(strPath.substr(0, 11) == "zeroconf://");'), (6, 1, u'+  assert(url.GetProtocol() == "zeroconf");')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: GetDirectoryFromTxtRecords
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(strPath.substr(0, 11) == "zeroconf://");'), (6, 1, u'+  assert(url.GetProtocol() == "zeroconf");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(strPath.substr(0, 11) == "zeroconf://");'), (6, 1, u'+  assert(url.GetProtocol() == "zeroconf");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-      assert(0);')]
===========================================
===========================================
Total add: 17
Total del: 33
Header: CActiveAESink::GenerateNoise
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-      assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-      assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-       assert(dst <= omx_buffer->pBuffer + m_ChunkLen);')]
===========================================
===========================================
Total add: 23
Total del: 11
Header: COMXAudio::AddPackets
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-       assert(dst <= omx_buffer->pBuffer + m_ChunkLen);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-       assert(dst <= omx_buffer->pBuffer + m_ChunkLen);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+    assert(0);')]
===========================================
===========================================
Total add: 19
Total del: 10
Header: CActiveAESink::EnsureConvertBuffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+    assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+    assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+      assert(0);')]
===========================================
===========================================
Total add: 32
Total del: 1
Header: CActiveAESink::GenerateNoise
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+      assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+      assert(0);')]
===========================================
Class: class TestAddonVersion : public testing::Test { 
Class: class Worker : public NPT_Thread { 
Class: class ZipRequestHandler : public NPT_HttpRequestHandler { 
Class:class ZipHttpWorker : public NPT_Thread { class ZipHttpWorker : public NPT_Thread 
Class: class ZipHttpServer : public NPT_HttpServer { class ZipHttpServer : public NPT_HttpServer 
Class: class NPT_HttpTcpConnector : public NPT_HttpClient::Connector { 
Class: class NPT_HttpEnvProxySelector : public NPT_HttpProxySelector class NPT_HttpEnvProxySelector : public NPT_HttpProxySelector,                                  public NPT_AutomaticCleaner::Singleton          class Cleaner {     class Cleaner 
Class: class NPT_WinRtTcpClientSocket : public NPT_SocketInterface { 
Class: class NPT_WinRtSocketInputStream : public NPT_InputStream { 
Class: class NPT_WinRtSocketOutputStream : public NPT_OutputStream { 
Class: class NPT_WinRtSystem { class NPT_WinRtSystem 
Class: class NPT_WinRtSharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_WinRtThread : public NPT_ThreadInterface { 
Class: class SharedVariableThread : public NPT_Thread { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(947, 1, u'+    Assert(strm->avail_out > 0, "bug2");'), (1182, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1193, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1196, 1, u'+        Assert(cur_match < s->strstart, "no future");'), (1223, 1, u'+        Assert(scan[2] == match[2], "scan[2]?");'), (1234, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1254, 1, u'+        Assert(*scan == *match, "match[2]?");'), (1266, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1309, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1311, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1313, 1, u'+    Assert(cur_match < s->strstart, "no future");'), (1328, 1, u'+    Assert(*scan == *match, "match[2]?");'), (1340, 1, u'+    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1398, 1, u'+    Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");'), (1465, 1, u'+        Assert(more >= 2, "more < 2");'), (1530, 1, u'+    Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,'), (1583, 1, u'+            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (1591, 1, u'+        Assert(s->block_start >= 0L, "block gone");'), (1839, 1, u'+    Assert (flush != Z_NO_FLUSH, "no flush?");'), (1899, 1, u'+            Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(254, 2, u'-        av_assert0(c->low <= 0x1FF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(139, 2, u'-    av_assert0(!avctx->internal->frame_thread_encoder);'), (177, 2, u'-        av_assert0(!thread_avctx->internal->frame_thread_encoder);'), (221, 2, u'-    av_assert1(!*got_packet_ptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(363, 2, u'-        av_assert0(offset == FF_ARRAY_ELEMS(coeff_token_vlc_tables));'), (482, 2, u'-    av_assert2(total_coeff<=16);'), (639, 2, u'-        av_assert2((cbp&15) == 0 || (cbp&15) == 15);'), (745, 2, u'-       av_assert2(h->slice_type_nos == AV_PICTURE_TYPE_I);'), (850, 2, u'-            av_assert2(h->slice_type_nos == AV_PICTURE_TYPE_P); //FIXME SP correct ?'), (1005, 2, u'-            av_assert2(IS_8X16(mb_type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-    av_assert2(x<8 && y<8 && x>=0 && y>=0);\\'), (68, 2, u'-    av_assert2(x<8 && y<8 && x>=0 && y>=0);\\'), (103, 2, u'-    av_assert2(x<8 && y<8 && x>=0 && y>=0);\\')]
===========================================
Class: class CustomSource : public MediaSource { class CustomSource : public MediaSource 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-#define ASSERT_ALIGNED(ptr) assert(((unsigned long)ptr&0x0000000F));'), (26, 2, u'-#define ASSERT_ALIGNED(ptr) ;'), (157, 2, u'-        ASSERT_ALIGNED(dst);'), (265, 2, u'-        ASSERT_ALIGNED(dst);'), (498, 2, u'-        ASSERT_ALIGNED(dst);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(307, 2, u'-        av_assert2(compensation_distance > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 2, u'-    av_assert0(s->f_code == 1);'), (44, 2, u'-    av_assert0(s->unrestricted_mv == 0);'), (45, 2, u'-    av_assert0(s->alt_inter_vlc == 0);'), (46, 2, u'-    av_assert0(s->umvplus == 0);'), (47, 2, u'-    av_assert0(s->modified_quant==1);'), (48, 2, u'-    av_assert0(s->loop_filter==1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(271, 2, u'-    assert(mpi->flags&MP_IMGFLAG_PLANAR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 2, u'-        assert(0);'), (252, 2, u'-    assert(mpi->flags&MP_IMGFLAG_PLANAR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(246, 2, u'-            assert(avctx_enc->codec);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(114, 2, u'-    av_assert2((int16_t)a.v[AV_INTEGER_SIZE-1] >= 0 && (int16_t)b.v[AV_INTEGER_SIZE-1] >= 0);'), (115, 2, u'-    av_assert2(av_log2_i(b)>=0);'), (181, 2, u'-            av_assert0(av_i2int(ai) == a);'), (182, 2, u'-            av_assert0(av_i2int(bi) == b);'), (183, 2, u'-            av_assert0(av_i2int(av_add_i(ai,bi)) == a+b);'), (184, 2, u'-            av_assert0(av_i2int(av_sub_i(ai,bi)) == a-b);'), (185, 2, u'-            av_assert0(av_i2int(av_mul_i(ai,bi)) == a*b);'), (186, 2, u'-            av_assert0(av_i2int(av_shr_i(ai, 9)) == a>>9);'), (187, 2, u'-            av_assert0(av_i2int(av_shr_i(ai,-9)) == a<<9);'), (188, 2, u'-            av_assert0(av_i2int(av_shr_i(ai, 17)) == a>>17);'), (189, 2, u'-            av_assert0(av_i2int(av_shr_i(ai,-17)) == a<<17);'), (190, 2, u'-            av_assert0(av_log2_i(ai) == av_log2(a));'), (191, 2, u'-            av_assert0(av_i2int(av_div_i(ai,bi)) == a/b);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-    av_assert2((taps&3) != 2);'), (34, 2, u'-    av_assert2((taps&3) != 3 || s->dither.ns_coeffs[taps] == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(81, 2, u'-        av_assert2(i<99);'), (130, 2, u'-                av_assert0(0);'), (229, 2, u'-            av_assert0(0);'), (354, 2, u'-    av_assert0(a->planar);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 2, u'-    av_assert1(c->filter_shift == FILTER_SHIFT);'), (93, 2, u'-    av_assert1(c->felem_size == sizeof(FELEM));'), (107, 2, u'-        av_assert2(index >= 0);'), (188, 2, u'-            av_assert1(compensation_distance > 0);')]
===========================================
Class:class UpdateAddons : public IRunnable { 
Class:class CBusyWaiter : public CThread { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pgcit != NULL);  /* ?? Make this return -1 instead */')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: set_PGCN
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pgcit != NULL);  /* ?? Make this return -1 instead */')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pgcit != NULL);  /* ?? Make this return -1 instead */')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 2, u'-  ASSERT(false);')]
===========================================
===========================================
Total add: 24
Total del: 50
Header: CAESinkFactory::ParseDevice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 2, u'-  ASSERT(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 2, u'-  ASSERT(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(false);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: CDVDAudioCodecFFmpeg::GetDataFormat
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_decoded_buffer->nFilledLen <= stride * height);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: COMXImageDec::Decode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_decoded_buffer->nFilledLen <= stride * height);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_decoded_buffer->nFilledLen <= stride * height);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT_TRUE(file);'), (14, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));')]
===========================================
===========================================
Total add: 19
Total del: 0
Header: TEST_F
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT_TRUE(file);'), (14, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT_TRUE(file);'), (14, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));')]
===========================================
Class: class CAudiotrackJNI { 
Class:class CAudiotrackJNI { 
Class: class TestNfs : public Test,                 public WithParamInterface<SplitPath> { 
Class: class ExportList { 
Class:class TestTextureUtils : class TestTextureUtils :
Class: class CDirectoryJob : public CJob { 
Class:class PredicateSubtitleFilter { 
Class:class PredicateSubtitleFilter { 
Class:   class CStageFrightMediaSource : public MediaSource { 
Class:   class CStageFrightDecodeThread : public CThread { 
Class:   class CStageFrightMediaSource : public MediaSource { 
Class:   class CStageFrightDecodeThread : public CThread { 
Class:class CAutoBuffer { 
Class: class TestURLGetWithoutUserDetails : public Test,                                      public WithParamInterface<TestURLGetWithoutUserDetailsData> { 
Class:class TemporarySetting class TemporarySetting
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 16);'), (3, 1, u'+  assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 64);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: COMXAudio::ApplyVolume
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 16);'), (3, 1, u'+  assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 16);'), (3, 1, u'+  assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-      assert(len2 <= len*4);')]
===========================================
===========================================
Total add: 4
Total del: 28
Header: CCharsetConverter::CInnerConverter::logicalToVisualBiDi
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-      assert(len2 <= len*4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-      assert(len2 <= len*4);')]
===========================================
Class:  class CConverterType : public CCriticalSection { 
Class:class CCharsetConverter::CInnerConverter { 
Class:class XBMCWayland : class XBMCWayland :
Class:class Process : class Process :
Class:class TempFileWrapper : class TempFileWrapper :
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 1, u'+  ASSERT_TRUE(m_nativeType.CheckCompatibility());')]
===========================================
===========================================
Total add: 14
Total del: 23
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 1, u'+  ASSERT_TRUE(m_nativeType.CheckCompatibility());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 1, u'+  ASSERT_TRUE(m_nativeType.CheckCompatibility());')]
===========================================
Class:class TmpEnv :   boost::noncopyable { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT_TRUE(m_nativeType.CreateNativeDisplay());')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: xt::Process::Child
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT_TRUE(m_nativeType.CreateNativeDisplay());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT_TRUE(m_nativeType.CreateNativeDisplay());')]
===========================================
Class:class StatusWaitTimeoutError : class StatusWaitTimeoutError :
Class: class TerminatedBySignalError :   public std::exception { 
Class: class AbnormalExitStatusError :   public std::exception { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT_TRUE(m_xbmcWayland.get());')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: xt::Process::Interrupt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT_TRUE(m_xbmcWayland.get());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT_TRUE(m_xbmcWayland.get());')]
===========================================
Class:class SignalGuard : class SignalGuard :
Class: class CompatibleWestonTest :   public WestonTest { 
Class: class ConnectedWestonTest :   public CompatibleWestonTest { 
Class: class XBMCWaylandAssistedWestonTest :   public ConnectedWestonTest { 
Class:class StubEventListener : class StubEventListener :
Class: class StubCursorManager :   public xbmc::ICursorManager { 
Class: class SingleThreadedEventQueue :   public xwe::IEventQueueStrategy { 
Class: class WaylandPointerProcessor :   public ::testing::Test { 
Class: class WaylandPointerProcessorButtons :   public WaylandPointerProcessor,   public ::testing::WithParamInterface<std::tr1::tuple<uint32_t, uint32_t> > { 
Class: class WaylandPointerProcessorAxisButtons :   public WaylandPointerProcessor,   public ::testing::WithParamInterface<std::tr1::tuple<float, uint32_t> > { 
Class: class WaylandPointerProcessor :   public ::testing::Test { 
Class: class WaylandPointerProcessorButtons :   public WaylandPointerProcessor,   public WithParamInterface<std::tr1::tuple<uint32_t, uint32_t> > { 
Class: class WaylandPointerProcessorAxisButtons :   public WaylandPointerProcessor,   public WithParamInterface<std::tr1::tuple<float, uint32_t> > { 
Class:class SingleThreadedEventQueue : class SingleThreadedEventQueue :
Class:class StatusWaitTimeoutError : class StatusWaitTimeoutError :
Class: class TerminatedBySignalError :   public std::exception { 
Class: class AbnormalExitStatusError :   public std::exception { 
Class:class TempFileWrapper : class TempFileWrapper :
Class: class SavedTempSocket :   boost::noncopyable { 
Class:class WaylandPointerProcessor :   public ::testing::Test { 
Class: class WaylandPointerProcessorButtons :   public WaylandPointerProcessor,   public ::testing::WithParamInterface<std::tr1::tuple<uint32_t, uint32_t> > { 
Class: class WaylandPointerProcessorAxisButtons :   public WaylandPointerProcessor,   public ::testing::WithParamInterface<std::tr1::tuple<float, uint32_t> > { 
Class:class StubEventListener : class StubEventListener :
Class: class StubCursorManager :   public xbmc::ICursorManager { 
Class: class SingleThreadedEventQueue :   public xwe::IEventQueueStrategy { 
Class:class ITimeoutManager class ITimeoutManager
Class: class IEventListener { 
Class: class ICursorManager { 
Class: class PointerProcessor :   public wayland::IPointerReceiver { 
Class: class KeyboardProcessor :   public wayland::IKeyboardReceiver { 
Class:class WaylandEventLoop :   public xbmc::IEventListener,   public xbmc::ITimeoutManager { 
Class: class XBMCWaylandAssistedWestonTest :   public ConnectedWestonTest { 
Class:class ConnectedWestonTest :   public CompatibleWestonTest { 
Class:class GlobalInterface :   public RemoteGlobalInterface { 
Class: class XBMCConnection::Private :   public IWaylandRegistration { 
Class:class XBMCWayland : class XBMCWayland :
Class:class Process : class Process :
Class:class TempFileWrapper : class TempFileWrapper :
Class: class SavedTempSocket :   boost::noncopyable { 
Class: class TmpEnv :   boost::noncopyable { 
Class:class StatusWaitTimeoutError : class StatusWaitTimeoutError :
Class: class TerminatedBySignalError :   public std::exception { 
Class: class AbnormalExitStatusError :   public std::exception { 
Class:class SignalGuard : class SignalGuard :
Class: class CompatibleWestonTest :   public WestonTest { 
Class: class EventDispatch :   public IEventListener { 
Class:class ITimeoutManager { 
Class:class KeyboardProcessor :   public wayland::IKeyboardReceiver { 
Class:class WaylandEventLoop :   public xbmc::ITimeoutManager { 
Class:class ICursorManager { 
Class: class PointerProcessor :   public wayland::IPointerReceiver { 
Class:class IEventListener class IEventListener
Class: class EventDispatch :   public IEventListener { 
Class:class WaylandInput : class WaylandInput :
Class: class CEGLNativeTypeWayland::Private { 
Class:class XBMCConnection::Private : class XBMCConnection::Private :
Class:class XBMCSurface::Private class XBMCSurface::Private
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_decoded_buffer->nFilledLen <= stride * height);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: COMXImage::Decode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_decoded_buffer->nFilledLen <= stride * height);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_decoded_buffer->nFilledLen <= stride * height);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt"));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir"));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink"));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/"));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt"));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir"));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink"));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/"));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/",'), (4, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/"));')]
===========================================
Class: class BroadcastingJob :   public CJob { 
Class: class CDVDMediaCodecOnFrameAvailable : public CEvent, CJNISurfaceTextureOnFrameAvailableListener { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(102, 2, u'-  assert(skip_ != NULL);'), (107, 2, u'-  assert(skip_ != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(342, 2, u'-  assert(vec[0] >= 0);'), (343, 2, u'-  assert(vec[1] >= 0);'), (375, 2, u'-      assert(NULL == "Unexpected return value from pcre_config(NEWLINE)");'), (393, 2, u'-    assert(matchstart >= start);'), (394, 2, u'-    assert(matchend >= matchstart);'), (542, 2, u'-  assert((1 + n) * 3 <= vecsize);  // results + PCRE workspace'), (544, 2, u'-  assert(matches >= 0);  // TryMatch never returns negatives'), (580, 2, u'-  assert(n >= 0);'), (631, 2, u'-  assert(pcre_retval == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(323, 2, u'-    assert(re.error().empty());'), (336, 2, u'-    assert(re.error().empty());'), (343, 2, u'-    assert(re.error().empty());'), (578, 2, u'-                bool assertive = true) {'), (584, 2, u'-                  (assertive? "matches" : "doesn\'t match"),'), (586, 2, u'-  if (assertive) {'), (970, 2, u"-    assert(buf[strlen(buf)-1] != '9');"), (975, 2, u"-    assert(buf[strlen(buf)-1] != '9');"), (993, 2, u"-    assert(buf[strlen(buf)-1] != '9');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir", true));'), (3, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT(len2 <= len*4);'), (3, 1, u'+      assert(len2 <= len*4);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: logicalToVisualBiDi
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT(len2 <= len*4);'), (3, 1, u'+      assert(len2 <= len*4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT(len2 <= len*4);'), (3, 1, u'+      assert(len2 <= len*4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 1, u'+  assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 16);'), (64, 2, u'-    assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 16);')]
===========================================
===========================================
Total add: 43
Total del: 30
Header: COMXAudio::ApplyVolume
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 1, u'+  assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 16);'), (64, 2, u'-    assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 1, u'+  assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 16);'), (64, 2, u'-    assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(220, 1, u'+  assert(p <= end);'), (420, 2, u'-        assert(0);')]
===========================================
===========================================
Total add: 112
Total del: 324
Header: CBitstreamConverter::nal_bs_read_ue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(220, 1, u'+  assert(p <= end);'), (420, 2, u'-        assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(220, 1, u'+  assert(p <= end);'), (420, 2, u'-        assert(0);')]
===========================================
Class: class IOMXContext { class IOMXContext 
Class: class OMXCodecObserver : public BnOMXObserver { class OMXCodecObserver : public BnOMXObserver 
Class: class OMXNode { class OMXNode 
Class: class OMXBuffer { class OMXBuffer 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(newHeight != 0);'), (3, 1, u'+  assert(m_textureWidth != 0);')]
===========================================
===========================================
Total add: 10
Total del: 0
Header: CGUIFontTTFDX::ReallocTexture
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(newHeight != 0);'), (3, 1, u'+  assert(m_textureWidth != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(newHeight != 0);'), (3, 1, u'+  assert(m_textureWidth != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-        } else assert(0);')]
===========================================
===========================================
Total add: 9
Total del: 17
Header: COMXAudioCodecOMX::GetData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-        } else assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-        } else assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 2, u'-      assert(m_dispman_element2 != DISPMANX_NO_HANDLE);'), (28, 2, u'-      assert(m_dispman_element2 != (unsigned)DISPMANX_INVALID);')]
===========================================
===========================================
Total add: 0
Total del: 40
Header: CEGLNativeTypeRaspberryPI::SetNativeResolution
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 2, u'-      assert(m_dispman_element2 != DISPMANX_NO_HANDLE);'), (28, 2, u'-      assert(m_dispman_element2 != (unsigned)DISPMANX_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 2, u'-      assert(m_dispman_element2 != DISPMANX_NO_HANDLE);'), (28, 2, u'-      assert(m_dispman_element2 != (unsigned)DISPMANX_INVALID);')]
===========================================
Class:class __attribute__ ((visibility ())) UnknownDataSource : public DataSource { class __attribute__ ((visibility ())) UnknownDataSource : public DataSource 
Class:   class CStageFrightMediaSource : public MediaSource { 
Class:   class CStageFrightDecodeThread : public CThread { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(ch >= 0 || ch < AE_CH_MAX);'), (4, 1, u'+  ASSERT(ch >= 0 && ch < AE_CH_MAX);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: CAEChannelInfo::GetChName
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(ch >= 0 || ch < AE_CH_MAX);'), (4, 1, u'+  ASSERT(ch >= 0 && ch < AE_CH_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(ch >= 0 || ch < AE_CH_MAX);'), (4, 1, u'+  ASSERT(ch >= 0 && ch < AE_CH_MAX);')]
===========================================
Class:class CQueueNextFileJob : public CJob { 
Class:class CCodecIds class CCodecIds
Class: class AdvancedSettingsResetBase : public Test   typedef struct   {   
Class: class TestFileItemFallbackArt : public AdvancedSettingsResetBase,                                 public WithParamInterface<TestFileData> { 
Class:class TestFileItemBasePath : public AdvancedSettingsResetBase, class TestFileItemBasePath : public AdvancedSettingsResetBase,
Class: class TestDownloadQueue : public testing::Test { 
Class: class TestDownloadQueueManager : public testing::Test { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+       assert(dst <= omx_buffer->pBuffer + m_ChunkLen);')]
===========================================
===========================================
Total add: 25
Total del: 2
Header: COMXAudio::AddPackets
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+       assert(dst <= omx_buffer->pBuffer + m_ChunkLen);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+       assert(dst <= omx_buffer->pBuffer + m_ChunkLen);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+        } else assert(0);')]
===========================================
===========================================
Total add: 35
Total del: 3
Header: COMXAudioCodecOMX::GetData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+        } else assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+        } else assert(0);')]
===========================================
Class:  class DllLibVDADecoderInterface { 
Class: class DllLibVDADecoder : public DllDynamic, DllLibVDADecoderInterface { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(87, 2, u'-          assert(0);'), (96, 2, u'-          assert(0);')]
===========================================
===========================================
Total add: 4
Total del: 145
Header: COMXAudio::AddPackets
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(87, 2, u'-          assert(0);'), (96, 2, u'-          assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(87, 2, u'-          assert(0);'), (96, 2, u'-          assert(0);')]
===========================================
Class:   class CMACDiscoveryJob : public CJob { 
Class:   class WaitCondition { 
Class:   class NestDetect { 
Class:   class ProgressDialogHelper { 
Class: class NetworkStartWaiter : public WaitCondition { 
Class: class PingResponseWaiter : public WaitCondition, private IJobCallback { 
Class: class DllLibamCodecInterface { 
Class: class DllLibAmCodec : public DllDynamic, DllLibamCodecInterface { 
Class: class CDemuxStreamAudioCDDA   : public CDemuxStreamAudio { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(port.length());')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: CEventServer::StartServer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(port.length());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(port.length());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(buf_size>0);')]
===========================================
===========================================
Total add: 64
Total del: 2
Header: CAEEncoderFFmpeg::Encode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(buf_size>0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(buf_size>0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+        assert(m_writePos == cacheMaxPos);')]
===========================================
===========================================
Total add: 19
Total del: 10
Header: CFileCache::Process
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+        assert(m_writePos == cacheMaxPos);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+        assert(m_writePos == cacheMaxPos);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    av_assert0(buf->refcount);')]
===========================================
===========================================
Total add: 71
Total del: 153
Header: free_buffer_pool
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    av_assert0(buf->refcount);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    av_assert0(buf->refcount);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-static void assert_avoptions(AVDictionary *m)'), (9, 1, u'+void assert_avoptions(AVDictionary *m)')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: exit_program
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-static void assert_avoptions(AVDictionary *m)'), (9, 1, u'+void assert_avoptions(AVDictionary *m)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-static void assert_avoptions(AVDictionary *m)'), (9, 1, u'+void assert_avoptions(AVDictionary *m)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-static void assert_codec_experimental(AVCodecContext *c, int encoder)')]
===========================================
===========================================
Total add: 1
Total del: 18
Header: assert_avoptions
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-static void assert_codec_experimental(AVCodecContext *c, int encoder)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-static void assert_codec_experimental(AVCodecContext *c, int encoder)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+    av_assert0(pkt.size || !pkt.data);')]
===========================================
===========================================
Total add: 13
Total del: 27
Header: encode_audio_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+    av_assert0(pkt.size || !pkt.data);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+    av_assert0(pkt.size || !pkt.data);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Total add: 162
Total del: 104
Header: do_video_out
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+        av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(88, 1, u'+            av_assert0(buf->refcount>0);')]
===========================================
===========================================
Total add: 53
Total del: 41
Header: transcode_video
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(88, 1, u'+            av_assert0(buf->refcount>0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(88, 1, u'+            av_assert0(buf->refcount>0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-        assert_codec_experimental(ist->st->codec, 0);')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: init_input_stream
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-        assert_codec_experimental(ist->st->codec, 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-        assert_codec_experimental(ist->st->codec, 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+            av_assert0(ist && !ost->filter);')]
===========================================
===========================================
Total add: 12
Total del: 5
Header: transcode_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+            av_assert0(ist && !ost->filter);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+            av_assert0(ist && !ost->filter);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-            assert_codec_experimental(ost->st->codec, 1);')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: transcode_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-            assert_codec_experimental(ost->st->codec, 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-            assert_codec_experimental(ost->st->codec, 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+        av_assert0(ost->source_index >= 0);'), (297, 2, u'-        assert_file_overwrite(filename);')]
===========================================
===========================================
Total add: 126
Total del: 309
Header: copy_chapters
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+        av_assert0(ost->source_index >= 0);'), (297, 2, u'-        assert_file_overwrite(filename);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+        av_assert0(ost->source_index >= 0);'), (297, 2, u'-        assert_file_overwrite(filename);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    av_assert0(codec->flags & CODEC_FLAG_EMU_EDGE);'), (122, 2, u'-        av_assert0(codec->flags & CODEC_FLAG_EMU_EDGE);')]
===========================================
===========================================
Total add: 66
Total del: 225
Header: get_video_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    av_assert0(codec->flags & CODEC_FLAG_EMU_EDGE);'), (122, 2, u'-        av_assert0(codec->flags & CODEC_FLAG_EMU_EDGE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    av_assert0(codec->flags & CODEC_FLAG_EMU_EDGE);'), (122, 2, u'-        av_assert0(codec->flags & CODEC_FLAG_EMU_EDGE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    av_assert0(len < sizeof(buffer));')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: http_send_too_busy_reply
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    av_assert0(len < sizeof(buffer));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    av_assert0(len < sizeof(buffer));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    default: assert(0);'), (4, 1, u'+        av_assert2(0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: mcdc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    default: assert(0);'), (4, 1, u'+        av_assert2(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    default: assert(0);'), (4, 1, u'+        av_assert2(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    assert(code>=0 && code<=6);'), (24, 1, u'+    av_assert2(code >= 0 && code <= 6);')]
===========================================
===========================================
Total add: 15
Total del: 11
Header: mcdc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    assert(code>=0 && code<=6);'), (24, 1, u'+    av_assert2(code >= 0 && code <= 6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    assert(code>=0 && code<=6);'), (24, 1, u'+    av_assert2(code >= 0 && code <= 6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+    av_assert0(prestream <= buf + length);')]
===========================================
===========================================
Total add: 28
Total del: 19
Header: decode_i_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+    av_assert0(prestream <= buf + length);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+    av_assert0(prestream <= buf + length);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(idx >= 0);'), (3, 1, u'+        av_assert1(idx >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: codebook_trellis_rate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(idx >= 0);'), (3, 1, u'+        av_assert1(idx >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(idx >= 0);'), (3, 1, u'+        av_assert1(idx >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+            av_assert0(0);')]
===========================================
===========================================
Total add: 21
Total del: 2
Header: decode_channel_map
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+            av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+            av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+                av_assert0(diff >= 0 && diff <= 120);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: encode_scale_factors
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+                av_assert0(diff >= 0 && diff <= 120);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+                av_assert0(diff >= 0 && diff <= 120);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: sbr_make_f_master
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        av_assert0(sbr->kx[1] <= table[0]);')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: sbr_mapping
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        av_assert0(sbr->kx[1] <= table[0]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        av_assert0(sbr->kx[1] <= table[0]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(frac_pos >= 0 && frac_pos < precision);'), (3, 1, u'+    av_assert1(frac_pos >= 0 && frac_pos < precision);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_acelp_interpolate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(frac_pos >= 0 && frac_pos < precision);'), (3, 1, u'+    av_assert1(frac_pos >= 0 && frac_pos < precision);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(frac_pos >= 0 && frac_pos < precision);'), (3, 1, u'+    av_assert1(frac_pos >= 0 && frac_pos < precision);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(pathn < FREEZE_INTERVAL << avctx->trellis);\\'), (3, 1, u'+                        av_assert1(pathn < FREEZE_INTERVAL << avctx->trellis);\\')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: adpcm_compress_trellis
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(pathn < FREEZE_INTERVAL << avctx->trellis);\\'), (3, 1, u'+                        av_assert1(pathn < FREEZE_INTERVAL << avctx->trellis);\\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(pathn < FREEZE_INTERVAL << avctx->trellis);\\'), (3, 1, u'+                        av_assert1(pathn < FREEZE_INTERVAL << avctx->trellis);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MODE_4k75 <= mode && mode <= MODE_12k2);'), (3, 1, u'+    av_assert1(MODE_4k75 <= (signed)mode && mode <= MODE_12k2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decode_fixed_sparse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MODE_4k75 <= mode && mode <= MODE_12k2);'), (3, 1, u'+    av_assert1(MODE_4k75 <= (signed)mode && mode <= MODE_12k2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MODE_4k75 <= mode && mode <= MODE_12k2);'), (3, 1, u'+    av_assert1(MODE_4k75 <= (signed)mode && mode <= MODE_12k2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->block_last_index[n]>=0);'), (3, 1, u'+    av_assert2(s->block_last_index[n]>=0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dct_unquantize_h263_intra_armv5te
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->block_last_index[n]>=0);'), (3, 1, u'+    av_assert2(s->block_last_index[n]>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->block_last_index[n]>=0);'), (3, 1, u'+    av_assert2(s->block_last_index[n]>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->block_last_index[n]>=0);'), (3, 1, u'+    av_assert2(s->block_last_index[n]>=0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dct_unquantize_h263_inter_armv5te
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->block_last_index[n]>=0);'), (3, 1, u'+    av_assert2(s->block_last_index[n]>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->block_last_index[n]>=0);'), (3, 1, u'+    av_assert2(s->block_last_index[n]>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+        av_assert0(len < sizeof(header));')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: ff_ass_add_rect
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+        av_assert0(len < sizeof(header));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+        av_assert0(len < sizeof(header));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-                assert(0);'), (56, 1, u'+            av_assert1(0);')]
===========================================
===========================================
Total add: 27
Total del: 28
Header: reverseMatrixing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-                assert(0);'), (56, 1, u'+            av_assert1(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-                assert(0);'), (56, 1, u'+            av_assert1(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            av_assert0(size<=INT_MAX && p - pkt->data > size);'), (3, 1, u'+            av_assert0(size<=INT_MAX && p - pkt->data >= size);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: av_packet_split_side_data
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            av_assert0(size<=INT_MAX && p - pkt->data > size);'), (3, 1, u'+            av_assert0(size<=INT_MAX && p - pkt->data >= size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            av_assert0(size<=INT_MAX && p - pkt->data > size);'), (3, 1, u'+            av_assert0(size<=INT_MAX && p - pkt->data >= size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+        av_assert0(ret >= 0);'), (17, 1, u'+        av_assert0(dyn_vlc.table_size <= vlc->table_allocated);')]
===========================================
===========================================
Total add: 17
Total del: 4
Header: init_vlc_sparse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+        av_assert0(ret >= 0);'), (17, 1, u'+        av_assert0(dyn_vlc.table_size <= vlc->table_allocated);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+        av_assert0(ret >= 0);'), (17, 1, u'+        av_assert0(dyn_vlc.table_size <= vlc->table_allocated);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(symbols_size <= 2 || !symbols);'), (3, 1, u'+    av_assert0(symbols_size <= 2 || !symbols);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: init_vlc_sparse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(symbols_size <= 2 || !symbols);'), (3, 1, u'+    av_assert0(symbols_size <= 2 || !symbols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(symbols_size <= 2 || !symbols);'), (3, 1, u'+    av_assert0(symbols_size <= 2 || !symbols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        assert(bit_count == 8);'), (14, 1, u'+        av_assert1(bit_count == 8);')]
===========================================
===========================================
Total add: 9
Total del: 9
Header: bmp_encode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        assert(bit_count == 8);'), (14, 1, u'+        av_assert1(bit_count == 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        assert(bit_count == 8);'), (14, 1, u'+        av_assert1(bit_count == 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(len>0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: decode_bmv_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(len>0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(len>0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(c->low <= 0x1FF);'), (3, 1, u'+        av_assert0(c->low <= 0x1FF);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: put_cabac_terminate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(c->low <= 0x1FF);'), (3, 1, u'+        av_assert0(c->low <= 0x1FF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(c->low <= 0x1FF);'), (3, 1, u'+        av_assert0(c->low <= 0x1FF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((mb_type > B_SYM_16X16) && (mb_type < B_8X8));'), (7, 1, u'+        av_assert2(mb_type < B_8X8);')]
===========================================
===========================================
Total add: 20
Total del: 16
Header: decode_mb_b
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((mb_type > B_SYM_16X16) && (mb_type < B_8X8));'), (7, 1, u'+        av_assert2(mb_type < B_8X8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((mb_type > B_SYM_16X16) && (mb_type < B_8X8));'), (7, 1, u'+        av_assert2(mb_type < B_8X8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2((filter_length&1)==0 && filter_length>=4);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: ff_celp_lp_synthesis_filterf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2((filter_length&1)==0 && filter_length>=4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2((filter_length&1)==0 && filter_length>=4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(power <= 0x7fff);'), (3, 1, u'+    av_assert2(power <= 0x7fff);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_exp2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(power <= 0x7fff);'), (3, 1, u'+    av_assert2(power <= 0x7fff);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(power <= 0x7fff);'), (3, 1, u'+    av_assert2(power <= 0x7fff);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    av_assert0(av_image_check_size(avctx->width, avctx->height, 0, avctx) >= 0);')]
===========================================
===========================================
Total add: 7
Total del: 2
Header: dfa_decode_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    av_assert0(av_image_check_size(avctx->width, avctx->height, 0, avctx) >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    av_assert0(av_image_check_size(avctx->width, avctx->height, 0, avctx) >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(!ctx->vlc_codes[index]);'), (3, 1, u'+                    av_assert1(!ctx->vlc_codes[index]);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dnxhd_init_vlc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(!ctx->vlc_codes[index]);'), (3, 1, u'+                    av_assert1(!ctx->vlc_codes[index]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(!ctx->vlc_codes[index]);'), (3, 1, u'+                    av_assert1(!ctx->vlc_codes[index]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!alevel || j < 257);'), (3, 1, u'+            av_assert0(!alevel || j < 257);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dnxhd_init_vlc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!alevel || j < 257);'), (3, 1, u'+            av_assert0(!alevel || j < 257);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!alevel || j < 257);'), (3, 1, u'+            av_assert0(!alevel || j < 257);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(run < 63);'), (3, 1, u'+        av_assert0(run < 63);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dnxhd_init_vlc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(run < 63);'), (3, 1, u'+        av_assert0(run < 63);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(run < 63);'), (3, 1, u'+        av_assert0(run < 63);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1, 1, u'+    av_assert0(index >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: dnxhd_encode_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1, 1, u'+    av_assert0(index >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1, 1, u'+    av_assert0(index >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(nbits < ctx->cid_table->bit_depth + 4);'), (3, 1, u'+            av_assert1(nbits < ctx->cid_table->bit_depth + 4);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dnxhd_calc_bits_thread
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(nbits < ctx->cid_table->bit_depth + 4);'), (3, 1, u'+            av_assert1(nbits < ctx->cid_table->bit_depth + 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(nbits < ctx->cid_table->bit_depth + 4);'), (3, 1, u'+            av_assert1(nbits < ctx->cid_table->bit_depth + 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!v);'), (3, 1, u'+        av_assert1(!v);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: radix_count
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!v);'), (3, 1, u'+        av_assert1(!v);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!v);'), (3, 1, u'+        av_assert1(!v);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!buckets[j][0]);'), (3, 1, u'+        av_assert1(!buckets[j][0]);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: radix_count
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!buckets[j][0]);'), (3, 1, u'+        av_assert1(!buckets[j][0]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!buckets[j][0]);'), (3, 1, u'+        av_assert1(!buckets[j][0]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!(ctx->slice_size[i] & 3));'), (3, 1, u'+        av_assert1(!(ctx->slice_size[i] & 3));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dnxhd_encode_picture
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!(ctx->slice_size[i] & 3));'), (3, 1, u'+        av_assert1(!(ctx->slice_size[i] & 3));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!(ctx->slice_size[i] & 3));'), (3, 1, u'+        av_assert1(!(ctx->slice_size[i] & 3));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(640 + offset + 4 <= ctx->cid_table->coding_unit_size);'), (3, 1, u'+    av_assert1(640 + offset + 4 <= ctx->cid_table->coding_unit_size);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dnxhd_encode_picture
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(640 + offset + 4 <= ctx->cid_table->coding_unit_size);'), (3, 1, u'+    av_assert1(640 + offset + 4 <= ctx->cid_table->coding_unit_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(640 + offset + 4 <= ctx->cid_table->coding_unit_size);'), (3, 1, u'+    av_assert1(640 + offset + 4 <= ctx->cid_table->coding_unit_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(-512<b && b<512);'), (3, 1, u'+        av_assert2(-512<b && b<512);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: try_8x8basis_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(-512<b && b<512);'), (3, 1, u'+        av_assert2(-512<b && b<512);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(-512<b && b<512);'), (3, 1, u'+        av_assert2(-512<b && b<512);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h==8);'), (3, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: hadamard8_diff8x8_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h==8);'), (3, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h==8);'), (3, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h==8);'), (3, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: hadamard8_intra8x8_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h==8);'), (3, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h==8);'), (3, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(h==8);'), (6, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: dct_sad8x8_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(h==8);'), (6, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(h==8);'), (6, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    assert(h==8);'), (7, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: dct_max8x8_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    assert(h==8);'), (7, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    assert(h==8);'), (7, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(h==8);'), (9, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: quant_psnr8x8_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(h==8);'), (9, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(h==8);'), (9, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h==8);'), (3, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: rd8x8_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h==8);'), (3, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h==8);'), (3, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(level - 64);'), (3, 1, u'+        av_assert2(level - 64);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: rd8x8_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(level - 64);'), (3, 1, u'+        av_assert2(level - 64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(level - 64);'), (3, 1, u'+        av_assert2(level - 64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h==8);'), (3, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: bit8x8_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h==8);'), (3, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h==8);'), (3, 1, u'+    av_assert2(h==8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(level - 64);'), (3, 1, u'+        av_assert2(level - 64);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: bit8x8_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(level - 64);'), (3, 1, u'+        av_assert2(level - 64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(level - 64);'), (3, 1, u'+        av_assert2(level - 64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 2, u'-    assert(start_y < end_y && block_h);'), (39, 2, u'-    assert(start_x < end_x && block_w);')]
===========================================
===========================================
Total add: 1
Total del: 80
Header: FUNCC
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 2, u'-    assert(start_y < end_y && block_h);'), (39, 2, u'-    assert(start_x < end_x && block_w);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 2, u'-    assert(start_y < end_y && block_h);'), (39, 2, u'-    assert(start_x < end_x && block_w);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (55, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (90, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\')]
===========================================
===========================================
Total add: 0
Total del: 607
Header: PIXOP2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (55, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (90, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (55, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (90, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(dv_vlc.table_size == 1184);'), (3, 1, u'+        av_assert1(dv_vlc.table_size == 1184);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dvvideo_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(dv_vlc.table_size == 1184);'), (3, 1, u'+        av_assert1(dv_vlc.table_size == 1184);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(dv_vlc.table_size == 1184);'), (3, 1, u'+        av_assert1(dv_vlc.table_size == 1184);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((((int)blk) & 15) == 0);'), (3, 1, u'+    av_assert2((((int)blk) & 15) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dv_init_enc_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((((int)blk) & 15) == 0);'), (3, 1, u'+    av_assert2((((int)blk) & 15) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((((int)blk) & 15) == 0);'), (3, 1, u'+    av_assert2((((int)blk) & 15) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(b->next[prev] >= mb_area_start[a+1] || b->mb[prev]);'), (3, 1, u'+                    av_assert2(b->next[prev] >= mb_area_start[a+1] || b->mb[prev]);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dv_guess_qnos
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(b->next[prev] >= mb_area_start[a+1] || b->mb[prev]);'), (3, 1, u'+                    av_assert2(b->next[prev] >= mb_area_start[a+1] || b->mb[prev]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(b->next[prev] >= mb_area_start[a+1] || b->mb[prev]);'), (3, 1, u'+                    av_assert2(b->next[prev] >= mb_area_start[a+1] || b->mb[prev]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                                assert(a2 < 4);'), (3, 2, u'-                                assert(b->mb[b->next[k]]);'), (4, 1, u'+                                av_assert2(a2 < 4);'), (5, 1, u'+                                av_assert2(b->mb[b->next[k]]);'), (8, 2, u'-                                assert(b->prev[a2] == k && (a2 + 1 >= 4 || b->prev[a2+1] != k));'), (9, 1, u'+                                av_assert2(b->prev[a2] == k && (a2 + 1 >= 4 || b->prev[a2+1] != k));')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: dv_guess_qnos
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                                assert(a2 < 4);'), (3, 2, u'-                                assert(b->mb[b->next[k]]);'), (4, 1, u'+                                av_assert2(a2 < 4);'), (5, 1, u'+                                av_assert2(b->mb[b->next[k]]);'), (8, 2, u'-                                assert(b->prev[a2] == k && (a2 + 1 >= 4 || b->prev[a2+1] != k));'), (9, 1, u'+                                av_assert2(b->prev[a2] == k && (a2 + 1 >= 4 || b->prev[a2+1] != k));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                                assert(a2 < 4);'), (3, 2, u'-                                assert(b->mb[b->next[k]]);'), (4, 1, u'+                                av_assert2(a2 < 4);'), (5, 1, u'+                                av_assert2(b->mb[b->next[k]]);'), (8, 2, u'-                                assert(b->prev[a2] == k && (a2 + 1 >= 4 || b->prev[a2+1] != k));'), (9, 1, u'+                                av_assert2(b->prev[a2] == k && (a2 + 1 >= 4 || b->prev[a2+1] != k));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(color < 4);'), (3, 1, u'+            av_assert0(color < 4);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dvd_encode_rle
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(color < 4);'), (3, 1, u'+            av_assert0(color < 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(color < 4);'), (3, 1, u'+            av_assert0(color < 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!elbg->cells[i]);'), (3, 1, u'+    av_assert2(elbg->cells[i]);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: get_high_utility_cell
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!elbg->cells[i]);'), (3, 1, u'+    av_assert2(elbg->cells[i]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!elbg->cells[i]);'), (3, 1, u'+    av_assert2(elbg->cells[i]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        assert(s->quarter_sample);'), (9, 1, u'+        av_assert0(s->quarter_sample);')]
===========================================
===========================================
Total add: 4
Total del: 5
Header: decode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        assert(s->quarter_sample);'), (9, 1, u'+        av_assert0(s->quarter_sample);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        assert(s->quarter_sample);'), (9, 1, u'+        av_assert0(s->quarter_sample);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(!IS_INTRA(s->current_picture.f.mb_type[mb_xy]));'), (3, 2, u'-                    assert(s->last_picture_ptr && s->last_picture_ptr->f.data[0]);'), (4, 1, u'+                    av_assert1(!IS_INTRA(s->cur_pic->f.mb_type[mb_xy]));'), (5, 1, u'+                    av_assert1(s->last_pic && s->last_pic->f.data[0]);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: guess_mv
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(!IS_INTRA(s->current_picture.f.mb_type[mb_xy]));'), (3, 2, u'-                    assert(s->last_picture_ptr && s->last_picture_ptr->f.data[0]);'), (4, 1, u'+                    av_assert1(!IS_INTRA(s->cur_pic->f.mb_type[mb_xy]));'), (5, 1, u'+                    av_assert1(s->last_pic && s->last_pic->f.data[0]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(!IS_INTRA(s->current_picture.f.mb_type[mb_xy]));'), (3, 2, u'-                    assert(s->last_picture_ptr && s->last_picture_ptr->f.data[0]);'), (4, 1, u'+                    av_assert1(!IS_INTRA(s->cur_pic->f.mb_type[mb_xy]));'), (5, 1, u'+                    av_assert1(s->last_pic && s->last_pic->f.data[0]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+                    av_assert0(s->avctx->codec_id != AV_CODEC_ID_H264);')]
===========================================
===========================================
Total add: 7
Total del: 9
Header: ff_er_frame_end
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+                    av_assert0(s->avctx->codec_id != AV_CODEC_ID_H264);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+                    av_assert0(s->avctx->codec_id != AV_CODEC_ID_H264);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(134, 2, u'-                av_assert0(f->plane[j].quant_table_index == f->avctx->context_model);'), (161, 2, u'-    assert(s->width && s->height);')]
===========================================
===========================================
Total add: 7
Total del: 157
Header: encode_line
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(134, 2, u'-                av_assert0(f->plane[j].quant_table_index == f->avctx->context_model);'), (161, 2, u'-    assert(s->width && s->height);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(134, 2, u'-                av_assert0(f->plane[j].quant_table_index == f->avctx->context_model);'), (161, 2, u'-    assert(s->width && s->height);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+    av_assert0(f->slice_count > 0);')]
===========================================
===========================================
Total add: 16
Total del: 43
Header: common_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+    av_assert0(f->slice_count > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+    av_assert0(f->slice_count > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(153, 2, u'-        av_assert0(s->version>=2);'), (223, 2, u'-                av_assert0(!sf->rc_stat2[i]);')]
===========================================
===========================================
Total add: 18
Total del: 252
Header: write_extra_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(153, 2, u'-        av_assert0(s->version>=2);'), (223, 2, u'-                av_assert0(!sf->rc_stat2[i]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(153, 2, u'-        av_assert0(s->version>=2);'), (223, 2, u'-                av_assert0(!sf->rc_stat2[i]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(98, 2, u'-            av_assert0(bytes < buf_size/f->slice_count);'), (100, 2, u'-            av_assert0(bytes < (1<<24));')]
===========================================
===========================================
Total add: 2
Total del: 153
Header: clear_state
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(98, 2, u'-            av_assert0(bytes < buf_size/f->slice_count);'), (100, 2, u'-            av_assert0(bytes < (1<<24));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(98, 2, u'-            av_assert0(bytes < buf_size/f->slice_count);'), (100, 2, u'-            av_assert0(bytes < (1<<24));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            assert(s->channels == 2);\\')]
===========================================
===========================================
Total add: 3
Total del: 36
Header: flac_decode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            assert(s->channels == 2);\\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            assert(s->channels == 2);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(samplerate > 0);'), (3, 1, u'+    av_assert0(samplerate > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: select_blocksize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(samplerate > 0);'), (3, 1, u'+    av_assert0(samplerate > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(samplerate > 0);'), (3, 1, u'+    av_assert0(samplerate > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(pmin >= 0 && pmin <= MAX_PARTITION_ORDER);'), (6, 2, u'-    assert(pmax >= 0 && pmax <= MAX_PARTITION_ORDER);'), (7, 2, u'-    assert(pmin <= pmax);'), (8, 1, u'+    av_assert1(pmin >= 0 && pmin <= MAX_PARTITION_ORDER);'), (9, 1, u'+    av_assert1(pmax >= 0 && pmax <= MAX_PARTITION_ORDER);'), (10, 1, u'+    av_assert1(pmin <= pmax);')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: calc_rice_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(pmin >= 0 && pmin <= MAX_PARTITION_ORDER);'), (6, 2, u'-    assert(pmax >= 0 && pmax <= MAX_PARTITION_ORDER);'), (7, 2, u'-    assert(pmin <= pmax);'), (8, 1, u'+    av_assert1(pmin >= 0 && pmin <= MAX_PARTITION_ORDER);'), (9, 1, u'+    av_assert1(pmax >= 0 && pmax <= MAX_PARTITION_ORDER);'), (10, 1, u'+    av_assert1(pmin <= pmax);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(pmin >= 0 && pmin <= MAX_PARTITION_ORDER);'), (6, 2, u'-    assert(pmax >= 0 && pmax <= MAX_PARTITION_ORDER);'), (7, 2, u'-    assert(pmin <= pmax);'), (8, 1, u'+    av_assert1(pmin >= 0 && pmin <= MAX_PARTITION_ORDER);'), (9, 1, u'+    av_assert1(pmax >= 0 && pmax <= MAX_PARTITION_ORDER);'), (10, 1, u'+    av_assert1(pmin <= pmax);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(139, 1, u'+    av_assert0(!avctx->internal->frame_thread_encoder);'), (177, 1, u'+        av_assert0(!thread_avctx->internal->frame_thread_encoder);'), (221, 1, u'+    av_assert1(!*got_packet_ptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(pathn[index] < FREEZE_INTERVAL * frontier);\\'), (3, 1, u'+                    av_assert2(pathn[index] < FREEZE_INTERVAL * frontier);\\')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: g722_encode_trellis
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(pathn[index] < FREEZE_INTERVAL * frontier);\\'), (3, 1, u'+                    av_assert2(pathn[index] < FREEZE_INTERVAL * frontier);\\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(pathn[index] < FREEZE_INTERVAL * frontier);\\'), (3, 1, u'+                    av_assert2(pathn[index] < FREEZE_INTERVAL * frontier);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    av_assert2(!(val & 0x80000000));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: unpack_bitstream
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    av_assert2(!(val & 0x80000000));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    av_assert2(!(val & 0x80000000));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    av_assert0(s->current_picture.f.pict_type == s->current_picture_ptr->f.pict_type);'), (6, 1, u'+    av_assert0(s->current_picture.f.pict_type == s->pict_type);'), (8, 2, u'-assert(s->current_picture.f.pict_type == s->current_picture_ptr->f.pict_type);'), (9, 2, u'-assert(s->current_picture.f.pict_type == s->pict_type);')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: retry:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    av_assert0(s->current_picture.f.pict_type == s->current_picture_ptr->f.pict_type);'), (6, 1, u'+    av_assert0(s->current_picture.f.pict_type == s->pict_type);'), (8, 2, u'-assert(s->current_picture.f.pict_type == s->current_picture_ptr->f.pict_type);'), (9, 2, u'-assert(s->current_picture.f.pict_type == s->pict_type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    av_assert0(s->current_picture.f.pict_type == s->current_picture_ptr->f.pict_type);'), (6, 1, u'+    av_assert0(s->current_picture.f.pict_type == s->pict_type);'), (8, 2, u'-assert(s->current_picture.f.pict_type == s->current_picture_ptr->f.pict_type);'), (9, 2, u'-assert(s->current_picture.f.pict_type == s->pict_type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(h->mtype > 1);'), (3, 1, u'+        av_assert1(h->mtype > 1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_h261_encode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(h->mtype > 1);'), (3, 1, u'+        av_assert1(h->mtype > 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(h->mtype > 1);'), (3, 1, u'+        av_assert1(h->mtype > 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(cbp>0);'), (4, 1, u'+        av_assert1(cbp>0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ff_h261_encode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(cbp>0);'), (4, 1, u'+        av_assert1(cbp>0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(cbp>0);'), (4, 1, u'+        av_assert1(cbp>0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(slevel != 0);'), (3, 2, u'-                assert(level <= 127);'), (4, 1, u'+                av_assert1(slevel != 0);'), (5, 1, u'+                av_assert1(level <= 127);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: h261_encode_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(slevel != 0);'), (3, 2, u'-                assert(level <= 127);'), (4, 1, u'+                av_assert1(slevel != 0);'), (5, 1, u'+                av_assert1(level <= 127);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(slevel != 0);'), (3, 2, u'-                assert(level <= 127);'), (4, 1, u'+                av_assert1(slevel != 0);'), (5, 1, u'+                av_assert1(level <= 127);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->mb_x==0 && s->mb_y==s->mb_height);'), (3, 1, u'+    av_assert1(s->mb_x==0 && s->mb_y==s->mb_height);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: decode_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->mb_x==0 && s->mb_y==s->mb_height);'), (3, 1, u'+    av_assert1(s->mb_x==0 && s->mb_y==s->mb_height);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->mb_x==0 && s->mb_y==s->mb_height);'), (3, 1, u'+    av_assert1(s->mb_x==0 && s->mb_y==s->mb_height);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(s->bitstream_buffer_size==0);'), (9, 1, u'+    av_assert1(s->bitstream_buffer_size==0);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: retry:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(s->bitstream_buffer_size==0);'), (9, 1, u'+    av_assert1(s->bitstream_buffer_size==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(s->bitstream_buffer_size==0);'), (9, 1, u'+    av_assert1(s->bitstream_buffer_size==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(84, 1, u'+    av_assert1(ref >= 0);'), (225, 1, u'+    av_assert0(!pic->f.data[0]);'), (229, 1, u'+        av_assert0(!pic->f.hwaccel_picture_private);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    av_assert2(height >= 0);')]
===========================================
===========================================
Total add: 18
Total del: 14
Header: ff_h264_decode_rbsp_trailing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    av_assert2(height >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    av_assert2(height >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 2, u'-        assert(IS_8X8(mb_type));'), (48, 1, u'+        av_assert2(IS_8X8(mb_type));'), (80, 2, u'-                assert(IS_SUB_4X4(sub_mb_type));'), (85, 1, u'+                av_assert2(IS_SUB_4X4(sub_mb_type));')]
===========================================
===========================================
Total add: 47
Total del: 35
Header: await_references
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 2, u'-        assert(IS_8X8(mb_type));'), (48, 1, u'+        av_assert2(IS_8X8(mb_type));'), (80, 2, u'-                assert(IS_SUB_4X4(sub_mb_type));'), (85, 1, u'+                av_assert2(IS_SUB_4X4(sub_mb_type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 2, u'-        assert(IS_8X8(mb_type));'), (48, 1, u'+        av_assert2(IS_8X8(mb_type));'), (80, 2, u'-                assert(IS_SUB_4X4(sub_mb_type));'), (85, 1, u'+                av_assert2(IS_SUB_4X4(sub_mb_type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(90, 1, u'+        av_assert0((void*)&h->cabac == &h->mb_padding + 1);')]
===========================================
===========================================
Total add: 83
Total del: 13
Header: decode_init_thread_copy
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(90, 1, u'+        av_assert0((void*)&h->cabac == &h->mb_padding + 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(90, 1, u'+        av_assert0((void*)&h->cabac == &h->mb_padding + 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 2, u'-    assert(s->linesize && s->uvlinesize);'), (86, 1, u'+    assert(h->linesize && h->uvlinesize);')]
===========================================
===========================================
Total add: 75
Total del: 41
Header: decode_update_thread_context
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 2, u'-    assert(s->linesize && s->uvlinesize);'), (86, 1, u'+    assert(h->linesize && h->uvlinesize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 2, u'-    assert(s->linesize && s->uvlinesize);'), (86, 1, u'+    assert(h->linesize && h->uvlinesize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->current_picture_ptr->long_ref==0);'), (3, 1, u'+    assert(h->cur_pic_ptr->long_ref == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_h264_frame_start
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->current_picture_ptr->long_ref==0);'), (3, 1, u'+    assert(h->cur_pic_ptr->long_ref == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->current_picture_ptr->long_ref==0);'), (3, 1, u'+    assert(h->cur_pic_ptr->long_ref == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+                        av_assert2(h->mb_y || linesize <= block_offset[i]);')]
===========================================
===========================================
Total add: 41
Total del: 11
Header: hl_decode_mb_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+                        av_assert2(h->mb_y || linesize <= block_offset[i]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+                        av_assert2(h->mb_y || linesize <= block_offset[i]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(135, 2, u'-        av_assert0(s->avctx->sample_aspect_ratio.den);')]
===========================================
===========================================
Total add: 125
Total del: 174
Header: decode_slice_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(135, 2, u'-        av_assert0(s->avctx->sample_aspect_ratio.den);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(135, 2, u'-        av_assert0(s->avctx->sample_aspect_ratio.den);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+            assert(h0->cur_pic_ptr);'), (11, 1, u'+            assert(h0->cur_pic_ptr->f.data[0]);'), (12, 1, u'+            assert(h0->cur_pic_ptr->f.reference != DELAYED_PIC_REF);')]
===========================================
===========================================
Total add: 73
Total del: 3
Header: decode_slice_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+            assert(h0->cur_pic_ptr);'), (11, 1, u'+            assert(h0->cur_pic_ptr->f.data[0]);'), (12, 1, u'+            assert(h0->cur_pic_ptr->f.reference != DELAYED_PIC_REF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+            assert(h0->cur_pic_ptr);'), (11, 1, u'+            assert(h0->cur_pic_ptr->f.data[0]);'), (12, 1, u'+            assert(h0->cur_pic_ptr->f.reference != DELAYED_PIC_REF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            assert(s0->current_picture_ptr);'), (5, 2, u'-            assert(s0->current_picture_ptr->f.data[0]);'), (6, 2, u'-            assert(s0->current_picture_ptr->f.reference != DELAYED_PIC_REF);'), (11, 1, u'+            assert(h0->cur_pic_ptr);'), (12, 1, u'+            assert(h0->cur_pic_ptr->f.data[0]);'), (13, 1, u'+            assert(h0->cur_pic_ptr->f.reference != DELAYED_PIC_REF);'), (57, 2, u'-            assert(!s0->current_picture_ptr);')]
===========================================
===========================================
Total add: 24
Total del: 29
Header: decode_slice_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            assert(s0->current_picture_ptr);'), (5, 2, u'-            assert(s0->current_picture_ptr->f.data[0]);'), (6, 2, u'-            assert(s0->current_picture_ptr->f.reference != DELAYED_PIC_REF);'), (11, 1, u'+            assert(h0->cur_pic_ptr);'), (12, 1, u'+            assert(h0->cur_pic_ptr->f.data[0]);'), (13, 1, u'+            assert(h0->cur_pic_ptr->f.reference != DELAYED_PIC_REF);'), (57, 2, u'-            assert(!s0->current_picture_ptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            assert(s0->current_picture_ptr);'), (5, 2, u'-            assert(s0->current_picture_ptr->f.data[0]);'), (6, 2, u'-            assert(s0->current_picture_ptr->f.reference != DELAYED_PIC_REF);'), (11, 1, u'+            assert(h0->cur_pic_ptr);'), (12, 1, u'+            assert(h0->cur_pic_ptr->f.data[0]);'), (13, 1, u'+            assert(h0->cur_pic_ptr->f.reference != DELAYED_PIC_REF);'), (57, 2, u'-            assert(!s0->current_picture_ptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-    assert(s->mb_num == s->mb_width * s->mb_height);'), (27, 1, u'+    av_assert1(h->mb_num == h->mb_width * h->mb_height);'), (37, 2, u'-    assert(s->mb_y < s->mb_height);'), (42, 1, u'+    av_assert1(h->mb_y < h->mb_height);')]
===========================================
===========================================
Total add: 38
Total del: 31
Header: decode_slice_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-    assert(s->mb_num == s->mb_width * s->mb_height);'), (27, 1, u'+    av_assert1(h->mb_num == h->mb_width * h->mb_height);'), (37, 2, u'-    assert(s->mb_y < s->mb_height);'), (42, 1, u'+    av_assert1(h->mb_y < h->mb_height);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-    assert(s->mb_num == s->mb_width * s->mb_height);'), (27, 1, u'+    av_assert1(h->mb_num == h->mb_width * h->mb_height);'), (37, 2, u'-    assert(s->mb_y < s->mb_height);'), (42, 1, u'+    av_assert1(h->mb_y < h->mb_height);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+    av_assert0(h->block_offset[15] == (4 * ((scan8[15] - scan8[0]) & 7) << h->pixel_shift) + 4 * h->linesize * ((scan8[15] - scan8[0]) >> 3));')]
===========================================
===========================================
Total add: 34
Total del: 21
Header: decode_finish_row
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+    av_assert0(h->block_offset[15] == (4 * ((scan8[15] - scan8[0]) & 7) << h->pixel_shift) + 4 * h->linesize * ((scan8[15] - scan8[0]) >> 3));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+    av_assert0(h->block_offset[15] == (4 * ((scan8[15] - scan8[0]) & 7) << h->pixel_shift) + 4 * h->linesize * ((scan8[15] - scan8[0]) >> 3));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+        av_assert0(context_count > 0);')]
===========================================
===========================================
Total add: 21
Total del: 16
Header: execute_decode_slices
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+        av_assert0(context_count > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+        av_assert0(context_count > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(227, 2, u'-                if(h->is_avc) av_assert0(next_avc - buf_index + consumed == nalsize);'), (278, 1, u'+                        av_assert0(next_avc - buf_index + consumed == nalsize);')]
===========================================
===========================================
Total add: 198
Total del: 136
Header: decode_nal_units
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(227, 2, u'-                if(h->is_avc) av_assert0(next_avc - buf_index + consumed == nalsize);'), (278, 1, u'+                        av_assert0(next_avc - buf_index + consumed == nalsize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(227, 2, u'-                if(h->is_avc) av_assert0(next_avc - buf_index + consumed == nalsize);'), (278, 1, u'+                        av_assert0(next_avc - buf_index + consumed == nalsize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    assert(pict->data[0] || !*data_size);'), (92, 1, u'+    assert(pict->data[0] || !*got_frame);')]
===========================================
===========================================
Total add: 9
Total del: 95
Header: not_extra:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    assert(pict->data[0] || !*data_size);'), (92, 1, u'+    assert(pict->data[0] || !*got_frame);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    assert(pict->data[0] || !*data_size);'), (92, 1, u'+    assert(pict->data[0] || !*got_frame);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(coeff_count > 0);'), (3, 1, u'+    av_assert2(coeff_count > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decode_cabac_residual_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(coeff_count > 0);'), (3, 1, u'+    av_assert2(coeff_count > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(coeff_count > 0);'), (3, 1, u'+    av_assert2(coeff_count > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert( cat == 1 || cat ==  2 || cat ==  4 || cat == 7 || cat == 8 || cat == 11 || cat == 12 );'), (3, 1, u'+            av_assert2( cat == 1 || cat ==  2 || cat ==  4 || cat == 7 || cat == 8 || cat == 11 || cat == 12 );')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decode_cabac_residual_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert( cat == 1 || cat ==  2 || cat ==  4 || cat == 7 || cat == 8 || cat == 11 || cat == 12 );'), (3, 1, u'+            av_assert2( cat == 1 || cat ==  2 || cat ==  4 || cat == 7 || cat == 8 || cat == 11 || cat == 12 );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert( cat == 1 || cat ==  2 || cat ==  4 || cat == 7 || cat == 8 || cat == 11 || cat == 12 );'), (3, 1, u'+            av_assert2( cat == 1 || cat ==  2 || cat ==  4 || cat == 7 || cat == 8 || cat == 11 || cat == 12 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(h->slice_type_nos == AV_PICTURE_TYPE_B);'), (3, 1, u'+        av_assert2(h->slice_type_nos == AV_PICTURE_TYPE_B);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_h264_decode_mb_cabac
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(h->slice_type_nos == AV_PICTURE_TYPE_B);'), (3, 1, u'+        av_assert2(h->slice_type_nos == AV_PICTURE_TYPE_B);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(h->slice_type_nos == AV_PICTURE_TYPE_B);'), (3, 1, u'+        av_assert2(h->slice_type_nos == AV_PICTURE_TYPE_B);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(h->slice_type_nos == AV_PICTURE_TYPE_I);'), (3, 1, u'+        av_assert2(h->slice_type_nos == AV_PICTURE_TYPE_I);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_h264_decode_mb_cabac
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(h->slice_type_nos == AV_PICTURE_TYPE_I);'), (3, 1, u'+        av_assert2(h->slice_type_nos == AV_PICTURE_TYPE_I);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(h->slice_type_nos == AV_PICTURE_TYPE_I);'), (3, 1, u'+        av_assert2(h->slice_type_nos == AV_PICTURE_TYPE_I);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(IS_8X16(mb_type));'), (3, 1, u'+            av_assert2(IS_8X16(mb_type));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decode_intra_mb:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(IS_8X16(mb_type));'), (3, 1, u'+            av_assert2(IS_8X16(mb_type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(IS_8X16(mb_type));'), (3, 1, u'+            av_assert2(IS_8X16(mb_type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(offset == FF_ARRAY_ELEMS(coeff_token_vlc_tables));'), (3, 1, u'+        av_assert0(offset == FF_ARRAY_ELEMS(coeff_token_vlc_tables));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_h264_decode_init_vlc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(offset == FF_ARRAY_ELEMS(coeff_token_vlc_tables));'), (3, 1, u'+        av_assert0(offset == FF_ARRAY_ELEMS(coeff_token_vlc_tables));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(offset == FF_ARRAY_ELEMS(coeff_token_vlc_tables));'), (3, 1, u'+        av_assert0(offset == FF_ARRAY_ELEMS(coeff_token_vlc_tables));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(total_coeff<=16);'), (5, 1, u'+    av_assert2(total_coeff<=16);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: decode_residual
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(total_coeff<=16);'), (5, 1, u'+    av_assert2(total_coeff<=16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(total_coeff<=16);'), (5, 1, u'+    av_assert2(total_coeff<=16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((cbp&15) == 0 || (cbp&15) == 15);'), (3, 1, u'+        av_assert2((cbp&15) == 0 || (cbp&15) == 15);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decode_luma_residual
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((cbp&15) == 0 || (cbp&15) == 15);'), (3, 1, u'+        av_assert2((cbp&15) == 0 || (cbp&15) == 15);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((cbp&15) == 0 || (cbp&15) == 15);'), (3, 1, u'+        av_assert2((cbp&15) == 0 || (cbp&15) == 15);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-       assert(h->slice_type_nos == AV_PICTURE_TYPE_I);'), (3, 1, u'+       av_assert2(h->slice_type_nos == AV_PICTURE_TYPE_I);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_h264_decode_mb_cavlc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-       assert(h->slice_type_nos == AV_PICTURE_TYPE_I);'), (3, 1, u'+       av_assert2(h->slice_type_nos == AV_PICTURE_TYPE_I);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-       assert(h->slice_type_nos == AV_PICTURE_TYPE_I);'), (3, 1, u'+       av_assert2(h->slice_type_nos == AV_PICTURE_TYPE_I);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(h->slice_type_nos == AV_PICTURE_TYPE_P); //FIXME SP correct ?'), (3, 1, u'+            av_assert2(h->slice_type_nos == AV_PICTURE_TYPE_P); //FIXME SP correct ?')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: decode_intra_mb:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(h->slice_type_nos == AV_PICTURE_TYPE_P); //FIXME SP correct ?'), (3, 1, u'+            av_assert2(h->slice_type_nos == AV_PICTURE_TYPE_P); //FIXME SP correct ?')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(h->slice_type_nos == AV_PICTURE_TYPE_P); //FIXME SP correct ?'), (3, 1, u'+            av_assert2(h->slice_type_nos == AV_PICTURE_TYPE_P); //FIXME SP correct ?')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(IS_8X16(mb_type));'), (3, 1, u'+            av_assert2(IS_8X16(mb_type));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decode_intra_mb:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(IS_8X16(mb_type));'), (3, 1, u'+            av_assert2(IS_8X16(mb_type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(IS_8X16(mb_type));'), (3, 1, u'+            av_assert2(IS_8X16(mb_type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!FRAME_MBAFF);'), (3, 1, u'+    av_assert2(!FRAME_MBAFF);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: h264_filter_mb_fast_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!FRAME_MBAFF);'), (3, 1, u'+    av_assert2(!FRAME_MBAFF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!FRAME_MBAFF);'), (3, 1, u'+    av_assert2(!FRAME_MBAFF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(pc->last_index + next >= 0 );'), (3, 1, u'+            av_assert1(pc->last_index + next >= 0 );')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: h264_parse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(pc->last_index + next >= 0 );'), (3, 1, u'+            av_assert1(pc->last_index + next >= 0 );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(pc->last_index + next >= 0 );'), (3, 1, u'+            av_assert1(pc->last_index + next >= 0 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(len<=32);'), (5, 2, u'-            assert(len<=32);'), (6, 1, u'+            av_assert0(len<=32);'), (9, 1, u'+            av_assert0(len<=32);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: ff_h264_fill_default_ref_list
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(len<=32);'), (5, 2, u'-            assert(len<=32);'), (6, 1, u'+            av_assert0(len<=32);'), (9, 1, u'+            av_assert0(len<=32);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(len<=32);'), (5, 2, u'-            assert(len<=32);'), (6, 1, u'+            av_assert0(len<=32);'), (9, 1, u'+            av_assert0(len<=32);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        assert(len <= 32);'), (7, 1, u'+        av_assert0(len<=32);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: ff_h264_fill_default_ref_list
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        assert(len <= 32);'), (7, 1, u'+        av_assert0(len<=32);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        assert(len <= 32);'), (7, 1, u'+        av_assert0(len<=32);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);\\'), (68, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);\\'), (103, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+        av_assert0(bit_depth<=8);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: ff_h264dsp_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+        av_assert0(bit_depth<=8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+        av_assert0(bit_depth<=8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+            av_assert0(bit_depth<=8);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: ff_h264_pred_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+            av_assert0(bit_depth<=8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+            av_assert0(bit_depth<=8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(217, 2, u'-    assert(s->width>0 && s->height>0);')]
===========================================
===========================================
Total add: 8
Total del: 303
Header: generate_bits_table
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(217, 2, u'-    assert(s->width>0 && s->height>0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(217, 2, u'-    assert(s->width>0 && s->height>0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 2, u'-        assert(val < 32 && val >0 && repeat<256 && repeat>0);'), (53, 1, u'+    av_assert1(s->width > 0 && s->height > 0);')]
===========================================
===========================================
Total add: 9
Total del: 984
Header: s->bgr32=1;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 2, u'-        assert(val < 32 && val >0 && repeat<256 && repeat>0);'), (53, 1, u'+    av_assert1(s->width > 0 && s->height > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 2, u'-        assert(val < 32 && val >0 && repeat<256 && repeat>0);'), (53, 1, u'+    av_assert1(s->width > 0 && s->height > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(mode<4);'), (3, 1, u'+    av_assert2(mode<4);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: x8_select_ac_table
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(mode<4);'), (3, 1, u'+    av_assert2(mode<4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(mode<4);'), (3, 1, u'+    av_assert2(mode<4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->j_ac_vlc[mode]);'), (3, 1, u'+    av_assert2(w->j_ac_vlc[mode]);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: x8_select_ac_table
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->j_ac_vlc[mode]);'), (3, 1, u'+    av_assert2(w->j_ac_vlc[mode]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->j_ac_vlc[mode]);'), (3, 1, u'+    av_assert2(w->j_ac_vlc[mode]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->j_orient_vlc);'), (3, 2, u'-    assert(w->j_orient_vlc->table);')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: x8_get_orient_vlc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->j_orient_vlc);'), (3, 2, u'-    assert(w->j_orient_vlc->table);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->j_orient_vlc);'), (3, 2, u'-    assert(w->j_orient_vlc->table);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(mode<3);'), (3, 1, u'+    av_assert2(mode<3);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: x8_get_dc_rlf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(mode<3);'), (3, 1, u'+    av_assert2(mode<3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(mode<3);'), (3, 1, u'+    av_assert2(mode<3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->j_dc_vlc);'), (3, 2, u'-    assert(w->j_dc_vlc[mode]->table);')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: x8_get_dc_rlf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->j_dc_vlc);'), (3, 2, u'-    assert(w->j_dc_vlc[mode]->table);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->j_dc_vlc);'), (3, 2, u'-    assert(w->j_dc_vlc[mode]->table);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->orient < 3);'), (3, 1, u'+    av_assert2(w->orient < 3);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: x8_setup_spatial_predictor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->orient < 3);'), (3, 1, u'+    av_assert2(w->orient < 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->orient < 3);'), (3, 1, u'+    av_assert2(w->orient < 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(w->raw_orient < 12 );'), (3, 2, u'-        assert(w->orient<3);'), (4, 1, u'+        av_assert2(w->raw_orient < 12 );'), (5, 1, u'+        av_assert2(w->orient<3);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: x8_setup_spatial_predictor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(w->raw_orient < 12 );'), (3, 2, u'-        assert(w->orient<3);'), (4, 1, u'+        av_assert2(w->raw_orient < 12 );'), (5, 1, u'+        av_assert2(w->orient<3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(w->raw_orient < 12 );'), (3, 2, u'-        assert(w->orient<3);'), (4, 1, u'+        av_assert2(w->raw_orient < 12 );'), (5, 1, u'+        av_assert2(w->orient<3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->orient<12);'), (3, 1, u'+    av_assert2(w->orient<12);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: x8_decode_intra_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->orient<12);'), (3, 1, u'+    av_assert2(w->orient<12);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(w->orient<12);'), (3, 1, u'+    av_assert2(w->orient<12);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->mb_width>0);'), (3, 1, u'+    av_assert0(s->mb_width>0);')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: ff_intrax8_common_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->mb_width>0);'), (3, 1, u'+    av_assert0(s->mb_width>0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->mb_width>0);'), (3, 1, u'+    av_assert0(s->mb_width>0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: ff_intrax8_decode_picture
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(p < end);'), (6, 1, u'+    av_assert2(p < end);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: h263_decode_gob_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(p < end);'), (6, 1, u'+    av_assert2(p < end);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(p < end);'), (6, 1, u'+    av_assert2(p < end);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type == AV_PICTURE_TYPE_P);'), (3, 1, u'+    av_assert2(s->pict_type == AV_PICTURE_TYPE_P);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: preview_obmc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type == AV_PICTURE_TYPE_P);'), (3, 1, u'+    av_assert2(s->pict_type == AV_PICTURE_TYPE_P);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type == AV_PICTURE_TYPE_P);'), (3, 1, u'+    av_assert2(s->pict_type == AV_PICTURE_TYPE_P);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!s->h263_pred);'), (3, 1, u'+    av_assert2(!s->h263_pred);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_h263_decode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!s->h263_pred);'), (3, 1, u'+    av_assert2(!s->h263_pred);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!s->h263_pred);'), (3, 1, u'+    av_assert2(!s->h263_pred);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!s->mb_intra);'), (3, 1, u'+        av_assert2(!s->mb_intra);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_h263_decode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!s->mb_intra);'), (3, 1, u'+        av_assert2(!s->mb_intra);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!s->mb_intra);'), (3, 1, u'+        av_assert2(!s->mb_intra);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->mb_x == 0 && s->mb_y == 0);'), (3, 1, u'+        av_assert1(s->mb_x == 0 && s->mb_y == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: h263_encode_picture_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->mb_x == 0 && s->mb_y == 0);'), (3, 1, u'+        av_assert1(s->mb_x == 0 && s->mb_y == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->mb_x == 0 && s->mb_y == 0);'), (3, 1, u'+        av_assert1(s->mb_x == 0 && s->mb_y == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(slevel != 0);'), (3, 1, u'+                av_assert2(slevel != 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: h263_encode_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(slevel != 0);'), (3, 1, u'+                av_assert2(slevel != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(slevel != 0);'), (3, 1, u'+                av_assert2(slevel != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->mb_intra);'), (3, 1, u'+        av_assert2(s->mb_intra);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: h263_encode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->mb_intra);'), (3, 1, u'+        av_assert2(s->mb_intra);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->mb_intra);'), (3, 1, u'+        av_assert2(s->mb_intra);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MAX_LEVEL >= 64);'), (3, 2, u'-    assert(MAX_RUN   >= 63);'), (4, 1, u'+    av_assert0(MAX_LEVEL >= 64);'), (5, 1, u'+    av_assert0(MAX_RUN   >= 63);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: init_uni_h263_rl_tab
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MAX_LEVEL >= 64);'), (3, 2, u'-    assert(MAX_RUN   >= 63);'), (4, 1, u'+    av_assert0(MAX_LEVEL >= 64);'), (5, 1, u'+    av_assert0(MAX_RUN   >= 63);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MAX_LEVEL >= 64);'), (3, 2, u'-    assert(MAX_RUN   >= 63);'), (4, 1, u'+    av_assert0(MAX_LEVEL >= 64);'), (5, 1, u'+    av_assert0(MAX_RUN   >= 63);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: getnbctxno
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-   assert(n <= FF_KBD_WINDOW_MAX);'), (3, 1, u'+   av_assert0(n <= FF_KBD_WINDOW_MAX);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_kbd_window_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-   assert(n <= FF_KBD_WINDOW_MAX);'), (3, 1, u'+   av_assert0(n <= FF_KBD_WINDOW_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-   assert(n <= FF_KBD_WINDOW_MAX);'), (3, 1, u'+   av_assert0(n <= FF_KBD_WINDOW_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(avctx->width && avctx->height);'), (3, 1, u'+    av_assert0(avctx->width && avctx->height);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encode_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(avctx->width && avctx->height);'), (3, 1, u'+    av_assert0(avctx->width && avctx->height);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(avctx->width && avctx->height);'), (3, 1, u'+    av_assert0(avctx->width && avctx->height);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(enc_buf->length > 0);'), (3, 2, u'-            assert(enc_buf->length <= buf_size);'), (4, 1, u'+            av_assert0(enc_buf->length > 0);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: libschroedinger_encode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(enc_buf->length > 0);'), (3, 2, u'-            assert(enc_buf->length <= buf_size);'), (4, 1, u'+            av_assert0(enc_buf->length > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(enc_buf->length > 0);'), (3, 2, u'-            assert(enc_buf->length <= buf_size);'), (4, 1, u'+            av_assert0(enc_buf->length > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(!ctx->coded_frame_list);'), (5, 1, u'+                av_assert0(!ctx->coded_frame_list);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: queue_frames
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(!ctx->coded_frame_list);'), (5, 1, u'+                av_assert0(!ctx->coded_frame_list);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(!ctx->coded_frame_list);'), (5, 1, u'+                av_assert0(!ctx->coded_frame_list);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            av_assert0(!ctx->have_sse);')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: queue_frames
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            av_assert0(!ctx->have_sse);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            av_assert0(!ctx->have_sse);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    av_assert0(s->esc_pos == s->header_bits >> 3);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: encode_picture_lossless
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    av_assert0(s->esc_pos == s->header_bits >> 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    av_assert0(s->esc_pos == s->header_bits >> 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Total add: 25
Total del: 14
Header: decode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+        av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!(len & 1));'), (3, 1, u'+    av_assert2(!(len & 1));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: lpc_apply_welch_window_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!(len & 1));'), (3, 1, u'+    av_assert2(!(len & 1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!(len & 1));'), (3, 1, u'+    av_assert2(!(len & 1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(max_order >= MIN_LPC_ORDER && max_order <= MAX_LPC_ORDER &&'), (3, 1, u'+    av_assert2(max_order >= MIN_LPC_ORDER && max_order <= MAX_LPC_ORDER &&')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_lpc_calc_coefs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(max_order >= MIN_LPC_ORDER && max_order <= MAX_LPC_ORDER &&'), (3, 1, u'+    av_assert2(max_order >= MIN_LPC_ORDER && max_order <= MAX_LPC_ORDER &&')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(max_order >= MIN_LPC_ORDER && max_order <= MAX_LPC_ORDER &&'), (3, 1, u'+    av_assert2(max_order >= MIN_LPC_ORDER && max_order <= MAX_LPC_ORDER &&')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ff_lpc_calc_coefs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(lp_half_order <= MAX_LP_HALF_ORDER);'), (3, 1, u'+    av_assert2(lp_half_order <= MAX_LP_HALF_ORDER);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_acelp_lspd2lpc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(lp_half_order <= MAX_LP_HALF_ORDER);'), (3, 1, u'+    av_assert2(lp_half_order <= MAX_LP_HALF_ORDER);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(lp_half_order <= MAX_LP_HALF_ORDER);'), (3, 1, u'+    av_assert2(lp_half_order <= MAX_LP_HALF_ORDER);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(head >= 0 && head < LZW_HASH_SIZE);'), (3, 1, u'+    av_assert2(head >= 0 && head < LZW_HASH_SIZE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: hash
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(head >= 0 && head < LZW_HASH_SIZE);'), (3, 1, u'+    av_assert2(head >= 0 && head < LZW_HASH_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(head >= 0 && head < LZW_HASH_SIZE);'), (3, 1, u'+    av_assert2(head >= 0 && head < LZW_HASH_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(nb_codes <= 256);'), (3, 1, u'+    av_assert0(nb_codes <= 256);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: build_vlc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(nb_codes <= 256);'), (3, 1, u'+    av_assert0(nb_codes <= 256);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(nb_codes <= 256);'), (3, 1, u'+    av_assert0(nb_codes <= 256);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->nb_components == 3);'), (3, 1, u'+        av_assert0(s->nb_components == 3);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_mjpeg_decode_sof
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->nb_components == 3);'), (3, 1, u'+        av_assert0(s->nb_components == 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->nb_components == 3);'), (3, 1, u'+        av_assert0(s->nb_components == 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    av_assert0(nb_components==1 || nb_components==3);'), (3, 1, u'+    av_assert0(nb_components>=1 && nb_components<=3);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ljpeg_decode_yuv_scan
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    av_assert0(nb_components==1 || nb_components==3);'), (3, 1, u'+    av_assert0(nb_components>=1 && nb_components<=3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    av_assert0(nb_components==1 || nb_components==3);'), (3, 1, u'+    av_assert0(nb_components>=1 && nb_components<=3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    av_assert0(s->picture_ptr->data[0]);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: ff_mjpeg_decode_sos
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    av_assert0(s->picture_ptr->data[0]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    av_assert0(s->picture_ptr->data[0]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        av_assert0(avctx->pix_fmt == PIX_FMT_YUVJ444P ||'), (6, 1, u'+        av_assert0(avctx->pix_fmt == AV_PIX_FMT_YUVJ444P ||')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: the_end:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        av_assert0(avctx->pix_fmt == PIX_FMT_YUVJ444P ||'), (6, 1, u'+        av_assert0(avctx->pix_fmt == AV_PIX_FMT_YUVJ444P ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        av_assert0(avctx->pix_fmt == PIX_FMT_YUVJ444P ||'), (6, 1, u'+        av_assert0(avctx->pix_fmt == AV_PIX_FMT_YUVJ444P ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        av_assert0(avctx->pix_fmt == PIX_FMT_YUVJ444P ||'), (6, 1, u'+        av_assert0(avctx->pix_fmt == AV_PIX_FMT_YUVJ444P ||')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: the_end:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        av_assert0(avctx->pix_fmt == PIX_FMT_YUVJ444P ||'), (6, 1, u'+        av_assert0(avctx->pix_fmt == AV_PIX_FMT_YUVJ444P ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        av_assert0(avctx->pix_fmt == PIX_FMT_YUVJ444P ||'), (6, 1, u'+        av_assert0(avctx->pix_fmt == AV_PIX_FMT_YUVJ444P ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    default: assert(0);'), (7, 1, u'+    default: av_assert0(0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: ff_mjpeg_encode_picture_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    default: assert(0);'), (7, 1, u'+    default: av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    default: assert(0);'), (7, 1, u'+    default: av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    default: assert(0);'), (7, 1, u'+    default: av_assert0(0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: ff_mjpeg_encode_picture_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    default: assert(0);'), (7, 1, u'+    default: av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    default: assert(0);'), (7, 1, u'+    default: av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((size&7) == 0);'), (3, 1, u'+    av_assert1((size&7) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: escape_FF
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((size&7) == 0);'), (3, 1, u'+    av_assert1((size&7) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((size&7) == 0);'), (3, 1, u'+    av_assert1((size&7) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert((s->header_bits&7)==0);'), (6, 1, u'+    av_assert1((s->header_bits&7)==0);')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: ff_mjpeg_encode_picture_trailer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert((s->header_bits&7)==0);'), (6, 1, u'+    av_assert1((s->header_bits&7)==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert((s->header_bits&7)==0);'), (6, 1, u'+    av_assert1((s->header_bits&7)==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    assert(get_bits_count(gb) == 0);'), (7, 1, u'+    av_assert1(get_bits_count(gb) == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ff_mlp_read_major_sync
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    assert(get_bits_count(gb) == 0);'), (7, 1, u'+    av_assert1(get_bits_count(gb) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    assert(get_bits_count(gb) == 0);'), (7, 1, u'+    av_assert1(get_bits_count(gb) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(filter < 2);'), (3, 1, u'+    av_assert0(filter < 2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: read_filter_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(filter < 2);'), (3, 1, u'+    av_assert0(filter < 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(filter < 2);'), (3, 1, u'+    av_assert0(filter < 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(x >= c->xmin && hx <= c->xmax<<(qpel+1) && y >= c->ymin && hy <= c->ymax<<(qpel+1));'), (3, 1, u'+        av_assert2(x >= c->xmin && hx <= c->xmax<<(qpel+1) && y >= c->ymin && hy <= c->ymax<<(qpel+1));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: cmp_direct_inline
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(x >= c->xmin && hx <= c->xmax<<(qpel+1) && y >= c->ymin && hy <= c->ymax<<(qpel+1));'), (3, 1, u'+        av_assert2(x >= c->xmin && hx <= c->xmax<<(qpel+1) && y >= c->ymin && hy <= c->ymax<<(qpel+1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(x >= c->xmin && hx <= c->xmax<<(qpel+1) && y >= c->ymin && hy <= c->ymax<<(qpel+1));'), (3, 1, u'+        av_assert2(x >= c->xmin && hx <= c->xmax<<(qpel+1) && y >= c->ymin && hy <= c->ymax<<(qpel+1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert((fx>>1) + 16*s->mb_x >= -16);'), (3, 2, u'-                    assert((fy>>1) + 16*s->mb_y >= -16);'), (4, 2, u'-                    assert((fx>>1) + 16*s->mb_x <= s->width);'), (5, 2, u'-                    assert((fy>>1) + 16*s->mb_y <= s->height);'), (6, 2, u'-                    assert((bx>>1) + 16*s->mb_x >= -16);'), (7, 2, u'-                    assert((by>>1) + 16*s->mb_y >= -16);'), (8, 2, u'-                    assert((bx>>1) + 16*s->mb_x <= s->width);'), (9, 2, u'-                    assert((by>>1) + 16*s->mb_y <= s->height);'), (10, 1, u'+                    av_assert2((fx>>1) + 16*s->mb_x >= -16);'), (11, 1, u'+                    av_assert2((fy>>1) + 16*s->mb_y >= -16);'), (12, 1, u'+                    av_assert2((fx>>1) + 16*s->mb_x <= s->width);'), (13, 1, u'+                    av_assert2((fy>>1) + 16*s->mb_y <= s->height);'), (14, 1, u'+                    av_assert2((bx>>1) + 16*s->mb_x >= -16);'), (15, 1, u'+                    av_assert2((by>>1) + 16*s->mb_y >= -16);'), (16, 1, u'+                    av_assert2((bx>>1) + 16*s->mb_x <= s->width);'), (17, 1, u'+                    av_assert2((by>>1) + 16*s->mb_y <= s->height);')]
===========================================
===========================================
Total add: 8
Total del: 8
Header: cmp_direct_inline
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert((fx>>1) + 16*s->mb_x >= -16);'), (3, 2, u'-                    assert((fy>>1) + 16*s->mb_y >= -16);'), (4, 2, u'-                    assert((fx>>1) + 16*s->mb_x <= s->width);'), (5, 2, u'-                    assert((fy>>1) + 16*s->mb_y <= s->height);'), (6, 2, u'-                    assert((bx>>1) + 16*s->mb_x >= -16);'), (7, 2, u'-                    assert((by>>1) + 16*s->mb_y >= -16);'), (8, 2, u'-                    assert((bx>>1) + 16*s->mb_x <= s->width);'), (9, 2, u'-                    assert((by>>1) + 16*s->mb_y <= s->height);'), (10, 1, u'+                    av_assert2((fx>>1) + 16*s->mb_x >= -16);'), (11, 1, u'+                    av_assert2((fy>>1) + 16*s->mb_y >= -16);'), (12, 1, u'+                    av_assert2((fx>>1) + 16*s->mb_x <= s->width);'), (13, 1, u'+                    av_assert2((fy>>1) + 16*s->mb_y <= s->height);'), (14, 1, u'+                    av_assert2((bx>>1) + 16*s->mb_x >= -16);'), (15, 1, u'+                    av_assert2((by>>1) + 16*s->mb_y >= -16);'), (16, 1, u'+                    av_assert2((bx>>1) + 16*s->mb_x <= s->width);'), (17, 1, u'+                    av_assert2((by>>1) + 16*s->mb_y <= s->height);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert((fx>>1) + 16*s->mb_x >= -16);'), (3, 2, u'-                    assert((fy>>1) + 16*s->mb_y >= -16);'), (4, 2, u'-                    assert((fx>>1) + 16*s->mb_x <= s->width);'), (5, 2, u'-                    assert((fy>>1) + 16*s->mb_y <= s->height);'), (6, 2, u'-                    assert((bx>>1) + 16*s->mb_x >= -16);'), (7, 2, u'-                    assert((by>>1) + 16*s->mb_y >= -16);'), (8, 2, u'-                    assert((bx>>1) + 16*s->mb_x <= s->width);'), (9, 2, u'-                    assert((by>>1) + 16*s->mb_y <= s->height);'), (10, 1, u'+                    av_assert2((fx>>1) + 16*s->mb_x >= -16);'), (11, 1, u'+                    av_assert2((fy>>1) + 16*s->mb_y >= -16);'), (12, 1, u'+                    av_assert2((fx>>1) + 16*s->mb_x <= s->width);'), (13, 1, u'+                    av_assert2((fy>>1) + 16*s->mb_y <= s->height);'), (14, 1, u'+                    av_assert2((bx>>1) + 16*s->mb_x >= -16);'), (15, 1, u'+                    av_assert2((by>>1) + 16*s->mb_y >= -16);'), (16, 1, u'+                    av_assert2((bx>>1) + 16*s->mb_x <= s->width);'), (17, 1, u'+                    av_assert2((by>>1) + 16*s->mb_y <= s->height);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(flags == 0);'), (3, 1, u'+    av_assert2(flags == 0);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: sad_hpel_motion_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(flags == 0);'), (3, 1, u'+    av_assert2(flags == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(flags == 0);'), (3, 1, u'+    av_assert2(flags == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(field_select==0 || field_select==1);'), (3, 2, u'-                assert(field_select_tables[block][xy]==0 || field_select_tables[block][xy]==1);'), (4, 1, u'+                av_assert1(field_select==0 || field_select==1);'), (5, 1, u'+                av_assert1(field_select_tables[block][xy]==0 || field_select_tables[block][xy]==1);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: interlaced_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(field_select==0 || field_select==1);'), (3, 2, u'-                assert(field_select_tables[block][xy]==0 || field_select_tables[block][xy]==1);'), (4, 1, u'+                av_assert1(field_select==0 || field_select==1);'), (5, 1, u'+                av_assert1(field_select_tables[block][xy]==0 || field_select_tables[block][xy]==1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(field_select==0 || field_select==1);'), (3, 2, u'-                assert(field_select_tables[block][xy]==0 || field_select_tables[block][xy]==1);'), (4, 1, u'+                av_assert1(field_select==0 || field_select==1);'), (5, 1, u'+                av_assert1(field_select_tables[block][xy]==0 || field_select_tables[block][xy]==1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(IS_INTRA(mb_type) || USES_LIST(mb_type,0) || USES_LIST(mb_type,1));'), (3, 1, u'+    av_assert0(IS_INTRA(mb_type) || USES_LIST(mb_type,0) || USES_LIST(mb_type,1));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: check_input_motion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(IS_INTRA(mb_type) || USES_LIST(mb_type,0) || USES_LIST(mb_type,1));'), (3, 1, u'+    av_assert0(IS_INTRA(mb_type) || USES_LIST(mb_type,0) || USES_LIST(mb_type,1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(IS_INTRA(mb_type) || USES_LIST(mb_type,0) || USES_LIST(mb_type,1));'), (3, 1, u'+    av_assert0(IS_INTRA(mb_type) || USES_LIST(mb_type,0) || USES_LIST(mb_type,1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(field_select0==0 ||field_select0==1);'), (3, 2, u'-            assert(field_select1==0 ||field_select1==1);'), (4, 1, u'+            av_assert0(field_select0==0 ||field_select0==1);'), (5, 1, u'+            av_assert0(field_select1==0 ||field_select1==1);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: check_input_motion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(field_select0==0 ||field_select0==1);'), (3, 2, u'-            assert(field_select1==0 ||field_select1==1);'), (4, 1, u'+            av_assert0(field_select0==0 ||field_select0==1);'), (5, 1, u'+            av_assert0(field_select1==0 ||field_select1==1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(field_select0==0 ||field_select0==1);'), (3, 2, u'-            assert(field_select1==0 ||field_select1==1);'), (4, 1, u'+            av_assert0(field_select0==0 ||field_select0==1);'), (5, 1, u'+            av_assert0(field_select1==0 ||field_select1==1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(field_select0==0 ||field_select0==1);'), (3, 2, u'-            assert(field_select1==0 ||field_select1==1);'), (4, 1, u'+            av_assert0(field_select0==0 ||field_select0==1);'), (5, 1, u'+            av_assert0(field_select1==0 ||field_select1==1);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: check_input_motion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(field_select0==0 ||field_select0==1);'), (3, 2, u'-            assert(field_select1==0 ||field_select1==1);'), (4, 1, u'+            av_assert0(field_select0==0 ||field_select0==1);'), (5, 1, u'+            av_assert0(field_select1==0 ||field_select1==1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(field_select0==0 ||field_select0==1);'), (3, 2, u'-            assert(field_select1==0 ||field_select1==1);'), (4, 1, u'+            av_assert0(field_select0==0 ||field_select0==1);'), (5, 1, u'+            av_assert0(field_select1==0 ||field_select1==1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->quarter_sample==0 || s->quarter_sample==1);'), (3, 2, u'-    assert(s->linesize == c->stride);'), (4, 2, u'-    assert(s->uvlinesize == c->uvstride);'), (5, 1, u'+    av_assert0(s->quarter_sample==0 || s->quarter_sample==1);'), (6, 1, u'+    av_assert0(s->linesize == c->stride);'), (7, 1, u'+    av_assert0(s->uvlinesize == c->uvstride);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: ff_estimate_p_frame_motion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->quarter_sample==0 || s->quarter_sample==1);'), (3, 2, u'-    assert(s->linesize == c->stride);'), (4, 2, u'-    assert(s->uvlinesize == c->uvstride);'), (5, 1, u'+    av_assert0(s->quarter_sample==0 || s->quarter_sample==1);'), (6, 1, u'+    av_assert0(s->linesize == c->stride);'), (7, 1, u'+    av_assert0(s->uvlinesize == c->uvstride);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->quarter_sample==0 || s->quarter_sample==1);'), (3, 2, u'-    assert(s->linesize == c->stride);'), (4, 2, u'-    assert(s->uvlinesize == c->uvstride);'), (5, 1, u'+    av_assert0(s->quarter_sample==0 || s->quarter_sample==1);'), (6, 1, u'+    av_assert0(s->linesize == c->stride);'), (7, 1, u'+    av_assert0(s->uvlinesize == c->uvstride);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->quarter_sample==0 || s->quarter_sample==1);'), (3, 1, u'+    av_assert0(s->quarter_sample==0 || s->quarter_sample==1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_pre_estimate_p_frame_motion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->quarter_sample==0 || s->quarter_sample==1);'), (3, 1, u'+    av_assert0(s->quarter_sample==0 || s->quarter_sample==1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->quarter_sample==0 || s->quarter_sample==1);'), (3, 1, u'+    av_assert0(s->quarter_sample==0 || s->quarter_sample==1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(xmax <= 15 && ymax <= 15 && xmin >= -16 && ymin >= -16);'), (3, 1, u'+    av_assert2(xmax <= 15 && ymax <= 15 && xmin >= -16 && ymin >= -16);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: direct_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(xmax <= 15 && ymax <= 15 && xmin >= -16 && ymin >= -16);'), (3, 1, u'+    av_assert2(xmax <= 15 && ymax <= 15 && xmin >= -16 && ymin >= -16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(xmax <= 15 && ymax <= 15 && xmin >= -16 && ymin >= -16);'), (3, 1, u'+    av_assert2(xmax <= 15 && ymax <= 15 && xmin >= -16 && ymin >= -16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type==AV_PICTURE_TYPE_P);'), (3, 1, u'+    av_assert0(s->pict_type==AV_PICTURE_TYPE_P);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_fix_long_p_mvs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type==AV_PICTURE_TYPE_P);'), (3, 1, u'+    av_assert0(s->pict_type==AV_PICTURE_TYPE_P);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type==AV_PICTURE_TYPE_P);'), (3, 1, u'+    av_assert0(s->pict_type==AV_PICTURE_TYPE_P);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(range <= 16 || !s->msmpeg4_version);'), (3, 2, u'-    assert(range <=256 || !(s->codec_id == CODEC_ID_MPEG2VIDEO && s->avctx->strict_std_compliance >= FF_COMPLIANCE_NORMAL));'), (4, 1, u'+    av_assert0(range <= 16 || !s->msmpeg4_version);'), (5, 1, u'+    av_assert0(range <=256 || !(s->codec_id == AV_CODEC_ID_MPEG2VIDEO && s->avctx->strict_std_compliance >= FF_COMPLIANCE_NORMAL));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ff_fix_long_p_mvs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(range <= 16 || !s->msmpeg4_version);'), (3, 2, u'-    assert(range <=256 || !(s->codec_id == CODEC_ID_MPEG2VIDEO && s->avctx->strict_std_compliance >= FF_COMPLIANCE_NORMAL));'), (4, 1, u'+    av_assert0(range <= 16 || !s->msmpeg4_version);'), (5, 1, u'+    av_assert0(range <=256 || !(s->codec_id == AV_CODEC_ID_MPEG2VIDEO && s->avctx->strict_std_compliance >= FF_COMPLIANCE_NORMAL));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(range <= 16 || !s->msmpeg4_version);'), (3, 2, u'-    assert(range <=256 || !(s->codec_id == CODEC_ID_MPEG2VIDEO && s->avctx->strict_std_compliance >= FF_COMPLIANCE_NORMAL));'), (4, 1, u'+    av_assert0(range <= 16 || !s->msmpeg4_version);'), (5, 1, u'+    av_assert0(range <=256 || !(s->codec_id == AV_CODEC_ID_MPEG2VIDEO && s->avctx->strict_std_compliance >= FF_COMPLIANCE_NORMAL));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+#if defined(ASSERT_LEVEL) && ASSERT_LEVEL > 1'), (10, 2, u'-        assert(map[(index-(1<<ME_MAP_SHIFT))&(ME_MAP_SIZE-1)] == key);'), (11, 1, u'+        av_assert2(c->map[(index-(1<<ME_MAP_SHIFT))&(ME_MAP_SIZE-1)] == key);'), (13, 2, u'-        assert(map[(index+(1<<ME_MAP_SHIFT))&(ME_MAP_SIZE-1)] == key);'), (14, 1, u'+        av_assert2(c->map[(index+(1<<ME_MAP_SHIFT))&(ME_MAP_SIZE-1)] == key);'), (16, 2, u'-        assert(map[(index+1)&(ME_MAP_SIZE-1)] == key);'), (17, 1, u'+        av_assert2(c->map[(index+1)&(ME_MAP_SIZE-1)] == key);'), (19, 2, u'-        assert(map[(index-1)&(ME_MAP_SIZE-1)] == key);'), (20, 1, u'+        av_assert2(c->map[(index-1)&(ME_MAP_SIZE-1)] == key);')]
===========================================
===========================================
Total add: 5
Total del: 8
Header: hpel_motion_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+#if defined(ASSERT_LEVEL) && ASSERT_LEVEL > 1'), (10, 2, u'-        assert(map[(index-(1<<ME_MAP_SHIFT))&(ME_MAP_SIZE-1)] == key);'), (11, 1, u'+        av_assert2(c->map[(index-(1<<ME_MAP_SHIFT))&(ME_MAP_SIZE-1)] == key);'), (13, 2, u'-        assert(map[(index+(1<<ME_MAP_SHIFT))&(ME_MAP_SIZE-1)] == key);'), (14, 1, u'+        av_assert2(c->map[(index+(1<<ME_MAP_SHIFT))&(ME_MAP_SIZE-1)] == key);'), (16, 2, u'-        assert(map[(index+1)&(ME_MAP_SIZE-1)] == key);'), (17, 1, u'+        av_assert2(c->map[(index+1)&(ME_MAP_SIZE-1)] == key);'), (19, 2, u'-        assert(map[(index-1)&(ME_MAP_SIZE-1)] == key);'), (20, 1, u'+        av_assert2(c->map[(index-1)&(ME_MAP_SIZE-1)] == key);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+#if defined(ASSERT_LEVEL) && ASSERT_LEVEL > 1'), (10, 2, u'-        assert(map[(index-(1<<ME_MAP_SHIFT))&(ME_MAP_SIZE-1)] == key);'), (11, 1, u'+        av_assert2(c->map[(index-(1<<ME_MAP_SHIFT))&(ME_MAP_SIZE-1)] == key);'), (13, 2, u'-        assert(map[(index+(1<<ME_MAP_SHIFT))&(ME_MAP_SIZE-1)] == key);'), (14, 1, u'+        av_assert2(c->map[(index+(1<<ME_MAP_SHIFT))&(ME_MAP_SIZE-1)] == key);'), (16, 2, u'-        assert(map[(index+1)&(ME_MAP_SIZE-1)] == key);'), (17, 1, u'+        av_assert2(c->map[(index+1)&(ME_MAP_SIZE-1)] == key);'), (19, 2, u'-        assert(map[(index-1)&(ME_MAP_SIZE-1)] == key);'), (20, 1, u'+        av_assert2(c->map[(index-1)&(ME_MAP_SIZE-1)] == key);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(bx >= xmin*2 && bx <= xmax*2 && by >= ymin*2 && by <= ymax*2);'), (3, 1, u'+        av_assert2(bx >= xmin*2 && bx <= xmax*2 && by >= ymin*2 && by <= ymax*2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: hpel_motion_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(bx >= xmin*2 && bx <= xmax*2 && by >= ymin*2 && by <= ymax*2);'), (3, 1, u'+        av_assert2(bx >= xmin*2 && bx <= xmax*2 && by >= ymin*2 && by <= ymax*2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(bx >= xmin*2 && bx <= xmax*2 && by >= ymin*2 && by <= ymax*2);'), (3, 1, u'+        av_assert2(bx >= xmin*2 && bx <= xmax*2 && by >= ymin*2 && by <= ymax*2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(16*cx2 + 4*cx + 32*c == 32*r);'), (3, 2, u'-            assert(16*cx2 - 4*cx + 32*c == 32*l);'), (4, 2, u'-            assert(16*cy2 + 4*cy + 32*c == 32*b);'), (5, 2, u'-            assert(16*cy2 - 4*cy + 32*c == 32*t);'), (6, 2, u'-            assert(16*cxy + 16*cy2 + 16*cx2 - 4*cy - 4*cx + 32*c == 32*tl);'), (7, 1, u'+            av_assert2(16*cx2 + 4*cx + 32*c == 32*r);'), (8, 1, u'+            av_assert2(16*cx2 - 4*cx + 32*c == 32*l);'), (9, 1, u'+            av_assert2(16*cy2 + 4*cy + 32*c == 32*b);'), (10, 1, u'+            av_assert2(16*cy2 - 4*cy + 32*c == 32*t);'), (11, 1, u'+            av_assert2(16*cxy + 16*cy2 + 16*cx2 - 4*cy - 4*cx + 32*c == 32*tl);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: qpel_motion_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(16*cx2 + 4*cx + 32*c == 32*r);'), (3, 2, u'-            assert(16*cx2 - 4*cx + 32*c == 32*l);'), (4, 2, u'-            assert(16*cy2 + 4*cy + 32*c == 32*b);'), (5, 2, u'-            assert(16*cy2 - 4*cy + 32*c == 32*t);'), (6, 2, u'-            assert(16*cxy + 16*cy2 + 16*cx2 - 4*cy - 4*cx + 32*c == 32*tl);'), (7, 1, u'+            av_assert2(16*cx2 + 4*cx + 32*c == 32*r);'), (8, 1, u'+            av_assert2(16*cx2 - 4*cx + 32*c == 32*l);'), (9, 1, u'+            av_assert2(16*cy2 + 4*cy + 32*c == 32*b);'), (10, 1, u'+            av_assert2(16*cy2 - 4*cy + 32*c == 32*t);'), (11, 1, u'+            av_assert2(16*cxy + 16*cy2 + 16*cx2 - 4*cy - 4*cx + 32*c == 32*tl);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(16*cx2 + 4*cx + 32*c == 32*r);'), (3, 2, u'-            assert(16*cx2 - 4*cx + 32*c == 32*l);'), (4, 2, u'-            assert(16*cy2 + 4*cy + 32*c == 32*b);'), (5, 2, u'-            assert(16*cy2 - 4*cy + 32*c == 32*t);'), (6, 2, u'-            assert(16*cxy + 16*cy2 + 16*cx2 - 4*cy - 4*cx + 32*c == 32*tl);'), (7, 1, u'+            av_assert2(16*cx2 + 4*cx + 32*c == 32*r);'), (8, 1, u'+            av_assert2(16*cx2 - 4*cx + 32*c == 32*l);'), (9, 1, u'+            av_assert2(16*cy2 + 4*cy + 32*c == 32*b);'), (10, 1, u'+            av_assert2(16*cy2 - 4*cy + 32*c == 32*t);'), (11, 1, u'+            av_assert2(16*cxy + 16*cy2 + 16*cx2 - 4*cy - 4*cx + 32*c == 32*tl);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(bx >= xmin*4 && bx <= xmax*4 && by >= ymin*4 && by <= ymax*4);'), (3, 1, u'+        av_assert2(bx >= xmin*4 && bx <= xmax*4 && by >= ymin*4 && by <= ymax*4);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: qpel_motion_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(bx >= xmin*4 && bx <= xmax*4 && by >= ymin*4 && by <= ymax*4);'), (3, 1, u'+        av_assert2(bx >= xmin*4 && bx <= xmax*4 && by >= ymin*4 && by <= ymax*4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(bx >= xmin*4 && bx <= xmax*4 && by >= ymin*4 && by <= ymax*4);'), (3, 1, u'+        av_assert2(bx >= xmin*4 && bx <= xmax*4 && by >= ymin*4 && by <= ymax*4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((x) >= xmin);\\'), (3, 2, u'-    assert((x) <= xmax);\\'), (4, 2, u'-    assert((y) >= ymin);\\'), (5, 2, u'-    assert((y) <= ymax);\\'), (7, 1, u'+    av_assert2((x) >= xmin);\\'), (8, 1, u'+    av_assert2((x) <= xmax);\\'), (9, 1, u'+    av_assert2((y) >= ymin);\\'), (10, 1, u'+    av_assert2((y) <= ymax);\\')]
===========================================
===========================================
Total add: 4
Total del: 5
Header: qpel_motion_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((x) >= xmin);\\'), (3, 2, u'-    assert((x) <= xmax);\\'), (4, 2, u'-    assert((y) >= ymin);\\'), (5, 2, u'-    assert((y) <= ymax);\\'), (7, 1, u'+    av_assert2((x) >= xmin);\\'), (8, 1, u'+    av_assert2((x) <= xmax);\\'), (9, 1, u'+    av_assert2((y) >= ymin);\\'), (10, 1, u'+    av_assert2((y) <= ymax);\\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((x) >= xmin);\\'), (3, 2, u'-    assert((x) <= xmax);\\'), (4, 2, u'-    assert((y) >= ymin);\\'), (5, 2, u'-    assert((y) <= ymax);\\'), (7, 1, u'+    av_assert2((x) >= xmin);\\'), (8, 1, u'+    av_assert2((x) <= xmax);\\'), (9, 1, u'+    av_assert2((y) >= ymin);\\'), (10, 1, u'+    av_assert2((y) <= ymax);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert1(minima_count <= MAX_SAB_SIZE);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: sab_diamond_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert1(minima_count <= MAX_SAB_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert1(minima_count <= MAX_SAB_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(cmpf);'), (3, 1, u'+    av_assert2(cmpf);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: epzs_motion_search_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(cmpf);'), (3, 1, u'+    av_assert2(cmpf);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(cmpf);'), (3, 1, u'+    av_assert2(cmpf);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert1(mp->changes_map[0]);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: mp_decode_frame_helper
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert1(mp->changes_map[0]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert1(mp->changes_map[0]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->mb_skipped == 0);'), (3, 1, u'+    av_assert2(s->mb_skipped == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mpeg_decode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->mb_skipped == 0);'), (3, 1, u'+    av_assert2(s->mb_skipped == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->mb_skipped == 0);'), (3, 1, u'+    av_assert2(s->mb_skipped == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(mb_type & MB_TYPE_CBP);'), (3, 1, u'+            av_assert2(mb_type & MB_TYPE_CBP);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mpeg_decode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(mb_type & MB_TYPE_CBP);'), (3, 1, u'+            av_assert2(mb_type & MB_TYPE_CBP);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(mb_type & MB_TYPE_CBP);'), (3, 1, u'+            av_assert2(mb_type & MB_TYPE_CBP);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(mb_type & MB_TYPE_L0L1);'), (3, 1, u'+            av_assert2(mb_type & MB_TYPE_L0L1);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: mpeg_decode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(mb_type & MB_TYPE_L0L1);'), (3, 1, u'+            av_assert2(mb_type & MB_TYPE_L0L1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(mb_type & MB_TYPE_L0L1);'), (3, 1, u'+            av_assert2(mb_type & MB_TYPE_L0L1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((avctx->sub_id == 1) == (avctx->codec_id == CODEC_ID_MPEG1VIDEO));')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: mpeg_decode_postinit
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((avctx->sub_id == 1) == (avctx->codec_id == CODEC_ID_MPEG1VIDEO));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((avctx->sub_id == 1) == (avctx->codec_id == CODEC_ID_MPEG1VIDEO));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(mb_y < s->mb_height);'), (3, 1, u'+    av_assert0(mb_y < s->mb_height);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: mpeg_decode_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(mb_y < s->mb_height);'), (3, 1, u'+    av_assert0(mb_y < s->mb_height);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(mb_y < s->mb_height);'), (3, 1, u'+    av_assert0(mb_y < s->mb_height);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(s->field_select[dir][i] == 0 || s->field_select[dir][i] == 1);'), (3, 1, u'+                    av_assert2(s->field_select[dir][i] == 0 || s->field_select[dir][i] == 1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mpeg_decode_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(s->field_select[dir][i] == 0 || s->field_select[dir][i] == 1);'), (3, 1, u'+                    av_assert2(s->field_select[dir][i] == 0 || s->field_select[dir][i] == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(s->field_select[dir][i] == 0 || s->field_select[dir][i] == 1);'), (3, 1, u'+                    av_assert2(s->field_select[dir][i] == 0 || s->field_select[dir][i] == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(pc->frame_start_found >= 0 && pc->frame_start_found <= 4);'), (3, 1, u'+        av_assert1(pc->frame_start_found >= 0 && pc->frame_start_found <= 4);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_mpeg1_find_frame_end
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(pc->frame_start_found >= 0 && pc->frame_start_found <= 4);'), (3, 1, u'+        av_assert1(pc->frame_start_found >= 0 && pc->frame_start_found <= 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(pc->frame_start_found >= 0 && pc->frame_start_found <= 4);'), (3, 1, u'+        av_assert1(pc->frame_start_found >= 0 && pc->frame_start_found <= 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            av_assert0(s->drop_frame_timecode == s->tc.drop);'), (5, 1, u'+            av_assert0(s->drop_frame_timecode == !!(s->tc.flags & AV_TIMECODE_FLAG_DROPFRAME));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: mpeg1_encode_sequence_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            av_assert0(s->drop_frame_timecode == s->tc.drop);'), (5, 1, u'+            av_assert0(s->drop_frame_timecode == !!(s->tc.flags & AV_TIMECODE_FLAG_DROPFRAME));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            av_assert0(s->drop_frame_timecode == s->tc.drop);'), (5, 1, u'+            av_assert0(s->drop_frame_timecode == !!(s->tc.flags & AV_TIMECODE_FLAG_DROPFRAME));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->qscale>=1 && s->qscale <=12);'), (3, 1, u'+        av_assert2(s->qscale>=1 && s->qscale <=12);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: put_qscale
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->qscale>=1 && s->qscale <=12);'), (3, 1, u'+        av_assert2(s->qscale>=1 && s->qscale <=12);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->qscale>=1 && s->qscale <=12);'), (3, 1, u'+        av_assert2(s->qscale>=1 && s->qscale <=12);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->picture_structure == PICT_FRAME);'), (3, 1, u'+        av_assert0(s->picture_structure == PICT_FRAME);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mpeg1_encode_picture_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->picture_structure == PICT_FRAME);'), (3, 1, u'+        av_assert0(s->picture_structure == PICT_FRAME);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->picture_structure == PICT_FRAME);'), (3, 1, u'+        av_assert0(s->picture_structure == PICT_FRAME);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(s->mb_skip_run == 0);'), (3, 1, u'+            av_assert0(s->mb_skip_run == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mpeg1_encode_mb_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(s->mb_skip_run == 0);'), (3, 1, u'+            av_assert0(s->mb_skip_run == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(s->mb_skip_run == 0);'), (3, 1, u'+            av_assert0(s->mb_skip_run == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(!s->frame_pred_frame_dct && s->mv_type == MV_TYPE_FIELD);'), (3, 1, u'+                av_assert2(!s->frame_pred_frame_dct && s->mv_type == MV_TYPE_FIELD);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mpeg1_encode_mb_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(!s->frame_pred_frame_dct && s->mv_type == MV_TYPE_FIELD);'), (3, 1, u'+                av_assert2(!s->frame_pred_frame_dct && s->mv_type == MV_TYPE_FIELD);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(!s->frame_pred_frame_dct && s->mv_type == MV_TYPE_FIELD);'), (3, 1, u'+                av_assert2(!s->frame_pred_frame_dct && s->mv_type == MV_TYPE_FIELD);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->mv_type == MV_TYPE_FIELD);'), (3, 2, u'-                assert(!s->frame_pred_frame_dct);'), (4, 1, u'+                av_assert2(s->mv_type == MV_TYPE_FIELD);'), (5, 1, u'+                av_assert2(!s->frame_pred_frame_dct);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: mpeg1_encode_mb_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->mv_type == MV_TYPE_FIELD);'), (3, 2, u'-                assert(!s->frame_pred_frame_dct);'), (4, 1, u'+                av_assert2(s->mv_type == MV_TYPE_FIELD);'), (5, 1, u'+                av_assert2(!s->frame_pred_frame_dct);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->mv_type == MV_TYPE_FIELD);'), (3, 2, u'-                assert(!s->frame_pred_frame_dct);'), (4, 1, u'+                av_assert2(s->mv_type == MV_TYPE_FIELD);'), (5, 1, u'+                av_assert2(!s->frame_pred_frame_dct);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(code > 0 && code <= 16);'), (3, 1, u'+        av_assert2(code > 0 && code <= 16);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mpeg1_encode_motion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(code > 0 && code <= 16);'), (3, 1, u'+        av_assert2(code > 0 && code <= 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(code > 0 && code <= 16);'), (3, 1, u'+        av_assert2(code > 0 && code <= 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert1(s1->pts == AV_NOPTS_VALUE);'), (4, 1, u'+        av_assert1(s1->dts == AV_NOPTS_VALUE);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: av_mpeg4_decode_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert1(s1->pts == AV_NOPTS_VALUE);'), (4, 1, u'+        av_assert1(s1->dts == AV_NOPTS_VALUE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert1(s1->pts == AV_NOPTS_VALUE);'), (4, 1, u'+        av_assert1(s1->dts == AV_NOPTS_VALUE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->h263_pred);'), (3, 1, u'+    av_assert2(s->h263_pred);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mpeg4_decode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->h263_pred);'), (3, 1, u'+    av_assert2(s->h263_pred);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->h263_pred);'), (3, 1, u'+    av_assert2(s->h263_pred);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(s->dquant>=-2 && s->dquant<=2);'), (3, 2, u'-            assert((s->dquant&1)==0);'), (4, 2, u'-            assert(mb_type>=0);'), (5, 1, u'+            av_assert2(s->dquant>=-2 && s->dquant<=2);'), (6, 1, u'+            av_assert2((s->dquant&1)==0);'), (7, 1, u'+            av_assert2(mb_type>=0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: mpeg4_encode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(s->dquant>=-2 && s->dquant<=2);'), (3, 2, u'-            assert((s->dquant&1)==0);'), (4, 2, u'-            assert(mb_type>=0);'), (5, 1, u'+            av_assert2(s->dquant>=-2 && s->dquant<=2);'), (6, 1, u'+            av_assert2((s->dquant&1)==0);'), (7, 1, u'+            av_assert2(mb_type>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(s->dquant>=-2 && s->dquant<=2);'), (3, 2, u'-            assert((s->dquant&1)==0);'), (4, 2, u'-            assert(mb_type>=0);'), (5, 1, u'+            av_assert2(s->dquant>=-2 && s->dquant<=2);'), (6, 1, u'+            av_assert2((s->dquant&1)==0);'), (7, 1, u'+            av_assert2(mb_type>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->dquant==0);'), (3, 1, u'+                av_assert2(s->dquant==0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mpeg4_encode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->dquant==0);'), (3, 1, u'+                av_assert2(s->dquant==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->dquant==0);'), (3, 1, u'+                av_assert2(s->dquant==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->mv_dir & MV_DIRECT);'), (3, 1, u'+                av_assert2(s->mv_dir & MV_DIRECT);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mpeg4_encode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->mv_dir & MV_DIRECT);'), (3, 1, u'+                av_assert2(s->mv_dir & MV_DIRECT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->mv_dir & MV_DIRECT);'), (3, 1, u'+                av_assert2(s->mv_dir & MV_DIRECT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(mb_type > 0 && mb_type < 4);'), (3, 1, u'+                av_assert2(mb_type > 0 && mb_type < 4);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mpeg4_encode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(mb_type > 0 && mb_type < 4);'), (3, 1, u'+                av_assert2(mb_type > 0 && mb_type < 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(mb_type > 0 && mb_type < 4);'), (3, 1, u'+                av_assert2(mb_type > 0 && mb_type < 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(!s->progressive_sequence);'), (3, 1, u'+                av_assert2(!s->progressive_sequence);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mpeg4_encode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(!s->progressive_sequence);'), (3, 1, u'+                av_assert2(!s->progressive_sequence);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(!s->progressive_sequence);'), (3, 1, u'+                av_assert2(!s->progressive_sequence);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->mv_type==MV_TYPE_8X8);'), (3, 1, u'+                av_assert2(s->mv_type==MV_TYPE_8X8);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mpeg4_encode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->mv_type==MV_TYPE_8X8);'), (3, 1, u'+                av_assert2(s->mv_type==MV_TYPE_8X8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->mv_type==MV_TYPE_8X8);'), (3, 1, u'+                av_assert2(s->mv_type==MV_TYPE_8X8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(time_incr >= 0);'), (3, 1, u'+    av_assert0(time_incr >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mpeg4_encode_picture_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(time_incr >= 0);'), (3, 1, u'+    av_assert0(time_incr >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(time_incr >= 0);'), (3, 1, u'+    av_assert0(time_incr >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MAX_LEVEL >= 64);'), (3, 2, u'-    assert(MAX_RUN   >= 63);'), (4, 1, u'+    av_assert0(MAX_LEVEL >= 64);'), (5, 1, u'+    av_assert0(MAX_RUN   >= 63);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: init_uni_mpeg4_rl_tab
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MAX_LEVEL >= 64);'), (3, 2, u'-    assert(MAX_RUN   >= 63);'), (4, 1, u'+    av_assert0(MAX_LEVEL >= 64);'), (5, 1, u'+    av_assert0(MAX_RUN   >= 63);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MAX_LEVEL >= 64);'), (3, 2, u'-    assert(MAX_RUN   >= 63);'), (4, 1, u'+    av_assert0(MAX_LEVEL >= 64);'), (5, 1, u'+    av_assert0(MAX_RUN   >= 63);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(e >= 1);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: l3_unscale
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(e >= 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(e >= 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(offset == FF_ARRAY_ELEMS(huff_vlc_tables));'), (3, 1, u'+    av_assert0(offset == FF_ARRAY_ELEMS(huff_vlc_tables));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decode_init_static
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(offset == FF_ARRAY_ELEMS(huff_vlc_tables));'), (3, 1, u'+    av_assert0(offset == FF_ARRAY_ELEMS(huff_vlc_tables));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(offset == FF_ARRAY_ELEMS(huff_vlc_tables));'), (3, 1, u'+    av_assert0(offset == FF_ARRAY_ELEMS(huff_vlc_tables));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(offset == FF_ARRAY_ELEMS(huff_quad_vlc_tables));'), (3, 1, u'+    av_assert0(offset == FF_ARRAY_ELEMS(huff_quad_vlc_tables));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decode_init_static
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(offset == FF_ARRAY_ELEMS(huff_quad_vlc_tables));'), (3, 1, u'+    av_assert0(offset == FF_ARRAY_ELEMS(huff_quad_vlc_tables));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(offset == FF_ARRAY_ELEMS(huff_quad_vlc_tables));'), (3, 1, u'+    av_assert0(offset == FF_ARRAY_ELEMS(huff_quad_vlc_tables));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((get_bits_count(&s->gb) & 7) == 0);'), (3, 1, u'+        av_assert2((get_bits_count(&s->gb) & 7) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: switch_buffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((get_bits_count(&s->gb) & 7) == 0);'), (3, 1, u'+        av_assert2((get_bits_count(&s->gb) & 7) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((get_bits_count(&s->gb) & 7) == 0);'), (3, 1, u'+        av_assert2((get_bits_count(&s->gb) & 7) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        assert((get_bits_count(&s->gb) & 7) == 0);'), (6, 1, u'+        av_assert1((get_bits_count(&s->gb) & 7) == 0);')]
===========================================
===========================================
Total add: 4
Total del: 5
Header: mp_decode_layer3
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        assert((get_bits_count(&s->gb) & 7) == 0);'), (6, 1, u'+        av_assert1((get_bits_count(&s->gb) & 7) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        assert((get_bits_count(&s->gb) & 7) == 0);'), (6, 1, u'+        av_assert1((get_bits_count(&s->gb) & 7) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((get_bits_count(&s->gb) & 7) == 0);'), (3, 1, u'+        av_assert1((get_bits_count(&s->gb) & 7) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mp_decode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((get_bits_count(&s->gb) & 7) == 0);'), (3, 1, u'+        av_assert1((get_bits_count(&s->gb) & 7) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert((get_bits_count(&s->gb) & 7) == 0);'), (3, 1, u'+        av_assert1((get_bits_count(&s->gb) & 7) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(i <= buf_size - HEADER_SIZE && i >= 0);'), (3, 1, u'+        av_assert1(i <= buf_size - HEADER_SIZE && i >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mp_decode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(i <= buf_size - HEADER_SIZE && i >= 0);'), (3, 1, u'+        av_assert1(i <= buf_size - HEADER_SIZE && i >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(i <= buf_size - HEADER_SIZE && i >= 0);'), (3, 1, u'+        av_assert1(i <= buf_size - HEADER_SIZE && i >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+        av_assert0(s->frame != NULL);')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: mp_decode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+        av_assert0(s->frame != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+        av_assert0(s->frame != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(m != NULL);'), (3, 1, u'+        av_assert1(m);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decode_frame_mp3on4
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(m != NULL);'), (3, 1, u'+        av_assert1(m);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(m != NULL);'), (3, 1, u'+        av_assert1(m);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(index >=0 && index <= 63);'), (3, 1, u'+            av_assert2(index >=0 && index <= 63);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: compute_scale_factors
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(index >=0 && index <= 63);'), (3, 1, u'+            av_assert2(index >=0 && index <= 63);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(index >=0 && index <= 63);'), (3, 1, u'+            av_assert2(index >=0 && index <= 63);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(0); //cannot happen'), (3, 1, u'+            av_assert2(0); //cannot happen')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: compute_scale_factors
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(0); //cannot happen'), (3, 1, u'+            av_assert2(0); //cannot happen')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(0); //cannot happen'), (3, 1, u'+            av_assert2(0); //cannot happen')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(*padding >= 0);'), (3, 1, u'+    av_assert0(*padding >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: compute_bit_allocation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(*padding >= 0);'), (3, 1, u'+    av_assert0(*padding >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(*padding >= 0);'), (3, 1, u'+    av_assert0(*padding >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                            assert(q[m] >= 0 && q[m] < steps);'), (3, 1, u'+                            av_assert2(q[m] >= 0 && q[m] < steps);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                            assert(q[m] >= 0 && q[m] < steps);'), (3, 1, u'+                            av_assert2(q[m] >= 0 && q[m] < steps);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                            assert(q[m] >= 0 && q[m] < steps);'), (3, 1, u'+                            av_assert2(q[m] >= 0 && q[m] < steps);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+    assert(ref == 0);')]
===========================================
===========================================
Total add: 31
Total del: 12
Header: const uint8_t *const ff_mpeg2_dc_scale_table[4] = {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+    assert(ref == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+    assert(ref == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    av_assert0(s != s1);')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: ff_mpeg_update_thread_context
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    av_assert0(s != s1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    av_assert0(s != s1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(!s->picture || s->picture != s1->picture);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ff_mpeg_update_thread_context
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(!s->picture || s->picture != s1->picture);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(!s->picture || s->picture != s1->picture);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->last_picture_ptr == NULL || s->out_format != FMT_H264 ||')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: MPV_frame_start
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->last_picture_ptr == NULL || s->out_format != FMT_H264 ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->last_picture_ptr == NULL || s->out_format != FMT_H264 ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(79, 2, u'-                        assert(USES_LIST(mb_type, 0) && USES_LIST(mb_type, 1));'), (81, 1, u'+                        av_assert2(USES_LIST(mb_type, 0) && USES_LIST(mb_type, 1));')]
===========================================
===========================================
Total add: 31
Total del: 27
Header: draw_arrow
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(79, 2, u'-                        assert(USES_LIST(mb_type, 0) && USES_LIST(mb_type, 1));'), (81, 1, u'+                        av_assert2(USES_LIST(mb_type, 0) && USES_LIST(mb_type, 1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(79, 2, u'-                        assert(USES_LIST(mb_type, 0) && USES_LIST(mb_type, 1));'), (81, 1, u'+                        av_assert2(USES_LIST(mb_type, 0) && USES_LIST(mb_type, 1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(USES_LIST(mb_type, 0) && USES_LIST(mb_type, 1));'), (3, 1, u'+                        av_assert2(USES_LIST(mb_type, 0) && USES_LIST(mb_type, 1));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_print_debug_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(USES_LIST(mb_type, 0) && USES_LIST(mb_type, 1));'), (3, 1, u'+                        av_assert2(USES_LIST(mb_type, 0) && USES_LIST(mb_type, 1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(USES_LIST(mb_type, 0) && USES_LIST(mb_type, 1));'), (3, 1, u'+                        av_assert2(USES_LIST(mb_type, 0) && USES_LIST(mb_type, 1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (3, 1, u'+        av_assert2(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MPV_motion_lowres
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (3, 1, u'+        av_assert2(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (3, 1, u'+        av_assert2(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->pict_type!=AV_PICTURE_TYPE_I);'), (3, 1, u'+                av_assert2(s->pict_type!=AV_PICTURE_TYPE_I);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MPV_decode_mb_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->pict_type!=AV_PICTURE_TYPE_I);'), (3, 1, u'+                av_assert2(s->pict_type!=AV_PICTURE_TYPE_I);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->pict_type!=AV_PICTURE_TYPE_I);'), (3, 1, u'+                av_assert2(s->pict_type!=AV_PICTURE_TYPE_I);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert((s->mb_y&1) == (s->picture_structure == PICT_BOTTOM_FIELD));'), (3, 1, u'+            av_assert1((s->mb_y&1) == (s->picture_structure == PICT_BOTTOM_FIELD));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_init_block_index
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert((s->mb_y&1) == (s->picture_structure == PICT_BOTTOM_FIELD));'), (3, 1, u'+            av_assert1((s->mb_y&1) == (s->picture_structure == PICT_BOTTOM_FIELD));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert((s->mb_y&1) == (s->picture_structure == PICT_BOTTOM_FIELD));'), (3, 1, u'+            av_assert1((s->mb_y&1) == (s->picture_structure == PICT_BOTTOM_FIELD));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(scale >= 0 && scale <= 3);'), (3, 1, u'+    av_assert0(scale >= 0 && scale <= 3);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: estimate_best_b_count
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(scale >= 0 && scale <= 3);'), (3, 1, u'+    av_assert0(scale >= 0 && scale <= 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(scale >= 0 && scale <= 3);'), (3, 1, u'+    av_assert0(scale >= 0 && scale <= 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(vbv_delay < 0xFFFF);'), (3, 1, u'+            av_assert0(vbv_delay < 0xFFFF);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: vbv_retry:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(vbv_delay < 0xFFFF);'), (3, 1, u'+            av_assert0(vbv_delay < 0xFFFF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(vbv_delay < 0xFFFF);'), (3, 1, u'+            av_assert0(vbv_delay < 0xFFFF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-        assert((put_bits_ptr(&s->pb) == s->pb.buf));')]
===========================================
===========================================
Total add: 14
Total del: 1
Header: vbv_retry:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-        assert((put_bits_ptr(&s->pb) == s->pb.buf));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-        assert((put_bits_ptr(&s->pb) == s->pb.buf));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->out_format != FMT_MJPEG || s->qscale == 8);'), (3, 1, u'+    av_assert2(s->out_format != FMT_MJPEG || s->qscale == 8);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encode_mb_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->out_format != FMT_MJPEG || s->qscale == 8);'), (3, 1, u'+    av_assert2(s->out_format != FMT_MJPEG || s->qscale == 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->out_format != FMT_MJPEG || s->qscale == 8);'), (3, 1, u'+    av_assert2(s->out_format != FMT_MJPEG || s->qscale == 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (3, 1, u'+        av_assert1(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encode_mb_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (3, 1, u'+        av_assert1(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (3, 1, u'+        av_assert1(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(acc>=0);'), (3, 1, u'+    av_assert2(acc>=0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(acc>=0);'), (3, 1, u'+    av_assert2(acc>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(acc>=0);'), (3, 1, u'+    av_assert2(acc>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert((put_bits_count(&s->pb)&7) == 0);'), (3, 1, u'+                    av_assert2((put_bits_count(&s->pb)&7) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encode_thread
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert((put_bits_count(&s->pb)&7) == 0);'), (3, 1, u'+                    av_assert2((put_bits_count(&s->pb)&7) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert((put_bits_count(&s->pb)&7) == 0);'), (3, 1, u'+                    av_assert2((put_bits_count(&s->pb)&7) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-                        assert(backup_s.dquant == 0);'), (9, 1, u'+                        av_assert2(backup_s.dquant == 0);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: encode_thread
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-                        assert(backup_s.dquant == 0);'), (9, 1, u'+                        av_assert2(backup_s.dquant == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-                        assert(backup_s.dquant == 0);'), (9, 1, u'+                        av_assert2(backup_s.dquant == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (3, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encode_picture
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (3, 1, u'+        av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (3, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(coeff_count[i]);'), (3, 1, u'+            av_assert2(coeff_count[i]);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dct_quantize_trellis_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(coeff_count[i]);'), (3, 1, u'+            av_assert2(coeff_count[i]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(coeff_count[i]);'), (3, 1, u'+            av_assert2(coeff_count[i]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(level);'), (3, 1, u'+            av_assert2(level);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dct_quantize_trellis_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(level);'), (3, 1, u'+            av_assert2(level);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(level);'), (3, 1, u'+            av_assert2(level);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(last_level);'), (3, 1, u'+    av_assert2(last_level);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dct_quantize_trellis_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(last_level);'), (3, 1, u'+    av_assert2(last_level);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(last_level);'), (3, 1, u'+    av_assert2(last_level);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(w>0);'), (3, 2, u'-        assert(w<(1<<6));'), (4, 1, u'+        av_assert2(w>0);'), (5, 1, u'+        av_assert2(w<(1<<6));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: STOP_TIMER
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(w>0);'), (3, 2, u'-        assert(w<(1<<6));'), (4, 1, u'+        av_assert2(w>0);'), (5, 1, u'+        av_assert2(w<(1<<6));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(w>0);'), (3, 2, u'-        assert(w<(1<<6));'), (4, 1, u'+        av_assert2(w>0);'), (5, 1, u'+        av_assert2(w<(1<<6));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(s->mb_intra);'), (3, 1, u'+            av_assert2(s->mb_intra);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: STOP_TIMER
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(s->mb_intra);'), (3, 1, u'+            av_assert2(s->mb_intra);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(s->mb_intra);'), (3, 1, u'+            av_assert2(s->mb_intra);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(run2>=0 || i >= last_non_zero );'), (3, 1, u'+                av_assert2(run2>=0 || i >= last_non_zero );')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: STOP_TIMER
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(run2>=0 || i >= last_non_zero );'), (3, 1, u'+                av_assert2(run2>=0 || i >= last_non_zero );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(run2>=0 || i >= last_non_zero );'), (3, 1, u'+                av_assert2(run2>=0 || i >= last_non_zero );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(FFABS(new_level)==1);'), (3, 1, u'+                        av_assert2(FFABS(new_level)==1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: STOP_TIMER
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(FFABS(new_level)==1);'), (3, 1, u'+                        av_assert2(FFABS(new_level)==1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(FFABS(new_level)==1);'), (3, 1, u'+                        av_assert2(FFABS(new_level)==1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(FFABS(level)==1);'), (3, 1, u'+                    av_assert2(FFABS(level)==1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: STOP_TIMER
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(FFABS(level)==1);'), (3, 1, u'+                    av_assert2(FFABS(level)==1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(FFABS(level)==1);'), (3, 1, u'+                    av_assert2(FFABS(level)==1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert((score < 100*lambda && score > -100*lambda) || lambda==0);'), (3, 1, u'+                av_assert2((score < 100*lambda && score > -100*lambda) || lambda==0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: STOP_TIMER
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert((score < 100*lambda && score > -100*lambda) || lambda==0);'), (3, 1, u'+                av_assert2((score < 100*lambda && score > -100*lambda) || lambda==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert((score < 100*lambda && score > -100*lambda) || lambda==0);'), (3, 1, u'+                av_assert2((score < 100*lambda && score > -100*lambda) || lambda==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(block[j]);'), (3, 1, u'+                av_assert2(block[j]);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: STOP_TIMER
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(block[j]);'), (3, 1, u'+                av_assert2(block[j]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(block[j]);'), (3, 1, u'+                av_assert2(block[j]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(bpp || !pred);'), (3, 1, u'+    av_assert0(bpp || !pred);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: *png_choose_filter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(bpp || !pred);'), (3, 1, u'+    av_assert0(bpp || !pred);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(bpp || !pred);'), (3, 1, u'+    av_assert0(bpp || !pred);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+#define ASSERT_ALIGNED(ptr) assert(((unsigned long)ptr&0x0000000F));'), (26, 1, u'+#define ASSERT_ALIGNED(ptr) ;'), (157, 1, u'+        ASSERT_ALIGNED(dst);'), (265, 1, u'+        ASSERT_ALIGNED(dst);'), (498, 1, u'+        ASSERT_ALIGNED(dst);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-#define ASSERT_ALIGNED(ptr) assert(((unsigned long)ptr&0x0000000F));'), (24, 2, u'-#define ASSERT_ALIGNED(ptr) ;'), (423, 2, u'-        ASSERT_ALIGNED(dst);'), (532, 2, u'-        ASSERT_ALIGNED(dst);'), (766, 2, u'-        ASSERT_ALIGNED(dst);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    av_assert2(order>=0);')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: do_hybrid_window
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    av_assert2(order>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    av_assert2(order>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(74, 2, u'-    assert(c->low   == 0);'), (75, 2, u'-    assert(c->range >= 0x100);'), (76, 1, u'+    av_assert1(c->low   == 0);'), (77, 1, u'+    av_assert1(c->range >= 0x100);')]
===========================================
===========================================
Total add: 33
Total del: 32
Header: ff_build_rac_states
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(74, 2, u'-    assert(c->low   == 0);'), (75, 2, u'-    assert(c->range >= 0x100);'), (76, 1, u'+    av_assert1(c->low   == 0);'), (77, 1, u'+    av_assert1(c->range >= 0x100);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(74, 2, u'-    assert(c->low   == 0);'), (75, 2, u'-    assert(c->range >= 0x100);'), (76, 1, u'+    av_assert1(c->low   == 0);'), (77, 1, u'+    av_assert1(c->range >= 0x100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+        av_assert1(s->frame_bits >= s->stuffing_bits);'), (21, 2, u'-        assert(picture_number>=0);'), (22, 2, u'-        assert(picture_number<rcc->num_entries);'), (27, 1, u'+        assert(picture_number >= 0);')]
===========================================
===========================================
Total add: 66
Total del: 59
Header: ff_rate_estimate_qscale
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+        av_assert1(s->frame_bits >= s->stuffing_bits);'), (21, 2, u'-        assert(picture_number>=0);'), (22, 2, u'-        assert(picture_number<rcc->num_entries);'), (27, 1, u'+        assert(picture_number >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+        av_assert1(s->frame_bits >= s->stuffing_bits);'), (21, 2, u'-        assert(picture_number>=0);'), (22, 2, u'-        assert(picture_number<rcc->num_entries);'), (27, 1, u'+        assert(picture_number >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(q>0.0);'), (6, 2, u'-        assert(q>0.0);'), (7, 1, u'+        assert(q > 0.0);'), (9, 1, u'+        assert(q > 0.0);'), (27, 2, u'-        assert(q>0.0);'), (28, 1, u'+        assert(q > 0.0);'), (36, 2, u'-        assert(q>0.0);'), (37, 1, u'+        assert(q > 0.0);')]
===========================================
===========================================
Total add: 33
Total del: 29
Header: ff_rate_estimate_qscale
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(q>0.0);'), (6, 2, u'-        assert(q>0.0);'), (7, 1, u'+        assert(q > 0.0);'), (9, 1, u'+        assert(q > 0.0);'), (27, 2, u'-        assert(q>0.0);'), (28, 1, u'+        assert(q > 0.0);'), (36, 2, u'-        assert(q>0.0);'), (37, 1, u'+        assert(q > 0.0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(q>0.0);'), (6, 2, u'-        assert(q>0.0);'), (7, 1, u'+        assert(q > 0.0);'), (9, 1, u'+        assert(q > 0.0);'), (27, 2, u'-        assert(q>0.0);'), (28, 1, u'+        assert(q > 0.0);'), (36, 2, u'-        assert(q>0.0);'), (37, 1, u'+        assert(q > 0.0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 2, u'-        assert(filter_size%2==1);'), (29, 1, u'+        assert(filter_size % 2 == 1);')]
===========================================
===========================================
Total add: 17
Total del: 16
Header: init_pass2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 2, u'-        assert(filter_size%2==1);'), (29, 1, u'+        assert(filter_size % 2 == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 2, u'-        assert(filter_size%2==1);'), (29, 1, u'+        assert(filter_size % 2 == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            av_assert0(avctx->bits_per_coded_sample == 2);')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: raw_decode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            av_assert0(avctx->bits_per_coded_sample == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            av_assert0(avctx->bits_per_coded_sample == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(compensation_distance > 0);'), (3, 1, u'+        av_assert2(compensation_distance > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: av_resample
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(compensation_distance > 0);'), (3, 1, u'+        av_assert2(compensation_distance > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(compensation_distance > 0);'), (3, 1, u'+        av_assert2(compensation_distance > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                    av_assert2(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: roqvideo_decode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                    av_assert2(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                    av_assert2(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type != AV_PICTURE_TYPE_B || !s->low_delay);'), (3, 1, u'+    av_assert0(s->pict_type != AV_PICTURE_TYPE_B || !s->low_delay);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: av_log
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type != AV_PICTURE_TYPE_B || !s->low_delay);'), (3, 1, u'+    av_assert0(s->pict_type != AV_PICTURE_TYPE_B || !s->low_delay);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type != AV_PICTURE_TYPE_B || !s->low_delay);'), (3, 1, u'+    av_assert0(s->pict_type != AV_PICTURE_TYPE_B || !s->low_delay);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->f_code == 1);'), (3, 2, u'-    assert(s->unrestricted_mv == 0);'), (4, 2, u'-    assert(s->alt_inter_vlc == 0);'), (5, 2, u'-    assert(s->umvplus == 0);'), (6, 2, u'-    assert(s->modified_quant==1);'), (7, 2, u'-    assert(s->loop_filter==1);'), (8, 1, u'+    av_assert0(s->f_code == 1);'), (9, 1, u'+    av_assert0(s->unrestricted_mv == 0);'), (10, 1, u'+    av_assert0(s->alt_inter_vlc == 0);'), (11, 1, u'+    av_assert0(s->umvplus == 0);'), (12, 1, u'+    av_assert0(s->modified_quant==1);'), (13, 1, u'+    av_assert0(s->loop_filter==1);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: rv20_encode_picture_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->f_code == 1);'), (3, 2, u'-    assert(s->unrestricted_mv == 0);'), (4, 2, u'-    assert(s->alt_inter_vlc == 0);'), (5, 2, u'-    assert(s->umvplus == 0);'), (6, 2, u'-    assert(s->modified_quant==1);'), (7, 2, u'-    assert(s->loop_filter==1);'), (8, 1, u'+    av_assert0(s->f_code == 1);'), (9, 1, u'+    av_assert0(s->unrestricted_mv == 0);'), (10, 1, u'+    av_assert0(s->alt_inter_vlc == 0);'), (11, 1, u'+    av_assert0(s->umvplus == 0);'), (12, 1, u'+    av_assert0(s->modified_quant==1);'), (13, 1, u'+    av_assert0(s->loop_filter==1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->f_code == 1);'), (3, 2, u'-    assert(s->unrestricted_mv == 0);'), (4, 2, u'-    assert(s->alt_inter_vlc == 0);'), (5, 2, u'-    assert(s->umvplus == 0);'), (6, 2, u'-    assert(s->modified_quant==1);'), (7, 2, u'-    assert(s->loop_filter==1);'), (8, 1, u'+    av_assert0(s->f_code == 1);'), (9, 1, u'+    av_assert0(s->unrestricted_mv == 0);'), (10, 1, u'+    av_assert0(s->alt_inter_vlc == 0);'), (11, 1, u'+    av_assert0(s->umvplus == 0);'), (12, 1, u'+    av_assert0(s->modified_quant==1);'), (13, 1, u'+    av_assert0(s->loop_filter==1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);\\')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: rv40_chroma_mc4_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);\\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);\\')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: rv40_chroma_mc8_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);\\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(dx<16 && dy<16);'), (3, 1, u'+    av_assert2(dx<16 && dy<16);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mc_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(dx<16 && dy<16);'), (3, 1, u'+    av_assert2(dx<16 && dy<16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(dx<16 && dy<16);'), (3, 1, u'+    av_assert2(dx<16 && dy<16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        av_assert2(s->chroma_h_shift == s->chroma_v_shift); // only one mv_scale'), (15, 2, u'-        assert(b_w>1 && b_h>1);'), (16, 2, u'-        assert((tab_index>=0 && tab_index<4) || b_w==32);'), (17, 1, u'+        av_assert2(b_w>1 && b_h>1);'), (18, 1, u'+        av_assert2((tab_index>=0 && tab_index<4) || b_w==32);')]
===========================================
===========================================
Total add: 8
Total del: 5
Header: ff_snow_pred_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        av_assert2(s->chroma_h_shift == s->chroma_v_shift); // only one mv_scale'), (15, 2, u'-        assert(b_w>1 && b_h>1);'), (16, 2, u'-        assert((tab_index>=0 && tab_index<4) || b_w==32);'), (17, 1, u'+        av_assert2(b_w>1 && b_h>1);'), (18, 1, u'+        av_assert2((tab_index>=0 && tab_index<4) || b_w==32);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        av_assert2(s->chroma_h_shift == s->chroma_v_shift); // only one mv_scale'), (15, 2, u'-        assert(b_w>1 && b_h>1);'), (16, 2, u'-        assert((tab_index>=0 && tab_index<4) || b_w==32);'), (17, 1, u'+        av_assert2(b_w>1 && b_h>1);'), (18, 1, u'+        av_assert2((tab_index>=0 && tab_index<4) || b_w==32);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-            assert(2*b_w==b_h);'), (19, 1, u'+            av_assert2(2*b_w==b_h);')]
===========================================
===========================================
Total add: 8
Total del: 8
Header: ff_snow_pred_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-            assert(2*b_w==b_h);'), (19, 1, u'+            av_assert2(2*b_w==b_h);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-            assert(2*b_w==b_h);'), (19, 1, u'+            av_assert2(2*b_w==b_h);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(h==b_w);\\'), (5, 1, u'+    av_assert2(h==b_w);\\')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ff_snow_pred_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(h==b_w);\\'), (5, 1, u'+    av_assert2(h==b_w);\\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(h==b_w);\\'), (5, 1, u'+    av_assert2(h==b_w);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            av_assert0(s->last_picture[i].data[0] != s->current_picture.data[0]);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: ff_snow_common_end
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            av_assert0(s->last_picture[i].data[0] != s->current_picture.data[0]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            av_assert0(s->last_picture[i].data[0] != s->current_picture.data[0]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2(s->chroma_h_shift == s->chroma_v_shift); //obmc stuff above')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: get_dc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2(s->chroma_h_shift == s->chroma_v_shift); //obmc stuff above')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2(s->chroma_h_shift == s->chroma_v_shift); //obmc stuff above')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    av_assert2(s->chroma_h_shift == s->chroma_v_shift); //obmc and square assumtions below chckinhg only block_w')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: get_block_rd
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    av_assert2(s->chroma_h_shift == s->chroma_v_shift); //obmc and square assumtions below chckinhg only block_w')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    av_assert2(s->chroma_h_shift == s->chroma_v_shift); //obmc and square assumtions below chckinhg only block_w')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2(s->chroma_h_shift == s->chroma_v_shift); //obmc and square assumtions below')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: get_4block_rd
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2(s->chroma_h_shift == s->chroma_v_shift); //obmc and square assumtions below')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2(s->chroma_h_shift == s->chroma_v_shift); //obmc and square assumtions below')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-                    assert(mean >-300 && mean<300);'), (45, 1, u'+                    av_assert2(mean > -300 && mean < 300);'), (53, 2, u'-            assert(best_vector_mean != -999);'), (68, 1, u'+            av_assert0(best_vector_mean != -999);')]
===========================================
===========================================
Total add: 36
Total del: 37
Header: encode_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-                    assert(mean >-300 && mean<300);'), (45, 1, u'+                    av_assert2(mean > -300 && mean < 300);'), (53, 2, u'-            assert(best_vector_mean != -999);'), (68, 1, u'+            av_assert0(best_vector_mean != -999);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-                    assert(mean >-300 && mean<300);'), (45, 1, u'+                    av_assert2(mean > -300 && mean < 300);'), (53, 2, u'-            assert(best_vector_mean != -999);'), (68, 1, u'+            av_assert0(best_vector_mean != -999);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert((best_mean >= 0 && best_mean<256) || !intra);'), (4, 2, u'-        assert(best_mean >= -256 && best_mean<256);'), (5, 2, u'-        assert(best_count >=0 && best_count<7);'), (6, 2, u'-        assert(level<4 || best_count==0);'), (8, 1, u'+        av_assert1(best_mean >= 0 && best_mean < 256 || !intra);'), (9, 1, u'+        av_assert1(best_mean >= -256 && best_mean < 256);'), (10, 1, u'+        av_assert1(best_count >= 0 && best_count < 7);'), (11, 1, u'+        av_assert1(level < 4 || best_count == 0);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: encode_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert((best_mean >= 0 && best_mean<256) || !intra);'), (4, 2, u'-        assert(best_mean >= -256 && best_mean<256);'), (5, 2, u'-        assert(best_count >=0 && best_count<7);'), (6, 2, u'-        assert(level<4 || best_count==0);'), (8, 1, u'+        av_assert1(best_mean >= 0 && best_mean < 256 || !intra);'), (9, 1, u'+        av_assert1(best_mean >= -256 && best_mean < 256);'), (10, 1, u'+        av_assert1(best_count >= 0 && best_count < 7);'), (11, 1, u'+        av_assert1(level < 4 || best_count == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert((best_mean >= 0 && best_mean<256) || !intra);'), (4, 2, u'-        assert(best_mean >= -256 && best_mean<256);'), (5, 2, u'-        assert(best_count >=0 && best_count<7);'), (6, 2, u'-        assert(level<4 || best_count==0);'), (8, 1, u'+        av_assert1(best_mean >= 0 && best_mean < 256 || !intra);'), (9, 1, u'+        av_assert1(best_mean >= -256 && best_mean < 256);'), (10, 1, u'+        av_assert1(best_count >= 0 && best_count < 7);'), (11, 1, u'+        av_assert1(level < 4 || best_count == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-            assert(best_vector[i]>=0 && best_vector[i]<16);'), (13, 1, u'+            av_assert2(best_vector[i] >= 0 && best_vector[i] < 16);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: encode_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-            assert(best_vector[i]>=0 && best_vector[i]<16);'), (13, 1, u'+            av_assert2(best_vector[i] >= 0 && best_vector[i] < 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-            assert(best_vector[i]>=0 && best_vector[i]<16);'), (13, 1, u'+            av_assert2(best_vector[i] >= 0 && best_vector[i] < 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-                    assert(mx>=-32 && mx<=31);'), (6, 2, u'-                    assert(my>=-32 && my<=31);'), (7, 2, u'-                    assert(pred_x>=-32 && pred_x<=31);'), (8, 2, u'-                    assert(pred_y>=-32 && pred_y<=31);'), (12, 1, u'+                    av_assert1(mx     >= -32 && mx     <= 31);'), (13, 1, u'+                    av_assert1(my     >= -32 && my     <= 31);'), (14, 1, u'+                    av_assert1(pred_x >= -32 && pred_x <= 31);'), (15, 1, u'+                    av_assert1(pred_y >= -32 && pred_y <= 31);')]
===========================================
===========================================
Total add: 29
Total del: 25
Header: svq1_encode_plane
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-                    assert(mx>=-32 && mx<=31);'), (6, 2, u'-                    assert(my>=-32 && my<=31);'), (7, 2, u'-                    assert(pred_x>=-32 && pred_x<=31);'), (8, 2, u'-                    assert(pred_y>=-32 && pred_y<=31);'), (12, 1, u'+                    av_assert1(mx     >= -32 && mx     <= 31);'), (13, 1, u'+                    av_assert1(my     >= -32 && my     <= 31);'), (14, 1, u'+                    av_assert1(pred_x >= -32 && pred_x <= 31);'), (15, 1, u'+                    av_assert1(pred_y >= -32 && pred_y <= 31);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-                    assert(mx>=-32 && mx<=31);'), (6, 2, u'-                    assert(my>=-32 && my<=31);'), (7, 2, u'-                    assert(pred_x>=-32 && pred_x<=31);'), (8, 2, u'-                    assert(pred_y>=-32 && pred_y<=31);'), (12, 1, u'+                    av_assert1(mx     >= -32 && mx     <= 31);'), (13, 1, u'+                    av_assert1(my     >= -32 && my     <= 31);'), (14, 1, u'+                    av_assert1(pred_x >= -32 && pred_x <= 31);'), (15, 1, u'+                    av_assert1(pred_y >= -32 && pred_y <= 31);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->num_entries < TIFF_MAX_ENTRY);'), (3, 1, u'+    av_assert0(s->num_entries < TIFF_MAX_ENTRY);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: add_entry
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->num_entries < TIFF_MAX_ENTRY);'), (3, 1, u'+    av_assert0(s->num_entries < TIFF_MAX_ENTRY);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->num_entries < TIFF_MAX_ENTRY);'), (3, 1, u'+    av_assert0(s->num_entries < TIFF_MAX_ENTRY);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->codec_type == AVMEDIA_TYPE_VIDEO);'), (3, 1, u'+    av_assert0(s->codec_type == AVMEDIA_TYPE_VIDEO);'), (5, 2, u'-    assert(pic->type==FF_BUFFER_TYPE_INTERNAL);'), (6, 1, u'+    assert(pic->type == FF_BUFFER_TYPE_INTERNAL);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: avcodec_default_release_buffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->codec_type == AVMEDIA_TYPE_VIDEO);'), (3, 1, u'+    av_assert0(s->codec_type == AVMEDIA_TYPE_VIDEO);'), (5, 2, u'-    assert(pic->type==FF_BUFFER_TYPE_INTERNAL);'), (6, 1, u'+    assert(pic->type == FF_BUFFER_TYPE_INTERNAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->codec_type == AVMEDIA_TYPE_VIDEO);'), (3, 1, u'+    av_assert0(s->codec_type == AVMEDIA_TYPE_VIDEO);'), (5, 2, u'-    assert(pic->type==FF_BUFFER_TYPE_INTERNAL);'), (6, 1, u'+    assert(pic->type == FF_BUFFER_TYPE_INTERNAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(i < avci->buffer_count);'), (3, 1, u'+        av_assert0(i < avci->buffer_count);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: avcodec_default_release_buffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(i < avci->buffer_count);'), (3, 1, u'+        av_assert0(i < avci->buffer_count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(i < avci->buffer_count);'), (3, 1, u'+        av_assert0(i < avci->buffer_count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    assert(s->codec_type == AVMEDIA_TYPE_VIDEO);'), (25, 1, u'+    av_assert0(s->codec_type == AVMEDIA_TYPE_VIDEO);')]
===========================================
===========================================
Total add: 8
Total del: 9
Header: avcodec_default_release_buffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    assert(s->codec_type == AVMEDIA_TYPE_VIDEO);'), (25, 1, u'+    av_assert0(s->codec_type == AVMEDIA_TYPE_VIDEO);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    assert(s->codec_type == AVMEDIA_TYPE_VIDEO);'), (25, 1, u'+    av_assert0(s->codec_type == AVMEDIA_TYPE_VIDEO);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    assert(s->pix_fmt == pic->format);')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: avcodec_default_reget_buffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    assert(s->pix_fmt == pic->format);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    assert(s->pix_fmt == pic->format);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 2, u'-                av_assert0(av_get_bits_per_sample(avctx->codec_id) != 0);')]
===========================================
===========================================
Total add: 86
Total del: 78
Header: avcodec_encode_audio2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 2, u'-                av_assert0(av_get_bits_per_sample(avctx->codec_id) != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 2, u'-                av_assert0(av_get_bits_per_sample(avctx->codec_id) != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+            av_assert1((ret >= 0) >= !!*got_sub_ptr &&')]
===========================================
===========================================
Total add: 44
Total del: 10
Header: avcodec_decode_audio4
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+            av_assert1((ret >= 0) >= !!*got_sub_ptr &&')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+            av_assert1((ret >= 0) >= !!*got_sub_ptr &&')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    av_assert0(CODEC_ID_V410==164);'), (6, 2, u'-    av_assert0(CODEC_ID_PCM_S8_PLANAR==65563);'), (7, 2, u'-    av_assert0(CODEC_ID_ADPCM_G722==69660);'), (8, 2, u'-    av_assert0(CODEC_ID_BMV_AUDIO==86071);'), (9, 2, u'-    av_assert0(CODEC_ID_SRT==94216);'), (11, 1, u'+    av_assert0(AV_CODEC_ID_PCM_S8_PLANAR==65563);'), (12, 1, u'+    av_assert0(AV_CODEC_ID_ADPCM_G722==69660);'), (14, 1, u'+    av_assert0(AV_CODEC_ID_SRT==94216);')]
===========================================
===========================================
Total add: 7
Total del: 7
Header: *av_get_profile_name
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    av_assert0(CODEC_ID_V410==164);'), (6, 2, u'-    av_assert0(CODEC_ID_PCM_S8_PLANAR==65563);'), (7, 2, u'-    av_assert0(CODEC_ID_ADPCM_G722==69660);'), (8, 2, u'-    av_assert0(CODEC_ID_BMV_AUDIO==86071);'), (9, 2, u'-    av_assert0(CODEC_ID_SRT==94216);'), (11, 1, u'+    av_assert0(AV_CODEC_ID_PCM_S8_PLANAR==65563);'), (12, 1, u'+    av_assert0(AV_CODEC_ID_ADPCM_G722==69660);'), (14, 1, u'+    av_assert0(AV_CODEC_ID_SRT==94216);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    av_assert0(CODEC_ID_V410==164);'), (6, 2, u'-    av_assert0(CODEC_ID_PCM_S8_PLANAR==65563);'), (7, 2, u'-    av_assert0(CODEC_ID_ADPCM_G722==69660);'), (8, 2, u'-    av_assert0(CODEC_ID_BMV_AUDIO==86071);'), (9, 2, u'-    av_assert0(CODEC_ID_SRT==94216);'), (11, 1, u'+    av_assert0(AV_CODEC_ID_PCM_S8_PLANAR==65563);'), (12, 1, u'+    av_assert0(AV_CODEC_ID_ADPCM_G722==69660);'), (14, 1, u'+    av_assert0(AV_CODEC_ID_SRT==94216);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            av_assert2(0);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: vc1_mc_4mv_luma
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            av_assert2(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            av_assert2(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(index < esc);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: get_mvdata_interlaced
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(index < esc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(index < esc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+                else av_assert2(0);')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: vc1_pred_mv_intfr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+                else av_assert2(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+                else av_assert2(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: put_no_rnd_vc1_chroma_mc8_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: put_no_rnd_vc1_chroma_mc4_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: avg_no_rnd_vc1_chroma_mc8_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);'), (3, 1, u'+    av_assert2(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(vr->classifications > 1 && temp <= 65536); //needed for inverse[]'), (3, 1, u'+                        av_assert0(vr->classifications > 1 && temp <= 65536); //needed for inverse[]')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: vorbis_residue_decode_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(vr->classifications > 1 && temp <= 65536); //needed for inverse[]'), (3, 1, u'+                        av_assert0(vr->classifications > 1 && temp <= 65536); //needed for inverse[]')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(vr->classifications > 1 && temp <= 65536); //needed for inverse[]'), (3, 1, u'+                        av_assert0(vr->classifications > 1 && temp <= 65536); //needed for inverse[]')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(cb->ndimentions >= 2);'), (3, 1, u'+        assert(cb->ndimensions >= 2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ready_residue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(cb->ndimentions >= 2);'), (3, 1, u'+        assert(cb->ndimensions >= 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(cb->ndimentions >= 2);'), (3, 1, u'+        assert(cb->ndimensions >= 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(book->dimentions);'), (3, 1, u'+    assert(book->dimensions);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: *put_vector
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(book->dimentions);'), (3, 1, u'+    assert(book->dimensions);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(book->dimentions);'), (3, 1, u'+    assert(book->dimensions);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(!(psize % book->ndimentions));'), (3, 1, u'+                    assert(!(psize % book->ndimensions));')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: residue_encode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(!(psize % book->ndimentions));'), (3, 1, u'+                    assert(!(psize % book->ndimensions));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(!(psize % book->ndimentions));'), (3, 1, u'+                    assert(!(psize % book->ndimensions));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(filter_limit < 128U);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: init_loop_filter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(filter_limit < 128U);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(filter_limit < 128U);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    av_assert0(p != 0);')]
===========================================
===========================================
Total add: 15
Total del: 2
Header: ff_vp56_decode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    av_assert0(p != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    av_assert0(p != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (3, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encode_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (3, 1, u'+        av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (3, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(last_exp-10 >= 0 && last_exp-10 < 32);'), (3, 1, u'+        av_assert0(last_exp-10 >= 0 && last_exp-10 < 32);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encode_exp_vlc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(last_exp-10 >= 0 && last_exp-10 < 32);'), (3, 1, u'+        av_assert0(last_exp-10 >= 0 && last_exp-10 < 32);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(last_exp-10 >= 0 && last_exp-10 < 32);'), (3, 1, u'+        av_assert0(last_exp-10 >= 0 && last_exp-10 < 32);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(code >= 0 && code < 120);'), (3, 1, u'+        av_assert1(code >= 0 && code < 120);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encode_exp_vlc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(code >= 0 && code < 120);'), (3, 1, u'+        av_assert1(code >= 0 && code < 120);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(code >= 0 && code < 120);'), (3, 1, u'+        av_assert1(code >= 0 && code < 120);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0); //FIXME not implemented'), (3, 1, u'+        av_assert0(0); //FIXME not implemented')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encode_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0); //FIXME not implemented'), (3, 1, u'+        av_assert0(0); //FIXME not implemented')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0); //FIXME not implemented'), (3, 1, u'+        av_assert0(0); //FIXME not implemented')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(0); //FIXME not implemented'), (3, 1, u'+                av_assert0(0); //FIXME not implemented')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encode_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(0); //FIXME not implemented'), (3, 1, u'+                av_assert0(0); //FIXME not implemented')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(0); //FIXME not implemented'), (3, 1, u'+                av_assert0(0); //FIXME not implemented')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(0); //FIXME not implemented'), (3, 1, u'+                    av_assert0(0); //FIXME not implemented')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encode_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(0); //FIXME not implemented'), (3, 1, u'+                    av_assert0(0); //FIXME not implemented')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(0); //FIXME not implemented'), (3, 1, u'+                    av_assert0(0); //FIXME not implemented')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0); //FIXME not implemented'), (3, 1, u'+        av_assert0(0); //FIXME not implemented')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: encode_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0); //FIXME not implemented'), (3, 1, u'+        av_assert0(0); //FIXME not implemented')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0); //FIXME not implemented'), (3, 1, u'+        av_assert0(0); //FIXME not implemented')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(code < s->coef_vlcs[tindex]->n);'), (3, 1, u'+                    av_assert2(code < s->coef_vlcs[tindex]->n);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encode_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(code < s->coef_vlcs[tindex]->n);'), (3, 1, u'+                    av_assert2(code < s->coef_vlcs[tindex]->n);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(code < s->coef_vlcs[tindex]->n);'), (3, 1, u'+                    av_assert2(code < s->coef_vlcs[tindex]->n);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);//FIXME not implemented'), (3, 1, u'+        av_assert0(0);//FIXME not implemented')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);//FIXME not implemented'), (3, 1, u'+        av_assert0(0);//FIXME not implemented')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);//FIXME not implemented'), (3, 1, u'+        av_assert0(0);//FIXME not implemented')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-    assert((put_bits_count(&s->pb) & 7) == 0);'), (39, 2, u'-    assert(i>=0);'), (42, 1, u'+    av_assert0((put_bits_count(&s->pb) & 7) == 0);'), (44, 1, u'+    av_assert0(i>=0);')]
===========================================
===========================================
Total add: 10
Total del: 27
Header: encode_superframe
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-    assert((put_bits_count(&s->pb) & 7) == 0);'), (39, 2, u'-    assert(i>=0);'), (42, 1, u'+    av_assert0((put_bits_count(&s->pb) & 7) == 0);'), (44, 1, u'+    av_assert0(i>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-    assert((put_bits_count(&s->pb) & 7) == 0);'), (39, 2, u'-    assert(i>=0);'), (42, 1, u'+    av_assert0((put_bits_count(&s->pb) & 7) == 0);'), (44, 1, u'+    av_assert0(i>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    av_assert0(put_bits_ptr(&s->pb) - s->pb.buf == avctx->block_align);')]
===========================================
===========================================
Total add: 9
Total del: 1
Header: encode_superframe
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    av_assert0(put_bits_ptr(&s->pb) - s->pb.buf == avctx->block_align);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    av_assert0(put_bits_ptr(&s->pb) - s->pb.buf == avctx->block_align);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+    av_assert0(s->samples_per_frame <= WMALL_BLOCK_MAX_SIZE);')]
===========================================
===========================================
Total add: 11
Total del: 10
Header: decode_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+    av_assert0(s->samples_per_frame <= WMALL_BLOCK_MAX_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+    av_assert0(s->samples_per_frame <= WMALL_BLOCK_MAX_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 2, u'-        assert(cbits == my_log2(s->mclms_scaling + 1));')]
===========================================
===========================================
Total add: 8
Total del: 15
Header: decode_ac_filter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 2, u'-        assert(cbits == my_log2(s->mclms_scaling + 1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 2, u'-        assert(cbits == my_log2(s->mclms_scaling + 1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(s->subframe_len <= WMAPRO_BLOCK_MAX_SIZE);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: decode_subframe
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(s->subframe_len <= WMAPRO_BLOCK_MAX_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(s->subframe_len <= WMAPRO_BLOCK_MAX_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(size <= MAX_FRAMESIZE / 2);'), (3, 1, u'+    av_assert0(size <= MAX_FRAMESIZE / 2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: postfilter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(size <= MAX_FRAMESIZE / 2);'), (3, 1, u'+    av_assert0(size <= MAX_FRAMESIZE / 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(size <= MAX_FRAMESIZE / 2);'), (3, 1, u'+    av_assert0(size <= MAX_FRAMESIZE / 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(size <= MAX_FRAMESIZE);'), (3, 1, u'+    av_assert0(size <= MAX_FRAMESIZE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: synth_block_hardcoded
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(size <= MAX_FRAMESIZE);'), (3, 1, u'+    av_assert0(size <= MAX_FRAMESIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(size <= MAX_FRAMESIZE);'), (3, 1, u'+    av_assert0(size <= MAX_FRAMESIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(size <= MAX_FRAMESIZE / 2);'), (3, 1, u'+    av_assert0(size <= MAX_FRAMESIZE / 2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: synth_block_fcb_acb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(size <= MAX_FRAMESIZE / 2);'), (3, 1, u'+    av_assert0(size <= MAX_FRAMESIZE / 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(size <= MAX_FRAMESIZE / 2);'), (3, 1, u'+    av_assert0(size <= MAX_FRAMESIZE / 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(get_bits_left(gb) == get_bits_left(orig_gb));'), (3, 1, u'+    av_assert1(get_bits_left(gb) == get_bits_left(orig_gb));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: check_bits_for_superframe
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(get_bits_left(gb) == get_bits_left(orig_gb));'), (3, 1, u'+    av_assert1(get_bits_left(gb) == get_bits_left(orig_gb));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(get_bits_left(gb) == get_bits_left(orig_gb));'), (3, 1, u'+    av_assert1(get_bits_left(gb) == get_bits_left(orig_gb));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(get_bits_left(gb) == pos);'), (3, 1, u'+        av_assert1(get_bits_left(gb) == pos);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: wmavoice_decode_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(get_bits_left(gb) == pos);'), (3, 1, u'+        av_assert1(get_bits_left(gb) == pos);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(get_bits_left(gb) == pos);'), (3, 1, u'+        av_assert1(get_bits_left(gb) == pos);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->flipflop_rounding);'), (3, 1, u'+    av_assert0(s->flipflop_rounding);'), (6, 2, u'-        assert(s->no_rounding==1);'), (7, 1, u'+        av_assert0(s->no_rounding==1);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ff_wmv2_encode_picture_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->flipflop_rounding);'), (3, 1, u'+    av_assert0(s->flipflop_rounding);'), (6, 2, u'-        assert(s->no_rounding==1);'), (7, 1, u'+        av_assert0(s->no_rounding==1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->flipflop_rounding);'), (3, 1, u'+    av_assert0(s->flipflop_rounding);'), (6, 2, u'-        assert(s->no_rounding==1);'), (7, 1, u'+        av_assert0(s->no_rounding==1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(86, 1, u'+        av_assert1(w == 4);')]
===========================================
===========================================
Total add: 59
Total del: 43
Header: draw_edges_mmx
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(86, 1, u'+        av_assert1(w == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(86, 1, u'+        av_assert1(w == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1143, 2, u'-    assert(start_x < end_x && block_w > 0);'), (1144, 2, u'-    assert(start_y < end_y && block_h > 0);')]
===========================================
===========================================
Total add: 434
Total del: 798
Header: draw_edges_mmx
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1143, 2, u'-    assert(start_x < end_x && block_w > 0);'), (1144, 2, u'-    assert(start_y < end_y && block_h > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1143, 2, u'-    assert(start_x < end_x && block_w > 0);'), (1144, 2, u'-    assert(start_y < end_y && block_h > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert( (((int)pix) & 7) == 0);'), (3, 2, u'-    assert((line_size &7) ==0);'), (4, 1, u'+    av_assert2( (((int)pix) & 7) == 0);'), (5, 1, u'+    av_assert2((line_size &7) ==0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: vsad_intra16_mmx
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert( (((int)pix) & 7) == 0);'), (3, 2, u'-    assert((line_size &7) ==0);'), (4, 1, u'+    av_assert2( (((int)pix) & 7) == 0);'), (5, 1, u'+    av_assert2((line_size &7) ==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert( (((int)pix) & 7) == 0);'), (3, 2, u'-    assert((line_size &7) ==0);'), (4, 1, u'+    av_assert2( (((int)pix) & 7) == 0);'), (5, 1, u'+    av_assert2((line_size &7) ==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert( (((int)pix) & 7) == 0);'), (9, 2, u'-    assert((line_size &7) ==0);'), (10, 1, u'+    av_assert2( (((int)pix) & 7) == 0);'), (11, 1, u'+    av_assert2((line_size &7) ==0);')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: vsad_intra16_mmx
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert( (((int)pix) & 7) == 0);'), (9, 2, u'-    assert((line_size &7) ==0);'), (10, 1, u'+    av_assert2( (((int)pix) & 7) == 0);'), (11, 1, u'+    av_assert2((line_size &7) ==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert( (((int)pix) & 7) == 0);'), (9, 2, u'-    assert((line_size &7) ==0);'), (10, 1, u'+    av_assert2( (((int)pix) & 7) == 0);'), (11, 1, u'+    av_assert2((line_size &7) ==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert( (((int)pix1) & 7) == 0);'), (3, 2, u'-    assert( (((int)pix2) & 7) == 0);'), (4, 2, u'-    assert((line_size &7) ==0);'), (5, 1, u'+    av_assert2( (((int)pix1) & 7) == 0);'), (6, 1, u'+    av_assert2( (((int)pix2) & 7) == 0);'), (7, 1, u'+    av_assert2((line_size &7) ==0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: vsad16_mmx
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert( (((int)pix1) & 7) == 0);'), (3, 2, u'-    assert( (((int)pix2) & 7) == 0);'), (4, 2, u'-    assert((line_size &7) ==0);'), (5, 1, u'+    av_assert2( (((int)pix1) & 7) == 0);'), (6, 1, u'+    av_assert2( (((int)pix2) & 7) == 0);'), (7, 1, u'+    av_assert2((line_size &7) ==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert( (((int)pix1) & 7) == 0);'), (3, 2, u'-    assert( (((int)pix2) & 7) == 0);'), (4, 2, u'-    assert((line_size &7) ==0);'), (5, 1, u'+    av_assert2( (((int)pix1) & 7) == 0);'), (6, 1, u'+    av_assert2( (((int)pix2) & 7) == 0);'), (7, 1, u'+    av_assert2((line_size &7) ==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert( (((int)pix1) & 7) == 0);'), (9, 2, u'-    assert( (((int)pix2) & 7) == 0);'), (10, 2, u'-    assert((line_size &7) ==0);'), (11, 1, u'+    av_assert2( (((int)pix1) & 7) == 0);'), (12, 1, u'+    av_assert2( (((int)pix2) & 7) == 0);'), (13, 1, u'+    av_assert2((line_size &7) ==0);')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: vsad16_mmx
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert( (((int)pix1) & 7) == 0);'), (9, 2, u'-    assert( (((int)pix2) & 7) == 0);'), (10, 2, u'-    assert((line_size &7) ==0);'), (11, 1, u'+    av_assert2( (((int)pix1) & 7) == 0);'), (12, 1, u'+    av_assert2( (((int)pix2) & 7) == 0);'), (13, 1, u'+    av_assert2((line_size &7) ==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert( (((int)pix1) & 7) == 0);'), (9, 2, u'-    assert( (((int)pix2) & 7) == 0);'), (10, 2, u'-    assert((line_size &7) ==0);'), (11, 1, u'+    av_assert2( (((int)pix1) & 7) == 0);'), (12, 1, u'+    av_assert2( (((int)pix2) & 7) == 0);'), (13, 1, u'+    av_assert2((line_size &7) ==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1118, 2, u'-    assert(((int)temp & 7) == 0);\\'), (1127, 2, u'-    assert(((int)temp & 7) == 0);\\'), (1136, 2, u'-    assert(((int)temp & 7) == 0);\\'), (1145, 2, u'-    assert(((int)temp & 7) == 0);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    assert(buf.index < s->buffers);')]
===========================================
===========================================
Total add: 15
Total del: 7
Header: mmap_read_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    assert(buf.index < s->buffers);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    assert(buf.index < s->buffers);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 2, u'-        assert(*codec_id != CODEC_ID_NONE);'), (70, 1, u'+    av_assert0(*codec_id != AV_CODEC_ID_NONE);')]
===========================================
===========================================
Total add: 40
Total del: 21
Header: v4l2_set_parameters
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 2, u'-        assert(*codec_id != CODEC_ID_NONE);'), (70, 1, u'+    av_assert0(*codec_id != AV_CODEC_ID_NONE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 2, u'-        assert(*codec_id != CODEC_ID_NONE);'), (70, 1, u'+    av_assert0(*codec_id != AV_CODEC_ID_NONE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    av_assert1(input_number < am->nb_inputs);')]
===========================================
===========================================
Total add: 36
Total del: 23
Header: filter_samples
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    av_assert1(input_number < am->nb_inputs);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    av_assert1(input_number < am->nb_inputs);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+    av_assert0(outlink->sample_rate == out_rate);'), (36, 1, u'+    av_assert0(outlink->channel_layout == out_layout || !outlink->channel_layout);'), (37, 1, u'+    av_assert0(outlink->format == out_format);')]
===========================================
===========================================
Total add: 26
Total del: 8
Header: config_output
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+    av_assert0(outlink->sample_rate == out_rate);'), (36, 1, u'+    av_assert0(outlink->channel_layout == out_layout || !outlink->channel_layout);'), (37, 1, u'+    av_assert0(outlink->format == out_format);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+    av_assert0(outlink->sample_rate == out_rate);'), (36, 1, u'+    av_assert0(outlink->channel_layout == out_layout || !outlink->channel_layout);'), (37, 1, u'+    av_assert0(outlink->format == out_format);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1);'), (3, 1, u'+    av_assert0(AV_PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: avfilter_link
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1);'), (3, 1, u'+    av_assert0(AV_PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1);'), (3, 1, u'+    av_assert0(AV_PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(     !input->filter_frame')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: avfilter_register
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(     !input->filter_frame')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(     !input->filter_frame')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    av_assert1(!(*l && (*l)->all_layouts));')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: avfilter_add_format
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    av_assert1(!(*l && (*l)->all_layouts));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    av_assert1(!(*l && (*l)->all_layouts));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 2, u'-        assert(0);'), (195, 2, u'-    assert(mpi->flags&MP_IMGFLAG_PLANAR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 2, u'-        assert(mpi->flags&MP_IMGFLAG_PLANAR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(    !strcmp(ctx->filter->name, "buffersink")')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: av_buffersink_get_buffer_ref
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(    !strcmp(ctx->filter->name, "buffersink")')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(    !strcmp(ctx->filter->name, "buffersink")')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    av_assert0(   !strcmp(ctx->filter->name, "buffersink")')]
===========================================
===========================================
Total add: 5
Total del: 10
Header: av_buffersink_poll_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    av_assert0(   !strcmp(ctx->filter->name, "buffersink")')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    av_assert0(   !strcmp(ctx->filter->name, "buffersink")')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+                    av_assert2(x_s >= 0 && y_s >= 0);'), (8, 1, u'+                    av_assert2(x_s < width && y_s < height);')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: avfilter_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+                    av_assert2(x_s >= 0 && y_s >= 0);'), (8, 1, u'+                    av_assert2(x_s < width && y_s < height);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+                    av_assert2(x_s >= 0 && y_s >= 0);'), (8, 1, u'+                    av_assert2(x_s < width && y_s < height);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Total add: 18
Total del: 9
Header: query_formats
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+        av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 1, u'+    av_assert1(ret != AVERROR(EAGAIN));')]
===========================================
===========================================
Total add: 147
Total del: 15
Header: blend_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 1, u'+    av_assert1(ret != AVERROR(EAGAIN));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 1, u'+    av_assert1(ret != AVERROR(EAGAIN));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-        av_assert0(outpicref->buf->w>0 && outpicref->buf->h>0);'), (24, 1, u'+        av_assert0(out->buf->w > 0 && out->buf->h > 0);')]
===========================================
===========================================
Total add: 50
Total del: 78
Header: does_clip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-        av_assert0(outpicref->buf->w>0 && outpicref->buf->h>0);'), (24, 1, u'+        av_assert0(out->buf->w > 0 && out->buf->h > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-        av_assert0(outpicref->buf->w>0 && outpicref->buf->h>0);'), (24, 1, u'+        av_assert0(out->buf->w > 0 && out->buf->h > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 2, u'-        av_assert0(y%(2<<scale->vsub) == 0);')]
===========================================
===========================================
Total add: 70
Total del: 14
Header: scale_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 2, u'-        av_assert0(y%(2<<scale->vsub) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 2, u'-        av_assert0(y%(2<<scale->vsub) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(picref);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: start_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(picref);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(picref);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+                av_assert0(hdr.frame_size <= sizeof(buf3));')]
===========================================
===========================================
Total add: 21
Total del: 4
Header: ac3_eac3_probe
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+                av_assert0(hdr.frame_size <= sizeof(buf3));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+                av_assert0(hdr.frame_size <= sizeof(buf3));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-        assert(0);'), (34, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Total add: 15
Total del: 18
Header: amr_read_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-        assert(0);'), (34, 1, u'+        av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-        assert(0);'), (34, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-            assert(ret>=0);'), (15, 1, u'+            assert(ret >= 0);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: ff_asf_parse_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-            assert(ret>=0);'), (15, 1, u'+            assert(ret >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-            assert(ret>=0);'), (15, 1, u'+            assert(ret >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(asf_st);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ff_asf_parse_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(asf_st);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(asf_st);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-                        assert(offset + asf_st->ds_chunk_size <= asf_st->pkt.size);'), (18, 2, u'-                        assert(idx+1 <= asf_st->pkt.size / asf_st->ds_chunk_size);'), (41, 1, u'+                            assert(offset + asf_st->ds_chunk_size <= asf_st->pkt.size);'), (42, 1, u'+                            assert(idx + 1 <= asf_st->pkt.size / asf_st->ds_chunk_size);')]
===========================================
===========================================
Total add: 33
Total del: 29
Header: ff_asf_parse_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-                        assert(offset + asf_st->ds_chunk_size <= asf_st->pkt.size);'), (18, 2, u'-                        assert(idx+1 <= asf_st->pkt.size / asf_st->ds_chunk_size);'), (41, 1, u'+                            assert(offset + asf_st->ds_chunk_size <= asf_st->pkt.size);'), (42, 1, u'+                            assert(idx + 1 <= asf_st->pkt.size / asf_st->ds_chunk_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-                        assert(offset + asf_st->ds_chunk_size <= asf_st->pkt.size);'), (18, 2, u'-                        assert(idx+1 <= asf_st->pkt.size / asf_st->ds_chunk_size);'), (41, 1, u'+                            assert(offset + asf_st->ds_chunk_size <= asf_st->pkt.size);'), (42, 1, u'+                            assert(idx + 1 <= asf_st->pkt.size / asf_st->ds_chunk_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(asf->packet_size_left < FRAME_HEADER_SIZE || asf->packet_segments < 1);'), (3, 1, u'+            assert(asf->packet_size_left < FRAME_HEADER_SIZE ||')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: asf_read_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(asf->packet_size_left < FRAME_HEADER_SIZE || asf->packet_segments < 1);'), (3, 1, u'+            assert(asf->packet_size_left < FRAME_HEADER_SIZE ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(asf->packet_size_left < FRAME_HEADER_SIZE || asf->packet_segments < 1);'), (3, 1, u'+            assert(asf->packet_size_left < FRAME_HEADER_SIZE ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+            av_assert0(asf_st);')]
===========================================
===========================================
Total add: 10
Total del: 8
Header: asf_read_pts
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+            av_assert0(asf_st);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+            av_assert0(asf_st);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(padsize>=0);'), (6, 1, u'+    assert(padsize >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: put_payload_parsing_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(padsize>=0);'), (6, 1, u'+    assert(padsize >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(padsize>=0);'), (6, 1, u'+    assert(padsize >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(stream_index < s->nb_streams);'), (3, 1, u'+            av_assert0(stream_index < s->nb_streams);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: avi_read_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(stream_index < s->nb_streams);'), (3, 1, u'+            av_assert0(stream_index < s->nb_streams);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(stream_index < s->nb_streams);'), (3, 1, u'+            av_assert0(stream_index < s->nb_streams);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            assert(best_ast->remaining <= best_ast->packet_size);'), (5, 1, u'+            av_assert0(best_ast->remaining <= best_ast->packet_size);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: avi_read_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            assert(best_ast->remaining <= best_ast->packet_size);'), (5, 1, u'+            av_assert0(best_ast->remaining <= best_ast->packet_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            assert(best_ast->remaining <= best_ast->packet_size);'), (5, 1, u'+            av_assert0(best_ast->remaining <= best_ast->packet_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(st->index_entries);'), (3, 1, u'+                av_assert0(st->index_entries);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: resync:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(st->index_entries);'), (3, 1, u'+                av_assert0(st->index_entries);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(st->index_entries);'), (3, 1, u'+                av_assert0(st->index_entries);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(stream_index>= 0);'), (3, 1, u'+    av_assert0(stream_index>= 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: avi_read_seek
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(stream_index>= 0);'), (3, 1, u'+    av_assert0(stream_index>= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(stream_index>= 0);'), (3, 1, u'+    av_assert0(stream_index>= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(stream_index == 0);'), (3, 1, u'+        av_assert0(stream_index == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: avi_read_seek
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(stream_index == 0);'), (3, 1, u'+        av_assert0(stream_index == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(stream_index == 0);'), (3, 1, u'+        av_assert0(stream_index == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert((int64_t)st2->time_base.num*ast2->rate == (int64_t)st2->time_base.den*ast2->scale);'), (5, 1, u'+        av_assert0((int64_t)st2->time_base.num*ast2->rate == (int64_t)st2->time_base.den*ast2->scale);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: avi_read_seek
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert((int64_t)st2->time_base.num*ast2->rate == (int64_t)st2->time_base.den*ast2->scale);'), (5, 1, u'+        av_assert0((int64_t)st2->time_base.num*ast2->rate == (int64_t)st2->time_base.den*ast2->scale);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert((int64_t)st2->time_base.num*ast2->rate == (int64_t)st2->time_base.den*ast2->scale);'), (5, 1, u'+        av_assert0((int64_t)st2->time_base.num*ast2->rate == (int64_t)st2->time_base.den*ast2->scale);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(avist->frames_hdr_strm);'), (3, 1, u'+        av_assert0(avist->frames_hdr_strm);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: avi_write_counters
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(avist->frames_hdr_strm);'), (3, 1, u'+        av_assert0(avist->frames_hdr_strm);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(avist->frames_hdr_strm);'), (3, 1, u'+        av_assert0(avist->frames_hdr_strm);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(avi->frames_hdr_all);'), (3, 1, u'+        av_assert0(avi->frames_hdr_all);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: avi_write_counters
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(avi->frames_hdr_all);'), (3, 1, u'+        av_assert0(avi->frames_hdr_all);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(avi->frames_hdr_all);'), (3, 1, u'+        av_assert0(avi->frames_hdr_all);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pb->seekable);'), (3, 1, u'+    av_assert0(pb->seekable);')]
===========================================
===========================================
Total add: 6
Total del: 3
Header: avi_write_ix
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pb->seekable);'), (3, 1, u'+    av_assert0(pb->seekable);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pb->seekable);'), (3, 1, u'+    av_assert0(pb->seekable);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2(b>=-128 && b<=255);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: avio_w8
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2(b>=-128 && b<=255);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2(b>=-128 && b<=255);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(flags == AVIO_FLAG_WRITE || flags == AVIO_FLAG_READ);'), (3, 1, u'+    av_assert1(flags == AVIO_FLAG_WRITE || flags == AVIO_FLAG_READ);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: url_resetbuf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(flags == AVIO_FLAG_WRITE || flags == AVIO_FLAG_READ);'), (3, 1, u'+    av_assert1(flags == AVIO_FLAG_WRITE || flags == AVIO_FLAG_READ);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(flags == AVIO_FLAG_WRITE || flags == AVIO_FLAG_READ);'), (3, 1, u'+    av_assert1(flags == AVIO_FLAG_WRITE || flags == AVIO_FLAG_READ);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    av_assert1(avio_tell(pb) % ffm->packet_size == 0);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: flush_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    av_assert1(avio_tell(pb) % ffm->packet_size == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    av_assert1(avio_tell(pb) % ffm->packet_size == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ffm->packet_end >= ffm->packet);'), (3, 1, u'+    av_assert0(ffm->packet_end >= ffm->packet);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ffm_write_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ffm->packet_end >= ffm->packet);'), (3, 1, u'+    av_assert0(ffm->packet_end >= ffm->packet);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ffm->packet_end >= ffm->packet);'), (3, 1, u'+    av_assert0(ffm->packet_end >= ffm->packet);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        assert(size);'), (9, 1, u'+        av_assert0(size);'), (14, 2, u'-        assert(enc->codec_type == AVMEDIA_TYPE_DATA);')]
===========================================
===========================================
Total add: 22
Total del: 18
Header: flv_write_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        assert(size);'), (9, 1, u'+        av_assert0(size);'), (14, 2, u'-        assert(enc->codec_type == AVMEDIA_TYPE_DATA);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        assert(size);'), (9, 1, u'+        av_assert0(size);'), (14, 2, u'-        assert(enc->codec_type == AVMEDIA_TYPE_DATA);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+        av_assert1(flags>=0);')]
===========================================
===========================================
Total add: 42
Total del: 20
Header: flv_write_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+        av_assert1(flags>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+        av_assert1(flags>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    av_assert0(size < sizeof(buffer));')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: gxf_write_mpeg_auxiliary
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    av_assert0(size < sizeof(buffer));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    av_assert0(size < sizeof(buffer));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(st->codec->extradata_size >= IFF_EXTRA_VIDEO_SIZE);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: iff_read_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(st->codec->extradata_size >= IFF_EXTRA_VIDEO_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(st->codec->extradata_size >= IFF_EXTRA_VIDEO_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: iff_read_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    av_assert1(block_duration != AV_NOPTS_VALUE);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: matroska_parse_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    av_assert1(block_duration != AV_NOPTS_VALUE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    av_assert1(block_duration != AV_NOPTS_VALUE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-            assert(size>0); // size <=3 is checked before size-=3 above')]
===========================================
===========================================
Total add: 101
Total del: 193
Header: matroska_parse_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-            assert(size>0); // size <=3 is checked before size-=3 above')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-            assert(size>0); // size <=3 is checked before size-=3 above')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(bytes <= 8);'), (3, 1, u'+    av_assert0(bytes <= 8);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: put_ebml_size_unknown
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(bytes <= 8);'), (3, 1, u'+    av_assert0(bytes <= 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(bytes <= 8);'), (3, 1, u'+    av_assert0(bytes <= 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(num < (1ULL<<56)-1);'), (3, 1, u'+    av_assert0(num < (1ULL<<56)-1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: put_ebml_num
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(num < (1ULL<<56)-1);'), (3, 1, u'+    av_assert0(num < (1ULL<<56)-1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(num < (1ULL<<56)-1);'), (3, 1, u'+    av_assert0(num < (1ULL<<56)-1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(bytes >= needed_bytes);'), (3, 1, u'+    av_assert0(bytes >= needed_bytes);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: put_ebml_num
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(bytes >= needed_bytes);'), (3, 1, u'+    av_assert0(bytes >= needed_bytes);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(bytes >= needed_bytes);'), (3, 1, u'+    av_assert0(bytes >= needed_bytes);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(size >= 2);'), (3, 1, u'+    av_assert0(size >= 2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: put_ebml_void
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(size >= 2);'), (3, 1, u'+    av_assert0(size >= 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(size >= 2);'), (3, 1, u'+    av_assert0(size >= 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            av_assert0(tracknum>=0 && tracknum<num_tracks);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: mkv_write_cues
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            av_assert0(tracknum>=0 && tracknum<num_tracks);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            av_assert0(tracknum>=0 && tracknum<num_tracks);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert0(av_rescale_rnd(track->cluster[0].dts, MOV_TIMESCALE, track->timescale, AV_ROUND_DOWN) <= 0);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: mov_write_edts_tag
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert0(av_rescale_rnd(track->cluster[0].dts, MOV_TIMESCALE, track->timescale, AV_ROUND_DOWN) <= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert0(av_rescale_rnd(track->cluster[0].dts, MOV_TIMESCALE, track->timescale, AV_ROUND_DOWN) <= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(best_bitrate_idx >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: mp3_write_xing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(best_bitrate_idx >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(best_bitrate_idx >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(flag);'), (3, 1, u'+    av_assert0(flag);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: set_af_flag
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(flag);'), (3, 1, u'+    av_assert0(flag);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(flag);'), (3, 1, u'+    av_assert0(flag);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pkt[3] & 0x20);'), (3, 1, u'+    av_assert0(pkt[3] & 0x20);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: extend_af
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pkt[3] & 0x20);'), (3, 1, u'+    av_assert0(pkt[3] & 0x20);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pkt[3] & 0x20);'), (3, 1, u'+    av_assert0(pkt[3] & 0x20);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!(avio_tell(s->pb) & (KAG_SIZE-1)));'), (3, 1, u'+        av_assert1(!(avio_tell(s->pb) & (KAG_SIZE-1)));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mxf_write_klv_fill
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!(avio_tell(s->pb) & (KAG_SIZE-1)));'), (3, 1, u'+        av_assert1(!(avio_tell(s->pb) & (KAG_SIZE-1)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!(avio_tell(s->pb) & (KAG_SIZE-1)));'), (3, 1, u'+        av_assert1(!(avio_tell(s->pb) & (KAG_SIZE-1)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!(avio_tell(s->pb) & (KAG_SIZE-1)));'), (3, 1, u'+        av_assert1(!(avio_tell(s->pb) & (KAG_SIZE-1)));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mxf_write_d10_video_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!(avio_tell(s->pb) & (KAG_SIZE-1)));'), (3, 1, u'+        av_assert1(!(avio_tell(s->pb) & (KAG_SIZE-1)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!(avio_tell(s->pb) & (KAG_SIZE-1)));'), (3, 1, u'+        av_assert1(!(avio_tell(s->pb) & (KAG_SIZE-1)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u"-    assert(nut->frame_code['N'].flags == FLAG_INVALID);"), (19, 1, u"+    av_assert0(nut->frame_code['N'].flags == FLAG_INVALID);")]
===========================================
===========================================
Total add: 15
Total del: 14
Header: decode_main_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u"-    assert(nut->frame_code['N'].flags == FLAG_INVALID);"), (19, 1, u"+    av_assert0(nut->frame_code['N'].flags == FLAG_INVALID);")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u"-    assert(nut->frame_code['N'].flags == FLAG_INVALID);"), (19, 1, u"+    av_assert0(nut->frame_code['N'].flags == FLAG_INVALID);")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-        assert(nut->header_len[0]==0);'), (11, 1, u'+        av_assert0(nut->header_len[0] == 0);')]
===========================================
===========================================
Total add: 7
Total del: 4
Header: decode_main_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-        assert(nut->header_len[0]==0);'), (11, 1, u'+        av_assert0(nut->header_len[0] == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-        assert(nut->header_len[0]==0);'), (11, 1, u'+        av_assert0(nut->header_len[0] == 0);')]
===========================================
Class:    class                = ffio_read_varlen(bc);
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(n<=syncpoint_count+1);'), (19, 1, u'+            av_assert0(n <= syncpoint_count + 1);')]
===========================================
===========================================
Total add: 12
Total del: 17
Header: find_and_decode_index
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(n<=syncpoint_count+1);'), (19, 1, u'+            av_assert0(n <= syncpoint_count + 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(n<=syncpoint_count+1);'), (19, 1, u'+            av_assert0(n <= syncpoint_count + 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(nut->next_startcode == SYNCPOINT_STARTCODE);'), (3, 1, u'+    av_assert0(nut->next_startcode == SYNCPOINT_STARTCODE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: nut_read_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(nut->next_startcode == SYNCPOINT_STARTCODE);'), (3, 1, u'+    av_assert0(nut->next_startcode == SYNCPOINT_STARTCODE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(nut->next_startcode == SYNCPOINT_STARTCODE);'), (3, 1, u'+    av_assert0(nut->next_startcode == SYNCPOINT_STARTCODE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-            assert(nut->next_startcode == 0);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: nut_read_timestamp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-            assert(nut->next_startcode == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-            assert(nut->next_startcode == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(nut->last_syncpoint_pos == *pos_arg);'), (10, 2, u'-assert(0);'), (13, 1, u'+    av_assert0(nut->last_syncpoint_pos == *pos_arg);'), (18, 1, u'+    av_assert0(stream_index == -1);')]
===========================================
===========================================
Total add: 17
Total del: 15
Header: av_log
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(nut->last_syncpoint_pos == *pos_arg);'), (10, 2, u'-assert(0);'), (13, 1, u'+    av_assert0(nut->last_syncpoint_pos == *pos_arg);'), (18, 1, u'+    av_assert0(stream_index == -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(nut->last_syncpoint_pos == *pos_arg);'), (10, 2, u'-assert(0);'), (13, 1, u'+    av_assert0(nut->last_syncpoint_pos == *pos_arg);'), (18, 1, u'+    av_assert0(stream_index == -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(61, 2, u'-        assert(sp);'), (63, 1, u'+        av_assert0(sp);')]
===========================================
===========================================
Total add: 35
Total del: 29
Header: read_seek
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(61, 2, u'-        assert(sp);'), (63, 1, u'+        av_assert0(sp);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(61, 2, u'-        assert(sp);'), (63, 1, u'+        av_assert0(sp);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+                av_assert0(nus->keyframe_pts[k] > last_pts);')]
===========================================
===========================================
Total add: 47
Total del: 1
Header: write_chapter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+                av_assert0(nus->keyframe_pts[k] > last_pts);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+                av_assert0(nus->keyframe_pts[k] > last_pts);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-    assert(nut->frame_code['N'].flags == FLAG_INVALID);"), (3, 1, u"+    av_assert0(nut->frame_code['N'].flags == FLAG_INVALID);")]
===========================================
===========================================
Total add: 1
Total del: 1
Header: nut_write_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-    assert(nut->frame_code['N'].flags == FLAG_INVALID);"), (3, 1, u"+    av_assert0(nut->frame_code['N'].flags == FLAG_INVALID);")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-    assert(nut->frame_code['N'].flags == FLAG_INVALID);"), (3, 1, u"+    av_assert0(nut->frame_code['N'].flags == FLAG_INVALID);")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 2, u'-    assert(nus->last_pts != AV_NOPTS_VALUE);'), (45, 1, u'+    av_assert0(nus->last_pts != AV_NOPTS_VALUE);')]
===========================================
===========================================
Total add: 38
Total del: 25
Header: nut_write_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 2, u'-    assert(nus->last_pts != AV_NOPTS_VALUE);'), (45, 1, u'+    av_assert0(nus->last_pts != AV_NOPTS_VALUE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 2, u'-    assert(nus->last_pts != AV_NOPTS_VALUE);'), (45, 1, u'+    av_assert0(nus->last_pts != AV_NOPTS_VALUE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    assert(frame_code != -1);'), (22, 1, u'+    av_assert0(frame_code != -1);')]
===========================================
===========================================
Total add: 11
Total del: 11
Header: nut_write_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    assert(frame_code != -1);'), (22, 1, u'+    av_assert0(frame_code != -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    assert(frame_code != -1);'), (22, 1, u'+    av_assert0(frame_code != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(stream_index < ogg->nstreams);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: ogg_read_seek
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(stream_index < ogg->nstreams);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(stream_index < ogg->nstreams);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+                av_assert0(FF_INPUT_BUFFER_PADDING_SIZE <= 52);')]
===========================================
===========================================
Total add: 12
Total del: 1
Header: ogm_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+                av_assert0(FF_INPUT_BUFFER_PADDING_SIZE <= 52);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+                av_assert0(FF_INPUT_BUFFER_PADDING_SIZE <= 52);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 2, u'-    assert(bps); // if false there IS a bug elsewhere (NOT in this function)'), (42, 1, u'+    av_assert0(st->codec->bits_per_coded_sample > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0((start&1) == 0);')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: ff_end_tag
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0((start&1) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0((start&1) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(sizeof(*g) == 16);'), (3, 1, u'+    av_assert0(sizeof(*g) == 16); //compiler will optimize this out')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_get_guid
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(sizeof(*g) == 16);'), (3, 1, u'+    av_assert0(sizeof(*g) == 16); //compiler will optimize this out')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(sizeof(*g) == 16);'), (3, 1, u'+    av_assert0(sizeof(*g) == 16); //compiler will optimize this out')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert (rm->audio_pkt_cnt > 0);'), (3, 1, u'+    av_assert0 (rm->audio_pkt_cnt > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_rm_retrieve_cache
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert (rm->audio_pkt_cnt > 0);'), (3, 1, u'+    av_assert0 (rm->audio_pkt_cnt > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert (rm->audio_pkt_cnt > 0);'), (3, 1, u'+    av_assert0 (rm->audio_pkt_cnt > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(codec->codec_id == CODEC_ID_H264);'), (3, 1, u'+    assert(codec->codec_id == AV_CODEC_ID_H264);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sdp_parse_fmtp_config_h264
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(codec->codec_id == CODEC_ID_H264);'), (3, 1, u'+    assert(codec->codec_id == AV_CODEC_ID_H264);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(codec->codec_id == CODEC_ID_H264);'), (3, 1, u'+    assert(codec->codec_id == AV_CODEC_ID_H264);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-    assert(data->cookie == MAGIC_COOKIE);')]
===========================================
===========================================
Total add: 18
Total del: 16
Header: sdp_parse_fmtp_config_h264
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-    assert(data->cookie == MAGIC_COOKIE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-    assert(data->cookie == MAGIC_COOKIE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-                    assert(dst-pkt->data==total_length);'), (15, 1, u'+                    assert(dst - pkt->data == total_length);')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: h264_handle_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-                    assert(dst-pkt->data==total_length);'), (15, 1, u'+                    assert(dst - pkt->data == total_length);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-                    assert(dst-pkt->data==total_length);'), (15, 1, u'+                    assert(dst - pkt->data == total_length);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(data);'), (3, 2, u'-    assert(data->cookie == MAGIC_COOKIE);')]
===========================================
===========================================
Total add: 0
Total del: 7
Header: h264_free_context
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(data);'), (3, 2, u'-    assert(data->cookie == MAGIC_COOKIE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(data);'), (3, 2, u'-    assert(data->cookie == MAGIC_COOKIE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(h264_data->cookie == MAGIC_COOKIE);')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: parse_h264_sdp_line
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(h264_data->cookie == MAGIC_COOKIE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(h264_data->cookie == MAGIC_COOKIE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(n < 0x80);'), (3, 1, u'+    av_assert0(n < 0x80);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: qdm2_restore_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(n < 0x80);'), (3, 1, u'+    av_assert0(n < 0x80);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(n < 0x80);'), (3, 1, u'+    av_assert0(n < 0x80);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(fragmented < 4);'), (3, 1, u'+        av_assert1(fragmented < 4);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: xiph_handle_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(fragmented < 4);'), (3, 1, u'+        av_assert1(fragmented < 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(fragmented < 4);'), (3, 1, u'+        av_assert1(fragmented < 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->num_frames <= s->max_frames_per_packet);'), (3, 1, u'+        av_assert1(s->num_frames <= s->max_frames_per_packet);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_rtp_send_xiph
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->num_frames <= s->max_frames_per_packet);'), (3, 1, u'+        av_assert1(s->num_frames <= s->max_frames_per_packet);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(s->num_frames <= s->max_frames_per_packet);'), (3, 1, u'+        av_assert1(s->num_frames <= s->max_frames_per_packet);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 1, u'+        av_assert0(!"Invalid list type");')]
===========================================
===========================================
Total add: 116
Total del: 23
Header: segment_start
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 1, u'+        av_assert0(!"Invalid list type");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 1, u'+        av_assert0(!"Invalid list type");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(117, 1, u'+                av_assert0(0);')]
===========================================
===========================================
Total add: 141
Total del: 10
Header: swf_read_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(117, 1, u'+                av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(117, 1, u'+                av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(tag_len < 0x3f);'), (3, 1, u'+        av_assert0(tag_len < 0x3f);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: put_swf_end_tag
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(tag_len < 0x3f);'), (3, 1, u'+        av_assert0(tag_len < 0x3f);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(tag_len < 0x3f);'), (3, 1, u'+        av_assert0(tag_len < 0x3f);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+                av_assert0(st->request_probe <= 0);')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: av_read_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+                av_assert0(st->request_probe <= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+                av_assert0(st->request_probe <= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(xmv->video.stream_index < s->nb_streams);'), (3, 1, u'+                av_assert0(xmv->video.stream_index < s->nb_streams);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: xmv_process_packet_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(xmv->video.stream_index < s->nb_streams);'), (3, 1, u'+                av_assert0(xmv->video.stream_index < s->nb_streams);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(xmv->video.stream_index < s->nb_streams);'), (3, 1, u'+                av_assert0(xmv->video.stream_index < s->nb_streams);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(abs(src_linesize) >= bytewidth);'), (3, 1, u'+    av_assert0(abs(dst_linesize) >= bytewidth);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: av_image_copy_plane
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(abs(src_linesize) >= bytewidth);'), (3, 1, u'+    av_assert0(abs(dst_linesize) >= bytewidth);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(abs(src_linesize) >= bytewidth);'), (3, 1, u'+    av_assert0(abs(dst_linesize) >= bytewidth);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((int16_t)a[AV_INTEGER_SIZE-1] >= 0 && (int16_t)b[AV_INTEGER_SIZE-1] >= 0);'), (3, 2, u'-    assert(av_log2(b)>=0);'), (4, 1, u'+    av_assert2((int16_t)a.v[AV_INTEGER_SIZE-1] >= 0 && (int16_t)b.v[AV_INTEGER_SIZE-1] >= 0);'), (5, 1, u'+    av_assert2(av_log2_i(b)>=0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: av_mod_i
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((int16_t)a[AV_INTEGER_SIZE-1] >= 0 && (int16_t)b[AV_INTEGER_SIZE-1] >= 0);'), (3, 2, u'-    assert(av_log2(b)>=0);'), (4, 1, u'+    av_assert2((int16_t)a.v[AV_INTEGER_SIZE-1] >= 0 && (int16_t)b.v[AV_INTEGER_SIZE-1] >= 0);'), (5, 1, u'+    av_assert2(av_log2_i(b)>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((int16_t)a[AV_INTEGER_SIZE-1] >= 0 && (int16_t)b[AV_INTEGER_SIZE-1] >= 0);'), (3, 2, u'-    assert(av_log2(b)>=0);'), (4, 1, u'+    av_assert2((int16_t)a.v[AV_INTEGER_SIZE-1] >= 0 && (int16_t)b.v[AV_INTEGER_SIZE-1] >= 0);'), (5, 1, u'+    av_assert2(av_log2_i(b)>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(av_i2int(ai) == a);'), (3, 2, u'-            assert(av_i2int(bi) == b);'), (4, 2, u'-            assert(av_i2int(av_add_i(ai,bi)) == a+b);'), (5, 2, u'-            assert(av_i2int(av_sub_i(ai,bi)) == a-b);'), (6, 2, u'-            assert(av_i2int(av_mul_i(ai,bi)) == a*b);'), (7, 2, u'-            assert(av_i2int(av_shr_i(ai, 9)) == a>>9);'), (8, 2, u'-            assert(av_i2int(av_shr_i(ai,-9)) == a<<9);'), (9, 2, u'-            assert(av_i2int(av_shr_i(ai, 17)) == a>>17);'), (10, 2, u'-            assert(av_i2int(av_shr_i(ai,-17)) == a<<17);'), (11, 2, u'-            assert(av_log2_i(ai) == av_log2(a));'), (12, 2, u'-            assert(av_i2int(av_div_i(ai,bi)) == a/b);'), (13, 1, u'+            av_assert0(av_i2int(ai) == a);'), (14, 1, u'+            av_assert0(av_i2int(bi) == b);'), (15, 1, u'+            av_assert0(av_i2int(av_add_i(ai,bi)) == a+b);'), (16, 1, u'+            av_assert0(av_i2int(av_sub_i(ai,bi)) == a-b);'), (17, 1, u'+            av_assert0(av_i2int(av_mul_i(ai,bi)) == a*b);'), (18, 1, u'+            av_assert0(av_i2int(av_shr_i(ai, 9)) == a>>9);'), (19, 1, u'+            av_assert0(av_i2int(av_shr_i(ai,-9)) == a<<9);'), (20, 1, u'+            av_assert0(av_i2int(av_shr_i(ai, 17)) == a>>17);'), (21, 1, u'+            av_assert0(av_i2int(av_shr_i(ai,-17)) == a<<17);'), (22, 1, u'+            av_assert0(av_log2_i(ai) == av_log2(a));'), (23, 1, u'+            av_assert0(av_i2int(av_div_i(ai,bi)) == a/b);')]
===========================================
===========================================
Total add: 11
Total del: 11
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(av_i2int(ai) == a);'), (3, 2, u'-            assert(av_i2int(bi) == b);'), (4, 2, u'-            assert(av_i2int(av_add_i(ai,bi)) == a+b);'), (5, 2, u'-            assert(av_i2int(av_sub_i(ai,bi)) == a-b);'), (6, 2, u'-            assert(av_i2int(av_mul_i(ai,bi)) == a*b);'), (7, 2, u'-            assert(av_i2int(av_shr_i(ai, 9)) == a>>9);'), (8, 2, u'-            assert(av_i2int(av_shr_i(ai,-9)) == a<<9);'), (9, 2, u'-            assert(av_i2int(av_shr_i(ai, 17)) == a>>17);'), (10, 2, u'-            assert(av_i2int(av_shr_i(ai,-17)) == a<<17);'), (11, 2, u'-            assert(av_log2_i(ai) == av_log2(a));'), (12, 2, u'-            assert(av_i2int(av_div_i(ai,bi)) == a/b);'), (13, 1, u'+            av_assert0(av_i2int(ai) == a);'), (14, 1, u'+            av_assert0(av_i2int(bi) == b);'), (15, 1, u'+            av_assert0(av_i2int(av_add_i(ai,bi)) == a+b);'), (16, 1, u'+            av_assert0(av_i2int(av_sub_i(ai,bi)) == a-b);'), (17, 1, u'+            av_assert0(av_i2int(av_mul_i(ai,bi)) == a*b);'), (18, 1, u'+            av_assert0(av_i2int(av_shr_i(ai, 9)) == a>>9);'), (19, 1, u'+            av_assert0(av_i2int(av_shr_i(ai,-9)) == a<<9);'), (20, 1, u'+            av_assert0(av_i2int(av_shr_i(ai, 17)) == a>>17);'), (21, 1, u'+            av_assert0(av_i2int(av_shr_i(ai,-17)) == a<<17);'), (22, 1, u'+            av_assert0(av_log2_i(ai) == av_log2(a));'), (23, 1, u'+            av_assert0(av_i2int(av_div_i(ai,bi)) == a/b);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(av_i2int(ai) == a);'), (3, 2, u'-            assert(av_i2int(bi) == b);'), (4, 2, u'-            assert(av_i2int(av_add_i(ai,bi)) == a+b);'), (5, 2, u'-            assert(av_i2int(av_sub_i(ai,bi)) == a-b);'), (6, 2, u'-            assert(av_i2int(av_mul_i(ai,bi)) == a*b);'), (7, 2, u'-            assert(av_i2int(av_shr_i(ai, 9)) == a>>9);'), (8, 2, u'-            assert(av_i2int(av_shr_i(ai,-9)) == a<<9);'), (9, 2, u'-            assert(av_i2int(av_shr_i(ai, 17)) == a>>17);'), (10, 2, u'-            assert(av_i2int(av_shr_i(ai,-17)) == a<<17);'), (11, 2, u'-            assert(av_log2_i(ai) == av_log2(a));'), (12, 2, u'-            assert(av_i2int(av_div_i(ai,bi)) == a/b);'), (13, 1, u'+            av_assert0(av_i2int(ai) == a);'), (14, 1, u'+            av_assert0(av_i2int(bi) == b);'), (15, 1, u'+            av_assert0(av_i2int(av_add_i(ai,bi)) == a+b);'), (16, 1, u'+            av_assert0(av_i2int(av_sub_i(ai,bi)) == a-b);'), (17, 1, u'+            av_assert0(av_i2int(av_mul_i(ai,bi)) == a*b);'), (18, 1, u'+            av_assert0(av_i2int(av_shr_i(ai, 9)) == a>>9);'), (19, 1, u'+            av_assert0(av_i2int(av_shr_i(ai,-9)) == a<<9);'), (20, 1, u'+            av_assert0(av_i2int(av_shr_i(ai, 17)) == a>>17);'), (21, 1, u'+            av_assert0(av_i2int(av_shr_i(ai,-17)) == a<<17);'), (22, 1, u'+            av_assert0(av_log2_i(ai) == av_log2(a));'), (23, 1, u'+            av_assert0(av_i2int(av_div_i(ai,bi)) == a/b);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(c > 0);'), (3, 2, u'-    assert(b >=0);'), (4, 2, u'-    assert((unsigned)rnd<=5 && rnd!=4);'), (5, 1, u'+    av_assert2(c > 0);'), (6, 1, u'+    av_assert2(b >=0);'), (7, 1, u'+    av_assert2((unsigned)(rnd&~AV_ROUND_PASS_MINMAX)<=5 && (rnd&~AV_ROUND_PASS_MINMAX)!=4);')]
===========================================
===========================================
Total add: 9
Total del: 3
Header: av_rescale_rnd
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(c > 0);'), (3, 2, u'-    assert(b >=0);'), (4, 2, u'-    assert((unsigned)rnd<=5 && rnd!=4);'), (5, 1, u'+    av_assert2(c > 0);'), (6, 1, u'+    av_assert2(b >=0);'), (7, 1, u'+    av_assert2((unsigned)(rnd&~AV_ROUND_PASS_MINMAX)<=5 && (rnd&~AV_ROUND_PASS_MINMAX)!=4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(c > 0);'), (3, 2, u'-    assert(b >=0);'), (4, 2, u'-    assert((unsigned)rnd<=5 && rnd!=4);'), (5, 1, u'+    av_assert2(c > 0);'), (6, 1, u'+    av_assert2(b >=0);'), (7, 1, u'+    av_assert2((unsigned)(rnd&~AV_ROUND_PASS_MINMAX)<=5 && (rnd&~AV_ROUND_PASS_MINMAX)!=4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    av_assert0(in_ts != AV_NOPTS_VALUE);'), (7, 1, u'+    av_assert0(duration >= 0);')]
===========================================
===========================================
Total add: 23
Total del: 0
Header: av_compare_mod
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    av_assert0(in_ts != AV_NOPTS_VALUE);'), (7, 1, u'+    av_assert0(duration >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    av_assert0(in_ts != AV_NOPTS_VALUE);'), (7, 1, u'+    av_assert0(duration >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    av_assert0(diff>0 && diff<=ALIGN);')]
===========================================
===========================================
Total add: 9
Total del: 4
Header: *av_realloc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    av_assert0(diff>0 && diff<=ALIGN);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    av_assert0(diff>0 && diff<=ALIGN);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        av_assert0(v>0 && v<=ALIGN);')]
===========================================
===========================================
Total add: 7
Total del: 2
Header: av_free
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        av_assert0(v>0 && v<=ALIGN);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        av_assert0(v>0 && v<=ALIGN);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    av_assert0(sizeof(tmp) >= av_sha_size);')]
===========================================
===========================================
Total add: 26
Total del: 13
Header: get_generic_seed
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    av_assert0(sizeof(tmp) >= av_sha_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    av_assert0(sizeof(tmp) >= av_sha_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    av_assert0(PIX_FMT_VDA_VLD == 81); //check if the pix fmt enum has not had anything inserted or removed by mistake'), (3, 1, u'+    av_assert0(AV_PIX_FMT_VDA_VLD == 81); //check if the pix fmt enum has not had anything inserted or removed by mistake')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: avutil_version
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    av_assert0(PIX_FMT_VDA_VLD == 81); //check if the pix fmt enum has not had anything inserted or removed by mistake'), (3, 1, u'+    av_assert0(AV_PIX_FMT_VDA_VLD == 81); //check if the pix fmt enum has not had anything inserted or removed by mistake')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    av_assert0(PIX_FMT_VDA_VLD == 81); //check if the pix fmt enum has not had anything inserted or removed by mistake'), (3, 1, u'+    av_assert0(AV_PIX_FMT_VDA_VLD == 81); //check if the pix fmt enum has not had anything inserted or removed by mistake')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(HAVE_MMX2 == HAVE_MMXEXT);')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: avutil_version
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(HAVE_MMX2 == HAVE_MMXEXT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(HAVE_MMX2 == HAVE_MMXEXT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+        av_assert1(off>=0);'), (22, 1, u'+        av_assert1(off<=len);'), (23, 1, u'+        av_assert2(ctx->channels == SWR_CH_MAX || !in->ch[ctx->channels]);')]
===========================================
===========================================
Total add: 34
Total del: 0
Header: swri_audio_convert
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+        av_assert1(off>=0);'), (22, 1, u'+        av_assert1(off<=len);'), (23, 1, u'+        av_assert2(ctx->channels == SWR_CH_MAX || !in->ch[ctx->channels]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+        av_assert1(off>=0);'), (22, 1, u'+        av_assert1(off<=len);'), (23, 1, u'+        av_assert2(ctx->channels == SWR_CH_MAX || !in->ch[ctx->channels]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 1, u'+    av_assert2((taps&3) != 2);'), (34, 1, u'+    av_assert2((taps&3) != 3 || s->dither.ns_coeffs[taps] == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+            av_assert0(0);')]
===========================================
===========================================
Total add: 10
Total del: 1
Header: swri_rematrix_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+            av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+            av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Total add: 78
Total del: 0
Header: swri_rematrix_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+        av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+        av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert2(i<99);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: bessel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert2(i<99);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert2(i<99);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+                av_assert0(0);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: build_filter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+                av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+                av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+            av_assert0(0);')]
===========================================
===========================================
Total add: 20
Total del: 0
Header: *swri_resample_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+            av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+            av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(84, 2, u'-        assert(compensation_distance > 0);'), (161, 1, u'+    av_assert0(a->planar);')]
===========================================
===========================================
Total add: 80
Total del: 85
Header: swr_set_compensation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(84, 2, u'-        assert(compensation_distance > 0);'), (161, 1, u'+    av_assert0(a->planar);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(84, 2, u'-        assert(compensation_distance > 0);'), (161, 1, u'+    av_assert0(a->planar);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 1, u'+    av_assert1(c->filter_shift == FILTER_SHIFT);'), (93, 1, u'+    av_assert1(c->felem_size == sizeof(FELEM));'), (107, 1, u'+        av_assert2(index >= 0);'), (188, 1, u'+            av_assert1(compensation_distance > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    av_assert0(a->planar);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: realloc_audio
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    av_assert0(a->planar);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    av_assert0(a->planar);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert1(s->in_buffer.ch_count == in_param->ch_count);'), (3, 1, u'+    av_assert1(s->in_buffer.planar   == in_param->planar);'), (4, 1, u'+    av_assert1(s->in_buffer.fmt      == in_param->fmt);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: resample
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert1(s->in_buffer.ch_count == in_param->ch_count);'), (3, 1, u'+    av_assert1(s->in_buffer.planar   == in_param->planar);'), (4, 1, u'+    av_assert1(s->in_buffer.fmt      == in_param->fmt);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert1(s->in_buffer.ch_count == in_param->ch_count);'), (3, 1, u'+    av_assert1(s->in_buffer.planar   == in_param->planar);'), (4, 1, u'+    av_assert1(s->in_buffer.fmt      == in_param->fmt);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-            av_assert0(a->planar);')]
===========================================
===========================================
Total add: 2
Total del: 32
Header: resample
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-            av_assert0(a->planar);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-            av_assert0(a->planar);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+            av_assert0(s->dither.noise.ch_count == preout->ch_count);')]
===========================================
===========================================
Total add: 48
Total del: 4
Header: swr_convert
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+            av_assert0(s->dither.noise.ch_count == preout->ch_count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+            av_assert0(s->dither.noise.ch_count == preout->ch_count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-#define ASSERT_LEVEL 2'), (47, 2, u'-    default: av_assert0(0);'), (66, 2, u'-    default: av_assert2(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-        assert(firstLumSrcY >= lastInLumBuf - vLumBufSize + 1);'), (24, 2, u'-        assert(firstChrSrcY >= lastInChrBuf - vChrBufSize + 1);'), (30, 1, u'+        av_assert0(firstLumSrcY >= lastInLumBuf - vLumBufSize + 1);'), (31, 1, u'+        av_assert0(firstChrSrcY >= lastInChrBuf - vChrBufSize + 1);')]
===========================================
===========================================
Total add: 17
Total del: 11
Header: swScale
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-        assert(firstLumSrcY >= lastInLumBuf - vLumBufSize + 1);'), (24, 2, u'-        assert(firstChrSrcY >= lastInChrBuf - vChrBufSize + 1);'), (30, 1, u'+        av_assert0(firstLumSrcY >= lastInLumBuf - vLumBufSize + 1);'), (31, 1, u'+        av_assert0(firstChrSrcY >= lastInChrBuf - vChrBufSize + 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-        assert(firstLumSrcY >= lastInLumBuf - vLumBufSize + 1);'), (24, 2, u'-        assert(firstChrSrcY >= lastInChrBuf - vChrBufSize + 1);'), (30, 1, u'+        av_assert0(firstLumSrcY >= lastInLumBuf - vLumBufSize + 1);'), (31, 1, u'+        av_assert0(firstChrSrcY >= lastInChrBuf - vChrBufSize + 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(lumBufIndex < 2*vLumBufSize);'), (3, 2, u'-            assert(lastInLumBuf + 1 - srcSliceY < srcSliceH);'), (4, 2, u'-            assert(lastInLumBuf + 1 - srcSliceY >= 0);'), (6, 1, u'+            av_assert0(lumBufIndex < 2 * vLumBufSize);'), (7, 1, u'+            av_assert0(lastInLumBuf + 1 - srcSliceY < srcSliceH);'), (8, 1, u'+            av_assert0(lastInLumBuf + 1 - srcSliceY >= 0);')]
===========================================
===========================================
Total add: 9
Total del: 11
Header: swScale
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(lumBufIndex < 2*vLumBufSize);'), (3, 2, u'-            assert(lastInLumBuf + 1 - srcSliceY < srcSliceH);'), (4, 2, u'-            assert(lastInLumBuf + 1 - srcSliceY >= 0);'), (6, 1, u'+            av_assert0(lumBufIndex < 2 * vLumBufSize);'), (7, 1, u'+            av_assert0(lastInLumBuf + 1 - srcSliceY < srcSliceH);'), (8, 1, u'+            av_assert0(lastInLumBuf + 1 - srcSliceY >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(lumBufIndex < 2*vLumBufSize);'), (3, 2, u'-            assert(lastInLumBuf + 1 - srcSliceY < srcSliceH);'), (4, 2, u'-            assert(lastInLumBuf + 1 - srcSliceY >= 0);'), (6, 1, u'+            av_assert0(lumBufIndex < 2 * vLumBufSize);'), (7, 1, u'+            av_assert0(lastInLumBuf + 1 - srcSliceY < srcSliceH);'), (8, 1, u'+            av_assert0(lastInLumBuf + 1 - srcSliceY >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(chrBufIndex < 2*vChrBufSize);'), (3, 2, u'-            assert(lastInChrBuf + 1 - chrSrcSliceY < (chrSrcSliceH));'), (4, 2, u'-            assert(lastInChrBuf + 1 - chrSrcSliceY >= 0);'), (6, 1, u'+            av_assert0(chrBufIndex < 2 * vChrBufSize);'), (7, 1, u'+            av_assert0(lastInChrBuf + 1 - chrSrcSliceY < (chrSrcSliceH));'), (8, 1, u'+            av_assert0(lastInChrBuf + 1 - chrSrcSliceY >= 0);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: swScale
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(chrBufIndex < 2*vChrBufSize);'), (3, 2, u'-            assert(lastInChrBuf + 1 - chrSrcSliceY < (chrSrcSliceH));'), (4, 2, u'-            assert(lastInChrBuf + 1 - chrSrcSliceY >= 0);'), (6, 1, u'+            av_assert0(chrBufIndex < 2 * vChrBufSize);'), (7, 1, u'+            av_assert0(lastInChrBuf + 1 - chrSrcSliceY < (chrSrcSliceH));'), (8, 1, u'+            av_assert0(lastInChrBuf + 1 - chrSrcSliceY >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(chrBufIndex < 2*vChrBufSize);'), (3, 2, u'-            assert(lastInChrBuf + 1 - chrSrcSliceY < (chrSrcSliceH));'), (4, 2, u'-            assert(lastInChrBuf + 1 - chrSrcSliceY >= 0);'), (6, 1, u'+            av_assert0(chrBufIndex < 2 * vChrBufSize);'), (7, 1, u'+            av_assert0(lastInChrBuf + 1 - chrSrcSliceY < (chrSrcSliceH));'), (8, 1, u'+            av_assert0(lastInChrBuf + 1 - chrSrcSliceY >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                av_assert0(use_mmx_vfilter != (')]
===========================================
===========================================
Total add: 10
Total del: 10
Header: swScale
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                av_assert0(use_mmx_vfilter != (')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                av_assert0(use_mmx_vfilter != (')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-                assert(lumSrcPtr  + vLumFilterSize - 1 < lumPixBuf  + vLumBufSize*2);'), (22, 2, u'-                assert(chrUSrcPtr + vChrFilterSize - 1 < chrUPixBuf + vChrBufSize*2);'), (26, 1, u'+                av_assert1(lumSrcPtr  + vLumFilterSize - 1 < (const int16_t **)lumPixBuf  + vLumBufSize * 2);'), (27, 1, u'+                av_assert1(chrUSrcPtr + vChrFilterSize - 1 < (const int16_t **)chrUPixBuf + vChrBufSize * 2);')]
===========================================
===========================================
Total add: 13
Total del: 10
Header: swScale
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-                assert(lumSrcPtr  + vLumFilterSize - 1 < lumPixBuf  + vLumBufSize*2);'), (22, 2, u'-                assert(chrUSrcPtr + vChrFilterSize - 1 < chrUPixBuf + vChrBufSize*2);'), (26, 1, u'+                av_assert1(lumSrcPtr  + vLumFilterSize - 1 < (const int16_t **)lumPixBuf  + vLumBufSize * 2);'), (27, 1, u'+                av_assert1(chrUSrcPtr + vChrFilterSize - 1 < (const int16_t **)chrUPixBuf + vChrBufSize * 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-                assert(lumSrcPtr  + vLumFilterSize - 1 < lumPixBuf  + vLumBufSize*2);'), (22, 2, u'-                assert(chrUSrcPtr + vChrFilterSize - 1 < chrUPixBuf + vChrBufSize*2);'), (26, 1, u'+                av_assert1(lumSrcPtr  + vLumFilterSize - 1 < (const int16_t **)lumPixBuf  + vLumBufSize * 2);'), (27, 1, u'+                av_assert1(chrUSrcPtr + vChrFilterSize - 1 < (const int16_t **)chrUPixBuf + vChrBufSize * 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                av_assert1(!yuv2packed1 && !yuv2packed2);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: swScale
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                av_assert1(!yuv2packed1 && !yuv2packed2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                av_assert1(!yuv2packed1 && !yuv2packed2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(length != 0);'), (3, 1, u'+        av_assert1(length != 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: packedCopyWrapper
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(length != 0);'), (3, 1, u'+        av_assert1(length != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(length != 0);'), (3, 1, u'+        av_assert1(length != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 2, u'-            assert(0);'), (29, 1, u'+            av_assert0(0);')]
===========================================
===========================================
Total add: 31
Total del: 20
Header: initFilter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 2, u'-            assert(0);'), (29, 1, u'+            av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 2, u'-            assert(0);'), (29, 1, u'+            av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(95, 2, u'-                    assert(0);'), (96, 1, u'+                    av_assert0(0);')]
===========================================
===========================================
Total add: 49
Total del: 35
Header: initFilter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(95, 2, u'-                    assert(0);'), (96, 1, u'+                    av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(95, 2, u'-                    assert(0);'), (96, 1, u'+                    av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(filterSize>0);'), (8, 2, u'-    assert(filter2Size>0);'), (14, 1, u'+    av_assert0(filterSize > 0);'), (20, 1, u'+    av_assert0(filter2Size > 0);')]
===========================================
===========================================
Total add: 21
Total del: 18
Header: initFilter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(filterSize>0);'), (8, 2, u'-    assert(filter2Size>0);'), (14, 1, u'+    av_assert0(filterSize > 0);'), (20, 1, u'+    av_assert0(filter2Size > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(filterSize>0);'), (8, 2, u'-    assert(filter2Size>0);'), (14, 1, u'+    av_assert0(filterSize > 0);'), (20, 1, u'+    av_assert0(filter2Size > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    assert(minFilterSize > 0);'), (12, 2, u'-    assert(filterSize > 0);'), (15, 1, u'+    av_assert0(minFilterSize > 0);'), (17, 1, u'+    av_assert0(filterSize > 0);')]
===========================================
===========================================
Total add: 23
Total del: 16
Header: initFilter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    assert(minFilterSize > 0);'), (12, 2, u'-    assert(filterSize > 0);'), (15, 1, u'+    av_assert0(minFilterSize > 0);'), (17, 1, u'+    av_assert0(filterSize > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    assert(minFilterSize > 0);'), (12, 2, u'-    assert(filterSize > 0);'), (15, 1, u'+    av_assert0(minFilterSize > 0);'), (17, 1, u'+    av_assert0(filterSize > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-            av_assert0(c->dstBpc > 10);'), (30, 1, u'+            av_assert0(c->dstBpc > 14);')]
===========================================
===========================================
Total add: 14
Total del: 11
Header: sws_init_context
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-            av_assert0(c->dstBpc > 10);'), (30, 1, u'+            av_assert0(c->dstBpc > 14);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-            av_assert0(c->dstBpc > 10);'), (30, 1, u'+            av_assert0(c->dstBpc > 14);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(c->chrDstH <= dstH);'), (17, 1, u'+    av_assert0(c->chrDstH <= dstH);')]
===========================================
===========================================
Total add: 27
Total del: 15
Header: sws_init_context
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(c->chrDstH <= dstH);'), (17, 1, u'+    av_assert0(c->chrDstH <= dstH);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(c->chrDstH <= dstH);'), (17, 1, u'+    av_assert0(c->chrDstH <= dstH);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-        assert(0);')]
===========================================
===========================================
Total add: 37
Total del: 25
Header: ff_yuv2rgb_get_func_ptr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-        assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-        assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+    assert(guess != NULL);')]
===========================================
===========================================
Total add: 35
Total del: 33
Header: CEGLWrapper::~CEGLWrapper
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+    assert(guess != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+    assert(guess != NULL);')]
===========================================
Class: class IOMXContext { class IOMXContext 
Class: class OMXCodecObserver : public BnOMXObserver { class OMXCodecObserver : public BnOMXObserver 
Class: class OMXNode { class OMXNode 
Class: class OMXBuffer { class OMXBuffer 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CDVDPlayerAudio::DecodeFrame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);')]
===========================================
Class: class IOMXContext { class IOMXContext 
Class: class OMXCodecObserver : public BnOMXObserver { class OMXCodecObserver : public BnOMXObserver 
Class: class OMXNode { class OMXNode 
Class: class OMXBuffer { class OMXBuffer 
Class: class DllLibCECInterface { 
Class: class PERIPHERALS::DllLibCEC : public DllDynamic, DllLibCECInterface { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          assert(0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: process_command
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          assert(0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: process_command
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          assert(0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: process_command
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  assert(tt <= vm->vmgi->tt_srpt->nr_of_srpts);')]
===========================================
===========================================
Total add: 36
Total del: 0
Header: set_VTS_PTT
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  assert(tt <= vm->vmgi->tt_srpt->nr_of_srpts);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  assert(tt <= vm->vmgi->tt_srpt->nr_of_srpts);')]
===========================================
Class:class CResourceFinder { class CResourceFinder 
Class:class CUPnPPlayerController class CUPnPPlayerController
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist));'), (19, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt", true));'), (23, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (64, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink", true));'), (73, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (79, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir", true));'), (83, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (89, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/", true));'), (94, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strpathinrar, itemlist));'), (99, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt",'), (104, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (145, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir",'), (154, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir", true));'), (158, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink",'), (163, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (169, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/",'), (175, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strpathinrar, itemlist));'), (180, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar,'), (185, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));')]
===========================================
===========================================
Total add: 222
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist));'), (19, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt", true));'), (23, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (64, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink", true));'), (73, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (79, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir", true));'), (83, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (89, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/", true));'), (94, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strpathinrar, itemlist));'), (99, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt",'), (104, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (145, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir",'), (154, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir", true));'), (158, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink",'), (163, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (169, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/",'), (175, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strpathinrar, itemlist));'), (180, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar,'), (185, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist));'), (19, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt", true));'), (23, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (64, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink", true));'), (73, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (79, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir", true));'), (83, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (89, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/", true));'), (94, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strpathinrar, itemlist));'), (99, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt",'), (104, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (145, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir",'), (154, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir", true));'), (158, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink",'), (163, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (169, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/",'), (175, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strpathinrar, itemlist));'), (180, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar,'), (185, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist));'), (23, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt", true));'), (27, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (68, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink", true));'), (77, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (83, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir", true));'), (87, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (93, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/", true));'), (98, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strpathinrar, itemlist));'), (103, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt",'), (108, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (149, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir",'), (158, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir", true));'), (162, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink",'), (167, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (173, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/",'), (179, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strpathinrar, itemlist));'), (184, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar,'), (189, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));')]
===========================================
===========================================
Total add: 226
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist));'), (23, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt", true));'), (27, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (68, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink", true));'), (77, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (83, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir", true));'), (87, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (93, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/", true));'), (98, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strpathinrar, itemlist));'), (103, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt",'), (108, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (149, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir",'), (158, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir", true));'), (162, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink",'), (167, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (173, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/",'), (179, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strpathinrar, itemlist));'), (184, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar,'), (189, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strrarpath, itemlist));'), (23, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/reffile.txt", true));'), (27, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (68, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlink", true));'), (77, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (83, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testsymlinksubdir", true));'), (87, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (93, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/", true));'), (98, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strpathinrar, itemlist));'), (103, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/reffile.txt",'), (108, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (149, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testemptysubdir",'), (158, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir", true));'), (162, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsymlink",'), (167, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));'), (173, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar, "/testdir/testsubdir/",'), (179, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::GetDirectory(strpathinrar, itemlist));'), (184, 1, u'+  ASSERT_TRUE(StringUtils::EndsWith(strpathinrar,'), (189, 1, u'+  ASSERT_TRUE(file.Open(strpathinrar));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+    assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 16);')]
===========================================
===========================================
Total add: 65
Total del: 9
Header: COMXAudio::SetCurrentVolume
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+    assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+    assert(sizeof(mix.coeff)/sizeof(mix.coeff[0]) == 16);')]
===========================================
Class:class TagStringHandler : public ID3v2::Latin1StringHandler { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 1, u'+      assert(false);')]
===========================================
===========================================
Total add: 32
Total del: 2
Header: CGUIDialogSmartPlaylistRule::OnBrowse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 1, u'+      assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 1, u'+      assert(false);')]
===========================================
Class:    class SingleLockWithDelayGuard     {     
Class:class CArtItem { 
Class:class CResourceFinder { class CResourceFinder 
Class: class ObservableMessageJob : public CJob { 
Class:class CUrlOptions   : public map<CStdString, CStdString> { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(rhs > AE_CH_NULL && rhs < AE_CH_MAX);')]
===========================================
===========================================
Total add: 17
Total del: 0
Header: CAEChannelInfo::operator+=
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(rhs > AE_CH_NULL && rhs < AE_CH_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(rhs > AE_CH_NULL && rhs < AE_CH_MAX);')]
===========================================
Class: template <class T> class MiniScopedArray { 
Class: class CDemuxStreamAudioBXA   : public CDemuxStreamAudio { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-# ifdef HAVE_ASSERT_H'), (32, 2, u'-#  include <assert.h>'), (45, 2, u'-  assert(value);'), (46, 2, u'-  assert(bytes == 8 || bytes == 4 || bytes == 3);'), (67, 2, u'-  assert(bytes == 4 || bytes == 5);'), (85, 2, u'-  assert(bytes >= 1 && bytes <= 4);'), (180, 2, u'-  assert(length <= 30);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(827, 2, u'-    Assert(strm->avail_out > 0, "bug2");'), (1061, 2, u'-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1072, 2, u'-    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1075, 2, u'-        Assert(cur_match < s->strstart, "no future");'), (1102, 2, u'-        Assert(scan[2] == match[2], "scan[2]?");'), (1113, 2, u'-        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1133, 2, u'-        Assert(*scan == *match, "match[2]?");'), (1145, 2, u'-        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1187, 2, u'-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1189, 2, u'-    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1191, 2, u'-    Assert(cur_match < s->strstart, "no future");'), (1206, 2, u'-    Assert(*scan == *match, "match[2]?");'), (1218, 2, u'-    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1340, 2, u'-        Assert(more >= 2, "more < 2");'), (1409, 2, u'-            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (1417, 2, u'-        Assert(s->block_start >= 0L, "block gone");'), (1666, 2, u'-    Assert (flush != Z_NO_FLUSH, "no flush?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(first >= 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: StringUtils::Mid
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(first >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(first >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));'), (9, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::Create(destpath));')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));'), (9, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::Create(destpath));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));'), (9, 1, u'+  ASSERT_TRUE(XFILE::CDirectory::Create(destpath));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destfile));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destpath));')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destfile));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destpath));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destfile));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destpath));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destfile));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destpath));')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destfile));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destpath));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destfile));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destpath));')]
===========================================
Class:  class AsynchCallbackMessage : public AddonClass   class AsynchCallbackMessage : public AddonClass
Class:    class ProxyExistingWindowInterceptor : public InterceptorBase     class ProxyExistingWindowInterceptor : public InterceptorBase
Class:    class WindowXMLInterceptor : public InterceptorDialog<CGUIMediaWindow>     class WindowXMLInterceptor : public InterceptorDialog<CGUIMediaWindow>
Class: class CRendererReferenceHolder { 
Class:class CDeviceHostReferenceHolder class CDeviceHostReferenceHolder
Class: class CCtrlPointReferenceHolder { 
Class: class CUPnPCleaner : public NPT_Thread { 
Class: class CUPnPServer : public PLT_MediaConnect,                     public PLT_FileMediaConnectDelegate { 
Class: class CUPnPRenderer : public PLT_MediaRenderer { 
Class: class CRendererReferenceHolder { 
Class: class CMediaBrowser : public PLT_SyncMediaBrowser,                       public PLT_MediaContainerChangesListener { 
Class:class CDeviceHostReferenceHolder class CDeviceHostReferenceHolder
Class: class CCtrlPointReferenceHolder { 
Class: class CUPnPCleaner : public NPT_Thread { 
Class: class CUPnPServer : public PLT_MediaConnect,                     public PLT_FileMediaConnectDelegate { 
Class: class CUPnPRenderer : public PLT_MediaRenderer { 
Class: class CRendererReferenceHolder { 
Class: class CMediaBrowser : public PLT_SyncMediaBrowser,                       public PLT_MediaContainerChangesListener { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_FALSE(XFILE::CFile::Exists(destpath));'), (8, 1, u'+  ASSERT_FALSE(XFILE::CFile::Exists(destfile));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  ASSERT_TRUE(inputfile.Open(str));'), (28, 1, u'+    ASSERT_TRUE(file.OpenForWrite(*it, true));'), (36, 1, u'+    ASSERT_TRUE(file.Open(*it));')]
===========================================
===========================================
Total add: 69
Total del: 0
Header: TEST_F
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  ASSERT_TRUE(inputfile.Open(str));'), (28, 1, u'+    ASSERT_TRUE(file.OpenForWrite(*it, true));'), (36, 1, u'+    ASSERT_TRUE(file.Open(*it));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  ASSERT_TRUE(inputfile.Open(str));'), (28, 1, u'+    ASSERT_TRUE(file.OpenForWrite(*it, true));'), (36, 1, u'+    ASSERT_TRUE(file.Open(*it));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(78, 1, u'+    ASSERT_TRUE(file.Open(*it));')]
===========================================
Class: class TestRegExpLog : public testing::Test { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(59, 1, u'+  ASSERT_TRUE((tmpfile = XBMC_CREATETEMPFILE("")));'), (79, 1, u'+  ASSERT_TRUE((tmpfile = XBMC_CREATETEMPFILE("")));')]
===========================================
Class:class TestDatabaseUtilsHelper { 
Class: class TestDownloadQueueManager : public testing::Test { 
Class: class TestDownloadQueue : public testing::Test { 
Class: class TestCharsetConverter : public testing::Test { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+  ASSERT_TRUE((f1 = XBMC_CREATETEMPFILE("")));'), (43, 1, u'+  ASSERT_TRUE((f2 = XBMC_CREATETEMPFILE(".copy")));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+  ASSERT_TRUE(file);'), (55, 1, u'+  ASSERT_TRUE(file);'), (64, 1, u'+  ASSERT_TRUE(file);'), (71, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));'), (81, 1, u'+  ASSERT_TRUE(file);'), (88, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));'), (98, 1, u'+  ASSERT_TRUE(file);'), (105, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));'), (115, 1, u'+  ASSERT_TRUE(file);'), (122, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));'), (132, 1, u'+  ASSERT_TRUE(file);'), (139, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));'), (149, 1, u'+  ASSERT_TRUE(file);'), (156, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));'), (166, 1, u'+  ASSERT_TRUE(file);'), (173, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));'), (183, 1, u'+  ASSERT_TRUE(file);'), (190, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));'), (200, 1, u'+  ASSERT_TRUE(file);'), (207, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));'), (217, 1, u'+  ASSERT_TRUE(file);'), (224, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));'), (234, 1, u'+  ASSERT_TRUE(file);'), (242, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));'), (252, 1, u'+  ASSERT_TRUE(file);'), (259, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));'), (269, 1, u'+  ASSERT_TRUE(file);'), (280, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));'), (293, 1, u'+  ASSERT_TRUE(file);'), (304, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));'), (317, 1, u'+  ASSERT_TRUE(file);'), (361, 1, u'+  ASSERT_TRUE((file->Seek(0, SEEK_SET) == 0));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  ASSERT_TRUE(f);')]
===========================================
===========================================
Total add: 21
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  ASSERT_TRUE(f);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  ASSERT_TRUE(f);')]
===========================================
Class: class NullLogger : public XbmcCommons::ILogger { 
Class:class Water { class Water 
Class:     class LeakChecker : public EmptyTestEventListener { class LeakChecker : public EmptyTestEventListener 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(102, 1, u'+    ASSERT_EQ(q->Size(), new_q->Size());'), (134, 1, u'+  ASSERT_TRUE(n != NULL);'), (140, 1, u'+  ASSERT_TRUE(n != NULL);')]
===========================================
Class:     class IntegerFunctionTest : public QuickTest { class IntegerFunctionTest : public QuickTest 
Class:        class QueueTest : public QuickTest { class QueueTest : public QuickTest 
Class:  template <class T> class PrimeTableTest : public testing::Test { class PrimeTableTest : public testing::Test 
Class:                 template <class T> class PrimeTableTest2 : public PrimeTableTest<T> { class PrimeTableTest2 : public PrimeTableTest<T> 
Class:     class PrimeTableTest : public TestWithParam<CreatePrimeTableFunc*> { class PrimeTableTest : public TestWithParam<CreatePrimeTableFunc*> 
Class:      class PrimeTableTest : public TestWithParam< ::std::tr1::tuple<bool, int> > { class PrimeTableTest : public TestWithParam< ::std::tr1::tuple<bool, int> > 
Class:class TersePrinter : public EmptyTestEventListener { class TersePrinter : public EmptyTestEventListener 
Class:class DeathTestImpl : public DeathTest { class DeathTestImpl : public DeathTest 
Class:class CapturedStream { class CapturedStream 
Class:class GoogleTestFailureException : public ::std::runtime_error { class GoogleTestFailureException : public ::std::runtime_error 
Class:class TestNameIs { class TestNameIs 
Class:class PrettyUnitTestResultPrinter : public TestEventListener { class PrettyUnitTestResultPrinter : public TestEventListener 
Class:      class TestEventRepeater : public TestEventListener { class TestEventRepeater : public TestEventListener 
Class:    class XmlUnitTestResultPrinter : public EmptyTestEventListener { class XmlUnitTestResultPrinter : public EmptyTestEventListener 
Class:class TestCaseNameIs { class TestCaseNameIs 
Class:class ClassUniqueToAlwaysTrue 
Class: class TestException : public std::exception { class TestException : public std::exception 
Class:class ReplaceDeathTestFactory { class ReplaceDeathTestFactory 
Class:   class TestForDeathTest : public testing::Test { class TestForDeathTest : public testing::Test 
Class:  class MayDie { class MayDie 
Class:  class MockDeathTestFactory : public DeathTestFactory { class MockDeathTestFactory : public DeathTestFactory 
Class:      class MockDeathTest : public DeathTest { class MockDeathTest : public DeathTest 
Class:    class MacroLogicDeathTest : public testing::Test { class MacroLogicDeathTest : public testing::Test 
Class:class DirectoryCreationTest : public Test { class DirectoryCreationTest : public Test 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(98, 1, u'+  ASSERT_TRUE(cwd_without_drive != NULL);')]
===========================================
Class:class A { class A 
Class:  class B : public A { class B : public A 
Class: class LinkedPtrTest : public testing::Test { class LinkedPtrTest : public testing::Test 
Class:class EventRecordingListener : public TestEventListener { class EventRecordingListener : public TestEventListener 
Class:class XmlOutputChangeDirTest : public Test { class XmlOutputChangeDirTest : public Test 
Class:   class DogAdder { class DogAdder 
Class: class IntWrapper { class IntWrapper 
Class:          template <int kExpectedCalls> class TestGenerationEnvironment : public ::testing::Environment { class TestGenerationEnvironment : public ::testing::Environment 
Class: class TestGenerationTest : public TestWithParam<int> { class TestGenerationTest : public TestWithParam<int> 
Class:           class GeneratorEvaluationTest : public TestWithParam<int> { class GeneratorEvaluationTest : public TestWithParam<int> 
Class:class ExternalGeneratorTest : public TestWithParam<int> 
Class:class MultipleInstantiationTest : public TestWithParam<int> 
Class:   class SeparateInstanceTest : public TestWithParam<int> { class SeparateInstanceTest : public TestWithParam<int> 
Class:class NamingTest : public TestWithParam<int> 
Class:     class Unstreamable { class Unstreamable 
Class:class CommentTest : public TestWithParam<Unstreamable> 
Class:     class NonParameterizedBaseTest : public ::testing::Test { class NonParameterizedBaseTest : public ::testing::Test 
Class: class ParameterizedDerivedTest : public NonParameterizedBaseTest,                                  public ::testing::WithParamInterface<int> {                                  public ::testing::WithParamInterface<int> 
Class:class Base { class Base 
Class:  class BiggestIntConvertible { class BiggestIntConvertible 
Class:  template <typename T> class UnprintableTemplateInGlobal { class UnprintableTemplateInGlobal 
Class:  class StreamableInGlobal { class StreamableInGlobal 
Class:class UnprintableInFoo { class UnprintableInFoo 
Class:  template <typename T> class PrintableViaPrintToTemplate { class PrintableViaPrintToTemplate 
Class:  template <typename T> class StreamableTemplateInFoo { class StreamableTemplateInFoo 
Class:class AllowsGenericStreaming 
Class:class AllowsGenericStreamingTemplate 
Class:    template <typename T> class AllowsGenericStreamingAndImplicitConversionTemplate { class AllowsGenericStreamingAndImplicitConversionTemplate 
Class:class TestPartResultTest : public Test { class TestPartResultTest : public Test 
Class:   class TestPartResultArrayTest : public Test { class TestPartResultArrayTest : public Test 
Class:class BigTupleTest : public testing::Test { class BigTupleTest : public testing::Test 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 1, u'+using ::testing::StaticAssertTypeEq;'), (47, 1, u'+  StaticAssertTypeEq<int, tuple_element<0, tuple<int, char> >::type>();'), (48, 1, u'+  StaticAssertTypeEq<int&, tuple_element<1, tuple<double, int&> >::type>();'), (49, 1, u'+  StaticAssertTypeEq<bool, tuple_element<2, tuple<double, int, bool> >::type>();')]
===========================================
Class:    template <typename T> class CommonTest : public Test { class CommonTest : public Test 
Class:    template <typename T> class TypedTest1 : public Test { class TypedTest1 : public Test 
Class: template <typename T> class TypedTest2 : public Test { class TypedTest2 : public Test 
Class:class NumericTest : public Test { class NumericTest : public Test 
Class:   class TypedTestCasePStateTest : public Test { class TypedTestCasePStateTest : public Test 
Class:    template <typename T> class DerivedTest : public CommonTest<T> { class DerivedTest : public CommonTest<T> 
Class:    template <typename T> class TypedTestP1 : public Test { class TypedTestP1 : public Test 
Class: template <typename T> class TypedTestP2 : public Test { class TypedTestP2 : public Test 
Class:class NumericTest : public Test { class NumericTest : public Test 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(120, 1, u'+  ASSERT_TRUE(this->shared_ != NULL);'), (257, 1, u'+  ASSERT_TRUE(this->shared_ != NULL);')]
===========================================
Class:class UnitTestHelper { class UnitTestHelper 
Class:class FinalSuccessChecker : public Environment { class FinalSuccessChecker : public Environment 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(117, 1, u'+  ASSERT_EQ(2 + kTypedTestCases, unit_test->total_test_case_count());'), (140, 1, u'+AssertionResult IsNull(const char* str) {'), (142, 1, u'+    return testing::AssertionFailure() << "argument is " << str;'), (144, 1, u'+  return AssertionSuccess();'), (149, 1, u'+  ASSERT_TRUE(test_case != NULL);'), (156, 1, u'+  ASSERT_EQ(4, test_case->total_test_count());'), (189, 1, u'+  ASSERT_TRUE(test_case != NULL);'), (196, 1, u'+  ASSERT_EQ(1, test_case->total_test_count());'), (212, 1, u'+  ASSERT_TRUE(test_case != NULL);'), (219, 1, u'+  ASSERT_EQ(1, test_case->total_test_count());'), (245, 1, u'+    ASSERT_EQ(2 + kTypedTestCases, unit_test->total_test_case_count());'), (253, 1, u'+    ASSERT_EQ(4, test_cases[0]->total_test_count());'), (263, 1, u'+    ASSERT_EQ(1, test_cases[1]->total_test_count());'), (272, 1, u'+    ASSERT_EQ(1, test_cases[2]->total_test_count());')]
===========================================
Class: class SehExceptionInDestructorTest : public Test { class SehExceptionInDestructorTest : public Test 
Class: class SehExceptionInSetUpTestCaseTest : public Test { class SehExceptionInSetUpTestCaseTest : public Test 
Class: class SehExceptionInTearDownTestCaseTest : public Test { class SehExceptionInTearDownTestCaseTest : public Test 
Class: class SehExceptionInSetUpTest : public Test { class SehExceptionInSetUpTest : public Test 
Class: class SehExceptionInTearDownTest : public Test { class SehExceptionInTearDownTest : public Test 
Class: class CxxExceptionInTearDownTestCaseTest : public Test { class CxxExceptionInTearDownTestCaseTest : public Test 
Class: class CxxExceptionInSetUpTest : public Test { class CxxExceptionInSetUpTest : public Test 
Class: class CxxExceptionInTearDownTest : public Test { class CxxExceptionInTearDownTest : public Test 
Class: class CxxExceptionInTestBodyTest : public Test { class CxxExceptionInTestBodyTest : public Test 
Class:class MyEnvironment : public testing::Environment { class MyEnvironment : public testing::Environment 
Class:class FooTest : public testing::Test { class FooTest : public testing::Test 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+  ASSERT_TRUE(false) << "Tests shouldn\'t be run when --help is specified.";')]
===========================================
Class:class FooTest : public testing::Test { class FooTest : public testing::Test 
Class:class FailingParamTest : public testing::TestWithParam<int> 
Class:  class NonFatalFailureInFixtureConstructorTest : public testing::Test { class NonFatalFailureInFixtureConstructorTest : public testing::Test 
Class:  class FatalFailureInFixtureConstructorTest : public testing::Test { class FatalFailureInFixtureConstructorTest : public testing::Test 
Class:  class NonFatalFailureInSetUpTest : public testing::Test { class NonFatalFailureInSetUpTest : public testing::Test 
Class:  class FatalFailureInSetUpTest : public testing::Test { class FatalFailureInSetUpTest : public testing::Test 
Class:    class DeathTestAndMultiThreadsTest : public testing::Test { class DeathTestAndMultiThreadsTest : public testing::Test 
Class:class MixedUpTestCaseTest : public testing::Test { class MixedUpTestCaseTest : public testing::Test 
Class: class MixedUpTestCaseWithSameTestNameTest : public testing::Test { class MixedUpTestCaseWithSameTestNameTest : public testing::Test 
Class:class MixedUpTestCaseTest : public testing::Test { class MixedUpTestCaseTest : public testing::Test 
Class: class MixedUpTestCaseWithSameTestNameTest : public testing::Test { class MixedUpTestCaseWithSameTestNameTest : public testing::Test 
Class: class TEST_before_TEST_F_in_same_test_case : public testing::Test { class TEST_before_TEST_F_in_same_test_case : public testing::Test 
Class:    class FooEnvironment : public testing::Environment { class FooEnvironment : public testing::Environment 
Class: class BarEnvironment : public testing::Environment { class BarEnvironment : public testing::Environment 
Class:   class Predicate1Test : public testing::Test { class Predicate1Test : public testing::Test 
Class:   class Predicate2Test : public testing::Test { class Predicate2Test : public testing::Test 
Class:   class Predicate3Test : public testing::Test { class Predicate3Test : public testing::Test 
Class:   class Predicate4Test : public testing::Test { class Predicate4Test : public testing::Test 
Class:   class Predicate5Test : public testing::Test { class Predicate5Test : public testing::Test 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(101, 1, u'+testing::AssertionResult PredFormatFunction1(const char* e1,'), (104, 1, u'+    return testing::AssertionSuccess();'), (106, 1, u'+  return testing::AssertionFailure()'), (115, 1, u'+  testing::AssertionResult operator()(const char* e1,'), (161, 1, u'+typedef Predicate1Test ASSERT_PRED_FORMAT1Test;'), (163, 1, u'+typedef Predicate1Test ASSERT_PRED1Test;'), (239, 1, u'+TEST_F(ASSERT_PRED1Test, FunctionOnBuiltInTypeSuccess) {'), (240, 1, u'+  ASSERT_PRED1(PredFunction1Int,'), (247, 1, u'+TEST_F(ASSERT_PRED1Test, FunctionOnUserTypeSuccess) {'), (248, 1, u'+  ASSERT_PRED1(PredFunction1Bool,'), (255, 1, u'+TEST_F(ASSERT_PRED1Test, FunctorOnBuiltInTypeSuccess) {'), (256, 1, u'+  ASSERT_PRED1(PredFunctor1(),'), (263, 1, u'+TEST_F(ASSERT_PRED1Test, FunctorOnUserTypeSuccess) {'), (264, 1, u'+  ASSERT_PRED1(PredFunctor1(),'), (271, 1, u'+TEST_F(ASSERT_PRED1Test, FunctionOnBuiltInTypeFailure) {'), (274, 1, u'+    ASSERT_PRED1(PredFunction1Int,'), (282, 1, u'+TEST_F(ASSERT_PRED1Test, FunctionOnUserTypeFailure) {'), (285, 1, u'+    ASSERT_PRED1(PredFunction1Bool,'), (293, 1, u'+TEST_F(ASSERT_PRED1Test, FunctorOnBuiltInTypeFailure) {'), (296, 1, u'+    ASSERT_PRED1(PredFunctor1(),'), (304, 1, u'+TEST_F(ASSERT_PRED1Test, FunctorOnUserTypeFailure) {'), (307, 1, u'+    ASSERT_PRED1(PredFunctor1(),'), (387, 1, u'+TEST_F(ASSERT_PRED_FORMAT1Test, FunctionOnBuiltInTypeSuccess) {'), (388, 1, u'+  ASSERT_PRED_FORMAT1(PredFormatFunction1,'), (395, 1, u'+TEST_F(ASSERT_PRED_FORMAT1Test, FunctionOnUserTypeSuccess) {'), (396, 1, u'+  ASSERT_PRED_FORMAT1(PredFormatFunction1,'), (403, 1, u'+TEST_F(ASSERT_PRED_FORMAT1Test, FunctorOnBuiltInTypeSuccess) {'), (404, 1, u'+  ASSERT_PRED_FORMAT1(PredFormatFunctor1(),'), (411, 1, u'+TEST_F(ASSERT_PRED_FORMAT1Test, FunctorOnUserTypeSuccess) {'), (412, 1, u'+  ASSERT_PRED_FORMAT1(PredFormatFunctor1(),'), (419, 1, u'+TEST_F(ASSERT_PRED_FORMAT1Test, FunctionOnBuiltInTypeFailure) {'), (422, 1, u'+    ASSERT_PRED_FORMAT1(PredFormatFunction1,'), (430, 1, u'+TEST_F(ASSERT_PRED_FORMAT1Test, FunctionOnUserTypeFailure) {'), (433, 1, u'+    ASSERT_PRED_FORMAT1(PredFormatFunction1,'), (441, 1, u'+TEST_F(ASSERT_PRED_FORMAT1Test, FunctorOnBuiltInTypeFailure) {'), (444, 1, u'+    ASSERT_PRED_FORMAT1(PredFormatFunctor1(),'), (452, 1, u'+TEST_F(ASSERT_PRED_FORMAT1Test, FunctorOnUserTypeFailure) {'), (455, 1, u'+    ASSERT_PRED_FORMAT1(PredFormatFunctor1(),'), (489, 1, u'+testing::AssertionResult PredFormatFunction2(const char* e1,'), (494, 1, u'+    return testing::AssertionSuccess();'), (496, 1, u'+  return testing::AssertionFailure()'), (505, 1, u'+  testing::AssertionResult operator()(const char* e1,'), (558, 1, u'+typedef Predicate2Test ASSERT_PRED_FORMAT2Test;'), (560, 1, u'+typedef Predicate2Test ASSERT_PRED2Test;'), (644, 1, u'+TEST_F(ASSERT_PRED2Test, FunctionOnBuiltInTypeSuccess) {'), (645, 1, u'+  ASSERT_PRED2(PredFunction2Int,'), (653, 1, u'+TEST_F(ASSERT_PRED2Test, FunctionOnUserTypeSuccess) {'), (654, 1, u'+  ASSERT_PRED2(PredFunction2Bool,'), (662, 1, u'+TEST_F(ASSERT_PRED2Test, FunctorOnBuiltInTypeSuccess) {'), (663, 1, u'+  ASSERT_PRED2(PredFunctor2(),'), (671, 1, u'+TEST_F(ASSERT_PRED2Test, FunctorOnUserTypeSuccess) {'), (672, 1, u'+  ASSERT_PRED2(PredFunctor2(),'), (680, 1, u'+TEST_F(ASSERT_PRED2Test, FunctionOnBuiltInTypeFailure) {'), (683, 1, u'+    ASSERT_PRED2(PredFunction2Int,'), (692, 1, u'+TEST_F(ASSERT_PRED2Test, FunctionOnUserTypeFailure) {'), (695, 1, u'+    ASSERT_PRED2(PredFunction2Bool,'), (704, 1, u'+TEST_F(ASSERT_PRED2Test, FunctorOnBuiltInTypeFailure) {'), (707, 1, u'+    ASSERT_PRED2(PredFunctor2(),'), (716, 1, u'+TEST_F(ASSERT_PRED2Test, FunctorOnUserTypeFailure) {'), (719, 1, u'+    ASSERT_PRED2(PredFunctor2(),'), (808, 1, u'+TEST_F(ASSERT_PRED_FORMAT2Test, FunctionOnBuiltInTypeSuccess) {'), (809, 1, u'+  ASSERT_PRED_FORMAT2(PredFormatFunction2,'), (817, 1, u'+TEST_F(ASSERT_PRED_FORMAT2Test, FunctionOnUserTypeSuccess) {'), (818, 1, u'+  ASSERT_PRED_FORMAT2(PredFormatFunction2,'), (826, 1, u'+TEST_F(ASSERT_PRED_FORMAT2Test, FunctorOnBuiltInTypeSuccess) {'), (827, 1, u'+  ASSERT_PRED_FORMAT2(PredFormatFunctor2(),'), (835, 1, u'+TEST_F(ASSERT_PRED_FORMAT2Test, FunctorOnUserTypeSuccess) {'), (836, 1, u'+  ASSERT_PRED_FORMAT2(PredFormatFunctor2(),'), (844, 1, u'+TEST_F(ASSERT_PRED_FORMAT2Test, FunctionOnBuiltInTypeFailure) {'), (847, 1, u'+    ASSERT_PRED_FORMAT2(PredFormatFunction2,'), (856, 1, u'+TEST_F(ASSERT_PRED_FORMAT2Test, FunctionOnUserTypeFailure) {'), (859, 1, u'+    ASSERT_PRED_FORMAT2(PredFormatFunction2,'), (868, 1, u'+TEST_F(ASSERT_PRED_FORMAT2Test, FunctorOnBuiltInTypeFailure) {'), (871, 1, u'+    ASSERT_PRED_FORMAT2(PredFormatFunctor2(),'), (880, 1, u'+TEST_F(ASSERT_PRED_FORMAT2Test, FunctorOnUserTypeFailure) {'), (883, 1, u'+    ASSERT_PRED_FORMAT2(PredFormatFunctor2(),'), (919, 1, u'+testing::AssertionResult PredFormatFunction3(const char* e1,'), (926, 1, u'+    return testing::AssertionSuccess();'), (928, 1, u'+  return testing::AssertionFailure()'), (937, 1, u'+  testing::AssertionResult operator()(const char* e1,'), (997, 1, u'+typedef Predicate3Test ASSERT_PRED_FORMAT3Test;'), (999, 1, u'+typedef Predicate3Test ASSERT_PRED3Test;'), (1091, 1, u'+TEST_F(ASSERT_PRED3Test, FunctionOnBuiltInTypeSuccess) {'), (1092, 1, u'+  ASSERT_PRED3(PredFunction3Int,'), (1101, 1, u'+TEST_F(ASSERT_PRED3Test, FunctionOnUserTypeSuccess) {'), (1102, 1, u'+  ASSERT_PRED3(PredFunction3Bool,'), (1111, 1, u'+TEST_F(ASSERT_PRED3Test, FunctorOnBuiltInTypeSuccess) {'), (1112, 1, u'+  ASSERT_PRED3(PredFunctor3(),'), (1121, 1, u'+TEST_F(ASSERT_PRED3Test, FunctorOnUserTypeSuccess) {'), (1122, 1, u'+  ASSERT_PRED3(PredFunctor3(),'), (1131, 1, u'+TEST_F(ASSERT_PRED3Test, FunctionOnBuiltInTypeFailure) {'), (1134, 1, u'+    ASSERT_PRED3(PredFunction3Int,'), (1144, 1, u'+TEST_F(ASSERT_PRED3Test, FunctionOnUserTypeFailure) {'), (1147, 1, u'+    ASSERT_PRED3(PredFunction3Bool,'), (1157, 1, u'+TEST_F(ASSERT_PRED3Test, FunctorOnBuiltInTypeFailure) {'), (1160, 1, u'+    ASSERT_PRED3(PredFunctor3(),'), (1170, 1, u'+TEST_F(ASSERT_PRED3Test, FunctorOnUserTypeFailure) {'), (1173, 1, u'+    ASSERT_PRED3(PredFunctor3(),'), (1271, 1, u'+TEST_F(ASSERT_PRED_FORMAT3Test, FunctionOnBuiltInTypeSuccess) {'), (1272, 1, u'+  ASSERT_PRED_FORMAT3(PredFormatFunction3,'), (1281, 1, u'+TEST_F(ASSERT_PRED_FORMAT3Test, FunctionOnUserTypeSuccess) {'), (1282, 1, u'+  ASSERT_PRED_FORMAT3(PredFormatFunction3,'), (1291, 1, u'+TEST_F(ASSERT_PRED_FORMAT3Test, FunctorOnBuiltInTypeSuccess) {'), (1292, 1, u'+  ASSERT_PRED_FORMAT3(PredFormatFunctor3(),'), (1301, 1, u'+TEST_F(ASSERT_PRED_FORMAT3Test, FunctorOnUserTypeSuccess) {'), (1302, 1, u'+  ASSERT_PRED_FORMAT3(PredFormatFunctor3(),'), (1311, 1, u'+TEST_F(ASSERT_PRED_FORMAT3Test, FunctionOnBuiltInTypeFailure) {'), (1314, 1, u'+    ASSERT_PRED_FORMAT3(PredFormatFunction3,'), (1324, 1, u'+TEST_F(ASSERT_PRED_FORMAT3Test, FunctionOnUserTypeFailure) {'), (1327, 1, u'+    ASSERT_PRED_FORMAT3(PredFormatFunction3,'), (1337, 1, u'+TEST_F(ASSERT_PRED_FORMAT3Test, FunctorOnBuiltInTypeFailure) {'), (1340, 1, u'+    ASSERT_PRED_FORMAT3(PredFormatFunctor3(),'), (1350, 1, u'+TEST_F(ASSERT_PRED_FORMAT3Test, FunctorOnUserTypeFailure) {'), (1353, 1, u'+    ASSERT_PRED_FORMAT3(PredFormatFunctor3(),'), (1391, 1, u'+testing::AssertionResult PredFormatFunction4(const char* e1,'), (1400, 1, u'+    return testing::AssertionSuccess();'), (1402, 1, u'+  return testing::AssertionFailure()'), (1411, 1, u'+  testing::AssertionResult operator()(const char* e1,'), (1478, 1, u'+typedef Predicate4Test ASSERT_PRED_FORMAT4Test;'), (1480, 1, u'+typedef Predicate4Test ASSERT_PRED4Test;'), (1580, 1, u'+TEST_F(ASSERT_PRED4Test, FunctionOnBuiltInTypeSuccess) {'), (1581, 1, u'+  ASSERT_PRED4(PredFunction4Int,'), (1591, 1, u'+TEST_F(ASSERT_PRED4Test, FunctionOnUserTypeSuccess) {'), (1592, 1, u'+  ASSERT_PRED4(PredFunction4Bool,'), (1602, 1, u'+TEST_F(ASSERT_PRED4Test, FunctorOnBuiltInTypeSuccess) {'), (1603, 1, u'+  ASSERT_PRED4(PredFunctor4(),'), (1613, 1, u'+TEST_F(ASSERT_PRED4Test, FunctorOnUserTypeSuccess) {'), (1614, 1, u'+  ASSERT_PRED4(PredFunctor4(),'), (1624, 1, u'+TEST_F(ASSERT_PRED4Test, FunctionOnBuiltInTypeFailure) {'), (1627, 1, u'+    ASSERT_PRED4(PredFunction4Int,'), (1638, 1, u'+TEST_F(ASSERT_PRED4Test, FunctionOnUserTypeFailure) {'), (1641, 1, u'+    ASSERT_PRED4(PredFunction4Bool,'), (1652, 1, u'+TEST_F(ASSERT_PRED4Test, FunctorOnBuiltInTypeFailure) {'), (1655, 1, u'+    ASSERT_PRED4(PredFunctor4(),'), (1666, 1, u'+TEST_F(ASSERT_PRED4Test, FunctorOnUserTypeFailure) {'), (1669, 1, u'+    ASSERT_PRED4(PredFunctor4(),'), (1776, 1, u'+TEST_F(ASSERT_PRED_FORMAT4Test, FunctionOnBuiltInTypeSuccess) {'), (1777, 1, u'+  ASSERT_PRED_FORMAT4(PredFormatFunction4,'), (1787, 1, u'+TEST_F(ASSERT_PRED_FORMAT4Test, FunctionOnUserTypeSuccess) {'), (1788, 1, u'+  ASSERT_PRED_FORMAT4(PredFormatFunction4,'), (1798, 1, u'+TEST_F(ASSERT_PRED_FORMAT4Test, FunctorOnBuiltInTypeSuccess) {'), (1799, 1, u'+  ASSERT_PRED_FORMAT4(PredFormatFunctor4(),'), (1809, 1, u'+TEST_F(ASSERT_PRED_FORMAT4Test, FunctorOnUserTypeSuccess) {'), (1810, 1, u'+  ASSERT_PRED_FORMAT4(PredFormatFunctor4(),'), (1820, 1, u'+TEST_F(ASSERT_PRED_FORMAT4Test, FunctionOnBuiltInTypeFailure) {'), (1823, 1, u'+    ASSERT_PRED_FORMAT4(PredFormatFunction4,'), (1834, 1, u'+TEST_F(ASSERT_PRED_FORMAT4Test, FunctionOnUserTypeFailure) {'), (1837, 1, u'+    ASSERT_PRED_FORMAT4(PredFormatFunction4,'), (1848, 1, u'+TEST_F(ASSERT_PRED_FORMAT4Test, FunctorOnBuiltInTypeFailure) {'), (1851, 1, u'+    ASSERT_PRED_FORMAT4(PredFormatFunctor4(),'), (1862, 1, u'+TEST_F(ASSERT_PRED_FORMAT4Test, FunctorOnUserTypeFailure) {'), (1865, 1, u'+    ASSERT_PRED_FORMAT4(PredFormatFunctor4(),'), (1905, 1, u'+testing::AssertionResult PredFormatFunction5(const char* e1,'), (1916, 1, u'+    return testing::AssertionSuccess();'), (1918, 1, u'+  return testing::AssertionFailure()'), (1927, 1, u'+  testing::AssertionResult operator()(const char* e1,'), (2001, 1, u'+typedef Predicate5Test ASSERT_PRED_FORMAT5Test;'), (2003, 1, u'+typedef Predicate5Test ASSERT_PRED5Test;'), (2111, 1, u'+TEST_F(ASSERT_PRED5Test, FunctionOnBuiltInTypeSuccess) {'), (2112, 1, u'+  ASSERT_PRED5(PredFunction5Int,'), (2123, 1, u'+TEST_F(ASSERT_PRED5Test, FunctionOnUserTypeSuccess) {'), (2124, 1, u'+  ASSERT_PRED5(PredFunction5Bool,'), (2135, 1, u'+TEST_F(ASSERT_PRED5Test, FunctorOnBuiltInTypeSuccess) {'), (2136, 1, u'+  ASSERT_PRED5(PredFunctor5(),'), (2147, 1, u'+TEST_F(ASSERT_PRED5Test, FunctorOnUserTypeSuccess) {'), (2148, 1, u'+  ASSERT_PRED5(PredFunctor5(),'), (2159, 1, u'+TEST_F(ASSERT_PRED5Test, FunctionOnBuiltInTypeFailure) {'), (2162, 1, u'+    ASSERT_PRED5(PredFunction5Int,'), (2174, 1, u'+TEST_F(ASSERT_PRED5Test, FunctionOnUserTypeFailure) {'), (2177, 1, u'+    ASSERT_PRED5(PredFunction5Bool,'), (2189, 1, u'+TEST_F(ASSERT_PRED5Test, FunctorOnBuiltInTypeFailure) {'), (2192, 1, u'+    ASSERT_PRED5(PredFunctor5(),'), (2204, 1, u'+TEST_F(ASSERT_PRED5Test, FunctorOnUserTypeFailure) {'), (2207, 1, u'+    ASSERT_PRED5(PredFunctor5(),'), (2323, 1, u'+TEST_F(ASSERT_PRED_FORMAT5Test, FunctionOnBuiltInTypeSuccess) {'), (2324, 1, u'+  ASSERT_PRED_FORMAT5(PredFormatFunction5,'), (2335, 1, u'+TEST_F(ASSERT_PRED_FORMAT5Test, FunctionOnUserTypeSuccess) {'), (2336, 1, u'+  ASSERT_PRED_FORMAT5(PredFormatFunction5,'), (2347, 1, u'+TEST_F(ASSERT_PRED_FORMAT5Test, FunctorOnBuiltInTypeSuccess) {'), (2348, 1, u'+  ASSERT_PRED_FORMAT5(PredFormatFunctor5(),'), (2359, 1, u'+TEST_F(ASSERT_PRED_FORMAT5Test, FunctorOnUserTypeSuccess) {'), (2360, 1, u'+  ASSERT_PRED_FORMAT5(PredFormatFunctor5(),'), (2371, 1, u'+TEST_F(ASSERT_PRED_FORMAT5Test, FunctionOnBuiltInTypeFailure) {'), (2374, 1, u'+    ASSERT_PRED_FORMAT5(PredFormatFunction5,'), (2386, 1, u'+TEST_F(ASSERT_PRED_FORMAT5Test, FunctionOnUserTypeFailure) {'), (2389, 1, u'+    ASSERT_PRED_FORMAT5(PredFormatFunction5,'), (2401, 1, u'+TEST_F(ASSERT_PRED_FORMAT5Test, FunctorOnBuiltInTypeFailure) {'), (2404, 1, u'+    ASSERT_PRED_FORMAT5(PredFormatFunctor5(),'), (2416, 1, u'+TEST_F(ASSERT_PRED_FORMAT5Test, FunctorOnUserTypeFailure) {'), (2419, 1, u'+    ASSERT_PRED_FORMAT5(PredFormatFunctor5(),')]
===========================================
Class:class MyEnvironment : public testing::Environment { class MyEnvironment : public testing::Environment 
Class:class MyParamTest : public testing::TestWithParam<int> 
Class:class A : public Test 
Class:   class TestNamePrinter : public EmptyTestEventListener { class TestNamePrinter : public EmptyTestEventListener 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 1, u'+TEST(NoFatalFailureTest, AssertNoFatalFailure) {'), (51, 1, u'+  ASSERT_NO_FATAL_FAILURE(;);'), (52, 1, u'+  ASSERT_NO_FATAL_FAILURE(SUCCEED());'), (53, 1, u'+  ASSERT_NO_FATAL_FAILURE(Subroutine());'), (54, 1, u'+  ASSERT_NO_FATAL_FAILURE({ SUCCEED(); });')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 1, u'+  ASSERT_TRUE(property != properties.end())'), (90, 1, u'+void ManyAsserts(int id) {'), (100, 1, u'+    ASSERT_FALSE(false) << "This shouldn\'t fail.";'), (102, 1, u'+    ASSERT_LE(5, 6);'), (128, 1, u'+TEST(StressTest, CanUseScopedTraceAndAssertionsInManyThreads) {'), (133, 1, u'+      threads[i].reset(new ThreadWithParam<int>(&ManyAsserts,'), (186, 1, u'+void AssertNoFatalFailureIgnoresFailuresInOtherThreads() {'), (187, 1, u'+  ASSERT_NO_FATAL_FAILURE(GenerateFatalFailureInAnotherThread(true));'), (189, 1, u'+TEST(NoFatalFailureTest, AssertNoFatalFailureIgnoresFailuresInOtherThreads) {'), (191, 1, u'+  AssertNoFatalFailureIgnoresFailuresInOtherThreads();')]
===========================================
Class:class TestEventListenersAccessor { class TestEventListenersAccessor 
Class:class SubClassOfTest : public Test 
Class:class AnotherSubClassOfTest : public Test 
Class:       class FormatEpochTimeInMillisAsIso8601Test : public Test { class FormatEpochTimeInMillisAsIso8601Test : public Test 
Class: class VectorShuffleTest : public Test { class VectorShuffleTest : public Test 
Class: class ScopedFakeTestPartResultReporterTest : public Test { class ScopedFakeTestPartResultReporterTest : public Test 
Class:    class TestResultTest : public Test { class TestResultTest : public Test 
Class:   class GTestFlagSaverTest : public Test { class GTestFlagSaverTest : public Test 
Class: class ShouldShardTest : public testing::Test { class ShouldShardTest : public testing::Test 
Class:   class DisabledTestsTest : public Test { class DisabledTestsTest : public Test 
Class: template <typename T> class DISABLED_TypedTest : public Test { class DISABLED_TypedTest : public Test 
Class: template <typename T> class DISABLED_TypedTestP : public Test { class DISABLED_TypedTestP : public Test 
Class:  class Uncopyable { class Uncopyable 
Class:class UnprintableChar { class UnprintableChar 
Class:     class Foo { class Foo 
Class:  class FRIEND_TEST_Test2 : public Test { class FRIEND_TEST_Test2 : public Test 
Class:       class TestLifeCycleTest : public Test { class TestLifeCycleTest : public Test 
Class:   class Base { class Base 
Class:class MyTypeInUnnamedNameSpace : public Base { class MyTypeInUnnamedNameSpace : public Base 
Class:class MyTypeInNameSpace1 : public Base { class MyTypeInNameSpace1 : public Base 
Class:class MyTypeInNameSpace2 : public ::Base { class MyTypeInNameSpace2 : public ::Base 
Class:class TestInfoTest : public Test { class TestInfoTest : public Test 
Class:   class SetUpTestCaseTest : public Test { class SetUpTestCaseTest : public Test 
Class:  class InitGoogleTestTest : public Test { class InitGoogleTestTest : public Test 
Class:class Test 
Class:class Message 
Class:class AssertionResult 
Class:   template <typename T> class StaticAssertTypeEqTestHelper { class StaticAssertTypeEqTestHelper 
Class: class TestListener : public EmptyTestEventListener { class TestListener : public EmptyTestEventListener 
Class:    class SequenceTestingListener : public EmptyTestEventListener { class SequenceTestingListener : public EmptyTestEventListener 
Class:class ConversionHelperBase 
Class:class ConversionHelperDerived : public ConversionHelperBase 
Class:class NonContainer 
Class: class SuccessfulTest : public Test { class SuccessfulTest : public Test 
Class: class FailedTest : public Test { class FailedTest : public Test 
Class: class DisabledTest : public Test { class DisabledTest : public Test 
Class: class PropertyRecordingTest : public Test { class PropertyRecordingTest : public Test 
Class:class ValueParamTest : public TestWithParam<int> 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 1, u'+  ASSERT_EQ(1, 1);'), (62, 1, u'+  ASSERT_EQ(1, 2);'), (74, 1, u'+  ASSERT_EQ(1, 1);'), (79, 1, u'+  ASSERT_EQ(2, 3);')]
===========================================
Class: class NPT_AesBlockCipher : public NPT_BlockCipher { 
Class: class NPT_AesBlockEncrypter : public NPT_AesBlockCipher { class NPT_AesBlockEncrypter : public NPT_AesBlockCipher 
Class: class NPT_AesBlockDecrypter : public NPT_AesBlockCipher { class NPT_AesBlockDecrypter : public NPT_AesBlockCipher 
Class: class NPT_BasicDigest : public NPT_Digest { 
Class: class NPT_Sha1Digest : public NPT_BasicDigest { 
Class: class NPT_Sha256Digest : public NPT_BasicDigest { 
Class: class NPT_Md5Digest : public NPT_BasicDigest { 
Class: class NPT_HmacDigest : public NPT_Digest { 
Class:    class Cleaner {     class Cleaner 
Class:class NPT_LogCustomHandler : public NPT_LogHandler { class NPT_LogCustomHandler : public NPT_LogHandler 
Class: class NPT_LogManagerAutoLocker { 
Class: class NPT_TlsServerSessionImpl : public NPT_TlsSessionImpl { class NPT_TlsServerSessionImpl : public NPT_TlsSessionImpl 
Class: class NPT_PSPDirectory : public NPT_DirectoryInterface { 
Class: class NPT_PSPFileStream { 
Class: class NPT_PSPFileInputStream : public NPT_InputStream,                                private NPT_PSPFileStream  { 
Class: class NPT_PSPFileOutputStream : public NPT_OutputStream,                                 private NPT_PSPFileStream { 
Class: class NPT_PSPFile: public NPT_FileInterface { 
Class: class NPT_PSPSharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_PSPAtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_PSPThread : public NPT_ThreadInterface { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (4, 1, u'+        assert(error);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: W2AHelper
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (4, 1, u'+        assert(error);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);'), (4, 1, u'+        assert(error);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(out->WriteFully(chunk_buffer, chunk_size)));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CreateNewFile
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(out->WriteFully(chunk_buffer, chunk_size)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(out->WriteFully(chunk_buffer, chunk_size)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-    NPT_ASSERT(info.m_Size == (NPT_LargeSize)chunk_count*(NPT_LargeSize)chunk_size);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: CreateNewFile
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-    NPT_ASSERT(info.m_Size == (NPT_LargeSize)chunk_count*(NPT_LargeSize)chunk_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-    NPT_ASSERT(info.m_Size == (NPT_LargeSize)chunk_count*(NPT_LargeSize)chunk_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_File::GetInfo("foobar.doesnotexist", NULL) == NPT_ERROR_NO_SUCH_FILE);'), (3, 2, u'-    NPT_ASSERT(!NPT_File::Exists("foobar.doesnotexist"));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_File::GetInfo("foobar.doesnotexist", NULL) == NPT_ERROR_NO_SUCH_FILE);'), (3, 2, u'-    NPT_ASSERT(!NPT_File::Exists("foobar.doesnotexist"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_File::GetInfo("foobar.doesnotexist", NULL) == NPT_ERROR_NO_SUCH_FILE);'), (3, 2, u'-    NPT_ASSERT(!NPT_File::Exists("foobar.doesnotexist"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file.GetInfo(info)));'), (3, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_SPECIAL);'), (8, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file.GetInfo(info)));'), (9, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_SPECIAL);'), (13, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file.GetInfo(info)));'), (14, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_SPECIAL);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file.GetInfo(info)));'), (3, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_SPECIAL);'), (8, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file.GetInfo(info)));'), (9, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_SPECIAL);'), (13, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file.GetInfo(info)));'), (14, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_SPECIAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file.GetInfo(info)));'), (3, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_SPECIAL);'), (8, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file.GetInfo(info)));'), (9, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_SPECIAL);'), (13, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file.GetInfo(info)));'), (14, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_SPECIAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-    NPT_ASSERT(NPT_File::Exists("foobar.file1"));'), (7, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (8, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_REGULAR);'), (9, 2, u'-    NPT_ASSERT(info.m_Size == 9);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-    NPT_ASSERT(NPT_File::Exists("foobar.file1"));'), (7, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (8, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_REGULAR);'), (9, 2, u'-    NPT_ASSERT(info.m_Size == 9);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-    NPT_ASSERT(NPT_File::Exists("foobar.file1"));'), (7, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (8, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_REGULAR);'), (9, 2, u'-    NPT_ASSERT(info.m_Size == 9);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-        NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_REGULAR);'), (4, 2, u'-        NPT_ASSERT(info.m_Size == 9);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-        NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_REGULAR);'), (4, 2, u'-        NPT_ASSERT(info.m_Size == 9);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-        NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_REGULAR);'), (4, 2, u'-        NPT_ASSERT(info.m_Size == 9);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-        NPT_ASSERT(size == 9);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-        NPT_ASSERT(size == 9);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-        NPT_ASSERT(size == 9);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (5, 2, u'-        NPT_ASSERT(f1.GetPath() == "foobar.file1-r");'), (9, 2, u'-    NPT_ASSERT(NPT_File::Exists("foobar.file1-r"));'), (12, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (13, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_REGULAR);'), (14, 2, u'-    NPT_ASSERT(info.m_Size == 9);'), (20, 2, u'-    NPT_ASSERT(!NPT_File::Exists("foobar.dir"));'), (24, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (27, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (28, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_DIRECTORY);')]
===========================================
===========================================
Total add: 12
Total del: 10
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (5, 2, u'-        NPT_ASSERT(f1.GetPath() == "foobar.file1-r");'), (9, 2, u'-    NPT_ASSERT(NPT_File::Exists("foobar.file1-r"));'), (12, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (13, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_REGULAR);'), (14, 2, u'-    NPT_ASSERT(info.m_Size == 9);'), (20, 2, u'-    NPT_ASSERT(!NPT_File::Exists("foobar.dir"));'), (24, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (27, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (28, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_DIRECTORY);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (5, 2, u'-        NPT_ASSERT(f1.GetPath() == "foobar.file1-r");'), (9, 2, u'-    NPT_ASSERT(NPT_File::Exists("foobar.file1-r"));'), (12, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (13, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_REGULAR);'), (14, 2, u'-    NPT_ASSERT(info.m_Size == 9);'), (20, 2, u'-    NPT_ASSERT(!NPT_File::Exists("foobar.dir"));'), (24, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (27, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (28, 2, u'-    NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_DIRECTORY);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-        NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_DIRECTORY);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-        NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_DIRECTORY);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-        NPT_ASSERT(info.m_Type == NPT_FileInfo::FILE_TYPE_DIRECTORY);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-    NPT_ASSERT(entries.GetItemCount() == 3);'), (12, 2, u'-    NPT_ASSERT(NPT_FAILED(result));'), (15, 2, u'-    NPT_ASSERT(result == NPT_ERROR_DIRECTORY_NOT_EMPTY);'), (19, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Total add: 9
Total del: 5
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-    NPT_ASSERT(entries.GetItemCount() == 3);'), (12, 2, u'-    NPT_ASSERT(NPT_FAILED(result));'), (15, 2, u'-    NPT_ASSERT(result == NPT_ERROR_DIRECTORY_NOT_EMPTY);'), (19, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-    NPT_ASSERT(entries.GetItemCount() == 3);'), (12, 2, u'-    NPT_ASSERT(NPT_FAILED(result));'), (15, 2, u'-    NPT_ASSERT(result == NPT_ERROR_DIRECTORY_NOT_EMPTY);'), (19, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (6, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (7, 2, u'-    NPT_ASSERT(!NPT_File::Exists("foobar.dir-r"));')]
===========================================
===========================================
Total add: 17
Total del: 3
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (6, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (7, 2, u'-    NPT_ASSERT(!NPT_File::Exists("foobar.dir-r"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (6, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (7, 2, u'-    NPT_ASSERT(!NPT_File::Exists("foobar.dir-r"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(test == "");'), (5, 2, u'-    NPT_ASSERT(test == "a");'), (7, 2, u'-    NPT_ASSERT(test == "b");'), (9, 2, u'-    NPT_ASSERT(test == "");'), (11, 2, u'-    NPT_ASSERT(test == "a");'), (20, 2, u'-    NPT_ASSERT(test == "");'), (24, 2, u'-    NPT_ASSERT(test == "");'), (27, 2, u'-    NPT_ASSERT(test == "");'), (29, 2, u'-    NPT_ASSERT(test == "a");'), (31, 2, u'-    NPT_ASSERT(test == "a"+NPT_FilePath::Separator+"b");'), (33, 2, u'-    NPT_ASSERT(test == NPT_FilePath::Separator);'), (42, 2, u'-    NPT_ASSERT(test == NPT_FilePath::Separator);')]
===========================================
===========================================
Total add: 18
Total del: 18
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(test == "");'), (5, 2, u'-    NPT_ASSERT(test == "a");'), (7, 2, u'-    NPT_ASSERT(test == "b");'), (9, 2, u'-    NPT_ASSERT(test == "");'), (11, 2, u'-    NPT_ASSERT(test == "a");'), (20, 2, u'-    NPT_ASSERT(test == "");'), (24, 2, u'-    NPT_ASSERT(test == "");'), (27, 2, u'-    NPT_ASSERT(test == "");'), (29, 2, u'-    NPT_ASSERT(test == "a");'), (31, 2, u'-    NPT_ASSERT(test == "a"+NPT_FilePath::Separator+"b");'), (33, 2, u'-    NPT_ASSERT(test == NPT_FilePath::Separator);'), (42, 2, u'-    NPT_ASSERT(test == NPT_FilePath::Separator);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(test == "");'), (5, 2, u'-    NPT_ASSERT(test == "a");'), (7, 2, u'-    NPT_ASSERT(test == "b");'), (9, 2, u'-    NPT_ASSERT(test == "");'), (11, 2, u'-    NPT_ASSERT(test == "a");'), (20, 2, u'-    NPT_ASSERT(test == "");'), (24, 2, u'-    NPT_ASSERT(test == "");'), (27, 2, u'-    NPT_ASSERT(test == "");'), (29, 2, u'-    NPT_ASSERT(test == "a");'), (31, 2, u'-    NPT_ASSERT(test == "a"+NPT_FilePath::Separator+"b");'), (33, 2, u'-    NPT_ASSERT(test == NPT_FilePath::Separator);'), (42, 2, u'-    NPT_ASSERT(test == NPT_FilePath::Separator);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-    NPT_ASSERT(position == 0);'), (8, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (11, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (12, 2, u'-    NPT_ASSERT(position == large_size-0x107);'), (17, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (20, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (21, 2, u'-    NPT_ASSERT(position == large_size);'), (25, 2, u'-        NPT_ASSERT(buffer[i] == (unsigned char)i);')]
===========================================
===========================================
Total add: 10
Total del: 9
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-    NPT_ASSERT(position == 0);'), (8, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (11, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (12, 2, u'-    NPT_ASSERT(position == large_size-0x107);'), (17, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (20, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (21, 2, u'-    NPT_ASSERT(position == large_size);'), (25, 2, u'-        NPT_ASSERT(buffer[i] == (unsigned char)i);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (3, 2, u'-    NPT_ASSERT(position == 0);'), (8, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (11, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (12, 2, u'-    NPT_ASSERT(position == large_size-0x107);'), (17, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (20, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(result));'), (21, 2, u'-    NPT_ASSERT(position == large_size);'), (25, 2, u'-        NPT_ASSERT(buffer[i] == (unsigned char)i);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (6, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (10, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (11, 2, u'-        NPT_ASSERT(position == 0);'), (16, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (19, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (20, 2, u'-        NPT_ASSERT(position == large_size-0x10007);'), (25, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (28, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (29, 2, u'-        NPT_ASSERT(position == large_size);'), (33, 2, u'-            NPT_ASSERT(buffer[i] == (unsigned char)i);')]
===========================================
===========================================
Total add: 12
Total del: 11
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (6, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (10, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (11, 2, u'-        NPT_ASSERT(position == 0);'), (16, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (19, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (20, 2, u'-        NPT_ASSERT(position == large_size-0x10007);'), (25, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (28, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (29, 2, u'-        NPT_ASSERT(position == large_size);'), (33, 2, u'-            NPT_ASSERT(buffer[i] == (unsigned char)i);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (6, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (10, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (11, 2, u'-        NPT_ASSERT(position == 0);'), (16, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (19, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (20, 2, u'-        NPT_ASSERT(position == large_size-0x10007);'), (25, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (28, 2, u'-        NPT_ASSERT(NPT_SUCCEEDED(result));'), (29, 2, u'-        NPT_ASSERT(position == large_size);'), (33, 2, u'-            NPT_ASSERT(buffer[i] == (unsigned char)i);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.Open(NPT_FILE_OPEN_MODE_CREATE | NPT_FILE_OPEN_MODE_WRITE | NPT_FILE_OPEN_MODE_READ | NPT_FILE_OPEN_MODE_TRUNCATE)));'), (5, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.GetSize(size)));'), (6, 2, u'-    NPT_ASSERT(size == 0);'), (7, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.GetOutputStream(output)));'), (8, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.GetInputStream(input)));'), (9, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Tell(position)));'), (10, 2, u'-    NPT_ASSERT(position == 0);'), (11, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input->Tell(position)));'), (12, 2, u'-    NPT_ASSERT(position == 0);'), (13, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->WriteFully(buff, 16)));'), (26, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.GetSize(size)));'), (27, 2, u'-    NPT_ASSERT(size == 16);'), (28, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Tell(position)));'), (29, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input->GetSize(size)));'), (30, 2, u'-    NPT_ASSERT(size == 16);'), (31, 2, u'-    NPT_ASSERT(position == 16);'), (32, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input->Tell(position)));'), (33, 2, u'-    NPT_ASSERT(position == 16);'), (34, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Seek(8)));'), (35, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Tell(position)));'), (36, 2, u'-    NPT_ASSERT(position == 8);')]
===========================================
===========================================
Total add: 22
Total del: 21
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.Open(NPT_FILE_OPEN_MODE_CREATE | NPT_FILE_OPEN_MODE_WRITE | NPT_FILE_OPEN_MODE_READ | NPT_FILE_OPEN_MODE_TRUNCATE)));'), (5, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.GetSize(size)));'), (6, 2, u'-    NPT_ASSERT(size == 0);'), (7, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.GetOutputStream(output)));'), (8, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.GetInputStream(input)));'), (9, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Tell(position)));'), (10, 2, u'-    NPT_ASSERT(position == 0);'), (11, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input->Tell(position)));'), (12, 2, u'-    NPT_ASSERT(position == 0);'), (13, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->WriteFully(buff, 16)));'), (26, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.GetSize(size)));'), (27, 2, u'-    NPT_ASSERT(size == 16);'), (28, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Tell(position)));'), (29, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input->GetSize(size)));'), (30, 2, u'-    NPT_ASSERT(size == 16);'), (31, 2, u'-    NPT_ASSERT(position == 16);'), (32, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input->Tell(position)));'), (33, 2, u'-    NPT_ASSERT(position == 16);'), (34, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Seek(8)));'), (35, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Tell(position)));'), (36, 2, u'-    NPT_ASSERT(position == 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.Open(NPT_FILE_OPEN_MODE_CREATE | NPT_FILE_OPEN_MODE_WRITE | NPT_FILE_OPEN_MODE_READ | NPT_FILE_OPEN_MODE_TRUNCATE)));'), (5, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.GetSize(size)));'), (6, 2, u'-    NPT_ASSERT(size == 0);'), (7, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.GetOutputStream(output)));'), (8, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.GetInputStream(input)));'), (9, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Tell(position)));'), (10, 2, u'-    NPT_ASSERT(position == 0);'), (11, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input->Tell(position)));'), (12, 2, u'-    NPT_ASSERT(position == 0);'), (13, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->WriteFully(buff, 16)));'), (26, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file1.GetSize(size)));'), (27, 2, u'-    NPT_ASSERT(size == 16);'), (28, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Tell(position)));'), (29, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input->GetSize(size)));'), (30, 2, u'-    NPT_ASSERT(size == 16);'), (31, 2, u'-    NPT_ASSERT(position == 16);'), (32, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input->Tell(position)));'), (33, 2, u'-    NPT_ASSERT(position == 16);'), (34, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Seek(8)));'), (35, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Tell(position)));'), (36, 2, u'-    NPT_ASSERT(position == 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file2.Open(NPT_FILE_OPEN_MODE_READ)));'), (3, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file2.GetSize(size)));'), (4, 2, u'-    NPT_ASSERT(size == 16);'), (5, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file2.GetInputStream(input2)));'), (6, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->GetSize(size)));'), (7, 2, u'-    NPT_ASSERT(size == 16);'), (8, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Tell(position)));'), (9, 2, u'-    NPT_ASSERT(position == 0);'), (10, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Seek(8)));'), (11, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Tell(position)));'), (12, 2, u'-    NPT_ASSERT(position == 8);'), (25, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->WriteFully(buff, 16)));'), (29, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file2.GetSize(size)));'), (30, 2, u'-    NPT_ASSERT(size == 24);'), (31, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Tell(position)));'), (32, 2, u'-    NPT_ASSERT(position == 24);'), (33, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input->Tell(position)));'), (34, 2, u'-    NPT_ASSERT(position == 24);'), (42, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->GetSize(size)));'), (43, 2, u'-    NPT_ASSERT(size == 24);'), (44, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Seek(20)));'), (45, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Read(buff, 4, NULL)));')]
===========================================
===========================================
Total add: 22
Total del: 22
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file2.Open(NPT_FILE_OPEN_MODE_READ)));'), (3, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file2.GetSize(size)));'), (4, 2, u'-    NPT_ASSERT(size == 16);'), (5, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file2.GetInputStream(input2)));'), (6, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->GetSize(size)));'), (7, 2, u'-    NPT_ASSERT(size == 16);'), (8, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Tell(position)));'), (9, 2, u'-    NPT_ASSERT(position == 0);'), (10, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Seek(8)));'), (11, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Tell(position)));'), (12, 2, u'-    NPT_ASSERT(position == 8);'), (25, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->WriteFully(buff, 16)));'), (29, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file2.GetSize(size)));'), (30, 2, u'-    NPT_ASSERT(size == 24);'), (31, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Tell(position)));'), (32, 2, u'-    NPT_ASSERT(position == 24);'), (33, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input->Tell(position)));'), (34, 2, u'-    NPT_ASSERT(position == 24);'), (42, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->GetSize(size)));'), (43, 2, u'-    NPT_ASSERT(size == 24);'), (44, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Seek(20)));'), (45, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Read(buff, 4, NULL)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file2.Open(NPT_FILE_OPEN_MODE_READ)));'), (3, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file2.GetSize(size)));'), (4, 2, u'-    NPT_ASSERT(size == 16);'), (5, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file2.GetInputStream(input2)));'), (6, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->GetSize(size)));'), (7, 2, u'-    NPT_ASSERT(size == 16);'), (8, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Tell(position)));'), (9, 2, u'-    NPT_ASSERT(position == 0);'), (10, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Seek(8)));'), (11, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Tell(position)));'), (12, 2, u'-    NPT_ASSERT(position == 8);'), (25, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->WriteFully(buff, 16)));'), (29, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(file2.GetSize(size)));'), (30, 2, u'-    NPT_ASSERT(size == 24);'), (31, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(output->Tell(position)));'), (32, 2, u'-    NPT_ASSERT(position == 24);'), (33, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input->Tell(position)));'), (34, 2, u'-    NPT_ASSERT(position == 24);'), (42, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->GetSize(size)));'), (43, 2, u'-    NPT_ASSERT(size == 24);'), (44, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Seek(20)));'), (45, 2, u'-    NPT_ASSERT(NPT_SUCCEEDED(input2->Read(buff, 4, NULL)));')]
===========================================
Class: class ClientThread : public NPT_Thread { 
Class: class Resolver : public NPT_Thread { 
Class: class TcpServerThread : public NPT_Thread { 
Class: class CancellerThread : public NPT_Thread { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(i64 == (((NPT_UInt64)0x0B0C0D0E)<<32) | (((NPT_UInt64)0x0F000102)));'), (3, 1, u'+    NPT_ASSERT(i64 == ((((NPT_UInt64)0x0B0C0D0E)<<32) | (((NPT_UInt64)0x0F000102))));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(i64 == (((NPT_UInt64)0x0B0C0D0E)<<32) | (((NPT_UInt64)0x0F000102)));'), (3, 1, u'+    NPT_ASSERT(i64 == ((((NPT_UInt64)0x0B0C0D0E)<<32) | (((NPT_UInt64)0x0F000102))));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    NPT_ASSERT(i64 == (((NPT_UInt64)0x0B0C0D0E)<<32) | (((NPT_UInt64)0x0F000102)));'), (3, 1, u'+    NPT_ASSERT(i64 == ((((NPT_UInt64)0x0B0C0D0E)<<32) | (((NPT_UInt64)0x0F000102))));')]
===========================================
Class:class SharedVarThread : public NPT_Thread { class SharedVarThread : public NPT_Thread 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            NPT_ASSERT(0);                                       \\')]
===========================================
Class: class TestTlsConnector : public NPT_HttpTlsConnector { 
Class: class ObservableMessageJob : public CJob { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(m_dispman_element != DISPMANX_NO_HANDLE);'), (9, 2, u'-    assert(m_dispman_element != (unsigned)DISPMANX_INVALID);'), (22, 1, u'+  assert(m_dispman_element != DISPMANX_NO_HANDLE);'), (23, 1, u'+  assert(m_dispman_element != (unsigned)DISPMANX_INVALID);')]
===========================================
===========================================
Total add: 13
Total del: 22
Header: CWinEGLPlatformRaspberryPI::SetDisplayResolution
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(m_dispman_element != DISPMANX_NO_HANDLE);'), (9, 2, u'-    assert(m_dispman_element != (unsigned)DISPMANX_INVALID);'), (22, 1, u'+  assert(m_dispman_element != DISPMANX_NO_HANDLE);'), (23, 1, u'+  assert(m_dispman_element != (unsigned)DISPMANX_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(m_dispman_element != DISPMANX_NO_HANDLE);'), (9, 2, u'-    assert(m_dispman_element != (unsigned)DISPMANX_INVALID);'), (22, 1, u'+  assert(m_dispman_element != DISPMANX_NO_HANDLE);'), (23, 1, u'+  assert(m_dispman_element != (unsigned)DISPMANX_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(m_omx_input_buffers.size() == m_omx_input_avaliable.size());')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: COMXCoreComponent::FreeInputBuffers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(m_omx_input_buffers.size() == m_omx_input_avaliable.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(m_omx_input_buffers.size() == m_omx_input_avaliable.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(m_omx_input_buffers.size() == m_omx_input_avaliable.size());')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: COMXCoreComponent::FreeInputBuffers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(m_omx_input_buffers.size() == m_omx_input_avaliable.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(m_omx_input_buffers.size() == m_omx_input_avaliable.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_omx_output_buffers.size() == m_omx_output_available.size());')]
===========================================
===========================================
Total add: 4
Total del: 8
Header: COMXCoreComponent::FreeOutputBuffers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_omx_output_buffers.size() == m_omx_output_available.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_omx_output_buffers.size() == m_omx_output_available.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(m_omx_output_buffers.size() == m_omx_output_available.size());')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: COMXCoreComponent::FreeOutputBuffers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(m_omx_output_buffers.size() == m_omx_output_available.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(m_omx_output_buffers.size() == m_omx_output_available.size());')]
===========================================
Class: class IOMXContext { class IOMXContext 
Class: class OMXCodecObserver : public BnOMXObserver { class OMXCodecObserver : public BnOMXObserver 
Class: class OMXNode { class OMXNode 
Class: class OMXBuffer { class OMXBuffer 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_inUse > 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: CCoreAudioAESound::ReleaseSamples
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_inUse > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_inUse > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(false);')]
===========================================
===========================================
Total add: 0
Total del: 6
Header: CGUILargeTextureManager::ReleaseImage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(buffer);'), (9, 2, u'-    assert(bool2);')]
===========================================
===========================================
Total add: 4
Total del: 5
Header: namespace
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(buffer);'), (9, 2, u'-    assert(bool2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(buffer);'), (9, 2, u'-    assert(bool2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(size <= OUT_FRAMESTOBYTES(DTS1_FRAME_SIZE));'), (30, 2, u'-  assert(size <= OUT_FRAMESTOBYTES(DTS2_FRAME_SIZE));'), (55, 2, u'-  assert(size <= OUT_FRAMESTOBYTES(DTS3_FRAME_SIZE));')]
===========================================
===========================================
Total add: 6
Total del: 60
Header: CAEPackIEC61937::PackEAC3
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(size <= OUT_FRAMESTOBYTES(DTS1_FRAME_SIZE));'), (30, 2, u'-  assert(size <= OUT_FRAMESTOBYTES(DTS2_FRAME_SIZE));'), (55, 2, u'-  assert(size <= OUT_FRAMESTOBYTES(DTS3_FRAME_SIZE));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(size <= OUT_FRAMESTOBYTES(DTS1_FRAME_SIZE));'), (30, 2, u'-  assert(size <= OUT_FRAMESTOBYTES(DTS2_FRAME_SIZE));'), (55, 2, u'-  assert(size <= OUT_FRAMESTOBYTES(DTS3_FRAME_SIZE));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  assert(m_iSourceChannels > 0 && m_iSourceChannels < 3);')]
===========================================
===========================================
Total add: 7
Total del: 5
Header: CDVDAudioCodecLibMad::Reset
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  assert(m_iSourceChannels > 0 && m_iSourceChannels < 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  assert(m_iSourceChannels > 0 && m_iSourceChannels < 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  assert(m_iOutputChannels > 0 && m_iOutputChannels <= 8);')]
===========================================
===========================================
Total add: 11
Total del: 10
Header: CDVDAudioCodecPcm::GetChannels
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  assert(m_iOutputChannels > 0 && m_iOutputChannels <= 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  assert(m_iOutputChannels > 0 && m_iOutputChannels <= 8);')]
===========================================
Class:  class TiXmlParsingData { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(false);')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: CGUILargeTextureManager::ReleaseImage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(false);')]
===========================================
Class:  class ContextOpaque   class ContextOpaque
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+static void assert_avoptions(AVDictionary *m)'), (29, 1, u'+static void assert_codec_experimental(AVCodecContext *c, int encoder)')]
===========================================
===========================================
Total add: 22
Total del: 17
Header: ffmpeg_exit
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+static void assert_avoptions(AVDictionary *m)'), (29, 1, u'+static void assert_codec_experimental(AVCodecContext *c, int encoder)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+static void assert_avoptions(AVDictionary *m)'), (29, 1, u'+static void assert_codec_experimental(AVCodecContext *c, int encoder)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    av_assert0(ost->audio_resample || dec->sample_fmt==enc->sample_fmt);')]
===========================================
===========================================
Total add: 31
Total del: 47
Header: need_realloc:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    av_assert0(ost->audio_resample || dec->sample_fmt==enc->sample_fmt);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    av_assert0(ost->audio_resample || dec->sample_fmt==enc->sample_fmt);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    av_assert0(ost->audio_resample || dec->sample_fmt==enc->sample_fmt);')]
===========================================
===========================================
Total add: 4
Total del: 18
Header: need_realloc:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    av_assert0(ost->audio_resample || dec->sample_fmt==enc->sample_fmt);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    av_assert0(ost->audio_resample || dec->sample_fmt==enc->sample_fmt);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(279, 2, u'-                        av_assert0(ist->decoding_needed);'), (1200, 1, u'+        assert_codec_experimental(ist->st->codec, 0);'), (1201, 1, u'+        assert_avoptions(ist->opts);')]
===========================================
===========================================
Total add: 598
Total del: 606
Header: print_report
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(279, 2, u'-                        av_assert0(ist->decoding_needed);'), (1200, 1, u'+        assert_codec_experimental(ist->st->codec, 0);'), (1201, 1, u'+        assert_avoptions(ist->opts);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(279, 2, u'-                        av_assert0(ist->decoding_needed);'), (1200, 1, u'+        assert_codec_experimental(ist->st->codec, 0);'), (1201, 1, u'+        assert_avoptions(ist->opts);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert_codec_experimental(ost->st->codec, 1);'), (3, 1, u'+            assert_avoptions(ost->opts);')]
===========================================
===========================================
Total add: 27
Total del: 121
Header: transcode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert_codec_experimental(ost->st->codec, 1);'), (3, 1, u'+            assert_avoptions(ost->opts);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert_codec_experimental(ost->st->codec, 1);'), (3, 1, u'+            assert_avoptions(ost->opts);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(97, 1, u'+    assert_avoptions(format_opts);')]
===========================================
===========================================
Total add: 45
Total del: 54
Header: opt_input_file
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(97, 1, u'+    assert_avoptions(format_opts);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(97, 1, u'+    assert_avoptions(format_opts);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(156, 2, u'-    else av_assert0(0);')]
===========================================
===========================================
Total add: 51
Total del: 94
Header: new_audio_stream
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(156, 2, u'-    else av_assert0(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(156, 2, u'-    else av_assert0(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+        assert_file_overwrite(filename);')]
===========================================
===========================================
Total add: 110
Total del: 33
Header: opt_output_file
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+        assert_file_overwrite(filename);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+        assert_file_overwrite(filename);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-                assert(nextvp->target_clock >= vp->target_clock);')]
===========================================
===========================================
Total add: 33
Total del: 22
Header: retry:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-                assert(nextvp->target_clock >= vp->target_clock);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-                assert(nextvp->target_clock >= vp->target_clock);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    av_assert0(codec->flags & CODEC_FLAG_EMU_EDGE);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: input_get_buffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    av_assert0(codec->flags & CODEC_FLAG_EMU_EDGE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    av_assert0(codec->flags & CODEC_FLAG_EMU_EDGE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(codec->flags & CODEC_FLAG_EMU_EDGE);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: input_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(codec->flags & CODEC_FLAG_EMU_EDGE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(codec->flags & CODEC_FLAG_EMU_EDGE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(sbr->kx[1] <= table[0]);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: sbr_mapping
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(sbr->kx[1] <= table[0]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(sbr->kx[1] <= table[0]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                av_assert2(delta0 >= 0 && delta0 <= 4);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: group_exponents
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                av_assert2(delta0 >= 0 && delta0 <= 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                av_assert2(delta0 >= 0 && delta0 <= 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                av_assert2(delta1 >= 0 && delta1 <= 4);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: group_exponents
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                av_assert2(delta1 >= 0 && delta1 <= 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                av_assert2(delta1 >= 0 && delta1 <= 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                av_assert2(delta2 >= 0 && delta2 <= 4);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: group_exponents
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                av_assert2(delta2 >= 0 && delta2 <= 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                av_assert2(delta2 >= 0 && delta2 <= 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-    assert(v >= 0 && v < levels);'), (15, 1, u'+    av_assert2(v >= 0 && v < levels);')]
===========================================
===========================================
Total add: 2
Total del: 12
Header: sym_quant
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-    assert(v >= 0 && v < levels);'), (15, 1, u'+    av_assert2(v >= 0 && v < levels);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-    assert(v >= 0 && v < levels);'), (15, 1, u'+    av_assert2(v >= 0 && v < levels);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-    assert(v >= -m);'), (20, 1, u'+    av_assert2(c >= -m);')]
===========================================
===========================================
Total add: 6
Total del: 12
Header: asym_quant
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-    assert(v >= -m);'), (20, 1, u'+    av_assert2(c >= -m);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-    assert(v >= -m);'), (20, 1, u'+    av_assert2(c >= -m);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2(s->frame_size * 8 - put_bits_count(&s->pb) >= 18);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: output_frame_end
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2(s->frame_size * 8 - put_bits_count(&s->pb) >= 18);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert2(s->frame_size * 8 - put_bits_count(&s->pb) >= 18);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pad_bytes >= 0);'), (3, 1, u'+    av_assert2(pad_bytes >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: output_frame_end
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pad_bytes >= 0);'), (3, 1, u'+    av_assert2(pad_bytes >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pad_bytes >= 0);'), (3, 1, u'+    av_assert2(pad_bytes >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+        av_assert1(wpf > 0 && wpf <= 2048);')]
===========================================
===========================================
Total add: 64
Total del: 11
Header: validate_options
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+        av_assert1(wpf > 0 && wpf <= 2048);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+        av_assert1(wpf > 0 && wpf <= 2048);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(301, 2, u'-                        assert(pathn < FREEZE_INTERVAL<<avctx->trellis);\\')]
===========================================
===========================================
Total add: 4
Total del: 619
Header: static const int swf_index_tables[4][16] = {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(301, 2, u'-                        assert(pathn < FREEZE_INTERVAL<<avctx->trellis);\\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(301, 2, u'-                        assert(pathn < FREEZE_INTERVAL<<avctx->trellis);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+    av_assert0(s->samples >= 0);')]
===========================================
===========================================
Total add: 36
Total del: 26
Header: ape_decode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+    av_assert0(s->samples >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+    av_assert0(s->samples >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(bit_count == 8);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: bmp_encode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(bit_count == 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(bit_count == 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(78, 1, u'+        assert(c->low <= 0x1FF);')]
===========================================
===========================================
Total add: 86
Total del: 0
Header: ff_init_cabac_states
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(78, 1, u'+        assert(c->low <= 0x1FF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(78, 1, u'+        assert(c->low <= 0x1FF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            assert(nbits < ctx->cid_table->bit_depth + 4);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: dnxhd_calc_bits_thread
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            assert(nbits < ctx->cid_table->bit_depth + 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            assert(nbits < ctx->cid_table->bit_depth + 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (60, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (92, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (140, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);'), (164, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
Total add: 0
Total del: 178
Header: avg_tpel_pixels_mc22_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (60, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (92, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (140, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);'), (164, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (60, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (92, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (140, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);'), (164, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-        assert(ref>=0);'), (26, 1, u'+        assert(ref >= 0);'), (42, 2, u'-        assert(ref==0);'), (45, 1, u'+        assert(ref == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 2, u'-                    assert(!IS_INTRA(s->current_picture.mb_type[mb_xy]));'), (49, 2, u'-                    assert(s->last_picture_ptr && s->last_picture_ptr->data[0]);'), (83, 1, u'+                    assert(!IS_INTRA(s->current_picture.f.mb_type[mb_xy]));'), (84, 1, u'+                    assert(s->last_picture_ptr && s->last_picture_ptr->f.data[0]);')]
===========================================
===========================================
Total add: 95
Total del: 66
Header: guess_mv
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 2, u'-                    assert(!IS_INTRA(s->current_picture.mb_type[mb_xy]));'), (49, 2, u'-                    assert(s->last_picture_ptr && s->last_picture_ptr->data[0]);'), (83, 1, u'+                    assert(!IS_INTRA(s->current_picture.f.mb_type[mb_xy]));'), (84, 1, u'+                    assert(s->last_picture_ptr && s->last_picture_ptr->f.data[0]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 2, u'-                    assert(!IS_INTRA(s->current_picture.mb_type[mb_xy]));'), (49, 2, u'-                    assert(s->last_picture_ptr && s->last_picture_ptr->data[0]);'), (83, 1, u'+                    assert(!IS_INTRA(s->current_picture.f.mb_type[mb_xy]));'), (84, 1, u'+                    assert(s->last_picture_ptr && s->last_picture_ptr->f.data[0]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    av_assert0(avctx->sample_rate > 0);')]
===========================================
===========================================
Total add: 18
Total del: 18
Header: g726_encode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    av_assert0(avctx->sample_rate > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    av_assert0(avctx->sample_rate > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(s->current_picture.pict_type == s->current_picture_ptr->pict_type);'), (3, 2, u'-assert(s->current_picture.pict_type == s->pict_type);'), (4, 1, u'+assert(s->current_picture.f.pict_type == s->current_picture_ptr->f.pict_type);'), (5, 1, u'+assert(s->current_picture.f.pict_type == s->pict_type);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: retry:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(s->current_picture.pict_type == s->current_picture_ptr->pict_type);'), (3, 2, u'-assert(s->current_picture.pict_type == s->pict_type);'), (4, 1, u'+assert(s->current_picture.f.pict_type == s->current_picture_ptr->f.pict_type);'), (5, 1, u'+assert(s->current_picture.f.pict_type == s->pict_type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(s->current_picture.pict_type == s->current_picture_ptr->pict_type);'), (3, 2, u'-assert(s->current_picture.pict_type == s->pict_type);'), (4, 1, u'+assert(s->current_picture.f.pict_type == s->current_picture_ptr->f.pict_type);'), (5, 1, u'+assert(s->current_picture.f.pict_type == s->pict_type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(s->current_picture.pict_type == s->current_picture_ptr->pict_type);'), (3, 2, u'-assert(s->current_picture.pict_type == s->pict_type);'), (5, 1, u'+    assert(s->current_picture.f.pict_type == s->current_picture_ptr->f.pict_type);'), (6, 1, u'+    assert(s->current_picture.f.pict_type == s->pict_type);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: intrax8_decoded:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(s->current_picture.pict_type == s->current_picture_ptr->pict_type);'), (3, 2, u'-assert(s->current_picture.pict_type == s->pict_type);'), (5, 1, u'+    assert(s->current_picture.f.pict_type == s->current_picture_ptr->f.pict_type);'), (6, 1, u'+    assert(s->current_picture.f.pict_type == s->pict_type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(s->current_picture.pict_type == s->current_picture_ptr->pict_type);'), (3, 2, u'-assert(s->current_picture.pict_type == s->pict_type);'), (5, 1, u'+    assert(s->current_picture.f.pict_type == s->current_picture_ptr->f.pict_type);'), (6, 1, u'+    assert(s->current_picture.f.pict_type == s->pict_type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(78, 1, u'+        assert(IS_8X8(mb_type));'), (100, 1, u'+                assert(IS_SUB_4X4(sub_mb_type));')]
===========================================
===========================================
Total add: 135
Total del: 0
Header: ff_h264_decode_rbsp_trailing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(78, 1, u'+        assert(IS_8X8(mb_type));'), (100, 1, u'+                assert(IS_SUB_4X4(sub_mb_type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(78, 1, u'+        assert(IS_8X8(mb_type));'), (100, 1, u'+                assert(IS_SUB_4X4(sub_mb_type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(134, 1, u'+    av_assert0(pics <= MAX_DELAYED_PIC_COUNT);')]
===========================================
===========================================
Total add: 177
Total del: 1
Header: ff_h264_frame_start
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(134, 1, u'+    av_assert0(pics <= MAX_DELAYED_PIC_COUNT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(134, 1, u'+    av_assert0(pics <= MAX_DELAYED_PIC_COUNT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(118, 1, u'+                            assert(s->mb_y || linesize <= block_offset[i]);')]
===========================================
===========================================
Total add: 143
Total del: 12
Header: AV_COPY64
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(118, 1, u'+                            assert(s->mb_y || linesize <= block_offset[i]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(118, 1, u'+                            assert(s->mb_y || linesize <= block_offset[i]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 2, u'-                                    assert(mb_y || linesize <= block_offset[i]);')]
===========================================
===========================================
Total add: 17
Total del: 133
Header: hl_decode_mb_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 2, u'-                                    assert(mb_y || linesize <= block_offset[i]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 2, u'-                                    assert(mb_y || linesize <= block_offset[i]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(s0->current_picture_ptr->data[0]);'), (3, 2, u'-            assert(s0->current_picture_ptr->reference != DELAYED_PIC_REF);'), (4, 1, u'+            assert(s0->current_picture_ptr->f.data[0]);'), (5, 1, u'+            assert(s0->current_picture_ptr->f.reference != DELAYED_PIC_REF);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: decode_slice_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(s0->current_picture_ptr->data[0]);'), (3, 2, u'-            assert(s0->current_picture_ptr->reference != DELAYED_PIC_REF);'), (4, 1, u'+            assert(s0->current_picture_ptr->f.data[0]);'), (5, 1, u'+            assert(s0->current_picture_ptr->f.reference != DELAYED_PIC_REF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(s0->current_picture_ptr->data[0]);'), (3, 2, u'-            assert(s0->current_picture_ptr->reference != DELAYED_PIC_REF);'), (4, 1, u'+            assert(s0->current_picture_ptr->f.data[0]);'), (5, 1, u'+            assert(s0->current_picture_ptr->f.reference != DELAYED_PIC_REF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+                if(h->is_avc) av_assert0(next_avc - buf_index + consumed == nalsize);')]
===========================================
===========================================
Total add: 8
Total del: 2
Header: decode_nal_units
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+                if(h->is_avc) av_assert0(next_avc - buf_index + consumed == nalsize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+                if(h->is_avc) av_assert0(next_avc - buf_index + consumed == nalsize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert0(buf_index <= buf_size);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert0(buf_index <= buf_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        av_assert0(buf_index <= buf_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(96, 2, u'-            assert(pics <= MAX_DELAYED_PIC_COUNT);')]
===========================================
===========================================
Total add: 5
Total del: 133
Header: decode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(96, 2, u'-            assert(pics <= MAX_DELAYED_PIC_COUNT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(96, 2, u'-            assert(pics <= MAX_DELAYED_PIC_COUNT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        assert(cat == 1 || cat == 2 || cat == 4);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: get_cabac_cbf_ctx
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        assert(cat == 1 || cat == 2 || cat == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        assert(cat == 1 || cat == 2 || cat == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-            assert( cat == 1 || cat == 2 || cat == 4 );'), (16, 1, u'+            assert( cat == 1 || cat ==  2 || cat ==  4 || cat == 7 || cat == 8 || cat == 11 || cat == 12 );')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: decode_cabac_residual_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-            assert( cat == 1 || cat == 2 || cat == 4 );'), (16, 1, u'+            assert( cat == 1 || cat ==  2 || cat ==  4 || cat == 7 || cat == 8 || cat == 11 || cat == 12 );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-            assert( cat == 1 || cat == 2 || cat == 4 );'), (16, 1, u'+            assert( cat == 1 || cat ==  2 || cat ==  4 || cat == 7 || cat == 8 || cat == 11 || cat == 12 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(h->slice_type_nos == FF_B_TYPE);'), (6, 1, u'+        assert(h->slice_type_nos == AV_PICTURE_TYPE_B);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: ff_h264_decode_mb_cabac
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(h->slice_type_nos == FF_B_TYPE);'), (6, 1, u'+        assert(h->slice_type_nos == AV_PICTURE_TYPE_B);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(h->slice_type_nos == FF_B_TYPE);'), (6, 1, u'+        assert(h->slice_type_nos == AV_PICTURE_TYPE_B);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(h->slice_type_nos == FF_I_TYPE);'), (6, 1, u'+        assert(h->slice_type_nos == AV_PICTURE_TYPE_I);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ff_h264_decode_mb_cabac
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(h->slice_type_nos == FF_I_TYPE);'), (6, 1, u'+        assert(h->slice_type_nos == AV_PICTURE_TYPE_I);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(h->slice_type_nos == FF_I_TYPE);'), (6, 1, u'+        assert(h->slice_type_nos == AV_PICTURE_TYPE_I);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+        assert((cbp&15) == 0 || (cbp&15) == 15);')]
===========================================
===========================================
Total add: 67
Total del: 0
Header: decode_residual
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+        assert((cbp&15) == 0 || (cbp&15) == 15);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+        assert((cbp&15) == 0 || (cbp&15) == 15);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-       assert(h->slice_type_nos == FF_I_TYPE);'), (4, 1, u'+       assert(h->slice_type_nos == AV_PICTURE_TYPE_I);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ff_h264_decode_mb_cavlc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-       assert(h->slice_type_nos == FF_I_TYPE);'), (4, 1, u'+       assert(h->slice_type_nos == AV_PICTURE_TYPE_I);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-       assert(h->slice_type_nos == FF_I_TYPE);'), (4, 1, u'+       assert(h->slice_type_nos == AV_PICTURE_TYPE_I);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(h->slice_type_nos == FF_P_TYPE); //FIXME SP correct ?'), (3, 1, u'+            assert(h->slice_type_nos == AV_PICTURE_TYPE_P); //FIXME SP correct ?')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decode_intra_mb:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(h->slice_type_nos == FF_P_TYPE); //FIXME SP correct ?'), (3, 1, u'+            assert(h->slice_type_nos == AV_PICTURE_TYPE_P); //FIXME SP correct ?')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(h->slice_type_nos == FF_P_TYPE); //FIXME SP correct ?'), (3, 1, u'+            assert(h->slice_type_nos == AV_PICTURE_TYPE_P); //FIXME SP correct ?')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-            assert((cbp&15) == 0 || (cbp&15) == 15);')]
===========================================
===========================================
Total add: 37
Total del: 67
Header: decode_intra_mb:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-            assert((cbp&15) == 0 || (cbp&15) == 15);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-            assert((cbp&15) == 0 || (cbp&15) == 15);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h->ref_list[1][0].reference&3);'), (3, 1, u'+    assert(h->ref_list[1][0].f.reference & 3);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: pred_spatial_direct_motion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h->ref_list[1][0].reference&3);'), (3, 1, u'+    assert(h->ref_list[1][0].f.reference & 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h->ref_list[1][0].reference&3);'), (3, 1, u'+    assert(h->ref_list[1][0].f.reference & 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h->ref_list[1][0].reference&3);'), (3, 1, u'+    assert(h->ref_list[1][0].f.reference & 3);')]
===========================================
===========================================
Total add: 6
Total del: 3
Header: pred_temp_direct_motion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h->ref_list[1][0].reference&3);'), (3, 1, u'+    assert(h->ref_list[1][0].f.reference & 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h->ref_list[1][0].reference&3);'), (3, 1, u'+    assert(h->ref_list[1][0].f.reference & 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-    assert(!FRAME_MBAFF);')]
===========================================
===========================================
Total add: 28
Total del: 21
Header: filter_mb_edgech
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-    assert(!FRAME_MBAFF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-    assert(!FRAME_MBAFF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(!FRAME_MBAFF);')]
===========================================
===========================================
Total add: 18
Total del: 0
Header: ff_h264_filter_mb_fast
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(!FRAME_MBAFF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(!FRAME_MBAFF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                            assert(ref->reference);'), (3, 1, u'+                            assert(ref->f.reference);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_h264_decode_ref_pic_list_reordering
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                            assert(ref->reference);'), (3, 1, u'+                            assert(ref->f.reference);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                            assert(ref->reference);'), (3, 1, u'+                            assert(ref->f.reference);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(!(ref && !ref->reference));'), (4, 1, u'+                        assert(!(ref && !ref->f.reference));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ff_h264_decode_ref_pic_list_reordering
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(!(ref && !ref->reference));'), (4, 1, u'+                        assert(!(ref && !ref->f.reference));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(!(ref && !ref->reference));'), (4, 1, u'+                        assert(!(ref && !ref->f.reference));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: ff_generate_sliding_window_mmcos
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: s->bgr32=1;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type == FF_P_TYPE);'), (3, 1, u'+    assert(s->pict_type == AV_PICTURE_TYPE_P);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: preview_obmc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type == FF_P_TYPE);'), (3, 1, u'+    assert(s->pict_type == AV_PICTURE_TYPE_P);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type == FF_P_TYPE);'), (3, 1, u'+    assert(s->pict_type == AV_PICTURE_TYPE_P);')]
===========================================
Class: class CustomSource : public MediaSource { class CustomSource : public MediaSource 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!(len&1)); //the optimization in r11881 does not support odd len'), (6, 1, u'+    assert(!(len & 1));')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: lpc_apply_welch_window_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!(len&1)); //the optimization in r11881 does not support odd len'), (6, 1, u'+    assert(!(len & 1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!(len&1)); //the optimization in r11881 does not support odd len'), (6, 1, u'+    assert(!(len & 1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 2, u'-        assert(s->nb_components==3);'), (32, 1, u'+        assert(s->nb_components == 3);')]
===========================================
===========================================
Total add: 50
Total del: 12
Header: ff_mjpeg_decode_sof
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 2, u'-        assert(s->nb_components==3);'), (32, 1, u'+        assert(s->nb_components == 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 2, u'-        assert(s->nb_components==3);'), (32, 1, u'+        assert(s->nb_components == 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    av_assert0(nb_components==1 || nb_components==3);')]
===========================================
===========================================
Total add: 22
Total del: 7
Header: ljpeg_decode_rgb_scan
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    av_assert0(nb_components==1 || nb_components==3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    av_assert0(nb_components==1 || nb_components==3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        av_assert0(s->picture_ptr == &s->picture);')]
===========================================
===========================================
Total add: 10
Total del: 9
Header: ff_mjpeg_decode_sos
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        av_assert0(s->picture_ptr == &s->picture);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        av_assert0(s->picture_ptr == &s->picture);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            av_assert0(s->picture_ptr == &s->picture);')]
===========================================
===========================================
Total add: 7
Total del: 4
Header: ff_mjpeg_decode_sos
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            av_assert0(s->picture_ptr == &s->picture);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            av_assert0(s->picture_ptr == &s->picture);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        av_assert0(avctx->pix_fmt == PIX_FMT_YUVJ444P ||'), (18, 1, u'+        av_assert0(avctx->pix_fmt == PIX_FMT_YUVJ444P ||')]
===========================================
===========================================
Total add: 33
Total del: 2
Header: not_the_end:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        av_assert0(avctx->pix_fmt == PIX_FMT_YUVJ444P ||'), (18, 1, u'+        av_assert0(avctx->pix_fmt == PIX_FMT_YUVJ444P ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        av_assert0(avctx->pix_fmt == PIX_FMT_YUVJ444P ||'), (18, 1, u'+        av_assert0(avctx->pix_fmt == PIX_FMT_YUVJ444P ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type==FF_P_TYPE);'), (3, 1, u'+    assert(s->pict_type==AV_PICTURE_TYPE_P);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_fix_long_p_mvs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type==FF_P_TYPE);'), (3, 1, u'+    assert(s->pict_type==AV_PICTURE_TYPE_P);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type==FF_P_TYPE);'), (3, 1, u'+    assert(s->pict_type==AV_PICTURE_TYPE_P);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 2, u'-        assert(bx >= xmin*2 || bx <= xmax*2 || by >= ymin*2 || by <= ymax*2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(121, 2, u'-            assert(mb_type & MB_TYPE_CBP);'), (190, 2, u'-            assert(mb_type & MB_TYPE_L0L1);'), (375, 1, u'+    assert(s->mb_skipped == 0);'), (490, 1, u'+            assert(mb_type & MB_TYPE_CBP);'), (513, 1, u'+            assert(mb_type & MB_TYPE_L0L1);')]
===========================================
===========================================
Total add: 469
Total del: 63
Header: mpeg_decode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(121, 2, u'-            assert(mb_type & MB_TYPE_CBP);'), (190, 2, u'-            assert(mb_type & MB_TYPE_L0L1);'), (375, 1, u'+    assert(s->mb_skipped == 0);'), (490, 1, u'+            assert(mb_type & MB_TYPE_CBP);'), (513, 1, u'+            assert(mb_type & MB_TYPE_L0L1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(121, 2, u'-            assert(mb_type & MB_TYPE_CBP);'), (190, 2, u'-            assert(mb_type & MB_TYPE_L0L1);'), (375, 1, u'+    assert(s->mb_skipped == 0);'), (490, 1, u'+            assert(mb_type & MB_TYPE_CBP);'), (513, 1, u'+            assert(mb_type & MB_TYPE_L0L1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                    av_assert0(!s->progressive_sequence);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: mpeg_decode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                    av_assert0(!s->progressive_sequence);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                    av_assert0(!s->progressive_sequence);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert((avctx->sub_id==1) == (avctx->codec_id==CODEC_ID_MPEG1VIDEO));'), (7, 1, u'+        assert((avctx->sub_id == 1) == (avctx->codec_id == CODEC_ID_MPEG1VIDEO));')]
===========================================
===========================================
Total add: 40
Total del: 33
Header: mpeg_decode_postinit
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert((avctx->sub_id==1) == (avctx->codec_id==CODEC_ID_MPEG1VIDEO));'), (7, 1, u'+        assert((avctx->sub_id == 1) == (avctx->codec_id == CODEC_ID_MPEG1VIDEO));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert((avctx->sub_id==1) == (avctx->codec_id==CODEC_ID_MPEG1VIDEO));'), (7, 1, u'+        assert((avctx->sub_id == 1) == (avctx->codec_id == CODEC_ID_MPEG1VIDEO));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-                    assert(s->field_select[dir][i]==0 || s->field_select[dir][i]==1);'), (15, 1, u'+                    assert(s->field_select[dir][i] == 0 || s->field_select[dir][i] == 1);')]
===========================================
===========================================
Total add: 7
Total del: 7
Header: mpeg_decode_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-                    assert(s->field_select[dir][i]==0 || s->field_select[dir][i]==1);'), (15, 1, u'+                    assert(s->field_select[dir][i] == 0 || s->field_select[dir][i] == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-                    assert(s->field_select[dir][i]==0 || s->field_select[dir][i]==1);'), (15, 1, u'+                    assert(s->field_select[dir][i] == 0 || s->field_select[dir][i] == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(pc->frame_start_found>=0 && pc->frame_start_found<=4);'), (7, 1, u'+        assert(pc->frame_start_found >= 0 && pc->frame_start_found <= 4);')]
===========================================
===========================================
Total add: 15
Total del: 12
Header: ff_mpeg1_find_frame_end
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(pc->frame_start_found>=0 && pc->frame_start_found<=4);'), (7, 1, u'+        assert(pc->frame_start_found >= 0 && pc->frame_start_found <= 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(pc->frame_start_found>=0 && pc->frame_start_found<=4);'), (7, 1, u'+        assert(pc->frame_start_found >= 0 && pc->frame_start_found <= 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+                    av_assert0(avctx->thread_count > 1);')]
===========================================
===========================================
Total add: 8
Total del: 7
Header: decode_chunks
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+                    av_assert0(avctx->thread_count > 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+                    av_assert0(avctx->thread_count > 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+                    av_assert0(avctx->thread_count > 1);')]
===========================================
===========================================
Total add: 12
Total del: 9
Header: decode_chunks
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+                    av_assert0(avctx->thread_count > 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+                    av_assert0(avctx->thread_count > 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+            av_assert0(s->drop_frame_timecode == s->tc.drop);')]
===========================================
===========================================
Total add: 6
Total del: 10
Header: mpeg1_encode_sequence_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+            av_assert0(s->drop_frame_timecode == s->tc.drop);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+            av_assert0(s->drop_frame_timecode == s->tc.drop);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->time>=0);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: mpeg4_encode_picture_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->time>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->time>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(e>=1);'), (9, 1, u'+    assert(e >= 1);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: l3_unscale
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(e>=1);'), (9, 1, u'+    assert(e >= 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(e>=1);'), (9, 1, u'+    assert(e >= 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(193, 2, u'-        assert(offset == FF_ARRAY_ELEMS(huff_vlc_tables));'), (204, 2, u'-        assert(offset == FF_ARRAY_ELEMS(huff_quad_vlc_tables));'), (241, 1, u'+    assert(offset == FF_ARRAY_ELEMS(huff_vlc_tables));'), (252, 1, u'+    assert(offset == FF_ARRAY_ELEMS(huff_quad_vlc_tables));')]
===========================================
===========================================
Total add: 142
Total del: 485
Header: l3_unscale
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(193, 2, u'-        assert(offset == FF_ARRAY_ELEMS(huff_vlc_tables));'), (204, 2, u'-        assert(offset == FF_ARRAY_ELEMS(huff_quad_vlc_tables));'), (241, 1, u'+    assert(offset == FF_ARRAY_ELEMS(huff_vlc_tables));'), (252, 1, u'+    assert(offset == FF_ARRAY_ELEMS(huff_quad_vlc_tables));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(193, 2, u'-        assert(offset == FF_ARRAY_ELEMS(huff_vlc_tables));'), (204, 2, u'-        assert(offset == FF_ARRAY_ELEMS(huff_quad_vlc_tables));'), (241, 1, u'+    assert(offset == FF_ARRAY_ELEMS(huff_vlc_tables));'), (252, 1, u'+    assert(offset == FF_ARRAY_ELEMS(huff_quad_vlc_tables));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert((get_bits_count(&s->gb) & 7) == 0);'), (13, 1, u'+        assert((get_bits_count(&s->gb) & 7) == 0);')]
===========================================
===========================================
Total add: 22
Total del: 16
Header: mp_decode_layer3
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert((get_bits_count(&s->gb) & 7) == 0);'), (13, 1, u'+        assert((get_bits_count(&s->gb) & 7) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert((get_bits_count(&s->gb) & 7) == 0);'), (13, 1, u'+        assert((get_bits_count(&s->gb) & 7) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-        assert(i <= buf_size - HEADER_SIZE && i>= 0);'), (14, 1, u'+        assert(i <= buf_size - HEADER_SIZE && i >= 0);')]
===========================================
===========================================
Total add: 14
Total del: 6
Header: mp_decode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-        assert(i <= buf_size - HEADER_SIZE && i>= 0);'), (14, 1, u'+        assert(i <= buf_size - HEADER_SIZE && i >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-        assert(i <= buf_size - HEADER_SIZE && i>= 0);'), (14, 1, u'+        assert(i <= buf_size - HEADER_SIZE && i >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert (m != NULL);'), (5, 1, u'+        assert(m != NULL);')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: decode_frame_mp3on4
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert (m != NULL);'), (5, 1, u'+        assert(m != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert (m != NULL);'), (5, 1, u'+        assert(m != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    assert(p<=end);'), (11, 1, u'+    assert(p <= end);')]
===========================================
===========================================
Total add: 10
Total del: 7
Header: const enum PixelFormat ff_hwaccel_pixfmt_list_420[] = {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    assert(p<=end);'), (11, 1, u'+    assert(p <= end);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    assert(p<=end);'), (11, 1, u'+    assert(p <= end);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!pic->hwaccel_picture_private);'), (3, 1, u'+        assert(!pic->f.hwaccel_picture_private);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: alloc_frame_buffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!pic->hwaccel_picture_private);'), (3, 1, u'+        assert(!pic->f.hwaccel_picture_private);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!pic->hwaccel_picture_private);'), (3, 1, u'+        assert(!pic->f.hwaccel_picture_private);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-        assert(pic->data[0]);'), (27, 2, u'-        assert(pic->type == 0 || pic->type == FF_BUFFER_TYPE_SHARED);'), (30, 2, u'-        assert(!pic->data[0]);'), (32, 1, u'+        assert(pic->f.data[0]);'), (33, 1, u'+        assert(pic->f.type == 0 || pic->f.type == FF_BUFFER_TYPE_SHARED);'), (36, 1, u'+        assert(!pic->f.data[0]);')]
===========================================
===========================================
Total add: 18
Total del: 14
Header: alloc_frame_buffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-        assert(pic->data[0]);'), (27, 2, u'-        assert(pic->type == 0 || pic->type == FF_BUFFER_TYPE_SHARED);'), (30, 2, u'-        assert(!pic->data[0]);'), (32, 1, u'+        assert(pic->f.data[0]);'), (33, 1, u'+        assert(pic->f.type == 0 || pic->f.type == FF_BUFFER_TYPE_SHARED);'), (36, 1, u'+        assert(!pic->f.data[0]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-        assert(pic->data[0]);'), (27, 2, u'-        assert(pic->type == 0 || pic->type == FF_BUFFER_TYPE_SHARED);'), (30, 2, u'-        assert(!pic->data[0]);'), (32, 1, u'+        assert(pic->f.data[0]);'), (33, 1, u'+        assert(pic->f.type == 0 || pic->f.type == FF_BUFFER_TYPE_SHARED);'), (36, 1, u'+        assert(!pic->f.data[0]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->last_picture_ptr==NULL || s->out_format != FMT_H264 || s->codec_id == CODEC_ID_SVQ3);'), (3, 1, u'+    assert(s->last_picture_ptr == NULL || s->out_format != FMT_H264 ||')]
===========================================
===========================================
Total add: 20
Total del: 10
Header: MPV_frame_start
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->last_picture_ptr==NULL || s->out_format != FMT_H264 || s->codec_id == CODEC_ID_SVQ3);'), (3, 1, u'+    assert(s->last_picture_ptr == NULL || s->out_format != FMT_H264 ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->last_picture_ptr==NULL || s->out_format != FMT_H264 || s->codec_id == CODEC_ID_SVQ3);'), (3, 1, u'+    assert(s->last_picture_ptr == NULL || s->out_format != FMT_H264 ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    assert(s->pict_type == FF_I_TYPE || (s->last_picture_ptr && s->last_picture_ptr->data[0]));'), (18, 1, u'+    assert(s->pict_type == AV_PICTURE_TYPE_I || (s->last_picture_ptr &&')]
===========================================
===========================================
Total add: 22
Total del: 10
Header: MPV_frame_start
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    assert(s->pict_type == FF_I_TYPE || (s->last_picture_ptr && s->last_picture_ptr->data[0]));'), (18, 1, u'+    assert(s->pict_type == AV_PICTURE_TYPE_I || (s->last_picture_ptr &&')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    assert(s->pict_type == FF_I_TYPE || (s->last_picture_ptr && s->last_picture_ptr->data[0]));'), (18, 1, u'+    assert(s->pict_type == AV_PICTURE_TYPE_I || (s->last_picture_ptr &&')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(i<MAX_PICTURE_COUNT);'), (3, 1, u'+    assert(i < MAX_PICTURE_COUNT);')]
===========================================
===========================================
Total add: 5
Total del: 4
Header: MPV_frame_end
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(i<MAX_PICTURE_COUNT);'), (3, 1, u'+    assert(i < MAX_PICTURE_COUNT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(i<MAX_PICTURE_COUNT);'), (3, 1, u'+    assert(i < MAX_PICTURE_COUNT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    default: assert(0);'), (6, 1, u'+        assert(0);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: MPV_motion_lowres
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    default: assert(0);'), (6, 1, u'+        assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    default: assert(0);'), (6, 1, u'+        assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            assert(age);')]
===========================================
===========================================
Total add: 0
Total del: 3
Header: MPV_decode_mb_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            assert(age);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            assert(age);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->pict_type!=FF_I_TYPE);'), (14, 1, u'+                assert(s->pict_type!=AV_PICTURE_TYPE_I);')]
===========================================
===========================================
Total add: 4
Total del: 12
Header: MPV_decode_mb_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->pict_type!=FF_I_TYPE);'), (14, 1, u'+                assert(s->pict_type!=AV_PICTURE_TYPE_I);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(s->pict_type!=FF_I_TYPE);'), (14, 1, u'+                assert(s->pict_type!=AV_PICTURE_TYPE_I);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    assert(scale>=0 && scale <=3);'), (45, 1, u'+    assert(scale >= 0 && scale <= 3);')]
===========================================
===========================================
Total add: 65
Total del: 52
Header: skip_check
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    assert(scale>=0 && scale <=3);'), (45, 1, u'+    assert(scale >= 0 && scale <= 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    assert(scale>=0 && scale <=3);'), (45, 1, u'+    assert(scale >= 0 && scale <= 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-                        assert(   s->input_picture[0]->type==FF_BUFFER_TYPE_USER'), (58, 1, u'+                        assert(s->input_picture[0]->f.type == FF_BUFFER_TYPE_USER ||')]
===========================================
===========================================
Total add: 31
Total del: 24
Header: estimate_best_b_count
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-                        assert(   s->input_picture[0]->type==FF_BUFFER_TYPE_USER'), (58, 1, u'+                        assert(s->input_picture[0]->f.type == FF_BUFFER_TYPE_USER ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-                        assert(   s->input_picture[0]->type==FF_BUFFER_TYPE_USER'), (58, 1, u'+                        assert(s->input_picture[0]->f.type == FF_BUFFER_TYPE_USER ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-            assert(   s->reordered_input_picture[0]->type==FF_BUFFER_TYPE_USER'), (26, 1, u'+            assert(s->reordered_input_picture[0]->f.type ==')]
===========================================
===========================================
Total add: 17
Total del: 13
Header: no_output_pic:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-            assert(   s->reordered_input_picture[0]->type==FF_BUFFER_TYPE_USER'), (26, 1, u'+            assert(s->reordered_input_picture[0]->f.type ==')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-            assert(   s->reordered_input_picture[0]->type==FF_BUFFER_TYPE_USER'), (26, 1, u'+            assert(s->reordered_input_picture[0]->f.type ==')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-            assert(avctx->header_bits + avctx->mv_bits + avctx->misc_bits + avctx->i_tex_bits + avctx->p_tex_bits == put_bits_count(&s->pb));'), (17, 1, u'+            assert(avctx->header_bits + avctx->mv_bits + avctx->misc_bits +')]
===========================================
===========================================
Total add: 8
Total del: 6
Header: vbv_retry:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-            assert(avctx->header_bits + avctx->mv_bits + avctx->misc_bits + avctx->i_tex_bits + avctx->p_tex_bits == put_bits_count(&s->pb));'), (17, 1, u'+            assert(avctx->header_bits + avctx->mv_bits + avctx->misc_bits +')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-            assert(avctx->header_bits + avctx->mv_bits + avctx->misc_bits + avctx->i_tex_bits + avctx->p_tex_bits == put_bits_count(&s->pb));'), (17, 1, u'+            assert(avctx->header_bits + avctx->mv_bits + avctx->misc_bits +')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-            assert(s->repeat_first_field==0);'), (26, 1, u'+            assert(s->repeat_first_field == 0);')]
===========================================
===========================================
Total add: 18
Total del: 11
Header: vbv_retry:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-            assert(s->repeat_first_field==0);'), (26, 1, u'+            assert(s->repeat_first_field == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-            assert(s->repeat_first_field==0);'), (26, 1, u'+            assert(s->repeat_first_field == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-    assert((s->frame_bits&7)==0);'), (21, 1, u'+    assert((s->frame_bits & 7) == 0);')]
===========================================
===========================================
Total add: 40
Total del: 35
Header: vbv_retry:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-    assert((s->frame_bits&7)==0);'), (21, 1, u'+    assert((s->frame_bits & 7) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-    assert((s->frame_bits&7)==0);'), (21, 1, u'+    assert((s->frame_bits & 7) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->out_format!=FMT_MJPEG || s->qscale==8);'), (3, 1, u'+    assert(s->out_format != FMT_MJPEG || s->qscale == 8);')]
===========================================
===========================================
Total add: 19
Total del: 14
Header: encode_mb_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->out_format!=FMT_MJPEG || s->qscale==8);'), (3, 1, u'+    assert(s->out_format != FMT_MJPEG || s->qscale == 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->out_format!=FMT_MJPEG || s->qscale==8);'), (3, 1, u'+    assert(s->out_format != FMT_MJPEG || s->qscale == 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->current_picture_ptr->pts != AV_NOPTS_VALUE);'), (4, 1, u'+    assert(s->current_picture_ptr->f.pts != AV_NOPTS_VALUE);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: estimate_qp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->current_picture_ptr->pts != AV_NOPTS_VALUE);'), (4, 1, u'+    assert(s->current_picture_ptr->f.pts != AV_NOPTS_VALUE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->current_picture_ptr->pts != AV_NOPTS_VALUE);'), (4, 1, u'+    assert(s->current_picture_ptr->f.pts != AV_NOPTS_VALUE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            av_assert0(ret >= 0);')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: avcodec_get_context_defaults3
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            av_assert0(ret >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            av_assert0(ret >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type != FF_B_TYPE || !s->low_delay);'), (3, 1, u'+    assert(s->pict_type != AV_PICTURE_TYPE_B || !s->low_delay);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: av_log
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type != FF_B_TYPE || !s->low_delay);'), (3, 1, u'+    assert(s->pict_type != AV_PICTURE_TYPE_B || !s->low_delay);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->pict_type != FF_B_TYPE || !s->low_delay);'), (3, 1, u'+    assert(s->pict_type != AV_PICTURE_TYPE_B || !s->low_delay);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(557, 2, u'-    assert(v>=0);'), (558, 2, u'-    assert(log2>=-4);'), (578, 2, u'-    assert(log2>=-4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-    assert(!ref_index);')]
===========================================
===========================================
Total add: 5
Total del: 127
Header: alloc_blocks
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-    assert(!ref_index);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-    assert(!ref_index);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(h==b_w);\\')]
===========================================
===========================================
Total add: 3
Total del: 18
Header: mc_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(h==b_w);\\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(h==b_w);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+    assert(h==b_w);\\'), (90, 2, u'-    assert(src_stride > 2*MB_SIZE + 5);')]
===========================================
===========================================
Total add: 27
Total del: 485
Header: pred_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+    assert(h==b_w);\\'), (90, 2, u'-    assert(src_stride > 2*MB_SIZE + 5);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+    assert(h==b_w);\\'), (90, 2, u'-    assert(src_stride > 2*MB_SIZE + 5);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 2, u'-            assert(sx>=0 && sy>=0 && sx < score_stride);'), (30, 2, u'-            assert(score[sx + sy*score_stride] >= 0);'), (67, 2, u'-            assert(src == b->buf); // code does not depend on this but it is true currently')]
===========================================
===========================================
Total add: 0
Total del: 117
Header: common_init_after_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 2, u'-            assert(sx>=0 && sy>=0 && sx < score_stride);'), (30, 2, u'-            assert(score[sx + sy*score_stride] >= 0);'), (67, 2, u'-            assert(src == b->buf); // code does not depend on this but it is true currently')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 2, u'-            assert(sx>=0 && sy>=0 && sx < score_stride);'), (30, 2, u'-            assert(score[sx + sy*score_stride] >= 0);'), (67, 2, u'-            assert(src == b->buf); // code does not depend on this but it is true currently')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!(s->avctx->flags & CODEC_FLAG_EMU_EDGE));')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: halfpel_interpol
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!(s->avctx->flags & CODEC_FLAG_EMU_EDGE));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!(s->avctx->flags & CODEC_FLAG_EMU_EDGE));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(s->codec_type == AVMEDIA_TYPE_VIDEO);'), (7, 2, u'-    assert(s->internal_buffer_count);'), (8, 1, u'+    assert(avci->buffer_count);'), (17, 1, u'+        assert(i < avci->buffer_count);'), (29, 2, u'-    assert(i < s->internal_buffer_count);')]
===========================================
===========================================
Total add: 18
Total del: 12
Header: avcodec_default_release_buffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(s->codec_type == AVMEDIA_TYPE_VIDEO);'), (7, 2, u'-    assert(s->internal_buffer_count);'), (8, 1, u'+    assert(avci->buffer_count);'), (17, 1, u'+        assert(i < avci->buffer_count);'), (29, 2, u'-    assert(i < s->internal_buffer_count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(s->codec_type == AVMEDIA_TYPE_VIDEO);'), (7, 2, u'-    assert(s->internal_buffer_count);'), (8, 1, u'+    assert(avci->buffer_count);'), (17, 1, u'+        assert(i < avci->buffer_count);'), (29, 2, u'-    assert(i < s->internal_buffer_count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(s->codec_type == AVMEDIA_TYPE_VIDEO);')]
===========================================
===========================================
Total add: 10
Total del: 0
Header: avcodec_default_reget_buffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(s->codec_type == AVMEDIA_TYPE_VIDEO);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(s->codec_type == AVMEDIA_TYPE_VIDEO);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 1, u'+                av_assert0(av_get_bits_per_sample(avctx->codec_id) != 0);')]
===========================================
===========================================
Total add: 210
Total del: 10
Header: free_and_end:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 1, u'+                av_assert0(av_get_bits_per_sample(avctx->codec_id) != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 1, u'+                av_assert0(av_get_bits_per_sample(avctx->codec_id) != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(CODEC_ID_V410==164);'), (3, 1, u'+    av_assert0(CODEC_ID_PCM_S8_PLANAR==65563);'), (4, 1, u'+    av_assert0(CODEC_ID_ADPCM_G722==69660);'), (5, 1, u'+    av_assert0(CODEC_ID_BMV_AUDIO==86071);'), (6, 1, u'+    av_assert0(CODEC_ID_SRT==94216);'), (7, 1, u'+    av_assert0(LIBAVCODEC_VERSION_MICRO >= 100);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: avcodec_version
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(CODEC_ID_V410==164);'), (3, 1, u'+    av_assert0(CODEC_ID_PCM_S8_PLANAR==65563);'), (4, 1, u'+    av_assert0(CODEC_ID_ADPCM_G722==69660);'), (5, 1, u'+    av_assert0(CODEC_ID_BMV_AUDIO==86071);'), (6, 1, u'+    av_assert0(CODEC_ID_SRT==94216);'), (7, 1, u'+    av_assert0(LIBAVCODEC_VERSION_MICRO >= 100);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(CODEC_ID_V410==164);'), (3, 1, u'+    av_assert0(CODEC_ID_PCM_S8_PLANAR==65563);'), (4, 1, u'+    av_assert0(CODEC_ID_ADPCM_G722==69660);'), (5, 1, u'+    av_assert0(CODEC_ID_BMV_AUDIO==86071);'), (6, 1, u'+    av_assert0(CODEC_ID_SRT==94216);'), (7, 1, u'+    av_assert0(LIBAVCODEC_VERSION_MICRO >= 100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(s->current_picture.pict_type == s->current_picture_ptr->pict_type);'), (3, 2, u'-assert(s->current_picture.pict_type == s->pict_type);')]
===========================================
===========================================
Total add: 31
Total del: 30
Header: vc1_decode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(s->current_picture.pict_type == s->current_picture_ptr->pict_type);'), (3, 2, u'-assert(s->current_picture.pict_type == s->pict_type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(s->current_picture.pict_type == s->current_picture_ptr->pict_type);'), (3, 2, u'-assert(s->current_picture.pict_type == s->pict_type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    assert(x<8 && y<8 && x>=0 && y>=0);'), (34, 1, u'+    assert(x<8 && y<8 && x>=0 && y>=0);'), (55, 1, u'+    assert(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
Total add: 130
Total del: 1
Header: PUT_VC1_MSPEL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    assert(x<8 && y<8 && x>=0 && y>=0);'), (34, 1, u'+    assert(x<8 && y<8 && x>=0 && y>=0);'), (55, 1, u'+    assert(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    assert(x<8 && y<8 && x>=0 && y>=0);'), (34, 1, u'+    assert(x<8 && y<8 && x>=0 && y>=0);'), (55, 1, u'+    assert(x<8 && y<8 && x>=0 && y>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(101, 2, u'-    assert(s == c->avctx);'), (137, 2, u'-    assert(!s->thread_opaque);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(618, 1, u'+        assert(cbits == my_log2(s->mclms_scaling + 1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(LIBAVDEVICE_VERSION_MICRO >= 100);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: avdevice_version
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(LIBAVDEVICE_VERSION_MICRO >= 100);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(LIBAVDEVICE_VERSION_MICRO >= 100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert (buf.index < s->buffers);'), (3, 1, u'+    assert(buf.index < s->buffers);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: mmap_read_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert (buf.index < s->buffers);'), (3, 1, u'+    assert(buf.index < s->buffers);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert (buf.index < s->buffers);'), (3, 1, u'+    assert(buf.index < s->buffers);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(LIBAVFILTER_VERSION_MICRO >= 100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    av_assert0(ref->buf->refcount > 0);')]
===========================================
===========================================
Total add: 9
Total del: 3
Header: avfilter_unref_buffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    av_assert0(ref->buf->refcount > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    av_assert0(ref->buf->refcount > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+    av_assert0(nb_channels <= 8);')]
===========================================
===========================================
Total add: 23
Total del: 69
Header: *avfilter_default_get_video_buffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+    av_assert0(nb_channels <= 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+    av_assert0(nb_channels <= 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(271, 1, u'+    assert(mpi->flags&MP_IMGFLAG_PLANAR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 1, u'+        assert(0);'), (251, 1, u'+    assert(mpi->flags&MP_IMGFLAG_PLANAR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+        assert(0);'), (195, 1, u'+    assert(mpi->flags&MP_IMGFLAG_PLANAR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 1, u'+        assert(mpi->flags&MP_IMGFLAG_PLANAR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(238, 1, u'+            assert(avctx_enc->codec);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+        av_assert0(y%(2<<scale->vsub) == 0);')]
===========================================
===========================================
Total add: 7
Total del: 10
Header: draw_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+        av_assert0(y%(2<<scale->vsub) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+        av_assert0(y%(2<<scale->vsub) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(yadif->next);'), (3, 1, u'+    assert(yadif->next || !val);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: poll_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(yadif->next);'), (3, 1, u'+    assert(yadif->next || !val);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(yadif->next);'), (3, 1, u'+    assert(yadif->next || !val);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-            assert(sps);'), (27, 2, u'-            assert(pps);')]
===========================================
===========================================
Total add: 27
Total del: 23
Header: ff_isom_write_avcc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-            assert(sps);'), (27, 2, u'-            assert(pps);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-            assert(sps);'), (27, 2, u'-            assert(pps);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!url_is_streamed(pb));'), (3, 1, u'+    assert(pb->seekable);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: avi_write_ix
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!url_is_streamed(pb));'), (3, 1, u'+    assert(pb->seekable);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!url_is_streamed(pb));'), (3, 1, u'+    assert(pb->seekable);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-    assert(flags == URL_WRONLY || flags == URL_RDONLY);'), (15, 1, u'+    assert(flags == AVIO_FLAG_WRITE || flags == AVIO_FLAG_READ);')]
===========================================
===========================================
Total add: 3
Total del: 12
Header: url_setbufsize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-    assert(flags == URL_WRONLY || flags == URL_RDONLY);'), (15, 1, u'+    assert(flags == AVIO_FLAG_WRITE || flags == AVIO_FLAG_READ);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-    assert(flags == URL_WRONLY || flags == URL_RDONLY);'), (15, 1, u'+    assert(flags == AVIO_FLAG_WRITE || flags == AVIO_FLAG_READ);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(ipcm<4);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: dv_extract_audio
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(ipcm<4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert0(ipcm<4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                av_assert0(ipcm<4);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: dv_extract_audio
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                av_assert0(ipcm<4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                av_assert0(ipcm<4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(enc->codec_type == AVMEDIA_TYPE_AUDIO);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: flv_write_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(enc->codec_type == AVMEDIA_TYPE_AUDIO);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(enc->codec_type == AVMEDIA_TYPE_AUDIO);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        assert(enc->codec_type == AVMEDIA_TYPE_DATA);')]
===========================================
===========================================
Total add: 8
Total del: 2
Header: flv_write_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        assert(enc->codec_type == AVMEDIA_TYPE_DATA);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        assert(enc->codec_type == AVMEDIA_TYPE_DATA);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(84, 1, u'+    assert(i <= seekhead_list->nb_elem);')]
===========================================
===========================================
Total add: 45
Total del: 31
Header: matroska_execute_seekhead
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(84, 1, u'+    assert(i <= seekhead_list->nb_elem);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(84, 1, u'+    assert(i <= seekhead_list->nb_elem);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        av_assert0(!ts_st->payload_size);')]
===========================================
===========================================
Total add: 10
Total del: 2
Header: mpegts_write_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        av_assert0(!ts_st->payload_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        av_assert0(!ts_st->payload_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(!(url_ftell(s->pb) & (KAG_SIZE-1)));'), (5, 1, u'+        assert(!(avio_tell(s->pb) & (KAG_SIZE-1)));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: mxf_write_klv_fill
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(!(url_ftell(s->pb) & (KAG_SIZE-1)));'), (5, 1, u'+        assert(!(avio_tell(s->pb) & (KAG_SIZE-1)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(!(url_ftell(s->pb) & (KAG_SIZE-1)));'), (5, 1, u'+        assert(!(avio_tell(s->pb) & (KAG_SIZE-1)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(!(url_ftell(s->pb) & (KAG_SIZE-1)));'), (5, 1, u'+        assert(!(avio_tell(s->pb) & (KAG_SIZE-1)));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: mxf_write_d10_video_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(!(url_ftell(s->pb) & (KAG_SIZE-1)));'), (5, 1, u'+        assert(!(avio_tell(s->pb) & (KAG_SIZE-1)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(!(url_ftell(s->pb) & (KAG_SIZE-1)));'), (5, 1, u'+        assert(!(avio_tell(s->pb) & (KAG_SIZE-1)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(LIBAVFORMAT_VERSION_MICRO >= 100);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: avformat_version
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(LIBAVFORMAT_VERSION_MICRO >= 100);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(LIBAVFORMAT_VERSION_MICRO >= 100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 2, u'-            assert(!s->packet_buffer);')]
===========================================
===========================================
Total add: 15
Total del: 24
Header: av_read_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 2, u'-            assert(!s->packet_buffer);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 2, u'-            assert(!s->packet_buffer);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-            assert(s->chapters[i]->start <= s->chapters[i+1]->start);'), (10, 2, u'-            assert(!av_cmp_q(s->chapters[i]->time_base, s->chapters[i+1]->time_base));'), (26, 2, u'-        assert(s->start_time != AV_NOPTS_VALUE);'), (27, 2, u'-        assert(s->duration > 0);')]
===========================================
===========================================
Total add: 14
Total del: 13
Header: compute_chapters_end
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-            assert(s->chapters[i]->start <= s->chapters[i+1]->start);'), (10, 2, u'-            assert(!av_cmp_q(s->chapters[i]->time_base, s->chapters[i+1]->time_base));'), (26, 2, u'-        assert(s->start_time != AV_NOPTS_VALUE);'), (27, 2, u'-        assert(s->duration > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-            assert(s->chapters[i]->start <= s->chapters[i+1]->start);'), (10, 2, u'-            assert(!av_cmp_q(s->chapters[i]->time_base, s->chapters[i+1]->time_base));'), (26, 2, u'-        assert(s->start_time != AV_NOPTS_VALUE);'), (27, 2, u'-        assert(s->duration > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!st->codec->codec);')]
===========================================
===========================================
Total add: 5
Total del: 8
Header: av_find_stream_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!st->codec->codec);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!st->codec->codec);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(PIX_FMT_VDA_VLD == 81); //check if the pix fmt enum has not had anything inserted or removed by mistake'), (3, 1, u'+    av_assert0(AV_SAMPLE_FMT_DBLP == 9);'), (4, 1, u'+    av_assert0(AVMEDIA_TYPE_ATTACHMENT == 4);'), (5, 1, u'+    av_assert0(AV_PICTURE_TYPE_BI == 7);'), (6, 1, u'+    av_assert0(LIBAVUTIL_VERSION_MICRO >= 100);')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: avutil_version
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(PIX_FMT_VDA_VLD == 81); //check if the pix fmt enum has not had anything inserted or removed by mistake'), (3, 1, u'+    av_assert0(AV_SAMPLE_FMT_DBLP == 9);'), (4, 1, u'+    av_assert0(AVMEDIA_TYPE_ATTACHMENT == 4);'), (5, 1, u'+    av_assert0(AV_PICTURE_TYPE_BI == 7);'), (6, 1, u'+    av_assert0(LIBAVUTIL_VERSION_MICRO >= 100);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(PIX_FMT_VDA_VLD == 81); //check if the pix fmt enum has not had anything inserted or removed by mistake'), (3, 1, u'+    av_assert0(AV_SAMPLE_FMT_DBLP == 9);'), (4, 1, u'+    av_assert0(AVMEDIA_TYPE_ATTACHMENT == 4);'), (5, 1, u'+    av_assert0(AV_PICTURE_TYPE_BI == 7);'), (6, 1, u'+    av_assert0(LIBAVUTIL_VERSION_MICRO >= 100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(LIBPOSTPROC_VERSION_MICRO >= 100);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: postproc_version
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(LIBPOSTPROC_VERSION_MICRO >= 100);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(LIBPOSTPROC_VERSION_MICRO >= 100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(116, 1, u'+            av_assert0(0);'), (125, 1, u'+            av_assert0(0);'), (141, 1, u'+            av_assert0(0);'), (162, 1, u'+            av_assert0(0);'), (179, 1, u'+            av_assert0(0);'), (190, 1, u'+            av_assert0(0);'), (245, 1, u'+    av_assert0(out->ch_count == av_get_channel_layout_nb_channels(s->out_ch_layout));'), (246, 1, u'+    av_assert0(in ->ch_count == av_get_channel_layout_nb_channels(s-> in_ch_layout));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(341, 1, u'+        assert(compensation_distance > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+#define ASSERT_LEVEL 2'), (47, 1, u'+    default: av_assert0(0);'), (66, 1, u'+    default: av_assert2(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(123, 1, u'+    av_assert0(output_bits == 16);'), (143, 1, u'+    av_assert0(output_bits == 16);')]
===========================================
===========================================
Total add: 160
Total del: 44
Header: DECLARE_ALIGNED
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(123, 1, u'+    av_assert0(output_bits == 16);'), (143, 1, u'+    av_assert0(output_bits == 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(123, 1, u'+    av_assert0(output_bits == 16);'), (143, 1, u'+    av_assert0(output_bits == 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    assert(src1==src2);')]
===========================================
===========================================
Total add: 20
Total del: 10
Header: rgb48ToY
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    assert(src1==src2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    assert(src1==src2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    assert(src1==src2);')]
===========================================
===========================================
Total add: 17
Total del: 10
Header: rgb48ToUV
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    assert(src1==src2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    assert(src1==src2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-    assert(src1 == src2);')]
===========================================
===========================================
Total add: 17
Total del: 17
Header: palToY
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-    assert(src1 == src2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-    assert(src1 == src2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(LIBSWSCALE_VERSION_MICRO >= 100);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: swscale_version
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(LIBSWSCALE_VERSION_MICRO >= 100);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    av_assert0(LIBSWSCALE_VERSION_MICRO >= 100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(2*VOFW == VOF);'), (7, 1, u'+            av_assert0(c->dstBpc > 10);')]
===========================================
===========================================
Total add: 8
Total del: 3
Header: sws_init_context
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(2*VOFW == VOF);'), (7, 1, u'+            av_assert0(c->dstBpc > 10);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(2*VOFW == VOF);'), (7, 1, u'+            av_assert0(c->dstBpc > 10);')]
===========================================
Class: class CUrlOptions   : public map<CStdString, CStdString> { 
Class: class CUrlOptions   : public map<CStdString, CStdString> { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(addon.get());')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: CAddonInstaller::CheckDependencies
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(addon.get());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(addon.get());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert((start_code & 0xffffff00) == 0x00000100);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: vaapi_mpeg2_decode_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert((start_code & 0xffffff00) == 0x00000100);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert((start_code & 0xffffff00) == 0x00000100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(ref->magic == ALLOC_MAGIC);'), (4, 1, u'+\t  assert(ref->magic == ALLOC_MAGIC);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ref_realloc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(ref->magic == ALLOC_MAGIC);'), (4, 1, u'+\t  assert(ref->magic == ALLOC_MAGIC);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(ref->magic == ALLOC_MAGIC);'), (4, 1, u'+\t  assert(ref->magic == ALLOC_MAGIC);')]
===========================================
Class:class DllLibCECInterface { 
Class: class DllLibCEC : public DllDynamic, DllLibCECInterface { 
Class: class DllLibblurayInterface { 
Class: class DllLibbluray : public DllDynamic, DllLibblurayInterface { 
Class: template <class T> class MiniScopedArray { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(format == desc.Format);'), (3, 1, u'+  ASSERT(format == desc.Format || (format == D3DFMT_A8 && desc.Format == D3DFMT_A8R8G8B8));'), (12, 1, u'+    ASSERT(0);')]
===========================================
===========================================
Total add: 10
Total del: 1
Header: LoadTexture
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(format == desc.Format);'), (3, 1, u'+  ASSERT(format == desc.Format || (format == D3DFMT_A8 && desc.Format == D3DFMT_A8R8G8B8));'), (12, 1, u'+    ASSERT(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(format == desc.Format);'), (3, 1, u'+  ASSERT(format == desc.Format || (format == D3DFMT_A8 && desc.Format == D3DFMT_A8R8G8B8));'), (12, 1, u'+    ASSERT(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u"-  assert(strTest[0] != '!'); // should not occur anymore")]
===========================================
===========================================
Total add: 44
Total del: 3
Header: CGUIInfoManager::TranslateSingleString
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u"-  assert(strTest[0] != '!'); // should not occur anymore")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u"-  assert(strTest[0] != '!'); // should not occur anymore")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u"+  assert(strTest[0] != '!'); // should not occur anymore")]
===========================================
===========================================
Total add: 2
Total del: 3
Header: CGUIInfoManager::TranslateSingleString
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u"+  assert(strTest[0] != '!'); // should not occur anymore")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u"+  assert(strTest[0] != '!'); // should not occur anymore")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(value > 0);'), (3, 1, u'+  assert(value >= 1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CTimeSmoother::GetConvergent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(value > 0);'), (3, 1, u'+  assert(value >= 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(value > 0);'), (3, 1, u'+  assert(value >= 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(num > 0 && denom > 0);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: CTimeSmoother::GetConvergent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(num > 0 && denom > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(num > 0 && denom > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        XBMC_ASSERT_ZERO(pthread_mutexattr_init(&recursiveAttr));'), (3, 2, u'-        XBMC_ASSERT_ZERO(pthread_mutexattr_settype(&recursiveAttr,PTHREAD_MUTEX_RECURSIVE));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: namespace XbmcThreads
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        XBMC_ASSERT_ZERO(pthread_mutexattr_init(&recursiveAttr));'), (3, 2, u'-        XBMC_ASSERT_ZERO(pthread_mutexattr_settype(&recursiveAttr,PTHREAD_MUTEX_RECURSIVE));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        XBMC_ASSERT_ZERO(pthread_mutexattr_init(&recursiveAttr));'), (3, 2, u'-        XBMC_ASSERT_ZERO(pthread_mutexattr_settype(&recursiveAttr,PTHREAD_MUTEX_RECURSIVE));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(pthread_mutexattr_result == 0);'), (5, 2, u'-        assert(pthread_mutexattr_result == 0);'), (6, 1, u'+        XBMC_ASSERT_ZERO(pthread_mutexattr_init(&recursiveAttr));'), (7, 1, u'+        XBMC_ASSERT_ZERO(pthread_mutexattr_settype(&recursiveAttr,PTHREAD_MUTEX_RECURSIVE));')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: namespace XbmcThreads
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(pthread_mutexattr_result == 0);'), (5, 2, u'-        assert(pthread_mutexattr_result == 0);'), (6, 1, u'+        XBMC_ASSERT_ZERO(pthread_mutexattr_init(&recursiveAttr));'), (7, 1, u'+        XBMC_ASSERT_ZERO(pthread_mutexattr_settype(&recursiveAttr,PTHREAD_MUTEX_RECURSIVE));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(pthread_mutexattr_result == 0);'), (5, 2, u'-        assert(pthread_mutexattr_result == 0);'), (6, 1, u'+        XBMC_ASSERT_ZERO(pthread_mutexattr_init(&recursiveAttr));'), (7, 1, u'+        XBMC_ASSERT_ZERO(pthread_mutexattr_settype(&recursiveAttr,PTHREAD_MUTEX_RECURSIVE));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(pthread_mutexattr_init(&recursiveAttr) == 0);'), (3, 2, u'-        assert (pthread_mutexattr_settype(&recursiveAttr,PTHREAD_MUTEX_RECURSIVE) == 0);'), (5, 1, u'+        assert(pthread_mutexattr_result == 0);'), (7, 1, u'+        assert(pthread_mutexattr_result == 0);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: namespace XbmcThreads
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(pthread_mutexattr_init(&recursiveAttr) == 0);'), (3, 2, u'-        assert (pthread_mutexattr_settype(&recursiveAttr,PTHREAD_MUTEX_RECURSIVE) == 0);'), (5, 1, u'+        assert(pthread_mutexattr_result == 0);'), (7, 1, u'+        assert(pthread_mutexattr_result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(pthread_mutexattr_init(&recursiveAttr) == 0);'), (3, 2, u'-        assert (pthread_mutexattr_settype(&recursiveAttr,PTHREAD_MUTEX_RECURSIVE) == 0);'), (5, 1, u'+        assert(pthread_mutexattr_result == 0);'), (7, 1, u'+        assert(pthread_mutexattr_result == 0);')]
===========================================
Class:class AtomicGuard { 
Class: class AtomicGuard { 
Class:class AtomicGuard { 
Class: class AtomicGuard { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+        assert(pthread_mutexattr_init(&recursiveAttr) == 0);'), (41, 1, u'+        assert (pthread_mutexattr_settype(&recursiveAttr,PTHREAD_MUTEX_RECURSIVE) == 0);')]
===========================================
Class: class Thinggy { 
Class:class Runnable { 
Class: class GlobalThreadLocal : public Runnable { 
Class: class StackThreadLocal : public Runnable { 
Class: class HeapThreadLocal : public Runnable { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(URIUtils::HasSlashAtEnd(strPath));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: CMusicDatabase::AddPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(URIUtils::HasSlashAtEnd(strPath));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(URIUtils::HasSlashAtEnd(strPath));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    ASSERT(URIUtils::HasSlashAtEnd(strPath));')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: CMusicDatabase::IncrTop100CounterByFileName
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    ASSERT(URIUtils::HasSlashAtEnd(strPath));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    ASSERT(URIUtils::HasSlashAtEnd(strPath));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_references == 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: CProcessor::~CProcessor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_references == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(m_references == 0);')]
===========================================
Class: class mass_waiter { 
Class: class poll_mass_waiter { 
Class:class CountGuard { 
Class:class CountGuard { 
Class:     class waiter { 
Class: class timed_waiter { 
Class: class group_wait { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    ASSERT(sce.FAborted());  // the only kind we should get')]
===========================================
===========================================
Total add: 19
Total del: 0
Header: CScraper::Run
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    ASSERT(sce.FAborted());  // the only kind we should get')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    ASSERT(sce.FAborted());  // the only kind we should get')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(g_application.IsCurrentThread());')]
===========================================
===========================================
Total add: 14
Total del: 3
Header: CGUIWindowManager::Process
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(g_application.IsCurrentThread());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(g_application.IsCurrentThread());')]
===========================================
Class:class CWriteRate { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(380, 2, u'-   assert( collectComments_ );'), (383, 2, u'-      assert( lastValue_ != 0 );'), (574, 2, u'-   assert( lastDigitThreshold >=0  &&  lastDigitThreshold <= 9 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-#define JSON_ASSERT_UNREACHABLE assert( false )'), (22, 2, u'-#define JSON_ASSERT( condition ) assert( condition );  // @todo <= change this into an exception throw'), (23, 2, u'-#define JSON_ASSERT_MESSAGE( condition, message ) if (!( condition )) throw std::runtime_error( message );'), (115, 2, u'-   JSON_ASSERT( text );'), (116, 2, u'-   JSON_ASSERT_MESSAGE( text[0]==\'\\0\' || text[0]==\'/\', "Comments must start with /");'), (267, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (441, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (484, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (587, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (649, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (663, 2, u'-   JSON_ASSERT( type_ == stringValue );'), (684, 2, u'-      JSON_ASSERT_MESSAGE( false, "Type is not convertible to string" );'), (686, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (708, 2, u'-      JSON_ASSERT_MESSAGE( value_.int_ >= minInt  &&  value_.int_ <= maxInt, "unsigned integer out of signed int range" );'), (711, 2, u'-      JSON_ASSERT_MESSAGE( value_.uint_ <= UInt(maxInt), "unsigned integer out of signed int range" );'), (714, 2, u'-      JSON_ASSERT_MESSAGE( value_.real_ >= minInt  &&  value_.real_ <= maxInt, "Real out of signed integer range" );'), (721, 2, u'-      JSON_ASSERT_MESSAGE( false, "Type is not convertible to int" );'), (723, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (737, 2, u'-      JSON_ASSERT_MESSAGE( value_.int_ >= 0, "Negative integer can not be converted to unsigned integer" );'), (738, 2, u'-      JSON_ASSERT_MESSAGE( value_.int_ <= maxUInt, "signed integer out of UInt range" );'), (741, 2, u'-      JSON_ASSERT_MESSAGE( value_.uint_ <= maxUInt, "unsigned integer out of UInt range" );'), (744, 2, u'-      JSON_ASSERT_MESSAGE( value_.real_ >= 0  &&  value_.real_ <= maxUInt,  "Real out of unsigned integer range" );'), (751, 2, u'-      JSON_ASSERT_MESSAGE( false, "Type is not convertible to uint" );'), (753, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (771, 2, u'-      JSON_ASSERT_MESSAGE( value_.uint_ <= UInt64(maxInt64), "unsigned integer out of Int64 range" );'), (774, 2, u'-      JSON_ASSERT_MESSAGE( value_.real_ >= minInt64  &&  value_.real_ <= maxInt64, "Real out of Int64 range" );'), (781, 2, u'-      JSON_ASSERT_MESSAGE( false, "Type is not convertible to Int64" );'), (783, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (797, 2, u'-      JSON_ASSERT_MESSAGE( value_.int_ >= 0, "Negative integer can not be converted to UInt64" );'), (802, 2, u'-      JSON_ASSERT_MESSAGE( value_.real_ >= 0  &&  value_.real_ <= maxUInt64,  "Real out of UInt64 range" );'), (809, 2, u'-      JSON_ASSERT_MESSAGE( false, "Type is not convertible to UInt64" );'), (811, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (862, 2, u'-      JSON_ASSERT_MESSAGE( false, "Type is not convertible to double" );'), (864, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (891, 2, u'-      JSON_ASSERT_MESSAGE( false, "Type is not convertible to float" );'), (893, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (918, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (969, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (1006, 2, u'-      JSON_ASSERT_UNREACHABLE;'), (1032, 2, u'-   JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue  || type_ == objectValue );'), (1057, 2, u'-   JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue );'), (1072, 2, u'-      assert( size() == newSize );'), (1083, 2, u'-   JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue );'), (1104, 2, u'-   JSON_ASSERT( index >= 0 );'), (1112, 2, u'-   JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue );'), (1131, 2, u'-   JSON_ASSERT( index >= 0 );'), (1147, 2, u'-   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );'), (1187, 2, u'-   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );'), (1265, 2, u'-   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );'), (1329, 2, u'-   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 2, u'-   assert( current >= buffer );'), (53, 2, u'-   assert( current >= buffer );'), (397, 2, u'-         assert( childValues_.size() == size );'), (485, 2, u'-   assert( int(indentString_.size()) >= indentSize_ );'), (673, 2, u'-         assert( childValues_.size() == size );'), (765, 2, u'-   assert( indentString_.size() >= indentation_.size() );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(168, 2, u'-TestResult::getAssertionNestingLevel() const'), (527, 2, u'-        reportType == _CRT_ASSERT )')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(102, 1, u'+  assert(skip_ != NULL);'), (107, 1, u'+  assert(skip_ != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(342, 1, u'+  assert(vec[0] >= 0);'), (343, 1, u'+  assert(vec[1] >= 0);'), (375, 1, u'+      assert(NULL == "Unexpected return value from pcre_config(NEWLINE)");'), (393, 1, u'+    assert(matchstart >= start);'), (394, 1, u'+    assert(matchend >= matchstart);'), (542, 1, u'+  assert((1 + n) * 3 <= vecsize);  // results + PCRE workspace'), (544, 1, u'+  assert(matches >= 0);  // TryMatch never returns negatives'), (580, 1, u'+  assert(n >= 0);'), (631, 1, u'+  assert(pcre_retval == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(323, 1, u'+    assert(re.error().empty());'), (336, 1, u'+    assert(re.error().empty());'), (343, 1, u'+    assert(re.error().empty());'), (578, 1, u'+                bool assertive = true) {'), (584, 1, u'+                  (assertive? "matches" : "doesn\'t match"),'), (586, 1, u'+  if (assertive) {'), (970, 1, u"+    assert(buf[strlen(buf)-1] != '9');"), (975, 1, u"+    assert(buf[strlen(buf)-1] != '9');"), (993, 1, u"+    assert(buf[strlen(buf)-1] != '9');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(102, 2, u'-  assert(skip_ != NULL);'), (107, 2, u'-  assert(skip_ != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(342, 2, u'-  assert(vec[0] >= 0);'), (343, 2, u'-  assert(vec[1] >= 0);'), (375, 2, u'-      assert(NULL == "Unexpected return value from pcre_config(NEWLINE)");'), (393, 2, u'-    assert(matchstart >= start);'), (394, 2, u'-    assert(matchend >= matchstart);'), (542, 2, u'-  assert((1 + n) * 3 <= vecsize);  // results + PCRE workspace'), (544, 2, u'-  assert(matches >= 0);  // TryMatch never returns negatives'), (580, 2, u'-  assert(n >= 0);'), (631, 2, u'-  assert(pcre_retval == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(323, 2, u'-    assert(re.error().empty());'), (336, 2, u'-    assert(re.error().empty());'), (343, 2, u'-    assert(re.error().empty());'), (578, 2, u'-                bool assertive = true) {'), (584, 2, u'-                  (assertive? "matches" : "doesn\'t match"),'), (586, 2, u'-  if (assertive) {'), (970, 2, u"-    assert(buf[strlen(buf)-1] != '9');"), (975, 2, u"-    assert(buf[strlen(buf)-1] != '9');"), (993, 2, u"-    assert(buf[strlen(buf)-1] != '9');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 2, u'-#define MoreAssert(x) (true)'), (64, 2, u'-#define MoreAssertQ(x)'), (172, 2, u'-\tMoreAssertQ(fragToFix != nil);'), (173, 2, u'-\tMoreAssertQ(fragToFix->locator.fileSpec != nil);'), (174, 2, u'-\tMoreAssertQ(fragToFix->connID != nil);'), (175, 2, u'-\tMoreAssertQ(fragToFix->loaderSection == nil);'), (176, 2, u'-\tMoreAssertQ(fragToFix->sectionHeaders == nil);'), (177, 2, u'-\tMoreAssertQ(fragToFix->fileRef == 0);'), (271, 2, u'-\tMoreAssertQ(inOpStart != nil);'), (272, 2, u'-\tMoreAssertQ(outCount  != nil);'), (295, 2, u'-\tMoreAssertQ(packedData != nil);'), (296, 2, u'-\tMoreAssertQ(unpackedData != nil);'), (297, 2, u'-\tMoreAssertQ(unpackedSize >= packedSize);'), (303, 2, u'-\tMoreAssertQ( packedSize   == GetPtrSize( (Ptr) packedData  ) );'), (304, 2, u'-\tMoreAssertQ( unpackedSize == GetPtrSize( (Ptr) unpackedData) );'), (310, 2, u'-\t\tMoreAssertQ(unpackCursor < &unpackedData[unpackedSize]);'), (545, 2, u'-\t\tMoreAssertQ( initSection >= 0 );\t\t// Negative indexes are pseudo-sections which are just not allowed!'), (546, 2, u'-\t\tMoreAssertQ( initSection < fragToFix->containerHeader.sectionCount );'), (590, 2, u'-\t\t\tMoreAssertQ(fragToFix->sectionHeaders[initSection].sectionKind == kPEFUnpackedDataSection);'), (614, 2, u'-\t\tMoreAssertQ( MemError() == noErr );'), (618, 2, u'-\t\tMoreAssertQ( MemError() == noErr );'), (635, 2, u'-\tMoreAssertQ(fragToFix != nil);'), (636, 2, u'-\tMoreAssertQ(fragToFix->containerHeader.tag1 == kPEFTag1);'), (663, 2, u'-\tMoreAssertQ(loaderSection != nil);'), (664, 2, u'-\tMoreAssertQ(libraryName != nil);'), (665, 2, u'-\tMoreAssertQ(importLibrary != nil);'), (725, 2, u'-\tMoreAssertQ(lookup != nil);'), (726, 2, u'-\tMoreAssertQ(loaderSection != nil);'), (727, 2, u'-\tMoreAssertQ(symbolIndex < loaderSection->totalImportedSymbolCount);'), (728, 2, u'-\tMoreAssertQ(symbolValue != nil);'), (802, 2, u'-\tMoreAssertQ(fragToFix != nil);'), (803, 2, u'-\tMoreAssertQ(state != nil);'), (821, 2, u'-\tMoreAssertQ(relocHeader->reservedA == 0);\t\t// PEF spec says it must be; we check to try to catch bugs in calculation of relocHeader'), (892, 2, u'-\tMoreAssertQ(fragToFix != nil);'), (893, 2, u'-\tMoreAssertQ(fragToFix->containerHeader.tag1 == kPEFTag1);'), (894, 2, u'-\tMoreAssertQ(fragToFix->sectionHeaders != nil);'), (895, 2, u'-\tMoreAssertQ(fragToFix->loaderSection != nil);'), (896, 2, u'-\tMoreAssertQ(fragToFix->section0Base != nil);\t// Technically, having a nil for these two is not a problem, ...'), (897, 2, u'-\tMoreAssertQ(fragToFix->section1Base != nil);\t// but in practise it a wildly deviant case and we should know about it.'), (898, 2, u'-\tMoreAssertQ(importLibrary != nil);'), (899, 2, u'-\tMoreAssertQ(lookup != nil);'), (915, 2, u'-\tMoreAssertQ(fragToFix->loaderSection->relocSectionCount <= 0x0FFFF);'), (970, 2, u'-\t\t\tMoreAssertQ( state.currentReloc < totalRelocs );'), (1054, 2, u'-\t\t\t\t\t\tMoreAssertQ(state.sectionC != nil);'), (1063, 2, u'-\t\t\t\t\t\tMoreAssertQ(state.sectionD != nil);'), (1147, 2, u'-\t\t\t\t\tMoreAssertQ(false);'), (1176, 2, u'-\tMoreAssertQ(fragToFixLocator != nil);'), (1177, 2, u'-\tMoreAssertQ(fragToFixConnID != nil);'), (1178, 2, u'-\tMoreAssertQ(fragToFixInitRoutine != nil);'), (1179, 2, u'-\tMoreAssertQ(weakLinkedLibraryName != nil);'), (1180, 2, u'-\tMoreAssertQ(lookup != nil);'), (1239, 2, u'-\t\t\tMoreAssertQ(junk == noErr);'), (1243, 2, u'-\t\t\tMoreAssertQ(MemError() == noErr);'), (1247, 2, u'-\t\t\tMoreAssertQ(MemError() == noErr);'), (1262, 2, u'-\tMoreAssertQ(symName != nil);'), (1263, 2, u'-\tMoreAssertQ(symAddr != nil);'), (1264, 2, u'-\tMoreAssertQ(refCon  != nil);'), (1276, 2, u'-\t\t\tMoreAssertQ(false);'), (1291, 2, u'-\tMoreAssertQ(connIDToImport != nil);'), (1305, 2, u'-\tMoreAssertQ(symName != nil);'), (1306, 2, u'-\tMoreAssertQ(symAddr != nil);'), (1307, 2, u'-\tMoreAssertQ(refCon  != nil);'), (1328, 2, u'-\t\tMoreAssertQ(false);'), (1357, 2, u'-\tMoreAssertQ(bundleToImport != nil);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(100, 2, u'-\t\t\tassert(0x88 <= c && c <= 0xfe);'), (101, 2, u'-\t\t\tassert(0x40 <= IN2 && IN2 <= 0xfe);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 2, u'-\t\tassert(modNameSize >= 0); /* else cast to size_t is wrong */')]
===========================================
Class:  class CVaPassNext{ class CVaPassNext
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(465, 2, u'-SQLITE_PRIVATE   int sqlite3Assert(void);'), (466, 2, u'-# define ALWAYS(X)      ((X)?1:sqlite3Assert())'), (467, 2, u'-# define NEVER(X)       ((X)?sqlite3Assert():0)'), (10359, 2, u'-  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (10369, 2, u'-  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (10381, 2, u'-  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (11066, 2, u'-      assert( n>=1 );'), (11659, 2, u'-  assert( rc==SQLITE_OK || pFile->pMethods==0 );'), (11728, 2, u'-  assert( pFile );'), (11769, 2, u'-  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) );'), (11806, 2, u'-  assert(vfsList);'), (12021, 2, u'-  assert( nByte>0 );'), (12041, 2, u'-  assert( pPrior!=0 );'), (12058, 2, u'-  assert( pPrior!=0 && nByte>0 );'), (12269, 2, u'-    assert( mem.nCurrent[i]>=0 );'), (12287, 2, u'-  assert( p->iForeGuard==(int)FOREGUARD );'), (12291, 2, u'-  assert( pInt[nReserve/sizeof(int)]==(int)REARGUARD );'), (12296, 2, u'-  while( nReserve-- > p->iSize ) assert( pU8[nReserve]==0x65 );'), (12317, 2, u'-  assert( (sizeof(struct MemBlockHdr)&7) == 0 );'), (12353, 2, u'-  assert( mem.disallow==0 );'), (12377, 2, u'-      assert(pBt[0]);'), (12405, 2, u'-  assert( sqlite3GlobalConfig.bMemstat || mem.mutex!=0 );'), (12411, 2, u'-    assert( pHdr->pPrev->pNext==pHdr );'), (12414, 2, u'-    assert( mem.pFirst==pHdr );'), (12418, 2, u'-    assert( pHdr->pNext->pPrev==pHdr );'), (12421, 2, u'-    assert( mem.pLast==pHdr );'), (12445, 2, u'-  assert( mem.disallow==0 );'), (12724, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12743, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12744, 2, u'-  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (12745, 2, u'-  assert( i>=1 );'), (12747, 2, u'-  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (12748, 2, u'-  assert( size>=2 );'), (12762, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12777, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12778, 2, u'-  assert( i>=1 );'), (12779, 2, u'-  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (12781, 2, u'-  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (12782, 2, u'-  assert( size>=2 );'), (12812, 2, u'-    assert( sqlite3_mutex_held(mem3.mutex) );'), (12828, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12829, 2, u'-  assert( i>=1 );'), (12830, 2, u'-  assert( mem3.aPool[i-1].u.hdr.size4x/4==nBlock );'), (12831, 2, u'-  assert( mem3.aPool[i+nBlock-1].u.hdr.prevSize==nBlock );'), (12845, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12846, 2, u'-  assert( mem3.szMaster>=nBlock );'), (12858, 2, u'-    assert( newi > mem3.iMaster+1 );'), (12892, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12896, 2, u'-    assert( (size&1)==0 );'), (12899, 2, u'-      assert( i > mem3.aPool[i-1].u.hdr.prevSize );'), (12933, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12934, 2, u'-  assert( sizeof(Mem3Block)==8 );'), (12940, 2, u'-  assert( nBlock>=2 );'), (13014, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (13015, 2, u'-  assert( p>mem3.aPool && p<&mem3.aPool[mem3.nPool] );'), (13017, 2, u'-  assert( (mem3.aPool[i-1].u.hdr.size4x&1)==1 );'), (13019, 2, u'-  assert( i+size<=mem3.nPool+1 );'), (13055, 2, u'-  assert( (pBlock[-1].u.hdr.size4x&1)!=0 );'), (13075, 2, u'-  assert( nBytes>0 );          /* malloc.c filters out 0 byte requests */'), (13086, 2, u'-  assert( pPrior );'), (13133, 2, u'-  assert( sizeof(Mem3Block)==8 );'), (13183, 2, u'-      assert( 0 );'), (13188, 2, u'-      assert( 0 );'), (13193, 2, u'-      assert( 0 );'), (13376, 2, u'-  assert( i>=0 && i<mem5.nBlock );'), (13377, 2, u'-  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (13378, 2, u'-  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (13398, 2, u'-  assert( sqlite3_mutex_held(mem5.mutex) );'), (13399, 2, u'-  assert( i>=0 && i<mem5.nBlock );'), (13400, 2, u'-  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (13401, 2, u'-  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (13406, 2, u'-    assert( x<mem5.nBlock );'), (13436, 2, u'-    assert( i>=0 && i<mem5.nBlock );'), (13450, 2, u'-  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (13452, 2, u'-  assert( iFirst>=0 );'), (13523, 2, u'-  assert( iBlock>=0 && iBlock<mem5.nBlock );'), (13524, 2, u'-  assert( ((u8 *)pOld-mem5.zPool)%mem5.nAtom==0 );'), (13525, 2, u'-  assert( (mem5.aCtrl[iBlock] & CTRL_FREE)==0 );'), (13529, 2, u'-  assert( iBlock+size-1<(u32)mem5.nBlock );'), (13533, 2, u'-  assert( mem5.currentCount>0 );'), (13534, 2, u'-  assert( mem5.currentOut>=(size*mem5.nAtom) );'), (13537, 2, u'-  assert( mem5.currentOut>0 || mem5.currentCount==0 );'), (13538, 2, u'-  assert( mem5.currentCount>0 || mem5.currentOut==0 );'), (13548, 2, u'-    assert( iBuddy>=0 );'), (13584, 2, u'-assert(0);'), (13672, 2, u'-    assert((iOffset+nAlloc)>mem5.nBlock);'), (13798, 2, u'-        assert(pMaster);'), (13800, 2, u'-        assert( sqlite3GlobalConfig.mutex.xMutexAlloc==0'), (14021, 2, u'-      assert( id-2 >= 0 );'), (14022, 2, u'-      assert( id-2 < (int)(sizeof(aStatic)/sizeof(aStatic[0])) );'), (14035, 2, u'-  assert( p->cnt==0 );'), (14036, 2, u'-  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14052, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(p) );'), (14056, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(p) );'), (14068, 2, u'-  assert( debugMutexHeld(p) );'), (14070, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(p) );'), (14231, 2, u'-      assert( iType-2 >= 0 );'), (14232, 2, u'-      assert( iType-2 < sizeof(staticMutexes)/sizeof(staticMutexes[0]) );'), (14248, 2, u'-  assert( p->nRef==0 );'), (14249, 2, u'-  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14270, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || os2MutexNotheld(p) );'), (14282, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || os2MutexNotheld(p) );'), (14306, 2, u'-  assert( p->nRef>0 );'), (14308, 2, u'-  assert( p->owner==tid );'), (14310, 2, u'-  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (14525, 2, u'-      assert( iType-2 >= 0 );'), (14526, 2, u'-      assert( iType-2 < ArraySize(staticMutexes) );'), (14542, 2, u'-  assert( p->nRef==0 );'), (14543, 2, u'-  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14560, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (14579, 2, u'-      assert( p->nRef==0 );'), (14600, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (14619, 2, u'-      assert( p->nRef==0 );'), (14654, 2, u'-  assert( pthreadMutexHeld(p) );'), (14656, 2, u'-  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (14851, 2, u'-      assert( iType-2 >= 0 );'), (14852, 2, u'-      assert( iType-2 < sizeof(staticMutexes)/sizeof(staticMutexes[0]) );'), (14868, 2, u'-  assert( p );'), (14869, 2, u'-  assert( p->nRef==0 );'), (14870, 2, u'-  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14887, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld(p) );'), (14894, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld(p) );'), (14925, 2, u'-  assert( p->nRef>0 );'), (14926, 2, u'-  assert( p->owner==GetCurrentThreadId() );'), (14928, 2, u'-  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (15194, 2, u'-  assert( sqlite3_mutex_held(mem0.mutex) );'), (15275, 2, u'-  assert( n>0 );'), (15282, 2, u'-  assert( scratchAllocOut==0 );'), (15300, 2, u'-      assert(  (((u8*)p - (u8*)0) & 7)==0 );'), (15332, 2, u'-    assert( scratchAllocOut==1 );'), (15353, 2, u'-      assert( i>=0 && i<sqlite3GlobalConfig.nScratch );'), (15355, 2, u'-      assert( mem0.nScratchFree<(u32)sqlite3GlobalConfig.nScratch );'), (15382, 2, u'-  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (15412, 2, u'-  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (15521, 2, u'-  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (15556, 2, u'-  assert( db!=0 );'), (15557, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (15608, 2, u'-  assert( (n&0x7fffffff)==n );'), (15620, 2, u'-  assert( (n&0x7fffffff)==n );'), (15664, 2, u'-  assert( !db || sqlite3_mutex_held(db->mutex) );'), (16219, 2, u'-          assert( precision>0 );'), (16229, 2, u'-          assert( bufpt>buf );'), (16358, 2, u'-        assert( k>=0 && k<pSrc->nSrc );'), (16368, 2, u'-        assert( xtype==etINVALID );'), (16404, 2, u'-  assert( z!=0 || N==0 );'), (16502, 2, u'-  assert( db!=0 );'), (17389, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (17390, 2, u'-  assert( pMem->flags&MEM_Str );'), (17391, 2, u'-  assert( pMem->enc!=desiredEnc );'), (17392, 2, u'-  assert( pMem->enc!=0 );'), (17393, 2, u'-  assert( pMem->n>=0 );'), (17412, 2, u'-      assert( rc==SQLITE_NOMEM );'), (17468, 2, u'-      assert( desiredEnc==SQLITE_UTF16BE );'), (17479, 2, u'-    assert( desiredEnc==SQLITE_UTF8 );'), (17496, 2, u'-  assert( (pMem->n+(desiredEnc==SQLITE_UTF8?1:2))<=len );'), (17529, 2, u'-  assert( pMem->n>=0 );'), (17572, 2, u'-  assert( z<=zTerm );'), (17627, 2, u'-  assert( (m.flags & MEM_Term)!=0 || db->mallocFailed );'), (17628, 2, u'-  assert( (m.flags & MEM_Str)!=0 || db->mallocFailed );'), (17681, 2, u'-    assert( n>0 && n<=4 );'), (17688, 2, u'-    assert( c==t );'), (17689, 2, u'-    assert( (z-zBuf)==n );'), (17696, 2, u'-    assert( n>0 && n<=4 );'), (17700, 2, u'-    assert( c==i );'), (17701, 2, u'-    assert( (z-zBuf)==n );'), (17708, 2, u'-    assert( n>0 && n<=4 );'), (17712, 2, u'-    assert( c==i );'), (17713, 2, u'-    assert( (z-zBuf)==n );'), (17764, 2, u'-SQLITE_PRIVATE int sqlite3Assert(void){'), (17766, 2, u'-  assert( ALWAYS_was_false_or_NEVER_was_true );      /* Always fails */'), (18275, 2, u'-  assert( n<=9 );'), (18544, 2, u'-    assert( n>5 && n<=9 );'), (18586, 2, u"-  assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );"), (18650, 2, u'-    assert( sqlite3_mutex_held(db->mutex) );'), (18669, 2, u'-    assert( sqlite3_mutex_held(db->mutex) );'), (18738, 2, u'-  assert( pNew!=0 );'), (18753, 2, u'-  assert( pH!=0 );'), (18908, 2, u'-    assert( pH->first==0 );'), (18909, 2, u'-    assert( pH->count==0 );'), (18960, 2, u'-  assert( pH!=0 );'), (18974, 2, u'-        assert(nKey==elem->nKey);'), (19008, 2, u'-  assert( pH->htsize>0 );'), (19510, 2, u'-  assert( id!=0 );'), (19542, 2, u'-  assert( id!=0 );'), (19549, 2, u'-  assert( amt>0 );'), (19612, 2, u'-  assert( id!=0 );'), (19695, 2, u'-  assert( pFile!=0 );'), (19709, 2, u'-  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (19710, 2, u'-  assert( locktype!=PENDING_LOCK );'), (19711, 2, u'-  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (19737, 2, u'-    assert( pFile->locktype==NO_LOCK );'), (19748, 2, u'-    assert( pFile->locktype==SHARED_LOCK );'), (19771, 2, u'-    assert( pFile->locktype>=SHARED_LOCK );'), (19824, 2, u'-  assert( pFile!=0 );'), (19876, 2, u'-  assert( pFile!=0 );'), (19877, 2, u'-  assert( locktype<=SHARED_LOCK );'), (20304, 2, u'-      assert( !"Invalid flags argument" );'), (21067, 2, u'-    assert( 0 );'), (21069, 2, u'-  assert( p->l_whence==SEEK_SET );'), (21086, 2, u'-      assert( 0 );'), (21249, 2, u"-  assert( zAbsoluteName[0]=='/' );"), (21288, 2, u'-  assert( pId->nRef>0 );'), (21293, 2, u'-    assert( *pp==pId );'), (21603, 2, u'-        assert( pLock->pPrev->pNext==pLock );'), (21606, 2, u'-        assert( lockList==pLock );'), (21610, 2, u'-        assert( pLock->pNext->pPrev==pLock );'), (21626, 2, u'-        assert( pOpen->pPrev->pNext==pOpen );'), (21629, 2, u'-        assert( openList==pOpen );'), (21633, 2, u'-        assert( pOpen->pNext->pPrev==pOpen );'), (21834, 2, u'-  assert( pFile );'), (21937, 2, u'-  assert( pFile );'), (21954, 2, u'-  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (21955, 2, u'-  assert( locktype!=PENDING_LOCK );'), (21956, 2, u'-  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (21987, 2, u'-    assert( locktype==SHARED_LOCK );'), (21988, 2, u'-    assert( pFile->locktype==0 );'), (21989, 2, u'-    assert( pLock->cnt>0 );'), (22026, 2, u'-    assert( pLock->cnt==0 );'), (22027, 2, u'-    assert( pLock->locktype==0 );'), (22069, 2, u'-    assert( 0!=pFile->locktype );'), (22080, 2, u'-        assert(0);'), (22139, 2, u'-  assert( pFile );'), (22143, 2, u'-  assert( locktype<=SHARED_LOCK );'), (22153, 2, u'-  assert( pLock->cnt!=0 );'), (22155, 2, u'-    assert( pLock->locktype==pFile->locktype );'), (22169, 2, u'-    assert( pFile->inNormalWrite==0'), (22193, 2, u'-    lock.l_len = 2L;  assert( PENDING_BYTE+1==RESERVED_BYTE );'), (22240, 2, u'-    assert( pOpen->nLock>=0 );'), (22441, 2, u'-  assert( pFile );'), (22542, 2, u'-  assert( pFile );'), (22545, 2, u'-  assert( locktype<=SHARED_LOCK );'), (22561, 2, u'-  assert( locktype==NO_LOCK );'), (22622, 2, u'-  assert( pFile );'), (22701, 2, u'-  assert( pFile );'), (22744, 2, u'-  assert( pFile );'), (22747, 2, u'-  assert( locktype<=SHARED_LOCK );'), (22821, 2, u'-  assert( pFile );'), (22920, 2, u'-  assert( pFile );'), (22921, 2, u'-  assert( pSem );'), (22924, 2, u'-  assert( locktype<=SHARED_LOCK );'), (22957, 2, u'-    assert( pFile );'), (23066, 2, u'-  assert( pFile );'), (23127, 2, u'-  assert( pFile );'), (23143, 2, u'-  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (23144, 2, u'-  assert( locktype!=PENDING_LOCK );'), (23145, 2, u'-  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (23211, 2, u'-    assert( 0!=pFile->locktype );'), (23271, 2, u'-  assert( pFile );'), (23275, 2, u'-  assert( locktype<=SHARED_LOCK );'), (23309, 2, u'-      assert( pOpen->nLock>=0 );'), (23445, 2, u'-  assert( id );'), (23448, 2, u'-  assert( ((unixFile*)id)->isLockable==0'), (23514, 2, u'-  assert( id );'), (23515, 2, u'-  assert( amt>0 );'), (23518, 2, u'-  assert( ((unixFile*)id)->isLockable==0'), (23705, 2, u'-  assert((flags&0x0F)==SQLITE_SYNC_NORMAL'), (23714, 2, u'-  assert( pFile );'), (23758, 2, u'-  assert( id );'), (23775, 2, u'-  assert( id );'), (24146, 2, u'-  assert( pNew->pLock==NULL );'), (24147, 2, u'-  assert( pNew->pOpen==NULL );'), (24433, 2, u'-  assert((isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly));'), (24434, 2, u'-  assert(isCreate==0 || isReadWrite);'), (24435, 2, u'-  assert(isExclusive==0 || isCreate);'), (24436, 2, u'-  assert(isDelete==0 || isCreate);'), (24441, 2, u'-  assert( eType!=SQLITE_OPEN_MAIN_DB || !isDelete );'), (24442, 2, u'-  assert( eType!=SQLITE_OPEN_MAIN_JOURNAL || !isDelete );'), (24443, 2, u'-  assert( eType!=SQLITE_OPEN_MASTER_JOURNAL || !isDelete );'), (24446, 2, u'-  assert( eType==SQLITE_OPEN_MAIN_DB      || eType==SQLITE_OPEN_TEMP_DB'), (24455, 2, u'-    assert(isDelete && !isOpenDirectory);'), (24502, 2, u'-  assert( fd>=0 );'), (24617, 2, u'-      assert(!"Invalid flags argument");'), (24647, 2, u'-  assert( pVfs->mxPathname==MAX_PATHNAME );'), (24732, 2, u'-  assert((size_t)nBuf>=(sizeof(time_t)+sizeof(int)));'), (24757, 2, u'-      assert( sizeof(t)+sizeof(pid)<=(size_t)nBuf );'), (25459, 2, u'-  assert( (int)strlen(conchPath) == len+7 );'), (25509, 2, u'-    assert( (int)strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (25520, 2, u'-    assert( strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (25645, 2, u'-      assert( 0 );  /* The call assures that only valid opcodes are sent */'), (26735, 2, u'-  assert( id!=0 );'), (26784, 2, u'-  assert( id!=0 );'), (26822, 2, u'-  assert( id!=0 );'), (26831, 2, u'-  assert( amt>0 );'), (26857, 2, u'-  assert( id!=0 );'), (26889, 2, u'-  assert( id!=0 );'), (26926, 2, u'-  assert( id!=0 );'), (27030, 2, u'-  assert( id!=0 );'), (27044, 2, u'-  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (27045, 2, u'-  assert( locktype!=PENDING_LOCK );'), (27046, 2, u'-  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (27074, 2, u'-    assert( pFile->locktype==NO_LOCK );'), (27086, 2, u'-    assert( pFile->locktype==SHARED_LOCK );'), (27105, 2, u'-    assert( pFile->locktype>=SHARED_LOCK );'), (27149, 2, u'-  assert( id!=0 );'), (27180, 2, u'-  assert( pFile!=0 );'), (27181, 2, u'-  assert( locktype<=SHARED_LOCK );'), (27234, 2, u'-  assert( id!=0 );'), (27402, 2, u'-  assert( id!=0 );'), (27612, 2, u'-      assert(!"Invalid flags argument");'), (28108, 2, u'-  assert( sizeof(*p)==BITVEC_SZ );'), (28160, 2, u'-  assert( p!=0 );'), (28161, 2, u'-  assert( i>0 );'), (28162, 2, u'-  assert( i<=p->iSize );'), (28222, 2, u'-  assert( p!=0 );'), (28223, 2, u'-  assert( i>0 );'), (28429, 2, u'-#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (28430, 2, u'-# define expensive_assert(X)  assert(X)'), (28432, 2, u'-# define expensive_assert(X)'), (28437, 2, u'-#if !defined(NDEBUG) && defined(SQLITE_ENABLE_EXPENSIVE_ASSERT)'), (28448, 2, u'-    assert( p->nRef || (p->flags&PGHDR_NEED_SYNC) );'), (28460, 2, u'-  assert( pPage->pDirtyNext || pPage==p->pDirtyTail );'), (28461, 2, u'-  assert( pPage->pDirtyPrev || pPage==p->pDirty );'), (28475, 2, u'-    assert( pPage==p->pDirtyTail );'), (28481, 2, u'-    assert( pPage==p->pDirty );'), (28487, 2, u'-  expensive_assert( pcacheCheckSynced(p) );'), (28497, 2, u'-  assert( pPage->pDirtyNext==0 && pPage->pDirtyPrev==0 && p->pDirty!=pPage );'), (28501, 2, u'-    assert( pPage->pDirtyNext->pDirtyPrev==0 );'), (28511, 2, u'-  expensive_assert( pcacheCheckSynced(p) );'), (28578, 2, u'-  assert( pCache->nRef==0 && pCache->pDirty==0 );'), (28598, 2, u'-  assert( pCache!=0 );'), (28599, 2, u'-  assert( pgno>0 );'), (28632, 2, u'-    expensive_assert( pcacheCheckSynced(pCache) );'), (28659, 2, u'-    assert( pPage->pCache==pCache );'), (28660, 2, u'-    assert( pPage->pgno==pgno );'), (28661, 2, u'-    assert( pPage->pExtra==(void *)&pPage[1] );'), (28680, 2, u'-  assert( p->nRef>0 );'), (28699, 2, u'-  assert(p->nRef>0);'), (28710, 2, u'-  assert( p->nRef==1 );'), (28728, 2, u'-  assert( p->nRef>0 );'), (28775, 2, u'-  assert( p->nRef>0 );'), (28776, 2, u'-  assert( newPgno>0 );'), (28801, 2, u'-        assert( p->flags&PGHDR_DIRTY );'), (29125, 2, u'-  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29154, 2, u'-  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29231, 2, u'-  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29271, 2, u'-  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29315, 2, u'-  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29336, 2, u'-  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29558, 2, u'-  assert( pPage->pLruPrev==0 && pPage->pLruNext==0 );'), (29559, 2, u'-  assert( pcache1.pLruHead!=pPage && pcache1.pLruTail!=pPage );'), (29597, 2, u'-  assert( pPage->iKey==iOld );'), (29812, 2, u'-  assert( N >= sizeof(*p) );'), (29849, 2, u'-  assert( p!=0 );'), (29872, 2, u'-    assert( p->pEntry==0 );'), (29892, 2, u'-    assert( pA->pNext==0 || pA->v<=pA->pNext->v );'), (29893, 2, u'-    assert( pB->pNext==0 || pB->v<=pB->pNext->v );'), (29907, 2, u'-    assert( pA->pNext==0 || pA->v<=pA->pNext->v );'), (29910, 2, u'-    assert( pB==0 || pB->pNext==0 || pB->v<=pB->pNext->v );'), (29924, 2, u'-  assert( p->isSorted==0 );'), (30350, 2, u'-static int assert_pager_state(Pager *pPager){'), (30353, 2, u'-  assert( pPager->tempFile==0 || pPager->state>=PAGER_EXCLUSIVE );'), (30356, 2, u'-  assert( pPager->tempFile==0 || pPager->changeCountDone );'), (30465, 2, u'-  assert( !MEMDB );'), (30471, 2, u'-    assert( isOpen(pPager->fd) );'), (30476, 2, u'-    assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (30477, 2, u'-    assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (30519, 2, u'-  assert( !pPg->pageHash || pPager->errCode'), (30613, 2, u'-  assert( offset%JOURNAL_HDR_SZ(pPager)==0 );'), (30614, 2, u'-  assert( offset>=c );'), (30615, 2, u'-  assert( (offset-c)<JOURNAL_HDR_SZ(pPager) );'), (30642, 2, u'-  assert( isOpen(pPager->jfd) );'), (30696, 2, u'-  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (30735, 2, u'-  assert( isOpen(pPager->fd) || pPager->noSync );'), (30816, 2, u'-  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (30888, 2, u'-    assert( rc!=SQLITE_OK || iPageSize16==(u16)iPageSize );'), (30937, 2, u'-  assert( isOpen(pPager->jfd) );'), (31046, 2, u'-      assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (31125, 2, u'-  assert('), (31240, 2, u'-  assert( isOpen(pPager->jfd) || pPager->pInJournal==0 );'), (31270, 2, u'-      assert( pPager->journalMode==PAGER_JOURNALMODE_DELETE || rc );'), (31391, 2, u'-  assert( (isMainJrnl&~1)==0 );      /* isMainJrnl is 0 or 1 */'), (31392, 2, u'-  assert( (isSavepnt&~1)==0 );       /* isSavepnt is 0 or 1 */'), (31393, 2, u'-  assert( isMainJrnl || pDone );     /* pDone always used on sub-journals */'), (31394, 2, u'-  assert( isSavepnt || pDone==0 );   /* pDone never used on non-savepoint */'), (31397, 2, u'-  assert( aData );         /* Temp storage must have already been allocated */'), (31415, 2, u'-    assert( !isSavepnt );'), (31433, 2, u'-  assert( pPager->state==PAGER_RESERVED || pPager->state>=PAGER_EXCLUSIVE );'), (31468, 2, u'-  assert( pPg || !MEMDB );'), (31501, 2, u'-    assert( isSavepnt );'), (31725, 2, u'-    assert( !isOpen(pJournal) );'), (31788, 2, u'-  assert( isOpen(pPager->fd) || pPager->tempFile );'), (31801, 2, u'-    assert( MAX_SECTOR_SIZE>=512 );'), (31883, 2, u'-  assert( isOpen(pPager->jfd) );'), (31938, 2, u'-      assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) );'), (32004, 2, u'-  assert( 0 );'), (32012, 2, u'-  assert('), (32095, 2, u'-  assert( pPager->state>=PAGER_SHARED );'), (32130, 2, u'-    assert( rc!=SQLITE_DONE );'), (32145, 2, u'-    assert( rc!=SQLITE_DONE );'), (32152, 2, u'-    assert( !(nJRec==0'), (32165, 2, u'-    assert( rc!=SQLITE_DONE );'), (32167, 2, u'-  assert( rc!=SQLITE_OK || pPager->journalOff==szJ );'), (32177, 2, u'-      assert( offset==ii*(4+pPager->pageSize) );'), (32180, 2, u'-    assert( rc!=SQLITE_DONE );'), (32270, 2, u'-  assert( rc!=SQLITE_OK || isOpen(pFile) );'), (32349, 2, u'-    assert( pageSize==0 || (pageSize>=512 && pageSize<=SQLITE_MAX_PAGE_SIZE) );'), (32438, 2, u'-  assert( isOpen(pPager->fd) || pPager->tempFile );'), (32479, 2, u'-    assert( isOpen(pPager->fd) || pPager->tempFile );'), (32530, 2, u'-  assert( PAGER_SHARED==SHARED_LOCK );'), (32531, 2, u'-  assert( PAGER_RESERVED==RESERVED_LOCK );'), (32532, 2, u'-  assert( PAGER_EXCLUSIVE==EXCLUSIVE_LOCK );'), (32535, 2, u'-  assert( pPager->state>=PAGER_SHARED || pPager->dbSizeValid==0 );'), (32542, 2, u'-  assert( (pPager->state>=locktype)'), (32568, 2, u'-  assert( pPager->dbSizeValid );'), (32569, 2, u'-  assert( pPager->dbSize>=nPage );'), (32570, 2, u'-  assert( pPager->state>=PAGER_RESERVED );'), (32614, 2, u'-  assert( !pPager->aSavepoint && !pPager->pInJournal );'), (32615, 2, u'-  assert( !isOpen(pPager->jfd) && !isOpen(pPager->sjfd) );'), (32677, 2, u'-    assert( !pPager->tempFile );'), (32681, 2, u'-      assert( isOpen(pPager->jfd) );'), (32820, 2, u'-  assert( pPager->state>=PAGER_RESERVED );'), (32828, 2, u'-    assert( pPager->tempFile && rc==SQLITE_OK );'), (32904, 2, u'-    assert( pageInJournal(pPg) || pPg->pgno>pPager->dbOrigSize );'), (32912, 2, u'-    assert( pPager->nSavepoint>0 );'), (32943, 2, u'-  assert( pPg->pPager==pPager );'), (32944, 2, u'-  assert( pPg->flags&PGHDR_DIRTY );'), (33148, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(journalFileSize) );'), (33159, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );'), (33189, 2, u'-      assert(SQLITE_DEFAULT_PAGE_SIZE<=SQLITE_MAX_DEFAULT_PAGE_SIZE);'), (33201, 2, u'-        assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (33202, 2, u'-        assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (33203, 2, u'-        assert(SQLITE_MAX_DEFAULT_PAGE_SIZE<=65536);'), (33229, 2, u'-    assert( pPager->memDb==0 );'), (33238, 2, u'-    assert( !pPager->pTmpSpace );'), (33263, 2, u'-  assert( pPager->state == (tempFile ? PAGER_EXCLUSIVE : PAGER_UNLOCK) );'), (33266, 2, u'-  assert( tempFile==PAGER_LOCKINGMODE_NORMAL'), (33268, 2, u'-  assert( PAGER_LOCKINGMODE_EXCLUSIVE==1 );'), (33282, 2, u'-  assert( isOpen(pPager->fd) || tempFile );'), (33332, 2, u'-  assert( pPager!=0 );'), (33333, 2, u'-  assert( pPager->useJournal );'), (33334, 2, u'-  assert( isOpen(pPager->fd) );'), (33335, 2, u'-  assert( !isOpen(pPager->jfd) );'), (33396, 2, u'-  assert( pPager->state>=PAGER_SHARED && !MEMDB );'), (33399, 2, u'-    assert( pPager->tempFile );'), (33483, 2, u'-    assert( !MEMDB );'), (33484, 2, u'-    assert( sqlite3PcacheRefCount(pPager->pPCache)==0 );'), (33488, 2, u'-        assert( pPager->state==PAGER_UNLOCK );'), (33494, 2, u'-    assert( pPager->state>=SHARED_LOCK );'), (33540, 2, u'-            assert( !pPager->tempFile );'), (33542, 2, u'-            assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (33574, 2, u'-      assert( (pPager->state==PAGER_SHARED)'), (33604, 2, u'-      assert( pPager->dbSizeValid );'), (33619, 2, u'-    assert( pPager->exclusiveMode || pPager->state==PAGER_SHARED );'), (33716, 2, u'-  assert( assert_pager_state(pPager) );'), (33717, 2, u'-  assert( pPager->state==PAGER_UNLOCK'), (33731, 2, u'-  assert( pPager!=0 );'), (33742, 2, u'-  assert( pPager->state!=PAGER_UNLOCK );'), (33748, 2, u'-  assert( pPg->pgno==pgno );'), (33749, 2, u'-  assert( pPg->pPager==pPager || pPg->pPager==0 );'), (33789, 2, u'-      assert( pPg->pPager==pPager );'), (33823, 2, u'-  assert( pPager!=0 );'), (33824, 2, u'-  assert( pgno!=0 );'), (33898, 2, u'-  assert( pPager->state>=PAGER_RESERVED );'), (33899, 2, u'-  assert( pPager->useJournal );'), (33900, 2, u'-  assert( pPager->pInJournal==0 );'), (33937, 2, u'-    assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (33985, 2, u'-  assert( pPager->state!=PAGER_UNLOCK );'), (33987, 2, u'-    assert( pPager->pInJournal==0 );'), (33988, 2, u'-    assert( !MEMDB && !pPager->tempFile );'), (34018, 2, u'-    assert( pPager->nRec==0 );'), (34019, 2, u'-    assert( pPager->dbOrigSize==0 );'), (34020, 2, u'-    assert( pPager->pInJournal==0 );'), (34025, 2, u'-  assert( !isOpen(pPager->jfd) || pPager->journalOff>0 || rc!=SQLITE_OK );'), (34050, 2, u'-  assert( !pPager->setMaster );'), (34069, 2, u'-    assert( pPager->state!=PAGER_UNLOCK );'), (34074, 2, u'-    assert( pPager->state>=PAGER_RESERVED );'), (34094, 2, u'-        assert( pPg->pgno!=PAGER_MJ_PGNO(pPager) );'), (34134, 2, u'-        assert( pPager->pInJournal!=0 );'), (34137, 2, u'-        assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (34140, 2, u'-          assert( rc==SQLITE_NOMEM );'), (34166, 2, u'-  assert( pPager->state>=PAGER_SHARED );'), (34204, 2, u'-    assert( !MEMDB );'), (34205, 2, u'-    assert( pPager->doNotSync==0 );'), (34222, 2, u'-    assert(nPage>0);'), (34223, 2, u'-    assert(pg1<=pPg->pgno);'), (34224, 2, u'-    assert((pg1+nPage)>pPg->pgno);'), (34236, 2, u'-              assert(pPager->needSync);'), (34256, 2, u'-      assert( !MEMDB && pPager->noSync==0 );'), (34264, 2, u'-      assert(pPager->needSync);'), (34267, 2, u'-    assert( pPager->doNotSync==1 );'), (34343, 2, u'-  assert( isDirectMode==0 );'), (34349, 2, u'-  assert( pPager->state>=PAGER_RESERVED );'), (34354, 2, u'-    assert( !pPager->tempFile && isOpen(pPager->fd) );'), (34358, 2, u'-    assert( pPgHdr==0 || rc==SQLITE_OK );'), (34376, 2, u'-        assert( pPager->dbFileSize>0 );'), (34481, 2, u'-    assert( isOpen(pPager->jfd) || pPager->journalMode==PAGER_JOURNALMODE_OFF );'), (34554, 2, u'-      assert( rc!=SQLITE_IOERR_BLOCKED );'), (34564, 2, u'-      assert( pPager->state>=PAGER_EXCLUSIVE );'), (34636, 2, u'-    assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) );'), (34641, 2, u'-  assert( pPager->state==PAGER_SYNCED || MEMDB || !pPager->dbModified );'), (34794, 2, u'-    assert( pPager->nSavepoint==0 || isOpen(pPager->sjfd) ||'), (34813, 2, u'-      assert( pPager->dbSizeValid );'), (34867, 2, u'-  assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (34868, 2, u'-  assert( iSavepoint>=0 || op==SAVEPOINT_ROLLBACK );'), (34892, 2, u'-      assert(rc!=SQLITE_DONE);'), (34898, 2, u'-      assert( rc==SQLITE_OK );'), (34990, 2, u'-  assert( pPg->nRef>0 );'), (35030, 2, u'-    assert( pageInJournal(pPg) || pPg->pgno>pPager->dbOrigSize );'), (35031, 2, u'-    assert( pPg->flags&PGHDR_DIRTY );'), (35032, 2, u'-    assert( pPager->needSync );'), (35042, 2, u'-  assert( !pPgOld || pPgOld->nRef==1 );'), (35072, 2, u'-    assert( pPager->needSync );'), (35081, 2, u'-    assert( pPager->noSync==0 && !MEMDB );'), (35108, 2, u'-  assert( pPg->nRef>0 || pPg->pPager->memDb );'), (35132, 2, u'-  assert( eMode==PAGER_LOCKINGMODE_QUERY'), (35135, 2, u'-  assert( PAGER_LOCKINGMODE_QUERY<0 );'), (35136, 2, u'-  assert( PAGER_LOCKINGMODE_NORMAL>=0 && PAGER_LOCKINGMODE_EXCLUSIVE>=0 );'), (35162, 2, u'-  assert( eMode==PAGER_JOURNALMODE_QUERY'), (35168, 2, u'-  assert( PAGER_JOURNALMODE_QUERY<0 );'), (35811, 2, u'-  assert( p->pBt->inTransaction!=TRANS_NONE || p->pBt->nTransaction==0 ); \\'), (35812, 2, u'-  assert( p->pBt->inTransaction>=p->inTrans );'), (35876, 2, u'-  assert( p->locked==0 );'), (35877, 2, u'-  assert( sqlite3_mutex_notheld(p->pBt->mutex) );'), (35878, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (35890, 2, u'-  assert( p->locked==1 );'), (35891, 2, u'-  assert( sqlite3_mutex_held(p->pBt->mutex) );'), (35892, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (35893, 2, u'-  assert( p->db==p->pBt->db );'), (35922, 2, u'-  assert( p->pNext==0 || p->pNext->pBt>p->pBt );'), (35923, 2, u'-  assert( p->pPrev==0 || p->pPrev->pBt<p->pBt );'), (35924, 2, u'-  assert( p->pNext==0 || p->pNext->db==p->db );'), (35925, 2, u'-  assert( p->pPrev==0 || p->pPrev->db==p->db );'), (35926, 2, u'-  assert( p->sharable || (p->pNext==0 && p->pPrev==0) );'), (35929, 2, u'-  assert( !p->locked || p->wantToLock>0 );'), (35930, 2, u'-  assert( p->sharable || p->wantToLock==0 );'), (35933, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (35937, 2, u'-  assert( (p->locked==0 && p->sharable) || p->pBt->db==p->db );'), (35959, 2, u'-    assert( pLater->sharable );'), (35960, 2, u'-    assert( pLater->pNext==0 || pLater->pNext->pBt>pLater->pBt );'), (35961, 2, u'-    assert( !pLater->locked || pLater->wantToLock>0 );'), (35979, 2, u'-    assert( p->wantToLock>0 );'), (35995, 2, u'-  assert( p->sharable==0 || p->locked==0 || p->wantToLock>0 );'), (35996, 2, u'-  assert( p->sharable==0 || p->locked==0 || p->db==p->pBt->db );'), (35997, 2, u'-  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->pBt->mutex) );'), (35998, 2, u'-  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->db->mutex) );'), (36037, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (36040, 2, u'-    assert( !p || (p->locked==0 && p->sharable) || p->pBt->db==p->db );'), (36044, 2, u'-        assert( p->wantToLock==1 );'), (36063, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (36067, 2, u'-      assert( p->wantToLock>0 );'), (36120, 2, u'-      assert( pArray->aBtree[i]!=pBtree );'), (36124, 2, u'-  assert( pArray->nMutex>=0 );'), (36125, 2, u'-  assert( pArray->nMutex<ArraySize(pArray->aBtree)-1 );'), (36128, 2, u'-    assert( pArray->aBtree[i]!=pBtree );'), (36151, 2, u'-    assert( i==0 || pArray->aBtree[i-1]->pBt<p->pBt );'), (36152, 2, u'-    assert( !p->locked || p->wantToLock>0 );'), (36155, 2, u'-    assert( sqlite3_mutex_held(p->db->mutex) );'), (36172, 2, u'-    assert( i==0 || pArray->aBtree[i-1]->pBt<p->pBt );'), (36173, 2, u'-    assert( p->locked || !p->sharable );'), (36174, 2, u'-    assert( p->wantToLock>0 );'), (36177, 2, u'-    assert( sqlite3_mutex_held(p->db->mutex) );'), (36304, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (36305, 2, u'-  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (36306, 2, u'-  assert( p->db!=0 );'), (36312, 2, u'-  assert( eLock==READ_LOCK || (p==pBt->pWriter && p->inTrans==TRANS_WRITE) );'), (36313, 2, u'-  assert( eLock==READ_LOCK || pBt->inTransaction==TRANS_WRITE );'), (36359, 2, u'-      assert( pIter->eLock==READ_LOCK || pIter->eLock==WRITE_LOCK );'), (36360, 2, u'-      assert( eLock==READ_LOCK || pIter->pBtree==p || pIter->eLock==READ_LOCK);'), (36364, 2, u'-          assert( p==pBt->pWriter );'), (36389, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (36390, 2, u'-  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (36391, 2, u'-  assert( p->db!=0 );'), (36398, 2, u'-  assert( SQLITE_OK==querySharedCacheTableLock(p, iTable, eLock) );'), (36440, 2, u'-  assert( WRITE_LOCK>READ_LOCK );'), (36462, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (36463, 2, u'-  assert( p->sharable || 0==*ppIter );'), (36464, 2, u'-  assert( p->inTrans>0 );'), (36468, 2, u'-    assert( pBt->isExclusive==0 || pBt->pWriter==pLock->pBtree );'), (36469, 2, u'-    assert( pLock->pBtree->inTrans>=pLock->eLock );'), (36478, 2, u'-  assert( pBt->isPending==0 || pBt->pWriter );'), (36515, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (36526, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (36617, 2, u'-  assert( CURSOR_VALID==pCur->eState );'), (36618, 2, u'-  assert( 0==pCur->pKey );'), (36619, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (36642, 2, u'-  assert( !pCur->apPage[0]->intKey || !pCur->pKey );'), (36665, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (36666, 2, u'-  assert( pExcept==0 || pExcept->pBt==pBt );'), (36683, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (36698, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (36699, 2, u'-  assert( pCur->eState>=CURSOR_REQUIRESEEK );'), (36708, 2, u'-    assert( pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_INVALID );'), (36751, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (36775, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (36777, 2, u'-  assert( 0==PTRMAP_ISPAGE(pBt, PENDING_BYTE_PAGE(pBt)) );'), (36779, 2, u'-  assert( pBt->autoVacuum );'), (36818, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (36828, 2, u'-  assert( pEType!=0 );'), (36859, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (36892, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (36895, 2, u'-  assert( pPage->leaf==0 || pPage->leaf==1 );'), (36897, 2, u'-  assert( n==4-4*pPage->leaf );'), (36988, 2, u'-  assert( pCell!=0 );'), (36990, 2, u'-  assert( (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload );'), (37004, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37030, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37031, 2, u'-  assert( pPage->pBt!=0 );'), (37032, 2, u'-  assert( pPage->pBt->usableSize <= SQLITE_MAX_PAGE_SIZE );'), (37033, 2, u'-  assert( pPage->nOverflow==0 );'), (37034, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37040, 2, u'-  assert( nCell==get2byte(&data[hdr+3]) );'), (37057, 2, u'-    assert( cbrk+size<=usableSize && cbrk>=0 );'), (37061, 2, u'-  assert( cbrk>=cellOffset+2*nCell );'), (37068, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37096, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37097, 2, u'-  assert( pPage->pBt );'), (37098, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37099, 2, u'-  assert( nByte>=0 );  /* Minimum cell size is 4 */'), (37100, 2, u'-  assert( pPage->nFree>=nByte );'), (37101, 2, u'-  assert( pPage->nOverflow==0 );'), (37106, 2, u'-  assert( nByte <= ('), (37159, 2, u'-  assert( pPage->pBt!=0 );'), (37160, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37161, 2, u'-  assert( start>=pPage->hdrOffset+6+(pPage->leaf?0:4) );'), (37162, 2, u'-  assert( (start + size)<=pPage->pBt->usableSize );'), (37163, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37164, 2, u'-  assert( size>=0 );   /* Minimum cell size is 4 */'), (37176, 2, u'-    assert( pbegin<=pPage->pBt->usableSize-4 );'), (37185, 2, u'-  assert( pbegin>addr || pbegin==0 );'), (37195, 2, u'-    assert( pbegin>addr );'), (37196, 2, u'-    assert( pbegin<=pPage->pBt->usableSize-4 );'), (37222, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37241, 2, u'-  assert( pPage->hdrOffset==(pPage->pgno==1 ? 100 : 0) );'), (37242, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37243, 2, u'-  pPage->leaf = (u8)(flagByte>>3);  assert( PTF_LEAF == 1<<3 );'), (37274, 2, u'-  assert( pPage->pBt!=0 );'), (37275, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37276, 2, u'-  assert( pPage->pgno==sqlite3PagerPagenumber(pPage->pDbPage) );'), (37277, 2, u'-  assert( pPage == sqlite3PagerGetExtra(pPage->pDbPage) );'), (37278, 2, u'-  assert( pPage->aData == sqlite3PagerGetData(pPage->pDbPage) );'), (37295, 2, u'-    assert( pBt->pageSize>=512 && pBt->pageSize<=32768 );'), (37366, 2, u'-  assert( sqlite3PagerPagenumber(pPage->pDbPage)==pPage->pgno );'), (37367, 2, u'-  assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (37368, 2, u'-  assert( sqlite3PagerGetData(pPage->pDbPage) == data );'), (37369, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37370, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (37382, 2, u'-  assert( pBt->pageSize>=512 && pBt->pageSize<=32768 );'), (37423, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (37437, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (37452, 2, u'-  assert( pBt->pPage1 );'), (37454, 2, u'-  assert( rc==SQLITE_OK || nPage==-1 );'), (37471, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (37510, 2, u'-    assert( pPage->nOverflow==0 || sqlite3PagerPageRefcount(pPage->pDbPage)>1 );'), (37511, 2, u'-    assert( pPage->aData );'), (37512, 2, u'-    assert( pPage->pBt );'), (37513, 2, u'-    assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (37514, 2, u'-    assert( sqlite3PagerGetData(pPage->pDbPage)==pPage->aData );'), (37515, 2, u'-    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37531, 2, u'-  assert( sqlite3PagerPageRefcount(pData)>0 );'), (37533, 2, u'-    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37552, 2, u'-  assert( pBt->db );'), (37553, 2, u'-  assert( sqlite3_mutex_held(pBt->db->mutex) );'), (37594, 2, u'-  assert( db!=0 );'), (37595, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (37627, 2, u'-        assert( pBt->nRef>0 );'), (37656, 2, u'-    assert( sizeof(i64)==8 || sizeof(i64)==4 );'), (37657, 2, u'-    assert( sizeof(u64)==8 || sizeof(u64)==4 );'), (37658, 2, u'-    assert( sizeof(u32)==4 );'), (37659, 2, u'-    assert( sizeof(u16)==2 );'), (37660, 2, u'-    assert( sizeof(Pgno)==4 );'), (37710, 2, u'-    assert( (pBt->pageSize & 7)==0 );  /* 8-byte alignment of pageSize */'), (37779, 2, u'-    assert( sqlite3_mutex_held(mutexOpen) );'), (37797, 2, u'-  assert( sqlite3_mutex_notheld(pBt->mutex) );'), (37851, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (37873, 2, u'-  assert( p->wantToLock==0 && p->locked==0 );'), (37880, 2, u'-    assert( !pBt->pCursor );'), (37891, 2, u'-  assert( p->wantToLock==0 );'), (37892, 2, u'-  assert( p->locked==0 );'), (37918, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (37936, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (37951, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (37953, 2, u'-  assert( pBt && pBt->pPager );'), (37983, 2, u'-  assert( nReserve>=-1 && nReserve<=255 );'), (37992, 2, u'-  assert( nReserve>=0 && nReserve<=255 );'), (37995, 2, u'-    assert( (pageSize & 7)==0 );'), (37996, 2, u'-    assert( !pBt->pPage1 && !pBt->pCursor );'), (38102, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (38103, 2, u'-  assert( pBt->pPage1==0 );'), (38142, 2, u'-    assert( (pageSize & 7)==0 );'), (38186, 2, u'-  assert( pBt->maxLeaf + 23 <= MX_CELL_SIZE(pBt) );'), (38203, 2, u'-  assert( sqlite3BtreeHoldsMutex(pRef) );'), (38230, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (38233, 2, u'-      assert( pBt->pPage1->aData );'), (38258, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (38264, 2, u'-  assert( pP1!=0 );'), (38269, 2, u'-  assert( sizeof(zMagicHeader)==16 );'), (38273, 2, u'-  assert( pBt->usableSize<=pBt->pageSize && pBt->usableSize+255>=pBt->pageSize);'), (38282, 2, u'-  assert( pBt->autoVacuum==1 || pBt->autoVacuum==0 );'), (38283, 2, u'-  assert( pBt->incrVacuum==1 || pBt->incrVacuum==0 );'), (38407, 2, u'-      assert( !pBt->pWriter );'), (38444, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (38492, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (38493, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (38558, 2, u'-  assert( eType==PTRMAP_OVERFLOW2 || eType==PTRMAP_OVERFLOW1 ||'), (38560, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (38561, 2, u'-  assert( pDbPage->pBt==pBt );'), (38639, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (38640, 2, u'-  assert( iLastPg>nFin );'), (38673, 2, u'-        assert( iFreePg==iLastPg );'), (38701, 2, u'-      assert( iFreePg<iLastPg );'), (38749, 2, u'-  assert( pBt->inTransaction==TRANS_WRITE && p->inTrans==TRANS_WRITE );'), (38774, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (38776, 2, u'-  assert(pBt->autoVacuum);'), (38818, 2, u'-  assert( nRef==sqlite3PagerRefcount(pPager) );'), (38895, 2, u'-    assert( pBt->inTransaction==TRANS_WRITE );'), (38896, 2, u'-    assert( pBt->nTransaction>0 );'), (39031, 2, u'-    assert( TRANS_WRITE==pBt->inTransaction );'), (39043, 2, u'-    assert( countWriteCursors(pBt)==0 );'), (39049, 2, u'-    assert( pBt->nTransaction>0 );'), (39087, 2, u'-  assert( p->inTrans==TRANS_WRITE );'), (39088, 2, u'-  assert( pBt->readOnly==0 );'), (39089, 2, u'-  assert( iStatement>0 );'), (39090, 2, u'-  assert( iStatement>p->db->nSavepoint );'), (39094, 2, u'-    assert( pBt->inTransaction==TRANS_WRITE );'), (39122, 2, u'-    assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (39123, 2, u'-    assert( iSavepoint>=0 || (iSavepoint==-1 && op==SAVEPOINT_ROLLBACK) );'), (39175, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (39176, 2, u'-  assert( wrFlag==0 || wrFlag==1 );'), (39178, 2, u'-    assert( !pBt->readOnly );'), (39184, 2, u'-      assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (39275, 2, u'-  assert( pCur->cachedRowid==iRowid );'), (39324, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39331, 2, u'-  assert( pTempCur->pKey==0 );'), (39340, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39365, 2, u'-  static void assertCellInfo(BtCursor *pCur){'), (39370, 2, u'-    assert( memcmp(&info, &pCur->info, sizeof(info))==0 );'), (39373, 2, u'-  #define assertCellInfo(x)'), (39383, 2, u'-      assertCellInfo(pCur);'), (39394, 2, u'-    assertCellInfo(pCur);                                                      \\'), (39409, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39412, 2, u'-    assert( pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID );'), (39433, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39436, 2, u'-    assert( pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID );'), (39477, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (39478, 2, u'-  assert(pPgnoNext);'), (39508, 2, u'-    assert(rc==SQLITE_OK || pPage==0);'), (39600, 2, u'-  assert( pPage );'), (39601, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (39602, 2, u'-  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (39603, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39671, 2, u'-        assert(!pCur->aOverflow[iIdx] || pCur->aOverflow[iIdx]==nextPage);'), (39731, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39734, 2, u'-    assert( pCur->eState==CURSOR_VALID );'), (39735, 2, u'-    assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (39739, 2, u'-    assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (39763, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39766, 2, u'-    assert( pCur->eState==CURSOR_VALID );'), (39767, 2, u'-    assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (39768, 2, u'-    assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (39803, 2, u'-  assert( pCur!=0 && pCur->iPage>=0 && pCur->apPage[pCur->iPage]);'), (39804, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (39805, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39807, 2, u'-  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (39845, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39852, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39870, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39871, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (39872, 2, u'-  assert( pCur->iPage<BTCURSOR_MAX_DEPTH );'), (39898, 2, u'-static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){'), (39899, 2, u'-  assert( iIdx<=pParent->nCell );'), (39901, 2, u'-    assert( get4byte(&pParent->aData[pParent->hdrOffset+8])==iChild );'), (39903, 2, u'-    assert( get4byte(findCell(pParent, iIdx))==iChild );'), (39907, 2, u'-#  define assertParentIndex(x,y,z)'), (39919, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39920, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (39921, 2, u'-  assert( pCur->iPage>0 );'), (39922, 2, u'-  assert( pCur->apPage[pCur->iPage] );'), (39923, 2, u'-  assertParentIndex('), (39943, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39944, 2, u'-  assert( CURSOR_INVALID < CURSOR_REQUIRESEEK );'), (39945, 2, u'-  assert( CURSOR_VALID   < CURSOR_REQUIRESEEK );'), (39946, 2, u'-  assert( CURSOR_FAULT   > CURSOR_REQUIRESEEK );'), (39969, 2, u'-  assert( pRoot->pgno==pCur->pgnoRoot );'), (39978, 2, u'-    assert( pRoot->pgno==1 );'), (39980, 2, u'-    assert( subpage>0 );'), (40001, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (40002, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (40004, 2, u'-    assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (40026, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (40027, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (40048, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (40049, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40053, 2, u'-      assert( pCur->apPage[pCur->iPage]->nCell==0 );'), (40057, 2, u'-      assert( pCur->apPage[pCur->iPage]->nCell>0 );'), (40072, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (40073, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40077, 2, u'-      assert( pCur->apPage[pCur->iPage]->nCell==0 );'), (40080, 2, u'-      assert( pCur->eState==CURSOR_VALID );'), (40127, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (40128, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40149, 2, u'-  assert( pCur->apPage[pCur->iPage] );'), (40150, 2, u'-  assert( pCur->apPage[pCur->iPage]->isInit );'), (40153, 2, u'-    assert( pCur->apPage[pCur->iPage]->nCell==0 );'), (40156, 2, u'-  assert( pCur->apPage[0]->intKey || pIdxKey );'), (40192, 2, u'-          assert( nCellKey>intKey );'), (40236, 2, u'-    assert( lwr==upr+1 );'), (40237, 2, u'-    assert( pPage->isInit );'), (40246, 2, u'-      assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (40279, 2, u'-    assert( nKey==(i64)(int)nKey );'), (40313, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40328, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (40333, 2, u'-  assert( pRes!=0 );'), (40347, 2, u'-  assert( pPage->isInit );'), (40348, 2, u'-  assert( idx<=pPage->nCell );'), (40396, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (40414, 2, u'-  assert( pPage->isInit );'), (40481, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (40496, 2, u'-      assert( nearby>0 );'), (40497, 2, u'-      assert( pBt->autoVacuum );'), (40536, 2, u'-        assert( pPrevTrunk==0 );'), (40555, 2, u'-        assert( *pPgno==iTrunk );'), (40589, 2, u'-            assert( sqlite3PagerIswriteable(pPage1->pDbPage) );'), (40646, 2, u'-          assert( sqlite3PagerIswriteable(pTrunk->pDbPage) );'), (40679, 2, u'-      assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (40691, 2, u'-    assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (40701, 2, u'-  assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (40736, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (40737, 2, u'-  assert( iPage>1 );'), (40738, 2, u'-  assert( !pMemPage || pMemPage->pgno==iPage );'), (40864, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (40870, 2, u'-  assert( pBt->usableSize > 4 );'), (40873, 2, u'-  assert( ovflPgno==0 || nOvfl>0 );'), (40930, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (40934, 2, u'-  assert( pCell<pPage->aData || pCell>=&pPage->aData[pBt->pageSize]'), (40949, 2, u'-  assert( info.nHeader==nHeader );'), (40950, 2, u'-  assert( info.nKey==nKey );'), (40951, 2, u'-  assert( info.nData==(u32)(nData+nZero) );'), (41011, 2, u'-      assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (41015, 2, u'-      assert( pPrior<pPage->aData || pPrior>=&pPage->aData[pBt->pageSize]'), (41031, 2, u'-    assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (41035, 2, u'-    assert( pPayload<pPage->aData || pPayload>=&pPage->aData[pBt->pageSize]'), (41040, 2, u'-      assert( pSrc );'), (41074, 2, u'-  assert( idx>=0 && idx<pPage->nCell );'), (41075, 2, u'-  assert( sz==cellSize(pPage, idx) );'), (41076, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (41077, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41134, 2, u'-  assert( i>=0 && i<=pPage->nCell+pPage->nOverflow );'), (41135, 2, u'-  assert( pPage->nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=5460 );'), (41136, 2, u'-  assert( pPage->nOverflow<=ArraySize(pPage->aOvfl) );'), (41137, 2, u'-  assert( sz==cellSizePtr(pPage, pCell) );'), (41138, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41145, 2, u'-    assert( j<(int)(sizeof(pPage->aOvfl)/sizeof(pPage->aOvfl[0])) );'), (41154, 2, u'-    assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (41167, 2, u'-      assert( end + sz <= top );'), (41170, 2, u'-    assert( idx>0 );'), (41171, 2, u'-    assert( end <= get2byte(&data[hdr+5]) );'), (41191, 2, u'-      assert( (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload );'), (41221, 2, u'-  assert( pPage->nOverflow==0 );'), (41222, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41223, 2, u'-  assert( nCell>=0 && nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=5460 );'), (41228, 2, u'-  assert( totalSize+2*nCell<=pPage->nFree );'), (41229, 2, u'-  assert( pPage->nCell==0 );'), (41230, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (41237, 2, u'-    assert( cellbody>0 );'), (41238, 2, u'-    assert( pPage->nFree >= 2*nCell );'), (41246, 2, u'-    assert( cellbody==pPage->pBt->usableSize );'), (41301, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41310, 2, u'-    assert( sqlite3PagerIswriteable(pNew->pDbPage) );'), (41329, 2, u'-    assert( pPage->nCell>0 );'), (41333, 2, u'-    assert( parentSize<64 );'), (41334, 2, u'-    assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (41369, 2, u'-  assert( pPage->nOverflow==0 );'), (41449, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41455, 2, u'-  assert( pCur->iPage>0 );'), (41456, 2, u'-  assert( pPage->isInit );'), (41457, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) || pPage->nOverflow==1 );'), (41460, 2, u'-  assert( pParent );'), (41483, 2, u'-    assert( pPage->intKey );'), (41502, 2, u'-  assertParentIndex(pParent, idx, pPage->pgno);'), (41523, 2, u'-      assert( !pParent->leaf );'), (41534, 2, u'-    assert( i==nOld );'), (41559, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(aCopy[0]) );'), (41562, 2, u'-    assert( ((aCopy[i] - (u8*)0) & 7)==0 ); /* 8-byte alignment required */'), (41565, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(aSpace1) );'), (41611, 2, u'-      assert( nCell<nMaxCells );'), (41616, 2, u'-        aFrom[nCell] = (u8)i;   assert( i>=0 && i<6 );'), (41637, 2, u'-        assert( nCell<nMaxCells );'), (41641, 2, u'-        assert( sz<=pBt->pageSize/4 );'), (41642, 2, u'-        assert( iSpace1<=pBt->pageSize );'), (41649, 2, u'-        assert( leafCorrection==0 || leafCorrection==4 );'), (41651, 2, u'-        assert( get4byte(pTemp)==pgnoOld[i] );'), (41653, 2, u'-          assert( leafCorrection==0 );'), (41658, 2, u'-          assert( leafCorrection==4 );'), (41687, 2, u'-    assert( i<nMaxCells );'), (41719, 2, u'-    assert( d<nMaxCells );'), (41720, 2, u'-    assert( r<nMaxCells );'), (41736, 2, u'-  assert( cntNew[0]>0 || (pParent->pgno==1 && pParent->nCell==0) );'), (41741, 2, u'-  assert( pPage->pgno>1 );'), (41753, 2, u'-      assert( i>0 );'), (41823, 2, u'-    assert( j<nMaxCells );'), (41824, 2, u'-    assert( pNew->pgno==pgnoNew[i] );'), (41827, 2, u'-    assert( pNew->nCell>0 || (nNew==1 && cntNew[0]==0) );'), (41828, 2, u'-    assert( pNew->nOverflow==0 );'), (41837, 2, u'-        assert( k<nMaxCells );'), (41860, 2, u'-      assert( j<nMaxCells );'), (41903, 2, u'-          assert(leafCorrection==4);'), (41908, 2, u'-      assert( sz<=pBt->pageSize/4 );'), (41909, 2, u'-      assert( iSpace2<=pBt->pageSize );'), (41912, 2, u'-      assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (41937, 2, u'-  assert( j==nCell );'), (41938, 2, u'-  assert( nOld>0 );'), (41939, 2, u'-  assert( nNew>0 );'), (41950, 2, u'-  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (41965, 2, u'-  assert( pParent->isInit );'), (42007, 2, u'-  assert( pCur->iPage==0 );'), (42010, 2, u'-  assert( pPage->nCell==0 );'), (42011, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (42035, 2, u'-    assert( pgnoChild>0 );'), (42036, 2, u'-    assert( pgnoChild<=pagerPagecount(pPage->pBt) );'), (42042, 2, u'-      assert( pChild->nOverflow==0 );'), (42054, 2, u'-        assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42068, 2, u'-      assert( rc==SQLITE_OK );'), (42073, 2, u'-    assert( pPage->nOverflow==0 );'), (42108, 2, u'-  assert( pCur->iPage==0 );'), (42109, 2, u'-  assert( pCur->apPage[0]->nOverflow>0 );'), (42114, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (42115, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42118, 2, u'-  assert( sqlite3PagerIswriteable(pChild->pDbPage) );'), (42127, 2, u'-  assert( pChild->isInit==0 );'), (42136, 2, u'-    assert( pChild->nCell==pPage->nCell );'), (42137, 2, u'-    assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42179, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (42184, 2, u'-      assert( pCur->apPage[0]==pPage );'), (42185, 2, u'-      assert( pPage->nOverflow==0 || rc!=SQLITE_OK );'), (42189, 2, u'-      assert( pCur->apPage[0]==pPage );'), (42190, 2, u'-      assert( pPage->nOverflow==0 || rc!=SQLITE_OK );'), (42242, 2, u'-  assert( sqlite3BtreeHoldsMutex(pBtree) );'), (42261, 2, u'-      assert(dbOther);'), (42297, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (42298, 2, u'-  assert( pBt->inTransaction==TRANS_WRITE );'), (42299, 2, u'-  assert( !pBt->readOnly );'), (42300, 2, u'-  assert( pCur->wrFlag );'), (42304, 2, u'-    assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (42321, 2, u'-  assert( pPage->intKey || nKey>=0 );'), (42322, 2, u'-  assert( pPage->leaf || !pPage->intKey );'), (42326, 2, u'-  assert( pPage->isInit );'), (42332, 2, u'-  assert( szNew==cellSizePtr(pPage, newCell) );'), (42333, 2, u'-  assert( szNew<=MX_CELL_SIZE(pBt) );'), (42337, 2, u'-    assert( idx<pPage->nCell );'), (42354, 2, u'-    assert( pPage->leaf );'), (42359, 2, u'-    assert( pPage->leaf );'), (42390, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (42391, 2, u'-  assert( pPage->isInit );'), (42392, 2, u'-  assert( pBt->inTransaction==TRANS_WRITE );'), (42393, 2, u'-  assert( !pBt->readOnly );'), (42400, 2, u'-  assert( pCur->wrFlag );'), (42404, 2, u'-    assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (42449, 2, u'-    assert( !pPage->intKey );'), (42453, 2, u'-      assert( leafCur.aiIdx[leafCur.iPage]==0 );'), (42465, 2, u'-      assert( MX_CELL_SIZE(pBt)>=szNext+4 );'), (42515, 2, u'-        assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42551, 2, u'-        assert( rc!=SQLITE_OK || pLeafPage->pgno==leafPgno );'), (42552, 2, u'-        assert( rc!=SQLITE_OK || leafCur.aiIdx[leafCur.iPage]==0 );'), (42561, 2, u'-        assert( leafCursorInvalid || !leafCur.pagesShuffled'), (42597, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (42598, 2, u'-  assert( pBt->inTransaction==TRANS_WRITE );'), (42599, 2, u'-  assert( !pBt->readOnly );'), (42635, 2, u'-    assert( pgnoRoot>=3 );'), (42668, 2, u'-      assert( eType!=PTRMAP_ROOTPAGE );'), (42669, 2, u'-      assert( eType!=PTRMAP_FREEPAGE );'), (42707, 2, u'-  assert( sqlite3PagerIswriteable(pRoot->pDbPage) );'), (42736, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (42756, 2, u'-    assert( pPage->intKey );'), (42787, 2, u'-  assert( p->inTrans==TRANS_WRITE );'), (42824, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (42825, 2, u'-  assert( p->inTrans==TRANS_WRITE );'), (42910, 2, u'-      assert( maxRootPgno!=PENDING_BYTE_PAGE(pBt) );'), (42964, 2, u'-  assert( idx>=0 && idx<=15 );'), (43019, 2, u'-  assert( idx>=1 && idx<=15 );'), (43021, 2, u'-  assert( p->inTrans==TRANS_WRITE );'), (43022, 2, u'-  assert( pBt->pPage1!=0 );'), (43029, 2, u'-      assert( pBt->autoVacuum || iMeta==0 );'), (43030, 2, u'-      assert( iMeta==0 || iMeta==1 );'), (43050, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (43051, 2, u'-  assert( pPage!=0 );'), (43052, 2, u'-  assert( pPage->pBt==pCur->pBt );'), (43337, 2, u'-    assert( rc==SQLITE_CORRUPT );  /* The only possible error from InitPage */'), (43360, 2, u'-    assert( sz==info.nPayload );'), (43599, 2, u'-  assert( p->pBt->pPager!=0 );'), (43612, 2, u'-  assert( p->pBt->pPager!=0 );'), (43620, 2, u'-  assert( p==0 || sqlite3_mutex_held(p->db->mutex) );'), (43628, 2, u'-  assert( p );'), (43629, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (43634, 2, u'-  assert( p );'), (43635, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (43677, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (43680, 2, u'-  assert( rc==SQLITE_OK || rc==SQLITE_LOCKED_SHAREDCACHE );'), (43696, 2, u'-    assert( READ_LOCK+1==WRITE_LOCK );'), (43697, 2, u'-    assert( isWriteLock==0 || isWriteLock==1 );'), (43720, 2, u'-  assert( cursorHoldsMutex(pCsr) );'), (43721, 2, u'-  assert( sqlite3_mutex_held(pCsr->pBtree->db->mutex) );'), (43722, 2, u'-  assert(pCsr->isIncrblobHandle);'), (43725, 2, u'-  assert( pCsr->eState!=CURSOR_REQUIRESEEK );'), (43738, 2, u'-  assert( !pCsr->pBt->readOnly'), (43743, 2, u'-    assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (43764, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (43765, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (43766, 2, u'-  assert(!pCur->isIncrblobHandle);'), (43767, 2, u'-  assert(!pCur->aOverflow);'), (43872, 2, u'-    assert( sParse.zErrMsg==0 );'), (43985, 2, u'-  assert( p->bDestLocked );'), (43986, 2, u'-  assert( !isFatalError(p->rc) );'), (43987, 2, u'-  assert( iSrcPg!=PENDING_BYTE_PAGE(p->pSrc->pBt) );'), (43988, 2, u'-  assert( zSrcData );'), (44168, 2, u'-        assert( pFile );'), (44169, 2, u'-        assert( (i64)nDestTruncate*(i64)nDestPagesize >= iSize || ('), (44215, 2, u'-      assert( rc2==SQLITE_OK );'), (44304, 2, u'-    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (44311, 2, u'-      assert( rc!=SQLITE_BUSY && rc!=SQLITE_LOCKED );'), (44333, 2, u'-    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (44372, 2, u'-  assert( b.rc!=SQLITE_OK );'), (44427, 2, u'-  assert( (pMem->flags&MEM_RowSet)==0 );'), (44428, 2, u'-  assert( desiredEnc==SQLITE_UTF8 || desiredEnc==SQLITE_UTF16LE'), (44433, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44442, 2, u'-  assert(rc==SQLITE_OK    || rc==SQLITE_NOMEM);'), (44443, 2, u'-  assert(rc==SQLITE_OK    || pMem->enc!=desiredEnc);'), (44444, 2, u'-  assert(rc==SQLITE_NOMEM || pMem->enc==desiredEnc);'), (44463, 2, u'-  assert( 1 >='), (44469, 2, u'-  assert( (pMem->flags&MEM_RowSet)==0 );'), (44509, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44510, 2, u'-  assert( (pMem->flags&MEM_RowSet)==0 );'), (44533, 2, u'-    assert( pMem->flags&MEM_Blob );'), (44534, 2, u'-    assert( (pMem->flags&MEM_RowSet)==0 );'), (44535, 2, u'-    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44559, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44590, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44591, 2, u'-  assert( !(fg&MEM_Zero) );'), (44592, 2, u'-  assert( !(fg&(MEM_Str|MEM_Blob)) );'), (44593, 2, u'-  assert( fg&(MEM_Int|MEM_Real) );'), (44594, 2, u'-  assert( (pMem->flags&MEM_RowSet)==0 );'), (44595, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44611, 2, u'-    assert( fg & MEM_Real );'), (44633, 2, u'-    assert( (pMem->flags & MEM_Null)!=0 || pFunc==pMem->u.pDef );'), (44634, 2, u'-    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44641, 2, u'-    assert( 0==(pMem->flags&MEM_Dyn) && !pMem->xDel );'), (44655, 2, u'-  assert( p->db==0 || sqlite3_mutex_held(p->db->mutex) );'), (44658, 2, u'-    assert( (p->flags & MEM_Agg)==0 );'), (44661, 2, u'-    assert( (p->flags&MEM_RowSet)==0 );'), (44731, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44732, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44745, 2, u'-    assert( pMem->z );'), (44760, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44761, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44775, 2, u'-    assert( pMem->z );'), (44789, 2, u'-  assert( pMem->flags & MEM_Real );'), (44790, 2, u'-  assert( (pMem->flags & MEM_RowSet)==0 );'), (44791, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44792, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44804, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44805, 2, u'-  assert( (pMem->flags & MEM_RowSet)==0 );'), (44806, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44818, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44819, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44833, 2, u'-  assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))==0 );'), (44834, 2, u'-  assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );'), (44835, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44905, 2, u'-  assert( db!=0 );'), (44915, 2, u'-    assert( pMem->zMalloc );'), (44918, 2, u'-    assert( pMem->u.pRowSet!=0 );'), (44928, 2, u'-  assert( p->db!=0 );'), (44951, 2, u'-  assert( (pFrom->flags & MEM_RowSet)==0 );'), (44957, 2, u'-    assert( srcType==MEM_Ephem || srcType==MEM_Static );'), (44969, 2, u'-  assert( (pFrom->flags & MEM_RowSet)==0 );'), (44991, 2, u'-  assert( pFrom->db==0 || sqlite3_mutex_held(pFrom->db->mutex) );'), (44992, 2, u'-  assert( pTo->db==0 || sqlite3_mutex_held(pTo->db->mutex) );'), (44993, 2, u'-  assert( pFrom->db==0 || pTo->db==0 || pFrom->db==pTo->db );'), (45022, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (45023, 2, u'-  assert( (pMem->flags & MEM_RowSet)==0 );'), (45038, 2, u'-    assert( enc!=0 );'), (45111, 2, u'-  assert( (combined_flags & MEM_RowSet)==0 );'), (45147, 2, u'-      assert( f1&MEM_Int );'), (45148, 2, u'-      assert( f2&MEM_Int );'), (45166, 2, u'-    assert( pMem1->enc==pMem2->enc );'), (45167, 2, u'-    assert( pMem1->enc==SQLITE_UTF8 ||'), (45174, 2, u'-    assert( !pColl || pColl->xCmp );'), (45238, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (45239, 2, u'-  assert( (pMem->flags & MEM_RowSet)==0 );'), (45245, 2, u'-  assert( zData!=0 );'), (45284, 2, u'-  assert( pVal->db==0 || sqlite3_mutex_held(pVal->db->mutex) );'), (45285, 2, u'-  assert( (enc&3)==(enc&~SQLITE_UTF16_ALIGNED) );'), (45286, 2, u'-  assert( (pVal->flags & MEM_RowSet)==0 );'), (45291, 2, u'-  assert( (MEM_Blob>>3) == MEM_Str );'), (45297, 2, u'-      assert( (pVal->flags & (MEM_Ephem|MEM_Static))!=0 );'), (45304, 2, u'-    assert( (pVal->flags&MEM_Blob)==0 );'), (45306, 2, u'-    assert( 0==(1&SQLITE_PTR_TO_INT(pVal->z)) );'), (45308, 2, u'-  assert(pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) || pVal->db==0'), (45378, 2, u'-    assert( pExpr->token.n>=3 );'), (45379, 2, u"-    assert( pExpr->token.z[0]=='x' || pExpr->token.z[0]=='X' );"), (45380, 2, u"-    assert( pExpr->token.z[1]=='\\'' );"), (45381, 2, u"-    assert( pExpr->token.z[pExpr->token.n-1]=='\\'' );"), (45499, 2, u'-  assert( p->zSql==0 );'), (45583, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (45584, 2, u'-  assert( op>0 && op<0xff );'), (45655, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (45675, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (45676, 2, u'-  assert( j>=0 && j<p->nLabel );'), (45741, 2, u'-      assert( p->nOp - i >= 3 );'), (45742, 2, u'-      assert( pOp[-1].opcode==OP_Integer );'), (45749, 2, u'-      assert( -1-pOp->p2<p->nLabel );'), (45777, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (45787, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (45828, 2, u'-  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45839, 2, u'-  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45849, 2, u'-  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45860, 2, u'-  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45862, 2, u'-    assert( p->nOp>0 );'), (45966, 2, u'-  assert( p!=0 );'), (45968, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (45975, 2, u'-  assert( addr<p->nOp );'), (46034, 2, u'-  assert( p->nOp>0 || p->aOp==0 );'), (46035, 2, u'-  assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );'), (46047, 2, u'-  assert( p->nOp>0 || p->aOp==0 );'), (46048, 2, u'-  assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );'), (46063, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (46064, 2, u'-  assert( (addr>=0 && addr<p->nOp) || p->db->mallocFailed );'), (46076, 2, u'-  assert( nTemp>=20 );'), (46105, 2, u'-      assert( i<nTemp );'), (46132, 2, u'-      assert( (pMem->flags & MEM_Null)==0 );'), (46161, 2, u'-  assert( zP4!=0 );'), (46172, 2, u'-  assert( i>=0 && i<p->db->nDb );'), (46173, 2, u'-  assert( i<(int)sizeof(p->btreeMask)*8 );'), (46213, 2, u'-      assert( (&p[1])==pEnd || p[0].db==p[1].db );'), (46244, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (46251, 2, u'-      assert( !pMem->xDel );'), (46281, 2, u'-  assert( p->explain );'), (46283, 2, u'-  assert( db->magic==SQLITE_MAGIC_BUSY );'), (46284, 2, u'-  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY || p->rc==SQLITE_NOMEM );'), (46320, 2, u'-      assert( pMem->z!=0 );'), (46345, 2, u'-      assert( p->db->mallocFailed );'), (46353, 2, u'-      assert( pMem->z!=0 );'), (46362, 2, u'-        assert( p->db->mallocFailed );'), (46465, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(*ppFrom) );'), (46504, 2, u'-  assert( p!=0 );'), (46505, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (46509, 2, u'-  assert( p->nOp>0 );'), (46540, 2, u'-    assert( EIGHT_BYTE_ALIGNMENT(zCsr) );'), (46579, 2, u'-    assert( p->aMem[n].db==db );'), (46723, 2, u'-  assert( idx<p->nResColumn );'), (46724, 2, u'-  assert( var<COLNAME_N );'), (46726, 2, u'-    assert( !zName || xDel!=SQLITE_DYNAMIC );'), (46729, 2, u'-  assert( p->aColName!=0 );'), (46732, 2, u'-  assert( rc!=0 || !zName || (pColName->flags&MEM_Term)!=0 );'), (46775, 2, u'-    assert( (db->flags & SQLITE_CommitBusy)==0 );'), (46977, 2, u'-  assert( cnt==db->activeVdbeCnt );'), (46978, 2, u'-  assert( nWrite==db->writeVdbeCnt );'), (47027, 2, u'-    assert( eOp==SAVEPOINT_ROLLBACK || eOp==SAVEPOINT_RELEASE);'), (47028, 2, u'-    assert( db->nStatement>0 );'), (47029, 2, u'-    assert( p->iStatement==(db->nStatement+db->nSavepoint) );'), (47243, 2, u'-    assert( db->activeVdbeCnt>=db->writeVdbeCnt );'), (47259, 2, u'-  assert( db->activeVdbeCnt>0 || db->autoCommit==0 || db->nStatement==0 );'), (47364, 2, u'-    assert( (rc & p->db->errMask)==rc );'), (47403, 2, u'-    assert( db->pVdbe==p );'), (47440, 2, u'-    assert( p->isTable );'), (47537, 2, u'-  assert( pMem->db->mallocFailed || flags&(MEM_Str|MEM_Blob) );'), (47542, 2, u'-  assert( n>=0 );'), (47638, 2, u'-      assert( sizeof(v)==sizeof(pMem->r) );'), (47645, 2, u'-    assert( len<=nBuf );'), (47655, 2, u'-    assert( pMem->n + ((pMem->flags & MEM_Zero)?pMem->u.nZero:0)'), (47657, 2, u'-    assert( pMem->n<=nBuf );'), (47732, 2, u'-      assert( sizeof(r1)==sizeof(t2) && memcmp(&r1, &t2, sizeof(r1))==0 );'), (47742, 2, u'-        assert( sizeof(x)==8 && sizeof(pMem->r)==8 );'), (47822, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (47839, 2, u'-  assert( u<=pKeyInfo->nField + 1 );'), (48073, 2, u'-  assert( pUnpacked->flags & UNPACKED_IGNORE_ROWID );'), (48084, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (48176, 2, u'-    assert(p->pLruNext || p==sqlite3LruStatements.pLast);'), (48177, 2, u'-    assert(!p->pLruNext || p->pLruNext->pLruPrev==p);'), (48178, 2, u'-    assert(p->pLruPrev || p==sqlite3LruStatements.pFirst);'), (48179, 2, u'-    assert(!p->pLruPrev || p->pLruPrev->pLruNext==p);'), (48198, 2, u'-  assert( stmtLruCheck() );'), (48201, 2, u'-    assert( !sqlite3LruStatements.pLast );'), (48205, 2, u'-    assert( !sqlite3LruStatements.pLast->pLruNext );'), (48211, 2, u'-  assert( stmtLruCheck() );'), (48223, 2, u'-    assert( stmtLruCheck() );'), (48236, 2, u'-    assert( stmtLruCheck() );'), (48358, 2, u'-    assert( (rc & (v->db->errMask))==rc );'), (48443, 2, u'-  assert( n>=0 );'), (48444, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48448, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48452, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48458, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48464, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48468, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48472, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48481, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48491, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48500, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48509, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48514, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48518, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48527, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48535, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48554, 2, u'-  assert(p);'), (48637, 2, u'-  assert( rc==SQLITE_ROW  || rc==SQLITE_DONE   || rc==SQLITE_ERROR'), (48640, 2, u'-  assert( p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE );'), (48712, 2, u'-  assert( p && p->pFunc );'), (48721, 2, u'-  assert( p && p->pFunc );'), (48754, 2, u'-  assert( p && p->pFunc && p->pFunc->xStep );'), (48755, 2, u'-  assert( sqlite3_mutex_held(p->s.db->mutex) );'), (48781, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48804, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48844, 2, u'-  assert( p && p->pMem && p->pFunc && p->pFunc->xStep );'), (49029, 2, u'-  assert( db!=0 );'), (49034, 2, u'-    assert( db->mallocFailed==0 );'), (49324, 2, u'-        assert( pOp->p1>0 && pOp->p1<=p->nVar );'), (49378, 2, u'-  assert( pTo->db==pFrom->db );'), (49379, 2, u'-  assert( pTo->nVar==pFrom->nVar );'), (49627, 2, u'-  assert( opcode>0 && opcode<(int)sizeof(opcodeProperty) );'), (49669, 2, u'-  assert( iCur<p->nCursor );'), (49747, 2, u'-    assert( affinity==SQLITE_AFF_INTEGER || affinity==SQLITE_AFF_REAL'), (49799, 2, u'-      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (49802, 2, u'-      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (49805, 2, u'-      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (49836, 2, u'-      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (49839, 2, u'-      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (49842, 2, u'-      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (50046, 2, u'-  assert( n==(db->nSavepoint + db->isTransactionSavepoint) );'), (50108, 2, u'-  assert( p->magic==VDBE_MAGIC_RUN );  /* sqlite3_step() verifies this */'), (50109, 2, u'-  assert( db->magic==SQLITE_MAGIC_BUSY );'), (50116, 2, u'-  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY );'), (50118, 2, u'-  assert( p->explain==0 );'), (50141, 2, u'-    assert( pc>=0 && pc<p->nOp );'), (50211, 2, u'-      assert( pOp->p2>0 );'), (50212, 2, u'-      assert( pOp->p2<=p->nMem );'), (50230, 2, u'-      assert( pOp->p1>0 );'), (50231, 2, u'-      assert( pOp->p1<=p->nMem );'), (50235, 2, u'-        assert( pOp->p2>0 );'), (50236, 2, u'-        assert( pOp->p2<=p->nMem );'), (50240, 2, u'-          assert( pOp->p3>0 );'), (50241, 2, u'-          assert( pOp->p3<=p->nMem );'), (50245, 2, u'-        assert( pOp->p3>0 );'), (50246, 2, u'-        assert( pOp->p3<=p->nMem );'), (50251, 2, u'-      assert( pOp->p2>0 );'), (50252, 2, u'-      assert( pOp->p2<=p->nMem );'), (50256, 2, u'-      assert( pOp->p3>0 );'), (50257, 2, u'-      assert( pOp->p3<=p->nMem );'), (50318, 2, u'-  assert( pOp->p1>0 );'), (50319, 2, u'-  assert( pOp->p1<=p->nMem );'), (50321, 2, u'-  assert( (pIn1->flags & MEM_Dyn)==0 );'), (50334, 2, u'-  assert( pIn1->flags & MEM_Int );'), (50345, 2, u'-  assert( (pIn1->flags & MEM_Dyn)==0 );'), (50392, 2, u'-  assert( rc==SQLITE_BUSY || rc==SQLITE_OK );'), (50417, 2, u'-  assert( pOp->p4.pI64!=0 );'), (50430, 2, u'-  assert( !sqlite3IsNaN(*pOp->p4.pReal) );'), (50441, 2, u'-  assert( pOp->p4.z!=0 );'), (50477, 2, u'-  assert( pOp->p4.z!=0 );'), (50505, 2, u'-  assert( pOp->p1 <= SQLITE_MAX_LENGTH );'), (50525, 2, u'-  assert( j>=0 && j+n<=p->nVar );'), (50526, 2, u'-  assert( k>=1 && k+n-1<=p->nMem );'), (50527, 2, u'-  assert( pOp->p4.z==0 || pOp->p3==1 );'), (50555, 2, u'-  assert( n>0 && p1>0 && p2>0 );'), (50556, 2, u'-  assert( p1+n<=p2 || p2+n<=p1 );'), (50561, 2, u'-    assert( pOut<=&p->aMem[p->nMem] );'), (50562, 2, u'-    assert( pIn1<=&p->aMem[p->nMem] );'), (50582, 2, u'-  assert( pOp->p2>0 );'), (50583, 2, u'-  assert( pOp->p2<=p->nMem );'), (50585, 2, u'-  assert( pOut!=pIn1 );'), (50606, 2, u'-  assert( pOp->p2>0 );'), (50607, 2, u'-  assert( pOp->p2<=p->nMem );'), (50609, 2, u'-  assert( pOut!=pIn1 );'), (50626, 2, u'-  assert( p->nResColumn==pOp->p2 );'), (50627, 2, u'-  assert( pOp->p1>0 );'), (50628, 2, u'-  assert( pOp->p1+pOp->p2<=p->nMem+1 );'), (50642, 2, u'-  assert( p->iStatement==0 || db->flags&SQLITE_CountRows );'), (50684, 2, u'-  assert( pIn1!=pOut );'), (50838, 2, u'-  assert( pOp->p4type==P4_COLLSEQ );'), (50866, 2, u'-  assert( apVal || n==0 );'), (50868, 2, u'-  assert( n==0 || (pOp->p2>0 && pOp->p2+n<=p->nMem+1) );'), (50869, 2, u'-  assert( pOp->p3<pOp->p2 || pOp->p3>=pOp->p2+n );'), (50877, 2, u'-  assert( pOp->p4type==P4_FUNCDEF || pOp->p4type==P4_VDBEFUNC );'), (50886, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (50902, 2, u'-    assert( pOp>p->aOp );'), (50903, 2, u'-    assert( pOp[-1].p4type==P4_COLLSEQ );'), (50904, 2, u'-    assert( pOp[-1].opcode==OP_CollSeq );'), (50995, 2, u'-    default:  assert( pOp->opcode==OP_ShiftRight );'), (51066, 2, u'-  assert( MEM_Str==(MEM_Blob>>3) );'), (51070, 2, u'-  assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (51089, 2, u'-    assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (51243, 2, u'-  assert( pOp->p4type==P4_COLLSEQ || pOp->p4.pColl==0 );'), (51277, 2, u'-  assert( pOp->p4type==P4_INTARRAY );'), (51278, 2, u'-  assert( pOp->p4.ai );'), (51301, 2, u'-  assert( n>0 );'), (51302, 2, u'-  assert( pKeyInfo!=0 );'), (51304, 2, u'-  assert( p1>0 && p1+n<=p->nMem+1 );'), (51306, 2, u'-  assert( p2>0 && p2+n<=p->nMem+1 );'), (51313, 2, u'-    assert( i<pKeyInfo->nField );'), (51462, 2, u'-  assert( pOp->p3==0 || pOp->p1>0 );'), (51537, 2, u'-  assert( p1<p->nCursor );'), (51538, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (51555, 2, u'-  assert( pC!=0 );'), (51557, 2, u'-  assert( pC->pVtabCursor==0 );'), (51579, 2, u'-    assert( pC->pseudoTable );'), (51584, 2, u'-    assert( payloadSize==0 || zRec!=0 );'), (51591, 2, u'-    assert( pDest->flags&MEM_Null );'), (51598, 2, u'-  assert( p2<nField );'), (51613, 2, u'-    assert(aType);'), (51705, 2, u'-    assert( rc==SQLITE_OK );'), (51724, 2, u'-      assert( pDest->flags&MEM_Null );'), (51734, 2, u'-    assert( sMem.z==sMem.zMalloc );'), (51735, 2, u'-    assert( !(pDest->flags & MEM_Dyn) );'), (51736, 2, u'-    assert( !(pDest->flags & (MEM_Blob|MEM_Str)) || pDest->z==sMem.z );'), (51823, 2, u'-  assert( nField>0 && pOp->p2>0 && pOp->p2+nField<=p->nMem+1 );'), (51868, 2, u'-  assert( pOp->p3<pOp->p1 || pOp->p3>=pOp->p1+pOp->p2 );'), (51884, 2, u'-  assert( i==nByte );'), (51886, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (51946, 2, u'-    assert( i>=0 && i<db->nDb );'), (51947, 2, u'-    assert( db->aDb[i].pBt!=0 );'), (51949, 2, u'-    assert( sqlite3BtreeIsInTrans(pBt) );'), (51950, 2, u'-    assert( (p->btreeMask & (1<<i))!=0 );'), (51952, 2, u'-      assert( db->nStatement>=0 && db->nSavepoint>=0 );'), (51974, 2, u'-  assert( db->pSavepoint==0 || db->autoCommit==0 );'), (51975, 2, u'-  assert( p1==SAVEPOINT_BEGIN||p1==SAVEPOINT_RELEASE||p1==SAVEPOINT_ROLLBACK );'), (51976, 2, u'-  assert( db->pSavepoint || db->isTransactionSavepoint==0 );'), (51977, 2, u'-  assert( checkSavepointCount(db) );'), (52082, 2, u'-        assert( pSavepoint==db->pSavepoint );'), (52109, 2, u'-  assert( desiredAutoCommit==1 || desiredAutoCommit==0 );'), (52110, 2, u'-  assert( desiredAutoCommit==1 || rollback==0 );'), (52112, 2, u'-  assert( db->activeVdbeCnt>0 );  /* At least this one VM is active */'), (52131, 2, u'-      assert( desiredAutoCommit==1 );'), (52143, 2, u'-    assert( db->nStatement==0 );'), (52187, 2, u'-  assert( i>=0 && i<db->nDb );'), (52188, 2, u'-  assert( (p->btreeMask & (1<<i))!=0 );'), (52227, 2, u'-  assert( pOp->p3<SQLITE_N_BTREE_META );'), (52232, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (52233, 2, u'-  assert( db->aDb[iDb].pBt!=0 );'), (52234, 2, u'-  assert( (p->btreeMask & (1<<iDb))!=0 );'), (52261, 2, u'-  assert( pOp->p2<SQLITE_N_BTREE_META );'), (52262, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (52263, 2, u'-  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (52265, 2, u'-  assert( pDb->pBt!=0 );'), (52304, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (52305, 2, u'-  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (52399, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (52400, 2, u'-  assert( (p->btreeMask & (1<<iDb))!=0 );'), (52403, 2, u'-  assert( pX!=0 );'), (52413, 2, u'-    assert( p2>0 );'), (52414, 2, u'-    assert( p2<=p->nMem );'), (52423, 2, u'-  assert( i>=0 );'), (52510, 2, u'-  assert( i>=0 );'), (52527, 2, u'-      assert( pOp->p4type==P4_KEYINFO );'), (52530, 2, u'-        assert( pgno==MASTER_ROOT+1 );'), (52572, 2, u'-  assert( i>=0 );'), (52590, 2, u'-  assert( i>=0 && i<p->nCursor );'), (52655, 2, u'-  assert( i>=0 && i<p->nCursor );'), (52656, 2, u'-  assert( pOp->p2!=0 );'), (52658, 2, u'-  assert( pC!=0 );'), (52684, 2, u'-        assert( (pIn3->flags & MEM_Real)!=0 );'), (52710, 2, u'-          assert( oc==OP_SeekLe || oc==OP_SeekGt );'), (52725, 2, u'-      assert( pOp->p4type==P4_INT32 );'), (52726, 2, u'-      assert( nField>0 );'), (52755, 2, u'-      assert( oc==OP_SeekLt || oc==OP_SeekLe );'), (52767, 2, u'-    assert( pOp->p2>0 );'), (52794, 2, u'-  assert( i>=0 && i<p->nCursor );'), (52796, 2, u'-  assert( pC!=0 );'), (52798, 2, u'-    assert( pC->isTable );'), (52843, 2, u'-  assert( i>=0 && i<p->nCursor );'), (52844, 2, u'-  assert( p->apCsr[i]!=0 );'), (52849, 2, u'-    assert( pC->isTable==0 );'), (52850, 2, u'-    assert( pIn3->flags & MEM_Blob );'), (52905, 2, u'-  assert( pOp->p4type==P4_INT32 );'), (52906, 2, u'-  assert( pOp->p4.i>0 && pOp->p4.i<=p->nMem );'), (52910, 2, u'-  assert( i>=0 && i<p->nCursor );'), (52912, 2, u'-  assert( pCx!=0 );'), (52921, 2, u'-    assert( pK->flags & MEM_Blob );'), (52932, 2, u'-    assert( pCx->deferredMoveto==0 );'), (52974, 2, u'-    assert( pIn3->flags&MEM_Int );'), (52997, 2, u'-  assert( i>=0 && i<p->nCursor );'), (52998, 2, u'-  assert( p->apCsr[i]!=0 );'), (53002, 2, u'-    assert( pIn3->flags & MEM_Int );'), (53003, 2, u'-    assert( p->apCsr[i]->isTable );'), (53012, 2, u'-      assert( pC->rowidIsValid==0 );'), (53018, 2, u'-    assert( pC->isTable );'), (53020, 2, u'-    assert( pC->rowidIsValid==0 );'), (53034, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53035, 2, u'-  assert( p->apCsr[i]!=0 );'), (53060, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53061, 2, u'-  assert( p->apCsr[i]!=0 );'), (53104, 2, u'-    assert( (sqlite3BtreeFlags(pC->pCursor) & BTREE_INTKEY)!=0 );'), (53105, 2, u'-    assert( (sqlite3BtreeFlags(pC->pCursor) & BTREE_ZERODATA)==0 );'), (53140, 2, u'-        assert( pOp->p3>0 && pOp->p3<=p->nMem ); /* P3 is a valid memory cell */'), (53144, 2, u'-        assert( (pMem->flags & MEM_Int)!=0 );  /* mem(P3) holds an integer */'), (53159, 2, u'-      assert( pOp->p3==0 );  /* SQLITE_FULL must have occurred prior to this */'), (53222, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53224, 2, u'-  assert( pC!=0 );'), (53225, 2, u'-  assert( pC->pCursor!=0 || pC->pseudoTable );'), (53226, 2, u'-  assert( pKey->flags & MEM_Int );'), (53227, 2, u'-  assert( pC->isTable );'), (53238, 2, u'-    assert( pData->flags & (MEM_Blob|MEM_Str) );'), (53283, 2, u'-    assert( pC->isTable );'), (53285, 2, u'-    assert( pC->iDb>=0 );'), (53315, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53317, 2, u'-  assert( pC!=0 );'), (53318, 2, u'-  assert( pC->pCursor!=0 );  /* Only valid for real tables, no pseudotables */'), (53324, 2, u'-    assert( pC->isTable );'), (53325, 2, u'-    assert( pC->rowidIsValid );  /* lastRowid set by previous OP_NotFound */'), (53340, 2, u'-    assert( pC->iDb>=0 );'), (53391, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53393, 2, u'-  assert( pC->isTable || pOp->opcode==OP_RowKey );'), (53394, 2, u'-  assert( pC->isIndex || pOp->opcode==OP_RowData );'), (53395, 2, u'-  assert( pC!=0 );'), (53396, 2, u'-  assert( pC->nullRow==0 );'), (53397, 2, u'-  assert( pC->pseudoTable==0 );'), (53398, 2, u'-  assert( pC->pCursor!=0 );'), (53404, 2, u'-    assert( !pC->isTable );'), (53441, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53443, 2, u'-  assert( pC!=0 );'), (53454, 2, u'-    assert( pC->pCursor!=0 );'), (53473, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53475, 2, u'-  assert( pC!=0 );'), (53498, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53500, 2, u'-  assert( pC!=0 );'), (53502, 2, u'-  assert( pCrsr!=0 );'), (53549, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53551, 2, u'-  assert( pC!=0 );'), (53562, 2, u'-  assert( pOp->p2>0 && pOp->p2<p->nOp );'), (53596, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (53602, 2, u'-  assert( pCrsr );'), (53604, 2, u'-  assert( pC->deferredMoveto==0 );'), (53636, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53637, 2, u'-  assert( p->apCsr[i]!=0 );'), (53638, 2, u'-  assert( pIn2->flags & MEM_Blob );'), (53640, 2, u'-    assert( pC->isTable==0 );'), (53646, 2, u'-      assert( pC->deferredMoveto==0 );'), (53663, 2, u'-  assert( pOp->p3>0 );'), (53664, 2, u'-  assert( pOp->p2>0 && pOp->p2+pOp->p3<=p->nMem+1 );'), (53665, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53666, 2, u'-  assert( p->apCsr[i]!=0 );'), (53678, 2, u'-    assert( pC->deferredMoveto==0 );'), (53698, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53699, 2, u'-  assert( p->apCsr[i]!=0 );'), (53704, 2, u'-    assert( pC->deferredMoveto==0 );'), (53705, 2, u'-    assert( pC->isTable==0 );'), (53749, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53750, 2, u'-  assert( p->apCsr[i]!=0 );'), (53754, 2, u'-    assert( pC->deferredMoveto==0 );'), (53755, 2, u'-    assert( pOp->p5==0 || pOp->p5==1 );'), (53756, 2, u'-    assert( pOp->p4type==P4_INT32 );'), (53769, 2, u'-      assert( pOp->opcode==OP_IdxGE );'), (53818, 2, u'-    assert( iCnt==1 );'), (53819, 2, u'-    assert( (p->btreeMask & (1<<iDb))!=0 );'), (53852, 2, u'-  assert( (p->btreeMask & (1<<pOp->p2))!=0 );'), (53892, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (53893, 2, u'-  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (53895, 2, u'-  assert( pDb->pBt!=0 );'), (53922, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (53945, 2, u'-  assert( sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (53961, 2, u'-      assert( db->init.busy==0 );'), (53964, 2, u'-      assert( !db->mallocFailed );'), (53988, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (54061, 2, u'-  assert( nRoot>0 );'), (54064, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54066, 2, u'-  assert( (pnErr->flags & MEM_Int)!=0 );'), (54067, 2, u'-  assert( (pnErr->flags & (MEM_Str|MEM_Blob))==0 );'), (54073, 2, u'-  assert( pOp->p5<db->nDb );'), (54074, 2, u'-  assert( (p->btreeMask & (1<<pOp->p5))!=0 );'), (54081, 2, u'-    assert( z==0 );'), (54103, 2, u'-  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (54105, 2, u'-  assert( pOp->p2>0 && pOp->p2<=p->nMem );'), (54107, 2, u'-  assert( (pVal->flags & MEM_Int)!=0 );'), (54125, 2, u'-  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (54137, 2, u'-    assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54155, 2, u'-  assert( i>=0 );'), (54177, 2, u'-  assert( p->contextStackTop>=0 );'), (54211, 2, u'-  assert( pIn1->flags&MEM_Int );'), (54226, 2, u'-  assert( pIn1->flags&MEM_Int );'), (54241, 2, u'-  assert( pIn1->flags&MEM_Int );'), (54265, 2, u'-  assert( n>=0 );'), (54268, 2, u'-  assert( apVal || n==0 );'), (54274, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54285, 2, u'-    assert( pOp>p->aOp );'), (54286, 2, u'-    assert( pOp[-1].p4type==P4_COLLSEQ );'), (54287, 2, u'-    assert( pOp[-1].opcode==OP_CollSeq );'), (54313, 2, u'-  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (54315, 2, u'-  assert( (pMem->flags & ~(MEM_Null|MEM_Agg))==0 );'), (54354, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (54355, 2, u'-  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (54402, 2, u'-  assert( p1>=0 && p1<db->nDb );'), (54403, 2, u'-  assert( (p->btreeMask & (1<<p1))!=0 );'), (54404, 2, u'-  assert( isWriteLock==0 || isWriteLock==1 );'), (54476, 2, u'-  assert(pVtab && pModule);'), (54532, 2, u'-  assert( pCur->pVtabCursor );'), (54538, 2, u'-  assert( (pQuery->flags&MEM_Int)!=0 && pArgc->flags==MEM_Int );'), (54588, 2, u'-  assert( pCur->pVtabCursor );'), (54594, 2, u'-  assert( pModule->xRowid );'), (54621, 2, u'-  assert( pCur->pVtabCursor );'), (54622, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54630, 2, u'-  assert( pModule->xColumn );'), (54679, 2, u'-  assert( pCur->pVtabCursor );'), (54685, 2, u'-  assert( pModule->xNext );'), (54725, 2, u'-  assert( pVtab->pModule->xRename );'), (54771, 2, u'-  assert( pOp->p4type==P4_VTAB );'), (54794, 2, u'-      assert( nArg>1 && apArg[0] && (apArg[0]->flags&MEM_Null) );'), (54886, 2, u'-    assert( pc>=-1 && pc<p->nOp );'), (54906, 2, u'-  assert( rc );'), (54945, 2, u'-  assert( p->zErrMsg==0 );'), (54956, 2, u'-  assert( db->u1.isInterrupted );'), (55270, 2, u'-    assert( db == v->db );'), (55379, 2, u'-        assert(p->iSize<=p->nBuf);'), (55643, 2, u'-  assert( iOfst+iAmt<=p->endpoint.iOffset );'), (55688, 2, u'-  assert(iOfst==p->endpoint.iOffset);'), (55704, 2, u'-        assert( p->pFirst );'), (55707, 2, u'-        assert( !p->pFirst );'), (55728, 2, u'-  assert(size==0);'), (55759, 2, u'-  assert( 0 );                                                 /*NO_TEST*/'), (55796, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(p) );'), (56015, 2, u'-  assert( iCol>=0 && iCol<pEList->nExpr );'), (56017, 2, u'-  assert( pOrig!=0 );'), (56018, 2, u'-  assert( pOrig->flags & EP_Resolved );'), (56087, 2, u'-  assert( pNC ); /* the name context cannot be NULL. */'), (56088, 2, u'-  assert( pColumnToken && pColumnToken->z ); /* The Z in X.Y.Z cannot be NULL */'), (56114, 2, u'-        assert( pTab!=0 && pTab->zName!=0 );'), (56116, 2, u'-        assert( pTab->nCol>0 );'), (56181, 2, u'-        assert( pTriggerStack->pTab );'), (56186, 2, u'-        assert( pTriggerStack->pTab );'), (56240, 2, u'-          assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (56241, 2, u'-          assert( pExpr->x.pList==0 );'), (56242, 2, u'-          assert( pExpr->x.pSelect==0 );'), (56252, 2, u'-          assert( zTab==0 && zDb==0 );'), (56312, 2, u'-    assert( pMatch->iCursor==pExpr->iTable );'), (56329, 2, u'-    assert( pNC!=0 );'), (56334, 2, u'-      assert( pTopNC!=0 );'), (56361, 2, u'-  assert( pNC!=0 );'), (56363, 2, u'-  assert( pParse==pWalker->pParse );'), (56372, 2, u'-      assert( pSrcList->a[i].iCursor>=0 && pSrcList->a[i].iCursor<pParse->nTab);'), (56386, 2, u'-      assert( pSrcList && pSrcList->nSrc==1 );'), (56420, 2, u'-        assert( pRight->op==TK_DOT );'), (56444, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (56509, 2, u'-        assert( pNC->nRef>=nRef );'), (56592, 2, u'-  assert( sqlite3ExprIsInteger(pE, &i)==0 );'), (56682, 2, u'-    assert( pEList!=0 );'), (56698, 2, u'-            assert(pDup);'), (56763, 2, u'-  assert( pEList!=0 );  /* sqlite3SelectNew() guarantees this */'), (56860, 2, u'-  assert( p!=0 );'), (56885, 2, u'-    assert( (p->selFlags & SF_Expanded)!=0 );'), (56886, 2, u'-    assert( (p->selFlags & SF_Resolved)==0 );'), (56908, 2, u'-    assert( pEList!=0 );'), (56932, 2, u'-    assert( (p->selFlags & SF_Aggregate)==0 );'), (57120, 2, u'-  assert( p!=0 );'), (57166, 2, u'-    assert( pExpr->flags&EP_xIsSelect );'), (57181, 2, u'-    assert( pExpr->pTab && j<pExpr->pTab->nCol );'), (57269, 2, u'-    assert( aff1==0 || aff2==0 );'), (57280, 2, u'-  assert( pExpr->op==TK_EQ || pExpr->op==TK_IN || pExpr->op==TK_LT ||'), (57283, 2, u'-  assert( pExpr->pLeft );'), (57341, 2, u'-  assert( pLeft );'), (57343, 2, u'-    assert( pLeft->pColl );'), (57346, 2, u'-    assert( pRight->pColl );'), (57536, 2, u'-    assert( pToken->dyn==0 );'), (57637, 2, u'-  assert( pRight!=0 );'), (57638, 2, u'-  assert( pLeft!=0 );'), (57655, 2, u'-  assert( pToken );'), (57663, 2, u'-  assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (57664, 2, u'-  assert( pToken->dyn==0 );'), (57693, 2, u'-  assert( pToken->n>=1 );'), (57694, 2, u'-  assert( pToken->z!=0 );'), (57695, 2, u'-  assert( pToken->z[0]!=0 );'), (57744, 2, u'-        assert( pParse->apVarExpr!=0 );'), (57796, 2, u'-    assert( (p->vvaFlags & EVVA_ReadOnlyToken)==0 );'), (57892, 2, u'-    assert( pzBuffer==0 || isReduced );'), (57911, 2, u'-        assert( ExprHasProperty(p, EP_Reduced)==0 );'), (58134, 2, u'-  assert( p==0 );'), (58156, 2, u'-    assert( pList->nAlloc==0 );'), (58168, 2, u'-  assert( pList->a!=0 );'), (58209, 2, u'-  assert( pList->a!=0 || (pList->nExpr==0 && pList->nAlloc==0) );'), (58210, 2, u'-  assert( pList->nExpr<=pList->nAlloc );'), (58391, 2, u'-  assert( pSrc!=0 );'), (58492, 2, u'-    assert(v);'), (58610, 2, u'-    assert( testAddr>0 || pParse->db->mallocFailed );'), (58653, 2, u'-        assert( !isRowid );'), (58656, 2, u'-        assert( (pExpr->iTable&0x0000FFFF)==pExpr->iTable );'), (58703, 2, u'-          assert( pParse->disableColCache>0 );'), (58734, 2, u'-      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (58784, 2, u'-  assert( z || v==0 || sqlite3VdbeDb(v)->mallocFailed );'), (58785, 2, u'-  assert( !z || !sqlite3Isdigit(z[n]) );'), (58819, 2, u'-    assert( !sqlite3Isdigit(z[n]) );'), (58874, 2, u'-  assert( v!=0 );'), (59013, 2, u'-  assert( pOp || pParse->db->mallocFailed );'), (59048, 2, u'-  assert( iAlias>0 && iAlias<=pParse->nAlias );'), (59083, 2, u'-  assert( v!=0 || db->mallocFailed );'), (59084, 2, u'-  assert( target>0 && target<=pParse->nMem );'), (59097, 2, u'-        assert( pCol->iMem>0 );'), (59110, 2, u'-        assert( pParse->ckBase>0 );'), (59143, 2, u'-      assert( pExpr->token.n>=3 );'), (59144, 2, u"-      assert( pExpr->token.z[0]=='x' || pExpr->token.z[0]=='X' );"), (59145, 2, u"-      assert( pExpr->token.z[1]=='\\'' );"), (59146, 2, u"-      assert( pExpr->token.z[pExpr->token.n-1]=='\\'' );"), (59193, 2, u'-      assert( to_op==OP_ToText    || aff!=SQLITE_AFF_TEXT    );'), (59194, 2, u'-      assert( to_op==OP_ToBlob    || aff!=SQLITE_AFF_NONE    );'), (59195, 2, u'-      assert( to_op==OP_ToNumeric || aff!=SQLITE_AFF_NUMERIC );'), (59196, 2, u'-      assert( to_op==OP_ToInt     || aff!=SQLITE_AFF_INTEGER );'), (59197, 2, u'-      assert( to_op==OP_ToReal    || aff!=SQLITE_AFF_REAL    );'), (59219, 2, u'-      assert( TK_LT==OP_Lt );'), (59220, 2, u'-      assert( TK_LE==OP_Le );'), (59221, 2, u'-      assert( TK_GT==OP_Gt );'), (59222, 2, u'-      assert( TK_GE==OP_Ge );'), (59223, 2, u'-      assert( TK_EQ==OP_Eq );'), (59224, 2, u'-      assert( TK_NE==OP_Ne );'), (59251, 2, u'-      assert( TK_AND==OP_And );'), (59252, 2, u'-      assert( TK_OR==OP_Or );'), (59253, 2, u'-      assert( TK_PLUS==OP_Add );'), (59254, 2, u'-      assert( TK_MINUS==OP_Subtract );'), (59255, 2, u'-      assert( TK_REM==OP_Remainder );'), (59256, 2, u'-      assert( TK_BITAND==OP_BitAnd );'), (59257, 2, u'-      assert( TK_BITOR==OP_BitOr );'), (59258, 2, u'-      assert( TK_SLASH==OP_Divide );'), (59259, 2, u'-      assert( TK_LSHIFT==OP_ShiftLeft );'), (59260, 2, u'-      assert( TK_RSHIFT==OP_ShiftRight );'), (59261, 2, u'-      assert( TK_CONCAT==OP_Concat );'), (59282, 2, u'-      assert( pLeft );'), (59299, 2, u'-      assert( TK_BITNOT==OP_BitNot );'), (59300, 2, u'-      assert( TK_NOT==OP_Not );'), (59312, 2, u'-      assert( TK_ISNULL==OP_IsNull );'), (59313, 2, u'-      assert( TK_NOTNULL==OP_NotNull );'), (59346, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (59358, 2, u'-      assert( pDef!=0 );'), (59579, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList );'), (59580, 2, u'-      assert((pExpr->x.pList->nExpr % 2) == 0);'), (59581, 2, u'-      assert(pExpr->x.pList->nExpr > 0);'), (59599, 2, u'-          assert( pTest!=0 );'), (59619, 2, u'-      assert( pParse->disableColCache>0 );'), (59631, 2, u'-         assert( pExpr->affinity==OE_Rollback ||'), (59638, 2, u'-         assert( pExpr->affinity == OE_Ignore );'), (59681, 2, u'-  assert( target>0 && target<=pParse->nMem );'), (59683, 2, u'-  assert( pParse->pVdbe || pParse->db->mallocFailed );'), (59706, 2, u'-  assert( target>0 );'), (59796, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (59847, 2, u'-  assert( pList!=0 );'), (59848, 2, u'-  assert( target>0 );'), (59888, 2, u'-  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (59899, 2, u'-      assert( pParse->disableColCache>0 );'), (59910, 2, u'-      assert( pParse->disableColCache>0 );'), (59925, 2, u'-      assert( TK_LT==OP_Lt );'), (59926, 2, u'-      assert( TK_LE==OP_Le );'), (59927, 2, u'-      assert( TK_GT==OP_Gt );'), (59928, 2, u'-      assert( TK_GE==OP_Ge );'), (59929, 2, u'-      assert( TK_EQ==OP_Eq );'), (59930, 2, u'-      assert( TK_NE==OP_Ne );'), (59948, 2, u'-      assert( TK_ISNULL==OP_IsNull );'), (59949, 2, u'-      assert( TK_NOTNULL==OP_NotNull );'), (59972, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (60018, 2, u'-  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (60043, 2, u'-  assert( pExpr->op!=TK_ISNULL || op==OP_NotNull );'), (60044, 2, u'-  assert( pExpr->op!=TK_NOTNULL || op==OP_IsNull );'), (60045, 2, u'-  assert( pExpr->op!=TK_NE || op==OP_Eq );'), (60046, 2, u'-  assert( pExpr->op!=TK_EQ || op==OP_Ne );'), (60047, 2, u'-  assert( pExpr->op!=TK_LT || op==OP_Ge );'), (60048, 2, u'-  assert( pExpr->op!=TK_LE || op==OP_Gt );'), (60049, 2, u'-  assert( pExpr->op!=TK_GT || op==OP_Le );'), (60050, 2, u'-  assert( pExpr->op!=TK_GE || op==OP_Lt );'), (60059, 2, u'-      assert( pParse->disableColCache>0 );'), (60070, 2, u'-      assert( pParse->disableColCache>0 );'), (60124, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (60339, 2, u'-            assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (60525, 2, u'-      assert( len>0 );'), (60584, 2, u'-      assert( len>0 );'), (60675, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (60677, 2, u'-  assert( iDb>=0 );'), (60683, 2, u'-    assert( iTrigDb==iDb || iTrigDb==1 );'), (60729, 2, u'-  assert( pSrc->nSrc==1 );'), (60730, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (60897, 2, u'-  assert( pNew );'), (60899, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (60906, 2, u'-  assert( pTab );'), (61009, 2, u'-  assert( pParse->pNewTable==0 );'), (61010, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (61028, 2, u'-  assert( pTab->addColOffset>0 );'), (61044, 2, u'-  assert( pNew->nCol>0 );'), (61046, 2, u'-  assert( nAlloc>=pNew->nCol && nAlloc%8==0 && nAlloc-pNew->nCol<8 );'), (61118, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (61119, 2, u'-  assert( sqlite3VdbeDb(v)==db );'), (61184, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (61186, 2, u'-  assert( iDb>=0 );'), (61209, 2, u'-    assert( iDb==sqlite3SchemaToIndex(pParse->db, pIdx->pSchema) );'), (61343, 2, u'-  assert( pTab!=0 );'), (61344, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (61375, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (61442, 2, u'-  assert( argc==2 );'), (61474, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (61475, 2, u'-  assert( db->aDb[iDb].pBt!=0 );'), (61476, 2, u'-  assert( sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (61706, 2, u'-    assert( iDb>=2 );'), (61813, 2, u'-  assert( db->mallocFailed || pAuthArg );'), (61845, 2, u'-  assert( v || db->mallocFailed );'), (61848, 2, u'-    assert( pFunc->nArg==-1 || (pFunc->nArg&0xff)==pFunc->nArg );'), (61926, 2, u'-  assert( db->nDb>iDb );'), (62188, 2, u'-    assert( pExpr->iTable==pStack->newIdx || pExpr->iTable==pStack->oldIdx );'), (62193, 2, u'-    assert( pExpr->iColumn<pTab->nCol );'), (62196, 2, u'-    assert( pTab->iPKey<pTab->nCol );'), (62201, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (62478, 2, u'-    assert( pParse->disableColCache==0 );  /* Disables and re-enables match */'), (62515, 2, u'-  assert( pParse->nested<10 );  /* Nesting should only be of limited depth */'), (62548, 2, u'-  assert( zName!=0 );'), (62616, 2, u'-    assert( pSchema || (j==1 && !db->aDb[1].pBt) );'), (62648, 2, u'-  assert( pOld==0 || pOld==p );'), (62693, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (62701, 2, u'-      assert(i==1 || (pDb->pBt && sqlite3BtreeHoldsMutex(pDb->pBt)));'), (62706, 2, u'-  assert( iDb==0 );'), (62758, 2, u'-  assert( pTable!=0 );'), (62795, 2, u'-  assert( pTable->nRef==0 );'), (62801, 2, u'-    assert( pIndex->pSchema==pTable->pSchema );'), (62811, 2, u'-    assert( sqlite3HashFind(&pTable->pSchema->aFKey,'), (62839, 2, u'-  assert( db!=0 );'), (62840, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (62841, 2, u'-  assert( zTabName && zTabName[0] );'), (62975, 2, u'-    assert( db->init.iDb==0 || db->init.busy );'), (63065, 2, u'-  assert( (isTemp & 1)==isTemp );'), (63466, 2, u'-    assert( autoInc==0 || autoInc==1 );'), (63529, 2, u'-      assert( pIdx->nColumn==1 );'), (63770, 2, u'-      assert( (int)(sqlite3Strlen30(z)+k+1)<=n );'), (63814, 2, u'-  assert( !db->init.busy || !pSelect );'), (63900, 2, u'-      assert(pParse->nTab==1);'), (63910, 2, u'-        assert( p->aCol==0 );'), (63978, 2, u'-      assert( p==pOld );  /* Malloc must have failed inside HashInsert() */'), (64001, 2, u'-      assert( !pSelect && pCons && pEnd );'), (64102, 2, u'-  assert( pTable );'), (64131, 2, u'-  assert( pTable->nCol>=0 );'), (64140, 2, u'-  assert( pTable->pSelect );'), (64159, 2, u'-      assert( pTable->aCol==0 );'), (64306, 2, u'-      assert( pIdx->pSchema==pTab->pSchema );'), (64335, 2, u'-  assert( pName->nSrc==1 );'), (64346, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (64431, 2, u'-      assert( pTrigger->pSchema==pTab->pSchema ||'), (64522, 2, u'-  assert( pTo!=0 );'), (64620, 2, u'-  assert( isDeferred==0 || isDeferred==1 );'), (64752, 2, u'-    assert( pName1 && pName2 );'), (64774, 2, u'-      assert(0);'), (64779, 2, u'-    assert( db->aDb[iDb].pSchema==pTab->pSchema );'), (64781, 2, u'-    assert( pName==0 );'), (64953, 2, u'-      assert( pListItem->pExpr->pColl );'), (64989, 2, u'-      assert( pIdx->onError!=OE_None );'), (64990, 2, u'-      assert( pIdx->autoIndex );'), (64991, 2, u'-      assert( pIndex->onError!=OE_None );'), (65032, 2, u'-      assert( p==pIndex );  /* Malloc must have failed */'), (65186, 2, u'-  assert( a!=0 );'), (65213, 2, u'-  assert( pName->nSrc==1 );'), (65399, 2, u'-  assert( iStart>=0 );'), (65400, 2, u'-  assert( nExtra>=1 );'), (65402, 2, u'-    assert( db->mallocFailed );'), (65414, 2, u'-      assert( db->mallocFailed );'), (65505, 2, u'-  assert(pList || pParse->db->mallocFailed );'), (65589, 2, u'-    assert( pItem->notIndexed==0 && pItem->zIndex==0 );'), (65692, 2, u'-    assert( !SAVEPOINT_BEGIN && SAVEPOINT_RELEASE==1 && SAVEPOINT_ROLLBACK==2 );'), (65725, 2, u'-    assert( (db->flags & SQLITE_InTrans)==0 || db->autoCommit );'), (65726, 2, u'-    assert( db->aDb[1].pSchema );'), (65767, 2, u'-    assert( iDb<db->nDb );'), (65768, 2, u'-    assert( db->aDb[iDb].pBt!=0 || iDb==1 );'), (65769, 2, u'-    assert( iDb<SQLITE_MAX_ATTACHED+2 );'), (65853, 2, u'-    assert( pDb!=0 );'), (65897, 2, u'-    assert( pName1->z );'), (65952, 2, u'-    assert( &pKey->aSortOrder[nCol]==&(((u8 *)pKey)[nBytes]) );'), (65955, 2, u'-      assert( zColl );'), (65996, 2, u'-  assert( !db->xCollNeeded || !db->xCollNeeded16 );'), (66077, 2, u'-  assert( !p || p->xCmp );'), (66103, 2, u'-    assert( p==pColl );'), (66151, 2, u'-      assert( pDel==0 || pDel==pColl );'), (66188, 2, u'-  assert( SQLITE_UTF8==1 && SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (66189, 2, u'-  assert( enc>=SQLITE_UTF8 && enc<=SQLITE_UTF16BE );'), (66312, 2, u'-  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (66395, 2, u'-    assert( pTab->dbMem==0 );'), (66453, 2, u'-  assert( pItem && pSrc->nSrc==1 );'), (66504, 2, u'-  assert( opcode==OP_OpenWrite || opcode==OP_OpenRead );'), (66583, 2, u'-    assert( pOffset == 0 );'), (66682, 2, u'-  assert( pTabList->nSrc==1 );'), (66711, 2, u'-  assert( iDb<db->nDb );'), (66714, 2, u'-  assert( rcauth==SQLITE_OK || rcauth==SQLITE_DENY || rcauth==SQLITE_IGNORE );'), (66718, 2, u'-  assert(!isView || pTrigger);'), (66734, 2, u'-  assert( pTabList->nSrc==1 );'), (66805, 2, u'-    assert( !isView );'), (66811, 2, u'-      assert( pIdx->pSchema==pTab->pSchema );'), (67102, 2, u'-  assert( argc>1 );'), (67105, 2, u'-  assert( pColl );'), (67106, 2, u'-  assert( mask==-1 || mask==0 );'), (67150, 2, u'-  assert( argc==1 );'), (67181, 2, u'-  assert( argc==1 );'), (67231, 2, u'-  assert( argc==3 || argc==2 );'), (67242, 2, u'-    assert( len==sqlite3_value_bytes(argv[0]) );'), (67280, 2, u'-  assert( p1>=0 && p2>=0 );'), (67307, 2, u'-  assert( argc==1 || argc==2 );'), (67332, 2, u'-  assert( nByte>0 );'), (67358, 2, u'-  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (67378, 2, u'-  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (67446, 2, u'-  assert( argc==1 );'), (67591, 2, u'-        assert( esc==0 );         /* This is GLOB, not LIKE */'), (67592, 2, u"-        assert( matchSet<0x80 );  /* '[' is a single-byte character */"), (67621, 2, u'-      assert( esc==0 );    /* This only occurs for GLOB, not LIKE */'), (67713, 2, u'-  assert( zB==sqlite3_value_text(argv[0]) );  /* Encoding did not change */'), (67787, 2, u'-  assert( argc==1 );'), (67799, 2, u'-      assert( zBlob==sqlite3_value_blob(argv[0]) ); /* No encoding change */'), (67840, 2, u'-      assert( sqlite3_value_type(argv[0])==SQLITE_NULL );'), (67859, 2, u'-  assert( argc==1 );'), (67863, 2, u'-  assert( pBlob==sqlite3_value_blob(argv[0]) );  /* No encoding change */'), (67886, 2, u'-  assert( argc==1 );'), (67920, 2, u'-  assert( argc==3 );'), (67925, 2, u'-  assert( zStr==sqlite3_value_text(argv[0]) );  /* No encoding change */'), (67928, 2, u'-    assert( sqlite3_value_type(argv[1])==SQLITE_NULL'), (67933, 2, u'-    assert( sqlite3_value_type(argv[1])!=SQLITE_NULL );'), (67938, 2, u'-  assert( zPattern==sqlite3_value_text(argv[1]) );  /* No encoding change */'), (67942, 2, u'-  assert( zRep==sqlite3_value_text(argv[2]) );'), (67944, 2, u'-  assert( nOut<SQLITE_MAX_LENGTH );'), (67976, 2, u'-  assert( j+nStr-i+1==nOut );'), (67979, 2, u'-  assert( j<=nOut );'), (68008, 2, u'-  assert( zIn==sqlite3_value_text(argv[0]) );'), (68091, 2, u'-  assert( argc==1 );'), (68169, 2, u'-  assert( argc==1 );'), (68242, 2, u'-  assert( argc==1 || p==0 || p->n>0x7fffffff'), (68311, 2, u'-  assert( argc==1 || argc==2 );'), (68360, 2, u'-    assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (68418, 2, u'-  assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (68430, 2, u'-  assert( (char*)&likeInfoAlt == (char*)&likeInfoAlt.matchAll );'), (68431, 2, u'-  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );'), (68432, 2, u'-  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );'), (68647, 2, u'-    assert( pOp!=0 );'), (68662, 2, u'-      assert( pOp->p4.pVtab!=0 );'), (68663, 2, u'-      assert( pOp->p4type==P4_VTAB );'), (68701, 2, u'-    assert( v );'), (68754, 2, u'-    assert( v );'), (68944, 2, u'-  assert( pTabList->nSrc==1 );'), (68952, 2, u'-  assert( iDb<db->nDb );'), (68974, 2, u'-  assert( (pTrigger && tmask) || (pTrigger==0 && tmask==0) );'), (68983, 2, u'-  assert( pTab!=0 );'), (69016, 2, u'-    assert( !pTrigger );'), (69017, 2, u'-    assert( pList==0 );'), (69078, 2, u'-    assert( pSelect->pEList );'), (69080, 2, u'-    assert( dest.nMem==nColumn );'), (69134, 2, u'-    assert( useTempTable==0 );'), (69296, 2, u'-      assert( pSelect==0 );  /* Otherwise useTempTable is true */'), (69307, 2, u'-    assert(!IsVirtual(pTab));'), (69325, 2, u'-        assert( pSelect==0 ); /* Otherwise useTempTable is true */'), (69418, 2, u'-          assert( IsVirtual(pTab) );'), (69636, 2, u'-  assert( v!=0 );'), (69637, 2, u'-  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (69658, 2, u'-    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (69737, 2, u'-          assert( seenReplace==0 );'), (69798, 2, u'-    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (69831, 2, u'-        assert( seenReplace==0 );'), (69875, 2, u'-  assert( v!=0 );'), (69876, 2, u'-  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (69929, 2, u'-  assert( v!=0 );'), (69933, 2, u'-    assert( pIdx->pSchema==pTab->pSchema );'), (69983, 2, u'-  assert( pDest && pSrc );'), (69984, 2, u'-  assert( pDest->pTable!=pSrc->pTable );'), (70078, 2, u'-  assert(pSelect->pSrc);   /* allocated even if there is no FROM clause */'), (70099, 2, u'-  assert( pSelect->pOffset==0 );  /* Must be so if pLimit==0 */'), (70107, 2, u'-  assert( pEList!=0 );'), (70111, 2, u'-  assert( pEList->a[0].pExpr );'), (70220, 2, u'-    assert( (pDest->tabFlags & TF_Autoincrement)==0 );'), (70232, 2, u'-    assert( pSrcIdx );'), (70327, 2, u'-    assert( rc==SQLITE_OK || pStmt==0 );'), (70358, 2, u'-            assert( azCols[i]!=0 );'), (70412, 2, u'-  assert( (rc&db->errMask)==rc );'), (71241, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (71340, 2, u'-    assert( (rc&0xff)==rc );'), (71605, 2, u'-      assert( v!=0 );  /* Already allocated by sqlite3Pragma() */'), (71641, 2, u'-                      assert( action==OE_Restrict ); break;'), (71700, 2, u'-  assert( pId2 );'), (71769, 2, u'-    assert( pBt!=0 );'), (71796, 2, u'-    assert( pBt!=0 );'), (71848, 2, u'-        assert(pDb==&db->aDb[0]);'), (71859, 2, u'-    assert(eMode==PAGER_LOCKINGMODE_NORMAL||eMode==PAGER_LOCKINGMODE_EXCLUSIVE);'), (71906, 2, u'-        assert(pDb==&db->aDb[0]);'), (71918, 2, u'-    assert( eMode==PAGER_JOURNALMODE_DELETE'), (71959, 2, u'-    assert( pBt!=0 );'), (71973, 2, u'-      assert( eAuto>=0 && eAuto<=2 );'), (72249, 2, u'-          assert( p->z );'), (72277, 2, u'-        assert( pTab->nCol>cnum );'), (72321, 2, u'-      assert( db->aDb[i].zName!=0 );'), (72623, 2, u'-      assert( encnames[SQLITE_UTF8].enc==SQLITE_UTF8 );'), (72624, 2, u'-      assert( encnames[SQLITE_UTF16LE].enc==SQLITE_UTF16LE );'), (72625, 2, u'-      assert( encnames[SQLITE_UTF16BE].enc==SQLITE_UTF16BE );'), (72691, 2, u'-        assert(iDb<=0);'), (72895, 2, u'-  assert( argc==3 );'), (72897, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (72904, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (72916, 2, u'-    assert( db->init.busy );'), (72921, 2, u'-    assert( rc!=SQLITE_OK || zErr==0 );'), (73002, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (73003, 2, u'-  assert( db->aDb[iDb].pSchema );'), (73004, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (73005, 2, u'-  assert( iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (73150, 2, u'-  assert( db->init.busy );'), (73227, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (73267, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (73292, 2, u'-    assert( sqlite3_mutex_held(db->mutex) );'), (73339, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (73346, 2, u'-    assert( i>=0 && i<db->nDb );'), (73368, 2, u'-  assert( ppStmt && *ppStmt==0 );'), (73369, 2, u'-  assert( !db->mallocFailed );'), (73370, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (73398, 2, u'-      assert( sqlite3BtreeHoldsMutex(pBt) );'), (73475, 2, u'-  assert( db->init.busy==0 || saveSqlFlag==0 );'), (73482, 2, u'-    assert(!(*ppStmt));'), (73495, 2, u'-  assert( (rc&db->errMask)==rc );'), (73507, 2, u'-  assert( ppStmt!=0 );'), (73534, 2, u'-  assert( sqlite3_mutex_held(sqlite3VdbeDb(p)->mutex) );'), (73536, 2, u'-  assert( zSql!=0 );  /* Reprepare only called for prepare_v2() statements */'), (73538, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (73544, 2, u'-    assert( pNew==0 );'), (73547, 2, u'-    assert( pNew!=0 );'), (73574, 2, u'-  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73586, 2, u'-  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73611, 2, u'-  assert( ppStmt );'), (73654, 2, u'-  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73666, 2, u'-  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73740, 2, u'-  assert( db->mallocFailed || !pOffset || pLimit ); /* OFFSET implies LIMIT */'), (73836, 2, u'-    assert( pB!=0 );'), (74217, 2, u'-  assert( v );'), (74219, 2, u'-  assert( pEList!=0 );'), (74237, 2, u'-    assert( pDest->nMem==nResultCol );'), (74257, 2, u'-    assert( pEList!=0 );'), (74258, 2, u'-    assert( pEList->nExpr==nColumn );'), (74318, 2, u'-      assert( nColumn==1 );'), (74349, 2, u'-      assert( nColumn==1 );'), (74387, 2, u'-      assert( eDest==SRT_Discard );'), (74494, 2, u'-      assert( nColumn==1 );'), (74501, 2, u'-      assert( nColumn==1 );'), (74515, 2, u'-        assert( regRow!=pDest->iMem+i );'), (74536, 2, u'-  assert( p->iLimit==0 );'), (74616, 2, u'-      assert( pTab );'), (74636, 2, u'-        assert( !pS );'), (74638, 2, u'-        assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (74663, 2, u'-      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (74674, 2, u'-    assert( pzOriginTab && pzOriginCol );'), (74743, 2, u'-  assert( v!=0 );'), (74763, 2, u'-      assert( j<pTabList->nSrc );'), (74766, 2, u'-      assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (74841, 2, u'-    assert( p->pRight==0 || p->pRight->token.z==0 || p->pRight->token.z[0]!=0 );'), (74921, 2, u'-  assert( pSelect!=0 );'), (74922, 2, u'-  assert( (pSelect->selFlags & SF_Resolved)!=0 );'), (74923, 2, u'-  assert( nCol==pSelect->pEList->nExpr || db->mallocFailed );'), (75131, 2, u'-  assert( p && p->pPrior );  /* Calling function guarantees this much */'), (75134, 2, u'-  assert( pPrior->pRightmost!=pPrior );'), (75135, 2, u'-  assert( pPrior->pRightmost==p->pRightmost );'), (75151, 2, u'-  assert( v!=0 );  /* The VDBE already created by calling function */'), (75156, 2, u'-    assert( p->pEList );'), (75164, 2, u'-  assert( p->pEList && pPrior->pEList );'), (75183, 2, u'-      assert( !pPrior->pLimit );'), (75226, 2, u'-        assert( p->pLimit==0 );      /* Not allowed on leftward elements */'), (75227, 2, u'-        assert( p->pOffset==0 );     /* Not allowed on leftward elements */'), (75234, 2, u'-        assert( p->pOrderBy==0 );'), (75236, 2, u'-        assert( p->addrOpenEphm[0] == -1 );'), (75239, 2, u'-        assert( p->pEList );'), (75244, 2, u'-      assert( !pPrior->pOrderBy );'), (75256, 2, u'-        assert( p->op==TK_UNION );'), (75287, 2, u'-        assert( p->pEList );'), (75321, 2, u'-      assert( p->pOrderBy==0 );'), (75324, 2, u'-      assert( p->addrOpenEphm[0] == -1 );'), (75327, 2, u'-      assert( p->pEList );'), (75340, 2, u'-      assert( p->addrOpenEphm[1] == -1 );'), (75361, 2, u'-      assert( p->pEList );'), (75402, 2, u'-    assert( p->pRightmost==p );'), (75427, 2, u'-          assert( pLoop->addrOpenEphm[1]<0 );'), (75525, 2, u'-      assert( pIn->nMem==1 );'), (75551, 2, u'-      assert( pIn->nMem==1 );'), (75735, 2, u'-  assert( p->pOrderBy!=0 );'), (75736, 2, u'-  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */'), (75748, 2, u'-  assert( pPrior->pOrderBy==0 );'), (75750, 2, u'-  assert( pOrderBy );'), (75761, 2, u'-        assert( pItem->iCol>0 );'), (75786, 2, u'-      assert( pItem->iCol>0  && pItem->iCol<=p->pEList->nExpr );'), (75826, 2, u'-    assert( nOrderBy>=nExpr || db->mallocFailed );'), (76066, 2, u'-      assert( pEList!=0 && pExpr->iColumn<pEList->nExpr );'), (76067, 2, u'-      assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (76069, 2, u'-      assert( pNew!=0 );'), (76071, 2, u'-      assert( pExpr->pLeft==0 );'), (76073, 2, u'-      assert( pExpr->pRight==0 );'), (76081, 2, u'-      assert( pExpr->x.pList==0 && pExpr->x.pSelect==0 );'), (76130, 2, u'-  assert( pSrc );  /* Even for (SELECT 1) we have: pSrc!=0 but pSrc->nSrc==0 */'), (76268, 2, u'-  assert( p!=0 );'), (76269, 2, u'-  assert( p->pPrior==0 );  /* Unable to flatten compound queries */'), (76271, 2, u'-  assert( pSrc && iFrom>=0 && iFrom<pSrc->nSrc );'), (76275, 2, u'-  assert( pSub!=0 );'), (76279, 2, u'-  assert( pSubSrc );'), (76488, 2, u'-      assert( pParent==p );  /* First time through the loop */'), (76491, 2, u'-      assert( pParent!=p );  /* 2nd and subsequent times through the loop */'), (76494, 2, u'-        assert( db->mallocFailed );'), (76556, 2, u'-      assert( pParent->pOrderBy==0 );'), (76568, 2, u'-      assert( pParent->pHaving==0 );'), (76574, 2, u'-      assert( pParent->pGroupBy==0 );'), (76652, 2, u'-  assert( !p->pGroupBy );'), (76661, 2, u'-  assert( pTab && !pTab->pSelect && pExpr );'), (76752, 2, u'-      assert( i==0 );'), (76759, 2, u'-      assert( pSel!=0 );'), (76760, 2, u'-      assert( pFrom->pTab==0 );'), (76774, 2, u'-      assert( pFrom->pTab==0 );'), (76879, 2, u'-              assert(IsVirtual(pTab));'), (77000, 2, u'-  assert( p->selFlags & SF_Resolved );'), (77010, 2, u'-        assert( pSel );'), (77089, 2, u'-      assert( !ExprHasProperty(pE, EP_xIsSelect) );'), (77113, 2, u'-    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (77135, 2, u'-    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (77146, 2, u'-      assert( nArg==1 );'), (77153, 2, u'-      assert( pList!=0 );  /* pList!=0 if pF->pFunc has NEEDCOLL */'), (77268, 2, u'-    assert(pDest->eDest==SRT_Exists || pDest->eDest==SRT_Union ||'), (77329, 2, u'-      assert( pItem->isPopulated==0 );'), (77425, 2, u'-    assert( isAgg || pGroupBy );'), (77453, 2, u'-    assert(!isDistinct);'), (77508, 2, u'-      assert( !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) );'), (77802, 2, u'-          assert( !ExprHasProperty(p->pEList->a[0].pExpr, EP_xIsSelect) );'), (78117, 2, u'-  assert( sizeof(res.azResult[0])>= sizeof(res.nData) );'), (78161, 2, u'-    assert( azResult!=0 );'), (78259, 2, u'-  assert( pName1!=0 );   /* pName1->z might be NULL, but not pName1 itself */'), (78260, 2, u'-  assert( pName2!=0 );'), (78261, 2, u'-  assert( op==TK_INSERT || op==TK_UPDATE || op==TK_DELETE );'), (78262, 2, u'-  assert( op>0 && op<0xff );'), (78294, 2, u'-  assert( pTableName->nSrc==1 );'), (78382, 2, u'-  assert( pParse->pNewTrigger==0 );'), (78393, 2, u'-    assert( pParse->pNewTrigger==pTrigger );'), (78460, 2, u'-      assert( pTab!=0 );'), (78468, 2, u'-  assert( !pParse->pNewTrigger );'), (78548, 2, u'-  assert(pEList == 0 || pSelect == 0);'), (78549, 2, u'-  assert(pEList != 0 || pSelect != 0 || db->mallocFailed);'), (78658, 2, u'-  assert( pName->nSrc==1 );'), (78700, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (78702, 2, u'-  assert( pTable );'), (78703, 2, u'-  assert( pTable->pSchema==pTrigger->pSchema || iDb==1 );'), (78719, 2, u'-  assert( pTable!=0 );'), (78801, 2, u'-  assert( pList==0 || IsVirtual(pTab)==0 );'), (78833, 2, u'-    assert( iDb<pParse->db->nDb );'), (78857, 2, u'-  assert( pTriggerStep!=0 );'), (78858, 2, u'-  assert( v!=0 );'), (78908, 2, u'-        assert(0);'), (78966, 2, u'-  assert(op == TK_UPDATE || op == TK_INSERT || op == TK_DELETE);'), (78967, 2, u'-  assert(tr_tm == TRIGGER_BEFORE || tr_tm == TRIGGER_AFTER );'), (78969, 2, u'-  assert(newIdx != -1 || oldIdx != -1);'), (79108, 2, u'-    assert( i<pTab->nCol );'), (79179, 2, u'-  assert( pTabList->nSrc==1 );'), (79441, 2, u'-        assert( pParse->nTab>iCur+i+1 );'), (79683, 2, u'-  assert( pTab->iPKey<0 );'), (79697, 2, u'-  assert( v );'), (79858, 2, u'-  assert( strcmp(db->aDb[db->nDb-1].zName,"vacuum_db")==0 );'), (79981, 2, u'-    assert( 1==sqlite3BtreeIsInTrans(pTemp) );'), (79982, 2, u'-    assert( 1==sqlite3BtreeIsInTrans(pMain) );'), (80137, 2, u'-  assert( pVtab->nRef>0 );'), (80139, 2, u'-  assert(db);'), (80140, 2, u'-  assert( sqlite3SafetyCheckOk(db) );'), (80162, 2, u'-    assert( p->pMod && p->pMod->pModule );'), (80224, 2, u'-  assert( 0==pTable->pIndex );'), (80228, 2, u'-  assert( iDb>=0 );'), (80347, 2, u'-      assert( pTab==pOld );  /* Malloc must have failed inside HashInsert() */'), (80375, 2, u'-    assert(pArg->z < p->z);'), (80404, 2, u'-  assert( !db->pVTab );'), (80405, 2, u'-  assert( xConstruct );'), (80409, 2, u'-  assert( rc==SQLITE_OK );'), (80466, 2, u"-          assert(zType[i-1]==' ');"), (80548, 2, u'-  assert(pTab && (pTab->tabFlags & TF_Virtual)!=0 && !pTab->pVtab);'), (80589, 2, u'-  assert((pTab->tabFlags & TF_Virtual)!=0 && pTab->nCol==0 && pTab->aCol==0);'), (80619, 2, u'-  assert( (rc&0xff)==rc );'), (80638, 2, u'-  assert(pTab);'), (80642, 2, u'-    assert( rc==SQLITE_OK );'), (80822, 2, u'-  assert( pVtab!=0 );'), (80823, 2, u'-  assert( pVtab->pModule!=0 );'), (80871, 2, u'-  assert( IsVirtual(pTab) );'), (81291, 2, u'-  assert( pMaskSet->n < ArraySize(pMaskSet->ix) );'), (81356, 2, u'-  assert( TK_GT>TK_EQ && TK_GT<TK_GE );'), (81357, 2, u'-  assert( TK_LT>TK_EQ && TK_LT<TK_GE );'), (81358, 2, u'-  assert( TK_LE>TK_EQ && TK_LE<TK_GE );'), (81359, 2, u'-  assert( TK_GE==TK_EQ+4 );'), (81383, 2, u'-  assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );'), (81391, 2, u'-    assert( TK_LT==TK_GT+2 );'), (81392, 2, u'-    assert( TK_GE==TK_LE+2 );'), (81393, 2, u'-    assert( TK_GT>TK_EQ );'), (81394, 2, u'-    assert( TK_GT<TK_LE );'), (81395, 2, u'-    assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );'), (81405, 2, u'-  assert( allowedOp(op) );'), (81411, 2, u'-    assert( (WO_EQ<<(op-TK_EQ)) < 0x7fff );'), (81414, 2, u'-  assert( op!=TK_ISNULL || c==WO_ISNULL );'), (81415, 2, u'-  assert( op!=TK_IN || c==WO_IN );'), (81416, 2, u'-  assert( op!=TK_EQ || c==WO_EQ );'), (81417, 2, u'-  assert( op!=TK_LT || c==WO_LT );'), (81418, 2, u'-  assert( op!=TK_LE || c==WO_LE );'), (81419, 2, u'-  assert( op!=TK_GT || c==WO_GT );'), (81420, 2, u'-  assert( op!=TK_GE || c==WO_GE );'), (81440, 2, u'-  assert( iCur>=0 );'), (81462, 2, u'-        assert(pX->pLeft);'), (81464, 2, u'-        assert(pColl || pParse->nErr);'), (81536, 2, u'-  assert( pColl!=0 || pLeft->iColumn==-1 );'), (81700, 2, u'-  assert( (pTerm->wtFlags & (TERM_DYNAMIC|TERM_ORINFO|TERM_ANDINFO))==0 );'), (81701, 2, u'-  assert( pExpr->op==TK_OR );'), (81710, 2, u'-  assert( pOrWc->nTerm>=2 );'), (81719, 2, u'-      assert( pOrTerm->eOperator==0 );'), (81720, 2, u'-      assert( (pOrTerm->wtFlags & (TERM_ANDINFO|TERM_ORINFO))==0 );'), (81738, 2, u'-            assert( pAndTerm->pExpr );'), (81792, 2, u'-        assert( pOrTerm->eOperator==WO_EQ );'), (81801, 2, u'-        assert( j==1 );'), (81802, 2, u'-        assert( (chngToIN&(chngToIN-1))==0 );'), (81803, 2, u'-        assert( chngToIN==getMask(pMaskSet, iColumn) );'), (81808, 2, u'-        assert( pOrTerm->eOperator==WO_EQ );'), (81842, 2, u'-        assert( pOrTerm->eOperator==WO_EQ );'), (81843, 2, u'-        assert( pOrTerm->leftCursor==iCursor );'), (81844, 2, u'-        assert( pOrTerm->u.leftColumn==iColumn );'), (81849, 2, u'-      assert( pLeft!=0 );'), (81855, 2, u'-        assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (81918, 2, u'-    assert( pExpr->pRight==0 );'), (81999, 2, u'-    assert( pList!=0 );'), (82000, 2, u'-    assert( pList->nExpr==2 );'), (82021, 2, u'-    assert( pWC->op==TK_AND );'), (82177, 2, u'-  assert( pOrderBy!=0 );'), (82179, 2, u'-  assert( nTerm>0 );'), (82236, 2, u'-    assert( pIdx->aSortOrder!=0 );'), (82237, 2, u'-    assert( pTerm->sortOrder==0 || pTerm->sortOrder==1 );'), (82238, 2, u'-    assert( iSortOrder==0 || iSortOrder==1 );'), (82292, 2, u'-  assert( pOrderBy!=0 );'), (82293, 2, u'-  assert( pOrderBy->nExpr>0 );'), (82414, 2, u'-      assert( (pTerm->eOperator&(pTerm->eOperator-1))==0 );'), (82465, 2, u'-      assert( (pTerm->eOperator&(pTerm->eOperator-1))==0 );'), (82475, 2, u'-      assert( WO_EQ==SQLITE_INDEX_CONSTRAINT_EQ );'), (82476, 2, u'-      assert( WO_LT==SQLITE_INDEX_CONSTRAINT_LT );'), (82477, 2, u'-      assert( WO_LE==SQLITE_INDEX_CONSTRAINT_LE );'), (82478, 2, u'-      assert( WO_GT==SQLITE_INDEX_CONSTRAINT_GT );'), (82479, 2, u'-      assert( WO_GE==SQLITE_INDEX_CONSTRAINT_GE );'), (82480, 2, u'-      assert( WO_MATCH==SQLITE_INDEX_CONSTRAINT_MATCH );'), (82481, 2, u'-      assert( pTerm->eOperator & (WO_EQ|WO_LT|WO_LE|WO_GT|WO_GE|WO_MATCH) );'), (82502, 2, u'-  assert( pTab->azModuleArg && pTab->azModuleArg[0] );'), (82503, 2, u'-  assert( pVtab );'), (82943, 2, u'-      assert( pCost->plan.wsFlags & WHERE_INDEXED );'), (83003, 2, u'-    assert( v!=0 );'), (83032, 2, u'-  assert( iTarget>0 );'), (83044, 2, u'-    assert( pX->op==TK_IN );'), (83050, 2, u'-    assert( pLevel->plan.wsFlags & WHERE_IN_ABLE );'), (83117, 2, u'-  assert( pLevel->plan.wsFlags & WHERE_INDEXED );'), (83128, 2, u'-  assert( pIdx->nColumn>=nEq );'), (83134, 2, u'-    assert( (pTerm->wtFlags & TERM_CODED)==0 );'), (83252, 2, u'-          assert( pParse->disableColCache );'), (83259, 2, u'-    assert( pParse->disableColCache );'), (83293, 2, u'-    assert( pTerm!=0 );'), (83294, 2, u'-    assert( pTerm->pExpr!=0 );'), (83295, 2, u'-    assert( pTerm->leftCursor==iCur );'), (83296, 2, u'-    assert( omitTable==0 );'), (83316, 2, u'-    assert( omitTable==0 );'), (83337, 2, u'-      assert( TK_LE==TK_GT+1 );      /* Make sure the ordering.. */'), (83338, 2, u'-      assert( TK_LT==TK_GT+2 );      /*  ... of the TK_xx values... */'), (83339, 2, u'-      assert( TK_GE==TK_GT+3 );      /*  ... is correcct. */'), (83342, 2, u'-      assert( pX!=0 );'), (83343, 2, u'-      assert( pStart->leftCursor==iCur );'), (83356, 2, u'-      assert( pX!=0 );'), (83357, 2, u'-      assert( pEnd->leftCursor==iCur );'), (83524, 2, u'-    assert( op!=0 );'), (83628, 2, u'-    assert( pTerm!=0 );'), (83629, 2, u'-    assert( pTerm->eOperator==WO_OR );'), (83630, 2, u'-    assert( (pTerm->wtFlags & TERM_ORINFO)!=0 );'), (83676, 2, u'-    assert( bRev==0 || bRev==1 );'), (83677, 2, u'-    assert( omitTable==0 );'), (83697, 2, u'-    assert( pE!=0 );'), (83722, 2, u'-      assert( pTerm->pExpr );'), (83771, 2, u'-        assert( pInfo->needToFreeIdxStr==0 || db->mallocFailed );'), (83967, 2, u'-      assert( (m-1)==toTheLeft );'), (84024, 2, u'-      assert( pTabItem->pTab );'), (84060, 2, u'-    assert( once );'), (84061, 2, u'-    assert( notReady & getMask(pMaskSet, pTabList->a[bestJ].iCursor) );'), (84091, 2, u'-        assert( bestPlan.plan.u.pIdx==pIdx );'), (84112, 2, u'-  assert( (wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || pWInfo->nLevel==1 );'), (84175, 2, u'-        assert( n<=pTab->nCol );'), (84185, 2, u'-      assert( pIx->pSchema==pTab->pSchema );'), (84186, 2, u'-      assert( iIdxCur>=0 );'), (84321, 2, u'-    assert( pTab!=0 );'), (84351, 2, u'-      assert( pIdx!=0 );'), (84364, 2, u'-          assert(!useIndexOnly || j<pIdx->nColumn);'), (85856, 2, u'-  assert( iLookAhead!=YYNOCODE );'), (85912, 2, u'-  assert( stateno<=YY_REDUCE_MAX );'), (85915, 2, u'-  assert( i!=YY_REDUCE_USE_DFLT );'), (85916, 2, u'-  assert( iLookAhead!=YYNOCODE );'), (85923, 2, u'-  assert( i>=0 && i<YY_SZ_ACTTAB );'), (85924, 2, u'-  assert( yy_lookahead[i]==iLookAhead );'), (87291, 2, u'-  assert( yymsp[-2].minor.yy145!=0 );'), (87300, 2, u'-  assert( yymsp[-1].minor.yy145!=0 );'), (87430, 2, u'-    assert( yyact == YYNSTATE + YYNRULE + 1 );'), (87465, 2, u'-  assert( TOKEN.z[0] );  /* The tokenizer always gives us a token */'), (87551, 2, u'-      assert( !yyendofinput );  /* Impossible to shift the $ token */'), (87558, 2, u'-      assert( yyact == YY_ERROR_ACTION );'), (88317, 2, u'-  assert( pzErrMsg!=0 );'), (88323, 2, u'-  assert( pParse->sLastToken.dyn==0 );'), (88324, 2, u'-  assert( pParse->pNewTable==0 );'), (88325, 2, u'-  assert( pParse->pNewTrigger==0 );'), (88326, 2, u'-  assert( pParse->nVar==0 );'), (88327, 2, u'-  assert( pParse->nVarExpr==0 );'), (88328, 2, u'-  assert( pParse->nVarExprAlloc==0 );'), (88329, 2, u'-  assert( pParse->apVarExpr==0 );'), (88333, 2, u'-    assert( i>=0 );'), (88335, 2, u'-    assert( pParse->sLastToken.dyn==0 );'), (88988, 2, u'-    assert( sqlite3GlobalConfig.nRefInitMutex==0 );'), (89005, 2, u'-    assert(sizeof(x)==8);'), (89006, 2, u'-    assert(sizeof(x)==sizeof(y));'), (89008, 2, u'-    assert( sqlite3IsNaN(y) );'), (89228, 2, u'-    assert( sz > (int)sizeof(LookasideSlot*) );'), (89414, 2, u'-  assert( sqlite3SafetyCheckSickOrOk(db) );'), (89446, 2, u'-  assert( db->nDb<=2 );'), (89447, 2, u'-  assert( db->aDb==db->aDbStatic );'), (89499, 2, u'-  assert( db->lookaside.nOut==0 );  /* Fails on a lookaside memory leak */'), (89513, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (89596, 2, u'-  assert( count>=0 );'), (89725, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (89773, 2, u'-      assert( !db->mallocFailed );'), (89781, 2, u'-  assert(p || db->mallocFailed);'), (89829, 2, u'-  assert( !db->mallocFailed );'), (90002, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (90003, 2, u'-  assert( ppBtree != 0);'), (90060, 2, u'-    assert( !db->mallocFailed );'), (90155, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (90356, 2, u'-  assert( sizeof(db->aLimit)==sizeof(aHardLimit) );'), (90393, 2, u'-  assert( db->pDfltColl!=0 );'), (90501, 2, u'-    assert( db->mutex!=0 || isThreadsafe==0 || sqlite3GlobalConfig.bFullMutex==0 );'), (90546, 2, u'-  assert( zFilename );'), (90547, 2, u'-  assert( ppDb );'), (90559, 2, u'-    assert( *ppDb || rc==SQLITE_NOMEM );'), (90584, 2, u'-  assert( !db->mallocFailed );'), (90604, 2, u'-  assert( !db->mallocFailed );'), (90625, 2, u'-  assert( !db->mallocFailed );'), (90882, 2, u'-      assert( pPager!=0 );'), (90884, 2, u'-      assert( fd!=0 );'), (91020, 2, u'-#define assertMutexHeld() \\'), (91021, 2, u'-  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) )'), (91053, 2, u'-    assert( p->pUnlockConnection || p->pBlockingConnection );'), (91058, 2, u'-      assert( p2->xUnlockNotify==p->xUnlockNotify || !seen );'), (91059, 2, u'-      assert( db==0 || p->pUnlockConnection!=db );'), (91060, 2, u'-      assert( db==0 || p->pBlockingConnection!=db );'), (91074, 2, u'-  assertMutexHeld();'), (91089, 2, u'-  assertMutexHeld();'), (91111, 2, u'-  assertMutexHeld();'), (91174, 2, u'-  assert( !db->mallocFailed );'), (91236, 2, u'-      assert( p->xUnlockNotify );'), (91243, 2, u'-      assert( aArg==aDyn || (aDyn==0 && aArg==aStatic) );'), (91244, 2, u'-      assert( nArg<=(int)ArraySize(aStatic) || aArg==aDyn );'), (92076, 2, u'-  assert( q - (unsigned char *)p <= VARINT_MAX );'), (92090, 2, u'-      assert( 0 );'), (92103, 2, u'- assert( *pi==i );'), (92128, 2, u'-  assert( nCapacity>=0 );'), (92146, 2, u'-  assert( nAddCapacity>0 );'), (92158, 2, u'-  assert( nSource>0 && pSource!=NULL );'), (92166, 2, u'-  assert( nSource1>0 && pSource1!=NULL );'), (92167, 2, u'-  assert( nSource2>0 && pSource2!=NULL );'), (92199, 2, u'-  assert( sb->b.nData>0 );'), (92274, 2, u'-  assert( pReader->nData>=0 );'), (92278, 2, u'-  assert( !dlrAtEnd(pReader) );'), (92282, 2, u'-  assert( !dlrAtEnd(pReader) );'), (92286, 2, u'-  assert( !dlrAtEnd(pReader) );'), (92290, 2, u'-  assert( !dlrAtEnd(pReader) );'), (92300, 2, u'-  assert( !dlrAtEnd(pReader) );'), (92306, 2, u'-  assert( !dlrAtEnd(pReader) );'), (92310, 2, u'-  assert( !dlrAtEnd(pReader) );'), (92313, 2, u'-  assert( pReader->nElement<=pReader->nData );'), (92323, 2, u'-      assert( n<pReader->nData );'), (92326, 2, u'-        assert( n<=pReader->nData );'), (92330, 2, u'-          assert( n<pReader->nData );'), (92334, 2, u'-          assert( n<pReader->nData );'), (92339, 2, u'-    assert( pReader->nElement<=pReader->nData );'), (92344, 2, u'-  assert( pData!=NULL && nData!=0 );'), (92366, 2, u'-  assert( nData>0 );'), (92367, 2, u'-  assert( pData!=0 );'), (92368, 2, u'-  assert( pData+nData>pData );'), (92384, 2, u'-        assert( n<=nData );'), (92387, 2, u'-    assert( n<=nData );'), (92393, 2, u'-#define ASSERT_VALID_DOCLIST(i, p, n, o) docListValidate(i, p, n, o)'), (92395, 2, u'-#define ASSERT_VALID_DOCLIST(i, p, n, o) assert( 1 )'), (92454, 2, u'-  assert( nFirstOld<nData || (nFirstOld==nData && pWriter->iType==DL_DOCIDS) );'), (92461, 2, u'-  ASSERT_VALID_DOCLIST(pWriter->iType, pData, nData, &iLastDocidDelta);'), (92462, 2, u'-  assert( iLastDocid==iFirstDocid-iDocid+iLastDocidDelta );'), (92484, 2, u'-  assert( !pWriter->has_iPrevDocid || iDocid>pWriter->iPrevDocid );'), (92485, 2, u'-  assert( pWriter->iType==DL_DOCIDS );'), (92523, 2, u'-  assert( !plrAtEnd(pReader) );'), (92527, 2, u'-  assert( !plrAtEnd(pReader) );'), (92531, 2, u'-  assert( !plrAtEnd(pReader) );'), (92535, 2, u'-  assert( !plrAtEnd(pReader) );'), (92541, 2, u'-  assert( !plrAtEnd(pReader) );'), (92556, 2, u'-  assert( i!=POS_COLUMN );'), (92571, 2, u'-  assert( n<=pReader->nData );'), (92635, 2, u'-  assert( pWriter->iPos!=-1 );'), (92646, 2, u'-  assert( iPos>=pWriter->iPos );'), (92650, 2, u'-    assert( iStartOffset>=pWriter->iOffset );'), (92653, 2, u'-    assert( iEndOffset>=iStartOffset );'), (92669, 2, u'-  assert( !pWriter->dlw->has_iPrevDocid || iDocid>pWriter->dlw->iPrevDocid );'), (92778, 2, u'-  assert( iOutType<=iType );'), (92876, 2, u'-  assert( nReaders>0 );'), (92882, 2, u'-  assert( nReaders<=MERGE_COUNT );'), (92885, 2, u'-    assert( pReaders[i].iType==pReaders[0].iType );'), (92945, 2, u'-  assert( pLeft->iType==pRight->iType );'), (92976, 2, u'-  assert( dlrDocid(pLeft)==dlrDocid(pRight) );'), (92977, 2, u'-  assert( pLeft->iType==pRight->iType );'), (92978, 2, u'-  assert( pLeft->iType==pOut->iType );'), (93087, 2, u'-  assert( dlrDocid(pLeft)==dlrDocid(pRight) );'), (93088, 2, u'-  assert( pOut->iType!=DL_POSITIONS_OFFSETS );'), (93141, 2, u'-  assert(!plrAtEnd(pLeft) || !plrAtEnd(pRight));'), (93191, 2, u'-  assert( iType!=DL_POSITIONS_OFFSETS );'), (93437, 2, u'-  assert( r == result + len );'), (93685, 2, u'-  assert( iStmt<MAX_STMT );'), (93730, 2, u'-  assert( idx>=-1 && idx<MERGE_COUNT );'), (94432, 2, u'-  assert( argc>=3 );'), (94836, 2, u'-    assert(p && p->eType==FTSQUERY_PHRASE );'), (94842, 2, u'-        assert( p->pParent->pRight==p );'), (94847, 2, u'-        assert( p->pRight!=0 );'), (94933, 2, u'-      assert( pToken->n<=nToken );'), (95012, 2, u'-        assert( pRight->eType==FTSQUERY_PHRASE );'), (95013, 2, u'-        assert( pLeft->eType==FTSQUERY_PHRASE );'), (95400, 2, u'-  assert( eType==DL_POSITIONS || eType==DL_DOCIDS );'), (95406, 2, u'-  assert( pTab->nPendingData<0 );'), (95477, 2, u'-            assert( pExpr->pRight->eType==FTSQUERY_PHRASE );'), (95478, 2, u'-            assert( pLeft->eType==FTSQUERY_PHRASE );'), (95546, 2, u'-    assert( 0==(*ppExpr) );'), (95616, 2, u'-    assert( c->iCursorType==idxNum );'), (95632, 2, u'-      assert( idxNum<=QUERY_FULLTEXT+v->nColumn);'), (95633, 2, u'-      assert( argc==1 );'), (95919, 2, u'-  assert( nData>0 );'), (95920, 2, u'-  assert( pData!=0 );'), (95921, 2, u'-  assert( pData+nData>pData );'), (95925, 2, u'-  assert( n>0 );'), (95926, 2, u'-  assert( iDummy>0 );'), (95927, 2, u'-  assert( n<nData );'), (95933, 2, u'-  assert( n>0 );'), (95934, 2, u'-  assert( n<=nData );'), (95942, 2, u'-    assert( n>0 );'), (95943, 2, u'-    assert( iDummy>0 );'), (95944, 2, u'-    assert( n+iDummy>0);'), (95945, 2, u'-    assert( n+iDummy<=nData );'), (95953, 2, u'-      assert( n>0 );'), (95954, 2, u'-      assert( iDummy>=0 );'), (95955, 2, u'-      assert( n<nData );'), (95961, 2, u'-      assert( n>0 );'), (95962, 2, u'-      assert( iDummy>0 );'), (95963, 2, u'-      assert( n+iDummy>0);'), (95964, 2, u'-      assert( n+iDummy<=nData );'), (95970, 2, u'-#define ASSERT_VALID_INTERIOR_BLOCK(x) interiorBlockValidate(x)'), (95972, 2, u'-#define ASSERT_VALID_INTERIOR_BLOCK(x) assert( 1 )'), (95995, 2, u'-  assert( iHeight>0 );'), (96005, 2, u'-  ASSERT_VALID_INTERIOR_BLOCK(pWriter->last);'), (96018, 2, u'-  ASSERT_VALID_INTERIOR_BLOCK(pWriter->last);'), (96041, 2, u'-  assert( pWriter->iLastChildBlock==iChildBlock );'), (96058, 2, u'-  ASSERT_VALID_INTERIOR_BLOCK(pWriter->last);'), (96105, 2, u'-  ASSERT_VALID_INTERIOR_BLOCK(block);'), (96119, 2, u'-    ASSERT_VALID_INTERIOR_BLOCK(block);'), (96159, 2, u'-  assert( nData>0 );'), (96160, 2, u"-  assert( pData[0]!='\\0' );"), (96166, 2, u'-  assert( 1+n<=nData );'), (96180, 2, u'-    assert( n+nTerm<=pReader->nData );'), (96195, 2, u'-  assert( !interiorReaderAtEnd(pReader) );'), (96199, 2, u'-  assert( !interiorReaderAtEnd(pReader) );'), (96205, 2, u'-  assert( !interiorReaderAtEnd(pReader) );'), (96222, 2, u'-    assert( n+nSuffix<=pReader->nData );'), (96316, 2, u'-  assert( nData>0 );'), (96317, 2, u'-  assert( pData!=0 );'), (96318, 2, u'-  assert( pData+nData>pData );'), (96322, 2, u'-  assert( iDummy==0 );'), (96323, 2, u'-  assert( n>0 );'), (96324, 2, u'-  assert( n<nData );'), (96330, 2, u'-  assert( n>0 );'), (96331, 2, u'-  assert( iDummy>0 );'), (96332, 2, u'-  assert( n+iDummy>0 );'), (96333, 2, u'-  assert( n+iDummy<nData );'), (96339, 2, u'-  assert( n>0 );'), (96340, 2, u'-  assert( iDummy>0 );'), (96341, 2, u'-  assert( n+iDummy>0 );'), (96342, 2, u'-  assert( n+iDummy<=nData );'), (96343, 2, u'-  ASSERT_VALID_DOCLIST(DL_DEFAULT, pData+n, iDummy, NULL);'), (96350, 2, u'-    assert( n>0 );'), (96351, 2, u'-    assert( iDummy>=0 );'), (96352, 2, u'-    assert( n<nData );'), (96356, 2, u'-    assert( n>0 );'), (96357, 2, u'-    assert( iDummy>0 );'), (96358, 2, u'-    assert( n+iDummy>0 );'), (96359, 2, u'-    assert( n+iDummy<nData );'), (96364, 2, u'-    assert( n>0 );'), (96365, 2, u'-    assert( iDummy>0 );'), (96366, 2, u'-    assert( n+iDummy>0 );'), (96367, 2, u'-    assert( n+iDummy<=nData );'), (96368, 2, u'-    ASSERT_VALID_DOCLIST(DL_DEFAULT, pData+n, iDummy, NULL);'), (96373, 2, u'-#define ASSERT_VALID_LEAF_NODE(p, n) leafNodeValidate(p, n)'), (96375, 2, u'-#define ASSERT_VALID_LEAF_NODE(p, n) assert( 1 )'), (96391, 2, u'-  assert( nData>2 );'), (96392, 2, u'-  assert( iData>=0 );'), (96393, 2, u'-  assert( iData+nData<=pWriter->data.nData );'), (96394, 2, u'-  ASSERT_VALID_LEAF_NODE(pWriter->data.pData+iData, nData);'), (96398, 2, u'-  assert( iBlockid!=0 );'), (96405, 2, u'-  assert( pWriter->data.nData>iData+1+n+nStartingTerm );'), (96406, 2, u'-  assert( pWriter->nTermDistinct>0 );'), (96407, 2, u'-  assert( pWriter->nTermDistinct<=nStartingTerm );'), (96424, 2, u'-    assert( iBlockid==pWriter->iEndBlockid );'), (96464, 2, u'-  assert( pWriter->has_parent );'), (96513, 2, u'-  assert( nTerm>0 );'), (96518, 2, u'-    assert( nPrefix<nTerm );'), (96562, 2, u'-  assert( iDoclistData>=n+nTerm );'), (96581, 2, u'-  ASSERT_VALID_LEAF_NODE(pWriter->data.pData, pWriter->data.nData);'), (96599, 2, u'-  ASSERT_VALID_DOCLIST(DL_DEFAULT,'), (96610, 2, u'-  assert( nActualData<=nData );'), (96611, 2, u'-  assert( nActual<=n );'), (96680, 2, u'-    assert( n<iDoclistData );'), (96684, 2, u'-    assert( 2*STANDALONE_MIN<=LEAF_MAX );'), (96685, 2, u'-    assert( n+pWriter->data.nData-iDoclistData<iDoclistData );'), (96691, 2, u'-  ASSERT_VALID_LEAF_NODE(pWriter->data.pData, pWriter->data.nData);'), (96739, 2, u'-  assert( pReader->term.nData>0 );'), (96746, 2, u'-  assert( pReader->term.nData>0 );'), (96752, 2, u'-  assert( pReader->term.nData>0 );'), (96761, 2, u'-  assert( nData>0 );'), (96762, 2, u"-  assert( pData[0]=='\\0' );"), (96772, 2, u'-  assert( 1+n+nTerm<nData );'), (96780, 2, u'-  assert( !leafReaderAtEnd(pReader) );'), (96784, 2, u'-  assert( n+nData<=pReader->nData );'), (96794, 2, u'-    assert( n+nSuffix<pReader->nData );'), (96838, 2, u'-  assert( !pReader->eof );'), (96842, 2, u'-  assert( !pReader->eof );'), (96848, 2, u'-  assert( !pReader->eof );'), (96852, 2, u'-  assert( !pReader->eof );'), (96938, 2, u'-  assert( !leavesReaderAtEnd(pReader) );'), (97017, 2, u'-    assert( i<MERGE_COUNT );'), (97052, 2, u'-  assert( nReaders<=MERGE_COUNT );'), (97111, 2, u'-  assert( i==MERGE_COUNT );'), (97192, 2, u'-  assert( nTerm>0 );'), (97226, 2, u'-            assert(pBuffers!=NULL);'), (97237, 2, u'-      assert(iBuffer<nBuffers && pBuffers[iBuffer].nData==0);'), (97302, 2, u'-  assert( nData>1 );'), (97303, 2, u"-  assert( *pData=='\\0' );"), (97324, 2, u'-  assert( iStartLeaf<=iEndLeaf );'), (97351, 2, u'-  assert( nData>1 );'), (97352, 2, u"-  assert( *pData!='\\0' );"), (97375, 2, u'-  assert( *piEndChild>=*piStartChild );'), (97376, 2, u'-  assert( isPrefix || *piStartChild==*piEndChild );'), (97391, 2, u'-  assert( iBlockid!=0 );'), (97392, 2, u'-  assert( pTerm!=NULL );'), (97393, 2, u'-  assert( nTerm!=0 );        /* TODO(shess) Why not allow this? */'), (97394, 2, u'-  assert( piStartChild!=NULL );'), (97395, 2, u'-  assert( piEndChild!=NULL );'), (97454, 2, u'-      assert( iNextStart<=iNextEnd );'), (97458, 2, u'-    assert( iStartChild<=iLeavesEnd );'), (97459, 2, u'-    assert( iEndChild<=iLeavesEnd );'), (97491, 2, u'-  assert( nData>1 );'), (97494, 2, u'-  assert( v->nPendingData<0 );'), (97539, 2, u'-  assert( v->nPendingData<0 );'), (97612, 2, u'-    assert( i<n );'), (97617, 2, u'-  assert( i==n );'), (97736, 2, u'-      assert( nArg==2+v->nColumn+2);'), (97747, 2, u'-    assert( nArg==2+v->nColumn+2);'), (97781, 2, u'-  assert( v->nPendingData<0 );'), (97790, 2, u'-  assert( v->nPendingData<0 );'), (97972, 2, u'-      assert( iReader<i );  /* Must execute the loop at least once. */'), (98083, 2, u'-      assert( i<nReaders );'), (98094, 2, u'-      assert( i==nReaders );'), (98195, 2, u'-  assert( nTerms>0 );'), (98202, 2, u'-    assert( iTerm<nTerms );'), (98207, 2, u'-  assert( iTerm==nTerms );'), (98209, 2, u'-  assert( nResultBytes>0 );   /* nTerms>0, nResultsBytes must be, too. */'), (98225, 2, u'-  assert( iByte==nResultBytes );'), (98226, 2, u"-  assert( result[nResultBytes-1]==' ' );"), (98298, 2, u'-          assert( rc==SQLITE_OK );'), (98324, 2, u'-  assert( pData!=NULL && nData>0 );'), (98347, 2, u'-          assert( dump.nData>0 );'), (98349, 2, u"-          assert( dump.pData[dump.nData]==' ');"), (98359, 2, u'-          assert( NULL=="Unhandled DL_DEFAULT value");'), (98365, 2, u'-      assert( dump.nData>0 );'), (98367, 2, u"-      assert( dump.pData[dump.nData]==' ');"), (98373, 2, u'-  assert( dump.nData>0 );'), (98375, 2, u"-  assert( dump.pData[dump.nData]==' ');"), (98377, 2, u'-  assert( dump.nData>0 );'), (98684, 2, u'-  assert( rc!=SQLITE_OK );'), (99040, 2, u'-        assert( nKey==4 );'), (99156, 2, u'-  assert( p->eType!=FTSQUERY_PHRASE );'), (99164, 2, u'-  assert( p->eType==FTSQUERY_AND );'), (99187, 2, u'-    assert( pSplit->pParent->pRight==pSplit );'), (99248, 2, u'-        assert( eType!=FTSQUERY_PHRASE || !p->pPhrase->isNot );'), (99265, 2, u'-          assert( pRet && pPrev );'), (99298, 2, u'-            assert( pPrev && pPrev->pLeft && pPrev->pRight==0 );'), (99309, 2, u'-      assert( nByte>0 );'), (99311, 2, u'-    assert( rc!=SQLITE_OK || (nByte>0 && nByte<=nIn) );'), (99542, 2, u'-  assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (99652, 2, u'-  assert( pNew!=0 );'), (99653, 2, u'-  assert( keyClass>=FTS3_HASH_STRING && keyClass<=FTS3_HASH_BINARY );'), (99669, 2, u'-  assert( pH!=0 );'), (99736, 2, u'-    assert( keyClass==FTS3_HASH_BINARY );'), (99751, 2, u'-    assert( keyClass==FTS3_HASH_BINARY );'), (99791, 2, u'-  assert( (new_size & (new_size-1))==0 );'), (99865, 2, u'-    assert( pH->first==0 );'), (99866, 2, u'-    assert( pH->count==0 );'), (99882, 2, u'-  assert( xHash!=0 );'), (99884, 2, u'-  assert( (pH->htsize & (pH->htsize-1))==0 );'), (99916, 2, u'-  assert( pH!=0 );'), (99918, 2, u'-  assert( xHash!=0 );'), (99920, 2, u'-  assert( (pH->htsize & (pH->htsize-1))==0 );'), (99957, 2, u'-  assert( pH->htsize>0 );'), (99958, 2, u'-  assert( (pH->htsize & (pH->htsize-1))==0 );'), (100115, 2, u"-  assert( x>='a' && x<='z' );"), (100124, 2, u"-  assert( x>='a' && x<='z' );"), (100670, 2, u'-  assert( argc==1 || argc==2 );'), (100759, 2, u'-  assert( argc==2 || argc==3 );'), (100901, 2, u'-  assert( rc==SQLITE_OK );'), (100902, 2, u'-  assert( p1==p2 );'), (100904, 2, u'-  assert( rc==SQLITE_ERROR );'), (100905, 2, u'-  assert( p2==0 );'), (100906, 2, u'-  assert( 0==strcmp(sqlite3_errmsg(db), "unknown tokenizer: nosuchtokenizer") );'), (100910, 2, u'-  assert( rc==SQLITE_OK );'), (100912, 2, u'-  assert( rc==SQLITE_OK );'), (100913, 2, u'-  assert( p2==p1 );'), (101475, 2, u'-  assert( sizeof(RtreeCoord)==4 );'), (101476, 2, u'-  assert( sizeof(u32)==4 );'), (101532, 2, u'-  assert( iNode!=0 );'), (101543, 2, u'-    assert( pNode->pNext==0 );'), (101557, 2, u'-    for( ; (*pp)!=pNode; pp = &(*pp)->pNext){ assert(*pp); }'), (101600, 2, u'-    assert( !pParent || !pNode->pParent || pNode->pParent==pParent );'), (101640, 2, u'-  assert( (rc==SQLITE_OK && pNode) || (pNode==0 && rc!=SQLITE_OK) );'), (101694, 2, u'-  assert(nCell<=nMaxCell);'), (101738, 2, u'-    assert( pNode->nRef>0 );'), (101767, 2, u'-  assert( iCell<NCELL(pNode) );'), (101956, 2, u'-    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (101988, 2, u'-    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (102026, 2, u'-  assert( iHeight>=0 );'), (102056, 2, u'-    assert( pCursor->pNode==pChild );'), (102074, 2, u'-    assert( ii<(NCELL(pNode)-1) );'), (102136, 2, u'-  assert(pCsr->pNode);'), (102158, 2, u'-      assert( pRtree->eCoordType==RTREE_COORD_INT32 );'), (102228, 2, u'-        assert( (idxStr==0 && argc==0) || strlen(idxStr)==argc*2 );'), (102247, 2, u'-        assert( pCsr->pNode==pRoot );'), (102254, 2, u'-        assert( pCsr->pNode==pRoot );'), (102258, 2, u'-      assert( rc!=SQLITE_OK || !pCsr->pNode || pCsr->iCell<NCELL(pCsr->pNode) );'), (102308, 2, u'-  assert( pIdxInfo->idxStr==0 );'), (102353, 2, u'-        assert( compatible[RTREE_EQ & 7]==0 );'), (102354, 2, u'-        assert( compatible[RTREE_LT & 7]==1 );'), (102355, 2, u'-        assert( compatible[RTREE_LE & 7]==1 );'), (102356, 2, u'-        assert( compatible[RTREE_GT & 7]==2 );'), (102357, 2, u'-        assert( compatible[RTREE_GE & 7]==2 );'), (102368, 2, u'-        assert( iIdx<sizeof(zIdxStr)-1 );'), (102382, 2, u'-  assert( iIdx>=0 );'), (102861, 2, u'-        assert( left<=right );'), (102928, 2, u'-        assert( xleft1<=xright1 && (xleft1<xright1 || xleft2<=xright2) );'), (103259, 2, u'-  assert( pNode->nRef==1 );'), (103534, 2, u'-    assert( !pRtree->aHash[ii] );'), (103554, 2, u'-  assert(nData>=1);'), (103555, 2, u'-  assert(hashIsEmpty(pRtree));'), (103648, 2, u'-    assert( nData==(pRtree->nDim*2 + 3) );'), (104143, 2, u'-    assert(uPattern!=0);'), (104325, 2, u'-      assert(!pExpr);'), (104391, 2, u'-  assert(nArg==1 || nArg==2);'), (104450, 2, u'-  assert(!"Unexpected return value from ucol_strcoll()");'), (104479, 2, u'-  assert(nArg==2);'), (104492, 2, u'-  assert(p);'), (104762, 2, u'-    assert(iStart<=iEnd);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(91, 2, u'-\tassert (channel_count <= MAX_CHANNELS) ;'), (163, 2, u'-\tassert (channel_count <= MAX_CHANNELS) ;'), (291, 2, u'-\tassert (channel_count <= MAX_CHANNELS) ;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+   assert( lastDigitThreshold >=0  &&  lastDigitThreshold <= 9 );')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: Reader::decodeNumber
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+   assert( lastDigitThreshold >=0  &&  lastDigitThreshold <= 9 );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+   assert( lastDigitThreshold >=0  &&  lastDigitThreshold <= 9 );')]
===========================================
Class:class DefaultValueAllocator : public ValueAllocator { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      JSON_ASSERT_MESSAGE( value_.int_ >= minInt  &&  value_.int_ <= maxInt, "unsigned integer out of signed int range" );'), (6, 2, u'-      JSON_ASSERT_MESSAGE( value_.uint_ < (unsigned)maxInt, "integer out of signed integer range" );'), (8, 1, u'+      JSON_ASSERT_MESSAGE( value_.uint_ <= UInt(maxInt), "unsigned integer out of signed int range" );')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: Value::asInt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      JSON_ASSERT_MESSAGE( value_.int_ >= minInt  &&  value_.int_ <= maxInt, "unsigned integer out of signed int range" );'), (6, 2, u'-      JSON_ASSERT_MESSAGE( value_.uint_ < (unsigned)maxInt, "integer out of signed integer range" );'), (8, 1, u'+      JSON_ASSERT_MESSAGE( value_.uint_ <= UInt(maxInt), "unsigned integer out of signed int range" );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      JSON_ASSERT_MESSAGE( value_.int_ >= minInt  &&  value_.int_ <= maxInt, "unsigned integer out of signed int range" );'), (6, 2, u'-      JSON_ASSERT_MESSAGE( value_.uint_ < (unsigned)maxInt, "integer out of signed integer range" );'), (8, 1, u'+      JSON_ASSERT_MESSAGE( value_.uint_ <= UInt(maxInt), "unsigned integer out of signed int range" );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      JSON_ASSERT_MESSAGE( value_.int_ <= maxUInt, "signed integer out of UInt range" );'), (7, 1, u'+      JSON_ASSERT_MESSAGE( value_.uint_ <= maxUInt, "unsigned integer out of UInt range" );')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: Value::asUInt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      JSON_ASSERT_MESSAGE( value_.int_ <= maxUInt, "signed integer out of UInt range" );'), (7, 1, u'+      JSON_ASSERT_MESSAGE( value_.uint_ <= maxUInt, "unsigned integer out of UInt range" );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      JSON_ASSERT_MESSAGE( value_.int_ <= maxUInt, "signed integer out of UInt range" );'), (7, 1, u'+      JSON_ASSERT_MESSAGE( value_.uint_ <= maxUInt, "unsigned integer out of UInt range" );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+      JSON_ASSERT_MESSAGE( value_.uint_ <= UInt64(maxInt64), "unsigned integer out of Int64 range" );'), (18, 1, u'+      JSON_ASSERT_MESSAGE( value_.real_ >= minInt64  &&  value_.real_ <= maxInt64, "Real out of Int64 range" );'), (25, 1, u'+      JSON_ASSERT_MESSAGE( false, "Type is not convertible to Int64" );'), (27, 1, u'+      JSON_ASSERT_UNREACHABLE;'), (41, 1, u'+      JSON_ASSERT_MESSAGE( value_.int_ >= 0, "Negative integer can not be converted to UInt64" );'), (46, 1, u'+      JSON_ASSERT_MESSAGE( value_.real_ >= 0  &&  value_.real_ <= maxUInt64,  "Real out of UInt64 range" );'), (53, 1, u'+      JSON_ASSERT_MESSAGE( false, "Type is not convertible to UInt64" );'), (55, 1, u'+      JSON_ASSERT_UNREACHABLE;')]
===========================================
===========================================
Total add: 82
Total del: 0
Header: Value::asUInt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+      JSON_ASSERT_MESSAGE( value_.uint_ <= UInt64(maxInt64), "unsigned integer out of Int64 range" );'), (18, 1, u'+      JSON_ASSERT_MESSAGE( value_.real_ >= minInt64  &&  value_.real_ <= maxInt64, "Real out of Int64 range" );'), (25, 1, u'+      JSON_ASSERT_MESSAGE( false, "Type is not convertible to Int64" );'), (27, 1, u'+      JSON_ASSERT_UNREACHABLE;'), (41, 1, u'+      JSON_ASSERT_MESSAGE( value_.int_ >= 0, "Negative integer can not be converted to UInt64" );'), (46, 1, u'+      JSON_ASSERT_MESSAGE( value_.real_ >= 0  &&  value_.real_ <= maxUInt64,  "Real out of UInt64 range" );'), (53, 1, u'+      JSON_ASSERT_MESSAGE( false, "Type is not convertible to UInt64" );'), (55, 1, u'+      JSON_ASSERT_UNREACHABLE;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+      JSON_ASSERT_MESSAGE( value_.uint_ <= UInt64(maxInt64), "unsigned integer out of Int64 range" );'), (18, 1, u'+      JSON_ASSERT_MESSAGE( value_.real_ >= minInt64  &&  value_.real_ <= maxInt64, "Real out of Int64 range" );'), (25, 1, u'+      JSON_ASSERT_MESSAGE( false, "Type is not convertible to Int64" );'), (27, 1, u'+      JSON_ASSERT_UNREACHABLE;'), (41, 1, u'+      JSON_ASSERT_MESSAGE( value_.int_ >= 0, "Negative integer can not be converted to UInt64" );'), (46, 1, u'+      JSON_ASSERT_MESSAGE( value_.real_ >= 0  &&  value_.real_ <= maxUInt64,  "Real out of UInt64 range" );'), (53, 1, u'+      JSON_ASSERT_MESSAGE( false, "Type is not convertible to UInt64" );'), (55, 1, u'+      JSON_ASSERT_UNREACHABLE;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+      JSON_ASSERT_MESSAGE( false, "Type is not convertible to float" );'), (26, 1, u'+      JSON_ASSERT_UNREACHABLE;')]
===========================================
===========================================
Total add: 29
Total del: 0
Header: Value::asDouble
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+      JSON_ASSERT_MESSAGE( false, "Type is not convertible to float" );'), (26, 1, u'+      JSON_ASSERT_UNREACHABLE;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+      JSON_ASSERT_MESSAGE( false, "Type is not convertible to float" );'), (26, 1, u'+      JSON_ASSERT_UNREACHABLE;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+   JSON_ASSERT( index >= 0 );')]
===========================================
===========================================
Total add: 9
Total del: 1
Header: Value::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+   JSON_ASSERT( index >= 0 );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+   JSON_ASSERT( index >= 0 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+   JSON_ASSERT( index >= 0 );')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: Value::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+   JSON_ASSERT( index >= 0 );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+   JSON_ASSERT( index >= 0 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue || type_ == arrayValue );'), (4, 1, u'+   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: Value::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue || type_ == arrayValue );'), (4, 1, u'+   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue || type_ == arrayValue );'), (4, 1, u'+   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tJSONTEST_ASSERT( Json::Value(1234) == array1_[index0] ) << "Json::Value::operator[ArrayIndex]";'), (6, 1, u'+\tJSONTEST_ASSERT( Json::Value(1234) == array1_[0] ) << "Json::Value::operator[int]";'), (9, 1, u'+\tJSONTEST_ASSERT( Json::Value(1234) == constArray[index0] ) << "Json::Value::operator[ArrayIndex] const";'), (10, 1, u'+\tJSONTEST_ASSERT( Json::Value(1234) == constArray[0] ) << "Json::Value::operator[int] const";'), (16, 1, u'+\tJSONTEST_ASSERT_EQUAL( 0.00390625f, float_.asFloat() ) << "Json::Value::asFloat()";')]
===========================================
===========================================
Total add: 17
Total del: 0
Header: JSONTEST_FIXTURE
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tJSONTEST_ASSERT( Json::Value(1234) == array1_[index0] ) << "Json::Value::operator[ArrayIndex]";'), (6, 1, u'+\tJSONTEST_ASSERT( Json::Value(1234) == array1_[0] ) << "Json::Value::operator[int]";'), (9, 1, u'+\tJSONTEST_ASSERT( Json::Value(1234) == constArray[index0] ) << "Json::Value::operator[ArrayIndex] const";'), (10, 1, u'+\tJSONTEST_ASSERT( Json::Value(1234) == constArray[0] ) << "Json::Value::operator[int] const";'), (16, 1, u'+\tJSONTEST_ASSERT_EQUAL( 0.00390625f, float_.asFloat() ) << "Json::Value::asFloat()";')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tJSONTEST_ASSERT( Json::Value(1234) == array1_[index0] ) << "Json::Value::operator[ArrayIndex]";'), (6, 1, u'+\tJSONTEST_ASSERT( Json::Value(1234) == array1_[0] ) << "Json::Value::operator[int]";'), (9, 1, u'+\tJSONTEST_ASSERT( Json::Value(1234) == constArray[index0] ) << "Json::Value::operator[ArrayIndex] const";'), (10, 1, u'+\tJSONTEST_ASSERT( Json::Value(1234) == constArray[0] ) << "Json::Value::operator[int] const";'), (16, 1, u'+\tJSONTEST_ASSERT_EQUAL( 0.00390625f, float_.asFloat() ) << "Json::Value::asFloat()";')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(87, 2, u'-\t\t\tFLAC__ASSERT(0 != object);'), (115, 2, u'-\t\t\t\tFLAC__ASSERT(0);'), (128, 2, u'-\t\t\tFLAC__ASSERT(object.is_valid());'), (141, 2, u'-\t\t\tFLAC__ASSERT(0 != object);'), (148, 2, u'-\t\t\tFLAC__ASSERT(0 != object);'), (165, 2, u'-\t\t\tFLAC__ASSERT(object.is_valid());'), (182, 2, u'-\t\t\tFLAC__ASSERT(0 != object);'), (191, 2, u'-\t\t\tFLAC__ASSERT(0 != object);'), (200, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (206, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (212, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (218, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (236, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (242, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (248, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (254, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (260, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (266, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (272, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (278, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (284, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (290, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (291, 2, u'-\t\t\tFLAC__ASSERT(value >= FLAC__MIN_BLOCK_SIZE);'), (292, 2, u'-\t\t\tFLAC__ASSERT(value <= FLAC__MAX_BLOCK_SIZE);'), (298, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (299, 2, u'-\t\t\tFLAC__ASSERT(value >= FLAC__MIN_BLOCK_SIZE);'), (300, 2, u'-\t\t\tFLAC__ASSERT(value <= FLAC__MAX_BLOCK_SIZE);'), (306, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (307, 2, u'-\t\t\tFLAC__ASSERT(value < (1u << FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN));'), (313, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (314, 2, u'-\t\t\tFLAC__ASSERT(value < (1u << FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN));'), (320, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (321, 2, u'-\t\t\tFLAC__ASSERT(FLAC__format_sample_rate_is_valid(value));'), (327, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (328, 2, u'-\t\t\tFLAC__ASSERT(value > 0);'), (329, 2, u'-\t\t\tFLAC__ASSERT(value <= FLAC__MAX_CHANNELS);'), (335, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (336, 2, u'-\t\t\tFLAC__ASSERT(value >= FLAC__MIN_BITS_PER_SAMPLE);'), (337, 2, u'-\t\t\tFLAC__ASSERT(value <= FLAC__MAX_BITS_PER_SAMPLE);'), (343, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (344, 2, u'-\t\t\tFLAC__ASSERT(value < (((FLAC__uint64)1) << FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN));'), (350, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (351, 2, u'-\t\t\tFLAC__ASSERT(0 != value);'), (369, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (387, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (393, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (399, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (400, 2, u'-\t\t\tFLAC__ASSERT(0 != value);'), (406, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (412, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (430, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (436, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (437, 2, u'-\t\t\tFLAC__ASSERT(index < object_->data.seek_table.num_points);'), (443, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (444, 2, u'-\t\t\tFLAC__ASSERT(index < object_->data.seek_table.num_points);'), (450, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (451, 2, u'-\t\t\tFLAC__ASSERT(index <= object_->data.seek_table.num_points);'), (457, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (458, 2, u'-\t\t\tFLAC__ASSERT(index < object_->data.seek_table.num_points);'), (464, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (504, 2, u'-\t\t\tFLAC__ASSERT(entry.is_valid());'), (511, 2, u'-\t\t\tFLAC__ASSERT(entry.is_valid());'), (529, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (535, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (541, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (547, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (553, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (559, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (565, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (571, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (572, 2, u'-\t\t\tFLAC__ASSERT(0 != field);'), (599, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (600, 2, u'-\t\t\tFLAC__ASSERT(0 != field_name);'), (620, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (621, 2, u'-\t\t\tFLAC__ASSERT(0 != field_value);'), (785, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (791, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (797, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (798, 2, u'-\t\t\tFLAC__ASSERT(index < object_->data.vorbis_comment.num_comments);'), (804, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (812, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (813, 2, u'-\t\t\tFLAC__ASSERT(index < object_->data.vorbis_comment.num_comments);'), (819, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (820, 2, u'-\t\t\tFLAC__ASSERT(index <= object_->data.vorbis_comment.num_comments);'), (826, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (832, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (833, 2, u'-\t\t\tFLAC__ASSERT(index < object_->data.vorbis_comment.num_comments);'), (875, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (876, 2, u'-\t\t\tFLAC__ASSERT(i < object_->num_indices);'), (882, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (883, 2, u'-\t\t\tFLAC__ASSERT(0 != value);'), (890, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (891, 2, u'-\t\t\tFLAC__ASSERT(value <= 1);'), (897, 2, u'- \t\t\tFLAC__ASSERT(is_valid());'), (898, 2, u'- \t\t\tFLAC__ASSERT(i < object_->num_indices);'), (916, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (922, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (928, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (934, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (940, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (941, 2, u'-\t\t\tFLAC__ASSERT(i < object_->data.cue_sheet.num_tracks);'), (947, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (948, 2, u'-\t\t\tFLAC__ASSERT(0 != value);'), (955, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (961, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (967, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (968, 2, u'-\t\t\tFLAC__ASSERT(track_num < object_->data.cue_sheet.num_tracks);'), (969, 2, u'-\t\t\tFLAC__ASSERT(index_num < object_->data.cue_sheet.tracks[track_num].num_indices);'), (975, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (976, 2, u'-\t\t\tFLAC__ASSERT(track_num < object_->data.cue_sheet.num_tracks);'), (977, 2, u'-\t\t\tFLAC__ASSERT(index_num <= object_->data.cue_sheet.tracks[track_num].num_indices);'), (983, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (984, 2, u'-\t\t\tFLAC__ASSERT(track_num < object_->data.cue_sheet.num_tracks);'), (985, 2, u'-\t\t\tFLAC__ASSERT(index_num < object_->data.cue_sheet.tracks[track_num].num_indices);'), (991, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (992, 2, u'-\t\t\tFLAC__ASSERT(i < object_->data.cue_sheet.num_tracks);'), (999, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1000, 2, u'-\t\t\tFLAC__ASSERT(i <= object_->data.cue_sheet.num_tracks);'), (1007, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1008, 2, u'-\t\t\tFLAC__ASSERT(i < object_->data.cue_sheet.num_tracks);'), (1014, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1020, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1038, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1044, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1050, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1056, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1062, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1068, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1074, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1080, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1086, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1092, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1098, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1105, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1112, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1118, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1124, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1130, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1136, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1155, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1161, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1167, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1180, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1194, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1210, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1224, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1240, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1254, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1270, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1307, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1308, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1319, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1325, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1331, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1337, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1344, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1351, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1357, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1364, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1371, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1377, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1383, 2, u'-\t\t\tFLAC__ASSERT(0 != block);'), (1384, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1390, 2, u'-\t\t\tFLAC__ASSERT(0 != block);'), (1391, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1397, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1431, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1437, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1438, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1447, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1456, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1462, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1468, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1474, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1480, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1486, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1514, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1515, 2, u'-\t\t\tFLAC__ASSERT(chain.is_valid());'), (1521, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1527, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1533, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1539, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1548, 2, u'-\t\t\tFLAC__ASSERT(0 != block);'), (1549, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1560, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1566, 2, u'-\t\t\tFLAC__ASSERT(0 != block);'), (1567, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1578, 2, u'-\t\t\tFLAC__ASSERT(0 != block);'), (1579, 2, u'-\t\t\tFLAC__ASSERT(is_valid());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(68, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (74, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (80, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (86, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (92, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (98, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (104, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (110, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (116, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (122, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (128, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (134, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (140, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (146, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (152, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (158, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (164, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (170, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (176, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (182, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (188, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (194, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (200, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (206, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (212, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (218, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (224, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (259, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (261, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (268, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (270, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (277, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (279, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (286, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (288, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (295, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (297, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (304, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (306, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (313, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (315, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (322, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (324, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (344, 2, u'-\t\t\tFLAC__ASSERT(0 != decoder_);'), (350, 2, u'-\t\t\tFLAC__ASSERT(0 != decoder_);'), (361, 2, u'-\t\t\tFLAC__ASSERT(0 != decoder_);'), (367, 2, u'-\t\t\tFLAC__ASSERT(0 != decoder_);'), (384, 2, u'-\t\t\tFLAC__ASSERT(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (75, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (81, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (87, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (93, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (99, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (105, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (111, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (117, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (123, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (129, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (135, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (141, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (147, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (153, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (159, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (165, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (171, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (177, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (183, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (189, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (195, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (220, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (226, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (232, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (238, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (244, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (250, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (256, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (262, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (268, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (274, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (280, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (286, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (292, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (298, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (304, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (310, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (316, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (322, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (328, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (334, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (340, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (346, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (352, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (358, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (364, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (394, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (396, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (403, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (405, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (412, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (414, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (421, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (423, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (430, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (432, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (452, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (458, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (469, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (475, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (492, 2, u'-\t\t\tFLAC__ASSERT(false);'), (504, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (506, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);')]
===========================================
Class:  class FMT { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(115, 2, u'-    assert((!k && !ibl) ||'), (176, 2, u'-    assert((k != (size_t)(-1) && !ibl) ||'), (188, 2, u'-      assert((!k && !tbl) ||'), (198, 2, u'-  assert(!k);'), (211, 2, u'-    assert((k != (size_t)(-1) && !ibl) ||'), (221, 2, u'-      assert((!k && !tbl) ||'), (228, 2, u'-  assert(!k);'), (229, 2, u'-  assert(!obl);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(false);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CSpecialProtocol::GetPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(false);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: CSpecialProtocol::GetPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1832, 2, u'-#undef g_assert_warning'), (1833, 2, u'-extern __typeof (g_assert_warning) g_assert_warning __attribute((alias("IA__g_assert_warning"), visibility("default")));'), (3159, 2, u'-#undef g_assertion_message'), (3160, 2, u'-extern __typeof (g_assertion_message) g_assertion_message __attribute((alias("IA__g_assertion_message"), visibility("default")));'), (3162, 2, u'-#undef g_assertion_message_cmpnum'), (3163, 2, u'-extern __typeof (g_assertion_message_cmpnum) g_assertion_message_cmpnum __attribute((alias("IA__g_assertion_message_cmpnum"), visibility("default")));'), (3165, 2, u'-#undef g_assertion_message_cmpstr'), (3166, 2, u'-extern __typeof (g_assertion_message_cmpstr) g_assertion_message_cmpstr __attribute((alias("IA__g_assertion_message_cmpstr"), visibility("default")));'), (3168, 2, u'-#undef g_assertion_message_expr'), (3169, 2, u'-extern __typeof (g_assertion_message_expr) g_assertion_message_expr __attribute((alias("IA__g_assertion_message_expr"), visibility("default")));'), (3171, 2, u'-#undef g_assertion_message_error'), (3172, 2, u'-extern __typeof (g_assertion_message_error) g_assertion_message_error __attribute((alias("IA__g_assertion_message_error"), visibility("default")));'), (3270, 2, u'-#undef g_test_trap_assertions'), (3271, 2, u'-extern __typeof (g_test_trap_assertions) g_test_trap_assertions __attribute((alias("IA__g_test_trap_assertions"), visibility("default")));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(176, 2, u'-  g_assert (__argc >= ARG_COUNT);'), (185, 2, u'-  g_assert (argc == __argc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(ost->audio_resample);'), (3, 1, u'+                av_assert0(ost->audio_resample);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: need_realloc:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(ost->audio_resample);'), (3, 1, u'+                av_assert0(ost->audio_resample);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                assert(ost->audio_resample);'), (3, 1, u'+                av_assert0(ost->audio_resample);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-            assert(topBand    <= INT_MAX && topBand    >= 0);'), (16, 2, u'-            assert(bottomBand <= INT_MAX && bottomBand >= 0);'), (17, 2, u'-            assert(leftBand   <= INT_MAX && leftBand   >= 0);'), (18, 2, u'-            assert(rightBand  <= INT_MAX && rightBand  >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 23
Header: do_video_out
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-            assert(topBand    <= INT_MAX && topBand    >= 0);'), (16, 2, u'-            assert(bottomBand <= INT_MAX && bottomBand >= 0);'), (17, 2, u'-            assert(leftBand   <= INT_MAX && leftBand   >= 0);'), (18, 2, u'-            assert(rightBand  <= INT_MAX && rightBand  >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-            assert(topBand    <= INT_MAX && topBand    >= 0);'), (16, 2, u'-            assert(bottomBand <= INT_MAX && bottomBand >= 0);'), (17, 2, u'-            assert(leftBand   <= INT_MAX && leftBand   >= 0);'), (18, 2, u'-            assert(rightBand  <= INT_MAX && rightBand  >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(ist->decoding_needed);'), (3, 1, u'+                        av_assert0(ist->decoding_needed);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: output_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(ist->decoding_needed);'), (3, 1, u'+                        av_assert0(ist->decoding_needed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(ist->decoding_needed);'), (3, 1, u'+                        av_assert0(ist->decoding_needed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(idx >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: codebook_trellis_rate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(idx >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(idx >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 2, u'-        assert(exp_min >= 0 && exp_min <= 24);')]
===========================================
===========================================
Total add: 27
Total del: 29
Header: exponent_min
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 2, u'-        assert(exp_min >= 0 && exp_min <= 24);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 2, u'-        assert(exp_min >= 0 && exp_min <= 24);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+    assert(pad_bytes >= 0);'), (84, 2, u'-    assert(n >= 0);')]
===========================================
===========================================
Total add: 107
Total del: 154
Header: pow_poly
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+    assert(pad_bytes >= 0);'), (84, 2, u'-    assert(n >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+    assert(pad_bytes >= 0);'), (84, 2, u'-    assert(n >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-                            assert(ssd >= nodes_next[k]->ssd);\\'), (43, 2, u'-                                assert(pathn < FREEZE_INTERVAL<<avctx->trellis);\\'), (58, 1, u'+                        assert(pathn < FREEZE_INTERVAL<<avctx->trellis);\\')]
===========================================
===========================================
Total add: 47
Total del: 24
Header: adpcm_compress_trellis
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-                            assert(ssd >= nodes_next[k]->ssd);\\'), (43, 2, u'-                                assert(pathn < FREEZE_INTERVAL<<avctx->trellis);\\'), (58, 1, u'+                        assert(pathn < FREEZE_INTERVAL<<avctx->trellis);\\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-                            assert(ssd >= nodes_next[k]->ssd);\\'), (43, 2, u'-                                assert(pathn < FREEZE_INTERVAL<<avctx->trellis);\\'), (58, 1, u'+                        assert(pathn < FREEZE_INTERVAL<<avctx->trellis);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(start_y < end_y && block_h);'), (3, 1, u'+    assert(start_x < end_x && block_w);')]
===========================================
===========================================
Total add: 5
Total del: 6
Header: ff_emulated_edge_mc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(start_y < end_y && block_h);'), (3, 1, u'+    assert(start_x < end_x && block_w);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(start_y < end_y && block_h);'), (3, 1, u'+    assert(start_x < end_x && block_w);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+                av_assert0(f->plane[j].quant_table_index == f->avctx->context_model);')]
===========================================
===========================================
Total add: 29
Total del: 16
Header: write_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+                av_assert0(f->plane[j].quant_table_index == f->avctx->context_model);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+                av_assert0(f->plane[j].quant_table_index == f->avctx->context_model);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+        av_assert0(s->version>=2);'), (85, 1, u'+                av_assert0(!sf->rc_stat2[i]);')]
===========================================
===========================================
Total add: 91
Total del: 0
Header: encode_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+        av_assert0(s->version>=2);'), (85, 1, u'+                av_assert0(!sf->rc_stat2[i]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+        av_assert0(s->version>=2);'), (85, 1, u'+                av_assert0(!sf->rc_stat2[i]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+            av_assert0(bytes < buf_size/f->slice_count);'), (48, 1, u'+            av_assert0(bytes < (1<<24));')]
===========================================
===========================================
Total add: 77
Total del: 16
Header: encode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+            av_assert0(bytes < buf_size/f->slice_count);'), (48, 1, u'+            av_assert0(bytes < (1<<24));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+            av_assert0(bytes < buf_size/f->slice_count);'), (48, 1, u'+            av_assert0(bytes < (1<<24));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert2(context < p->context_count);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: decode_line
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert2(context < p->context_count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        av_assert2(context < p->context_count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    av_assert1(width && height);')]
===========================================
===========================================
Total add: 28
Total del: 0
Header: decode_rgb_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    av_assert1(width && height);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    av_assert1(width && height);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(s->avctx->sample_aspect_ratio.den);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: decode_slice_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(s->avctx->sample_aspect_ratio.den);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(s->avctx->sample_aspect_ratio.den);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(offset == avccontext->extradata_size);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: oggvorbis_encode_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(offset == avccontext->extradata_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(offset == avccontext->extradata_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->unrestricted_mv == 1);'), (3, 1, u'+    assert(s->unrestricted_mv == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: rv20_encode_picture_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->unrestricted_mv == 1);'), (3, 1, u'+    assert(s->unrestricted_mv == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->unrestricted_mv == 1);'), (3, 1, u'+    assert(s->unrestricted_mv == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+    assert(start_x < end_x && block_w > 0);'), (41, 1, u'+    assert(start_y < end_y && block_h > 0);')]
===========================================
===========================================
Total add: 74
Total del: 2
Header: just_return
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+    assert(start_x < end_x && block_w > 0);'), (41, 1, u'+    assert(start_y < end_y && block_h > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+    assert(start_x < end_x && block_w > 0);'), (41, 1, u'+    assert(start_y < end_y && block_h > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(h==8);\\'), (95, 2, u'-    assert(h==8);\\')]
===========================================
===========================================
Total add: 9
Total del: 126
Header: sub_hfyu_median_prediction_mmx2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(h==8);\\'), (95, 2, u'-    assert(h==8);\\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(h==8);\\'), (95, 2, u'-    assert(h==8);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1117, 1, u'+    assert(((int)temp & 7) == 0);\\'), (1126, 1, u'+    assert(((int)temp & 7) == 0);\\'), (1135, 1, u'+    assert(((int)temp & 7) == 0);\\'), (1144, 1, u'+    assert(((int)temp & 7) == 0);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    assert(PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1);')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: avfilter_link
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    assert(PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    assert(PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(outpicref->buf->w>0 && outpicref->buf->h>0);')]
===========================================
===========================================
Total add: 28
Total del: 2
Header: start_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(outpicref->buf->w>0 && outpicref->buf->h>0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        av_assert0(outpicref->buf->w>0 && outpicref->buf->h>0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->buf_ptr == s->buf_end);')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: fill_buffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->buf_ptr == s->buf_end);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(s->buf_ptr == s->buf_end);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 2, u'-                assert(mms->remaining_in_len==0);')]
===========================================
===========================================
Total add: 119
Total del: 97
Header: get_tcp_server_response
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 2, u'-                assert(mms->remaining_in_len==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 2, u'-                assert(mms->remaining_in_len==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(mms->header_parsed);')]
===========================================
===========================================
Total add: 34
Total del: 17
Header: mms_read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(mms->header_parsed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(mms->header_parsed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-        assert(write_len == data_len);')]
===========================================
===========================================
Total add: 21
Total del: 9
Header: xiph_handle_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-        assert(write_len == data_len);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-        assert(write_len == data_len);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(av_gcd(a1.num, a1.den) <= 1U);'), (3, 1, u'+    av_assert2(av_gcd(a1.num, a1.den) <= 1U);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: av_reduce
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(av_gcd(a1.num, a1.den) <= 1U);'), (3, 1, u'+    av_assert2(av_gcd(a1.num, a1.den) <= 1U);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(av_gcd(a1.num, a1.den) <= 1U);'), (3, 1, u'+    av_assert2(av_gcd(a1.num, a1.den) <= 1U);')]
===========================================
Class:                                                                                                       class CFreeTypeLibrary { 
Class: class CAutoBuffer { 
Class:  class CAutoTexBuffer { 
Class:  class TiXmlParsingData { 
Class: class CASAPDecoder : public CInputDecoder { 
Class: class CASAPPlugin : public CInputPlugin { 
Class: class CASAPSourceStream : public CSourceStream, IMediaSeeking { 
Class: class CASAPSource : public CSource, IFileSourceFilter { 
Class: class input_asap { 
Class: class preferences_page_asap : public preferences_page { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(827, 1, u'+    Assert(strm->avail_out > 0, "bug2");'), (1061, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1072, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1075, 1, u'+        Assert(cur_match < s->strstart, "no future");'), (1102, 1, u'+        Assert(scan[2] == match[2], "scan[2]?");'), (1113, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1133, 1, u'+        Assert(*scan == *match, "match[2]?");'), (1145, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1187, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1189, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1191, 1, u'+    Assert(cur_match < s->strstart, "no future");'), (1206, 1, u'+    Assert(*scan == *match, "match[2]?");'), (1218, 1, u'+    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1340, 1, u'+        Assert(more >= 2, "more < 2");'), (1409, 1, u'+            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (1417, 1, u'+        Assert(s->block_start >= 0L, "block gone");'), (1666, 1, u'+    Assert (flush != Z_NO_FLUSH, "no flush?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(371, 1, u'+        assert((mb_type > B_SYM_16X16) && (mb_type < B_8X8));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(575, 1, u'+    assert(IS_INTER(mb_type));'), (605, 1, u'+        assert(IS_8X8(mb_type));'), (638, 1, u'+                assert(IS_SUB_4X4(sub_mb_type));'), (964, 1, u'+    assert(s->linesize && s->uvlinesize);'), (999, 1, u'+    assert(s->current_picture_ptr->long_ref==0);'), (1220, 1, u'+                                    assert(mb_y || linesize <= block_offset[i]);'), (1917, 1, u'+            assert(s0->current_picture_ptr);'), (1918, 1, u'+            assert(s0->current_picture_ptr->data[0]);'), (1919, 1, u'+            assert(s0->current_picture_ptr->reference != DELAYED_PIC_REF);'), (1951, 1, u'+            assert(!s0->current_picture_ptr);'), (1965, 1, u'+    assert(s->mb_num == s->mb_width * s->mb_height);'), (1975, 1, u'+    assert(s->mb_y < s->mb_height);'), (3109, 1, u'+            assert(pics <= MAX_DELAYED_PIC_COUNT);'), (3156, 1, u'+    assert(pict->data[0] || !*data_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(972, 1, u'+        assert(cat == 1 || cat == 2 || cat == 4);'), (1109, 1, u'+    assert(coeff_count > 0);'), (1120, 1, u'+            assert( cat == 1 || cat == 2 || cat == 4 );'), (1233, 1, u'+        assert(h->slice_type_nos == FF_B_TYPE);'), (1286, 1, u'+        assert(h->slice_type_nos == FF_I_TYPE);'), (1544, 1, u'+            assert(IS_8X16(mb_type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(295, 1, u'+        assert(offset == FF_ARRAY_ELEMS(coeff_token_vlc_tables));'), (401, 1, u'+    assert(total_coeff<=16);'), (585, 1, u'+       assert(h->slice_type_nos == FF_I_TYPE);'), (693, 1, u'+            assert(h->slice_type_nos == FF_P_TYPE); //FIXME SP correct ?'), (848, 1, u'+            assert(IS_8X16(mb_type));'), (949, 1, u'+            assert((cbp&15) == 0 || (cbp&15) == 15);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(158, 1, u'+    assert(h->ref_list[1][0].reference&3);'), (184, 1, u'+                assert(match_count==1);'), (345, 1, u'+                assert(b8_stride==2);'), (395, 1, u'+    assert(h->ref_list[1][0].reference&3);'), (470, 1, u'+            assert(h->sps.direct_8x8_inference_flag);'), (553, 1, u'+                assert(b8_stride == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(321, 1, u'+    assert(!FRAME_MBAFF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(125, 1, u'+            assert(len<=32);'), (128, 1, u'+            assert(len<=32);'), (143, 1, u'+        assert(len <= 32);'), (232, 1, u'+                            assert(ref->reference);'), (233, 1, u'+                            assert(!ref->long_ref);'), (253, 1, u'+                        assert(!(ref && !ref->reference));'), (256, 1, u'+                            assert(ref->long_ref);'), (384, 1, u'+    assert(i >= 0 && i < h->short_ref_count);'), (422, 1, u'+            assert(h->long_ref[i]->long_ref == 1);'), (438, 1, u'+    assert(h->long_ref_count==0);'), (479, 1, u'+    assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);'), (568, 1, u'+            assert(mmco[i].long_arg <= 16);'), (590, 1, u'+        default: assert(0);'), (639, 1, u'+            assert(i < 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+#define ASSERT_ALIGNED(ptr) assert(((unsigned long)ptr&0x0000000F));'), (25, 1, u'+#define ASSERT_ALIGNED(ptr) ;'), (419, 1, u'+        ASSERT_ALIGNED(dst);'), (526, 1, u'+        ASSERT_ALIGNED(dst);'), (758, 1, u'+        ASSERT_ALIGNED(dst);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(106, 1, u'+    assert(c->low   == 0);'), (107, 1, u'+    assert(c->range >= 0x100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(303, 1, u'+        assert(compensation_distance > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 1, u'+    assert(s->f_code == 1);'), (44, 1, u'+    assert(s->unrestricted_mv == 1);'), (45, 1, u'+    assert(s->alt_inter_vlc == 0);'), (46, 1, u'+    assert(s->umvplus == 0);'), (47, 1, u'+    assert(s->modified_quant==1);'), (48, 1, u'+    assert(s->loop_filter==1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(215, 1, u'+    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (248, 1, u'+    assert(x<8 && y<8 && x>=0 && y>=0);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(101, 1, u'+    assert(s == c->avctx);'), (137, 1, u'+    assert(!s->thread_opaque);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 1, u'+        assert(0);'), (128, 1, u'+        assert(last_exp-10 >= 0 && last_exp-10 < 32);'), (136, 1, u'+        assert(code >= 0 && code < 120);'), (152, 1, u'+        assert(0); //FIXME not implemented'), (199, 1, u'+                assert(0); //FIXME not implemented'), (255, 1, u'+                    assert(0); //FIXME not implemented'), (261, 1, u'+        assert(0); //FIXME not implemented'), (283, 1, u'+                    assert(code < s->coef_vlcs[tindex]->n);'), (317, 1, u'+        assert(0);//FIXME not implemented'), (376, 1, u'+    assert((put_bits_count(&s->pb) & 7) == 0);'), (378, 1, u'+    assert(i>=0);')]
===========================================
Class:    class = ff_get_v(bc);
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(574, 1, u"+    assert(nut->frame_code['N'].flags == FLAG_INVALID);"), (679, 1, u'+    assert(nus->last_pts != AV_NOPTS_VALUE);'), (743, 1, u'+    assert(frame_code != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(113, 1, u'+    assert((int16_t)a[AV_INTEGER_SIZE-1] >= 0 && (int16_t)b[AV_INTEGER_SIZE-1] >= 0);'), (114, 1, u'+    assert(av_log2(b)>=0);'), (182, 1, u'+            assert(av_i2int(ai) == a);'), (183, 1, u'+            assert(av_i2int(bi) == b);'), (184, 1, u'+            assert(av_i2int(av_add_i(ai,bi)) == a+b);'), (185, 1, u'+            assert(av_i2int(av_sub_i(ai,bi)) == a-b);'), (186, 1, u'+            assert(av_i2int(av_mul_i(ai,bi)) == a*b);'), (187, 1, u'+            assert(av_i2int(av_shr_i(ai, 9)) == a>>9);'), (188, 1, u'+            assert(av_i2int(av_shr_i(ai,-9)) == a<<9);'), (189, 1, u'+            assert(av_i2int(av_shr_i(ai, 17)) == a>>17);'), (190, 1, u'+            assert(av_i2int(av_shr_i(ai,-17)) == a<<17);'), (191, 1, u'+            assert(av_log2_i(ai) == av_log2(a));'), (192, 1, u'+            assert(av_i2int(av_div_i(ai,bi)) == a/b);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(79, 1, u'+    assert(c > 0);'), (80, 1, u'+    assert(b >=0);'), (81, 1, u'+    assert((unsigned)rnd<=5 && rnd!=4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(410, 2, u'-   assert( collectComments_ );'), (413, 2, u'-      assert( lastValue_ != 0 );')]
===========================================
Class:class DefaultValueAllocator : public ValueAllocator class DefaultValueAllocator : public ValueAllocator
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 2, u'-   assert( current >= buffer );'), (62, 2, u'-   assert( current >= buffer );'), (400, 2, u'-         assert( childValues_.size() == size );'), (488, 2, u'-   assert( int(indentString_.size()) >= indentSize_ );'), (676, 2, u'-         assert( childValues_.size() == size );'), (768, 2, u'-   assert( indentString_.size() >= indentation_.size() );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(163, 2, u'-TestResult::getAssertionNestingLevel() const'), (517, 2, u'-        reportType == _CRT_ASSERT )')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(410, 1, u'+   assert( collectComments_ );'), (413, 1, u'+      assert( lastValue_ != 0 );')]
===========================================
Class:class DefaultValueAllocator : public ValueAllocator class DefaultValueAllocator : public ValueAllocator
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+   assert( current >= buffer );'), (62, 1, u'+   assert( current >= buffer );'), (400, 1, u'+         assert( childValues_.size() == size );'), (488, 1, u'+   assert( int(indentString_.size()) >= indentSize_ );'), (676, 1, u'+         assert( childValues_.size() == size );'), (768, 1, u'+   assert( indentString_.size() >= indentation_.size() );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(163, 1, u'+TestResult::getAssertionNestingLevel() const'), (517, 1, u'+        reportType == _CRT_ASSERT )')]
===========================================
Class: class NPT_HttpTcpConnector : public NPT_HttpClient::Connector { 
Class: class NPT_HttpStaticProxySelector : public NPT_HttpProxySelector { 
Class: class NPT_LogFileHandler : public NPT_LogHandler { class NPT_LogFileHandler : public NPT_LogHandler 
Class: class NPT_LogTcpHandler : public NPT_LogHandler { class NPT_LogTcpHandler : public NPT_LogHandler 
Class: class NPT_LogUdpHandler : public NPT_LogHandler { class NPT_LogUdpHandler : public NPT_LogHandler 
Class: class NPT_LogNullHandler : public NPT_LogHandler { class NPT_LogNullHandler : public NPT_LogHandler 
Class: class NPT_TlsContextImpl { class NPT_TlsContextImpl 
Class:  class NPT_TlsSessionImpl { class NPT_TlsSessionImpl 
Class: class NPT_TlsInputStream : public NPT_InputStream { class NPT_TlsInputStream : public NPT_InputStream 
Class: class NPT_TlsOutputStream : public NPT_OutputStream { class NPT_TlsOutputStream : public NPT_OutputStream 
Class: class NPT_XmlAttributeFinder { 
Class: class NPT_XmlAttributeFinderWithPrefix { 
Class: class NPT_XmlTagFinder { 
Class: class NPT_XmlTextFinder { 
Class: class NPT_XmlNamespaceCollapser { 
Class: class NPT_XmlAccumulator { class NPT_XmlAccumulator 
Class: class NPT_XmlProcessor { class NPT_XmlProcessor 
Class: class NPT_XmlAttributeWriter { 
Class: class NPT_XmlNodeWriter { 
Class: class NPT_XmlNodeCanonicalWriter { 
Class: class NPT_ZipInflateState { class NPT_ZipInflateState 
Class: class NPT_ZipDeflateState { class NPT_ZipDeflateState 
Class: class NPT_BsdSocketFd { 
Class: class NPT_BsdSocketStream { 
Class: class NPT_BsdSocketInputStream : public NPT_InputStream,                                  private NPT_BsdSocketStream { 
Class: class NPT_BsdSocket : public NPT_SocketInterface { 
Class: class NPT_BsdUdpSocket : public    NPT_UdpSocketInterface,                          protected NPT_BsdSocket  { 
Class: class NPT_BsdUdpMulticastSocket : public    NPT_UdpMulticastSocketInterface,                                   protected NPT_BsdUdpSocket  { 
Class: class NPT_BsdTcpClientSocket : protected NPT_BsdSocket { 
Class: class NPT_BsdTcpServerSocket : public    NPT_TcpServerSocketInterface,                                protected NPT_BsdSocket  { 
Class: class NPT_NullSystem : public NPT_SystemInterface { 
Class: class NPT_PSPDirectory : public NPT_DirectoryInterface { 
Class: class NPT_PSPFileStream { 
Class: class NPT_PSPFileInputStream : public NPT_InputStream,                                private NPT_PSPFileStream  { 
Class: class NPT_PSPFileOutputStream : public NPT_OutputStream,                                 private NPT_PSPFileStream { 
Class: class NPT_PSPFile: public NPT_FileInterface { 
Class: class NPT_PSPSharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_PSPAtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_PSPThread : public NPT_ThreadInterface { 
Class: class NPT_PosixSharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_PosixAtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_PosixThread : public NPT_ThreadInterface { 
Class: class NPT_StdcFileWrapper { 
Class: class NPT_StdcFileStream { 
Class: class NPT_StdcFileInputStream : public NPT_InputStream,                                 private NPT_StdcFileStream  { 
Class: class NPT_StdcFileOutputStream : public NPT_OutputStream,                                  private NPT_StdcFileStream { 
Class: class NPT_StdcFile: public NPT_FileInterface { 
Class: class NPT_Win32SerialPortStream { 
Class: class NPT_Win32SerialPortInputStream : public NPT_InputStream,                                        private NPT_Win32SerialPortStream  { 
Class: class NPT_Win32SerialPortOutputStream : public NPT_OutputStream,                                         private NPT_Win32SerialPortStream { 
Class: class NPT_Win32SerialPort: public NPT_SerialPortInterface { 
Class: class NPT_Win32SharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_Win32AtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_Win32Thread : public NPT_ThreadInterface { 
Class: class A { class A 
Class: class KillHandler : public NPT_HttpRequestHandler { 
Class: class TestHandler1 : public NPT_HttpRequestHandler { 
Class: class TestHandler2 : public NPT_HttpRequestHandler { 
Class: class ChunkedHandler : public NPT_HttpRequestHandler { 
Class: class A { class A 
Class:class Test1 { class Test1 
Class: class A { class A 
Class: class FooServerBarCmd1Message : public FooServerMessage { 
Class: class FooServerBarCmd2Message : public FooServerMessage { 
Class: class FooServerBarCmd3Message : public FooServerMessage { 
Class: class FooServerBarCmd4Message : public NPT_Message { 
Class: class FooClientMessageHandler { 
Class: class FooClientBarNotification1Message : public FooClientMessage { 
Class: class FooServer : public NPT_Thread,                   public NPT_MessageReceiver,                   public NPT_MessageHandler,                   public FooServerMessageHandler { 
Class: class FooClient : public NPT_MessageReceiver,                   public NPT_MessageHandler,                   public FooClientMessageHandler { 
Class:class TestServerTestCommandMessage : public TestServerMessage { 
Class:class TestClientMessageHandler { 
Class:class TestClientReplyMessage : public TestClientMessage { 
Class:class TestServer : public NPT_Thread,                    public NPT_MessageReceiver,                    public NPT_MessageHandler,                    public TestServerMessageHandler { 
Class:class TestClient : public NPT_MessageReceiver,                    public NPT_MessageHandler,                    public TestClientMessageHandler { 
Class:  class BarA { 
Class: class Item { 
Class: class WriterThread : public NPT_Thread { 
Class: class ReaderThread : public NPT_Thread { 
Class: class Thread1 : public NPT_Thread { 
Class: class Thread2 : public NPT_Runnable { 
Class: class Thread3 : public NPT_Thread { 
Class: class Thread4 : public NPT_Runnable { 
Class: class T1 : public NPT_Runnable { 
Class: class CBR : public NPT_Runnable, public NPT_ThreadCallbackReceiver { 
Class: class CBW : public NPT_Runnable { 
Class: class CBR2 : public NPT_Runnable, public NPT_ThreadCallbackReceiver { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(827, 1, u'+    Assert(strm->avail_out > 0, "bug2");'), (1061, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1072, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1075, 1, u'+        Assert(cur_match < s->strstart, "no future");'), (1102, 1, u'+        Assert(scan[2] == match[2], "scan[2]?");'), (1113, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1133, 1, u'+        Assert(*scan == *match, "match[2]?");'), (1145, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1187, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1189, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1191, 1, u'+    Assert(cur_match < s->strstart, "no future");'), (1206, 1, u'+    Assert(*scan == *match, "match[2]?");'), (1218, 1, u'+    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1340, 1, u'+        Assert(more >= 2, "more < 2");'), (1409, 1, u'+            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (1417, 1, u'+        Assert(s->block_start >= 0L, "block gone");'), (1666, 1, u'+    Assert (flush != Z_NO_FLUSH, "no flush?");')]
===========================================
Class: class FrameWriter : public NPT_Thread { 
Class: class PLT_CtrlPointListenerOnDeviceAddedIterator { 
Class: class PLT_CtrlPointListenerOnDeviceRemovedIterator { 
Class: class PLT_CtrlPointListenerOnActionResponseIterator { 
Class: class PLT_CtrlPointListenerOnEventNotifyIterator { 
Class: class PLT_AddGetSCPDRequestIterator { 
Class: class PLT_EventSubscriberRemoverIterator { 
Class: class PLT_ServiceReadyIterator { 
Class: class PLT_DeviceReadyIterator { 
Class: template <class T> class PLT_GetDescriptionIterator { 
Class: class NPT_HttpHeaderFinder { 
Class: class NPT_HttpHeaderPrinter { 
Class: class NPT_HttpHeaderLogger { 
Class: class PLT_UPnP_CtrlPointStopIterator { 
Class: class PLT_UPnP_DeviceStartIterator { 
Class: class PLT_UPnP_DeviceStopIterator { 
Class: class PLT_HttpCustomRequestHandler : public NPT_HttpRequestHandler { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+  assert((dtime->hour>>4) < 0xa && (dtime->hour&0xf) < 0xa);'), (36, 1, u'+  assert((dtime->minute>>4) < 0x7 && (dtime->minute&0xf) < 0xa);'), (37, 1, u'+  assert((dtime->second>>4) < 0x7 && (dtime->second&0xf) < 0xa);'), (38, 1, u'+  assert((dtime->frame_u&0xf) < 0xa);'), (153, 1, u'+  assert(!attr->unknown1);'), (271, 1, u'+    assert(attr->lang_code == 0 || attr->lang_code == 0xffff);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(87, 1, u'+\t\t\tFLAC__ASSERT(0 != object);'), (115, 1, u'+\t\t\t\tFLAC__ASSERT(0);'), (128, 1, u'+\t\t\tFLAC__ASSERT(object.is_valid());'), (141, 1, u'+\t\t\tFLAC__ASSERT(0 != object);'), (148, 1, u'+\t\t\tFLAC__ASSERT(0 != object);'), (165, 1, u'+\t\t\tFLAC__ASSERT(object.is_valid());'), (182, 1, u'+\t\t\tFLAC__ASSERT(0 != object);'), (191, 1, u'+\t\t\tFLAC__ASSERT(0 != object);'), (200, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (206, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (212, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (218, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (236, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (242, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (248, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (254, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (260, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (266, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (272, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (278, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (284, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (290, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (291, 1, u'+\t\t\tFLAC__ASSERT(value >= FLAC__MIN_BLOCK_SIZE);'), (292, 1, u'+\t\t\tFLAC__ASSERT(value <= FLAC__MAX_BLOCK_SIZE);'), (298, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (299, 1, u'+\t\t\tFLAC__ASSERT(value >= FLAC__MIN_BLOCK_SIZE);'), (300, 1, u'+\t\t\tFLAC__ASSERT(value <= FLAC__MAX_BLOCK_SIZE);'), (306, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (307, 1, u'+\t\t\tFLAC__ASSERT(value < (1u << FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN));'), (313, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (314, 1, u'+\t\t\tFLAC__ASSERT(value < (1u << FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN));'), (320, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (321, 1, u'+\t\t\tFLAC__ASSERT(FLAC__format_sample_rate_is_valid(value));'), (327, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (328, 1, u'+\t\t\tFLAC__ASSERT(value > 0);'), (329, 1, u'+\t\t\tFLAC__ASSERT(value <= FLAC__MAX_CHANNELS);'), (335, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (336, 1, u'+\t\t\tFLAC__ASSERT(value >= FLAC__MIN_BITS_PER_SAMPLE);'), (337, 1, u'+\t\t\tFLAC__ASSERT(value <= FLAC__MAX_BITS_PER_SAMPLE);'), (343, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (344, 1, u'+\t\t\tFLAC__ASSERT(value < (((FLAC__uint64)1) << FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN));'), (350, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (351, 1, u'+\t\t\tFLAC__ASSERT(0 != value);'), (369, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (387, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (393, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (399, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (400, 1, u'+\t\t\tFLAC__ASSERT(0 != value);'), (406, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (412, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (430, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (436, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (437, 1, u'+\t\t\tFLAC__ASSERT(index < object_->data.seek_table.num_points);'), (443, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (444, 1, u'+\t\t\tFLAC__ASSERT(index < object_->data.seek_table.num_points);'), (450, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (451, 1, u'+\t\t\tFLAC__ASSERT(index <= object_->data.seek_table.num_points);'), (457, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (458, 1, u'+\t\t\tFLAC__ASSERT(index < object_->data.seek_table.num_points);'), (464, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (504, 1, u'+\t\t\tFLAC__ASSERT(entry.is_valid());'), (511, 1, u'+\t\t\tFLAC__ASSERT(entry.is_valid());'), (529, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (535, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (541, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (547, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (553, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (559, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (565, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (571, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (572, 1, u'+\t\t\tFLAC__ASSERT(0 != field);'), (599, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (600, 1, u'+\t\t\tFLAC__ASSERT(0 != field_name);'), (620, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (621, 1, u'+\t\t\tFLAC__ASSERT(0 != field_value);'), (785, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (791, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (797, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (798, 1, u'+\t\t\tFLAC__ASSERT(index < object_->data.vorbis_comment.num_comments);'), (804, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (812, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (813, 1, u'+\t\t\tFLAC__ASSERT(index < object_->data.vorbis_comment.num_comments);'), (819, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (820, 1, u'+\t\t\tFLAC__ASSERT(index <= object_->data.vorbis_comment.num_comments);'), (826, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (832, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (833, 1, u'+\t\t\tFLAC__ASSERT(index < object_->data.vorbis_comment.num_comments);'), (875, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (876, 1, u'+\t\t\tFLAC__ASSERT(i < object_->num_indices);'), (882, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (883, 1, u'+\t\t\tFLAC__ASSERT(0 != value);'), (890, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (891, 1, u'+\t\t\tFLAC__ASSERT(value <= 1);'), (897, 1, u'+ \t\t\tFLAC__ASSERT(is_valid());'), (898, 1, u'+ \t\t\tFLAC__ASSERT(i < object_->num_indices);'), (916, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (922, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (928, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (934, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (940, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (941, 1, u'+\t\t\tFLAC__ASSERT(i < object_->data.cue_sheet.num_tracks);'), (947, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (948, 1, u'+\t\t\tFLAC__ASSERT(0 != value);'), (955, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (961, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (967, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (968, 1, u'+\t\t\tFLAC__ASSERT(track_num < object_->data.cue_sheet.num_tracks);'), (969, 1, u'+\t\t\tFLAC__ASSERT(index_num < object_->data.cue_sheet.tracks[track_num].num_indices);'), (975, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (976, 1, u'+\t\t\tFLAC__ASSERT(track_num < object_->data.cue_sheet.num_tracks);'), (977, 1, u'+\t\t\tFLAC__ASSERT(index_num <= object_->data.cue_sheet.tracks[track_num].num_indices);'), (983, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (984, 1, u'+\t\t\tFLAC__ASSERT(track_num < object_->data.cue_sheet.num_tracks);'), (985, 1, u'+\t\t\tFLAC__ASSERT(index_num < object_->data.cue_sheet.tracks[track_num].num_indices);'), (991, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (992, 1, u'+\t\t\tFLAC__ASSERT(i < object_->data.cue_sheet.num_tracks);'), (999, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1000, 1, u'+\t\t\tFLAC__ASSERT(i <= object_->data.cue_sheet.num_tracks);'), (1007, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1008, 1, u'+\t\t\tFLAC__ASSERT(i < object_->data.cue_sheet.num_tracks);'), (1014, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1020, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1038, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1044, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1050, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1056, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1062, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1068, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1074, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1080, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1086, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1092, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1098, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1105, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1112, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1118, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1124, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1130, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1136, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1155, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1161, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1167, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1180, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1194, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1210, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1224, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1240, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1254, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1270, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1307, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1308, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1319, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1325, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1331, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1337, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1344, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1351, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1357, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1364, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1371, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1377, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1383, 1, u'+\t\t\tFLAC__ASSERT(0 != block);'), (1384, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1390, 1, u'+\t\t\tFLAC__ASSERT(0 != block);'), (1391, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1397, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1431, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1437, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1438, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1447, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1456, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1462, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1468, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1474, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1480, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1486, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1514, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1515, 1, u'+\t\t\tFLAC__ASSERT(chain.is_valid());'), (1521, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1527, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1533, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1539, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1548, 1, u'+\t\t\tFLAC__ASSERT(0 != block);'), (1549, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1560, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1566, 1, u'+\t\t\tFLAC__ASSERT(0 != block);'), (1567, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1578, 1, u'+\t\t\tFLAC__ASSERT(0 != block);'), (1579, 1, u'+\t\t\tFLAC__ASSERT(is_valid());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(68, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (74, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (80, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (86, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (92, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (98, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (104, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (110, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (116, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (122, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (128, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (134, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (140, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (146, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (152, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (158, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (164, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (170, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (176, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (182, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (188, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (194, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (200, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (206, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (212, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (218, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (224, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (259, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (261, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (268, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (270, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (277, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (279, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (286, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (288, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (295, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (297, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (304, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (306, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (313, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (315, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (322, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (324, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (344, 1, u'+\t\t\tFLAC__ASSERT(0 != decoder_);'), (350, 1, u'+\t\t\tFLAC__ASSERT(0 != decoder_);'), (361, 1, u'+\t\t\tFLAC__ASSERT(0 != decoder_);'), (367, 1, u'+\t\t\tFLAC__ASSERT(0 != decoder_);'), (384, 1, u'+\t\t\tFLAC__ASSERT(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (75, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (81, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (87, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (93, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (99, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (105, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (111, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (117, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (123, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (129, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (135, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (141, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (147, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (153, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (159, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (165, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (171, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (177, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (183, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (189, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (195, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (220, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (226, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (232, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (238, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (244, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (250, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (256, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (262, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (268, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (274, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (280, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (286, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (292, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (298, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (304, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (310, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (316, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (322, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (328, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (334, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (340, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (346, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (352, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (358, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (364, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (394, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (396, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (403, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (405, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (412, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (414, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (421, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (423, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (430, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (432, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (452, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (458, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (469, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (475, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (492, 1, u'+\t\t\tFLAC__ASSERT(false);'), (504, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (506, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);')]
===========================================
Class:  class FMT { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(115, 1, u'+    assert((!k && !ibl) ||'), (176, 1, u'+    assert((k != (size_t)(-1) && !ibl) ||'), (188, 1, u'+      assert((!k && !tbl) ||'), (198, 1, u'+  assert(!k);'), (211, 1, u'+    assert((k != (size_t)(-1) && !ibl) ||'), (221, 1, u'+      assert((!k && !tbl) ||'), (228, 1, u'+  assert(!k);'), (229, 1, u'+  assert(!obl);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+# ifdef HAVE_ASSERT_H'), (32, 1, u'+#  include <assert.h>'), (45, 1, u'+  assert(value);'), (46, 1, u'+  assert(bytes == 8 || bytes == 4 || bytes == 3);'), (67, 1, u'+  assert(bytes == 4 || bytes == 5);'), (85, 1, u'+  assert(bytes >= 1 && bytes <= 4);'), (180, 1, u'+  assert(length <= 30);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(827, 1, u'+    Assert(strm->avail_out > 0, "bug2");'), (1061, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1072, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1075, 1, u'+        Assert(cur_match < s->strstart, "no future");'), (1102, 1, u'+        Assert(scan[2] == match[2], "scan[2]?");'), (1113, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1133, 1, u'+        Assert(*scan == *match, "match[2]?");'), (1145, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1187, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1189, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1191, 1, u'+    Assert(cur_match < s->strstart, "no future");'), (1206, 1, u'+    Assert(*scan == *match, "match[2]?");'), (1218, 1, u'+    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1340, 1, u'+        Assert(more >= 2, "more < 2");'), (1409, 1, u'+            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (1417, 1, u'+        Assert(s->block_start >= 0L, "block gone");'), (1666, 1, u'+    Assert (flush != Z_NO_FLUSH, "no flush?");')]
===========================================
Class:  class Error : public std::exception { 
Class:  class NonCopyable { 
Class:  class Mem : NonCopyable { 
Class:  class File : NonCopyable { 
Class:  class PngReadStruct : NonCopyable { 
Class:  class PngWriteStruct : NonCopyable { 
Class:  class PngRows : NonCopyable { 
Class:  class Image { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(102, 2, u'-  assert(skip_ != NULL);'), (107, 2, u'-  assert(skip_ != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(342, 2, u'-  assert(vec[0] >= 0);'), (343, 2, u'-  assert(vec[1] >= 0);'), (375, 2, u'-      assert(NULL == "Unexpected return value from pcre_config(NEWLINE)");'), (393, 2, u'-    assert(matchstart >= start);'), (394, 2, u'-    assert(matchend >= matchstart);'), (542, 2, u'-  assert((1 + n) * 3 <= vecsize);  // results + PCRE workspace'), (544, 2, u'-  assert(matches >= 0);  // TryMatch never returns negatives'), (580, 2, u'-  assert(n >= 0);'), (631, 2, u'-  assert(pcre_retval == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(323, 2, u'-    assert(re.error().empty());'), (336, 2, u'-    assert(re.error().empty());'), (343, 2, u'-    assert(re.error().empty());'), (578, 2, u'-                bool assertive = true) {'), (584, 2, u'-                  (assertive? "matches" : "doesn\'t match"),'), (586, 2, u'-  if (assertive) {'), (970, 2, u"-    assert(buf[strlen(buf)-1] != '9');"), (975, 2, u"-    assert(buf[strlen(buf)-1] != '9');"), (993, 2, u"-    assert(buf[strlen(buf)-1] != '9');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+#define MoreAssert(x) (true)'), (64, 1, u'+#define MoreAssertQ(x)'), (172, 1, u'+\tMoreAssertQ(fragToFix != nil);'), (173, 1, u'+\tMoreAssertQ(fragToFix->locator.fileSpec != nil);'), (174, 1, u'+\tMoreAssertQ(fragToFix->connID != nil);'), (175, 1, u'+\tMoreAssertQ(fragToFix->loaderSection == nil);'), (176, 1, u'+\tMoreAssertQ(fragToFix->sectionHeaders == nil);'), (177, 1, u'+\tMoreAssertQ(fragToFix->fileRef == 0);'), (271, 1, u'+\tMoreAssertQ(inOpStart != nil);'), (272, 1, u'+\tMoreAssertQ(outCount  != nil);'), (295, 1, u'+\tMoreAssertQ(packedData != nil);'), (296, 1, u'+\tMoreAssertQ(unpackedData != nil);'), (297, 1, u'+\tMoreAssertQ(unpackedSize >= packedSize);'), (303, 1, u'+\tMoreAssertQ( packedSize   == GetPtrSize( (Ptr) packedData  ) );'), (304, 1, u'+\tMoreAssertQ( unpackedSize == GetPtrSize( (Ptr) unpackedData) );'), (310, 1, u'+\t\tMoreAssertQ(unpackCursor < &unpackedData[unpackedSize]);'), (545, 1, u'+\t\tMoreAssertQ( initSection >= 0 );\t\t// Negative indexes are pseudo-sections which are just not allowed!'), (546, 1, u'+\t\tMoreAssertQ( initSection < fragToFix->containerHeader.sectionCount );'), (590, 1, u'+\t\t\tMoreAssertQ(fragToFix->sectionHeaders[initSection].sectionKind == kPEFUnpackedDataSection);'), (614, 1, u'+\t\tMoreAssertQ( MemError() == noErr );'), (618, 1, u'+\t\tMoreAssertQ( MemError() == noErr );'), (635, 1, u'+\tMoreAssertQ(fragToFix != nil);'), (636, 1, u'+\tMoreAssertQ(fragToFix->containerHeader.tag1 == kPEFTag1);'), (663, 1, u'+\tMoreAssertQ(loaderSection != nil);'), (664, 1, u'+\tMoreAssertQ(libraryName != nil);'), (665, 1, u'+\tMoreAssertQ(importLibrary != nil);'), (725, 1, u'+\tMoreAssertQ(lookup != nil);'), (726, 1, u'+\tMoreAssertQ(loaderSection != nil);'), (727, 1, u'+\tMoreAssertQ(symbolIndex < loaderSection->totalImportedSymbolCount);'), (728, 1, u'+\tMoreAssertQ(symbolValue != nil);'), (802, 1, u'+\tMoreAssertQ(fragToFix != nil);'), (803, 1, u'+\tMoreAssertQ(state != nil);'), (821, 1, u'+\tMoreAssertQ(relocHeader->reservedA == 0);\t\t// PEF spec says it must be; we check to try to catch bugs in calculation of relocHeader'), (892, 1, u'+\tMoreAssertQ(fragToFix != nil);'), (893, 1, u'+\tMoreAssertQ(fragToFix->containerHeader.tag1 == kPEFTag1);'), (894, 1, u'+\tMoreAssertQ(fragToFix->sectionHeaders != nil);'), (895, 1, u'+\tMoreAssertQ(fragToFix->loaderSection != nil);'), (896, 1, u'+\tMoreAssertQ(fragToFix->section0Base != nil);\t// Technically, having a nil for these two is not a problem, ...'), (897, 1, u'+\tMoreAssertQ(fragToFix->section1Base != nil);\t// but in practise it a wildly deviant case and we should know about it.'), (898, 1, u'+\tMoreAssertQ(importLibrary != nil);'), (899, 1, u'+\tMoreAssertQ(lookup != nil);'), (915, 1, u'+\tMoreAssertQ(fragToFix->loaderSection->relocSectionCount <= 0x0FFFF);'), (970, 1, u'+\t\t\tMoreAssertQ( state.currentReloc < totalRelocs );'), (1054, 1, u'+\t\t\t\t\t\tMoreAssertQ(state.sectionC != nil);'), (1063, 1, u'+\t\t\t\t\t\tMoreAssertQ(state.sectionD != nil);'), (1147, 1, u'+\t\t\t\t\tMoreAssertQ(false);'), (1176, 1, u'+\tMoreAssertQ(fragToFixLocator != nil);'), (1177, 1, u'+\tMoreAssertQ(fragToFixConnID != nil);'), (1178, 1, u'+\tMoreAssertQ(fragToFixInitRoutine != nil);'), (1179, 1, u'+\tMoreAssertQ(weakLinkedLibraryName != nil);'), (1180, 1, u'+\tMoreAssertQ(lookup != nil);'), (1239, 1, u'+\t\t\tMoreAssertQ(junk == noErr);'), (1243, 1, u'+\t\t\tMoreAssertQ(MemError() == noErr);'), (1247, 1, u'+\t\t\tMoreAssertQ(MemError() == noErr);'), (1262, 1, u'+\tMoreAssertQ(symName != nil);'), (1263, 1, u'+\tMoreAssertQ(symAddr != nil);'), (1264, 1, u'+\tMoreAssertQ(refCon  != nil);'), (1276, 1, u'+\t\t\tMoreAssertQ(false);'), (1291, 1, u'+\tMoreAssertQ(connIDToImport != nil);'), (1305, 1, u'+\tMoreAssertQ(symName != nil);'), (1306, 1, u'+\tMoreAssertQ(symAddr != nil);'), (1307, 1, u'+\tMoreAssertQ(refCon  != nil);'), (1328, 1, u'+\t\tMoreAssertQ(false);'), (1357, 1, u'+\tMoreAssertQ(bundleToImport != nil);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(100, 1, u'+\t\t\tassert(0x88 <= c && c <= 0xfe);'), (101, 1, u'+\t\t\tassert(0x40 <= IN2 && IN2 <= 0xfe);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 1, u'+\t\tassert(modNameSize >= 0); /* else cast to size_t is wrong */')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(441, 1, u'+#define Assert(cond,msg) {if(!(cond)) error(msg);}'), (445, 1, u'+#define Assert(cond,msg)'), (607, 1, u'+    Assert(encoder->strstart <= window_size-MIN_LOOKAHEAD, "insufficient lookahead");'), (610, 1, u'+\tAssert(cur_match < encoder->strstart, "no future");'), (642, 1, u'+\tAssert(scan <= encoder->window+(unsigned)(window_size-1), "wild scan");'), (751, 1, u'+\tAssert(window_size == (ulg)2*WSIZE, "no sliding with BIG_MEM");'), (1168, 1, u'+    Assert (length == 256, "ct_init: length != 256");'), (1183, 1, u'+    Assert (dist == 256, "ct_init: dist != 256");'), (1191, 1, u'+    Assert (dist == 256, "ct_init: 256+dist != 512");'), (1389, 1, u'+    Assert (code + encoder->bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,'), (1581, 1, u'+\t    Assert(count >= 3 && count <= 6, " 3_6?");'), (1650, 1, u'+    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");'), (1651, 1, u'+    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,'), (1770, 1, u'+\tAssert((ush)dist < (ush)MAX_DIST &&'), (1852, 1, u'+\t    Assert (code < D_CODES, "bad d_code");')]
===========================================
Class:  class TiXmlParsingData { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1832, 1, u'+#undef g_assert_warning'), (1833, 1, u'+extern __typeof (g_assert_warning) g_assert_warning __attribute((alias("IA__g_assert_warning"), visibility("default")));'), (3159, 1, u'+#undef g_assertion_message'), (3160, 1, u'+extern __typeof (g_assertion_message) g_assertion_message __attribute((alias("IA__g_assertion_message"), visibility("default")));'), (3162, 1, u'+#undef g_assertion_message_cmpnum'), (3163, 1, u'+extern __typeof (g_assertion_message_cmpnum) g_assertion_message_cmpnum __attribute((alias("IA__g_assertion_message_cmpnum"), visibility("default")));'), (3165, 1, u'+#undef g_assertion_message_cmpstr'), (3166, 1, u'+extern __typeof (g_assertion_message_cmpstr) g_assertion_message_cmpstr __attribute((alias("IA__g_assertion_message_cmpstr"), visibility("default")));'), (3168, 1, u'+#undef g_assertion_message_expr'), (3169, 1, u'+extern __typeof (g_assertion_message_expr) g_assertion_message_expr __attribute((alias("IA__g_assertion_message_expr"), visibility("default")));'), (3171, 1, u'+#undef g_assertion_message_error'), (3172, 1, u'+extern __typeof (g_assertion_message_error) g_assertion_message_error __attribute((alias("IA__g_assertion_message_error"), visibility("default")));'), (3270, 1, u'+#undef g_test_trap_assertions'), (3271, 1, u'+extern __typeof (g_test_trap_assertions) g_test_trap_assertions __attribute((alias("IA__g_test_trap_assertions"), visibility("default")));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(176, 1, u'+  g_assert (__argc >= ARG_COUNT);'), (185, 1, u'+  g_assert (argc == __argc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(91, 1, u'+\tassert (channel_count <= MAX_CHANNELS) ;'), (163, 1, u'+\tassert (channel_count <= MAX_CHANNELS) ;'), (291, 1, u'+\tassert (channel_count <= MAX_CHANNELS) ;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(102, 1, u'+  assert(skip_ != NULL);'), (107, 1, u'+  assert(skip_ != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(342, 1, u'+  assert(vec[0] >= 0);'), (343, 1, u'+  assert(vec[1] >= 0);'), (375, 1, u'+      assert(NULL == "Unexpected return value from pcre_config(NEWLINE)");'), (393, 1, u'+    assert(matchstart >= start);'), (394, 1, u'+    assert(matchend >= matchstart);'), (542, 1, u'+  assert((1 + n) * 3 <= vecsize);  // results + PCRE workspace'), (544, 1, u'+  assert(matches >= 0);  // TryMatch never returns negatives'), (580, 1, u'+  assert(n >= 0);'), (631, 1, u'+  assert(pcre_retval == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(323, 1, u'+    assert(re.error().empty());'), (336, 1, u'+    assert(re.error().empty());'), (343, 1, u'+    assert(re.error().empty());'), (578, 1, u'+                bool assertive = true) {'), (584, 1, u'+                  (assertive? "matches" : "doesn\'t match"),'), (586, 1, u'+  if (assertive) {'), (970, 1, u"+    assert(buf[strlen(buf)-1] != '9');"), (975, 1, u"+    assert(buf[strlen(buf)-1] != '9');"), (993, 1, u"+    assert(buf[strlen(buf)-1] != '9');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(465, 1, u'+SQLITE_PRIVATE   int sqlite3Assert(void);'), (466, 1, u'+# define ALWAYS(X)      ((X)?1:sqlite3Assert())'), (467, 1, u'+# define NEVER(X)       ((X)?sqlite3Assert():0)'), (10359, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (10369, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (10381, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (11066, 1, u'+      assert( n>=1 );'), (11659, 1, u'+  assert( rc==SQLITE_OK || pFile->pMethods==0 );'), (11728, 1, u'+  assert( pFile );'), (11769, 1, u'+  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) );'), (11806, 1, u'+  assert(vfsList);'), (12021, 1, u'+  assert( nByte>0 );'), (12041, 1, u'+  assert( pPrior!=0 );'), (12058, 1, u'+  assert( pPrior!=0 && nByte>0 );'), (12269, 1, u'+    assert( mem.nCurrent[i]>=0 );'), (12287, 1, u'+  assert( p->iForeGuard==(int)FOREGUARD );'), (12291, 1, u'+  assert( pInt[nReserve/sizeof(int)]==(int)REARGUARD );'), (12296, 1, u'+  while( nReserve-- > p->iSize ) assert( pU8[nReserve]==0x65 );'), (12317, 1, u'+  assert( (sizeof(struct MemBlockHdr)&7) == 0 );'), (12353, 1, u'+  assert( mem.disallow==0 );'), (12377, 1, u'+      assert(pBt[0]);'), (12405, 1, u'+  assert( sqlite3GlobalConfig.bMemstat || mem.mutex!=0 );'), (12411, 1, u'+    assert( pHdr->pPrev->pNext==pHdr );'), (12414, 1, u'+    assert( mem.pFirst==pHdr );'), (12418, 1, u'+    assert( pHdr->pNext->pPrev==pHdr );'), (12421, 1, u'+    assert( mem.pLast==pHdr );'), (12445, 1, u'+  assert( mem.disallow==0 );'), (12724, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12743, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12744, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (12745, 1, u'+  assert( i>=1 );'), (12747, 1, u'+  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (12748, 1, u'+  assert( size>=2 );'), (12762, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12777, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12778, 1, u'+  assert( i>=1 );'), (12779, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (12781, 1, u'+  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (12782, 1, u'+  assert( size>=2 );'), (12812, 1, u'+    assert( sqlite3_mutex_held(mem3.mutex) );'), (12828, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12829, 1, u'+  assert( i>=1 );'), (12830, 1, u'+  assert( mem3.aPool[i-1].u.hdr.size4x/4==nBlock );'), (12831, 1, u'+  assert( mem3.aPool[i+nBlock-1].u.hdr.prevSize==nBlock );'), (12845, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12846, 1, u'+  assert( mem3.szMaster>=nBlock );'), (12858, 1, u'+    assert( newi > mem3.iMaster+1 );'), (12892, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12896, 1, u'+    assert( (size&1)==0 );'), (12899, 1, u'+      assert( i > mem3.aPool[i-1].u.hdr.prevSize );'), (12933, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12934, 1, u'+  assert( sizeof(Mem3Block)==8 );'), (12940, 1, u'+  assert( nBlock>=2 );'), (13014, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (13015, 1, u'+  assert( p>mem3.aPool && p<&mem3.aPool[mem3.nPool] );'), (13017, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x&1)==1 );'), (13019, 1, u'+  assert( i+size<=mem3.nPool+1 );'), (13055, 1, u'+  assert( (pBlock[-1].u.hdr.size4x&1)!=0 );'), (13075, 1, u'+  assert( nBytes>0 );          /* malloc.c filters out 0 byte requests */'), (13086, 1, u'+  assert( pPrior );'), (13133, 1, u'+  assert( sizeof(Mem3Block)==8 );'), (13183, 1, u'+      assert( 0 );'), (13188, 1, u'+      assert( 0 );'), (13193, 1, u'+      assert( 0 );'), (13376, 1, u'+  assert( i>=0 && i<mem5.nBlock );'), (13377, 1, u'+  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (13378, 1, u'+  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (13398, 1, u'+  assert( sqlite3_mutex_held(mem5.mutex) );'), (13399, 1, u'+  assert( i>=0 && i<mem5.nBlock );'), (13400, 1, u'+  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (13401, 1, u'+  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (13406, 1, u'+    assert( x<mem5.nBlock );'), (13436, 1, u'+    assert( i>=0 && i<mem5.nBlock );'), (13450, 1, u'+  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (13452, 1, u'+  assert( iFirst>=0 );'), (13523, 1, u'+  assert( iBlock>=0 && iBlock<mem5.nBlock );'), (13524, 1, u'+  assert( ((u8 *)pOld-mem5.zPool)%mem5.nAtom==0 );'), (13525, 1, u'+  assert( (mem5.aCtrl[iBlock] & CTRL_FREE)==0 );'), (13529, 1, u'+  assert( iBlock+size-1<(u32)mem5.nBlock );'), (13533, 1, u'+  assert( mem5.currentCount>0 );'), (13534, 1, u'+  assert( mem5.currentOut>=(size*mem5.nAtom) );'), (13537, 1, u'+  assert( mem5.currentOut>0 || mem5.currentCount==0 );'), (13538, 1, u'+  assert( mem5.currentCount>0 || mem5.currentOut==0 );'), (13548, 1, u'+    assert( iBuddy>=0 );'), (13584, 1, u'+assert(0);'), (13672, 1, u'+    assert((iOffset+nAlloc)>mem5.nBlock);'), (13798, 1, u'+        assert(pMaster);'), (13800, 1, u'+        assert( sqlite3GlobalConfig.mutex.xMutexAlloc==0'), (14021, 1, u'+      assert( id-2 >= 0 );'), (14022, 1, u'+      assert( id-2 < (int)(sizeof(aStatic)/sizeof(aStatic[0])) );'), (14035, 1, u'+  assert( p->cnt==0 );'), (14036, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14052, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(p) );'), (14056, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(p) );'), (14068, 1, u'+  assert( debugMutexHeld(p) );'), (14070, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(p) );'), (14231, 1, u'+      assert( iType-2 >= 0 );'), (14232, 1, u'+      assert( iType-2 < sizeof(staticMutexes)/sizeof(staticMutexes[0]) );'), (14248, 1, u'+  assert( p->nRef==0 );'), (14249, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14270, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || os2MutexNotheld(p) );'), (14282, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || os2MutexNotheld(p) );'), (14306, 1, u'+  assert( p->nRef>0 );'), (14308, 1, u'+  assert( p->owner==tid );'), (14310, 1, u'+  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (14525, 1, u'+      assert( iType-2 >= 0 );'), (14526, 1, u'+      assert( iType-2 < ArraySize(staticMutexes) );'), (14542, 1, u'+  assert( p->nRef==0 );'), (14543, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14560, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (14579, 1, u'+      assert( p->nRef==0 );'), (14600, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (14619, 1, u'+      assert( p->nRef==0 );'), (14654, 1, u'+  assert( pthreadMutexHeld(p) );'), (14656, 1, u'+  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (14851, 1, u'+      assert( iType-2 >= 0 );'), (14852, 1, u'+      assert( iType-2 < sizeof(staticMutexes)/sizeof(staticMutexes[0]) );'), (14868, 1, u'+  assert( p );'), (14869, 1, u'+  assert( p->nRef==0 );'), (14870, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14887, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld(p) );'), (14894, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld(p) );'), (14925, 1, u'+  assert( p->nRef>0 );'), (14926, 1, u'+  assert( p->owner==GetCurrentThreadId() );'), (14928, 1, u'+  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (15194, 1, u'+  assert( sqlite3_mutex_held(mem0.mutex) );'), (15275, 1, u'+  assert( n>0 );'), (15282, 1, u'+  assert( scratchAllocOut==0 );'), (15300, 1, u'+      assert(  (((u8*)p - (u8*)0) & 7)==0 );'), (15332, 1, u'+    assert( scratchAllocOut==1 );'), (15353, 1, u'+      assert( i>=0 && i<sqlite3GlobalConfig.nScratch );'), (15355, 1, u'+      assert( mem0.nScratchFree<(u32)sqlite3GlobalConfig.nScratch );'), (15382, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (15412, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (15521, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (15556, 1, u'+  assert( db!=0 );'), (15557, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (15608, 1, u'+  assert( (n&0x7fffffff)==n );'), (15620, 1, u'+  assert( (n&0x7fffffff)==n );'), (15664, 1, u'+  assert( !db || sqlite3_mutex_held(db->mutex) );'), (16219, 1, u'+          assert( precision>0 );'), (16229, 1, u'+          assert( bufpt>buf );'), (16358, 1, u'+        assert( k>=0 && k<pSrc->nSrc );'), (16368, 1, u'+        assert( xtype==etINVALID );'), (16404, 1, u'+  assert( z!=0 || N==0 );'), (16502, 1, u'+  assert( db!=0 );'), (17389, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (17390, 1, u'+  assert( pMem->flags&MEM_Str );'), (17391, 1, u'+  assert( pMem->enc!=desiredEnc );'), (17392, 1, u'+  assert( pMem->enc!=0 );'), (17393, 1, u'+  assert( pMem->n>=0 );'), (17412, 1, u'+      assert( rc==SQLITE_NOMEM );'), (17468, 1, u'+      assert( desiredEnc==SQLITE_UTF16BE );'), (17479, 1, u'+    assert( desiredEnc==SQLITE_UTF8 );'), (17496, 1, u'+  assert( (pMem->n+(desiredEnc==SQLITE_UTF8?1:2))<=len );'), (17529, 1, u'+  assert( pMem->n>=0 );'), (17572, 1, u'+  assert( z<=zTerm );'), (17627, 1, u'+  assert( (m.flags & MEM_Term)!=0 || db->mallocFailed );'), (17628, 1, u'+  assert( (m.flags & MEM_Str)!=0 || db->mallocFailed );'), (17681, 1, u'+    assert( n>0 && n<=4 );'), (17688, 1, u'+    assert( c==t );'), (17689, 1, u'+    assert( (z-zBuf)==n );'), (17696, 1, u'+    assert( n>0 && n<=4 );'), (17700, 1, u'+    assert( c==i );'), (17701, 1, u'+    assert( (z-zBuf)==n );'), (17708, 1, u'+    assert( n>0 && n<=4 );'), (17712, 1, u'+    assert( c==i );'), (17713, 1, u'+    assert( (z-zBuf)==n );'), (17764, 1, u'+SQLITE_PRIVATE int sqlite3Assert(void){'), (17766, 1, u'+  assert( ALWAYS_was_false_or_NEVER_was_true );      /* Always fails */'), (18275, 1, u'+  assert( n<=9 );'), (18544, 1, u'+    assert( n>5 && n<=9 );'), (18586, 1, u"+  assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );"), (18650, 1, u'+    assert( sqlite3_mutex_held(db->mutex) );'), (18669, 1, u'+    assert( sqlite3_mutex_held(db->mutex) );'), (18738, 1, u'+  assert( pNew!=0 );'), (18753, 1, u'+  assert( pH!=0 );'), (18908, 1, u'+    assert( pH->first==0 );'), (18909, 1, u'+    assert( pH->count==0 );'), (18960, 1, u'+  assert( pH!=0 );'), (18974, 1, u'+        assert(nKey==elem->nKey);'), (19008, 1, u'+  assert( pH->htsize>0 );'), (19510, 1, u'+  assert( id!=0 );'), (19542, 1, u'+  assert( id!=0 );'), (19549, 1, u'+  assert( amt>0 );'), (19612, 1, u'+  assert( id!=0 );'), (19695, 1, u'+  assert( pFile!=0 );'), (19709, 1, u'+  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (19710, 1, u'+  assert( locktype!=PENDING_LOCK );'), (19711, 1, u'+  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (19737, 1, u'+    assert( pFile->locktype==NO_LOCK );'), (19748, 1, u'+    assert( pFile->locktype==SHARED_LOCK );'), (19771, 1, u'+    assert( pFile->locktype>=SHARED_LOCK );'), (19824, 1, u'+  assert( pFile!=0 );'), (19876, 1, u'+  assert( pFile!=0 );'), (19877, 1, u'+  assert( locktype<=SHARED_LOCK );'), (20304, 1, u'+      assert( !"Invalid flags argument" );'), (21067, 1, u'+    assert( 0 );'), (21069, 1, u'+  assert( p->l_whence==SEEK_SET );'), (21086, 1, u'+      assert( 0 );'), (21249, 1, u"+  assert( zAbsoluteName[0]=='/' );"), (21288, 1, u'+  assert( pId->nRef>0 );'), (21293, 1, u'+    assert( *pp==pId );'), (21603, 1, u'+        assert( pLock->pPrev->pNext==pLock );'), (21606, 1, u'+        assert( lockList==pLock );'), (21610, 1, u'+        assert( pLock->pNext->pPrev==pLock );'), (21626, 1, u'+        assert( pOpen->pPrev->pNext==pOpen );'), (21629, 1, u'+        assert( openList==pOpen );'), (21633, 1, u'+        assert( pOpen->pNext->pPrev==pOpen );'), (21834, 1, u'+  assert( pFile );'), (21937, 1, u'+  assert( pFile );'), (21954, 1, u'+  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (21955, 1, u'+  assert( locktype!=PENDING_LOCK );'), (21956, 1, u'+  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (21987, 1, u'+    assert( locktype==SHARED_LOCK );'), (21988, 1, u'+    assert( pFile->locktype==0 );'), (21989, 1, u'+    assert( pLock->cnt>0 );'), (22026, 1, u'+    assert( pLock->cnt==0 );'), (22027, 1, u'+    assert( pLock->locktype==0 );'), (22069, 1, u'+    assert( 0!=pFile->locktype );'), (22080, 1, u'+        assert(0);'), (22139, 1, u'+  assert( pFile );'), (22143, 1, u'+  assert( locktype<=SHARED_LOCK );'), (22153, 1, u'+  assert( pLock->cnt!=0 );'), (22155, 1, u'+    assert( pLock->locktype==pFile->locktype );'), (22169, 1, u'+    assert( pFile->inNormalWrite==0'), (22193, 1, u'+    lock.l_len = 2L;  assert( PENDING_BYTE+1==RESERVED_BYTE );'), (22240, 1, u'+    assert( pOpen->nLock>=0 );'), (22441, 1, u'+  assert( pFile );'), (22542, 1, u'+  assert( pFile );'), (22545, 1, u'+  assert( locktype<=SHARED_LOCK );'), (22561, 1, u'+  assert( locktype==NO_LOCK );'), (22622, 1, u'+  assert( pFile );'), (22701, 1, u'+  assert( pFile );'), (22744, 1, u'+  assert( pFile );'), (22747, 1, u'+  assert( locktype<=SHARED_LOCK );'), (22821, 1, u'+  assert( pFile );'), (22920, 1, u'+  assert( pFile );'), (22921, 1, u'+  assert( pSem );'), (22924, 1, u'+  assert( locktype<=SHARED_LOCK );'), (22957, 1, u'+    assert( pFile );'), (23066, 1, u'+  assert( pFile );'), (23127, 1, u'+  assert( pFile );'), (23143, 1, u'+  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (23144, 1, u'+  assert( locktype!=PENDING_LOCK );'), (23145, 1, u'+  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (23211, 1, u'+    assert( 0!=pFile->locktype );'), (23271, 1, u'+  assert( pFile );'), (23275, 1, u'+  assert( locktype<=SHARED_LOCK );'), (23309, 1, u'+      assert( pOpen->nLock>=0 );'), (23445, 1, u'+  assert( id );'), (23448, 1, u'+  assert( ((unixFile*)id)->isLockable==0'), (23514, 1, u'+  assert( id );'), (23515, 1, u'+  assert( amt>0 );'), (23518, 1, u'+  assert( ((unixFile*)id)->isLockable==0'), (23705, 1, u'+  assert((flags&0x0F)==SQLITE_SYNC_NORMAL'), (23714, 1, u'+  assert( pFile );'), (23758, 1, u'+  assert( id );'), (23775, 1, u'+  assert( id );'), (24146, 1, u'+  assert( pNew->pLock==NULL );'), (24147, 1, u'+  assert( pNew->pOpen==NULL );'), (24433, 1, u'+  assert((isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly));'), (24434, 1, u'+  assert(isCreate==0 || isReadWrite);'), (24435, 1, u'+  assert(isExclusive==0 || isCreate);'), (24436, 1, u'+  assert(isDelete==0 || isCreate);'), (24441, 1, u'+  assert( eType!=SQLITE_OPEN_MAIN_DB || !isDelete );'), (24442, 1, u'+  assert( eType!=SQLITE_OPEN_MAIN_JOURNAL || !isDelete );'), (24443, 1, u'+  assert( eType!=SQLITE_OPEN_MASTER_JOURNAL || !isDelete );'), (24446, 1, u'+  assert( eType==SQLITE_OPEN_MAIN_DB      || eType==SQLITE_OPEN_TEMP_DB'), (24455, 1, u'+    assert(isDelete && !isOpenDirectory);'), (24502, 1, u'+  assert( fd>=0 );'), (24617, 1, u'+      assert(!"Invalid flags argument");'), (24647, 1, u'+  assert( pVfs->mxPathname==MAX_PATHNAME );'), (24732, 1, u'+  assert((size_t)nBuf>=(sizeof(time_t)+sizeof(int)));'), (24757, 1, u'+      assert( sizeof(t)+sizeof(pid)<=(size_t)nBuf );'), (25459, 1, u'+  assert( (int)strlen(conchPath) == len+7 );'), (25509, 1, u'+    assert( (int)strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (25520, 1, u'+    assert( strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (25645, 1, u'+      assert( 0 );  /* The call assures that only valid opcodes are sent */'), (26735, 1, u'+  assert( id!=0 );'), (26784, 1, u'+  assert( id!=0 );'), (26822, 1, u'+  assert( id!=0 );'), (26831, 1, u'+  assert( amt>0 );'), (26857, 1, u'+  assert( id!=0 );'), (26889, 1, u'+  assert( id!=0 );'), (26926, 1, u'+  assert( id!=0 );'), (27030, 1, u'+  assert( id!=0 );'), (27044, 1, u'+  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (27045, 1, u'+  assert( locktype!=PENDING_LOCK );'), (27046, 1, u'+  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (27074, 1, u'+    assert( pFile->locktype==NO_LOCK );'), (27086, 1, u'+    assert( pFile->locktype==SHARED_LOCK );'), (27105, 1, u'+    assert( pFile->locktype>=SHARED_LOCK );'), (27149, 1, u'+  assert( id!=0 );'), (27180, 1, u'+  assert( pFile!=0 );'), (27181, 1, u'+  assert( locktype<=SHARED_LOCK );'), (27234, 1, u'+  assert( id!=0 );'), (27402, 1, u'+  assert( id!=0 );'), (27612, 1, u'+      assert(!"Invalid flags argument");'), (28108, 1, u'+  assert( sizeof(*p)==BITVEC_SZ );'), (28160, 1, u'+  assert( p!=0 );'), (28161, 1, u'+  assert( i>0 );'), (28162, 1, u'+  assert( i<=p->iSize );'), (28222, 1, u'+  assert( p!=0 );'), (28223, 1, u'+  assert( i>0 );'), (28429, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (28430, 1, u'+# define expensive_assert(X)  assert(X)'), (28432, 1, u'+# define expensive_assert(X)'), (28437, 1, u'+#if !defined(NDEBUG) && defined(SQLITE_ENABLE_EXPENSIVE_ASSERT)'), (28448, 1, u'+    assert( p->nRef || (p->flags&PGHDR_NEED_SYNC) );'), (28460, 1, u'+  assert( pPage->pDirtyNext || pPage==p->pDirtyTail );'), (28461, 1, u'+  assert( pPage->pDirtyPrev || pPage==p->pDirty );'), (28475, 1, u'+    assert( pPage==p->pDirtyTail );'), (28481, 1, u'+    assert( pPage==p->pDirty );'), (28487, 1, u'+  expensive_assert( pcacheCheckSynced(p) );'), (28497, 1, u'+  assert( pPage->pDirtyNext==0 && pPage->pDirtyPrev==0 && p->pDirty!=pPage );'), (28501, 1, u'+    assert( pPage->pDirtyNext->pDirtyPrev==0 );'), (28511, 1, u'+  expensive_assert( pcacheCheckSynced(p) );'), (28578, 1, u'+  assert( pCache->nRef==0 && pCache->pDirty==0 );'), (28598, 1, u'+  assert( pCache!=0 );'), (28599, 1, u'+  assert( pgno>0 );'), (28632, 1, u'+    expensive_assert( pcacheCheckSynced(pCache) );'), (28659, 1, u'+    assert( pPage->pCache==pCache );'), (28660, 1, u'+    assert( pPage->pgno==pgno );'), (28661, 1, u'+    assert( pPage->pExtra==(void *)&pPage[1] );'), (28680, 1, u'+  assert( p->nRef>0 );'), (28699, 1, u'+  assert(p->nRef>0);'), (28710, 1, u'+  assert( p->nRef==1 );'), (28728, 1, u'+  assert( p->nRef>0 );'), (28775, 1, u'+  assert( p->nRef>0 );'), (28776, 1, u'+  assert( newPgno>0 );'), (28801, 1, u'+        assert( p->flags&PGHDR_DIRTY );'), (29125, 1, u'+  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29154, 1, u'+  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29231, 1, u'+  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29271, 1, u'+  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29315, 1, u'+  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29336, 1, u'+  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29558, 1, u'+  assert( pPage->pLruPrev==0 && pPage->pLruNext==0 );'), (29559, 1, u'+  assert( pcache1.pLruHead!=pPage && pcache1.pLruTail!=pPage );'), (29597, 1, u'+  assert( pPage->iKey==iOld );'), (29812, 1, u'+  assert( N >= sizeof(*p) );'), (29849, 1, u'+  assert( p!=0 );'), (29872, 1, u'+    assert( p->pEntry==0 );'), (29892, 1, u'+    assert( pA->pNext==0 || pA->v<=pA->pNext->v );'), (29893, 1, u'+    assert( pB->pNext==0 || pB->v<=pB->pNext->v );'), (29907, 1, u'+    assert( pA->pNext==0 || pA->v<=pA->pNext->v );'), (29910, 1, u'+    assert( pB==0 || pB->pNext==0 || pB->v<=pB->pNext->v );'), (29924, 1, u'+  assert( p->isSorted==0 );'), (30350, 1, u'+static int assert_pager_state(Pager *pPager){'), (30353, 1, u'+  assert( pPager->tempFile==0 || pPager->state>=PAGER_EXCLUSIVE );'), (30356, 1, u'+  assert( pPager->tempFile==0 || pPager->changeCountDone );'), (30465, 1, u'+  assert( !MEMDB );'), (30471, 1, u'+    assert( isOpen(pPager->fd) );'), (30476, 1, u'+    assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (30477, 1, u'+    assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (30519, 1, u'+  assert( !pPg->pageHash || pPager->errCode'), (30613, 1, u'+  assert( offset%JOURNAL_HDR_SZ(pPager)==0 );'), (30614, 1, u'+  assert( offset>=c );'), (30615, 1, u'+  assert( (offset-c)<JOURNAL_HDR_SZ(pPager) );'), (30642, 1, u'+  assert( isOpen(pPager->jfd) );'), (30696, 1, u'+  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (30735, 1, u'+  assert( isOpen(pPager->fd) || pPager->noSync );'), (30816, 1, u'+  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (30888, 1, u'+    assert( rc!=SQLITE_OK || iPageSize16==(u16)iPageSize );'), (30937, 1, u'+  assert( isOpen(pPager->jfd) );'), (31046, 1, u'+      assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (31125, 1, u'+  assert('), (31240, 1, u'+  assert( isOpen(pPager->jfd) || pPager->pInJournal==0 );'), (31270, 1, u'+      assert( pPager->journalMode==PAGER_JOURNALMODE_DELETE || rc );'), (31391, 1, u'+  assert( (isMainJrnl&~1)==0 );      /* isMainJrnl is 0 or 1 */'), (31392, 1, u'+  assert( (isSavepnt&~1)==0 );       /* isSavepnt is 0 or 1 */'), (31393, 1, u'+  assert( isMainJrnl || pDone );     /* pDone always used on sub-journals */'), (31394, 1, u'+  assert( isSavepnt || pDone==0 );   /* pDone never used on non-savepoint */'), (31397, 1, u'+  assert( aData );         /* Temp storage must have already been allocated */'), (31415, 1, u'+    assert( !isSavepnt );'), (31433, 1, u'+  assert( pPager->state==PAGER_RESERVED || pPager->state>=PAGER_EXCLUSIVE );'), (31468, 1, u'+  assert( pPg || !MEMDB );'), (31501, 1, u'+    assert( isSavepnt );'), (31725, 1, u'+    assert( !isOpen(pJournal) );'), (31788, 1, u'+  assert( isOpen(pPager->fd) || pPager->tempFile );'), (31801, 1, u'+    assert( MAX_SECTOR_SIZE>=512 );'), (31883, 1, u'+  assert( isOpen(pPager->jfd) );'), (31938, 1, u'+      assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) );'), (32004, 1, u'+  assert( 0 );'), (32012, 1, u'+  assert('), (32095, 1, u'+  assert( pPager->state>=PAGER_SHARED );'), (32130, 1, u'+    assert( rc!=SQLITE_DONE );'), (32145, 1, u'+    assert( rc!=SQLITE_DONE );'), (32152, 1, u'+    assert( !(nJRec==0'), (32165, 1, u'+    assert( rc!=SQLITE_DONE );'), (32167, 1, u'+  assert( rc!=SQLITE_OK || pPager->journalOff==szJ );'), (32177, 1, u'+      assert( offset==ii*(4+pPager->pageSize) );'), (32180, 1, u'+    assert( rc!=SQLITE_DONE );'), (32270, 1, u'+  assert( rc!=SQLITE_OK || isOpen(pFile) );'), (32349, 1, u'+    assert( pageSize==0 || (pageSize>=512 && pageSize<=SQLITE_MAX_PAGE_SIZE) );'), (32438, 1, u'+  assert( isOpen(pPager->fd) || pPager->tempFile );'), (32479, 1, u'+    assert( isOpen(pPager->fd) || pPager->tempFile );'), (32530, 1, u'+  assert( PAGER_SHARED==SHARED_LOCK );'), (32531, 1, u'+  assert( PAGER_RESERVED==RESERVED_LOCK );'), (32532, 1, u'+  assert( PAGER_EXCLUSIVE==EXCLUSIVE_LOCK );'), (32535, 1, u'+  assert( pPager->state>=PAGER_SHARED || pPager->dbSizeValid==0 );'), (32542, 1, u'+  assert( (pPager->state>=locktype)'), (32568, 1, u'+  assert( pPager->dbSizeValid );'), (32569, 1, u'+  assert( pPager->dbSize>=nPage );'), (32570, 1, u'+  assert( pPager->state>=PAGER_RESERVED );'), (32614, 1, u'+  assert( !pPager->aSavepoint && !pPager->pInJournal );'), (32615, 1, u'+  assert( !isOpen(pPager->jfd) && !isOpen(pPager->sjfd) );'), (32677, 1, u'+    assert( !pPager->tempFile );'), (32681, 1, u'+      assert( isOpen(pPager->jfd) );'), (32820, 1, u'+  assert( pPager->state>=PAGER_RESERVED );'), (32828, 1, u'+    assert( pPager->tempFile && rc==SQLITE_OK );'), (32904, 1, u'+    assert( pageInJournal(pPg) || pPg->pgno>pPager->dbOrigSize );'), (32912, 1, u'+    assert( pPager->nSavepoint>0 );'), (32943, 1, u'+  assert( pPg->pPager==pPager );'), (32944, 1, u'+  assert( pPg->flags&PGHDR_DIRTY );'), (33148, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(journalFileSize) );'), (33159, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );'), (33189, 1, u'+      assert(SQLITE_DEFAULT_PAGE_SIZE<=SQLITE_MAX_DEFAULT_PAGE_SIZE);'), (33201, 1, u'+        assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (33202, 1, u'+        assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (33203, 1, u'+        assert(SQLITE_MAX_DEFAULT_PAGE_SIZE<=65536);'), (33229, 1, u'+    assert( pPager->memDb==0 );'), (33238, 1, u'+    assert( !pPager->pTmpSpace );'), (33263, 1, u'+  assert( pPager->state == (tempFile ? PAGER_EXCLUSIVE : PAGER_UNLOCK) );'), (33266, 1, u'+  assert( tempFile==PAGER_LOCKINGMODE_NORMAL'), (33268, 1, u'+  assert( PAGER_LOCKINGMODE_EXCLUSIVE==1 );'), (33282, 1, u'+  assert( isOpen(pPager->fd) || tempFile );'), (33332, 1, u'+  assert( pPager!=0 );'), (33333, 1, u'+  assert( pPager->useJournal );'), (33334, 1, u'+  assert( isOpen(pPager->fd) );'), (33335, 1, u'+  assert( !isOpen(pPager->jfd) );'), (33396, 1, u'+  assert( pPager->state>=PAGER_SHARED && !MEMDB );'), (33399, 1, u'+    assert( pPager->tempFile );'), (33483, 1, u'+    assert( !MEMDB );'), (33484, 1, u'+    assert( sqlite3PcacheRefCount(pPager->pPCache)==0 );'), (33488, 1, u'+        assert( pPager->state==PAGER_UNLOCK );'), (33494, 1, u'+    assert( pPager->state>=SHARED_LOCK );'), (33540, 1, u'+            assert( !pPager->tempFile );'), (33542, 1, u'+            assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (33574, 1, u'+      assert( (pPager->state==PAGER_SHARED)'), (33604, 1, u'+      assert( pPager->dbSizeValid );'), (33619, 1, u'+    assert( pPager->exclusiveMode || pPager->state==PAGER_SHARED );'), (33716, 1, u'+  assert( assert_pager_state(pPager) );'), (33717, 1, u'+  assert( pPager->state==PAGER_UNLOCK'), (33731, 1, u'+  assert( pPager!=0 );'), (33742, 1, u'+  assert( pPager->state!=PAGER_UNLOCK );'), (33748, 1, u'+  assert( pPg->pgno==pgno );'), (33749, 1, u'+  assert( pPg->pPager==pPager || pPg->pPager==0 );'), (33789, 1, u'+      assert( pPg->pPager==pPager );'), (33823, 1, u'+  assert( pPager!=0 );'), (33824, 1, u'+  assert( pgno!=0 );'), (33898, 1, u'+  assert( pPager->state>=PAGER_RESERVED );'), (33899, 1, u'+  assert( pPager->useJournal );'), (33900, 1, u'+  assert( pPager->pInJournal==0 );'), (33937, 1, u'+    assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (33985, 1, u'+  assert( pPager->state!=PAGER_UNLOCK );'), (33987, 1, u'+    assert( pPager->pInJournal==0 );'), (33988, 1, u'+    assert( !MEMDB && !pPager->tempFile );'), (34018, 1, u'+    assert( pPager->nRec==0 );'), (34019, 1, u'+    assert( pPager->dbOrigSize==0 );'), (34020, 1, u'+    assert( pPager->pInJournal==0 );'), (34025, 1, u'+  assert( !isOpen(pPager->jfd) || pPager->journalOff>0 || rc!=SQLITE_OK );'), (34050, 1, u'+  assert( !pPager->setMaster );'), (34069, 1, u'+    assert( pPager->state!=PAGER_UNLOCK );'), (34074, 1, u'+    assert( pPager->state>=PAGER_RESERVED );'), (34094, 1, u'+        assert( pPg->pgno!=PAGER_MJ_PGNO(pPager) );'), (34134, 1, u'+        assert( pPager->pInJournal!=0 );'), (34137, 1, u'+        assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (34140, 1, u'+          assert( rc==SQLITE_NOMEM );'), (34166, 1, u'+  assert( pPager->state>=PAGER_SHARED );'), (34204, 1, u'+    assert( !MEMDB );'), (34205, 1, u'+    assert( pPager->doNotSync==0 );'), (34222, 1, u'+    assert(nPage>0);'), (34223, 1, u'+    assert(pg1<=pPg->pgno);'), (34224, 1, u'+    assert((pg1+nPage)>pPg->pgno);'), (34236, 1, u'+              assert(pPager->needSync);'), (34256, 1, u'+      assert( !MEMDB && pPager->noSync==0 );'), (34264, 1, u'+      assert(pPager->needSync);'), (34267, 1, u'+    assert( pPager->doNotSync==1 );'), (34343, 1, u'+  assert( isDirectMode==0 );'), (34349, 1, u'+  assert( pPager->state>=PAGER_RESERVED );'), (34354, 1, u'+    assert( !pPager->tempFile && isOpen(pPager->fd) );'), (34358, 1, u'+    assert( pPgHdr==0 || rc==SQLITE_OK );'), (34376, 1, u'+        assert( pPager->dbFileSize>0 );'), (34481, 1, u'+    assert( isOpen(pPager->jfd) || pPager->journalMode==PAGER_JOURNALMODE_OFF );'), (34554, 1, u'+      assert( rc!=SQLITE_IOERR_BLOCKED );'), (34564, 1, u'+      assert( pPager->state>=PAGER_EXCLUSIVE );'), (34636, 1, u'+    assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) );'), (34641, 1, u'+  assert( pPager->state==PAGER_SYNCED || MEMDB || !pPager->dbModified );'), (34794, 1, u'+    assert( pPager->nSavepoint==0 || isOpen(pPager->sjfd) ||'), (34813, 1, u'+      assert( pPager->dbSizeValid );'), (34867, 1, u'+  assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (34868, 1, u'+  assert( iSavepoint>=0 || op==SAVEPOINT_ROLLBACK );'), (34892, 1, u'+      assert(rc!=SQLITE_DONE);'), (34898, 1, u'+      assert( rc==SQLITE_OK );'), (34990, 1, u'+  assert( pPg->nRef>0 );'), (35030, 1, u'+    assert( pageInJournal(pPg) || pPg->pgno>pPager->dbOrigSize );'), (35031, 1, u'+    assert( pPg->flags&PGHDR_DIRTY );'), (35032, 1, u'+    assert( pPager->needSync );'), (35042, 1, u'+  assert( !pPgOld || pPgOld->nRef==1 );'), (35072, 1, u'+    assert( pPager->needSync );'), (35081, 1, u'+    assert( pPager->noSync==0 && !MEMDB );'), (35108, 1, u'+  assert( pPg->nRef>0 || pPg->pPager->memDb );'), (35132, 1, u'+  assert( eMode==PAGER_LOCKINGMODE_QUERY'), (35135, 1, u'+  assert( PAGER_LOCKINGMODE_QUERY<0 );'), (35136, 1, u'+  assert( PAGER_LOCKINGMODE_NORMAL>=0 && PAGER_LOCKINGMODE_EXCLUSIVE>=0 );'), (35162, 1, u'+  assert( eMode==PAGER_JOURNALMODE_QUERY'), (35168, 1, u'+  assert( PAGER_JOURNALMODE_QUERY<0 );'), (35811, 1, u'+  assert( p->pBt->inTransaction!=TRANS_NONE || p->pBt->nTransaction==0 ); \\'), (35812, 1, u'+  assert( p->pBt->inTransaction>=p->inTrans );'), (35876, 1, u'+  assert( p->locked==0 );'), (35877, 1, u'+  assert( sqlite3_mutex_notheld(p->pBt->mutex) );'), (35878, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (35890, 1, u'+  assert( p->locked==1 );'), (35891, 1, u'+  assert( sqlite3_mutex_held(p->pBt->mutex) );'), (35892, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (35893, 1, u'+  assert( p->db==p->pBt->db );'), (35922, 1, u'+  assert( p->pNext==0 || p->pNext->pBt>p->pBt );'), (35923, 1, u'+  assert( p->pPrev==0 || p->pPrev->pBt<p->pBt );'), (35924, 1, u'+  assert( p->pNext==0 || p->pNext->db==p->db );'), (35925, 1, u'+  assert( p->pPrev==0 || p->pPrev->db==p->db );'), (35926, 1, u'+  assert( p->sharable || (p->pNext==0 && p->pPrev==0) );'), (35929, 1, u'+  assert( !p->locked || p->wantToLock>0 );'), (35930, 1, u'+  assert( p->sharable || p->wantToLock==0 );'), (35933, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (35937, 1, u'+  assert( (p->locked==0 && p->sharable) || p->pBt->db==p->db );'), (35959, 1, u'+    assert( pLater->sharable );'), (35960, 1, u'+    assert( pLater->pNext==0 || pLater->pNext->pBt>pLater->pBt );'), (35961, 1, u'+    assert( !pLater->locked || pLater->wantToLock>0 );'), (35979, 1, u'+    assert( p->wantToLock>0 );'), (35995, 1, u'+  assert( p->sharable==0 || p->locked==0 || p->wantToLock>0 );'), (35996, 1, u'+  assert( p->sharable==0 || p->locked==0 || p->db==p->pBt->db );'), (35997, 1, u'+  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->pBt->mutex) );'), (35998, 1, u'+  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->db->mutex) );'), (36037, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (36040, 1, u'+    assert( !p || (p->locked==0 && p->sharable) || p->pBt->db==p->db );'), (36044, 1, u'+        assert( p->wantToLock==1 );'), (36063, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (36067, 1, u'+      assert( p->wantToLock>0 );'), (36120, 1, u'+      assert( pArray->aBtree[i]!=pBtree );'), (36124, 1, u'+  assert( pArray->nMutex>=0 );'), (36125, 1, u'+  assert( pArray->nMutex<ArraySize(pArray->aBtree)-1 );'), (36128, 1, u'+    assert( pArray->aBtree[i]!=pBtree );'), (36151, 1, u'+    assert( i==0 || pArray->aBtree[i-1]->pBt<p->pBt );'), (36152, 1, u'+    assert( !p->locked || p->wantToLock>0 );'), (36155, 1, u'+    assert( sqlite3_mutex_held(p->db->mutex) );'), (36172, 1, u'+    assert( i==0 || pArray->aBtree[i-1]->pBt<p->pBt );'), (36173, 1, u'+    assert( p->locked || !p->sharable );'), (36174, 1, u'+    assert( p->wantToLock>0 );'), (36177, 1, u'+    assert( sqlite3_mutex_held(p->db->mutex) );'), (36304, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (36305, 1, u'+  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (36306, 1, u'+  assert( p->db!=0 );'), (36312, 1, u'+  assert( eLock==READ_LOCK || (p==pBt->pWriter && p->inTrans==TRANS_WRITE) );'), (36313, 1, u'+  assert( eLock==READ_LOCK || pBt->inTransaction==TRANS_WRITE );'), (36359, 1, u'+      assert( pIter->eLock==READ_LOCK || pIter->eLock==WRITE_LOCK );'), (36360, 1, u'+      assert( eLock==READ_LOCK || pIter->pBtree==p || pIter->eLock==READ_LOCK);'), (36364, 1, u'+          assert( p==pBt->pWriter );'), (36389, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (36390, 1, u'+  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (36391, 1, u'+  assert( p->db!=0 );'), (36398, 1, u'+  assert( SQLITE_OK==querySharedCacheTableLock(p, iTable, eLock) );'), (36440, 1, u'+  assert( WRITE_LOCK>READ_LOCK );'), (36462, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (36463, 1, u'+  assert( p->sharable || 0==*ppIter );'), (36464, 1, u'+  assert( p->inTrans>0 );'), (36468, 1, u'+    assert( pBt->isExclusive==0 || pBt->pWriter==pLock->pBtree );'), (36469, 1, u'+    assert( pLock->pBtree->inTrans>=pLock->eLock );'), (36478, 1, u'+  assert( pBt->isPending==0 || pBt->pWriter );'), (36515, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (36526, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (36617, 1, u'+  assert( CURSOR_VALID==pCur->eState );'), (36618, 1, u'+  assert( 0==pCur->pKey );'), (36619, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (36642, 1, u'+  assert( !pCur->apPage[0]->intKey || !pCur->pKey );'), (36665, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (36666, 1, u'+  assert( pExcept==0 || pExcept->pBt==pBt );'), (36683, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (36698, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (36699, 1, u'+  assert( pCur->eState>=CURSOR_REQUIRESEEK );'), (36708, 1, u'+    assert( pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_INVALID );'), (36751, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (36775, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (36777, 1, u'+  assert( 0==PTRMAP_ISPAGE(pBt, PENDING_BYTE_PAGE(pBt)) );'), (36779, 1, u'+  assert( pBt->autoVacuum );'), (36818, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (36828, 1, u'+  assert( pEType!=0 );'), (36859, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (36892, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (36895, 1, u'+  assert( pPage->leaf==0 || pPage->leaf==1 );'), (36897, 1, u'+  assert( n==4-4*pPage->leaf );'), (36988, 1, u'+  assert( pCell!=0 );'), (36990, 1, u'+  assert( (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload );'), (37004, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37030, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37031, 1, u'+  assert( pPage->pBt!=0 );'), (37032, 1, u'+  assert( pPage->pBt->usableSize <= SQLITE_MAX_PAGE_SIZE );'), (37033, 1, u'+  assert( pPage->nOverflow==0 );'), (37034, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37040, 1, u'+  assert( nCell==get2byte(&data[hdr+3]) );'), (37057, 1, u'+    assert( cbrk+size<=usableSize && cbrk>=0 );'), (37061, 1, u'+  assert( cbrk>=cellOffset+2*nCell );'), (37068, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37096, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37097, 1, u'+  assert( pPage->pBt );'), (37098, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37099, 1, u'+  assert( nByte>=0 );  /* Minimum cell size is 4 */'), (37100, 1, u'+  assert( pPage->nFree>=nByte );'), (37101, 1, u'+  assert( pPage->nOverflow==0 );'), (37106, 1, u'+  assert( nByte <= ('), (37159, 1, u'+  assert( pPage->pBt!=0 );'), (37160, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37161, 1, u'+  assert( start>=pPage->hdrOffset+6+(pPage->leaf?0:4) );'), (37162, 1, u'+  assert( (start + size)<=pPage->pBt->usableSize );'), (37163, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37164, 1, u'+  assert( size>=0 );   /* Minimum cell size is 4 */'), (37176, 1, u'+    assert( pbegin<=pPage->pBt->usableSize-4 );'), (37185, 1, u'+  assert( pbegin>addr || pbegin==0 );'), (37195, 1, u'+    assert( pbegin>addr );'), (37196, 1, u'+    assert( pbegin<=pPage->pBt->usableSize-4 );'), (37222, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37241, 1, u'+  assert( pPage->hdrOffset==(pPage->pgno==1 ? 100 : 0) );'), (37242, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37243, 1, u'+  pPage->leaf = (u8)(flagByte>>3);  assert( PTF_LEAF == 1<<3 );'), (37274, 1, u'+  assert( pPage->pBt!=0 );'), (37275, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37276, 1, u'+  assert( pPage->pgno==sqlite3PagerPagenumber(pPage->pDbPage) );'), (37277, 1, u'+  assert( pPage == sqlite3PagerGetExtra(pPage->pDbPage) );'), (37278, 1, u'+  assert( pPage->aData == sqlite3PagerGetData(pPage->pDbPage) );'), (37295, 1, u'+    assert( pBt->pageSize>=512 && pBt->pageSize<=32768 );'), (37366, 1, u'+  assert( sqlite3PagerPagenumber(pPage->pDbPage)==pPage->pgno );'), (37367, 1, u'+  assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (37368, 1, u'+  assert( sqlite3PagerGetData(pPage->pDbPage) == data );'), (37369, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37370, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (37382, 1, u'+  assert( pBt->pageSize>=512 && pBt->pageSize<=32768 );'), (37423, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (37437, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (37452, 1, u'+  assert( pBt->pPage1 );'), (37454, 1, u'+  assert( rc==SQLITE_OK || nPage==-1 );'), (37471, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (37510, 1, u'+    assert( pPage->nOverflow==0 || sqlite3PagerPageRefcount(pPage->pDbPage)>1 );'), (37511, 1, u'+    assert( pPage->aData );'), (37512, 1, u'+    assert( pPage->pBt );'), (37513, 1, u'+    assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (37514, 1, u'+    assert( sqlite3PagerGetData(pPage->pDbPage)==pPage->aData );'), (37515, 1, u'+    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37531, 1, u'+  assert( sqlite3PagerPageRefcount(pData)>0 );'), (37533, 1, u'+    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37552, 1, u'+  assert( pBt->db );'), (37553, 1, u'+  assert( sqlite3_mutex_held(pBt->db->mutex) );'), (37594, 1, u'+  assert( db!=0 );'), (37595, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (37627, 1, u'+        assert( pBt->nRef>0 );'), (37656, 1, u'+    assert( sizeof(i64)==8 || sizeof(i64)==4 );'), (37657, 1, u'+    assert( sizeof(u64)==8 || sizeof(u64)==4 );'), (37658, 1, u'+    assert( sizeof(u32)==4 );'), (37659, 1, u'+    assert( sizeof(u16)==2 );'), (37660, 1, u'+    assert( sizeof(Pgno)==4 );'), (37710, 1, u'+    assert( (pBt->pageSize & 7)==0 );  /* 8-byte alignment of pageSize */'), (37779, 1, u'+    assert( sqlite3_mutex_held(mutexOpen) );'), (37797, 1, u'+  assert( sqlite3_mutex_notheld(pBt->mutex) );'), (37851, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (37873, 1, u'+  assert( p->wantToLock==0 && p->locked==0 );'), (37880, 1, u'+    assert( !pBt->pCursor );'), (37891, 1, u'+  assert( p->wantToLock==0 );'), (37892, 1, u'+  assert( p->locked==0 );'), (37918, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (37936, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (37951, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (37953, 1, u'+  assert( pBt && pBt->pPager );'), (37983, 1, u'+  assert( nReserve>=-1 && nReserve<=255 );'), (37992, 1, u'+  assert( nReserve>=0 && nReserve<=255 );'), (37995, 1, u'+    assert( (pageSize & 7)==0 );'), (37996, 1, u'+    assert( !pBt->pPage1 && !pBt->pCursor );'), (38102, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (38103, 1, u'+  assert( pBt->pPage1==0 );'), (38142, 1, u'+    assert( (pageSize & 7)==0 );'), (38186, 1, u'+  assert( pBt->maxLeaf + 23 <= MX_CELL_SIZE(pBt) );'), (38203, 1, u'+  assert( sqlite3BtreeHoldsMutex(pRef) );'), (38230, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (38233, 1, u'+      assert( pBt->pPage1->aData );'), (38258, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (38264, 1, u'+  assert( pP1!=0 );'), (38269, 1, u'+  assert( sizeof(zMagicHeader)==16 );'), (38273, 1, u'+  assert( pBt->usableSize<=pBt->pageSize && pBt->usableSize+255>=pBt->pageSize);'), (38282, 1, u'+  assert( pBt->autoVacuum==1 || pBt->autoVacuum==0 );'), (38283, 1, u'+  assert( pBt->incrVacuum==1 || pBt->incrVacuum==0 );'), (38407, 1, u'+      assert( !pBt->pWriter );'), (38444, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (38492, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (38493, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (38558, 1, u'+  assert( eType==PTRMAP_OVERFLOW2 || eType==PTRMAP_OVERFLOW1 ||'), (38560, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (38561, 1, u'+  assert( pDbPage->pBt==pBt );'), (38639, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (38640, 1, u'+  assert( iLastPg>nFin );'), (38673, 1, u'+        assert( iFreePg==iLastPg );'), (38701, 1, u'+      assert( iFreePg<iLastPg );'), (38749, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE && p->inTrans==TRANS_WRITE );'), (38774, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (38776, 1, u'+  assert(pBt->autoVacuum);'), (38818, 1, u'+  assert( nRef==sqlite3PagerRefcount(pPager) );'), (38895, 1, u'+    assert( pBt->inTransaction==TRANS_WRITE );'), (38896, 1, u'+    assert( pBt->nTransaction>0 );'), (39031, 1, u'+    assert( TRANS_WRITE==pBt->inTransaction );'), (39043, 1, u'+    assert( countWriteCursors(pBt)==0 );'), (39049, 1, u'+    assert( pBt->nTransaction>0 );'), (39087, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (39088, 1, u'+  assert( pBt->readOnly==0 );'), (39089, 1, u'+  assert( iStatement>0 );'), (39090, 1, u'+  assert( iStatement>p->db->nSavepoint );'), (39094, 1, u'+    assert( pBt->inTransaction==TRANS_WRITE );'), (39122, 1, u'+    assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (39123, 1, u'+    assert( iSavepoint>=0 || (iSavepoint==-1 && op==SAVEPOINT_ROLLBACK) );'), (39175, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (39176, 1, u'+  assert( wrFlag==0 || wrFlag==1 );'), (39178, 1, u'+    assert( !pBt->readOnly );'), (39184, 1, u'+      assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (39275, 1, u'+  assert( pCur->cachedRowid==iRowid );'), (39324, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39331, 1, u'+  assert( pTempCur->pKey==0 );'), (39340, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39365, 1, u'+  static void assertCellInfo(BtCursor *pCur){'), (39370, 1, u'+    assert( memcmp(&info, &pCur->info, sizeof(info))==0 );'), (39373, 1, u'+  #define assertCellInfo(x)'), (39383, 1, u'+      assertCellInfo(pCur);'), (39394, 1, u'+    assertCellInfo(pCur);                                                      \\'), (39409, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39412, 1, u'+    assert( pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID );'), (39433, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39436, 1, u'+    assert( pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID );'), (39477, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (39478, 1, u'+  assert(pPgnoNext);'), (39508, 1, u'+    assert(rc==SQLITE_OK || pPage==0);'), (39600, 1, u'+  assert( pPage );'), (39601, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (39602, 1, u'+  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (39603, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39671, 1, u'+        assert(!pCur->aOverflow[iIdx] || pCur->aOverflow[iIdx]==nextPage);'), (39731, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39734, 1, u'+    assert( pCur->eState==CURSOR_VALID );'), (39735, 1, u'+    assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (39739, 1, u'+    assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (39763, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39766, 1, u'+    assert( pCur->eState==CURSOR_VALID );'), (39767, 1, u'+    assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (39768, 1, u'+    assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (39803, 1, u'+  assert( pCur!=0 && pCur->iPage>=0 && pCur->apPage[pCur->iPage]);'), (39804, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (39805, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39807, 1, u'+  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (39845, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39852, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39870, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39871, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (39872, 1, u'+  assert( pCur->iPage<BTCURSOR_MAX_DEPTH );'), (39898, 1, u'+static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){'), (39899, 1, u'+  assert( iIdx<=pParent->nCell );'), (39901, 1, u'+    assert( get4byte(&pParent->aData[pParent->hdrOffset+8])==iChild );'), (39903, 1, u'+    assert( get4byte(findCell(pParent, iIdx))==iChild );'), (39907, 1, u'+#  define assertParentIndex(x,y,z)'), (39919, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39920, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (39921, 1, u'+  assert( pCur->iPage>0 );'), (39922, 1, u'+  assert( pCur->apPage[pCur->iPage] );'), (39923, 1, u'+  assertParentIndex('), (39943, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39944, 1, u'+  assert( CURSOR_INVALID < CURSOR_REQUIRESEEK );'), (39945, 1, u'+  assert( CURSOR_VALID   < CURSOR_REQUIRESEEK );'), (39946, 1, u'+  assert( CURSOR_FAULT   > CURSOR_REQUIRESEEK );'), (39969, 1, u'+  assert( pRoot->pgno==pCur->pgnoRoot );'), (39978, 1, u'+    assert( pRoot->pgno==1 );'), (39980, 1, u'+    assert( subpage>0 );'), (40001, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (40002, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (40004, 1, u'+    assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (40026, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (40027, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (40048, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (40049, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40053, 1, u'+      assert( pCur->apPage[pCur->iPage]->nCell==0 );'), (40057, 1, u'+      assert( pCur->apPage[pCur->iPage]->nCell>0 );'), (40072, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (40073, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40077, 1, u'+      assert( pCur->apPage[pCur->iPage]->nCell==0 );'), (40080, 1, u'+      assert( pCur->eState==CURSOR_VALID );'), (40127, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (40128, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40149, 1, u'+  assert( pCur->apPage[pCur->iPage] );'), (40150, 1, u'+  assert( pCur->apPage[pCur->iPage]->isInit );'), (40153, 1, u'+    assert( pCur->apPage[pCur->iPage]->nCell==0 );'), (40156, 1, u'+  assert( pCur->apPage[0]->intKey || pIdxKey );'), (40192, 1, u'+          assert( nCellKey>intKey );'), (40236, 1, u'+    assert( lwr==upr+1 );'), (40237, 1, u'+    assert( pPage->isInit );'), (40246, 1, u'+      assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (40279, 1, u'+    assert( nKey==(i64)(int)nKey );'), (40313, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40328, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (40333, 1, u'+  assert( pRes!=0 );'), (40347, 1, u'+  assert( pPage->isInit );'), (40348, 1, u'+  assert( idx<=pPage->nCell );'), (40396, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (40414, 1, u'+  assert( pPage->isInit );'), (40481, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (40496, 1, u'+      assert( nearby>0 );'), (40497, 1, u'+      assert( pBt->autoVacuum );'), (40536, 1, u'+        assert( pPrevTrunk==0 );'), (40555, 1, u'+        assert( *pPgno==iTrunk );'), (40589, 1, u'+            assert( sqlite3PagerIswriteable(pPage1->pDbPage) );'), (40646, 1, u'+          assert( sqlite3PagerIswriteable(pTrunk->pDbPage) );'), (40679, 1, u'+      assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (40691, 1, u'+    assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (40701, 1, u'+  assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (40736, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (40737, 1, u'+  assert( iPage>1 );'), (40738, 1, u'+  assert( !pMemPage || pMemPage->pgno==iPage );'), (40864, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (40870, 1, u'+  assert( pBt->usableSize > 4 );'), (40873, 1, u'+  assert( ovflPgno==0 || nOvfl>0 );'), (40930, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (40934, 1, u'+  assert( pCell<pPage->aData || pCell>=&pPage->aData[pBt->pageSize]'), (40949, 1, u'+  assert( info.nHeader==nHeader );'), (40950, 1, u'+  assert( info.nKey==nKey );'), (40951, 1, u'+  assert( info.nData==(u32)(nData+nZero) );'), (41011, 1, u'+      assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (41015, 1, u'+      assert( pPrior<pPage->aData || pPrior>=&pPage->aData[pBt->pageSize]'), (41031, 1, u'+    assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (41035, 1, u'+    assert( pPayload<pPage->aData || pPayload>=&pPage->aData[pBt->pageSize]'), (41040, 1, u'+      assert( pSrc );'), (41074, 1, u'+  assert( idx>=0 && idx<pPage->nCell );'), (41075, 1, u'+  assert( sz==cellSize(pPage, idx) );'), (41076, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (41077, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41134, 1, u'+  assert( i>=0 && i<=pPage->nCell+pPage->nOverflow );'), (41135, 1, u'+  assert( pPage->nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=5460 );'), (41136, 1, u'+  assert( pPage->nOverflow<=ArraySize(pPage->aOvfl) );'), (41137, 1, u'+  assert( sz==cellSizePtr(pPage, pCell) );'), (41138, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41145, 1, u'+    assert( j<(int)(sizeof(pPage->aOvfl)/sizeof(pPage->aOvfl[0])) );'), (41154, 1, u'+    assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (41167, 1, u'+      assert( end + sz <= top );'), (41170, 1, u'+    assert( idx>0 );'), (41171, 1, u'+    assert( end <= get2byte(&data[hdr+5]) );'), (41191, 1, u'+      assert( (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload );'), (41221, 1, u'+  assert( pPage->nOverflow==0 );'), (41222, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41223, 1, u'+  assert( nCell>=0 && nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=5460 );'), (41228, 1, u'+  assert( totalSize+2*nCell<=pPage->nFree );'), (41229, 1, u'+  assert( pPage->nCell==0 );'), (41230, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (41237, 1, u'+    assert( cellbody>0 );'), (41238, 1, u'+    assert( pPage->nFree >= 2*nCell );'), (41246, 1, u'+    assert( cellbody==pPage->pBt->usableSize );'), (41301, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41310, 1, u'+    assert( sqlite3PagerIswriteable(pNew->pDbPage) );'), (41329, 1, u'+    assert( pPage->nCell>0 );'), (41333, 1, u'+    assert( parentSize<64 );'), (41334, 1, u'+    assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (41369, 1, u'+  assert( pPage->nOverflow==0 );'), (41449, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41455, 1, u'+  assert( pCur->iPage>0 );'), (41456, 1, u'+  assert( pPage->isInit );'), (41457, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) || pPage->nOverflow==1 );'), (41460, 1, u'+  assert( pParent );'), (41483, 1, u'+    assert( pPage->intKey );'), (41502, 1, u'+  assertParentIndex(pParent, idx, pPage->pgno);'), (41523, 1, u'+      assert( !pParent->leaf );'), (41534, 1, u'+    assert( i==nOld );'), (41559, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(aCopy[0]) );'), (41562, 1, u'+    assert( ((aCopy[i] - (u8*)0) & 7)==0 ); /* 8-byte alignment required */'), (41565, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(aSpace1) );'), (41611, 1, u'+      assert( nCell<nMaxCells );'), (41616, 1, u'+        aFrom[nCell] = (u8)i;   assert( i>=0 && i<6 );'), (41637, 1, u'+        assert( nCell<nMaxCells );'), (41641, 1, u'+        assert( sz<=pBt->pageSize/4 );'), (41642, 1, u'+        assert( iSpace1<=pBt->pageSize );'), (41649, 1, u'+        assert( leafCorrection==0 || leafCorrection==4 );'), (41651, 1, u'+        assert( get4byte(pTemp)==pgnoOld[i] );'), (41653, 1, u'+          assert( leafCorrection==0 );'), (41658, 1, u'+          assert( leafCorrection==4 );'), (41687, 1, u'+    assert( i<nMaxCells );'), (41719, 1, u'+    assert( d<nMaxCells );'), (41720, 1, u'+    assert( r<nMaxCells );'), (41736, 1, u'+  assert( cntNew[0]>0 || (pParent->pgno==1 && pParent->nCell==0) );'), (41741, 1, u'+  assert( pPage->pgno>1 );'), (41753, 1, u'+      assert( i>0 );'), (41823, 1, u'+    assert( j<nMaxCells );'), (41824, 1, u'+    assert( pNew->pgno==pgnoNew[i] );'), (41827, 1, u'+    assert( pNew->nCell>0 || (nNew==1 && cntNew[0]==0) );'), (41828, 1, u'+    assert( pNew->nOverflow==0 );'), (41837, 1, u'+        assert( k<nMaxCells );'), (41860, 1, u'+      assert( j<nMaxCells );'), (41903, 1, u'+          assert(leafCorrection==4);'), (41908, 1, u'+      assert( sz<=pBt->pageSize/4 );'), (41909, 1, u'+      assert( iSpace2<=pBt->pageSize );'), (41912, 1, u'+      assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (41937, 1, u'+  assert( j==nCell );'), (41938, 1, u'+  assert( nOld>0 );'), (41939, 1, u'+  assert( nNew>0 );'), (41950, 1, u'+  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (41965, 1, u'+  assert( pParent->isInit );'), (42007, 1, u'+  assert( pCur->iPage==0 );'), (42010, 1, u'+  assert( pPage->nCell==0 );'), (42011, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (42035, 1, u'+    assert( pgnoChild>0 );'), (42036, 1, u'+    assert( pgnoChild<=pagerPagecount(pPage->pBt) );'), (42042, 1, u'+      assert( pChild->nOverflow==0 );'), (42054, 1, u'+        assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42068, 1, u'+      assert( rc==SQLITE_OK );'), (42073, 1, u'+    assert( pPage->nOverflow==0 );'), (42108, 1, u'+  assert( pCur->iPage==0 );'), (42109, 1, u'+  assert( pCur->apPage[0]->nOverflow>0 );'), (42114, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (42115, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42118, 1, u'+  assert( sqlite3PagerIswriteable(pChild->pDbPage) );'), (42127, 1, u'+  assert( pChild->isInit==0 );'), (42136, 1, u'+    assert( pChild->nCell==pPage->nCell );'), (42137, 1, u'+    assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42179, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (42184, 1, u'+      assert( pCur->apPage[0]==pPage );'), (42185, 1, u'+      assert( pPage->nOverflow==0 || rc!=SQLITE_OK );'), (42189, 1, u'+      assert( pCur->apPage[0]==pPage );'), (42190, 1, u'+      assert( pPage->nOverflow==0 || rc!=SQLITE_OK );'), (42242, 1, u'+  assert( sqlite3BtreeHoldsMutex(pBtree) );'), (42261, 1, u'+      assert(dbOther);'), (42297, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (42298, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (42299, 1, u'+  assert( !pBt->readOnly );'), (42300, 1, u'+  assert( pCur->wrFlag );'), (42304, 1, u'+    assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (42321, 1, u'+  assert( pPage->intKey || nKey>=0 );'), (42322, 1, u'+  assert( pPage->leaf || !pPage->intKey );'), (42326, 1, u'+  assert( pPage->isInit );'), (42332, 1, u'+  assert( szNew==cellSizePtr(pPage, newCell) );'), (42333, 1, u'+  assert( szNew<=MX_CELL_SIZE(pBt) );'), (42337, 1, u'+    assert( idx<pPage->nCell );'), (42354, 1, u'+    assert( pPage->leaf );'), (42359, 1, u'+    assert( pPage->leaf );'), (42390, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (42391, 1, u'+  assert( pPage->isInit );'), (42392, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (42393, 1, u'+  assert( !pBt->readOnly );'), (42400, 1, u'+  assert( pCur->wrFlag );'), (42404, 1, u'+    assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (42449, 1, u'+    assert( !pPage->intKey );'), (42453, 1, u'+      assert( leafCur.aiIdx[leafCur.iPage]==0 );'), (42465, 1, u'+      assert( MX_CELL_SIZE(pBt)>=szNext+4 );'), (42515, 1, u'+        assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42551, 1, u'+        assert( rc!=SQLITE_OK || pLeafPage->pgno==leafPgno );'), (42552, 1, u'+        assert( rc!=SQLITE_OK || leafCur.aiIdx[leafCur.iPage]==0 );'), (42561, 1, u'+        assert( leafCursorInvalid || !leafCur.pagesShuffled'), (42597, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (42598, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (42599, 1, u'+  assert( !pBt->readOnly );'), (42635, 1, u'+    assert( pgnoRoot>=3 );'), (42668, 1, u'+      assert( eType!=PTRMAP_ROOTPAGE );'), (42669, 1, u'+      assert( eType!=PTRMAP_FREEPAGE );'), (42707, 1, u'+  assert( sqlite3PagerIswriteable(pRoot->pDbPage) );'), (42736, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (42756, 1, u'+    assert( pPage->intKey );'), (42787, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (42824, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (42825, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (42910, 1, u'+      assert( maxRootPgno!=PENDING_BYTE_PAGE(pBt) );'), (42964, 1, u'+  assert( idx>=0 && idx<=15 );'), (43019, 1, u'+  assert( idx>=1 && idx<=15 );'), (43021, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (43022, 1, u'+  assert( pBt->pPage1!=0 );'), (43029, 1, u'+      assert( pBt->autoVacuum || iMeta==0 );'), (43030, 1, u'+      assert( iMeta==0 || iMeta==1 );'), (43050, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (43051, 1, u'+  assert( pPage!=0 );'), (43052, 1, u'+  assert( pPage->pBt==pCur->pBt );'), (43337, 1, u'+    assert( rc==SQLITE_CORRUPT );  /* The only possible error from InitPage */'), (43360, 1, u'+    assert( sz==info.nPayload );'), (43599, 1, u'+  assert( p->pBt->pPager!=0 );'), (43612, 1, u'+  assert( p->pBt->pPager!=0 );'), (43620, 1, u'+  assert( p==0 || sqlite3_mutex_held(p->db->mutex) );'), (43628, 1, u'+  assert( p );'), (43629, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (43634, 1, u'+  assert( p );'), (43635, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (43677, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (43680, 1, u'+  assert( rc==SQLITE_OK || rc==SQLITE_LOCKED_SHAREDCACHE );'), (43696, 1, u'+    assert( READ_LOCK+1==WRITE_LOCK );'), (43697, 1, u'+    assert( isWriteLock==0 || isWriteLock==1 );'), (43720, 1, u'+  assert( cursorHoldsMutex(pCsr) );'), (43721, 1, u'+  assert( sqlite3_mutex_held(pCsr->pBtree->db->mutex) );'), (43722, 1, u'+  assert(pCsr->isIncrblobHandle);'), (43725, 1, u'+  assert( pCsr->eState!=CURSOR_REQUIRESEEK );'), (43738, 1, u'+  assert( !pCsr->pBt->readOnly'), (43743, 1, u'+    assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (43764, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (43765, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (43766, 1, u'+  assert(!pCur->isIncrblobHandle);'), (43767, 1, u'+  assert(!pCur->aOverflow);'), (43872, 1, u'+    assert( sParse.zErrMsg==0 );'), (43985, 1, u'+  assert( p->bDestLocked );'), (43986, 1, u'+  assert( !isFatalError(p->rc) );'), (43987, 1, u'+  assert( iSrcPg!=PENDING_BYTE_PAGE(p->pSrc->pBt) );'), (43988, 1, u'+  assert( zSrcData );'), (44168, 1, u'+        assert( pFile );'), (44169, 1, u'+        assert( (i64)nDestTruncate*(i64)nDestPagesize >= iSize || ('), (44215, 1, u'+      assert( rc2==SQLITE_OK );'), (44304, 1, u'+    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (44311, 1, u'+      assert( rc!=SQLITE_BUSY && rc!=SQLITE_LOCKED );'), (44333, 1, u'+    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (44372, 1, u'+  assert( b.rc!=SQLITE_OK );'), (44427, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (44428, 1, u'+  assert( desiredEnc==SQLITE_UTF8 || desiredEnc==SQLITE_UTF16LE'), (44433, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44442, 1, u'+  assert(rc==SQLITE_OK    || rc==SQLITE_NOMEM);'), (44443, 1, u'+  assert(rc==SQLITE_OK    || pMem->enc!=desiredEnc);'), (44444, 1, u'+  assert(rc==SQLITE_NOMEM || pMem->enc==desiredEnc);'), (44463, 1, u'+  assert( 1 >='), (44469, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (44509, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44510, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (44533, 1, u'+    assert( pMem->flags&MEM_Blob );'), (44534, 1, u'+    assert( (pMem->flags&MEM_RowSet)==0 );'), (44535, 1, u'+    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44559, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44590, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44591, 1, u'+  assert( !(fg&MEM_Zero) );'), (44592, 1, u'+  assert( !(fg&(MEM_Str|MEM_Blob)) );'), (44593, 1, u'+  assert( fg&(MEM_Int|MEM_Real) );'), (44594, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (44595, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44611, 1, u'+    assert( fg & MEM_Real );'), (44633, 1, u'+    assert( (pMem->flags & MEM_Null)!=0 || pFunc==pMem->u.pDef );'), (44634, 1, u'+    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44641, 1, u'+    assert( 0==(pMem->flags&MEM_Dyn) && !pMem->xDel );'), (44655, 1, u'+  assert( p->db==0 || sqlite3_mutex_held(p->db->mutex) );'), (44658, 1, u'+    assert( (p->flags & MEM_Agg)==0 );'), (44661, 1, u'+    assert( (p->flags&MEM_RowSet)==0 );'), (44731, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44732, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44745, 1, u'+    assert( pMem->z );'), (44760, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44761, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44775, 1, u'+    assert( pMem->z );'), (44789, 1, u'+  assert( pMem->flags & MEM_Real );'), (44790, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (44791, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44792, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44804, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44805, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (44806, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44818, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44819, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44833, 1, u'+  assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))==0 );'), (44834, 1, u'+  assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );'), (44835, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44905, 1, u'+  assert( db!=0 );'), (44915, 1, u'+    assert( pMem->zMalloc );'), (44918, 1, u'+    assert( pMem->u.pRowSet!=0 );'), (44928, 1, u'+  assert( p->db!=0 );'), (44951, 1, u'+  assert( (pFrom->flags & MEM_RowSet)==0 );'), (44957, 1, u'+    assert( srcType==MEM_Ephem || srcType==MEM_Static );'), (44969, 1, u'+  assert( (pFrom->flags & MEM_RowSet)==0 );'), (44991, 1, u'+  assert( pFrom->db==0 || sqlite3_mutex_held(pFrom->db->mutex) );'), (44992, 1, u'+  assert( pTo->db==0 || sqlite3_mutex_held(pTo->db->mutex) );'), (44993, 1, u'+  assert( pFrom->db==0 || pTo->db==0 || pFrom->db==pTo->db );'), (45022, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (45023, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (45038, 1, u'+    assert( enc!=0 );'), (45111, 1, u'+  assert( (combined_flags & MEM_RowSet)==0 );'), (45147, 1, u'+      assert( f1&MEM_Int );'), (45148, 1, u'+      assert( f2&MEM_Int );'), (45166, 1, u'+    assert( pMem1->enc==pMem2->enc );'), (45167, 1, u'+    assert( pMem1->enc==SQLITE_UTF8 ||'), (45174, 1, u'+    assert( !pColl || pColl->xCmp );'), (45238, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (45239, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (45245, 1, u'+  assert( zData!=0 );'), (45284, 1, u'+  assert( pVal->db==0 || sqlite3_mutex_held(pVal->db->mutex) );'), (45285, 1, u'+  assert( (enc&3)==(enc&~SQLITE_UTF16_ALIGNED) );'), (45286, 1, u'+  assert( (pVal->flags & MEM_RowSet)==0 );'), (45291, 1, u'+  assert( (MEM_Blob>>3) == MEM_Str );'), (45297, 1, u'+      assert( (pVal->flags & (MEM_Ephem|MEM_Static))!=0 );'), (45304, 1, u'+    assert( (pVal->flags&MEM_Blob)==0 );'), (45306, 1, u'+    assert( 0==(1&SQLITE_PTR_TO_INT(pVal->z)) );'), (45308, 1, u'+  assert(pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) || pVal->db==0'), (45378, 1, u'+    assert( pExpr->token.n>=3 );'), (45379, 1, u"+    assert( pExpr->token.z[0]=='x' || pExpr->token.z[0]=='X' );"), (45380, 1, u"+    assert( pExpr->token.z[1]=='\\'' );"), (45381, 1, u"+    assert( pExpr->token.z[pExpr->token.n-1]=='\\'' );"), (45499, 1, u'+  assert( p->zSql==0 );'), (45583, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (45584, 1, u'+  assert( op>0 && op<0xff );'), (45655, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (45675, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (45676, 1, u'+  assert( j>=0 && j<p->nLabel );'), (45741, 1, u'+      assert( p->nOp - i >= 3 );'), (45742, 1, u'+      assert( pOp[-1].opcode==OP_Integer );'), (45749, 1, u'+      assert( -1-pOp->p2<p->nLabel );'), (45777, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (45787, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (45828, 1, u'+  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45839, 1, u'+  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45849, 1, u'+  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45860, 1, u'+  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45862, 1, u'+    assert( p->nOp>0 );'), (45966, 1, u'+  assert( p!=0 );'), (45968, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (45975, 1, u'+  assert( addr<p->nOp );'), (46034, 1, u'+  assert( p->nOp>0 || p->aOp==0 );'), (46035, 1, u'+  assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );'), (46047, 1, u'+  assert( p->nOp>0 || p->aOp==0 );'), (46048, 1, u'+  assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );'), (46063, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (46064, 1, u'+  assert( (addr>=0 && addr<p->nOp) || p->db->mallocFailed );'), (46076, 1, u'+  assert( nTemp>=20 );'), (46105, 1, u'+      assert( i<nTemp );'), (46132, 1, u'+      assert( (pMem->flags & MEM_Null)==0 );'), (46161, 1, u'+  assert( zP4!=0 );'), (46172, 1, u'+  assert( i>=0 && i<p->db->nDb );'), (46173, 1, u'+  assert( i<(int)sizeof(p->btreeMask)*8 );'), (46213, 1, u'+      assert( (&p[1])==pEnd || p[0].db==p[1].db );'), (46244, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (46251, 1, u'+      assert( !pMem->xDel );'), (46281, 1, u'+  assert( p->explain );'), (46283, 1, u'+  assert( db->magic==SQLITE_MAGIC_BUSY );'), (46284, 1, u'+  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY || p->rc==SQLITE_NOMEM );'), (46320, 1, u'+      assert( pMem->z!=0 );'), (46345, 1, u'+      assert( p->db->mallocFailed );'), (46353, 1, u'+      assert( pMem->z!=0 );'), (46362, 1, u'+        assert( p->db->mallocFailed );'), (46465, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(*ppFrom) );'), (46504, 1, u'+  assert( p!=0 );'), (46505, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (46509, 1, u'+  assert( p->nOp>0 );'), (46540, 1, u'+    assert( EIGHT_BYTE_ALIGNMENT(zCsr) );'), (46579, 1, u'+    assert( p->aMem[n].db==db );'), (46723, 1, u'+  assert( idx<p->nResColumn );'), (46724, 1, u'+  assert( var<COLNAME_N );'), (46726, 1, u'+    assert( !zName || xDel!=SQLITE_DYNAMIC );'), (46729, 1, u'+  assert( p->aColName!=0 );'), (46732, 1, u'+  assert( rc!=0 || !zName || (pColName->flags&MEM_Term)!=0 );'), (46775, 1, u'+    assert( (db->flags & SQLITE_CommitBusy)==0 );'), (46977, 1, u'+  assert( cnt==db->activeVdbeCnt );'), (46978, 1, u'+  assert( nWrite==db->writeVdbeCnt );'), (47027, 1, u'+    assert( eOp==SAVEPOINT_ROLLBACK || eOp==SAVEPOINT_RELEASE);'), (47028, 1, u'+    assert( db->nStatement>0 );'), (47029, 1, u'+    assert( p->iStatement==(db->nStatement+db->nSavepoint) );'), (47243, 1, u'+    assert( db->activeVdbeCnt>=db->writeVdbeCnt );'), (47259, 1, u'+  assert( db->activeVdbeCnt>0 || db->autoCommit==0 || db->nStatement==0 );'), (47364, 1, u'+    assert( (rc & p->db->errMask)==rc );'), (47403, 1, u'+    assert( db->pVdbe==p );'), (47440, 1, u'+    assert( p->isTable );'), (47537, 1, u'+  assert( pMem->db->mallocFailed || flags&(MEM_Str|MEM_Blob) );'), (47542, 1, u'+  assert( n>=0 );'), (47638, 1, u'+      assert( sizeof(v)==sizeof(pMem->r) );'), (47645, 1, u'+    assert( len<=nBuf );'), (47655, 1, u'+    assert( pMem->n + ((pMem->flags & MEM_Zero)?pMem->u.nZero:0)'), (47657, 1, u'+    assert( pMem->n<=nBuf );'), (47732, 1, u'+      assert( sizeof(r1)==sizeof(t2) && memcmp(&r1, &t2, sizeof(r1))==0 );'), (47742, 1, u'+        assert( sizeof(x)==8 && sizeof(pMem->r)==8 );'), (47822, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (47839, 1, u'+  assert( u<=pKeyInfo->nField + 1 );'), (48073, 1, u'+  assert( pUnpacked->flags & UNPACKED_IGNORE_ROWID );'), (48084, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (48176, 1, u'+    assert(p->pLruNext || p==sqlite3LruStatements.pLast);'), (48177, 1, u'+    assert(!p->pLruNext || p->pLruNext->pLruPrev==p);'), (48178, 1, u'+    assert(p->pLruPrev || p==sqlite3LruStatements.pFirst);'), (48179, 1, u'+    assert(!p->pLruPrev || p->pLruPrev->pLruNext==p);'), (48198, 1, u'+  assert( stmtLruCheck() );'), (48201, 1, u'+    assert( !sqlite3LruStatements.pLast );'), (48205, 1, u'+    assert( !sqlite3LruStatements.pLast->pLruNext );'), (48211, 1, u'+  assert( stmtLruCheck() );'), (48223, 1, u'+    assert( stmtLruCheck() );'), (48236, 1, u'+    assert( stmtLruCheck() );'), (48358, 1, u'+    assert( (rc & (v->db->errMask))==rc );'), (48443, 1, u'+  assert( n>=0 );'), (48444, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48448, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48452, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48458, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48464, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48468, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48472, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48481, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48491, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48500, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48509, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48514, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48518, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48527, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48535, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48554, 1, u'+  assert(p);'), (48637, 1, u'+  assert( rc==SQLITE_ROW  || rc==SQLITE_DONE   || rc==SQLITE_ERROR'), (48640, 1, u'+  assert( p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE );'), (48712, 1, u'+  assert( p && p->pFunc );'), (48721, 1, u'+  assert( p && p->pFunc );'), (48754, 1, u'+  assert( p && p->pFunc && p->pFunc->xStep );'), (48755, 1, u'+  assert( sqlite3_mutex_held(p->s.db->mutex) );'), (48781, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48804, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48844, 1, u'+  assert( p && p->pMem && p->pFunc && p->pFunc->xStep );'), (49029, 1, u'+  assert( db!=0 );'), (49034, 1, u'+    assert( db->mallocFailed==0 );'), (49324, 1, u'+        assert( pOp->p1>0 && pOp->p1<=p->nVar );'), (49378, 1, u'+  assert( pTo->db==pFrom->db );'), (49379, 1, u'+  assert( pTo->nVar==pFrom->nVar );'), (49627, 1, u'+  assert( opcode>0 && opcode<(int)sizeof(opcodeProperty) );'), (49669, 1, u'+  assert( iCur<p->nCursor );'), (49747, 1, u'+    assert( affinity==SQLITE_AFF_INTEGER || affinity==SQLITE_AFF_REAL'), (49799, 1, u'+      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (49802, 1, u'+      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (49805, 1, u'+      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (49836, 1, u'+      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (49839, 1, u'+      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (49842, 1, u'+      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (50046, 1, u'+  assert( n==(db->nSavepoint + db->isTransactionSavepoint) );'), (50108, 1, u'+  assert( p->magic==VDBE_MAGIC_RUN );  /* sqlite3_step() verifies this */'), (50109, 1, u'+  assert( db->magic==SQLITE_MAGIC_BUSY );'), (50116, 1, u'+  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY );'), (50118, 1, u'+  assert( p->explain==0 );'), (50141, 1, u'+    assert( pc>=0 && pc<p->nOp );'), (50211, 1, u'+      assert( pOp->p2>0 );'), (50212, 1, u'+      assert( pOp->p2<=p->nMem );'), (50230, 1, u'+      assert( pOp->p1>0 );'), (50231, 1, u'+      assert( pOp->p1<=p->nMem );'), (50235, 1, u'+        assert( pOp->p2>0 );'), (50236, 1, u'+        assert( pOp->p2<=p->nMem );'), (50240, 1, u'+          assert( pOp->p3>0 );'), (50241, 1, u'+          assert( pOp->p3<=p->nMem );'), (50245, 1, u'+        assert( pOp->p3>0 );'), (50246, 1, u'+        assert( pOp->p3<=p->nMem );'), (50251, 1, u'+      assert( pOp->p2>0 );'), (50252, 1, u'+      assert( pOp->p2<=p->nMem );'), (50256, 1, u'+      assert( pOp->p3>0 );'), (50257, 1, u'+      assert( pOp->p3<=p->nMem );'), (50318, 1, u'+  assert( pOp->p1>0 );'), (50319, 1, u'+  assert( pOp->p1<=p->nMem );'), (50321, 1, u'+  assert( (pIn1->flags & MEM_Dyn)==0 );'), (50334, 1, u'+  assert( pIn1->flags & MEM_Int );'), (50345, 1, u'+  assert( (pIn1->flags & MEM_Dyn)==0 );'), (50392, 1, u'+  assert( rc==SQLITE_BUSY || rc==SQLITE_OK );'), (50417, 1, u'+  assert( pOp->p4.pI64!=0 );'), (50430, 1, u'+  assert( !sqlite3IsNaN(*pOp->p4.pReal) );'), (50441, 1, u'+  assert( pOp->p4.z!=0 );'), (50477, 1, u'+  assert( pOp->p4.z!=0 );'), (50505, 1, u'+  assert( pOp->p1 <= SQLITE_MAX_LENGTH );'), (50525, 1, u'+  assert( j>=0 && j+n<=p->nVar );'), (50526, 1, u'+  assert( k>=1 && k+n-1<=p->nMem );'), (50527, 1, u'+  assert( pOp->p4.z==0 || pOp->p3==1 );'), (50555, 1, u'+  assert( n>0 && p1>0 && p2>0 );'), (50556, 1, u'+  assert( p1+n<=p2 || p2+n<=p1 );'), (50561, 1, u'+    assert( pOut<=&p->aMem[p->nMem] );'), (50562, 1, u'+    assert( pIn1<=&p->aMem[p->nMem] );'), (50582, 1, u'+  assert( pOp->p2>0 );'), (50583, 1, u'+  assert( pOp->p2<=p->nMem );'), (50585, 1, u'+  assert( pOut!=pIn1 );'), (50606, 1, u'+  assert( pOp->p2>0 );'), (50607, 1, u'+  assert( pOp->p2<=p->nMem );'), (50609, 1, u'+  assert( pOut!=pIn1 );'), (50626, 1, u'+  assert( p->nResColumn==pOp->p2 );'), (50627, 1, u'+  assert( pOp->p1>0 );'), (50628, 1, u'+  assert( pOp->p1+pOp->p2<=p->nMem+1 );'), (50642, 1, u'+  assert( p->iStatement==0 || db->flags&SQLITE_CountRows );'), (50684, 1, u'+  assert( pIn1!=pOut );'), (50838, 1, u'+  assert( pOp->p4type==P4_COLLSEQ );'), (50866, 1, u'+  assert( apVal || n==0 );'), (50868, 1, u'+  assert( n==0 || (pOp->p2>0 && pOp->p2+n<=p->nMem+1) );'), (50869, 1, u'+  assert( pOp->p3<pOp->p2 || pOp->p3>=pOp->p2+n );'), (50877, 1, u'+  assert( pOp->p4type==P4_FUNCDEF || pOp->p4type==P4_VDBEFUNC );'), (50886, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (50902, 1, u'+    assert( pOp>p->aOp );'), (50903, 1, u'+    assert( pOp[-1].p4type==P4_COLLSEQ );'), (50904, 1, u'+    assert( pOp[-1].opcode==OP_CollSeq );'), (50995, 1, u'+    default:  assert( pOp->opcode==OP_ShiftRight );'), (51066, 1, u'+  assert( MEM_Str==(MEM_Blob>>3) );'), (51070, 1, u'+  assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (51089, 1, u'+    assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (51243, 1, u'+  assert( pOp->p4type==P4_COLLSEQ || pOp->p4.pColl==0 );'), (51277, 1, u'+  assert( pOp->p4type==P4_INTARRAY );'), (51278, 1, u'+  assert( pOp->p4.ai );'), (51301, 1, u'+  assert( n>0 );'), (51302, 1, u'+  assert( pKeyInfo!=0 );'), (51304, 1, u'+  assert( p1>0 && p1+n<=p->nMem+1 );'), (51306, 1, u'+  assert( p2>0 && p2+n<=p->nMem+1 );'), (51313, 1, u'+    assert( i<pKeyInfo->nField );'), (51462, 1, u'+  assert( pOp->p3==0 || pOp->p1>0 );'), (51537, 1, u'+  assert( p1<p->nCursor );'), (51538, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (51555, 1, u'+  assert( pC!=0 );'), (51557, 1, u'+  assert( pC->pVtabCursor==0 );'), (51579, 1, u'+    assert( pC->pseudoTable );'), (51584, 1, u'+    assert( payloadSize==0 || zRec!=0 );'), (51591, 1, u'+    assert( pDest->flags&MEM_Null );'), (51598, 1, u'+  assert( p2<nField );'), (51613, 1, u'+    assert(aType);'), (51705, 1, u'+    assert( rc==SQLITE_OK );'), (51724, 1, u'+      assert( pDest->flags&MEM_Null );'), (51734, 1, u'+    assert( sMem.z==sMem.zMalloc );'), (51735, 1, u'+    assert( !(pDest->flags & MEM_Dyn) );'), (51736, 1, u'+    assert( !(pDest->flags & (MEM_Blob|MEM_Str)) || pDest->z==sMem.z );'), (51823, 1, u'+  assert( nField>0 && pOp->p2>0 && pOp->p2+nField<=p->nMem+1 );'), (51868, 1, u'+  assert( pOp->p3<pOp->p1 || pOp->p3>=pOp->p1+pOp->p2 );'), (51884, 1, u'+  assert( i==nByte );'), (51886, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (51946, 1, u'+    assert( i>=0 && i<db->nDb );'), (51947, 1, u'+    assert( db->aDb[i].pBt!=0 );'), (51949, 1, u'+    assert( sqlite3BtreeIsInTrans(pBt) );'), (51950, 1, u'+    assert( (p->btreeMask & (1<<i))!=0 );'), (51952, 1, u'+      assert( db->nStatement>=0 && db->nSavepoint>=0 );'), (51974, 1, u'+  assert( db->pSavepoint==0 || db->autoCommit==0 );'), (51975, 1, u'+  assert( p1==SAVEPOINT_BEGIN||p1==SAVEPOINT_RELEASE||p1==SAVEPOINT_ROLLBACK );'), (51976, 1, u'+  assert( db->pSavepoint || db->isTransactionSavepoint==0 );'), (51977, 1, u'+  assert( checkSavepointCount(db) );'), (52082, 1, u'+        assert( pSavepoint==db->pSavepoint );'), (52109, 1, u'+  assert( desiredAutoCommit==1 || desiredAutoCommit==0 );'), (52110, 1, u'+  assert( desiredAutoCommit==1 || rollback==0 );'), (52112, 1, u'+  assert( db->activeVdbeCnt>0 );  /* At least this one VM is active */'), (52131, 1, u'+      assert( desiredAutoCommit==1 );'), (52143, 1, u'+    assert( db->nStatement==0 );'), (52187, 1, u'+  assert( i>=0 && i<db->nDb );'), (52188, 1, u'+  assert( (p->btreeMask & (1<<i))!=0 );'), (52227, 1, u'+  assert( pOp->p3<SQLITE_N_BTREE_META );'), (52232, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (52233, 1, u'+  assert( db->aDb[iDb].pBt!=0 );'), (52234, 1, u'+  assert( (p->btreeMask & (1<<iDb))!=0 );'), (52261, 1, u'+  assert( pOp->p2<SQLITE_N_BTREE_META );'), (52262, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (52263, 1, u'+  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (52265, 1, u'+  assert( pDb->pBt!=0 );'), (52304, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (52305, 1, u'+  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (52399, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (52400, 1, u'+  assert( (p->btreeMask & (1<<iDb))!=0 );'), (52403, 1, u'+  assert( pX!=0 );'), (52413, 1, u'+    assert( p2>0 );'), (52414, 1, u'+    assert( p2<=p->nMem );'), (52423, 1, u'+  assert( i>=0 );'), (52510, 1, u'+  assert( i>=0 );'), (52527, 1, u'+      assert( pOp->p4type==P4_KEYINFO );'), (52530, 1, u'+        assert( pgno==MASTER_ROOT+1 );'), (52572, 1, u'+  assert( i>=0 );'), (52590, 1, u'+  assert( i>=0 && i<p->nCursor );'), (52655, 1, u'+  assert( i>=0 && i<p->nCursor );'), (52656, 1, u'+  assert( pOp->p2!=0 );'), (52658, 1, u'+  assert( pC!=0 );'), (52684, 1, u'+        assert( (pIn3->flags & MEM_Real)!=0 );'), (52710, 1, u'+          assert( oc==OP_SeekLe || oc==OP_SeekGt );'), (52725, 1, u'+      assert( pOp->p4type==P4_INT32 );'), (52726, 1, u'+      assert( nField>0 );'), (52755, 1, u'+      assert( oc==OP_SeekLt || oc==OP_SeekLe );'), (52767, 1, u'+    assert( pOp->p2>0 );'), (52794, 1, u'+  assert( i>=0 && i<p->nCursor );'), (52796, 1, u'+  assert( pC!=0 );'), (52798, 1, u'+    assert( pC->isTable );'), (52843, 1, u'+  assert( i>=0 && i<p->nCursor );'), (52844, 1, u'+  assert( p->apCsr[i]!=0 );'), (52849, 1, u'+    assert( pC->isTable==0 );'), (52850, 1, u'+    assert( pIn3->flags & MEM_Blob );'), (52905, 1, u'+  assert( pOp->p4type==P4_INT32 );'), (52906, 1, u'+  assert( pOp->p4.i>0 && pOp->p4.i<=p->nMem );'), (52910, 1, u'+  assert( i>=0 && i<p->nCursor );'), (52912, 1, u'+  assert( pCx!=0 );'), (52921, 1, u'+    assert( pK->flags & MEM_Blob );'), (52932, 1, u'+    assert( pCx->deferredMoveto==0 );'), (52974, 1, u'+    assert( pIn3->flags&MEM_Int );'), (52997, 1, u'+  assert( i>=0 && i<p->nCursor );'), (52998, 1, u'+  assert( p->apCsr[i]!=0 );'), (53002, 1, u'+    assert( pIn3->flags & MEM_Int );'), (53003, 1, u'+    assert( p->apCsr[i]->isTable );'), (53012, 1, u'+      assert( pC->rowidIsValid==0 );'), (53018, 1, u'+    assert( pC->isTable );'), (53020, 1, u'+    assert( pC->rowidIsValid==0 );'), (53034, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53035, 1, u'+  assert( p->apCsr[i]!=0 );'), (53060, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53061, 1, u'+  assert( p->apCsr[i]!=0 );'), (53104, 1, u'+    assert( (sqlite3BtreeFlags(pC->pCursor) & BTREE_INTKEY)!=0 );'), (53105, 1, u'+    assert( (sqlite3BtreeFlags(pC->pCursor) & BTREE_ZERODATA)==0 );'), (53140, 1, u'+        assert( pOp->p3>0 && pOp->p3<=p->nMem ); /* P3 is a valid memory cell */'), (53144, 1, u'+        assert( (pMem->flags & MEM_Int)!=0 );  /* mem(P3) holds an integer */'), (53159, 1, u'+      assert( pOp->p3==0 );  /* SQLITE_FULL must have occurred prior to this */'), (53222, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53224, 1, u'+  assert( pC!=0 );'), (53225, 1, u'+  assert( pC->pCursor!=0 || pC->pseudoTable );'), (53226, 1, u'+  assert( pKey->flags & MEM_Int );'), (53227, 1, u'+  assert( pC->isTable );'), (53238, 1, u'+    assert( pData->flags & (MEM_Blob|MEM_Str) );'), (53283, 1, u'+    assert( pC->isTable );'), (53285, 1, u'+    assert( pC->iDb>=0 );'), (53315, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53317, 1, u'+  assert( pC!=0 );'), (53318, 1, u'+  assert( pC->pCursor!=0 );  /* Only valid for real tables, no pseudotables */'), (53324, 1, u'+    assert( pC->isTable );'), (53325, 1, u'+    assert( pC->rowidIsValid );  /* lastRowid set by previous OP_NotFound */'), (53340, 1, u'+    assert( pC->iDb>=0 );'), (53391, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53393, 1, u'+  assert( pC->isTable || pOp->opcode==OP_RowKey );'), (53394, 1, u'+  assert( pC->isIndex || pOp->opcode==OP_RowData );'), (53395, 1, u'+  assert( pC!=0 );'), (53396, 1, u'+  assert( pC->nullRow==0 );'), (53397, 1, u'+  assert( pC->pseudoTable==0 );'), (53398, 1, u'+  assert( pC->pCursor!=0 );'), (53404, 1, u'+    assert( !pC->isTable );'), (53441, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53443, 1, u'+  assert( pC!=0 );'), (53454, 1, u'+    assert( pC->pCursor!=0 );'), (53473, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53475, 1, u'+  assert( pC!=0 );'), (53498, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53500, 1, u'+  assert( pC!=0 );'), (53502, 1, u'+  assert( pCrsr!=0 );'), (53549, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53551, 1, u'+  assert( pC!=0 );'), (53562, 1, u'+  assert( pOp->p2>0 && pOp->p2<p->nOp );'), (53596, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (53602, 1, u'+  assert( pCrsr );'), (53604, 1, u'+  assert( pC->deferredMoveto==0 );'), (53636, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53637, 1, u'+  assert( p->apCsr[i]!=0 );'), (53638, 1, u'+  assert( pIn2->flags & MEM_Blob );'), (53640, 1, u'+    assert( pC->isTable==0 );'), (53646, 1, u'+      assert( pC->deferredMoveto==0 );'), (53663, 1, u'+  assert( pOp->p3>0 );'), (53664, 1, u'+  assert( pOp->p2>0 && pOp->p2+pOp->p3<=p->nMem+1 );'), (53665, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53666, 1, u'+  assert( p->apCsr[i]!=0 );'), (53678, 1, u'+    assert( pC->deferredMoveto==0 );'), (53698, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53699, 1, u'+  assert( p->apCsr[i]!=0 );'), (53704, 1, u'+    assert( pC->deferredMoveto==0 );'), (53705, 1, u'+    assert( pC->isTable==0 );'), (53749, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53750, 1, u'+  assert( p->apCsr[i]!=0 );'), (53754, 1, u'+    assert( pC->deferredMoveto==0 );'), (53755, 1, u'+    assert( pOp->p5==0 || pOp->p5==1 );'), (53756, 1, u'+    assert( pOp->p4type==P4_INT32 );'), (53769, 1, u'+      assert( pOp->opcode==OP_IdxGE );'), (53818, 1, u'+    assert( iCnt==1 );'), (53819, 1, u'+    assert( (p->btreeMask & (1<<iDb))!=0 );'), (53852, 1, u'+  assert( (p->btreeMask & (1<<pOp->p2))!=0 );'), (53892, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (53893, 1, u'+  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (53895, 1, u'+  assert( pDb->pBt!=0 );'), (53922, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (53945, 1, u'+  assert( sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (53961, 1, u'+      assert( db->init.busy==0 );'), (53964, 1, u'+      assert( !db->mallocFailed );'), (53988, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (54061, 1, u'+  assert( nRoot>0 );'), (54064, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54066, 1, u'+  assert( (pnErr->flags & MEM_Int)!=0 );'), (54067, 1, u'+  assert( (pnErr->flags & (MEM_Str|MEM_Blob))==0 );'), (54073, 1, u'+  assert( pOp->p5<db->nDb );'), (54074, 1, u'+  assert( (p->btreeMask & (1<<pOp->p5))!=0 );'), (54081, 1, u'+    assert( z==0 );'), (54103, 1, u'+  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (54105, 1, u'+  assert( pOp->p2>0 && pOp->p2<=p->nMem );'), (54107, 1, u'+  assert( (pVal->flags & MEM_Int)!=0 );'), (54125, 1, u'+  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (54137, 1, u'+    assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54155, 1, u'+  assert( i>=0 );'), (54177, 1, u'+  assert( p->contextStackTop>=0 );'), (54211, 1, u'+  assert( pIn1->flags&MEM_Int );'), (54226, 1, u'+  assert( pIn1->flags&MEM_Int );'), (54241, 1, u'+  assert( pIn1->flags&MEM_Int );'), (54265, 1, u'+  assert( n>=0 );'), (54268, 1, u'+  assert( apVal || n==0 );'), (54274, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54285, 1, u'+    assert( pOp>p->aOp );'), (54286, 1, u'+    assert( pOp[-1].p4type==P4_COLLSEQ );'), (54287, 1, u'+    assert( pOp[-1].opcode==OP_CollSeq );'), (54313, 1, u'+  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (54315, 1, u'+  assert( (pMem->flags & ~(MEM_Null|MEM_Agg))==0 );'), (54354, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (54355, 1, u'+  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (54402, 1, u'+  assert( p1>=0 && p1<db->nDb );'), (54403, 1, u'+  assert( (p->btreeMask & (1<<p1))!=0 );'), (54404, 1, u'+  assert( isWriteLock==0 || isWriteLock==1 );'), (54476, 1, u'+  assert(pVtab && pModule);'), (54532, 1, u'+  assert( pCur->pVtabCursor );'), (54538, 1, u'+  assert( (pQuery->flags&MEM_Int)!=0 && pArgc->flags==MEM_Int );'), (54588, 1, u'+  assert( pCur->pVtabCursor );'), (54594, 1, u'+  assert( pModule->xRowid );'), (54621, 1, u'+  assert( pCur->pVtabCursor );'), (54622, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54630, 1, u'+  assert( pModule->xColumn );'), (54679, 1, u'+  assert( pCur->pVtabCursor );'), (54685, 1, u'+  assert( pModule->xNext );'), (54725, 1, u'+  assert( pVtab->pModule->xRename );'), (54771, 1, u'+  assert( pOp->p4type==P4_VTAB );'), (54794, 1, u'+      assert( nArg>1 && apArg[0] && (apArg[0]->flags&MEM_Null) );'), (54886, 1, u'+    assert( pc>=-1 && pc<p->nOp );'), (54906, 1, u'+  assert( rc );'), (54945, 1, u'+  assert( p->zErrMsg==0 );'), (54956, 1, u'+  assert( db->u1.isInterrupted );'), (55270, 1, u'+    assert( db == v->db );'), (55379, 1, u'+        assert(p->iSize<=p->nBuf);'), (55643, 1, u'+  assert( iOfst+iAmt<=p->endpoint.iOffset );'), (55688, 1, u'+  assert(iOfst==p->endpoint.iOffset);'), (55704, 1, u'+        assert( p->pFirst );'), (55707, 1, u'+        assert( !p->pFirst );'), (55728, 1, u'+  assert(size==0);'), (55759, 1, u'+  assert( 0 );                                                 /*NO_TEST*/'), (55796, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(p) );'), (56015, 1, u'+  assert( iCol>=0 && iCol<pEList->nExpr );'), (56017, 1, u'+  assert( pOrig!=0 );'), (56018, 1, u'+  assert( pOrig->flags & EP_Resolved );'), (56087, 1, u'+  assert( pNC ); /* the name context cannot be NULL. */'), (56088, 1, u'+  assert( pColumnToken && pColumnToken->z ); /* The Z in X.Y.Z cannot be NULL */'), (56114, 1, u'+        assert( pTab!=0 && pTab->zName!=0 );'), (56116, 1, u'+        assert( pTab->nCol>0 );'), (56181, 1, u'+        assert( pTriggerStack->pTab );'), (56186, 1, u'+        assert( pTriggerStack->pTab );'), (56240, 1, u'+          assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (56241, 1, u'+          assert( pExpr->x.pList==0 );'), (56242, 1, u'+          assert( pExpr->x.pSelect==0 );'), (56252, 1, u'+          assert( zTab==0 && zDb==0 );'), (56312, 1, u'+    assert( pMatch->iCursor==pExpr->iTable );'), (56329, 1, u'+    assert( pNC!=0 );'), (56334, 1, u'+      assert( pTopNC!=0 );'), (56361, 1, u'+  assert( pNC!=0 );'), (56363, 1, u'+  assert( pParse==pWalker->pParse );'), (56372, 1, u'+      assert( pSrcList->a[i].iCursor>=0 && pSrcList->a[i].iCursor<pParse->nTab);'), (56386, 1, u'+      assert( pSrcList && pSrcList->nSrc==1 );'), (56420, 1, u'+        assert( pRight->op==TK_DOT );'), (56444, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (56509, 1, u'+        assert( pNC->nRef>=nRef );'), (56592, 1, u'+  assert( sqlite3ExprIsInteger(pE, &i)==0 );'), (56682, 1, u'+    assert( pEList!=0 );'), (56698, 1, u'+            assert(pDup);'), (56763, 1, u'+  assert( pEList!=0 );  /* sqlite3SelectNew() guarantees this */'), (56860, 1, u'+  assert( p!=0 );'), (56885, 1, u'+    assert( (p->selFlags & SF_Expanded)!=0 );'), (56886, 1, u'+    assert( (p->selFlags & SF_Resolved)==0 );'), (56908, 1, u'+    assert( pEList!=0 );'), (56932, 1, u'+    assert( (p->selFlags & SF_Aggregate)==0 );'), (57120, 1, u'+  assert( p!=0 );'), (57166, 1, u'+    assert( pExpr->flags&EP_xIsSelect );'), (57181, 1, u'+    assert( pExpr->pTab && j<pExpr->pTab->nCol );'), (57269, 1, u'+    assert( aff1==0 || aff2==0 );'), (57280, 1, u'+  assert( pExpr->op==TK_EQ || pExpr->op==TK_IN || pExpr->op==TK_LT ||'), (57283, 1, u'+  assert( pExpr->pLeft );'), (57341, 1, u'+  assert( pLeft );'), (57343, 1, u'+    assert( pLeft->pColl );'), (57346, 1, u'+    assert( pRight->pColl );'), (57536, 1, u'+    assert( pToken->dyn==0 );'), (57637, 1, u'+  assert( pRight!=0 );'), (57638, 1, u'+  assert( pLeft!=0 );'), (57655, 1, u'+  assert( pToken );'), (57663, 1, u'+  assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (57664, 1, u'+  assert( pToken->dyn==0 );'), (57693, 1, u'+  assert( pToken->n>=1 );'), (57694, 1, u'+  assert( pToken->z!=0 );'), (57695, 1, u'+  assert( pToken->z[0]!=0 );'), (57744, 1, u'+        assert( pParse->apVarExpr!=0 );'), (57796, 1, u'+    assert( (p->vvaFlags & EVVA_ReadOnlyToken)==0 );'), (57892, 1, u'+    assert( pzBuffer==0 || isReduced );'), (57911, 1, u'+        assert( ExprHasProperty(p, EP_Reduced)==0 );'), (58134, 1, u'+  assert( p==0 );'), (58156, 1, u'+    assert( pList->nAlloc==0 );'), (58168, 1, u'+  assert( pList->a!=0 );'), (58209, 1, u'+  assert( pList->a!=0 || (pList->nExpr==0 && pList->nAlloc==0) );'), (58210, 1, u'+  assert( pList->nExpr<=pList->nAlloc );'), (58391, 1, u'+  assert( pSrc!=0 );'), (58492, 1, u'+    assert(v);'), (58610, 1, u'+    assert( testAddr>0 || pParse->db->mallocFailed );'), (58653, 1, u'+        assert( !isRowid );'), (58656, 1, u'+        assert( (pExpr->iTable&0x0000FFFF)==pExpr->iTable );'), (58703, 1, u'+          assert( pParse->disableColCache>0 );'), (58734, 1, u'+      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (58784, 1, u'+  assert( z || v==0 || sqlite3VdbeDb(v)->mallocFailed );'), (58785, 1, u'+  assert( !z || !sqlite3Isdigit(z[n]) );'), (58819, 1, u'+    assert( !sqlite3Isdigit(z[n]) );'), (58874, 1, u'+  assert( v!=0 );'), (59013, 1, u'+  assert( pOp || pParse->db->mallocFailed );'), (59048, 1, u'+  assert( iAlias>0 && iAlias<=pParse->nAlias );'), (59083, 1, u'+  assert( v!=0 || db->mallocFailed );'), (59084, 1, u'+  assert( target>0 && target<=pParse->nMem );'), (59097, 1, u'+        assert( pCol->iMem>0 );'), (59110, 1, u'+        assert( pParse->ckBase>0 );'), (59143, 1, u'+      assert( pExpr->token.n>=3 );'), (59144, 1, u"+      assert( pExpr->token.z[0]=='x' || pExpr->token.z[0]=='X' );"), (59145, 1, u"+      assert( pExpr->token.z[1]=='\\'' );"), (59146, 1, u"+      assert( pExpr->token.z[pExpr->token.n-1]=='\\'' );"), (59193, 1, u'+      assert( to_op==OP_ToText    || aff!=SQLITE_AFF_TEXT    );'), (59194, 1, u'+      assert( to_op==OP_ToBlob    || aff!=SQLITE_AFF_NONE    );'), (59195, 1, u'+      assert( to_op==OP_ToNumeric || aff!=SQLITE_AFF_NUMERIC );'), (59196, 1, u'+      assert( to_op==OP_ToInt     || aff!=SQLITE_AFF_INTEGER );'), (59197, 1, u'+      assert( to_op==OP_ToReal    || aff!=SQLITE_AFF_REAL    );'), (59219, 1, u'+      assert( TK_LT==OP_Lt );'), (59220, 1, u'+      assert( TK_LE==OP_Le );'), (59221, 1, u'+      assert( TK_GT==OP_Gt );'), (59222, 1, u'+      assert( TK_GE==OP_Ge );'), (59223, 1, u'+      assert( TK_EQ==OP_Eq );'), (59224, 1, u'+      assert( TK_NE==OP_Ne );'), (59251, 1, u'+      assert( TK_AND==OP_And );'), (59252, 1, u'+      assert( TK_OR==OP_Or );'), (59253, 1, u'+      assert( TK_PLUS==OP_Add );'), (59254, 1, u'+      assert( TK_MINUS==OP_Subtract );'), (59255, 1, u'+      assert( TK_REM==OP_Remainder );'), (59256, 1, u'+      assert( TK_BITAND==OP_BitAnd );'), (59257, 1, u'+      assert( TK_BITOR==OP_BitOr );'), (59258, 1, u'+      assert( TK_SLASH==OP_Divide );'), (59259, 1, u'+      assert( TK_LSHIFT==OP_ShiftLeft );'), (59260, 1, u'+      assert( TK_RSHIFT==OP_ShiftRight );'), (59261, 1, u'+      assert( TK_CONCAT==OP_Concat );'), (59282, 1, u'+      assert( pLeft );'), (59299, 1, u'+      assert( TK_BITNOT==OP_BitNot );'), (59300, 1, u'+      assert( TK_NOT==OP_Not );'), (59312, 1, u'+      assert( TK_ISNULL==OP_IsNull );'), (59313, 1, u'+      assert( TK_NOTNULL==OP_NotNull );'), (59346, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (59358, 1, u'+      assert( pDef!=0 );'), (59579, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList );'), (59580, 1, u'+      assert((pExpr->x.pList->nExpr % 2) == 0);'), (59581, 1, u'+      assert(pExpr->x.pList->nExpr > 0);'), (59599, 1, u'+          assert( pTest!=0 );'), (59619, 1, u'+      assert( pParse->disableColCache>0 );'), (59631, 1, u'+         assert( pExpr->affinity==OE_Rollback ||'), (59638, 1, u'+         assert( pExpr->affinity == OE_Ignore );'), (59681, 1, u'+  assert( target>0 && target<=pParse->nMem );'), (59683, 1, u'+  assert( pParse->pVdbe || pParse->db->mallocFailed );'), (59706, 1, u'+  assert( target>0 );'), (59796, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (59847, 1, u'+  assert( pList!=0 );'), (59848, 1, u'+  assert( target>0 );'), (59888, 1, u'+  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (59899, 1, u'+      assert( pParse->disableColCache>0 );'), (59910, 1, u'+      assert( pParse->disableColCache>0 );'), (59925, 1, u'+      assert( TK_LT==OP_Lt );'), (59926, 1, u'+      assert( TK_LE==OP_Le );'), (59927, 1, u'+      assert( TK_GT==OP_Gt );'), (59928, 1, u'+      assert( TK_GE==OP_Ge );'), (59929, 1, u'+      assert( TK_EQ==OP_Eq );'), (59930, 1, u'+      assert( TK_NE==OP_Ne );'), (59948, 1, u'+      assert( TK_ISNULL==OP_IsNull );'), (59949, 1, u'+      assert( TK_NOTNULL==OP_NotNull );'), (59972, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (60018, 1, u'+  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (60043, 1, u'+  assert( pExpr->op!=TK_ISNULL || op==OP_NotNull );'), (60044, 1, u'+  assert( pExpr->op!=TK_NOTNULL || op==OP_IsNull );'), (60045, 1, u'+  assert( pExpr->op!=TK_NE || op==OP_Eq );'), (60046, 1, u'+  assert( pExpr->op!=TK_EQ || op==OP_Ne );'), (60047, 1, u'+  assert( pExpr->op!=TK_LT || op==OP_Ge );'), (60048, 1, u'+  assert( pExpr->op!=TK_LE || op==OP_Gt );'), (60049, 1, u'+  assert( pExpr->op!=TK_GT || op==OP_Le );'), (60050, 1, u'+  assert( pExpr->op!=TK_GE || op==OP_Lt );'), (60059, 1, u'+      assert( pParse->disableColCache>0 );'), (60070, 1, u'+      assert( pParse->disableColCache>0 );'), (60124, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (60339, 1, u'+            assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (60525, 1, u'+      assert( len>0 );'), (60584, 1, u'+      assert( len>0 );'), (60675, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (60677, 1, u'+  assert( iDb>=0 );'), (60683, 1, u'+    assert( iTrigDb==iDb || iTrigDb==1 );'), (60729, 1, u'+  assert( pSrc->nSrc==1 );'), (60730, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (60897, 1, u'+  assert( pNew );'), (60899, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (60906, 1, u'+  assert( pTab );'), (61009, 1, u'+  assert( pParse->pNewTable==0 );'), (61010, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (61028, 1, u'+  assert( pTab->addColOffset>0 );'), (61044, 1, u'+  assert( pNew->nCol>0 );'), (61046, 1, u'+  assert( nAlloc>=pNew->nCol && nAlloc%8==0 && nAlloc-pNew->nCol<8 );'), (61118, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (61119, 1, u'+  assert( sqlite3VdbeDb(v)==db );'), (61184, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (61186, 1, u'+  assert( iDb>=0 );'), (61209, 1, u'+    assert( iDb==sqlite3SchemaToIndex(pParse->db, pIdx->pSchema) );'), (61343, 1, u'+  assert( pTab!=0 );'), (61344, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (61375, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (61442, 1, u'+  assert( argc==2 );'), (61474, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (61475, 1, u'+  assert( db->aDb[iDb].pBt!=0 );'), (61476, 1, u'+  assert( sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (61706, 1, u'+    assert( iDb>=2 );'), (61813, 1, u'+  assert( db->mallocFailed || pAuthArg );'), (61845, 1, u'+  assert( v || db->mallocFailed );'), (61848, 1, u'+    assert( pFunc->nArg==-1 || (pFunc->nArg&0xff)==pFunc->nArg );'), (61926, 1, u'+  assert( db->nDb>iDb );'), (62188, 1, u'+    assert( pExpr->iTable==pStack->newIdx || pExpr->iTable==pStack->oldIdx );'), (62193, 1, u'+    assert( pExpr->iColumn<pTab->nCol );'), (62196, 1, u'+    assert( pTab->iPKey<pTab->nCol );'), (62201, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (62478, 1, u'+    assert( pParse->disableColCache==0 );  /* Disables and re-enables match */'), (62515, 1, u'+  assert( pParse->nested<10 );  /* Nesting should only be of limited depth */'), (62548, 1, u'+  assert( zName!=0 );'), (62616, 1, u'+    assert( pSchema || (j==1 && !db->aDb[1].pBt) );'), (62648, 1, u'+  assert( pOld==0 || pOld==p );'), (62693, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (62701, 1, u'+      assert(i==1 || (pDb->pBt && sqlite3BtreeHoldsMutex(pDb->pBt)));'), (62706, 1, u'+  assert( iDb==0 );'), (62758, 1, u'+  assert( pTable!=0 );'), (62795, 1, u'+  assert( pTable->nRef==0 );'), (62801, 1, u'+    assert( pIndex->pSchema==pTable->pSchema );'), (62811, 1, u'+    assert( sqlite3HashFind(&pTable->pSchema->aFKey,'), (62839, 1, u'+  assert( db!=0 );'), (62840, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (62841, 1, u'+  assert( zTabName && zTabName[0] );'), (62975, 1, u'+    assert( db->init.iDb==0 || db->init.busy );'), (63065, 1, u'+  assert( (isTemp & 1)==isTemp );'), (63466, 1, u'+    assert( autoInc==0 || autoInc==1 );'), (63529, 1, u'+      assert( pIdx->nColumn==1 );'), (63770, 1, u'+      assert( (int)(sqlite3Strlen30(z)+k+1)<=n );'), (63814, 1, u'+  assert( !db->init.busy || !pSelect );'), (63900, 1, u'+      assert(pParse->nTab==1);'), (63910, 1, u'+        assert( p->aCol==0 );'), (63978, 1, u'+      assert( p==pOld );  /* Malloc must have failed inside HashInsert() */'), (64001, 1, u'+      assert( !pSelect && pCons && pEnd );'), (64102, 1, u'+  assert( pTable );'), (64131, 1, u'+  assert( pTable->nCol>=0 );'), (64140, 1, u'+  assert( pTable->pSelect );'), (64159, 1, u'+      assert( pTable->aCol==0 );'), (64306, 1, u'+      assert( pIdx->pSchema==pTab->pSchema );'), (64335, 1, u'+  assert( pName->nSrc==1 );'), (64346, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (64431, 1, u'+      assert( pTrigger->pSchema==pTab->pSchema ||'), (64522, 1, u'+  assert( pTo!=0 );'), (64620, 1, u'+  assert( isDeferred==0 || isDeferred==1 );'), (64752, 1, u'+    assert( pName1 && pName2 );'), (64774, 1, u'+      assert(0);'), (64779, 1, u'+    assert( db->aDb[iDb].pSchema==pTab->pSchema );'), (64781, 1, u'+    assert( pName==0 );'), (64953, 1, u'+      assert( pListItem->pExpr->pColl );'), (64989, 1, u'+      assert( pIdx->onError!=OE_None );'), (64990, 1, u'+      assert( pIdx->autoIndex );'), (64991, 1, u'+      assert( pIndex->onError!=OE_None );'), (65032, 1, u'+      assert( p==pIndex );  /* Malloc must have failed */'), (65186, 1, u'+  assert( a!=0 );'), (65213, 1, u'+  assert( pName->nSrc==1 );'), (65399, 1, u'+  assert( iStart>=0 );'), (65400, 1, u'+  assert( nExtra>=1 );'), (65402, 1, u'+    assert( db->mallocFailed );'), (65414, 1, u'+      assert( db->mallocFailed );'), (65505, 1, u'+  assert(pList || pParse->db->mallocFailed );'), (65589, 1, u'+    assert( pItem->notIndexed==0 && pItem->zIndex==0 );'), (65692, 1, u'+    assert( !SAVEPOINT_BEGIN && SAVEPOINT_RELEASE==1 && SAVEPOINT_ROLLBACK==2 );'), (65725, 1, u'+    assert( (db->flags & SQLITE_InTrans)==0 || db->autoCommit );'), (65726, 1, u'+    assert( db->aDb[1].pSchema );'), (65767, 1, u'+    assert( iDb<db->nDb );'), (65768, 1, u'+    assert( db->aDb[iDb].pBt!=0 || iDb==1 );'), (65769, 1, u'+    assert( iDb<SQLITE_MAX_ATTACHED+2 );'), (65853, 1, u'+    assert( pDb!=0 );'), (65897, 1, u'+    assert( pName1->z );'), (65952, 1, u'+    assert( &pKey->aSortOrder[nCol]==&(((u8 *)pKey)[nBytes]) );'), (65955, 1, u'+      assert( zColl );'), (65996, 1, u'+  assert( !db->xCollNeeded || !db->xCollNeeded16 );'), (66077, 1, u'+  assert( !p || p->xCmp );'), (66103, 1, u'+    assert( p==pColl );'), (66151, 1, u'+      assert( pDel==0 || pDel==pColl );'), (66188, 1, u'+  assert( SQLITE_UTF8==1 && SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (66189, 1, u'+  assert( enc>=SQLITE_UTF8 && enc<=SQLITE_UTF16BE );'), (66312, 1, u'+  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (66395, 1, u'+    assert( pTab->dbMem==0 );'), (66453, 1, u'+  assert( pItem && pSrc->nSrc==1 );'), (66504, 1, u'+  assert( opcode==OP_OpenWrite || opcode==OP_OpenRead );'), (66583, 1, u'+    assert( pOffset == 0 );'), (66682, 1, u'+  assert( pTabList->nSrc==1 );'), (66711, 1, u'+  assert( iDb<db->nDb );'), (66714, 1, u'+  assert( rcauth==SQLITE_OK || rcauth==SQLITE_DENY || rcauth==SQLITE_IGNORE );'), (66718, 1, u'+  assert(!isView || pTrigger);'), (66734, 1, u'+  assert( pTabList->nSrc==1 );'), (66805, 1, u'+    assert( !isView );'), (66811, 1, u'+      assert( pIdx->pSchema==pTab->pSchema );'), (67102, 1, u'+  assert( argc>1 );'), (67105, 1, u'+  assert( pColl );'), (67106, 1, u'+  assert( mask==-1 || mask==0 );'), (67150, 1, u'+  assert( argc==1 );'), (67181, 1, u'+  assert( argc==1 );'), (67231, 1, u'+  assert( argc==3 || argc==2 );'), (67242, 1, u'+    assert( len==sqlite3_value_bytes(argv[0]) );'), (67280, 1, u'+  assert( p1>=0 && p2>=0 );'), (67307, 1, u'+  assert( argc==1 || argc==2 );'), (67332, 1, u'+  assert( nByte>0 );'), (67358, 1, u'+  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (67378, 1, u'+  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (67446, 1, u'+  assert( argc==1 );'), (67591, 1, u'+        assert( esc==0 );         /* This is GLOB, not LIKE */'), (67592, 1, u"+        assert( matchSet<0x80 );  /* '[' is a single-byte character */"), (67621, 1, u'+      assert( esc==0 );    /* This only occurs for GLOB, not LIKE */'), (67713, 1, u'+  assert( zB==sqlite3_value_text(argv[0]) );  /* Encoding did not change */'), (67787, 1, u'+  assert( argc==1 );'), (67799, 1, u'+      assert( zBlob==sqlite3_value_blob(argv[0]) ); /* No encoding change */'), (67840, 1, u'+      assert( sqlite3_value_type(argv[0])==SQLITE_NULL );'), (67859, 1, u'+  assert( argc==1 );'), (67863, 1, u'+  assert( pBlob==sqlite3_value_blob(argv[0]) );  /* No encoding change */'), (67886, 1, u'+  assert( argc==1 );'), (67920, 1, u'+  assert( argc==3 );'), (67925, 1, u'+  assert( zStr==sqlite3_value_text(argv[0]) );  /* No encoding change */'), (67928, 1, u'+    assert( sqlite3_value_type(argv[1])==SQLITE_NULL'), (67933, 1, u'+    assert( sqlite3_value_type(argv[1])!=SQLITE_NULL );'), (67938, 1, u'+  assert( zPattern==sqlite3_value_text(argv[1]) );  /* No encoding change */'), (67942, 1, u'+  assert( zRep==sqlite3_value_text(argv[2]) );'), (67944, 1, u'+  assert( nOut<SQLITE_MAX_LENGTH );'), (67976, 1, u'+  assert( j+nStr-i+1==nOut );'), (67979, 1, u'+  assert( j<=nOut );'), (68008, 1, u'+  assert( zIn==sqlite3_value_text(argv[0]) );'), (68091, 1, u'+  assert( argc==1 );'), (68169, 1, u'+  assert( argc==1 );'), (68242, 1, u'+  assert( argc==1 || p==0 || p->n>0x7fffffff'), (68311, 1, u'+  assert( argc==1 || argc==2 );'), (68360, 1, u'+    assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (68418, 1, u'+  assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (68430, 1, u'+  assert( (char*)&likeInfoAlt == (char*)&likeInfoAlt.matchAll );'), (68431, 1, u'+  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );'), (68432, 1, u'+  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );'), (68647, 1, u'+    assert( pOp!=0 );'), (68662, 1, u'+      assert( pOp->p4.pVtab!=0 );'), (68663, 1, u'+      assert( pOp->p4type==P4_VTAB );'), (68701, 1, u'+    assert( v );'), (68754, 1, u'+    assert( v );'), (68944, 1, u'+  assert( pTabList->nSrc==1 );'), (68952, 1, u'+  assert( iDb<db->nDb );'), (68974, 1, u'+  assert( (pTrigger && tmask) || (pTrigger==0 && tmask==0) );'), (68983, 1, u'+  assert( pTab!=0 );'), (69016, 1, u'+    assert( !pTrigger );'), (69017, 1, u'+    assert( pList==0 );'), (69078, 1, u'+    assert( pSelect->pEList );'), (69080, 1, u'+    assert( dest.nMem==nColumn );'), (69134, 1, u'+    assert( useTempTable==0 );'), (69296, 1, u'+      assert( pSelect==0 );  /* Otherwise useTempTable is true */'), (69307, 1, u'+    assert(!IsVirtual(pTab));'), (69325, 1, u'+        assert( pSelect==0 ); /* Otherwise useTempTable is true */'), (69418, 1, u'+          assert( IsVirtual(pTab) );'), (69636, 1, u'+  assert( v!=0 );'), (69637, 1, u'+  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (69658, 1, u'+    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (69737, 1, u'+          assert( seenReplace==0 );'), (69798, 1, u'+    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (69831, 1, u'+        assert( seenReplace==0 );'), (69875, 1, u'+  assert( v!=0 );'), (69876, 1, u'+  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (69929, 1, u'+  assert( v!=0 );'), (69933, 1, u'+    assert( pIdx->pSchema==pTab->pSchema );'), (69983, 1, u'+  assert( pDest && pSrc );'), (69984, 1, u'+  assert( pDest->pTable!=pSrc->pTable );'), (70078, 1, u'+  assert(pSelect->pSrc);   /* allocated even if there is no FROM clause */'), (70099, 1, u'+  assert( pSelect->pOffset==0 );  /* Must be so if pLimit==0 */'), (70107, 1, u'+  assert( pEList!=0 );'), (70111, 1, u'+  assert( pEList->a[0].pExpr );'), (70220, 1, u'+    assert( (pDest->tabFlags & TF_Autoincrement)==0 );'), (70232, 1, u'+    assert( pSrcIdx );'), (70327, 1, u'+    assert( rc==SQLITE_OK || pStmt==0 );'), (70358, 1, u'+            assert( azCols[i]!=0 );'), (70412, 1, u'+  assert( (rc&db->errMask)==rc );'), (71241, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (71340, 1, u'+    assert( (rc&0xff)==rc );'), (71605, 1, u'+      assert( v!=0 );  /* Already allocated by sqlite3Pragma() */'), (71641, 1, u'+                      assert( action==OE_Restrict ); break;'), (71700, 1, u'+  assert( pId2 );'), (71769, 1, u'+    assert( pBt!=0 );'), (71796, 1, u'+    assert( pBt!=0 );'), (71848, 1, u'+        assert(pDb==&db->aDb[0]);'), (71859, 1, u'+    assert(eMode==PAGER_LOCKINGMODE_NORMAL||eMode==PAGER_LOCKINGMODE_EXCLUSIVE);'), (71906, 1, u'+        assert(pDb==&db->aDb[0]);'), (71918, 1, u'+    assert( eMode==PAGER_JOURNALMODE_DELETE'), (71959, 1, u'+    assert( pBt!=0 );'), (71973, 1, u'+      assert( eAuto>=0 && eAuto<=2 );'), (72249, 1, u'+          assert( p->z );'), (72277, 1, u'+        assert( pTab->nCol>cnum );'), (72321, 1, u'+      assert( db->aDb[i].zName!=0 );'), (72623, 1, u'+      assert( encnames[SQLITE_UTF8].enc==SQLITE_UTF8 );'), (72624, 1, u'+      assert( encnames[SQLITE_UTF16LE].enc==SQLITE_UTF16LE );'), (72625, 1, u'+      assert( encnames[SQLITE_UTF16BE].enc==SQLITE_UTF16BE );'), (72691, 1, u'+        assert(iDb<=0);'), (72895, 1, u'+  assert( argc==3 );'), (72897, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (72904, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (72916, 1, u'+    assert( db->init.busy );'), (72921, 1, u'+    assert( rc!=SQLITE_OK || zErr==0 );'), (73002, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (73003, 1, u'+  assert( db->aDb[iDb].pSchema );'), (73004, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (73005, 1, u'+  assert( iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (73150, 1, u'+  assert( db->init.busy );'), (73227, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (73267, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (73292, 1, u'+    assert( sqlite3_mutex_held(db->mutex) );'), (73339, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (73346, 1, u'+    assert( i>=0 && i<db->nDb );'), (73368, 1, u'+  assert( ppStmt && *ppStmt==0 );'), (73369, 1, u'+  assert( !db->mallocFailed );'), (73370, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (73398, 1, u'+      assert( sqlite3BtreeHoldsMutex(pBt) );'), (73475, 1, u'+  assert( db->init.busy==0 || saveSqlFlag==0 );'), (73482, 1, u'+    assert(!(*ppStmt));'), (73495, 1, u'+  assert( (rc&db->errMask)==rc );'), (73507, 1, u'+  assert( ppStmt!=0 );'), (73534, 1, u'+  assert( sqlite3_mutex_held(sqlite3VdbeDb(p)->mutex) );'), (73536, 1, u'+  assert( zSql!=0 );  /* Reprepare only called for prepare_v2() statements */'), (73538, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (73544, 1, u'+    assert( pNew==0 );'), (73547, 1, u'+    assert( pNew!=0 );'), (73574, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73586, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73611, 1, u'+  assert( ppStmt );'), (73654, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73666, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73740, 1, u'+  assert( db->mallocFailed || !pOffset || pLimit ); /* OFFSET implies LIMIT */'), (73836, 1, u'+    assert( pB!=0 );'), (74217, 1, u'+  assert( v );'), (74219, 1, u'+  assert( pEList!=0 );'), (74237, 1, u'+    assert( pDest->nMem==nResultCol );'), (74257, 1, u'+    assert( pEList!=0 );'), (74258, 1, u'+    assert( pEList->nExpr==nColumn );'), (74318, 1, u'+      assert( nColumn==1 );'), (74349, 1, u'+      assert( nColumn==1 );'), (74387, 1, u'+      assert( eDest==SRT_Discard );'), (74494, 1, u'+      assert( nColumn==1 );'), (74501, 1, u'+      assert( nColumn==1 );'), (74515, 1, u'+        assert( regRow!=pDest->iMem+i );'), (74536, 1, u'+  assert( p->iLimit==0 );'), (74616, 1, u'+      assert( pTab );'), (74636, 1, u'+        assert( !pS );'), (74638, 1, u'+        assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (74663, 1, u'+      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (74674, 1, u'+    assert( pzOriginTab && pzOriginCol );'), (74743, 1, u'+  assert( v!=0 );'), (74763, 1, u'+      assert( j<pTabList->nSrc );'), (74766, 1, u'+      assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (74841, 1, u'+    assert( p->pRight==0 || p->pRight->token.z==0 || p->pRight->token.z[0]!=0 );'), (74921, 1, u'+  assert( pSelect!=0 );'), (74922, 1, u'+  assert( (pSelect->selFlags & SF_Resolved)!=0 );'), (74923, 1, u'+  assert( nCol==pSelect->pEList->nExpr || db->mallocFailed );'), (75131, 1, u'+  assert( p && p->pPrior );  /* Calling function guarantees this much */'), (75134, 1, u'+  assert( pPrior->pRightmost!=pPrior );'), (75135, 1, u'+  assert( pPrior->pRightmost==p->pRightmost );'), (75151, 1, u'+  assert( v!=0 );  /* The VDBE already created by calling function */'), (75156, 1, u'+    assert( p->pEList );'), (75164, 1, u'+  assert( p->pEList && pPrior->pEList );'), (75183, 1, u'+      assert( !pPrior->pLimit );'), (75226, 1, u'+        assert( p->pLimit==0 );      /* Not allowed on leftward elements */'), (75227, 1, u'+        assert( p->pOffset==0 );     /* Not allowed on leftward elements */'), (75234, 1, u'+        assert( p->pOrderBy==0 );'), (75236, 1, u'+        assert( p->addrOpenEphm[0] == -1 );'), (75239, 1, u'+        assert( p->pEList );'), (75244, 1, u'+      assert( !pPrior->pOrderBy );'), (75256, 1, u'+        assert( p->op==TK_UNION );'), (75287, 1, u'+        assert( p->pEList );'), (75321, 1, u'+      assert( p->pOrderBy==0 );'), (75324, 1, u'+      assert( p->addrOpenEphm[0] == -1 );'), (75327, 1, u'+      assert( p->pEList );'), (75340, 1, u'+      assert( p->addrOpenEphm[1] == -1 );'), (75361, 1, u'+      assert( p->pEList );'), (75402, 1, u'+    assert( p->pRightmost==p );'), (75427, 1, u'+          assert( pLoop->addrOpenEphm[1]<0 );'), (75525, 1, u'+      assert( pIn->nMem==1 );'), (75551, 1, u'+      assert( pIn->nMem==1 );'), (75735, 1, u'+  assert( p->pOrderBy!=0 );'), (75736, 1, u'+  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */'), (75748, 1, u'+  assert( pPrior->pOrderBy==0 );'), (75750, 1, u'+  assert( pOrderBy );'), (75761, 1, u'+        assert( pItem->iCol>0 );'), (75786, 1, u'+      assert( pItem->iCol>0  && pItem->iCol<=p->pEList->nExpr );'), (75826, 1, u'+    assert( nOrderBy>=nExpr || db->mallocFailed );'), (76066, 1, u'+      assert( pEList!=0 && pExpr->iColumn<pEList->nExpr );'), (76067, 1, u'+      assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (76069, 1, u'+      assert( pNew!=0 );'), (76071, 1, u'+      assert( pExpr->pLeft==0 );'), (76073, 1, u'+      assert( pExpr->pRight==0 );'), (76081, 1, u'+      assert( pExpr->x.pList==0 && pExpr->x.pSelect==0 );'), (76130, 1, u'+  assert( pSrc );  /* Even for (SELECT 1) we have: pSrc!=0 but pSrc->nSrc==0 */'), (76268, 1, u'+  assert( p!=0 );'), (76269, 1, u'+  assert( p->pPrior==0 );  /* Unable to flatten compound queries */'), (76271, 1, u'+  assert( pSrc && iFrom>=0 && iFrom<pSrc->nSrc );'), (76275, 1, u'+  assert( pSub!=0 );'), (76279, 1, u'+  assert( pSubSrc );'), (76488, 1, u'+      assert( pParent==p );  /* First time through the loop */'), (76491, 1, u'+      assert( pParent!=p );  /* 2nd and subsequent times through the loop */'), (76494, 1, u'+        assert( db->mallocFailed );'), (76556, 1, u'+      assert( pParent->pOrderBy==0 );'), (76568, 1, u'+      assert( pParent->pHaving==0 );'), (76574, 1, u'+      assert( pParent->pGroupBy==0 );'), (76652, 1, u'+  assert( !p->pGroupBy );'), (76661, 1, u'+  assert( pTab && !pTab->pSelect && pExpr );'), (76752, 1, u'+      assert( i==0 );'), (76759, 1, u'+      assert( pSel!=0 );'), (76760, 1, u'+      assert( pFrom->pTab==0 );'), (76774, 1, u'+      assert( pFrom->pTab==0 );'), (76879, 1, u'+              assert(IsVirtual(pTab));'), (77000, 1, u'+  assert( p->selFlags & SF_Resolved );'), (77010, 1, u'+        assert( pSel );'), (77089, 1, u'+      assert( !ExprHasProperty(pE, EP_xIsSelect) );'), (77113, 1, u'+    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (77135, 1, u'+    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (77146, 1, u'+      assert( nArg==1 );'), (77153, 1, u'+      assert( pList!=0 );  /* pList!=0 if pF->pFunc has NEEDCOLL */'), (77268, 1, u'+    assert(pDest->eDest==SRT_Exists || pDest->eDest==SRT_Union ||'), (77329, 1, u'+      assert( pItem->isPopulated==0 );'), (77425, 1, u'+    assert( isAgg || pGroupBy );'), (77453, 1, u'+    assert(!isDistinct);'), (77508, 1, u'+      assert( !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) );'), (77802, 1, u'+          assert( !ExprHasProperty(p->pEList->a[0].pExpr, EP_xIsSelect) );'), (78117, 1, u'+  assert( sizeof(res.azResult[0])>= sizeof(res.nData) );'), (78161, 1, u'+    assert( azResult!=0 );'), (78259, 1, u'+  assert( pName1!=0 );   /* pName1->z might be NULL, but not pName1 itself */'), (78260, 1, u'+  assert( pName2!=0 );'), (78261, 1, u'+  assert( op==TK_INSERT || op==TK_UPDATE || op==TK_DELETE );'), (78262, 1, u'+  assert( op>0 && op<0xff );'), (78294, 1, u'+  assert( pTableName->nSrc==1 );'), (78382, 1, u'+  assert( pParse->pNewTrigger==0 );'), (78393, 1, u'+    assert( pParse->pNewTrigger==pTrigger );'), (78460, 1, u'+      assert( pTab!=0 );'), (78468, 1, u'+  assert( !pParse->pNewTrigger );'), (78548, 1, u'+  assert(pEList == 0 || pSelect == 0);'), (78549, 1, u'+  assert(pEList != 0 || pSelect != 0 || db->mallocFailed);'), (78658, 1, u'+  assert( pName->nSrc==1 );'), (78700, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (78702, 1, u'+  assert( pTable );'), (78703, 1, u'+  assert( pTable->pSchema==pTrigger->pSchema || iDb==1 );'), (78719, 1, u'+  assert( pTable!=0 );'), (78801, 1, u'+  assert( pList==0 || IsVirtual(pTab)==0 );'), (78833, 1, u'+    assert( iDb<pParse->db->nDb );'), (78857, 1, u'+  assert( pTriggerStep!=0 );'), (78858, 1, u'+  assert( v!=0 );'), (78908, 1, u'+        assert(0);'), (78966, 1, u'+  assert(op == TK_UPDATE || op == TK_INSERT || op == TK_DELETE);'), (78967, 1, u'+  assert(tr_tm == TRIGGER_BEFORE || tr_tm == TRIGGER_AFTER );'), (78969, 1, u'+  assert(newIdx != -1 || oldIdx != -1);'), (79108, 1, u'+    assert( i<pTab->nCol );'), (79179, 1, u'+  assert( pTabList->nSrc==1 );'), (79441, 1, u'+        assert( pParse->nTab>iCur+i+1 );'), (79683, 1, u'+  assert( pTab->iPKey<0 );'), (79697, 1, u'+  assert( v );'), (79858, 1, u'+  assert( strcmp(db->aDb[db->nDb-1].zName,"vacuum_db")==0 );'), (79981, 1, u'+    assert( 1==sqlite3BtreeIsInTrans(pTemp) );'), (79982, 1, u'+    assert( 1==sqlite3BtreeIsInTrans(pMain) );'), (80137, 1, u'+  assert( pVtab->nRef>0 );'), (80139, 1, u'+  assert(db);'), (80140, 1, u'+  assert( sqlite3SafetyCheckOk(db) );'), (80162, 1, u'+    assert( p->pMod && p->pMod->pModule );'), (80224, 1, u'+  assert( 0==pTable->pIndex );'), (80228, 1, u'+  assert( iDb>=0 );'), (80347, 1, u'+      assert( pTab==pOld );  /* Malloc must have failed inside HashInsert() */'), (80375, 1, u'+    assert(pArg->z < p->z);'), (80404, 1, u'+  assert( !db->pVTab );'), (80405, 1, u'+  assert( xConstruct );'), (80409, 1, u'+  assert( rc==SQLITE_OK );'), (80466, 1, u"+          assert(zType[i-1]==' ');"), (80548, 1, u'+  assert(pTab && (pTab->tabFlags & TF_Virtual)!=0 && !pTab->pVtab);'), (80589, 1, u'+  assert((pTab->tabFlags & TF_Virtual)!=0 && pTab->nCol==0 && pTab->aCol==0);'), (80619, 1, u'+  assert( (rc&0xff)==rc );'), (80638, 1, u'+  assert(pTab);'), (80642, 1, u'+    assert( rc==SQLITE_OK );'), (80822, 1, u'+  assert( pVtab!=0 );'), (80823, 1, u'+  assert( pVtab->pModule!=0 );'), (80871, 1, u'+  assert( IsVirtual(pTab) );'), (81291, 1, u'+  assert( pMaskSet->n < ArraySize(pMaskSet->ix) );'), (81356, 1, u'+  assert( TK_GT>TK_EQ && TK_GT<TK_GE );'), (81357, 1, u'+  assert( TK_LT>TK_EQ && TK_LT<TK_GE );'), (81358, 1, u'+  assert( TK_LE>TK_EQ && TK_LE<TK_GE );'), (81359, 1, u'+  assert( TK_GE==TK_EQ+4 );'), (81383, 1, u'+  assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );'), (81391, 1, u'+    assert( TK_LT==TK_GT+2 );'), (81392, 1, u'+    assert( TK_GE==TK_LE+2 );'), (81393, 1, u'+    assert( TK_GT>TK_EQ );'), (81394, 1, u'+    assert( TK_GT<TK_LE );'), (81395, 1, u'+    assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );'), (81405, 1, u'+  assert( allowedOp(op) );'), (81411, 1, u'+    assert( (WO_EQ<<(op-TK_EQ)) < 0x7fff );'), (81414, 1, u'+  assert( op!=TK_ISNULL || c==WO_ISNULL );'), (81415, 1, u'+  assert( op!=TK_IN || c==WO_IN );'), (81416, 1, u'+  assert( op!=TK_EQ || c==WO_EQ );'), (81417, 1, u'+  assert( op!=TK_LT || c==WO_LT );'), (81418, 1, u'+  assert( op!=TK_LE || c==WO_LE );'), (81419, 1, u'+  assert( op!=TK_GT || c==WO_GT );'), (81420, 1, u'+  assert( op!=TK_GE || c==WO_GE );'), (81440, 1, u'+  assert( iCur>=0 );'), (81462, 1, u'+        assert(pX->pLeft);'), (81464, 1, u'+        assert(pColl || pParse->nErr);'), (81536, 1, u'+  assert( pColl!=0 || pLeft->iColumn==-1 );'), (81700, 1, u'+  assert( (pTerm->wtFlags & (TERM_DYNAMIC|TERM_ORINFO|TERM_ANDINFO))==0 );'), (81701, 1, u'+  assert( pExpr->op==TK_OR );'), (81710, 1, u'+  assert( pOrWc->nTerm>=2 );'), (81719, 1, u'+      assert( pOrTerm->eOperator==0 );'), (81720, 1, u'+      assert( (pOrTerm->wtFlags & (TERM_ANDINFO|TERM_ORINFO))==0 );'), (81738, 1, u'+            assert( pAndTerm->pExpr );'), (81792, 1, u'+        assert( pOrTerm->eOperator==WO_EQ );'), (81801, 1, u'+        assert( j==1 );'), (81802, 1, u'+        assert( (chngToIN&(chngToIN-1))==0 );'), (81803, 1, u'+        assert( chngToIN==getMask(pMaskSet, iColumn) );'), (81808, 1, u'+        assert( pOrTerm->eOperator==WO_EQ );'), (81842, 1, u'+        assert( pOrTerm->eOperator==WO_EQ );'), (81843, 1, u'+        assert( pOrTerm->leftCursor==iCursor );'), (81844, 1, u'+        assert( pOrTerm->u.leftColumn==iColumn );'), (81849, 1, u'+      assert( pLeft!=0 );'), (81855, 1, u'+        assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (81918, 1, u'+    assert( pExpr->pRight==0 );'), (81999, 1, u'+    assert( pList!=0 );'), (82000, 1, u'+    assert( pList->nExpr==2 );'), (82021, 1, u'+    assert( pWC->op==TK_AND );'), (82177, 1, u'+  assert( pOrderBy!=0 );'), (82179, 1, u'+  assert( nTerm>0 );'), (82236, 1, u'+    assert( pIdx->aSortOrder!=0 );'), (82237, 1, u'+    assert( pTerm->sortOrder==0 || pTerm->sortOrder==1 );'), (82238, 1, u'+    assert( iSortOrder==0 || iSortOrder==1 );'), (82292, 1, u'+  assert( pOrderBy!=0 );'), (82293, 1, u'+  assert( pOrderBy->nExpr>0 );'), (82414, 1, u'+      assert( (pTerm->eOperator&(pTerm->eOperator-1))==0 );'), (82465, 1, u'+      assert( (pTerm->eOperator&(pTerm->eOperator-1))==0 );'), (82475, 1, u'+      assert( WO_EQ==SQLITE_INDEX_CONSTRAINT_EQ );'), (82476, 1, u'+      assert( WO_LT==SQLITE_INDEX_CONSTRAINT_LT );'), (82477, 1, u'+      assert( WO_LE==SQLITE_INDEX_CONSTRAINT_LE );'), (82478, 1, u'+      assert( WO_GT==SQLITE_INDEX_CONSTRAINT_GT );'), (82479, 1, u'+      assert( WO_GE==SQLITE_INDEX_CONSTRAINT_GE );'), (82480, 1, u'+      assert( WO_MATCH==SQLITE_INDEX_CONSTRAINT_MATCH );'), (82481, 1, u'+      assert( pTerm->eOperator & (WO_EQ|WO_LT|WO_LE|WO_GT|WO_GE|WO_MATCH) );'), (82502, 1, u'+  assert( pTab->azModuleArg && pTab->azModuleArg[0] );'), (82503, 1, u'+  assert( pVtab );'), (82943, 1, u'+      assert( pCost->plan.wsFlags & WHERE_INDEXED );'), (83003, 1, u'+    assert( v!=0 );'), (83032, 1, u'+  assert( iTarget>0 );'), (83044, 1, u'+    assert( pX->op==TK_IN );'), (83050, 1, u'+    assert( pLevel->plan.wsFlags & WHERE_IN_ABLE );'), (83117, 1, u'+  assert( pLevel->plan.wsFlags & WHERE_INDEXED );'), (83128, 1, u'+  assert( pIdx->nColumn>=nEq );'), (83134, 1, u'+    assert( (pTerm->wtFlags & TERM_CODED)==0 );'), (83252, 1, u'+          assert( pParse->disableColCache );'), (83259, 1, u'+    assert( pParse->disableColCache );'), (83293, 1, u'+    assert( pTerm!=0 );'), (83294, 1, u'+    assert( pTerm->pExpr!=0 );'), (83295, 1, u'+    assert( pTerm->leftCursor==iCur );'), (83296, 1, u'+    assert( omitTable==0 );'), (83316, 1, u'+    assert( omitTable==0 );'), (83337, 1, u'+      assert( TK_LE==TK_GT+1 );      /* Make sure the ordering.. */'), (83338, 1, u'+      assert( TK_LT==TK_GT+2 );      /*  ... of the TK_xx values... */'), (83339, 1, u'+      assert( TK_GE==TK_GT+3 );      /*  ... is correcct. */'), (83342, 1, u'+      assert( pX!=0 );'), (83343, 1, u'+      assert( pStart->leftCursor==iCur );'), (83356, 1, u'+      assert( pX!=0 );'), (83357, 1, u'+      assert( pEnd->leftCursor==iCur );'), (83524, 1, u'+    assert( op!=0 );'), (83628, 1, u'+    assert( pTerm!=0 );'), (83629, 1, u'+    assert( pTerm->eOperator==WO_OR );'), (83630, 1, u'+    assert( (pTerm->wtFlags & TERM_ORINFO)!=0 );'), (83676, 1, u'+    assert( bRev==0 || bRev==1 );'), (83677, 1, u'+    assert( omitTable==0 );'), (83697, 1, u'+    assert( pE!=0 );'), (83722, 1, u'+      assert( pTerm->pExpr );'), (83771, 1, u'+        assert( pInfo->needToFreeIdxStr==0 || db->mallocFailed );'), (83967, 1, u'+      assert( (m-1)==toTheLeft );'), (84024, 1, u'+      assert( pTabItem->pTab );'), (84060, 1, u'+    assert( once );'), (84061, 1, u'+    assert( notReady & getMask(pMaskSet, pTabList->a[bestJ].iCursor) );'), (84091, 1, u'+        assert( bestPlan.plan.u.pIdx==pIdx );'), (84112, 1, u'+  assert( (wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || pWInfo->nLevel==1 );'), (84175, 1, u'+        assert( n<=pTab->nCol );'), (84185, 1, u'+      assert( pIx->pSchema==pTab->pSchema );'), (84186, 1, u'+      assert( iIdxCur>=0 );'), (84321, 1, u'+    assert( pTab!=0 );'), (84351, 1, u'+      assert( pIdx!=0 );'), (84364, 1, u'+          assert(!useIndexOnly || j<pIdx->nColumn);'), (85856, 1, u'+  assert( iLookAhead!=YYNOCODE );'), (85912, 1, u'+  assert( stateno<=YY_REDUCE_MAX );'), (85915, 1, u'+  assert( i!=YY_REDUCE_USE_DFLT );'), (85916, 1, u'+  assert( iLookAhead!=YYNOCODE );'), (85923, 1, u'+  assert( i>=0 && i<YY_SZ_ACTTAB );'), (85924, 1, u'+  assert( yy_lookahead[i]==iLookAhead );'), (87291, 1, u'+  assert( yymsp[-2].minor.yy145!=0 );'), (87300, 1, u'+  assert( yymsp[-1].minor.yy145!=0 );'), (87430, 1, u'+    assert( yyact == YYNSTATE + YYNRULE + 1 );'), (87465, 1, u'+  assert( TOKEN.z[0] );  /* The tokenizer always gives us a token */'), (87551, 1, u'+      assert( !yyendofinput );  /* Impossible to shift the $ token */'), (87558, 1, u'+      assert( yyact == YY_ERROR_ACTION );'), (88317, 1, u'+  assert( pzErrMsg!=0 );'), (88323, 1, u'+  assert( pParse->sLastToken.dyn==0 );'), (88324, 1, u'+  assert( pParse->pNewTable==0 );'), (88325, 1, u'+  assert( pParse->pNewTrigger==0 );'), (88326, 1, u'+  assert( pParse->nVar==0 );'), (88327, 1, u'+  assert( pParse->nVarExpr==0 );'), (88328, 1, u'+  assert( pParse->nVarExprAlloc==0 );'), (88329, 1, u'+  assert( pParse->apVarExpr==0 );'), (88333, 1, u'+    assert( i>=0 );'), (88335, 1, u'+    assert( pParse->sLastToken.dyn==0 );'), (88988, 1, u'+    assert( sqlite3GlobalConfig.nRefInitMutex==0 );'), (89005, 1, u'+    assert(sizeof(x)==8);'), (89006, 1, u'+    assert(sizeof(x)==sizeof(y));'), (89008, 1, u'+    assert( sqlite3IsNaN(y) );'), (89228, 1, u'+    assert( sz > (int)sizeof(LookasideSlot*) );'), (89414, 1, u'+  assert( sqlite3SafetyCheckSickOrOk(db) );'), (89446, 1, u'+  assert( db->nDb<=2 );'), (89447, 1, u'+  assert( db->aDb==db->aDbStatic );'), (89499, 1, u'+  assert( db->lookaside.nOut==0 );  /* Fails on a lookaside memory leak */'), (89513, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (89596, 1, u'+  assert( count>=0 );'), (89725, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (89773, 1, u'+      assert( !db->mallocFailed );'), (89781, 1, u'+  assert(p || db->mallocFailed);'), (89829, 1, u'+  assert( !db->mallocFailed );'), (90002, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (90003, 1, u'+  assert( ppBtree != 0);'), (90060, 1, u'+    assert( !db->mallocFailed );'), (90155, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (90356, 1, u'+  assert( sizeof(db->aLimit)==sizeof(aHardLimit) );'), (90393, 1, u'+  assert( db->pDfltColl!=0 );'), (90501, 1, u'+    assert( db->mutex!=0 || isThreadsafe==0 || sqlite3GlobalConfig.bFullMutex==0 );'), (90546, 1, u'+  assert( zFilename );'), (90547, 1, u'+  assert( ppDb );'), (90559, 1, u'+    assert( *ppDb || rc==SQLITE_NOMEM );'), (90584, 1, u'+  assert( !db->mallocFailed );'), (90604, 1, u'+  assert( !db->mallocFailed );'), (90625, 1, u'+  assert( !db->mallocFailed );'), (90882, 1, u'+      assert( pPager!=0 );'), (90884, 1, u'+      assert( fd!=0 );'), (91020, 1, u'+#define assertMutexHeld() \\'), (91021, 1, u'+  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) )'), (91053, 1, u'+    assert( p->pUnlockConnection || p->pBlockingConnection );'), (91058, 1, u'+      assert( p2->xUnlockNotify==p->xUnlockNotify || !seen );'), (91059, 1, u'+      assert( db==0 || p->pUnlockConnection!=db );'), (91060, 1, u'+      assert( db==0 || p->pBlockingConnection!=db );'), (91074, 1, u'+  assertMutexHeld();'), (91089, 1, u'+  assertMutexHeld();'), (91111, 1, u'+  assertMutexHeld();'), (91174, 1, u'+  assert( !db->mallocFailed );'), (91236, 1, u'+      assert( p->xUnlockNotify );'), (91243, 1, u'+      assert( aArg==aDyn || (aDyn==0 && aArg==aStatic) );'), (91244, 1, u'+      assert( nArg<=(int)ArraySize(aStatic) || aArg==aDyn );'), (92076, 1, u'+  assert( q - (unsigned char *)p <= VARINT_MAX );'), (92090, 1, u'+      assert( 0 );'), (92103, 1, u'+ assert( *pi==i );'), (92128, 1, u'+  assert( nCapacity>=0 );'), (92146, 1, u'+  assert( nAddCapacity>0 );'), (92158, 1, u'+  assert( nSource>0 && pSource!=NULL );'), (92166, 1, u'+  assert( nSource1>0 && pSource1!=NULL );'), (92167, 1, u'+  assert( nSource2>0 && pSource2!=NULL );'), (92199, 1, u'+  assert( sb->b.nData>0 );'), (92274, 1, u'+  assert( pReader->nData>=0 );'), (92278, 1, u'+  assert( !dlrAtEnd(pReader) );'), (92282, 1, u'+  assert( !dlrAtEnd(pReader) );'), (92286, 1, u'+  assert( !dlrAtEnd(pReader) );'), (92290, 1, u'+  assert( !dlrAtEnd(pReader) );'), (92300, 1, u'+  assert( !dlrAtEnd(pReader) );'), (92306, 1, u'+  assert( !dlrAtEnd(pReader) );'), (92310, 1, u'+  assert( !dlrAtEnd(pReader) );'), (92313, 1, u'+  assert( pReader->nElement<=pReader->nData );'), (92323, 1, u'+      assert( n<pReader->nData );'), (92326, 1, u'+        assert( n<=pReader->nData );'), (92330, 1, u'+          assert( n<pReader->nData );'), (92334, 1, u'+          assert( n<pReader->nData );'), (92339, 1, u'+    assert( pReader->nElement<=pReader->nData );'), (92344, 1, u'+  assert( pData!=NULL && nData!=0 );'), (92366, 1, u'+  assert( nData>0 );'), (92367, 1, u'+  assert( pData!=0 );'), (92368, 1, u'+  assert( pData+nData>pData );'), (92384, 1, u'+        assert( n<=nData );'), (92387, 1, u'+    assert( n<=nData );'), (92393, 1, u'+#define ASSERT_VALID_DOCLIST(i, p, n, o) docListValidate(i, p, n, o)'), (92395, 1, u'+#define ASSERT_VALID_DOCLIST(i, p, n, o) assert( 1 )'), (92454, 1, u'+  assert( nFirstOld<nData || (nFirstOld==nData && pWriter->iType==DL_DOCIDS) );'), (92461, 1, u'+  ASSERT_VALID_DOCLIST(pWriter->iType, pData, nData, &iLastDocidDelta);'), (92462, 1, u'+  assert( iLastDocid==iFirstDocid-iDocid+iLastDocidDelta );'), (92484, 1, u'+  assert( !pWriter->has_iPrevDocid || iDocid>pWriter->iPrevDocid );'), (92485, 1, u'+  assert( pWriter->iType==DL_DOCIDS );'), (92523, 1, u'+  assert( !plrAtEnd(pReader) );'), (92527, 1, u'+  assert( !plrAtEnd(pReader) );'), (92531, 1, u'+  assert( !plrAtEnd(pReader) );'), (92535, 1, u'+  assert( !plrAtEnd(pReader) );'), (92541, 1, u'+  assert( !plrAtEnd(pReader) );'), (92556, 1, u'+  assert( i!=POS_COLUMN );'), (92571, 1, u'+  assert( n<=pReader->nData );'), (92635, 1, u'+  assert( pWriter->iPos!=-1 );'), (92646, 1, u'+  assert( iPos>=pWriter->iPos );'), (92650, 1, u'+    assert( iStartOffset>=pWriter->iOffset );'), (92653, 1, u'+    assert( iEndOffset>=iStartOffset );'), (92669, 1, u'+  assert( !pWriter->dlw->has_iPrevDocid || iDocid>pWriter->dlw->iPrevDocid );'), (92778, 1, u'+  assert( iOutType<=iType );'), (92876, 1, u'+  assert( nReaders>0 );'), (92882, 1, u'+  assert( nReaders<=MERGE_COUNT );'), (92885, 1, u'+    assert( pReaders[i].iType==pReaders[0].iType );'), (92945, 1, u'+  assert( pLeft->iType==pRight->iType );'), (92976, 1, u'+  assert( dlrDocid(pLeft)==dlrDocid(pRight) );'), (92977, 1, u'+  assert( pLeft->iType==pRight->iType );'), (92978, 1, u'+  assert( pLeft->iType==pOut->iType );'), (93087, 1, u'+  assert( dlrDocid(pLeft)==dlrDocid(pRight) );'), (93088, 1, u'+  assert( pOut->iType!=DL_POSITIONS_OFFSETS );'), (93141, 1, u'+  assert(!plrAtEnd(pLeft) || !plrAtEnd(pRight));'), (93191, 1, u'+  assert( iType!=DL_POSITIONS_OFFSETS );'), (93437, 1, u'+  assert( r == result + len );'), (93685, 1, u'+  assert( iStmt<MAX_STMT );'), (93730, 1, u'+  assert( idx>=-1 && idx<MERGE_COUNT );'), (94432, 1, u'+  assert( argc>=3 );'), (94836, 1, u'+    assert(p && p->eType==FTSQUERY_PHRASE );'), (94842, 1, u'+        assert( p->pParent->pRight==p );'), (94847, 1, u'+        assert( p->pRight!=0 );'), (94933, 1, u'+      assert( pToken->n<=nToken );'), (95012, 1, u'+        assert( pRight->eType==FTSQUERY_PHRASE );'), (95013, 1, u'+        assert( pLeft->eType==FTSQUERY_PHRASE );'), (95400, 1, u'+  assert( eType==DL_POSITIONS || eType==DL_DOCIDS );'), (95406, 1, u'+  assert( pTab->nPendingData<0 );'), (95477, 1, u'+            assert( pExpr->pRight->eType==FTSQUERY_PHRASE );'), (95478, 1, u'+            assert( pLeft->eType==FTSQUERY_PHRASE );'), (95546, 1, u'+    assert( 0==(*ppExpr) );'), (95616, 1, u'+    assert( c->iCursorType==idxNum );'), (95632, 1, u'+      assert( idxNum<=QUERY_FULLTEXT+v->nColumn);'), (95633, 1, u'+      assert( argc==1 );'), (95919, 1, u'+  assert( nData>0 );'), (95920, 1, u'+  assert( pData!=0 );'), (95921, 1, u'+  assert( pData+nData>pData );'), (95925, 1, u'+  assert( n>0 );'), (95926, 1, u'+  assert( iDummy>0 );'), (95927, 1, u'+  assert( n<nData );'), (95933, 1, u'+  assert( n>0 );'), (95934, 1, u'+  assert( n<=nData );'), (95942, 1, u'+    assert( n>0 );'), (95943, 1, u'+    assert( iDummy>0 );'), (95944, 1, u'+    assert( n+iDummy>0);'), (95945, 1, u'+    assert( n+iDummy<=nData );'), (95953, 1, u'+      assert( n>0 );'), (95954, 1, u'+      assert( iDummy>=0 );'), (95955, 1, u'+      assert( n<nData );'), (95961, 1, u'+      assert( n>0 );'), (95962, 1, u'+      assert( iDummy>0 );'), (95963, 1, u'+      assert( n+iDummy>0);'), (95964, 1, u'+      assert( n+iDummy<=nData );'), (95970, 1, u'+#define ASSERT_VALID_INTERIOR_BLOCK(x) interiorBlockValidate(x)'), (95972, 1, u'+#define ASSERT_VALID_INTERIOR_BLOCK(x) assert( 1 )'), (95995, 1, u'+  assert( iHeight>0 );'), (96005, 1, u'+  ASSERT_VALID_INTERIOR_BLOCK(pWriter->last);'), (96018, 1, u'+  ASSERT_VALID_INTERIOR_BLOCK(pWriter->last);'), (96041, 1, u'+  assert( pWriter->iLastChildBlock==iChildBlock );'), (96058, 1, u'+  ASSERT_VALID_INTERIOR_BLOCK(pWriter->last);'), (96105, 1, u'+  ASSERT_VALID_INTERIOR_BLOCK(block);'), (96119, 1, u'+    ASSERT_VALID_INTERIOR_BLOCK(block);'), (96159, 1, u'+  assert( nData>0 );'), (96160, 1, u"+  assert( pData[0]!='\\0' );"), (96166, 1, u'+  assert( 1+n<=nData );'), (96180, 1, u'+    assert( n+nTerm<=pReader->nData );'), (96195, 1, u'+  assert( !interiorReaderAtEnd(pReader) );'), (96199, 1, u'+  assert( !interiorReaderAtEnd(pReader) );'), (96205, 1, u'+  assert( !interiorReaderAtEnd(pReader) );'), (96222, 1, u'+    assert( n+nSuffix<=pReader->nData );'), (96316, 1, u'+  assert( nData>0 );'), (96317, 1, u'+  assert( pData!=0 );'), (96318, 1, u'+  assert( pData+nData>pData );'), (96322, 1, u'+  assert( iDummy==0 );'), (96323, 1, u'+  assert( n>0 );'), (96324, 1, u'+  assert( n<nData );'), (96330, 1, u'+  assert( n>0 );'), (96331, 1, u'+  assert( iDummy>0 );'), (96332, 1, u'+  assert( n+iDummy>0 );'), (96333, 1, u'+  assert( n+iDummy<nData );'), (96339, 1, u'+  assert( n>0 );'), (96340, 1, u'+  assert( iDummy>0 );'), (96341, 1, u'+  assert( n+iDummy>0 );'), (96342, 1, u'+  assert( n+iDummy<=nData );'), (96343, 1, u'+  ASSERT_VALID_DOCLIST(DL_DEFAULT, pData+n, iDummy, NULL);'), (96350, 1, u'+    assert( n>0 );'), (96351, 1, u'+    assert( iDummy>=0 );'), (96352, 1, u'+    assert( n<nData );'), (96356, 1, u'+    assert( n>0 );'), (96357, 1, u'+    assert( iDummy>0 );'), (96358, 1, u'+    assert( n+iDummy>0 );'), (96359, 1, u'+    assert( n+iDummy<nData );'), (96364, 1, u'+    assert( n>0 );'), (96365, 1, u'+    assert( iDummy>0 );'), (96366, 1, u'+    assert( n+iDummy>0 );'), (96367, 1, u'+    assert( n+iDummy<=nData );'), (96368, 1, u'+    ASSERT_VALID_DOCLIST(DL_DEFAULT, pData+n, iDummy, NULL);'), (96373, 1, u'+#define ASSERT_VALID_LEAF_NODE(p, n) leafNodeValidate(p, n)'), (96375, 1, u'+#define ASSERT_VALID_LEAF_NODE(p, n) assert( 1 )'), (96391, 1, u'+  assert( nData>2 );'), (96392, 1, u'+  assert( iData>=0 );'), (96393, 1, u'+  assert( iData+nData<=pWriter->data.nData );'), (96394, 1, u'+  ASSERT_VALID_LEAF_NODE(pWriter->data.pData+iData, nData);'), (96398, 1, u'+  assert( iBlockid!=0 );'), (96405, 1, u'+  assert( pWriter->data.nData>iData+1+n+nStartingTerm );'), (96406, 1, u'+  assert( pWriter->nTermDistinct>0 );'), (96407, 1, u'+  assert( pWriter->nTermDistinct<=nStartingTerm );'), (96424, 1, u'+    assert( iBlockid==pWriter->iEndBlockid );'), (96464, 1, u'+  assert( pWriter->has_parent );'), (96513, 1, u'+  assert( nTerm>0 );'), (96518, 1, u'+    assert( nPrefix<nTerm );'), (96562, 1, u'+  assert( iDoclistData>=n+nTerm );'), (96581, 1, u'+  ASSERT_VALID_LEAF_NODE(pWriter->data.pData, pWriter->data.nData);'), (96599, 1, u'+  ASSERT_VALID_DOCLIST(DL_DEFAULT,'), (96610, 1, u'+  assert( nActualData<=nData );'), (96611, 1, u'+  assert( nActual<=n );'), (96680, 1, u'+    assert( n<iDoclistData );'), (96684, 1, u'+    assert( 2*STANDALONE_MIN<=LEAF_MAX );'), (96685, 1, u'+    assert( n+pWriter->data.nData-iDoclistData<iDoclistData );'), (96691, 1, u'+  ASSERT_VALID_LEAF_NODE(pWriter->data.pData, pWriter->data.nData);'), (96739, 1, u'+  assert( pReader->term.nData>0 );'), (96746, 1, u'+  assert( pReader->term.nData>0 );'), (96752, 1, u'+  assert( pReader->term.nData>0 );'), (96761, 1, u'+  assert( nData>0 );'), (96762, 1, u"+  assert( pData[0]=='\\0' );"), (96772, 1, u'+  assert( 1+n+nTerm<nData );'), (96780, 1, u'+  assert( !leafReaderAtEnd(pReader) );'), (96784, 1, u'+  assert( n+nData<=pReader->nData );'), (96794, 1, u'+    assert( n+nSuffix<pReader->nData );'), (96838, 1, u'+  assert( !pReader->eof );'), (96842, 1, u'+  assert( !pReader->eof );'), (96848, 1, u'+  assert( !pReader->eof );'), (96852, 1, u'+  assert( !pReader->eof );'), (96938, 1, u'+  assert( !leavesReaderAtEnd(pReader) );'), (97017, 1, u'+    assert( i<MERGE_COUNT );'), (97052, 1, u'+  assert( nReaders<=MERGE_COUNT );'), (97111, 1, u'+  assert( i==MERGE_COUNT );'), (97192, 1, u'+  assert( nTerm>0 );'), (97226, 1, u'+            assert(pBuffers!=NULL);'), (97237, 1, u'+      assert(iBuffer<nBuffers && pBuffers[iBuffer].nData==0);'), (97302, 1, u'+  assert( nData>1 );'), (97303, 1, u"+  assert( *pData=='\\0' );"), (97324, 1, u'+  assert( iStartLeaf<=iEndLeaf );'), (97351, 1, u'+  assert( nData>1 );'), (97352, 1, u"+  assert( *pData!='\\0' );"), (97375, 1, u'+  assert( *piEndChild>=*piStartChild );'), (97376, 1, u'+  assert( isPrefix || *piStartChild==*piEndChild );'), (97391, 1, u'+  assert( iBlockid!=0 );'), (97392, 1, u'+  assert( pTerm!=NULL );'), (97393, 1, u'+  assert( nTerm!=0 );        /* TODO(shess) Why not allow this? */'), (97394, 1, u'+  assert( piStartChild!=NULL );'), (97395, 1, u'+  assert( piEndChild!=NULL );'), (97454, 1, u'+      assert( iNextStart<=iNextEnd );'), (97458, 1, u'+    assert( iStartChild<=iLeavesEnd );'), (97459, 1, u'+    assert( iEndChild<=iLeavesEnd );'), (97491, 1, u'+  assert( nData>1 );'), (97494, 1, u'+  assert( v->nPendingData<0 );'), (97539, 1, u'+  assert( v->nPendingData<0 );'), (97612, 1, u'+    assert( i<n );'), (97617, 1, u'+  assert( i==n );'), (97736, 1, u'+      assert( nArg==2+v->nColumn+2);'), (97747, 1, u'+    assert( nArg==2+v->nColumn+2);'), (97781, 1, u'+  assert( v->nPendingData<0 );'), (97790, 1, u'+  assert( v->nPendingData<0 );'), (97972, 1, u'+      assert( iReader<i );  /* Must execute the loop at least once. */'), (98083, 1, u'+      assert( i<nReaders );'), (98094, 1, u'+      assert( i==nReaders );'), (98195, 1, u'+  assert( nTerms>0 );'), (98202, 1, u'+    assert( iTerm<nTerms );'), (98207, 1, u'+  assert( iTerm==nTerms );'), (98209, 1, u'+  assert( nResultBytes>0 );   /* nTerms>0, nResultsBytes must be, too. */'), (98225, 1, u'+  assert( iByte==nResultBytes );'), (98226, 1, u"+  assert( result[nResultBytes-1]==' ' );"), (98298, 1, u'+          assert( rc==SQLITE_OK );'), (98324, 1, u'+  assert( pData!=NULL && nData>0 );'), (98347, 1, u'+          assert( dump.nData>0 );'), (98349, 1, u"+          assert( dump.pData[dump.nData]==' ');"), (98359, 1, u'+          assert( NULL=="Unhandled DL_DEFAULT value");'), (98365, 1, u'+      assert( dump.nData>0 );'), (98367, 1, u"+      assert( dump.pData[dump.nData]==' ');"), (98373, 1, u'+  assert( dump.nData>0 );'), (98375, 1, u"+  assert( dump.pData[dump.nData]==' ');"), (98377, 1, u'+  assert( dump.nData>0 );'), (98684, 1, u'+  assert( rc!=SQLITE_OK );'), (99040, 1, u'+        assert( nKey==4 );'), (99156, 1, u'+  assert( p->eType!=FTSQUERY_PHRASE );'), (99164, 1, u'+  assert( p->eType==FTSQUERY_AND );'), (99187, 1, u'+    assert( pSplit->pParent->pRight==pSplit );'), (99248, 1, u'+        assert( eType!=FTSQUERY_PHRASE || !p->pPhrase->isNot );'), (99265, 1, u'+          assert( pRet && pPrev );'), (99298, 1, u'+            assert( pPrev && pPrev->pLeft && pPrev->pRight==0 );'), (99309, 1, u'+      assert( nByte>0 );'), (99311, 1, u'+    assert( rc!=SQLITE_OK || (nByte>0 && nByte<=nIn) );'), (99542, 1, u'+  assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (99652, 1, u'+  assert( pNew!=0 );'), (99653, 1, u'+  assert( keyClass>=FTS3_HASH_STRING && keyClass<=FTS3_HASH_BINARY );'), (99669, 1, u'+  assert( pH!=0 );'), (99736, 1, u'+    assert( keyClass==FTS3_HASH_BINARY );'), (99751, 1, u'+    assert( keyClass==FTS3_HASH_BINARY );'), (99791, 1, u'+  assert( (new_size & (new_size-1))==0 );'), (99865, 1, u'+    assert( pH->first==0 );'), (99866, 1, u'+    assert( pH->count==0 );'), (99882, 1, u'+  assert( xHash!=0 );'), (99884, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (99916, 1, u'+  assert( pH!=0 );'), (99918, 1, u'+  assert( xHash!=0 );'), (99920, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (99957, 1, u'+  assert( pH->htsize>0 );'), (99958, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (100115, 1, u"+  assert( x>='a' && x<='z' );"), (100124, 1, u"+  assert( x>='a' && x<='z' );"), (100670, 1, u'+  assert( argc==1 || argc==2 );'), (100759, 1, u'+  assert( argc==2 || argc==3 );'), (100901, 1, u'+  assert( rc==SQLITE_OK );'), (100902, 1, u'+  assert( p1==p2 );'), (100904, 1, u'+  assert( rc==SQLITE_ERROR );'), (100905, 1, u'+  assert( p2==0 );'), (100906, 1, u'+  assert( 0==strcmp(sqlite3_errmsg(db), "unknown tokenizer: nosuchtokenizer") );'), (100910, 1, u'+  assert( rc==SQLITE_OK );'), (100912, 1, u'+  assert( rc==SQLITE_OK );'), (100913, 1, u'+  assert( p2==p1 );'), (101475, 1, u'+  assert( sizeof(RtreeCoord)==4 );'), (101476, 1, u'+  assert( sizeof(u32)==4 );'), (101532, 1, u'+  assert( iNode!=0 );'), (101543, 1, u'+    assert( pNode->pNext==0 );'), (101557, 1, u'+    for( ; (*pp)!=pNode; pp = &(*pp)->pNext){ assert(*pp); }'), (101600, 1, u'+    assert( !pParent || !pNode->pParent || pNode->pParent==pParent );'), (101640, 1, u'+  assert( (rc==SQLITE_OK && pNode) || (pNode==0 && rc!=SQLITE_OK) );'), (101694, 1, u'+  assert(nCell<=nMaxCell);'), (101738, 1, u'+    assert( pNode->nRef>0 );'), (101767, 1, u'+  assert( iCell<NCELL(pNode) );'), (101956, 1, u'+    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (101988, 1, u'+    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (102026, 1, u'+  assert( iHeight>=0 );'), (102056, 1, u'+    assert( pCursor->pNode==pChild );'), (102074, 1, u'+    assert( ii<(NCELL(pNode)-1) );'), (102136, 1, u'+  assert(pCsr->pNode);'), (102158, 1, u'+      assert( pRtree->eCoordType==RTREE_COORD_INT32 );'), (102228, 1, u'+        assert( (idxStr==0 && argc==0) || strlen(idxStr)==argc*2 );'), (102247, 1, u'+        assert( pCsr->pNode==pRoot );'), (102254, 1, u'+        assert( pCsr->pNode==pRoot );'), (102258, 1, u'+      assert( rc!=SQLITE_OK || !pCsr->pNode || pCsr->iCell<NCELL(pCsr->pNode) );'), (102308, 1, u'+  assert( pIdxInfo->idxStr==0 );'), (102353, 1, u'+        assert( compatible[RTREE_EQ & 7]==0 );'), (102354, 1, u'+        assert( compatible[RTREE_LT & 7]==1 );'), (102355, 1, u'+        assert( compatible[RTREE_LE & 7]==1 );'), (102356, 1, u'+        assert( compatible[RTREE_GT & 7]==2 );'), (102357, 1, u'+        assert( compatible[RTREE_GE & 7]==2 );'), (102368, 1, u'+        assert( iIdx<sizeof(zIdxStr)-1 );'), (102382, 1, u'+  assert( iIdx>=0 );'), (102861, 1, u'+        assert( left<=right );'), (102928, 1, u'+        assert( xleft1<=xright1 && (xleft1<xright1 || xleft2<=xright2) );'), (103259, 1, u'+  assert( pNode->nRef==1 );'), (103534, 1, u'+    assert( !pRtree->aHash[ii] );'), (103554, 1, u'+  assert(nData>=1);'), (103555, 1, u'+  assert(hashIsEmpty(pRtree));'), (103648, 1, u'+    assert( nData==(pRtree->nDim*2 + 3) );'), (104143, 1, u'+    assert(uPattern!=0);'), (104325, 1, u'+      assert(!pExpr);'), (104391, 1, u'+  assert(nArg==1 || nArg==2);'), (104450, 1, u'+  assert(!"Unexpected return value from ucol_strcoll()");'), (104479, 1, u'+  assert(nArg==2);'), (104492, 1, u'+  assert(p);'), (104762, 1, u'+    assert(iStart<=iEnd);')]
===========================================
Class:   class CAutoBuffer { 
Class: class CUrlOptions   : public map<CStdString, CStdString> { 
Class: class NPT_XbmcFileStream { 
Class: class NPT_XbmcFileInputStream : public NPT_InputStream,                                 private NPT_XbmcFileStream  { 
Class: class NPT_XbmcFileOutputStream : public NPT_OutputStream,                                  private NPT_XbmcFileStream { 
Class: class NPT_XbmcFile: public NPT_FileInterface { 
Class:class CProtocolFinder { class CProtocolFinder 
Class: class CDeviceHostReferenceHolder { 
Class: class CCtrlPointReferenceHolder { 
Class: class CUPnPCleaner : public NPT_Thread { 
Class: class CUPnPServer : public PLT_MediaConnect { 
Class: class CUPnPRenderer : public PLT_MediaRenderer { 
Class: class CRendererReferenceHolder { 
Class: class CMediaBrowser : public PLT_SyncMediaBrowser,                       public PLT_MediaContainerChangesListener { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(371, 2, u'-        assert((mb_type > B_SYM_16X16) && (mb_type < B_8X8));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(575, 2, u'-    assert(IS_INTER(mb_type));'), (605, 2, u'-        assert(IS_8X8(mb_type));'), (638, 2, u'-                assert(IS_SUB_4X4(sub_mb_type));'), (964, 2, u'-    assert(s->linesize && s->uvlinesize);'), (999, 2, u'-    assert(s->current_picture_ptr->long_ref==0);'), (1220, 2, u'-                                    assert(mb_y || linesize <= block_offset[i]);'), (1917, 2, u'-            assert(s0->current_picture_ptr);'), (1918, 2, u'-            assert(s0->current_picture_ptr->data[0]);'), (1919, 2, u'-            assert(s0->current_picture_ptr->reference != DELAYED_PIC_REF);'), (1951, 2, u'-            assert(!s0->current_picture_ptr);'), (1965, 2, u'-    assert(s->mb_num == s->mb_width * s->mb_height);'), (1975, 2, u'-    assert(s->mb_y < s->mb_height);'), (3109, 2, u'-            assert(pics <= MAX_DELAYED_PIC_COUNT);'), (3156, 2, u'-    assert(pict->data[0] || !*data_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(972, 2, u'-        assert(cat == 1 || cat == 2 || cat == 4);'), (1109, 2, u'-    assert(coeff_count > 0);'), (1120, 2, u'-            assert( cat == 1 || cat == 2 || cat == 4 );'), (1233, 2, u'-        assert(h->slice_type_nos == FF_B_TYPE);'), (1286, 2, u'-        assert(h->slice_type_nos == FF_I_TYPE);'), (1544, 2, u'-            assert(IS_8X16(mb_type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(295, 2, u'-        assert(offset == FF_ARRAY_ELEMS(coeff_token_vlc_tables));'), (401, 2, u'-    assert(total_coeff<=16);'), (585, 2, u'-       assert(h->slice_type_nos == FF_I_TYPE);'), (693, 2, u'-            assert(h->slice_type_nos == FF_P_TYPE); //FIXME SP correct ?'), (848, 2, u'-            assert(IS_8X16(mb_type));'), (949, 2, u'-            assert((cbp&15) == 0 || (cbp&15) == 15);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(158, 2, u'-    assert(h->ref_list[1][0].reference&3);'), (184, 2, u'-                assert(match_count==1);'), (345, 2, u'-                assert(b8_stride==2);'), (395, 2, u'-    assert(h->ref_list[1][0].reference&3);'), (470, 2, u'-            assert(h->sps.direct_8x8_inference_flag);'), (553, 2, u'-                assert(b8_stride == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(321, 2, u'-    assert(!FRAME_MBAFF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(125, 2, u'-            assert(len<=32);'), (128, 2, u'-            assert(len<=32);'), (143, 2, u'-        assert(len <= 32);'), (232, 2, u'-                            assert(ref->reference);'), (233, 2, u'-                            assert(!ref->long_ref);'), (253, 2, u'-                        assert(!(ref && !ref->reference));'), (256, 2, u'-                            assert(ref->long_ref);'), (384, 2, u'-    assert(i >= 0 && i < h->short_ref_count);'), (422, 2, u'-            assert(h->long_ref[i]->long_ref == 1);'), (438, 2, u'-    assert(h->long_ref_count==0);'), (479, 2, u'-    assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);'), (568, 2, u'-            assert(mmco[i].long_arg <= 16);'), (590, 2, u'-        default: assert(0);'), (639, 2, u'-            assert(i < 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-#define ASSERT_ALIGNED(ptr) assert(((unsigned long)ptr&0x0000000F));'), (25, 2, u'-#define ASSERT_ALIGNED(ptr) ;'), (419, 2, u'-        ASSERT_ALIGNED(dst);'), (526, 2, u'-        ASSERT_ALIGNED(dst);'), (758, 2, u'-        ASSERT_ALIGNED(dst);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(106, 2, u'-    assert(c->low   == 0);'), (107, 2, u'-    assert(c->range >= 0x100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(303, 2, u'-        assert(compensation_distance > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 2, u'-    assert(s->f_code == 1);'), (44, 2, u'-    assert(s->unrestricted_mv == 1);'), (45, 2, u'-    assert(s->alt_inter_vlc == 0);'), (46, 2, u'-    assert(s->umvplus == 0);'), (47, 2, u'-    assert(s->modified_quant==1);'), (48, 2, u'-    assert(s->loop_filter==1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(215, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (248, 2, u'-    assert(x<8 && y<8 && x>=0 && y>=0);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(101, 2, u'-    assert(s == c->avctx);'), (137, 2, u'-    assert(!s->thread_opaque);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 2, u'-        assert(0);'), (128, 2, u'-        assert(last_exp-10 >= 0 && last_exp-10 < 32);'), (136, 2, u'-        assert(code >= 0 && code < 120);'), (152, 2, u'-        assert(0); //FIXME not implemented'), (199, 2, u'-                assert(0); //FIXME not implemented'), (255, 2, u'-                    assert(0); //FIXME not implemented'), (261, 2, u'-        assert(0); //FIXME not implemented'), (283, 2, u'-                    assert(code < s->coef_vlcs[tindex]->n);'), (317, 2, u'-        assert(0);//FIXME not implemented'), (376, 2, u'-    assert((put_bits_count(&s->pb) & 7) == 0);'), (378, 2, u'-    assert(i>=0);')]
===========================================
Class:    class = ff_get_v(bc);
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(574, 2, u"-    assert(nut->frame_code['N'].flags == FLAG_INVALID);"), (679, 2, u'-    assert(nus->last_pts != AV_NOPTS_VALUE);'), (743, 2, u'-    assert(frame_code != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(113, 2, u'-    assert((int16_t)a[AV_INTEGER_SIZE-1] >= 0 && (int16_t)b[AV_INTEGER_SIZE-1] >= 0);'), (114, 2, u'-    assert(av_log2(b)>=0);'), (182, 2, u'-            assert(av_i2int(ai) == a);'), (183, 2, u'-            assert(av_i2int(bi) == b);'), (184, 2, u'-            assert(av_i2int(av_add_i(ai,bi)) == a+b);'), (185, 2, u'-            assert(av_i2int(av_sub_i(ai,bi)) == a-b);'), (186, 2, u'-            assert(av_i2int(av_mul_i(ai,bi)) == a*b);'), (187, 2, u'-            assert(av_i2int(av_shr_i(ai, 9)) == a>>9);'), (188, 2, u'-            assert(av_i2int(av_shr_i(ai,-9)) == a<<9);'), (189, 2, u'-            assert(av_i2int(av_shr_i(ai, 17)) == a>>17);'), (190, 2, u'-            assert(av_i2int(av_shr_i(ai,-17)) == a<<17);'), (191, 2, u'-            assert(av_log2_i(ai) == av_log2(a));'), (192, 2, u'-            assert(av_i2int(av_div_i(ai,bi)) == a/b);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(79, 2, u'-    assert(c > 0);'), (80, 2, u'-    assert(b >=0);'), (81, 2, u'-    assert((unsigned)rnd<=5 && rnd!=4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 2, u'-  assert((dtime->hour>>4) < 0xa && (dtime->hour&0xf) < 0xa);'), (36, 2, u'-  assert((dtime->minute>>4) < 0x7 && (dtime->minute&0xf) < 0xa);'), (37, 2, u'-  assert((dtime->second>>4) < 0x7 && (dtime->second&0xf) < 0xa);'), (38, 2, u'-  assert((dtime->frame_u&0xf) < 0xa);'), (153, 2, u'-  assert(!attr->unknown1);'), (271, 2, u'-    assert(attr->lang_code == 0 || attr->lang_code == 0xffff);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(87, 2, u'-\t\t\tFLAC__ASSERT(0 != object);'), (115, 2, u'-\t\t\t\tFLAC__ASSERT(0);'), (128, 2, u'-\t\t\tFLAC__ASSERT(object.is_valid());'), (141, 2, u'-\t\t\tFLAC__ASSERT(0 != object);'), (148, 2, u'-\t\t\tFLAC__ASSERT(0 != object);'), (165, 2, u'-\t\t\tFLAC__ASSERT(object.is_valid());'), (182, 2, u'-\t\t\tFLAC__ASSERT(0 != object);'), (191, 2, u'-\t\t\tFLAC__ASSERT(0 != object);'), (200, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (206, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (212, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (218, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (236, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (242, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (248, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (254, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (260, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (266, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (272, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (278, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (284, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (290, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (291, 2, u'-\t\t\tFLAC__ASSERT(value >= FLAC__MIN_BLOCK_SIZE);'), (292, 2, u'-\t\t\tFLAC__ASSERT(value <= FLAC__MAX_BLOCK_SIZE);'), (298, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (299, 2, u'-\t\t\tFLAC__ASSERT(value >= FLAC__MIN_BLOCK_SIZE);'), (300, 2, u'-\t\t\tFLAC__ASSERT(value <= FLAC__MAX_BLOCK_SIZE);'), (306, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (307, 2, u'-\t\t\tFLAC__ASSERT(value < (1u << FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN));'), (313, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (314, 2, u'-\t\t\tFLAC__ASSERT(value < (1u << FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN));'), (320, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (321, 2, u'-\t\t\tFLAC__ASSERT(FLAC__format_sample_rate_is_valid(value));'), (327, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (328, 2, u'-\t\t\tFLAC__ASSERT(value > 0);'), (329, 2, u'-\t\t\tFLAC__ASSERT(value <= FLAC__MAX_CHANNELS);'), (335, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (336, 2, u'-\t\t\tFLAC__ASSERT(value >= FLAC__MIN_BITS_PER_SAMPLE);'), (337, 2, u'-\t\t\tFLAC__ASSERT(value <= FLAC__MAX_BITS_PER_SAMPLE);'), (343, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (344, 2, u'-\t\t\tFLAC__ASSERT(value < (((FLAC__uint64)1) << FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN));'), (350, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (351, 2, u'-\t\t\tFLAC__ASSERT(0 != value);'), (369, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (387, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (393, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (399, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (400, 2, u'-\t\t\tFLAC__ASSERT(0 != value);'), (406, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (412, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (430, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (436, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (437, 2, u'-\t\t\tFLAC__ASSERT(index < object_->data.seek_table.num_points);'), (443, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (444, 2, u'-\t\t\tFLAC__ASSERT(index < object_->data.seek_table.num_points);'), (450, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (451, 2, u'-\t\t\tFLAC__ASSERT(index <= object_->data.seek_table.num_points);'), (457, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (458, 2, u'-\t\t\tFLAC__ASSERT(index < object_->data.seek_table.num_points);'), (464, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (504, 2, u'-\t\t\tFLAC__ASSERT(entry.is_valid());'), (511, 2, u'-\t\t\tFLAC__ASSERT(entry.is_valid());'), (529, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (535, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (541, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (547, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (553, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (559, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (565, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (571, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (572, 2, u'-\t\t\tFLAC__ASSERT(0 != field);'), (599, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (600, 2, u'-\t\t\tFLAC__ASSERT(0 != field_name);'), (620, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (621, 2, u'-\t\t\tFLAC__ASSERT(0 != field_value);'), (785, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (791, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (797, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (798, 2, u'-\t\t\tFLAC__ASSERT(index < object_->data.vorbis_comment.num_comments);'), (804, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (812, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (813, 2, u'-\t\t\tFLAC__ASSERT(index < object_->data.vorbis_comment.num_comments);'), (819, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (820, 2, u'-\t\t\tFLAC__ASSERT(index <= object_->data.vorbis_comment.num_comments);'), (826, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (832, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (833, 2, u'-\t\t\tFLAC__ASSERT(index < object_->data.vorbis_comment.num_comments);'), (875, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (876, 2, u'-\t\t\tFLAC__ASSERT(i < object_->num_indices);'), (882, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (883, 2, u'-\t\t\tFLAC__ASSERT(0 != value);'), (890, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (891, 2, u'-\t\t\tFLAC__ASSERT(value <= 1);'), (897, 2, u'- \t\t\tFLAC__ASSERT(is_valid());'), (898, 2, u'- \t\t\tFLAC__ASSERT(i < object_->num_indices);'), (916, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (922, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (928, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (934, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (940, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (941, 2, u'-\t\t\tFLAC__ASSERT(i < object_->data.cue_sheet.num_tracks);'), (947, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (948, 2, u'-\t\t\tFLAC__ASSERT(0 != value);'), (955, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (961, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (967, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (968, 2, u'-\t\t\tFLAC__ASSERT(track_num < object_->data.cue_sheet.num_tracks);'), (969, 2, u'-\t\t\tFLAC__ASSERT(index_num < object_->data.cue_sheet.tracks[track_num].num_indices);'), (975, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (976, 2, u'-\t\t\tFLAC__ASSERT(track_num < object_->data.cue_sheet.num_tracks);'), (977, 2, u'-\t\t\tFLAC__ASSERT(index_num <= object_->data.cue_sheet.tracks[track_num].num_indices);'), (983, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (984, 2, u'-\t\t\tFLAC__ASSERT(track_num < object_->data.cue_sheet.num_tracks);'), (985, 2, u'-\t\t\tFLAC__ASSERT(index_num < object_->data.cue_sheet.tracks[track_num].num_indices);'), (991, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (992, 2, u'-\t\t\tFLAC__ASSERT(i < object_->data.cue_sheet.num_tracks);'), (999, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1000, 2, u'-\t\t\tFLAC__ASSERT(i <= object_->data.cue_sheet.num_tracks);'), (1007, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1008, 2, u'-\t\t\tFLAC__ASSERT(i < object_->data.cue_sheet.num_tracks);'), (1014, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1020, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1038, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1044, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1050, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1056, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1062, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1068, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1074, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1080, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1086, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1092, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1098, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1105, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1112, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1118, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1124, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1130, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1136, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1155, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1161, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1167, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1180, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1194, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1210, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1224, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1240, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1254, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1270, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1307, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1308, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1319, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1325, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1331, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1337, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1344, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1351, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1357, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1364, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1371, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1377, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1383, 2, u'-\t\t\tFLAC__ASSERT(0 != block);'), (1384, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1390, 2, u'-\t\t\tFLAC__ASSERT(0 != block);'), (1391, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1397, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1431, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1437, 2, u'-\t\t\tFLAC__ASSERT(0 != filename);'), (1438, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1447, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1456, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1462, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1468, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1474, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1480, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1486, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1514, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1515, 2, u'-\t\t\tFLAC__ASSERT(chain.is_valid());'), (1521, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1527, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1533, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1539, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1548, 2, u'-\t\t\tFLAC__ASSERT(0 != block);'), (1549, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1560, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1566, 2, u'-\t\t\tFLAC__ASSERT(0 != block);'), (1567, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (1578, 2, u'-\t\t\tFLAC__ASSERT(0 != block);'), (1579, 2, u'-\t\t\tFLAC__ASSERT(is_valid());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(68, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (74, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (80, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (86, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (92, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (98, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (104, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (110, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (116, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (122, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (128, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (134, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (140, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (146, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (152, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (158, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (164, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (170, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (176, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (182, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (188, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (194, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (200, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (206, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (212, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (218, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (224, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (259, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (261, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (268, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (270, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (277, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (279, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (286, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (288, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (295, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (297, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (304, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (306, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (313, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (315, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (322, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (324, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (344, 2, u'-\t\t\tFLAC__ASSERT(0 != decoder_);'), (350, 2, u'-\t\t\tFLAC__ASSERT(0 != decoder_);'), (361, 2, u'-\t\t\tFLAC__ASSERT(0 != decoder_);'), (367, 2, u'-\t\t\tFLAC__ASSERT(0 != decoder_);'), (384, 2, u'-\t\t\tFLAC__ASSERT(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (75, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (81, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (87, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (93, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (99, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (105, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (111, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (117, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (123, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (129, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (135, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (141, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (147, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (153, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (159, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (165, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (171, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (177, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (183, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (189, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (195, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (220, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (226, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (232, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (238, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (244, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (250, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (256, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (262, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (268, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (274, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (280, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (286, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (292, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (298, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (304, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (310, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (316, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (322, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (328, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (334, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (340, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (346, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (352, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (358, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (364, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (394, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (396, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (403, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (405, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (412, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (414, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (421, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (423, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (430, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (432, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);'), (452, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (458, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (469, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (475, 2, u'-\t\t\tFLAC__ASSERT(is_valid());'), (492, 2, u'-\t\t\tFLAC__ASSERT(false);'), (504, 2, u'-\t\t\tFLAC__ASSERT(0 != client_data);'), (506, 2, u'-\t\t\tFLAC__ASSERT(0 != instance);')]
===========================================
Class:  class FMT { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(115, 2, u'-    assert((!k && !ibl) ||'), (176, 2, u'-    assert((k != (size_t)(-1) && !ibl) ||'), (188, 2, u'-      assert((!k && !tbl) ||'), (198, 2, u'-  assert(!k);'), (211, 2, u'-    assert((k != (size_t)(-1) && !ibl) ||'), (221, 2, u'-      assert((!k && !tbl) ||'), (228, 2, u'-  assert(!k);'), (229, 2, u'-  assert(!obl);')]
===========================================
Class: class CASAPDecoder : public CInputDecoder { 
Class: class CASAPPlugin : public CInputPlugin { 
Class: class CASAPSourceStream : public CSourceStream, IMediaSeeking { 
Class: class CASAPSource : public CSource, IFileSourceFilter { 
Class: class input_asap { 
Class: class preferences_page_asap : public preferences_page { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(441, 2, u'-#define Assert(cond,msg) {if(!(cond)) error(msg);}'), (445, 2, u'-#define Assert(cond,msg)'), (607, 2, u'-    Assert(encoder->strstart <= window_size-MIN_LOOKAHEAD, "insufficient lookahead");'), (610, 2, u'-\tAssert(cur_match < encoder->strstart, "no future");'), (642, 2, u'-\tAssert(scan <= encoder->window+(unsigned)(window_size-1), "wild scan");'), (751, 2, u'-\tAssert(window_size == (ulg)2*WSIZE, "no sliding with BIG_MEM");'), (1168, 2, u'-    Assert (length == 256, "ct_init: length != 256");'), (1183, 2, u'-    Assert (dist == 256, "ct_init: dist != 256");'), (1191, 2, u'-    Assert (dist == 256, "ct_init: 256+dist != 512");'), (1389, 2, u'-    Assert (code + encoder->bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,'), (1581, 2, u'-\t    Assert(count >= 3 && count <= 6, " 3_6?");'), (1650, 2, u'-    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");'), (1651, 2, u'-    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,'), (1770, 2, u'-\tAssert((ush)dist < (ush)MAX_DIST &&'), (1852, 2, u'-\t    Assert (code < D_CODES, "bad d_code");')]
===========================================
Class:   class CAutoBuffer { 
Class: class CUrlOptions   : public map<CStdString, CStdString> { 
Class: class NPT_XbmcFileStream { 
Class: class NPT_XbmcFileInputStream : public NPT_InputStream,                                 private NPT_XbmcFileStream  { 
Class: class NPT_XbmcFileOutputStream : public NPT_OutputStream,                                  private NPT_XbmcFileStream { 
Class: class NPT_XbmcFile: public NPT_FileInterface { 
Class:class CProtocolFinder { class CProtocolFinder 
Class:                                                                                                       class CFreeTypeLibrary { 
Class: class CAutoBuffer { 
Class:  class CAutoTexBuffer { 
Class:    class MidiTimestamp { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(827, 2, u'-    Assert(strm->avail_out > 0, "bug2");'), (1061, 2, u'-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1072, 2, u'-    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1075, 2, u'-        Assert(cur_match < s->strstart, "no future");'), (1102, 2, u'-        Assert(scan[2] == match[2], "scan[2]?");'), (1113, 2, u'-        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1133, 2, u'-        Assert(*scan == *match, "match[2]?");'), (1145, 2, u'-        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1187, 2, u'-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1189, 2, u'-    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1191, 2, u'-    Assert(cur_match < s->strstart, "no future");'), (1206, 2, u'-    Assert(*scan == *match, "match[2]?");'), (1218, 2, u'-    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1340, 2, u'-        Assert(more >= 2, "more < 2");'), (1409, 2, u'-            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (1417, 2, u'-        Assert(s->block_start >= 0L, "block gone");'), (1666, 2, u'-    Assert (flush != Z_NO_FLUSH, "no flush?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 2, u'-#define MoreAssert(x) (true)'), (64, 2, u'-#define MoreAssertQ(x)'), (172, 2, u'-\tMoreAssertQ(fragToFix != nil);'), (173, 2, u'-\tMoreAssertQ(fragToFix->locator.fileSpec != nil);'), (174, 2, u'-\tMoreAssertQ(fragToFix->connID != nil);'), (175, 2, u'-\tMoreAssertQ(fragToFix->loaderSection == nil);'), (176, 2, u'-\tMoreAssertQ(fragToFix->sectionHeaders == nil);'), (177, 2, u'-\tMoreAssertQ(fragToFix->fileRef == 0);'), (271, 2, u'-\tMoreAssertQ(inOpStart != nil);'), (272, 2, u'-\tMoreAssertQ(outCount  != nil);'), (295, 2, u'-\tMoreAssertQ(packedData != nil);'), (296, 2, u'-\tMoreAssertQ(unpackedData != nil);'), (297, 2, u'-\tMoreAssertQ(unpackedSize >= packedSize);'), (303, 2, u'-\tMoreAssertQ( packedSize   == GetPtrSize( (Ptr) packedData  ) );'), (304, 2, u'-\tMoreAssertQ( unpackedSize == GetPtrSize( (Ptr) unpackedData) );'), (310, 2, u'-\t\tMoreAssertQ(unpackCursor < &unpackedData[unpackedSize]);'), (545, 2, u'-\t\tMoreAssertQ( initSection >= 0 );\t\t// Negative indexes are pseudo-sections which are just not allowed!'), (546, 2, u'-\t\tMoreAssertQ( initSection < fragToFix->containerHeader.sectionCount );'), (590, 2, u'-\t\t\tMoreAssertQ(fragToFix->sectionHeaders[initSection].sectionKind == kPEFUnpackedDataSection);'), (614, 2, u'-\t\tMoreAssertQ( MemError() == noErr );'), (618, 2, u'-\t\tMoreAssertQ( MemError() == noErr );'), (635, 2, u'-\tMoreAssertQ(fragToFix != nil);'), (636, 2, u'-\tMoreAssertQ(fragToFix->containerHeader.tag1 == kPEFTag1);'), (663, 2, u'-\tMoreAssertQ(loaderSection != nil);'), (664, 2, u'-\tMoreAssertQ(libraryName != nil);'), (665, 2, u'-\tMoreAssertQ(importLibrary != nil);'), (725, 2, u'-\tMoreAssertQ(lookup != nil);'), (726, 2, u'-\tMoreAssertQ(loaderSection != nil);'), (727, 2, u'-\tMoreAssertQ(symbolIndex < loaderSection->totalImportedSymbolCount);'), (728, 2, u'-\tMoreAssertQ(symbolValue != nil);'), (802, 2, u'-\tMoreAssertQ(fragToFix != nil);'), (803, 2, u'-\tMoreAssertQ(state != nil);'), (821, 2, u'-\tMoreAssertQ(relocHeader->reservedA == 0);\t\t// PEF spec says it must be; we check to try to catch bugs in calculation of relocHeader'), (892, 2, u'-\tMoreAssertQ(fragToFix != nil);'), (893, 2, u'-\tMoreAssertQ(fragToFix->containerHeader.tag1 == kPEFTag1);'), (894, 2, u'-\tMoreAssertQ(fragToFix->sectionHeaders != nil);'), (895, 2, u'-\tMoreAssertQ(fragToFix->loaderSection != nil);'), (896, 2, u'-\tMoreAssertQ(fragToFix->section0Base != nil);\t// Technically, having a nil for these two is not a problem, ...'), (897, 2, u'-\tMoreAssertQ(fragToFix->section1Base != nil);\t// but in practise it a wildly deviant case and we should know about it.'), (898, 2, u'-\tMoreAssertQ(importLibrary != nil);'), (899, 2, u'-\tMoreAssertQ(lookup != nil);'), (915, 2, u'-\tMoreAssertQ(fragToFix->loaderSection->relocSectionCount <= 0x0FFFF);'), (970, 2, u'-\t\t\tMoreAssertQ( state.currentReloc < totalRelocs );'), (1054, 2, u'-\t\t\t\t\t\tMoreAssertQ(state.sectionC != nil);'), (1063, 2, u'-\t\t\t\t\t\tMoreAssertQ(state.sectionD != nil);'), (1147, 2, u'-\t\t\t\t\tMoreAssertQ(false);'), (1176, 2, u'-\tMoreAssertQ(fragToFixLocator != nil);'), (1177, 2, u'-\tMoreAssertQ(fragToFixConnID != nil);'), (1178, 2, u'-\tMoreAssertQ(fragToFixInitRoutine != nil);'), (1179, 2, u'-\tMoreAssertQ(weakLinkedLibraryName != nil);'), (1180, 2, u'-\tMoreAssertQ(lookup != nil);'), (1239, 2, u'-\t\t\tMoreAssertQ(junk == noErr);'), (1243, 2, u'-\t\t\tMoreAssertQ(MemError() == noErr);'), (1247, 2, u'-\t\t\tMoreAssertQ(MemError() == noErr);'), (1262, 2, u'-\tMoreAssertQ(symName != nil);'), (1263, 2, u'-\tMoreAssertQ(symAddr != nil);'), (1264, 2, u'-\tMoreAssertQ(refCon  != nil);'), (1276, 2, u'-\t\t\tMoreAssertQ(false);'), (1291, 2, u'-\tMoreAssertQ(connIDToImport != nil);'), (1305, 2, u'-\tMoreAssertQ(symName != nil);'), (1306, 2, u'-\tMoreAssertQ(symAddr != nil);'), (1307, 2, u'-\tMoreAssertQ(refCon  != nil);'), (1328, 2, u'-\t\tMoreAssertQ(false);'), (1357, 2, u'-\tMoreAssertQ(bundleToImport != nil);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(100, 2, u'-\t\t\tassert(0x88 <= c && c <= 0xfe);'), (101, 2, u'-\t\t\tassert(0x40 <= IN2 && IN2 <= 0xfe);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 2, u'-\t\tassert(modNameSize >= 0); /* else cast to size_t is wrong */')]
===========================================
Class: class NPT_HttpTcpConnector : public NPT_HttpClient::Connector { 
Class: class NPT_HttpStaticProxySelector : public NPT_HttpProxySelector { 
Class: class NPT_LogFileHandler : public NPT_LogHandler { class NPT_LogFileHandler : public NPT_LogHandler 
Class: class NPT_LogTcpHandler : public NPT_LogHandler { class NPT_LogTcpHandler : public NPT_LogHandler 
Class: class NPT_LogUdpHandler : public NPT_LogHandler { class NPT_LogUdpHandler : public NPT_LogHandler 
Class: class NPT_LogNullHandler : public NPT_LogHandler { class NPT_LogNullHandler : public NPT_LogHandler 
Class: class NPT_TlsContextImpl { class NPT_TlsContextImpl 
Class:  class NPT_TlsSessionImpl { class NPT_TlsSessionImpl 
Class: class NPT_TlsInputStream : public NPT_InputStream { class NPT_TlsInputStream : public NPT_InputStream 
Class: class NPT_TlsOutputStream : public NPT_OutputStream { class NPT_TlsOutputStream : public NPT_OutputStream 
Class: class NPT_XmlAttributeFinder { 
Class: class NPT_XmlAttributeFinderWithPrefix { 
Class: class NPT_XmlTagFinder { 
Class: class NPT_XmlTextFinder { 
Class: class NPT_XmlNamespaceCollapser { 
Class: class NPT_XmlAccumulator { class NPT_XmlAccumulator 
Class: class NPT_XmlProcessor { class NPT_XmlProcessor 
Class: class NPT_XmlAttributeWriter { 
Class: class NPT_XmlNodeWriter { 
Class: class NPT_XmlNodeCanonicalWriter { 
Class: class NPT_ZipInflateState { class NPT_ZipInflateState 
Class: class NPT_ZipDeflateState { class NPT_ZipDeflateState 
Class: class NPT_BsdSocketFd { 
Class: class NPT_BsdSocketStream { 
Class: class NPT_BsdSocketInputStream : public NPT_InputStream,                                  private NPT_BsdSocketStream { 
Class: class NPT_BsdSocket : public NPT_SocketInterface { 
Class: class NPT_BsdUdpSocket : public    NPT_UdpSocketInterface,                          protected NPT_BsdSocket  { 
Class: class NPT_BsdUdpMulticastSocket : public    NPT_UdpMulticastSocketInterface,                                   protected NPT_BsdUdpSocket  { 
Class: class NPT_BsdTcpClientSocket : protected NPT_BsdSocket { 
Class: class NPT_BsdTcpServerSocket : public    NPT_TcpServerSocketInterface,                                protected NPT_BsdSocket  { 
Class: class NPT_NullSystem : public NPT_SystemInterface { 
Class: class NPT_PSPDirectory : public NPT_DirectoryInterface { 
Class: class NPT_PSPFileStream { 
Class: class NPT_PSPFileInputStream : public NPT_InputStream,                                private NPT_PSPFileStream  { 
Class: class NPT_PSPFileOutputStream : public NPT_OutputStream,                                 private NPT_PSPFileStream { 
Class: class NPT_PSPFile: public NPT_FileInterface { 
Class: class NPT_PSPSharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_PSPAtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_PSPThread : public NPT_ThreadInterface { 
Class: class NPT_PosixSharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_PosixAtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_PosixThread : public NPT_ThreadInterface { 
Class: class NPT_StdcFileWrapper { 
Class: class NPT_StdcFileStream { 
Class: class NPT_StdcFileInputStream : public NPT_InputStream,                                 private NPT_StdcFileStream  { 
Class: class NPT_StdcFileOutputStream : public NPT_OutputStream,                                  private NPT_StdcFileStream { 
Class: class NPT_StdcFile: public NPT_FileInterface { 
Class: class NPT_Win32SerialPortStream { 
Class: class NPT_Win32SerialPortInputStream : public NPT_InputStream,                                        private NPT_Win32SerialPortStream  { 
Class: class NPT_Win32SerialPortOutputStream : public NPT_OutputStream,                                         private NPT_Win32SerialPortStream { 
Class: class NPT_Win32SerialPort: public NPT_SerialPortInterface { 
Class: class NPT_Win32SharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_Win32AtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_Win32Thread : public NPT_ThreadInterface { 
Class: class A { class A 
Class: class KillHandler : public NPT_HttpRequestHandler { 
Class: class TestHandler1 : public NPT_HttpRequestHandler { 
Class: class TestHandler2 : public NPT_HttpRequestHandler { 
Class: class ChunkedHandler : public NPT_HttpRequestHandler { 
Class: class A { class A 
Class:class Test1 { class Test1 
Class: class A { class A 
Class: class FooServerBarCmd1Message : public FooServerMessage { 
Class: class FooServerBarCmd2Message : public FooServerMessage { 
Class: class FooServerBarCmd3Message : public FooServerMessage { 
Class: class FooServerBarCmd4Message : public NPT_Message { 
Class: class FooClientMessageHandler { 
Class: class FooClientBarNotification1Message : public FooClientMessage { 
Class: class FooServer : public NPT_Thread,                   public NPT_MessageReceiver,                   public NPT_MessageHandler,                   public FooServerMessageHandler { 
Class: class FooClient : public NPT_MessageReceiver,                   public NPT_MessageHandler,                   public FooClientMessageHandler { 
Class:class TestServerTestCommandMessage : public TestServerMessage { 
Class:class TestClientMessageHandler { 
Class:class TestClientReplyMessage : public TestClientMessage { 
Class:class TestServer : public NPT_Thread,                    public NPT_MessageReceiver,                    public NPT_MessageHandler,                    public TestServerMessageHandler { 
Class:class TestClient : public NPT_MessageReceiver,                    public NPT_MessageHandler,                    public TestClientMessageHandler { 
Class:  class BarA { 
Class: class Item { 
Class: class WriterThread : public NPT_Thread { 
Class: class ReaderThread : public NPT_Thread { 
Class: class Thread1 : public NPT_Thread { 
Class: class Thread2 : public NPT_Runnable { 
Class: class Thread3 : public NPT_Thread { 
Class: class Thread4 : public NPT_Runnable { 
Class: class T1 : public NPT_Runnable { 
Class: class CBR : public NPT_Runnable, public NPT_ThreadCallbackReceiver { 
Class: class CBW : public NPT_Runnable { 
Class: class CBR2 : public NPT_Runnable, public NPT_ThreadCallbackReceiver { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(827, 2, u'-    Assert(strm->avail_out > 0, "bug2");'), (1061, 2, u'-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1072, 2, u'-    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1075, 2, u'-        Assert(cur_match < s->strstart, "no future");'), (1102, 2, u'-        Assert(scan[2] == match[2], "scan[2]?");'), (1113, 2, u'-        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1133, 2, u'-        Assert(*scan == *match, "match[2]?");'), (1145, 2, u'-        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1187, 2, u'-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1189, 2, u'-    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1191, 2, u'-    Assert(cur_match < s->strstart, "no future");'), (1206, 2, u'-    Assert(*scan == *match, "match[2]?");'), (1218, 2, u'-    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1340, 2, u'-        Assert(more >= 2, "more < 2");'), (1409, 2, u'-            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (1417, 2, u'-        Assert(s->block_start >= 0L, "block gone");'), (1666, 2, u'-    Assert (flush != Z_NO_FLUSH, "no flush?");')]
===========================================
Class: class FrameWriter : public NPT_Thread { 
Class: class PLT_CtrlPointListenerOnDeviceAddedIterator { 
Class: class PLT_CtrlPointListenerOnDeviceRemovedIterator { 
Class: class PLT_CtrlPointListenerOnActionResponseIterator { 
Class: class PLT_CtrlPointListenerOnEventNotifyIterator { 
Class: class PLT_AddGetSCPDRequestIterator { 
Class: class PLT_EventSubscriberRemoverIterator { 
Class: class PLT_ServiceReadyIterator { 
Class: class PLT_DeviceReadyIterator { 
Class: template <class T> class PLT_GetDescriptionIterator { 
Class: class NPT_HttpHeaderFinder { 
Class: class NPT_HttpHeaderPrinter { 
Class: class NPT_HttpHeaderLogger { 
Class: class PLT_UPnP_CtrlPointStopIterator { 
Class: class PLT_UPnP_DeviceStartIterator { 
Class: class PLT_UPnP_DeviceStopIterator { 
Class: class PLT_HttpCustomRequestHandler : public NPT_HttpRequestHandler { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-# ifdef HAVE_ASSERT_H'), (32, 2, u'-#  include <assert.h>'), (45, 2, u'-  assert(value);'), (46, 2, u'-  assert(bytes == 8 || bytes == 4 || bytes == 3);'), (67, 2, u'-  assert(bytes == 4 || bytes == 5);'), (85, 2, u'-  assert(bytes >= 1 && bytes <= 4);'), (180, 2, u'-  assert(length <= 30);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(827, 2, u'-    Assert(strm->avail_out > 0, "bug2");'), (1061, 2, u'-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1072, 2, u'-    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1075, 2, u'-        Assert(cur_match < s->strstart, "no future");'), (1102, 2, u'-        Assert(scan[2] == match[2], "scan[2]?");'), (1113, 2, u'-        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1133, 2, u'-        Assert(*scan == *match, "match[2]?");'), (1145, 2, u'-        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1187, 2, u'-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1189, 2, u'-    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1191, 2, u'-    Assert(cur_match < s->strstart, "no future");'), (1206, 2, u'-    Assert(*scan == *match, "match[2]?");'), (1218, 2, u'-    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1340, 2, u'-        Assert(more >= 2, "more < 2");'), (1409, 2, u'-            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (1417, 2, u'-        Assert(s->block_start >= 0L, "block gone");'), (1666, 2, u'-    Assert (flush != Z_NO_FLUSH, "no flush?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1832, 2, u'-#undef g_assert_warning'), (1833, 2, u'-extern __typeof (g_assert_warning) g_assert_warning __attribute((alias("IA__g_assert_warning"), visibility("default")));'), (3159, 2, u'-#undef g_assertion_message'), (3160, 2, u'-extern __typeof (g_assertion_message) g_assertion_message __attribute((alias("IA__g_assertion_message"), visibility("default")));'), (3162, 2, u'-#undef g_assertion_message_cmpnum'), (3163, 2, u'-extern __typeof (g_assertion_message_cmpnum) g_assertion_message_cmpnum __attribute((alias("IA__g_assertion_message_cmpnum"), visibility("default")));'), (3165, 2, u'-#undef g_assertion_message_cmpstr'), (3166, 2, u'-extern __typeof (g_assertion_message_cmpstr) g_assertion_message_cmpstr __attribute((alias("IA__g_assertion_message_cmpstr"), visibility("default")));'), (3168, 2, u'-#undef g_assertion_message_expr'), (3169, 2, u'-extern __typeof (g_assertion_message_expr) g_assertion_message_expr __attribute((alias("IA__g_assertion_message_expr"), visibility("default")));'), (3171, 2, u'-#undef g_assertion_message_error'), (3172, 2, u'-extern __typeof (g_assertion_message_error) g_assertion_message_error __attribute((alias("IA__g_assertion_message_error"), visibility("default")));'), (3270, 2, u'-#undef g_test_trap_assertions'), (3271, 2, u'-extern __typeof (g_test_trap_assertions) g_test_trap_assertions __attribute((alias("IA__g_test_trap_assertions"), visibility("default")));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(176, 2, u'-  g_assert (__argc >= ARG_COUNT);'), (185, 2, u'-  g_assert (argc == __argc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(91, 2, u'-\tassert (channel_count <= MAX_CHANNELS) ;'), (163, 2, u'-\tassert (channel_count <= MAX_CHANNELS) ;'), (291, 2, u'-\tassert (channel_count <= MAX_CHANNELS) ;')]
===========================================
Class:  class Error : public std::exception { 
Class:  class NonCopyable { 
Class:  class Mem : NonCopyable { 
Class:  class File : NonCopyable { 
Class:  class PngReadStruct : NonCopyable { 
Class:  class PngWriteStruct : NonCopyable { 
Class:  class PngRows : NonCopyable { 
Class:  class Image { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(465, 2, u'-SQLITE_PRIVATE   int sqlite3Assert(void);'), (466, 2, u'-# define ALWAYS(X)      ((X)?1:sqlite3Assert())'), (467, 2, u'-# define NEVER(X)       ((X)?sqlite3Assert():0)'), (10359, 2, u'-  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (10369, 2, u'-  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (10381, 2, u'-  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (11066, 2, u'-      assert( n>=1 );'), (11659, 2, u'-  assert( rc==SQLITE_OK || pFile->pMethods==0 );'), (11728, 2, u'-  assert( pFile );'), (11769, 2, u'-  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) );'), (11806, 2, u'-  assert(vfsList);'), (12021, 2, u'-  assert( nByte>0 );'), (12041, 2, u'-  assert( pPrior!=0 );'), (12058, 2, u'-  assert( pPrior!=0 && nByte>0 );'), (12269, 2, u'-    assert( mem.nCurrent[i]>=0 );'), (12287, 2, u'-  assert( p->iForeGuard==(int)FOREGUARD );'), (12291, 2, u'-  assert( pInt[nReserve/sizeof(int)]==(int)REARGUARD );'), (12296, 2, u'-  while( nReserve-- > p->iSize ) assert( pU8[nReserve]==0x65 );'), (12317, 2, u'-  assert( (sizeof(struct MemBlockHdr)&7) == 0 );'), (12353, 2, u'-  assert( mem.disallow==0 );'), (12377, 2, u'-      assert(pBt[0]);'), (12405, 2, u'-  assert( sqlite3GlobalConfig.bMemstat || mem.mutex!=0 );'), (12411, 2, u'-    assert( pHdr->pPrev->pNext==pHdr );'), (12414, 2, u'-    assert( mem.pFirst==pHdr );'), (12418, 2, u'-    assert( pHdr->pNext->pPrev==pHdr );'), (12421, 2, u'-    assert( mem.pLast==pHdr );'), (12445, 2, u'-  assert( mem.disallow==0 );'), (12724, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12743, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12744, 2, u'-  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (12745, 2, u'-  assert( i>=1 );'), (12747, 2, u'-  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (12748, 2, u'-  assert( size>=2 );'), (12762, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12777, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12778, 2, u'-  assert( i>=1 );'), (12779, 2, u'-  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (12781, 2, u'-  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (12782, 2, u'-  assert( size>=2 );'), (12812, 2, u'-    assert( sqlite3_mutex_held(mem3.mutex) );'), (12828, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12829, 2, u'-  assert( i>=1 );'), (12830, 2, u'-  assert( mem3.aPool[i-1].u.hdr.size4x/4==nBlock );'), (12831, 2, u'-  assert( mem3.aPool[i+nBlock-1].u.hdr.prevSize==nBlock );'), (12845, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12846, 2, u'-  assert( mem3.szMaster>=nBlock );'), (12858, 2, u'-    assert( newi > mem3.iMaster+1 );'), (12892, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12896, 2, u'-    assert( (size&1)==0 );'), (12899, 2, u'-      assert( i > mem3.aPool[i-1].u.hdr.prevSize );'), (12933, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (12934, 2, u'-  assert( sizeof(Mem3Block)==8 );'), (12940, 2, u'-  assert( nBlock>=2 );'), (13014, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (13015, 2, u'-  assert( p>mem3.aPool && p<&mem3.aPool[mem3.nPool] );'), (13017, 2, u'-  assert( (mem3.aPool[i-1].u.hdr.size4x&1)==1 );'), (13019, 2, u'-  assert( i+size<=mem3.nPool+1 );'), (13055, 2, u'-  assert( (pBlock[-1].u.hdr.size4x&1)!=0 );'), (13075, 2, u'-  assert( nBytes>0 );          /* malloc.c filters out 0 byte requests */'), (13086, 2, u'-  assert( pPrior );'), (13133, 2, u'-  assert( sizeof(Mem3Block)==8 );'), (13183, 2, u'-      assert( 0 );'), (13188, 2, u'-      assert( 0 );'), (13193, 2, u'-      assert( 0 );'), (13376, 2, u'-  assert( i>=0 && i<mem5.nBlock );'), (13377, 2, u'-  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (13378, 2, u'-  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (13398, 2, u'-  assert( sqlite3_mutex_held(mem5.mutex) );'), (13399, 2, u'-  assert( i>=0 && i<mem5.nBlock );'), (13400, 2, u'-  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (13401, 2, u'-  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (13406, 2, u'-    assert( x<mem5.nBlock );'), (13436, 2, u'-    assert( i>=0 && i<mem5.nBlock );'), (13450, 2, u'-  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (13452, 2, u'-  assert( iFirst>=0 );'), (13523, 2, u'-  assert( iBlock>=0 && iBlock<mem5.nBlock );'), (13524, 2, u'-  assert( ((u8 *)pOld-mem5.zPool)%mem5.nAtom==0 );'), (13525, 2, u'-  assert( (mem5.aCtrl[iBlock] & CTRL_FREE)==0 );'), (13529, 2, u'-  assert( iBlock+size-1<(u32)mem5.nBlock );'), (13533, 2, u'-  assert( mem5.currentCount>0 );'), (13534, 2, u'-  assert( mem5.currentOut>=(size*mem5.nAtom) );'), (13537, 2, u'-  assert( mem5.currentOut>0 || mem5.currentCount==0 );'), (13538, 2, u'-  assert( mem5.currentCount>0 || mem5.currentOut==0 );'), (13548, 2, u'-    assert( iBuddy>=0 );'), (13584, 2, u'-assert(0);'), (13672, 2, u'-    assert((iOffset+nAlloc)>mem5.nBlock);'), (13798, 2, u'-        assert(pMaster);'), (13800, 2, u'-        assert( sqlite3GlobalConfig.mutex.xMutexAlloc==0'), (14021, 2, u'-      assert( id-2 >= 0 );'), (14022, 2, u'-      assert( id-2 < (int)(sizeof(aStatic)/sizeof(aStatic[0])) );'), (14035, 2, u'-  assert( p->cnt==0 );'), (14036, 2, u'-  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14052, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(p) );'), (14056, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(p) );'), (14068, 2, u'-  assert( debugMutexHeld(p) );'), (14070, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(p) );'), (14231, 2, u'-      assert( iType-2 >= 0 );'), (14232, 2, u'-      assert( iType-2 < sizeof(staticMutexes)/sizeof(staticMutexes[0]) );'), (14248, 2, u'-  assert( p->nRef==0 );'), (14249, 2, u'-  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14270, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || os2MutexNotheld(p) );'), (14282, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || os2MutexNotheld(p) );'), (14306, 2, u'-  assert( p->nRef>0 );'), (14308, 2, u'-  assert( p->owner==tid );'), (14310, 2, u'-  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (14525, 2, u'-      assert( iType-2 >= 0 );'), (14526, 2, u'-      assert( iType-2 < ArraySize(staticMutexes) );'), (14542, 2, u'-  assert( p->nRef==0 );'), (14543, 2, u'-  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14560, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (14579, 2, u'-      assert( p->nRef==0 );'), (14600, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (14619, 2, u'-      assert( p->nRef==0 );'), (14654, 2, u'-  assert( pthreadMutexHeld(p) );'), (14656, 2, u'-  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (14851, 2, u'-      assert( iType-2 >= 0 );'), (14852, 2, u'-      assert( iType-2 < sizeof(staticMutexes)/sizeof(staticMutexes[0]) );'), (14868, 2, u'-  assert( p );'), (14869, 2, u'-  assert( p->nRef==0 );'), (14870, 2, u'-  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14887, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld(p) );'), (14894, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld(p) );'), (14925, 2, u'-  assert( p->nRef>0 );'), (14926, 2, u'-  assert( p->owner==GetCurrentThreadId() );'), (14928, 2, u'-  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (15194, 2, u'-  assert( sqlite3_mutex_held(mem0.mutex) );'), (15275, 2, u'-  assert( n>0 );'), (15282, 2, u'-  assert( scratchAllocOut==0 );'), (15300, 2, u'-      assert(  (((u8*)p - (u8*)0) & 7)==0 );'), (15332, 2, u'-    assert( scratchAllocOut==1 );'), (15353, 2, u'-      assert( i>=0 && i<sqlite3GlobalConfig.nScratch );'), (15355, 2, u'-      assert( mem0.nScratchFree<(u32)sqlite3GlobalConfig.nScratch );'), (15382, 2, u'-  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (15412, 2, u'-  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (15521, 2, u'-  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (15556, 2, u'-  assert( db!=0 );'), (15557, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (15608, 2, u'-  assert( (n&0x7fffffff)==n );'), (15620, 2, u'-  assert( (n&0x7fffffff)==n );'), (15664, 2, u'-  assert( !db || sqlite3_mutex_held(db->mutex) );'), (16219, 2, u'-          assert( precision>0 );'), (16229, 2, u'-          assert( bufpt>buf );'), (16358, 2, u'-        assert( k>=0 && k<pSrc->nSrc );'), (16368, 2, u'-        assert( xtype==etINVALID );'), (16404, 2, u'-  assert( z!=0 || N==0 );'), (16502, 2, u'-  assert( db!=0 );'), (17389, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (17390, 2, u'-  assert( pMem->flags&MEM_Str );'), (17391, 2, u'-  assert( pMem->enc!=desiredEnc );'), (17392, 2, u'-  assert( pMem->enc!=0 );'), (17393, 2, u'-  assert( pMem->n>=0 );'), (17412, 2, u'-      assert( rc==SQLITE_NOMEM );'), (17468, 2, u'-      assert( desiredEnc==SQLITE_UTF16BE );'), (17479, 2, u'-    assert( desiredEnc==SQLITE_UTF8 );'), (17496, 2, u'-  assert( (pMem->n+(desiredEnc==SQLITE_UTF8?1:2))<=len );'), (17529, 2, u'-  assert( pMem->n>=0 );'), (17572, 2, u'-  assert( z<=zTerm );'), (17627, 2, u'-  assert( (m.flags & MEM_Term)!=0 || db->mallocFailed );'), (17628, 2, u'-  assert( (m.flags & MEM_Str)!=0 || db->mallocFailed );'), (17681, 2, u'-    assert( n>0 && n<=4 );'), (17688, 2, u'-    assert( c==t );'), (17689, 2, u'-    assert( (z-zBuf)==n );'), (17696, 2, u'-    assert( n>0 && n<=4 );'), (17700, 2, u'-    assert( c==i );'), (17701, 2, u'-    assert( (z-zBuf)==n );'), (17708, 2, u'-    assert( n>0 && n<=4 );'), (17712, 2, u'-    assert( c==i );'), (17713, 2, u'-    assert( (z-zBuf)==n );'), (17764, 2, u'-SQLITE_PRIVATE int sqlite3Assert(void){'), (17766, 2, u'-  assert( ALWAYS_was_false_or_NEVER_was_true );      /* Always fails */'), (18275, 2, u'-  assert( n<=9 );'), (18544, 2, u'-    assert( n>5 && n<=9 );'), (18586, 2, u"-  assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );"), (18650, 2, u'-    assert( sqlite3_mutex_held(db->mutex) );'), (18669, 2, u'-    assert( sqlite3_mutex_held(db->mutex) );'), (18738, 2, u'-  assert( pNew!=0 );'), (18753, 2, u'-  assert( pH!=0 );'), (18908, 2, u'-    assert( pH->first==0 );'), (18909, 2, u'-    assert( pH->count==0 );'), (18960, 2, u'-  assert( pH!=0 );'), (18974, 2, u'-        assert(nKey==elem->nKey);'), (19008, 2, u'-  assert( pH->htsize>0 );'), (19510, 2, u'-  assert( id!=0 );'), (19542, 2, u'-  assert( id!=0 );'), (19549, 2, u'-  assert( amt>0 );'), (19612, 2, u'-  assert( id!=0 );'), (19695, 2, u'-  assert( pFile!=0 );'), (19709, 2, u'-  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (19710, 2, u'-  assert( locktype!=PENDING_LOCK );'), (19711, 2, u'-  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (19737, 2, u'-    assert( pFile->locktype==NO_LOCK );'), (19748, 2, u'-    assert( pFile->locktype==SHARED_LOCK );'), (19771, 2, u'-    assert( pFile->locktype>=SHARED_LOCK );'), (19824, 2, u'-  assert( pFile!=0 );'), (19876, 2, u'-  assert( pFile!=0 );'), (19877, 2, u'-  assert( locktype<=SHARED_LOCK );'), (20304, 2, u'-      assert( !"Invalid flags argument" );'), (21067, 2, u'-    assert( 0 );'), (21069, 2, u'-  assert( p->l_whence==SEEK_SET );'), (21086, 2, u'-      assert( 0 );'), (21249, 2, u"-  assert( zAbsoluteName[0]=='/' );"), (21288, 2, u'-  assert( pId->nRef>0 );'), (21293, 2, u'-    assert( *pp==pId );'), (21603, 2, u'-        assert( pLock->pPrev->pNext==pLock );'), (21606, 2, u'-        assert( lockList==pLock );'), (21610, 2, u'-        assert( pLock->pNext->pPrev==pLock );'), (21626, 2, u'-        assert( pOpen->pPrev->pNext==pOpen );'), (21629, 2, u'-        assert( openList==pOpen );'), (21633, 2, u'-        assert( pOpen->pNext->pPrev==pOpen );'), (21834, 2, u'-  assert( pFile );'), (21937, 2, u'-  assert( pFile );'), (21954, 2, u'-  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (21955, 2, u'-  assert( locktype!=PENDING_LOCK );'), (21956, 2, u'-  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (21987, 2, u'-    assert( locktype==SHARED_LOCK );'), (21988, 2, u'-    assert( pFile->locktype==0 );'), (21989, 2, u'-    assert( pLock->cnt>0 );'), (22026, 2, u'-    assert( pLock->cnt==0 );'), (22027, 2, u'-    assert( pLock->locktype==0 );'), (22069, 2, u'-    assert( 0!=pFile->locktype );'), (22080, 2, u'-        assert(0);'), (22139, 2, u'-  assert( pFile );'), (22143, 2, u'-  assert( locktype<=SHARED_LOCK );'), (22153, 2, u'-  assert( pLock->cnt!=0 );'), (22155, 2, u'-    assert( pLock->locktype==pFile->locktype );'), (22169, 2, u'-    assert( pFile->inNormalWrite==0'), (22193, 2, u'-    lock.l_len = 2L;  assert( PENDING_BYTE+1==RESERVED_BYTE );'), (22240, 2, u'-    assert( pOpen->nLock>=0 );'), (22441, 2, u'-  assert( pFile );'), (22542, 2, u'-  assert( pFile );'), (22545, 2, u'-  assert( locktype<=SHARED_LOCK );'), (22561, 2, u'-  assert( locktype==NO_LOCK );'), (22622, 2, u'-  assert( pFile );'), (22701, 2, u'-  assert( pFile );'), (22744, 2, u'-  assert( pFile );'), (22747, 2, u'-  assert( locktype<=SHARED_LOCK );'), (22821, 2, u'-  assert( pFile );'), (22920, 2, u'-  assert( pFile );'), (22921, 2, u'-  assert( pSem );'), (22924, 2, u'-  assert( locktype<=SHARED_LOCK );'), (22957, 2, u'-    assert( pFile );'), (23066, 2, u'-  assert( pFile );'), (23127, 2, u'-  assert( pFile );'), (23143, 2, u'-  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (23144, 2, u'-  assert( locktype!=PENDING_LOCK );'), (23145, 2, u'-  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (23211, 2, u'-    assert( 0!=pFile->locktype );'), (23271, 2, u'-  assert( pFile );'), (23275, 2, u'-  assert( locktype<=SHARED_LOCK );'), (23309, 2, u'-      assert( pOpen->nLock>=0 );'), (23445, 2, u'-  assert( id );'), (23448, 2, u'-  assert( ((unixFile*)id)->isLockable==0'), (23514, 2, u'-  assert( id );'), (23515, 2, u'-  assert( amt>0 );'), (23518, 2, u'-  assert( ((unixFile*)id)->isLockable==0'), (23705, 2, u'-  assert((flags&0x0F)==SQLITE_SYNC_NORMAL'), (23714, 2, u'-  assert( pFile );'), (23758, 2, u'-  assert( id );'), (23775, 2, u'-  assert( id );'), (24146, 2, u'-  assert( pNew->pLock==NULL );'), (24147, 2, u'-  assert( pNew->pOpen==NULL );'), (24433, 2, u'-  assert((isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly));'), (24434, 2, u'-  assert(isCreate==0 || isReadWrite);'), (24435, 2, u'-  assert(isExclusive==0 || isCreate);'), (24436, 2, u'-  assert(isDelete==0 || isCreate);'), (24441, 2, u'-  assert( eType!=SQLITE_OPEN_MAIN_DB || !isDelete );'), (24442, 2, u'-  assert( eType!=SQLITE_OPEN_MAIN_JOURNAL || !isDelete );'), (24443, 2, u'-  assert( eType!=SQLITE_OPEN_MASTER_JOURNAL || !isDelete );'), (24446, 2, u'-  assert( eType==SQLITE_OPEN_MAIN_DB      || eType==SQLITE_OPEN_TEMP_DB'), (24455, 2, u'-    assert(isDelete && !isOpenDirectory);'), (24502, 2, u'-  assert( fd>=0 );'), (24617, 2, u'-      assert(!"Invalid flags argument");'), (24647, 2, u'-  assert( pVfs->mxPathname==MAX_PATHNAME );'), (24732, 2, u'-  assert((size_t)nBuf>=(sizeof(time_t)+sizeof(int)));'), (24757, 2, u'-      assert( sizeof(t)+sizeof(pid)<=(size_t)nBuf );'), (25459, 2, u'-  assert( (int)strlen(conchPath) == len+7 );'), (25509, 2, u'-    assert( (int)strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (25520, 2, u'-    assert( strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (25645, 2, u'-      assert( 0 );  /* The call assures that only valid opcodes are sent */'), (26735, 2, u'-  assert( id!=0 );'), (26784, 2, u'-  assert( id!=0 );'), (26822, 2, u'-  assert( id!=0 );'), (26831, 2, u'-  assert( amt>0 );'), (26857, 2, u'-  assert( id!=0 );'), (26889, 2, u'-  assert( id!=0 );'), (26926, 2, u'-  assert( id!=0 );'), (27030, 2, u'-  assert( id!=0 );'), (27044, 2, u'-  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (27045, 2, u'-  assert( locktype!=PENDING_LOCK );'), (27046, 2, u'-  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (27074, 2, u'-    assert( pFile->locktype==NO_LOCK );'), (27086, 2, u'-    assert( pFile->locktype==SHARED_LOCK );'), (27105, 2, u'-    assert( pFile->locktype>=SHARED_LOCK );'), (27149, 2, u'-  assert( id!=0 );'), (27180, 2, u'-  assert( pFile!=0 );'), (27181, 2, u'-  assert( locktype<=SHARED_LOCK );'), (27234, 2, u'-  assert( id!=0 );'), (27402, 2, u'-  assert( id!=0 );'), (27612, 2, u'-      assert(!"Invalid flags argument");'), (28108, 2, u'-  assert( sizeof(*p)==BITVEC_SZ );'), (28160, 2, u'-  assert( p!=0 );'), (28161, 2, u'-  assert( i>0 );'), (28162, 2, u'-  assert( i<=p->iSize );'), (28222, 2, u'-  assert( p!=0 );'), (28223, 2, u'-  assert( i>0 );'), (28429, 2, u'-#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (28430, 2, u'-# define expensive_assert(X)  assert(X)'), (28432, 2, u'-# define expensive_assert(X)'), (28437, 2, u'-#if !defined(NDEBUG) && defined(SQLITE_ENABLE_EXPENSIVE_ASSERT)'), (28448, 2, u'-    assert( p->nRef || (p->flags&PGHDR_NEED_SYNC) );'), (28460, 2, u'-  assert( pPage->pDirtyNext || pPage==p->pDirtyTail );'), (28461, 2, u'-  assert( pPage->pDirtyPrev || pPage==p->pDirty );'), (28475, 2, u'-    assert( pPage==p->pDirtyTail );'), (28481, 2, u'-    assert( pPage==p->pDirty );'), (28487, 2, u'-  expensive_assert( pcacheCheckSynced(p) );'), (28497, 2, u'-  assert( pPage->pDirtyNext==0 && pPage->pDirtyPrev==0 && p->pDirty!=pPage );'), (28501, 2, u'-    assert( pPage->pDirtyNext->pDirtyPrev==0 );'), (28511, 2, u'-  expensive_assert( pcacheCheckSynced(p) );'), (28578, 2, u'-  assert( pCache->nRef==0 && pCache->pDirty==0 );'), (28598, 2, u'-  assert( pCache!=0 );'), (28599, 2, u'-  assert( pgno>0 );'), (28632, 2, u'-    expensive_assert( pcacheCheckSynced(pCache) );'), (28659, 2, u'-    assert( pPage->pCache==pCache );'), (28660, 2, u'-    assert( pPage->pgno==pgno );'), (28661, 2, u'-    assert( pPage->pExtra==(void *)&pPage[1] );'), (28680, 2, u'-  assert( p->nRef>0 );'), (28699, 2, u'-  assert(p->nRef>0);'), (28710, 2, u'-  assert( p->nRef==1 );'), (28728, 2, u'-  assert( p->nRef>0 );'), (28775, 2, u'-  assert( p->nRef>0 );'), (28776, 2, u'-  assert( newPgno>0 );'), (28801, 2, u'-        assert( p->flags&PGHDR_DIRTY );'), (29125, 2, u'-  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29154, 2, u'-  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29231, 2, u'-  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29271, 2, u'-  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29315, 2, u'-  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29336, 2, u'-  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29558, 2, u'-  assert( pPage->pLruPrev==0 && pPage->pLruNext==0 );'), (29559, 2, u'-  assert( pcache1.pLruHead!=pPage && pcache1.pLruTail!=pPage );'), (29597, 2, u'-  assert( pPage->iKey==iOld );'), (29812, 2, u'-  assert( N >= sizeof(*p) );'), (29849, 2, u'-  assert( p!=0 );'), (29872, 2, u'-    assert( p->pEntry==0 );'), (29892, 2, u'-    assert( pA->pNext==0 || pA->v<=pA->pNext->v );'), (29893, 2, u'-    assert( pB->pNext==0 || pB->v<=pB->pNext->v );'), (29907, 2, u'-    assert( pA->pNext==0 || pA->v<=pA->pNext->v );'), (29910, 2, u'-    assert( pB==0 || pB->pNext==0 || pB->v<=pB->pNext->v );'), (29924, 2, u'-  assert( p->isSorted==0 );'), (30350, 2, u'-static int assert_pager_state(Pager *pPager){'), (30353, 2, u'-  assert( pPager->tempFile==0 || pPager->state>=PAGER_EXCLUSIVE );'), (30356, 2, u'-  assert( pPager->tempFile==0 || pPager->changeCountDone );'), (30465, 2, u'-  assert( !MEMDB );'), (30471, 2, u'-    assert( isOpen(pPager->fd) );'), (30476, 2, u'-    assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (30477, 2, u'-    assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (30519, 2, u'-  assert( !pPg->pageHash || pPager->errCode'), (30613, 2, u'-  assert( offset%JOURNAL_HDR_SZ(pPager)==0 );'), (30614, 2, u'-  assert( offset>=c );'), (30615, 2, u'-  assert( (offset-c)<JOURNAL_HDR_SZ(pPager) );'), (30642, 2, u'-  assert( isOpen(pPager->jfd) );'), (30696, 2, u'-  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (30735, 2, u'-  assert( isOpen(pPager->fd) || pPager->noSync );'), (30816, 2, u'-  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (30888, 2, u'-    assert( rc!=SQLITE_OK || iPageSize16==(u16)iPageSize );'), (30937, 2, u'-  assert( isOpen(pPager->jfd) );'), (31046, 2, u'-      assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (31125, 2, u'-  assert('), (31240, 2, u'-  assert( isOpen(pPager->jfd) || pPager->pInJournal==0 );'), (31270, 2, u'-      assert( pPager->journalMode==PAGER_JOURNALMODE_DELETE || rc );'), (31391, 2, u'-  assert( (isMainJrnl&~1)==0 );      /* isMainJrnl is 0 or 1 */'), (31392, 2, u'-  assert( (isSavepnt&~1)==0 );       /* isSavepnt is 0 or 1 */'), (31393, 2, u'-  assert( isMainJrnl || pDone );     /* pDone always used on sub-journals */'), (31394, 2, u'-  assert( isSavepnt || pDone==0 );   /* pDone never used on non-savepoint */'), (31397, 2, u'-  assert( aData );         /* Temp storage must have already been allocated */'), (31415, 2, u'-    assert( !isSavepnt );'), (31433, 2, u'-  assert( pPager->state==PAGER_RESERVED || pPager->state>=PAGER_EXCLUSIVE );'), (31468, 2, u'-  assert( pPg || !MEMDB );'), (31501, 2, u'-    assert( isSavepnt );'), (31725, 2, u'-    assert( !isOpen(pJournal) );'), (31788, 2, u'-  assert( isOpen(pPager->fd) || pPager->tempFile );'), (31801, 2, u'-    assert( MAX_SECTOR_SIZE>=512 );'), (31883, 2, u'-  assert( isOpen(pPager->jfd) );'), (31938, 2, u'-      assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) );'), (32004, 2, u'-  assert( 0 );'), (32012, 2, u'-  assert('), (32095, 2, u'-  assert( pPager->state>=PAGER_SHARED );'), (32130, 2, u'-    assert( rc!=SQLITE_DONE );'), (32145, 2, u'-    assert( rc!=SQLITE_DONE );'), (32152, 2, u'-    assert( !(nJRec==0'), (32165, 2, u'-    assert( rc!=SQLITE_DONE );'), (32167, 2, u'-  assert( rc!=SQLITE_OK || pPager->journalOff==szJ );'), (32177, 2, u'-      assert( offset==ii*(4+pPager->pageSize) );'), (32180, 2, u'-    assert( rc!=SQLITE_DONE );'), (32270, 2, u'-  assert( rc!=SQLITE_OK || isOpen(pFile) );'), (32349, 2, u'-    assert( pageSize==0 || (pageSize>=512 && pageSize<=SQLITE_MAX_PAGE_SIZE) );'), (32438, 2, u'-  assert( isOpen(pPager->fd) || pPager->tempFile );'), (32479, 2, u'-    assert( isOpen(pPager->fd) || pPager->tempFile );'), (32530, 2, u'-  assert( PAGER_SHARED==SHARED_LOCK );'), (32531, 2, u'-  assert( PAGER_RESERVED==RESERVED_LOCK );'), (32532, 2, u'-  assert( PAGER_EXCLUSIVE==EXCLUSIVE_LOCK );'), (32535, 2, u'-  assert( pPager->state>=PAGER_SHARED || pPager->dbSizeValid==0 );'), (32542, 2, u'-  assert( (pPager->state>=locktype)'), (32568, 2, u'-  assert( pPager->dbSizeValid );'), (32569, 2, u'-  assert( pPager->dbSize>=nPage );'), (32570, 2, u'-  assert( pPager->state>=PAGER_RESERVED );'), (32614, 2, u'-  assert( !pPager->aSavepoint && !pPager->pInJournal );'), (32615, 2, u'-  assert( !isOpen(pPager->jfd) && !isOpen(pPager->sjfd) );'), (32677, 2, u'-    assert( !pPager->tempFile );'), (32681, 2, u'-      assert( isOpen(pPager->jfd) );'), (32820, 2, u'-  assert( pPager->state>=PAGER_RESERVED );'), (32828, 2, u'-    assert( pPager->tempFile && rc==SQLITE_OK );'), (32904, 2, u'-    assert( pageInJournal(pPg) || pPg->pgno>pPager->dbOrigSize );'), (32912, 2, u'-    assert( pPager->nSavepoint>0 );'), (32943, 2, u'-  assert( pPg->pPager==pPager );'), (32944, 2, u'-  assert( pPg->flags&PGHDR_DIRTY );'), (33148, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(journalFileSize) );'), (33159, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );'), (33189, 2, u'-      assert(SQLITE_DEFAULT_PAGE_SIZE<=SQLITE_MAX_DEFAULT_PAGE_SIZE);'), (33201, 2, u'-        assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (33202, 2, u'-        assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (33203, 2, u'-        assert(SQLITE_MAX_DEFAULT_PAGE_SIZE<=65536);'), (33229, 2, u'-    assert( pPager->memDb==0 );'), (33238, 2, u'-    assert( !pPager->pTmpSpace );'), (33263, 2, u'-  assert( pPager->state == (tempFile ? PAGER_EXCLUSIVE : PAGER_UNLOCK) );'), (33266, 2, u'-  assert( tempFile==PAGER_LOCKINGMODE_NORMAL'), (33268, 2, u'-  assert( PAGER_LOCKINGMODE_EXCLUSIVE==1 );'), (33282, 2, u'-  assert( isOpen(pPager->fd) || tempFile );'), (33332, 2, u'-  assert( pPager!=0 );'), (33333, 2, u'-  assert( pPager->useJournal );'), (33334, 2, u'-  assert( isOpen(pPager->fd) );'), (33335, 2, u'-  assert( !isOpen(pPager->jfd) );'), (33396, 2, u'-  assert( pPager->state>=PAGER_SHARED && !MEMDB );'), (33399, 2, u'-    assert( pPager->tempFile );'), (33483, 2, u'-    assert( !MEMDB );'), (33484, 2, u'-    assert( sqlite3PcacheRefCount(pPager->pPCache)==0 );'), (33488, 2, u'-        assert( pPager->state==PAGER_UNLOCK );'), (33494, 2, u'-    assert( pPager->state>=SHARED_LOCK );'), (33540, 2, u'-            assert( !pPager->tempFile );'), (33542, 2, u'-            assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (33574, 2, u'-      assert( (pPager->state==PAGER_SHARED)'), (33604, 2, u'-      assert( pPager->dbSizeValid );'), (33619, 2, u'-    assert( pPager->exclusiveMode || pPager->state==PAGER_SHARED );'), (33716, 2, u'-  assert( assert_pager_state(pPager) );'), (33717, 2, u'-  assert( pPager->state==PAGER_UNLOCK'), (33731, 2, u'-  assert( pPager!=0 );'), (33742, 2, u'-  assert( pPager->state!=PAGER_UNLOCK );'), (33748, 2, u'-  assert( pPg->pgno==pgno );'), (33749, 2, u'-  assert( pPg->pPager==pPager || pPg->pPager==0 );'), (33789, 2, u'-      assert( pPg->pPager==pPager );'), (33823, 2, u'-  assert( pPager!=0 );'), (33824, 2, u'-  assert( pgno!=0 );'), (33898, 2, u'-  assert( pPager->state>=PAGER_RESERVED );'), (33899, 2, u'-  assert( pPager->useJournal );'), (33900, 2, u'-  assert( pPager->pInJournal==0 );'), (33937, 2, u'-    assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (33985, 2, u'-  assert( pPager->state!=PAGER_UNLOCK );'), (33987, 2, u'-    assert( pPager->pInJournal==0 );'), (33988, 2, u'-    assert( !MEMDB && !pPager->tempFile );'), (34018, 2, u'-    assert( pPager->nRec==0 );'), (34019, 2, u'-    assert( pPager->dbOrigSize==0 );'), (34020, 2, u'-    assert( pPager->pInJournal==0 );'), (34025, 2, u'-  assert( !isOpen(pPager->jfd) || pPager->journalOff>0 || rc!=SQLITE_OK );'), (34050, 2, u'-  assert( !pPager->setMaster );'), (34069, 2, u'-    assert( pPager->state!=PAGER_UNLOCK );'), (34074, 2, u'-    assert( pPager->state>=PAGER_RESERVED );'), (34094, 2, u'-        assert( pPg->pgno!=PAGER_MJ_PGNO(pPager) );'), (34134, 2, u'-        assert( pPager->pInJournal!=0 );'), (34137, 2, u'-        assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (34140, 2, u'-          assert( rc==SQLITE_NOMEM );'), (34166, 2, u'-  assert( pPager->state>=PAGER_SHARED );'), (34204, 2, u'-    assert( !MEMDB );'), (34205, 2, u'-    assert( pPager->doNotSync==0 );'), (34222, 2, u'-    assert(nPage>0);'), (34223, 2, u'-    assert(pg1<=pPg->pgno);'), (34224, 2, u'-    assert((pg1+nPage)>pPg->pgno);'), (34236, 2, u'-              assert(pPager->needSync);'), (34256, 2, u'-      assert( !MEMDB && pPager->noSync==0 );'), (34264, 2, u'-      assert(pPager->needSync);'), (34267, 2, u'-    assert( pPager->doNotSync==1 );'), (34343, 2, u'-  assert( isDirectMode==0 );'), (34349, 2, u'-  assert( pPager->state>=PAGER_RESERVED );'), (34354, 2, u'-    assert( !pPager->tempFile && isOpen(pPager->fd) );'), (34358, 2, u'-    assert( pPgHdr==0 || rc==SQLITE_OK );'), (34376, 2, u'-        assert( pPager->dbFileSize>0 );'), (34481, 2, u'-    assert( isOpen(pPager->jfd) || pPager->journalMode==PAGER_JOURNALMODE_OFF );'), (34554, 2, u'-      assert( rc!=SQLITE_IOERR_BLOCKED );'), (34564, 2, u'-      assert( pPager->state>=PAGER_EXCLUSIVE );'), (34636, 2, u'-    assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) );'), (34641, 2, u'-  assert( pPager->state==PAGER_SYNCED || MEMDB || !pPager->dbModified );'), (34794, 2, u'-    assert( pPager->nSavepoint==0 || isOpen(pPager->sjfd) ||'), (34813, 2, u'-      assert( pPager->dbSizeValid );'), (34867, 2, u'-  assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (34868, 2, u'-  assert( iSavepoint>=0 || op==SAVEPOINT_ROLLBACK );'), (34892, 2, u'-      assert(rc!=SQLITE_DONE);'), (34898, 2, u'-      assert( rc==SQLITE_OK );'), (34990, 2, u'-  assert( pPg->nRef>0 );'), (35030, 2, u'-    assert( pageInJournal(pPg) || pPg->pgno>pPager->dbOrigSize );'), (35031, 2, u'-    assert( pPg->flags&PGHDR_DIRTY );'), (35032, 2, u'-    assert( pPager->needSync );'), (35042, 2, u'-  assert( !pPgOld || pPgOld->nRef==1 );'), (35072, 2, u'-    assert( pPager->needSync );'), (35081, 2, u'-    assert( pPager->noSync==0 && !MEMDB );'), (35108, 2, u'-  assert( pPg->nRef>0 || pPg->pPager->memDb );'), (35132, 2, u'-  assert( eMode==PAGER_LOCKINGMODE_QUERY'), (35135, 2, u'-  assert( PAGER_LOCKINGMODE_QUERY<0 );'), (35136, 2, u'-  assert( PAGER_LOCKINGMODE_NORMAL>=0 && PAGER_LOCKINGMODE_EXCLUSIVE>=0 );'), (35162, 2, u'-  assert( eMode==PAGER_JOURNALMODE_QUERY'), (35168, 2, u'-  assert( PAGER_JOURNALMODE_QUERY<0 );'), (35811, 2, u'-  assert( p->pBt->inTransaction!=TRANS_NONE || p->pBt->nTransaction==0 ); \\'), (35812, 2, u'-  assert( p->pBt->inTransaction>=p->inTrans );'), (35876, 2, u'-  assert( p->locked==0 );'), (35877, 2, u'-  assert( sqlite3_mutex_notheld(p->pBt->mutex) );'), (35878, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (35890, 2, u'-  assert( p->locked==1 );'), (35891, 2, u'-  assert( sqlite3_mutex_held(p->pBt->mutex) );'), (35892, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (35893, 2, u'-  assert( p->db==p->pBt->db );'), (35922, 2, u'-  assert( p->pNext==0 || p->pNext->pBt>p->pBt );'), (35923, 2, u'-  assert( p->pPrev==0 || p->pPrev->pBt<p->pBt );'), (35924, 2, u'-  assert( p->pNext==0 || p->pNext->db==p->db );'), (35925, 2, u'-  assert( p->pPrev==0 || p->pPrev->db==p->db );'), (35926, 2, u'-  assert( p->sharable || (p->pNext==0 && p->pPrev==0) );'), (35929, 2, u'-  assert( !p->locked || p->wantToLock>0 );'), (35930, 2, u'-  assert( p->sharable || p->wantToLock==0 );'), (35933, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (35937, 2, u'-  assert( (p->locked==0 && p->sharable) || p->pBt->db==p->db );'), (35959, 2, u'-    assert( pLater->sharable );'), (35960, 2, u'-    assert( pLater->pNext==0 || pLater->pNext->pBt>pLater->pBt );'), (35961, 2, u'-    assert( !pLater->locked || pLater->wantToLock>0 );'), (35979, 2, u'-    assert( p->wantToLock>0 );'), (35995, 2, u'-  assert( p->sharable==0 || p->locked==0 || p->wantToLock>0 );'), (35996, 2, u'-  assert( p->sharable==0 || p->locked==0 || p->db==p->pBt->db );'), (35997, 2, u'-  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->pBt->mutex) );'), (35998, 2, u'-  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->db->mutex) );'), (36037, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (36040, 2, u'-    assert( !p || (p->locked==0 && p->sharable) || p->pBt->db==p->db );'), (36044, 2, u'-        assert( p->wantToLock==1 );'), (36063, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (36067, 2, u'-      assert( p->wantToLock>0 );'), (36120, 2, u'-      assert( pArray->aBtree[i]!=pBtree );'), (36124, 2, u'-  assert( pArray->nMutex>=0 );'), (36125, 2, u'-  assert( pArray->nMutex<ArraySize(pArray->aBtree)-1 );'), (36128, 2, u'-    assert( pArray->aBtree[i]!=pBtree );'), (36151, 2, u'-    assert( i==0 || pArray->aBtree[i-1]->pBt<p->pBt );'), (36152, 2, u'-    assert( !p->locked || p->wantToLock>0 );'), (36155, 2, u'-    assert( sqlite3_mutex_held(p->db->mutex) );'), (36172, 2, u'-    assert( i==0 || pArray->aBtree[i-1]->pBt<p->pBt );'), (36173, 2, u'-    assert( p->locked || !p->sharable );'), (36174, 2, u'-    assert( p->wantToLock>0 );'), (36177, 2, u'-    assert( sqlite3_mutex_held(p->db->mutex) );'), (36304, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (36305, 2, u'-  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (36306, 2, u'-  assert( p->db!=0 );'), (36312, 2, u'-  assert( eLock==READ_LOCK || (p==pBt->pWriter && p->inTrans==TRANS_WRITE) );'), (36313, 2, u'-  assert( eLock==READ_LOCK || pBt->inTransaction==TRANS_WRITE );'), (36359, 2, u'-      assert( pIter->eLock==READ_LOCK || pIter->eLock==WRITE_LOCK );'), (36360, 2, u'-      assert( eLock==READ_LOCK || pIter->pBtree==p || pIter->eLock==READ_LOCK);'), (36364, 2, u'-          assert( p==pBt->pWriter );'), (36389, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (36390, 2, u'-  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (36391, 2, u'-  assert( p->db!=0 );'), (36398, 2, u'-  assert( SQLITE_OK==querySharedCacheTableLock(p, iTable, eLock) );'), (36440, 2, u'-  assert( WRITE_LOCK>READ_LOCK );'), (36462, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (36463, 2, u'-  assert( p->sharable || 0==*ppIter );'), (36464, 2, u'-  assert( p->inTrans>0 );'), (36468, 2, u'-    assert( pBt->isExclusive==0 || pBt->pWriter==pLock->pBtree );'), (36469, 2, u'-    assert( pLock->pBtree->inTrans>=pLock->eLock );'), (36478, 2, u'-  assert( pBt->isPending==0 || pBt->pWriter );'), (36515, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (36526, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (36617, 2, u'-  assert( CURSOR_VALID==pCur->eState );'), (36618, 2, u'-  assert( 0==pCur->pKey );'), (36619, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (36642, 2, u'-  assert( !pCur->apPage[0]->intKey || !pCur->pKey );'), (36665, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (36666, 2, u'-  assert( pExcept==0 || pExcept->pBt==pBt );'), (36683, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (36698, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (36699, 2, u'-  assert( pCur->eState>=CURSOR_REQUIRESEEK );'), (36708, 2, u'-    assert( pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_INVALID );'), (36751, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (36775, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (36777, 2, u'-  assert( 0==PTRMAP_ISPAGE(pBt, PENDING_BYTE_PAGE(pBt)) );'), (36779, 2, u'-  assert( pBt->autoVacuum );'), (36818, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (36828, 2, u'-  assert( pEType!=0 );'), (36859, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (36892, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (36895, 2, u'-  assert( pPage->leaf==0 || pPage->leaf==1 );'), (36897, 2, u'-  assert( n==4-4*pPage->leaf );'), (36988, 2, u'-  assert( pCell!=0 );'), (36990, 2, u'-  assert( (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload );'), (37004, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37030, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37031, 2, u'-  assert( pPage->pBt!=0 );'), (37032, 2, u'-  assert( pPage->pBt->usableSize <= SQLITE_MAX_PAGE_SIZE );'), (37033, 2, u'-  assert( pPage->nOverflow==0 );'), (37034, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37040, 2, u'-  assert( nCell==get2byte(&data[hdr+3]) );'), (37057, 2, u'-    assert( cbrk+size<=usableSize && cbrk>=0 );'), (37061, 2, u'-  assert( cbrk>=cellOffset+2*nCell );'), (37068, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37096, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37097, 2, u'-  assert( pPage->pBt );'), (37098, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37099, 2, u'-  assert( nByte>=0 );  /* Minimum cell size is 4 */'), (37100, 2, u'-  assert( pPage->nFree>=nByte );'), (37101, 2, u'-  assert( pPage->nOverflow==0 );'), (37106, 2, u'-  assert( nByte <= ('), (37159, 2, u'-  assert( pPage->pBt!=0 );'), (37160, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37161, 2, u'-  assert( start>=pPage->hdrOffset+6+(pPage->leaf?0:4) );'), (37162, 2, u'-  assert( (start + size)<=pPage->pBt->usableSize );'), (37163, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37164, 2, u'-  assert( size>=0 );   /* Minimum cell size is 4 */'), (37176, 2, u'-    assert( pbegin<=pPage->pBt->usableSize-4 );'), (37185, 2, u'-  assert( pbegin>addr || pbegin==0 );'), (37195, 2, u'-    assert( pbegin>addr );'), (37196, 2, u'-    assert( pbegin<=pPage->pBt->usableSize-4 );'), (37222, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37241, 2, u'-  assert( pPage->hdrOffset==(pPage->pgno==1 ? 100 : 0) );'), (37242, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37243, 2, u'-  pPage->leaf = (u8)(flagByte>>3);  assert( PTF_LEAF == 1<<3 );'), (37274, 2, u'-  assert( pPage->pBt!=0 );'), (37275, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37276, 2, u'-  assert( pPage->pgno==sqlite3PagerPagenumber(pPage->pDbPage) );'), (37277, 2, u'-  assert( pPage == sqlite3PagerGetExtra(pPage->pDbPage) );'), (37278, 2, u'-  assert( pPage->aData == sqlite3PagerGetData(pPage->pDbPage) );'), (37295, 2, u'-    assert( pBt->pageSize>=512 && pBt->pageSize<=32768 );'), (37366, 2, u'-  assert( sqlite3PagerPagenumber(pPage->pDbPage)==pPage->pgno );'), (37367, 2, u'-  assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (37368, 2, u'-  assert( sqlite3PagerGetData(pPage->pDbPage) == data );'), (37369, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37370, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (37382, 2, u'-  assert( pBt->pageSize>=512 && pBt->pageSize<=32768 );'), (37423, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (37437, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (37452, 2, u'-  assert( pBt->pPage1 );'), (37454, 2, u'-  assert( rc==SQLITE_OK || nPage==-1 );'), (37471, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (37510, 2, u'-    assert( pPage->nOverflow==0 || sqlite3PagerPageRefcount(pPage->pDbPage)>1 );'), (37511, 2, u'-    assert( pPage->aData );'), (37512, 2, u'-    assert( pPage->pBt );'), (37513, 2, u'-    assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (37514, 2, u'-    assert( sqlite3PagerGetData(pPage->pDbPage)==pPage->aData );'), (37515, 2, u'-    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37531, 2, u'-  assert( sqlite3PagerPageRefcount(pData)>0 );'), (37533, 2, u'-    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37552, 2, u'-  assert( pBt->db );'), (37553, 2, u'-  assert( sqlite3_mutex_held(pBt->db->mutex) );'), (37594, 2, u'-  assert( db!=0 );'), (37595, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (37627, 2, u'-        assert( pBt->nRef>0 );'), (37656, 2, u'-    assert( sizeof(i64)==8 || sizeof(i64)==4 );'), (37657, 2, u'-    assert( sizeof(u64)==8 || sizeof(u64)==4 );'), (37658, 2, u'-    assert( sizeof(u32)==4 );'), (37659, 2, u'-    assert( sizeof(u16)==2 );'), (37660, 2, u'-    assert( sizeof(Pgno)==4 );'), (37710, 2, u'-    assert( (pBt->pageSize & 7)==0 );  /* 8-byte alignment of pageSize */'), (37779, 2, u'-    assert( sqlite3_mutex_held(mutexOpen) );'), (37797, 2, u'-  assert( sqlite3_mutex_notheld(pBt->mutex) );'), (37851, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (37873, 2, u'-  assert( p->wantToLock==0 && p->locked==0 );'), (37880, 2, u'-    assert( !pBt->pCursor );'), (37891, 2, u'-  assert( p->wantToLock==0 );'), (37892, 2, u'-  assert( p->locked==0 );'), (37918, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (37936, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (37951, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (37953, 2, u'-  assert( pBt && pBt->pPager );'), (37983, 2, u'-  assert( nReserve>=-1 && nReserve<=255 );'), (37992, 2, u'-  assert( nReserve>=0 && nReserve<=255 );'), (37995, 2, u'-    assert( (pageSize & 7)==0 );'), (37996, 2, u'-    assert( !pBt->pPage1 && !pBt->pCursor );'), (38102, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (38103, 2, u'-  assert( pBt->pPage1==0 );'), (38142, 2, u'-    assert( (pageSize & 7)==0 );'), (38186, 2, u'-  assert( pBt->maxLeaf + 23 <= MX_CELL_SIZE(pBt) );'), (38203, 2, u'-  assert( sqlite3BtreeHoldsMutex(pRef) );'), (38230, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (38233, 2, u'-      assert( pBt->pPage1->aData );'), (38258, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (38264, 2, u'-  assert( pP1!=0 );'), (38269, 2, u'-  assert( sizeof(zMagicHeader)==16 );'), (38273, 2, u'-  assert( pBt->usableSize<=pBt->pageSize && pBt->usableSize+255>=pBt->pageSize);'), (38282, 2, u'-  assert( pBt->autoVacuum==1 || pBt->autoVacuum==0 );'), (38283, 2, u'-  assert( pBt->incrVacuum==1 || pBt->incrVacuum==0 );'), (38407, 2, u'-      assert( !pBt->pWriter );'), (38444, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (38492, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (38493, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (38558, 2, u'-  assert( eType==PTRMAP_OVERFLOW2 || eType==PTRMAP_OVERFLOW1 ||'), (38560, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (38561, 2, u'-  assert( pDbPage->pBt==pBt );'), (38639, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (38640, 2, u'-  assert( iLastPg>nFin );'), (38673, 2, u'-        assert( iFreePg==iLastPg );'), (38701, 2, u'-      assert( iFreePg<iLastPg );'), (38749, 2, u'-  assert( pBt->inTransaction==TRANS_WRITE && p->inTrans==TRANS_WRITE );'), (38774, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (38776, 2, u'-  assert(pBt->autoVacuum);'), (38818, 2, u'-  assert( nRef==sqlite3PagerRefcount(pPager) );'), (38895, 2, u'-    assert( pBt->inTransaction==TRANS_WRITE );'), (38896, 2, u'-    assert( pBt->nTransaction>0 );'), (39031, 2, u'-    assert( TRANS_WRITE==pBt->inTransaction );'), (39043, 2, u'-    assert( countWriteCursors(pBt)==0 );'), (39049, 2, u'-    assert( pBt->nTransaction>0 );'), (39087, 2, u'-  assert( p->inTrans==TRANS_WRITE );'), (39088, 2, u'-  assert( pBt->readOnly==0 );'), (39089, 2, u'-  assert( iStatement>0 );'), (39090, 2, u'-  assert( iStatement>p->db->nSavepoint );'), (39094, 2, u'-    assert( pBt->inTransaction==TRANS_WRITE );'), (39122, 2, u'-    assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (39123, 2, u'-    assert( iSavepoint>=0 || (iSavepoint==-1 && op==SAVEPOINT_ROLLBACK) );'), (39175, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (39176, 2, u'-  assert( wrFlag==0 || wrFlag==1 );'), (39178, 2, u'-    assert( !pBt->readOnly );'), (39184, 2, u'-      assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (39275, 2, u'-  assert( pCur->cachedRowid==iRowid );'), (39324, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39331, 2, u'-  assert( pTempCur->pKey==0 );'), (39340, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39365, 2, u'-  static void assertCellInfo(BtCursor *pCur){'), (39370, 2, u'-    assert( memcmp(&info, &pCur->info, sizeof(info))==0 );'), (39373, 2, u'-  #define assertCellInfo(x)'), (39383, 2, u'-      assertCellInfo(pCur);'), (39394, 2, u'-    assertCellInfo(pCur);                                                      \\'), (39409, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39412, 2, u'-    assert( pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID );'), (39433, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39436, 2, u'-    assert( pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID );'), (39477, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (39478, 2, u'-  assert(pPgnoNext);'), (39508, 2, u'-    assert(rc==SQLITE_OK || pPage==0);'), (39600, 2, u'-  assert( pPage );'), (39601, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (39602, 2, u'-  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (39603, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39671, 2, u'-        assert(!pCur->aOverflow[iIdx] || pCur->aOverflow[iIdx]==nextPage);'), (39731, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39734, 2, u'-    assert( pCur->eState==CURSOR_VALID );'), (39735, 2, u'-    assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (39739, 2, u'-    assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (39763, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39766, 2, u'-    assert( pCur->eState==CURSOR_VALID );'), (39767, 2, u'-    assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (39768, 2, u'-    assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (39803, 2, u'-  assert( pCur!=0 && pCur->iPage>=0 && pCur->apPage[pCur->iPage]);'), (39804, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (39805, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39807, 2, u'-  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (39845, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39852, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39870, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39871, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (39872, 2, u'-  assert( pCur->iPage<BTCURSOR_MAX_DEPTH );'), (39898, 2, u'-static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){'), (39899, 2, u'-  assert( iIdx<=pParent->nCell );'), (39901, 2, u'-    assert( get4byte(&pParent->aData[pParent->hdrOffset+8])==iChild );'), (39903, 2, u'-    assert( get4byte(findCell(pParent, iIdx))==iChild );'), (39907, 2, u'-#  define assertParentIndex(x,y,z)'), (39919, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39920, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (39921, 2, u'-  assert( pCur->iPage>0 );'), (39922, 2, u'-  assert( pCur->apPage[pCur->iPage] );'), (39923, 2, u'-  assertParentIndex('), (39943, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (39944, 2, u'-  assert( CURSOR_INVALID < CURSOR_REQUIRESEEK );'), (39945, 2, u'-  assert( CURSOR_VALID   < CURSOR_REQUIRESEEK );'), (39946, 2, u'-  assert( CURSOR_FAULT   > CURSOR_REQUIRESEEK );'), (39969, 2, u'-  assert( pRoot->pgno==pCur->pgnoRoot );'), (39978, 2, u'-    assert( pRoot->pgno==1 );'), (39980, 2, u'-    assert( subpage>0 );'), (40001, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (40002, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (40004, 2, u'-    assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (40026, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (40027, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (40048, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (40049, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40053, 2, u'-      assert( pCur->apPage[pCur->iPage]->nCell==0 );'), (40057, 2, u'-      assert( pCur->apPage[pCur->iPage]->nCell>0 );'), (40072, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (40073, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40077, 2, u'-      assert( pCur->apPage[pCur->iPage]->nCell==0 );'), (40080, 2, u'-      assert( pCur->eState==CURSOR_VALID );'), (40127, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (40128, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40149, 2, u'-  assert( pCur->apPage[pCur->iPage] );'), (40150, 2, u'-  assert( pCur->apPage[pCur->iPage]->isInit );'), (40153, 2, u'-    assert( pCur->apPage[pCur->iPage]->nCell==0 );'), (40156, 2, u'-  assert( pCur->apPage[0]->intKey || pIdxKey );'), (40192, 2, u'-          assert( nCellKey>intKey );'), (40236, 2, u'-    assert( lwr==upr+1 );'), (40237, 2, u'-    assert( pPage->isInit );'), (40246, 2, u'-      assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (40279, 2, u'-    assert( nKey==(i64)(int)nKey );'), (40313, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40328, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (40333, 2, u'-  assert( pRes!=0 );'), (40347, 2, u'-  assert( pPage->isInit );'), (40348, 2, u'-  assert( idx<=pPage->nCell );'), (40396, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (40414, 2, u'-  assert( pPage->isInit );'), (40481, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (40496, 2, u'-      assert( nearby>0 );'), (40497, 2, u'-      assert( pBt->autoVacuum );'), (40536, 2, u'-        assert( pPrevTrunk==0 );'), (40555, 2, u'-        assert( *pPgno==iTrunk );'), (40589, 2, u'-            assert( sqlite3PagerIswriteable(pPage1->pDbPage) );'), (40646, 2, u'-          assert( sqlite3PagerIswriteable(pTrunk->pDbPage) );'), (40679, 2, u'-      assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (40691, 2, u'-    assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (40701, 2, u'-  assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (40736, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (40737, 2, u'-  assert( iPage>1 );'), (40738, 2, u'-  assert( !pMemPage || pMemPage->pgno==iPage );'), (40864, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (40870, 2, u'-  assert( pBt->usableSize > 4 );'), (40873, 2, u'-  assert( ovflPgno==0 || nOvfl>0 );'), (40930, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (40934, 2, u'-  assert( pCell<pPage->aData || pCell>=&pPage->aData[pBt->pageSize]'), (40949, 2, u'-  assert( info.nHeader==nHeader );'), (40950, 2, u'-  assert( info.nKey==nKey );'), (40951, 2, u'-  assert( info.nData==(u32)(nData+nZero) );'), (41011, 2, u'-      assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (41015, 2, u'-      assert( pPrior<pPage->aData || pPrior>=&pPage->aData[pBt->pageSize]'), (41031, 2, u'-    assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (41035, 2, u'-    assert( pPayload<pPage->aData || pPayload>=&pPage->aData[pBt->pageSize]'), (41040, 2, u'-      assert( pSrc );'), (41074, 2, u'-  assert( idx>=0 && idx<pPage->nCell );'), (41075, 2, u'-  assert( sz==cellSize(pPage, idx) );'), (41076, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (41077, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41134, 2, u'-  assert( i>=0 && i<=pPage->nCell+pPage->nOverflow );'), (41135, 2, u'-  assert( pPage->nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=5460 );'), (41136, 2, u'-  assert( pPage->nOverflow<=ArraySize(pPage->aOvfl) );'), (41137, 2, u'-  assert( sz==cellSizePtr(pPage, pCell) );'), (41138, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41145, 2, u'-    assert( j<(int)(sizeof(pPage->aOvfl)/sizeof(pPage->aOvfl[0])) );'), (41154, 2, u'-    assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (41167, 2, u'-      assert( end + sz <= top );'), (41170, 2, u'-    assert( idx>0 );'), (41171, 2, u'-    assert( end <= get2byte(&data[hdr+5]) );'), (41191, 2, u'-      assert( (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload );'), (41221, 2, u'-  assert( pPage->nOverflow==0 );'), (41222, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41223, 2, u'-  assert( nCell>=0 && nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=5460 );'), (41228, 2, u'-  assert( totalSize+2*nCell<=pPage->nFree );'), (41229, 2, u'-  assert( pPage->nCell==0 );'), (41230, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (41237, 2, u'-    assert( cellbody>0 );'), (41238, 2, u'-    assert( pPage->nFree >= 2*nCell );'), (41246, 2, u'-    assert( cellbody==pPage->pBt->usableSize );'), (41301, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41310, 2, u'-    assert( sqlite3PagerIswriteable(pNew->pDbPage) );'), (41329, 2, u'-    assert( pPage->nCell>0 );'), (41333, 2, u'-    assert( parentSize<64 );'), (41334, 2, u'-    assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (41369, 2, u'-  assert( pPage->nOverflow==0 );'), (41449, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41455, 2, u'-  assert( pCur->iPage>0 );'), (41456, 2, u'-  assert( pPage->isInit );'), (41457, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) || pPage->nOverflow==1 );'), (41460, 2, u'-  assert( pParent );'), (41483, 2, u'-    assert( pPage->intKey );'), (41502, 2, u'-  assertParentIndex(pParent, idx, pPage->pgno);'), (41523, 2, u'-      assert( !pParent->leaf );'), (41534, 2, u'-    assert( i==nOld );'), (41559, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(aCopy[0]) );'), (41562, 2, u'-    assert( ((aCopy[i] - (u8*)0) & 7)==0 ); /* 8-byte alignment required */'), (41565, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(aSpace1) );'), (41611, 2, u'-      assert( nCell<nMaxCells );'), (41616, 2, u'-        aFrom[nCell] = (u8)i;   assert( i>=0 && i<6 );'), (41637, 2, u'-        assert( nCell<nMaxCells );'), (41641, 2, u'-        assert( sz<=pBt->pageSize/4 );'), (41642, 2, u'-        assert( iSpace1<=pBt->pageSize );'), (41649, 2, u'-        assert( leafCorrection==0 || leafCorrection==4 );'), (41651, 2, u'-        assert( get4byte(pTemp)==pgnoOld[i] );'), (41653, 2, u'-          assert( leafCorrection==0 );'), (41658, 2, u'-          assert( leafCorrection==4 );'), (41687, 2, u'-    assert( i<nMaxCells );'), (41719, 2, u'-    assert( d<nMaxCells );'), (41720, 2, u'-    assert( r<nMaxCells );'), (41736, 2, u'-  assert( cntNew[0]>0 || (pParent->pgno==1 && pParent->nCell==0) );'), (41741, 2, u'-  assert( pPage->pgno>1 );'), (41753, 2, u'-      assert( i>0 );'), (41823, 2, u'-    assert( j<nMaxCells );'), (41824, 2, u'-    assert( pNew->pgno==pgnoNew[i] );'), (41827, 2, u'-    assert( pNew->nCell>0 || (nNew==1 && cntNew[0]==0) );'), (41828, 2, u'-    assert( pNew->nOverflow==0 );'), (41837, 2, u'-        assert( k<nMaxCells );'), (41860, 2, u'-      assert( j<nMaxCells );'), (41903, 2, u'-          assert(leafCorrection==4);'), (41908, 2, u'-      assert( sz<=pBt->pageSize/4 );'), (41909, 2, u'-      assert( iSpace2<=pBt->pageSize );'), (41912, 2, u'-      assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (41937, 2, u'-  assert( j==nCell );'), (41938, 2, u'-  assert( nOld>0 );'), (41939, 2, u'-  assert( nNew>0 );'), (41950, 2, u'-  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (41965, 2, u'-  assert( pParent->isInit );'), (42007, 2, u'-  assert( pCur->iPage==0 );'), (42010, 2, u'-  assert( pPage->nCell==0 );'), (42011, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (42035, 2, u'-    assert( pgnoChild>0 );'), (42036, 2, u'-    assert( pgnoChild<=pagerPagecount(pPage->pBt) );'), (42042, 2, u'-      assert( pChild->nOverflow==0 );'), (42054, 2, u'-        assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42068, 2, u'-      assert( rc==SQLITE_OK );'), (42073, 2, u'-    assert( pPage->nOverflow==0 );'), (42108, 2, u'-  assert( pCur->iPage==0 );'), (42109, 2, u'-  assert( pCur->apPage[0]->nOverflow>0 );'), (42114, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (42115, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42118, 2, u'-  assert( sqlite3PagerIswriteable(pChild->pDbPage) );'), (42127, 2, u'-  assert( pChild->isInit==0 );'), (42136, 2, u'-    assert( pChild->nCell==pPage->nCell );'), (42137, 2, u'-    assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42179, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (42184, 2, u'-      assert( pCur->apPage[0]==pPage );'), (42185, 2, u'-      assert( pPage->nOverflow==0 || rc!=SQLITE_OK );'), (42189, 2, u'-      assert( pCur->apPage[0]==pPage );'), (42190, 2, u'-      assert( pPage->nOverflow==0 || rc!=SQLITE_OK );'), (42242, 2, u'-  assert( sqlite3BtreeHoldsMutex(pBtree) );'), (42261, 2, u'-      assert(dbOther);'), (42297, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (42298, 2, u'-  assert( pBt->inTransaction==TRANS_WRITE );'), (42299, 2, u'-  assert( !pBt->readOnly );'), (42300, 2, u'-  assert( pCur->wrFlag );'), (42304, 2, u'-    assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (42321, 2, u'-  assert( pPage->intKey || nKey>=0 );'), (42322, 2, u'-  assert( pPage->leaf || !pPage->intKey );'), (42326, 2, u'-  assert( pPage->isInit );'), (42332, 2, u'-  assert( szNew==cellSizePtr(pPage, newCell) );'), (42333, 2, u'-  assert( szNew<=MX_CELL_SIZE(pBt) );'), (42337, 2, u'-    assert( idx<pPage->nCell );'), (42354, 2, u'-    assert( pPage->leaf );'), (42359, 2, u'-    assert( pPage->leaf );'), (42390, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (42391, 2, u'-  assert( pPage->isInit );'), (42392, 2, u'-  assert( pBt->inTransaction==TRANS_WRITE );'), (42393, 2, u'-  assert( !pBt->readOnly );'), (42400, 2, u'-  assert( pCur->wrFlag );'), (42404, 2, u'-    assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (42449, 2, u'-    assert( !pPage->intKey );'), (42453, 2, u'-      assert( leafCur.aiIdx[leafCur.iPage]==0 );'), (42465, 2, u'-      assert( MX_CELL_SIZE(pBt)>=szNext+4 );'), (42515, 2, u'-        assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42551, 2, u'-        assert( rc!=SQLITE_OK || pLeafPage->pgno==leafPgno );'), (42552, 2, u'-        assert( rc!=SQLITE_OK || leafCur.aiIdx[leafCur.iPage]==0 );'), (42561, 2, u'-        assert( leafCursorInvalid || !leafCur.pagesShuffled'), (42597, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (42598, 2, u'-  assert( pBt->inTransaction==TRANS_WRITE );'), (42599, 2, u'-  assert( !pBt->readOnly );'), (42635, 2, u'-    assert( pgnoRoot>=3 );'), (42668, 2, u'-      assert( eType!=PTRMAP_ROOTPAGE );'), (42669, 2, u'-      assert( eType!=PTRMAP_FREEPAGE );'), (42707, 2, u'-  assert( sqlite3PagerIswriteable(pRoot->pDbPage) );'), (42736, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (42756, 2, u'-    assert( pPage->intKey );'), (42787, 2, u'-  assert( p->inTrans==TRANS_WRITE );'), (42824, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (42825, 2, u'-  assert( p->inTrans==TRANS_WRITE );'), (42910, 2, u'-      assert( maxRootPgno!=PENDING_BYTE_PAGE(pBt) );'), (42964, 2, u'-  assert( idx>=0 && idx<=15 );'), (43019, 2, u'-  assert( idx>=1 && idx<=15 );'), (43021, 2, u'-  assert( p->inTrans==TRANS_WRITE );'), (43022, 2, u'-  assert( pBt->pPage1!=0 );'), (43029, 2, u'-      assert( pBt->autoVacuum || iMeta==0 );'), (43030, 2, u'-      assert( iMeta==0 || iMeta==1 );'), (43050, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (43051, 2, u'-  assert( pPage!=0 );'), (43052, 2, u'-  assert( pPage->pBt==pCur->pBt );'), (43337, 2, u'-    assert( rc==SQLITE_CORRUPT );  /* The only possible error from InitPage */'), (43360, 2, u'-    assert( sz==info.nPayload );'), (43599, 2, u'-  assert( p->pBt->pPager!=0 );'), (43612, 2, u'-  assert( p->pBt->pPager!=0 );'), (43620, 2, u'-  assert( p==0 || sqlite3_mutex_held(p->db->mutex) );'), (43628, 2, u'-  assert( p );'), (43629, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (43634, 2, u'-  assert( p );'), (43635, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (43677, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (43680, 2, u'-  assert( rc==SQLITE_OK || rc==SQLITE_LOCKED_SHAREDCACHE );'), (43696, 2, u'-    assert( READ_LOCK+1==WRITE_LOCK );'), (43697, 2, u'-    assert( isWriteLock==0 || isWriteLock==1 );'), (43720, 2, u'-  assert( cursorHoldsMutex(pCsr) );'), (43721, 2, u'-  assert( sqlite3_mutex_held(pCsr->pBtree->db->mutex) );'), (43722, 2, u'-  assert(pCsr->isIncrblobHandle);'), (43725, 2, u'-  assert( pCsr->eState!=CURSOR_REQUIRESEEK );'), (43738, 2, u'-  assert( !pCsr->pBt->readOnly'), (43743, 2, u'-    assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (43764, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (43765, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (43766, 2, u'-  assert(!pCur->isIncrblobHandle);'), (43767, 2, u'-  assert(!pCur->aOverflow);'), (43872, 2, u'-    assert( sParse.zErrMsg==0 );'), (43985, 2, u'-  assert( p->bDestLocked );'), (43986, 2, u'-  assert( !isFatalError(p->rc) );'), (43987, 2, u'-  assert( iSrcPg!=PENDING_BYTE_PAGE(p->pSrc->pBt) );'), (43988, 2, u'-  assert( zSrcData );'), (44168, 2, u'-        assert( pFile );'), (44169, 2, u'-        assert( (i64)nDestTruncate*(i64)nDestPagesize >= iSize || ('), (44215, 2, u'-      assert( rc2==SQLITE_OK );'), (44304, 2, u'-    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (44311, 2, u'-      assert( rc!=SQLITE_BUSY && rc!=SQLITE_LOCKED );'), (44333, 2, u'-    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (44372, 2, u'-  assert( b.rc!=SQLITE_OK );'), (44427, 2, u'-  assert( (pMem->flags&MEM_RowSet)==0 );'), (44428, 2, u'-  assert( desiredEnc==SQLITE_UTF8 || desiredEnc==SQLITE_UTF16LE'), (44433, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44442, 2, u'-  assert(rc==SQLITE_OK    || rc==SQLITE_NOMEM);'), (44443, 2, u'-  assert(rc==SQLITE_OK    || pMem->enc!=desiredEnc);'), (44444, 2, u'-  assert(rc==SQLITE_NOMEM || pMem->enc==desiredEnc);'), (44463, 2, u'-  assert( 1 >='), (44469, 2, u'-  assert( (pMem->flags&MEM_RowSet)==0 );'), (44509, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44510, 2, u'-  assert( (pMem->flags&MEM_RowSet)==0 );'), (44533, 2, u'-    assert( pMem->flags&MEM_Blob );'), (44534, 2, u'-    assert( (pMem->flags&MEM_RowSet)==0 );'), (44535, 2, u'-    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44559, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44590, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44591, 2, u'-  assert( !(fg&MEM_Zero) );'), (44592, 2, u'-  assert( !(fg&(MEM_Str|MEM_Blob)) );'), (44593, 2, u'-  assert( fg&(MEM_Int|MEM_Real) );'), (44594, 2, u'-  assert( (pMem->flags&MEM_RowSet)==0 );'), (44595, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44611, 2, u'-    assert( fg & MEM_Real );'), (44633, 2, u'-    assert( (pMem->flags & MEM_Null)!=0 || pFunc==pMem->u.pDef );'), (44634, 2, u'-    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44641, 2, u'-    assert( 0==(pMem->flags&MEM_Dyn) && !pMem->xDel );'), (44655, 2, u'-  assert( p->db==0 || sqlite3_mutex_held(p->db->mutex) );'), (44658, 2, u'-    assert( (p->flags & MEM_Agg)==0 );'), (44661, 2, u'-    assert( (p->flags&MEM_RowSet)==0 );'), (44731, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44732, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44745, 2, u'-    assert( pMem->z );'), (44760, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44761, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44775, 2, u'-    assert( pMem->z );'), (44789, 2, u'-  assert( pMem->flags & MEM_Real );'), (44790, 2, u'-  assert( (pMem->flags & MEM_RowSet)==0 );'), (44791, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44792, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44804, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44805, 2, u'-  assert( (pMem->flags & MEM_RowSet)==0 );'), (44806, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44818, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44819, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44833, 2, u'-  assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))==0 );'), (44834, 2, u'-  assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );'), (44835, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44905, 2, u'-  assert( db!=0 );'), (44915, 2, u'-    assert( pMem->zMalloc );'), (44918, 2, u'-    assert( pMem->u.pRowSet!=0 );'), (44928, 2, u'-  assert( p->db!=0 );'), (44951, 2, u'-  assert( (pFrom->flags & MEM_RowSet)==0 );'), (44957, 2, u'-    assert( srcType==MEM_Ephem || srcType==MEM_Static );'), (44969, 2, u'-  assert( (pFrom->flags & MEM_RowSet)==0 );'), (44991, 2, u'-  assert( pFrom->db==0 || sqlite3_mutex_held(pFrom->db->mutex) );'), (44992, 2, u'-  assert( pTo->db==0 || sqlite3_mutex_held(pTo->db->mutex) );'), (44993, 2, u'-  assert( pFrom->db==0 || pTo->db==0 || pFrom->db==pTo->db );'), (45022, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (45023, 2, u'-  assert( (pMem->flags & MEM_RowSet)==0 );'), (45038, 2, u'-    assert( enc!=0 );'), (45111, 2, u'-  assert( (combined_flags & MEM_RowSet)==0 );'), (45147, 2, u'-      assert( f1&MEM_Int );'), (45148, 2, u'-      assert( f2&MEM_Int );'), (45166, 2, u'-    assert( pMem1->enc==pMem2->enc );'), (45167, 2, u'-    assert( pMem1->enc==SQLITE_UTF8 ||'), (45174, 2, u'-    assert( !pColl || pColl->xCmp );'), (45238, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (45239, 2, u'-  assert( (pMem->flags & MEM_RowSet)==0 );'), (45245, 2, u'-  assert( zData!=0 );'), (45284, 2, u'-  assert( pVal->db==0 || sqlite3_mutex_held(pVal->db->mutex) );'), (45285, 2, u'-  assert( (enc&3)==(enc&~SQLITE_UTF16_ALIGNED) );'), (45286, 2, u'-  assert( (pVal->flags & MEM_RowSet)==0 );'), (45291, 2, u'-  assert( (MEM_Blob>>3) == MEM_Str );'), (45297, 2, u'-      assert( (pVal->flags & (MEM_Ephem|MEM_Static))!=0 );'), (45304, 2, u'-    assert( (pVal->flags&MEM_Blob)==0 );'), (45306, 2, u'-    assert( 0==(1&SQLITE_PTR_TO_INT(pVal->z)) );'), (45308, 2, u'-  assert(pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) || pVal->db==0'), (45378, 2, u'-    assert( pExpr->token.n>=3 );'), (45379, 2, u"-    assert( pExpr->token.z[0]=='x' || pExpr->token.z[0]=='X' );"), (45380, 2, u"-    assert( pExpr->token.z[1]=='\\'' );"), (45381, 2, u"-    assert( pExpr->token.z[pExpr->token.n-1]=='\\'' );"), (45499, 2, u'-  assert( p->zSql==0 );'), (45583, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (45584, 2, u'-  assert( op>0 && op<0xff );'), (45655, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (45675, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (45676, 2, u'-  assert( j>=0 && j<p->nLabel );'), (45741, 2, u'-      assert( p->nOp - i >= 3 );'), (45742, 2, u'-      assert( pOp[-1].opcode==OP_Integer );'), (45749, 2, u'-      assert( -1-pOp->p2<p->nLabel );'), (45777, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (45787, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (45828, 2, u'-  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45839, 2, u'-  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45849, 2, u'-  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45860, 2, u'-  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45862, 2, u'-    assert( p->nOp>0 );'), (45966, 2, u'-  assert( p!=0 );'), (45968, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (45975, 2, u'-  assert( addr<p->nOp );'), (46034, 2, u'-  assert( p->nOp>0 || p->aOp==0 );'), (46035, 2, u'-  assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );'), (46047, 2, u'-  assert( p->nOp>0 || p->aOp==0 );'), (46048, 2, u'-  assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );'), (46063, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (46064, 2, u'-  assert( (addr>=0 && addr<p->nOp) || p->db->mallocFailed );'), (46076, 2, u'-  assert( nTemp>=20 );'), (46105, 2, u'-      assert( i<nTemp );'), (46132, 2, u'-      assert( (pMem->flags & MEM_Null)==0 );'), (46161, 2, u'-  assert( zP4!=0 );'), (46172, 2, u'-  assert( i>=0 && i<p->db->nDb );'), (46173, 2, u'-  assert( i<(int)sizeof(p->btreeMask)*8 );'), (46213, 2, u'-      assert( (&p[1])==pEnd || p[0].db==p[1].db );'), (46244, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (46251, 2, u'-      assert( !pMem->xDel );'), (46281, 2, u'-  assert( p->explain );'), (46283, 2, u'-  assert( db->magic==SQLITE_MAGIC_BUSY );'), (46284, 2, u'-  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY || p->rc==SQLITE_NOMEM );'), (46320, 2, u'-      assert( pMem->z!=0 );'), (46345, 2, u'-      assert( p->db->mallocFailed );'), (46353, 2, u'-      assert( pMem->z!=0 );'), (46362, 2, u'-        assert( p->db->mallocFailed );'), (46465, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(*ppFrom) );'), (46504, 2, u'-  assert( p!=0 );'), (46505, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (46509, 2, u'-  assert( p->nOp>0 );'), (46540, 2, u'-    assert( EIGHT_BYTE_ALIGNMENT(zCsr) );'), (46579, 2, u'-    assert( p->aMem[n].db==db );'), (46723, 2, u'-  assert( idx<p->nResColumn );'), (46724, 2, u'-  assert( var<COLNAME_N );'), (46726, 2, u'-    assert( !zName || xDel!=SQLITE_DYNAMIC );'), (46729, 2, u'-  assert( p->aColName!=0 );'), (46732, 2, u'-  assert( rc!=0 || !zName || (pColName->flags&MEM_Term)!=0 );'), (46775, 2, u'-    assert( (db->flags & SQLITE_CommitBusy)==0 );'), (46977, 2, u'-  assert( cnt==db->activeVdbeCnt );'), (46978, 2, u'-  assert( nWrite==db->writeVdbeCnt );'), (47027, 2, u'-    assert( eOp==SAVEPOINT_ROLLBACK || eOp==SAVEPOINT_RELEASE);'), (47028, 2, u'-    assert( db->nStatement>0 );'), (47029, 2, u'-    assert( p->iStatement==(db->nStatement+db->nSavepoint) );'), (47243, 2, u'-    assert( db->activeVdbeCnt>=db->writeVdbeCnt );'), (47259, 2, u'-  assert( db->activeVdbeCnt>0 || db->autoCommit==0 || db->nStatement==0 );'), (47364, 2, u'-    assert( (rc & p->db->errMask)==rc );'), (47403, 2, u'-    assert( db->pVdbe==p );'), (47440, 2, u'-    assert( p->isTable );'), (47537, 2, u'-  assert( pMem->db->mallocFailed || flags&(MEM_Str|MEM_Blob) );'), (47542, 2, u'-  assert( n>=0 );'), (47638, 2, u'-      assert( sizeof(v)==sizeof(pMem->r) );'), (47645, 2, u'-    assert( len<=nBuf );'), (47655, 2, u'-    assert( pMem->n + ((pMem->flags & MEM_Zero)?pMem->u.nZero:0)'), (47657, 2, u'-    assert( pMem->n<=nBuf );'), (47732, 2, u'-      assert( sizeof(r1)==sizeof(t2) && memcmp(&r1, &t2, sizeof(r1))==0 );'), (47742, 2, u'-        assert( sizeof(x)==8 && sizeof(pMem->r)==8 );'), (47822, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (47839, 2, u'-  assert( u<=pKeyInfo->nField + 1 );'), (48073, 2, u'-  assert( pUnpacked->flags & UNPACKED_IGNORE_ROWID );'), (48084, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (48176, 2, u'-    assert(p->pLruNext || p==sqlite3LruStatements.pLast);'), (48177, 2, u'-    assert(!p->pLruNext || p->pLruNext->pLruPrev==p);'), (48178, 2, u'-    assert(p->pLruPrev || p==sqlite3LruStatements.pFirst);'), (48179, 2, u'-    assert(!p->pLruPrev || p->pLruPrev->pLruNext==p);'), (48198, 2, u'-  assert( stmtLruCheck() );'), (48201, 2, u'-    assert( !sqlite3LruStatements.pLast );'), (48205, 2, u'-    assert( !sqlite3LruStatements.pLast->pLruNext );'), (48211, 2, u'-  assert( stmtLruCheck() );'), (48223, 2, u'-    assert( stmtLruCheck() );'), (48236, 2, u'-    assert( stmtLruCheck() );'), (48358, 2, u'-    assert( (rc & (v->db->errMask))==rc );'), (48443, 2, u'-  assert( n>=0 );'), (48444, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48448, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48452, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48458, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48464, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48468, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48472, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48481, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48491, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48500, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48509, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48514, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48518, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48527, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48535, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48554, 2, u'-  assert(p);'), (48637, 2, u'-  assert( rc==SQLITE_ROW  || rc==SQLITE_DONE   || rc==SQLITE_ERROR'), (48640, 2, u'-  assert( p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE );'), (48712, 2, u'-  assert( p && p->pFunc );'), (48721, 2, u'-  assert( p && p->pFunc );'), (48754, 2, u'-  assert( p && p->pFunc && p->pFunc->xStep );'), (48755, 2, u'-  assert( sqlite3_mutex_held(p->s.db->mutex) );'), (48781, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48804, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48844, 2, u'-  assert( p && p->pMem && p->pFunc && p->pFunc->xStep );'), (49029, 2, u'-  assert( db!=0 );'), (49034, 2, u'-    assert( db->mallocFailed==0 );'), (49324, 2, u'-        assert( pOp->p1>0 && pOp->p1<=p->nVar );'), (49378, 2, u'-  assert( pTo->db==pFrom->db );'), (49379, 2, u'-  assert( pTo->nVar==pFrom->nVar );'), (49627, 2, u'-  assert( opcode>0 && opcode<(int)sizeof(opcodeProperty) );'), (49669, 2, u'-  assert( iCur<p->nCursor );'), (49747, 2, u'-    assert( affinity==SQLITE_AFF_INTEGER || affinity==SQLITE_AFF_REAL'), (49799, 2, u'-      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (49802, 2, u'-      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (49805, 2, u'-      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (49836, 2, u'-      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (49839, 2, u'-      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (49842, 2, u'-      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (50046, 2, u'-  assert( n==(db->nSavepoint + db->isTransactionSavepoint) );'), (50108, 2, u'-  assert( p->magic==VDBE_MAGIC_RUN );  /* sqlite3_step() verifies this */'), (50109, 2, u'-  assert( db->magic==SQLITE_MAGIC_BUSY );'), (50116, 2, u'-  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY );'), (50118, 2, u'-  assert( p->explain==0 );'), (50141, 2, u'-    assert( pc>=0 && pc<p->nOp );'), (50211, 2, u'-      assert( pOp->p2>0 );'), (50212, 2, u'-      assert( pOp->p2<=p->nMem );'), (50230, 2, u'-      assert( pOp->p1>0 );'), (50231, 2, u'-      assert( pOp->p1<=p->nMem );'), (50235, 2, u'-        assert( pOp->p2>0 );'), (50236, 2, u'-        assert( pOp->p2<=p->nMem );'), (50240, 2, u'-          assert( pOp->p3>0 );'), (50241, 2, u'-          assert( pOp->p3<=p->nMem );'), (50245, 2, u'-        assert( pOp->p3>0 );'), (50246, 2, u'-        assert( pOp->p3<=p->nMem );'), (50251, 2, u'-      assert( pOp->p2>0 );'), (50252, 2, u'-      assert( pOp->p2<=p->nMem );'), (50256, 2, u'-      assert( pOp->p3>0 );'), (50257, 2, u'-      assert( pOp->p3<=p->nMem );'), (50318, 2, u'-  assert( pOp->p1>0 );'), (50319, 2, u'-  assert( pOp->p1<=p->nMem );'), (50321, 2, u'-  assert( (pIn1->flags & MEM_Dyn)==0 );'), (50334, 2, u'-  assert( pIn1->flags & MEM_Int );'), (50345, 2, u'-  assert( (pIn1->flags & MEM_Dyn)==0 );'), (50392, 2, u'-  assert( rc==SQLITE_BUSY || rc==SQLITE_OK );'), (50417, 2, u'-  assert( pOp->p4.pI64!=0 );'), (50430, 2, u'-  assert( !sqlite3IsNaN(*pOp->p4.pReal) );'), (50441, 2, u'-  assert( pOp->p4.z!=0 );'), (50477, 2, u'-  assert( pOp->p4.z!=0 );'), (50505, 2, u'-  assert( pOp->p1 <= SQLITE_MAX_LENGTH );'), (50525, 2, u'-  assert( j>=0 && j+n<=p->nVar );'), (50526, 2, u'-  assert( k>=1 && k+n-1<=p->nMem );'), (50527, 2, u'-  assert( pOp->p4.z==0 || pOp->p3==1 );'), (50555, 2, u'-  assert( n>0 && p1>0 && p2>0 );'), (50556, 2, u'-  assert( p1+n<=p2 || p2+n<=p1 );'), (50561, 2, u'-    assert( pOut<=&p->aMem[p->nMem] );'), (50562, 2, u'-    assert( pIn1<=&p->aMem[p->nMem] );'), (50582, 2, u'-  assert( pOp->p2>0 );'), (50583, 2, u'-  assert( pOp->p2<=p->nMem );'), (50585, 2, u'-  assert( pOut!=pIn1 );'), (50606, 2, u'-  assert( pOp->p2>0 );'), (50607, 2, u'-  assert( pOp->p2<=p->nMem );'), (50609, 2, u'-  assert( pOut!=pIn1 );'), (50626, 2, u'-  assert( p->nResColumn==pOp->p2 );'), (50627, 2, u'-  assert( pOp->p1>0 );'), (50628, 2, u'-  assert( pOp->p1+pOp->p2<=p->nMem+1 );'), (50642, 2, u'-  assert( p->iStatement==0 || db->flags&SQLITE_CountRows );'), (50684, 2, u'-  assert( pIn1!=pOut );'), (50838, 2, u'-  assert( pOp->p4type==P4_COLLSEQ );'), (50866, 2, u'-  assert( apVal || n==0 );'), (50868, 2, u'-  assert( n==0 || (pOp->p2>0 && pOp->p2+n<=p->nMem+1) );'), (50869, 2, u'-  assert( pOp->p3<pOp->p2 || pOp->p3>=pOp->p2+n );'), (50877, 2, u'-  assert( pOp->p4type==P4_FUNCDEF || pOp->p4type==P4_VDBEFUNC );'), (50886, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (50902, 2, u'-    assert( pOp>p->aOp );'), (50903, 2, u'-    assert( pOp[-1].p4type==P4_COLLSEQ );'), (50904, 2, u'-    assert( pOp[-1].opcode==OP_CollSeq );'), (50995, 2, u'-    default:  assert( pOp->opcode==OP_ShiftRight );'), (51066, 2, u'-  assert( MEM_Str==(MEM_Blob>>3) );'), (51070, 2, u'-  assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (51089, 2, u'-    assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (51243, 2, u'-  assert( pOp->p4type==P4_COLLSEQ || pOp->p4.pColl==0 );'), (51277, 2, u'-  assert( pOp->p4type==P4_INTARRAY );'), (51278, 2, u'-  assert( pOp->p4.ai );'), (51301, 2, u'-  assert( n>0 );'), (51302, 2, u'-  assert( pKeyInfo!=0 );'), (51304, 2, u'-  assert( p1>0 && p1+n<=p->nMem+1 );'), (51306, 2, u'-  assert( p2>0 && p2+n<=p->nMem+1 );'), (51313, 2, u'-    assert( i<pKeyInfo->nField );'), (51462, 2, u'-  assert( pOp->p3==0 || pOp->p1>0 );'), (51537, 2, u'-  assert( p1<p->nCursor );'), (51538, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (51555, 2, u'-  assert( pC!=0 );'), (51557, 2, u'-  assert( pC->pVtabCursor==0 );'), (51579, 2, u'-    assert( pC->pseudoTable );'), (51584, 2, u'-    assert( payloadSize==0 || zRec!=0 );'), (51591, 2, u'-    assert( pDest->flags&MEM_Null );'), (51598, 2, u'-  assert( p2<nField );'), (51613, 2, u'-    assert(aType);'), (51705, 2, u'-    assert( rc==SQLITE_OK );'), (51724, 2, u'-      assert( pDest->flags&MEM_Null );'), (51734, 2, u'-    assert( sMem.z==sMem.zMalloc );'), (51735, 2, u'-    assert( !(pDest->flags & MEM_Dyn) );'), (51736, 2, u'-    assert( !(pDest->flags & (MEM_Blob|MEM_Str)) || pDest->z==sMem.z );'), (51823, 2, u'-  assert( nField>0 && pOp->p2>0 && pOp->p2+nField<=p->nMem+1 );'), (51868, 2, u'-  assert( pOp->p3<pOp->p1 || pOp->p3>=pOp->p1+pOp->p2 );'), (51884, 2, u'-  assert( i==nByte );'), (51886, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (51946, 2, u'-    assert( i>=0 && i<db->nDb );'), (51947, 2, u'-    assert( db->aDb[i].pBt!=0 );'), (51949, 2, u'-    assert( sqlite3BtreeIsInTrans(pBt) );'), (51950, 2, u'-    assert( (p->btreeMask & (1<<i))!=0 );'), (51952, 2, u'-      assert( db->nStatement>=0 && db->nSavepoint>=0 );'), (51974, 2, u'-  assert( db->pSavepoint==0 || db->autoCommit==0 );'), (51975, 2, u'-  assert( p1==SAVEPOINT_BEGIN||p1==SAVEPOINT_RELEASE||p1==SAVEPOINT_ROLLBACK );'), (51976, 2, u'-  assert( db->pSavepoint || db->isTransactionSavepoint==0 );'), (51977, 2, u'-  assert( checkSavepointCount(db) );'), (52082, 2, u'-        assert( pSavepoint==db->pSavepoint );'), (52109, 2, u'-  assert( desiredAutoCommit==1 || desiredAutoCommit==0 );'), (52110, 2, u'-  assert( desiredAutoCommit==1 || rollback==0 );'), (52112, 2, u'-  assert( db->activeVdbeCnt>0 );  /* At least this one VM is active */'), (52131, 2, u'-      assert( desiredAutoCommit==1 );'), (52143, 2, u'-    assert( db->nStatement==0 );'), (52187, 2, u'-  assert( i>=0 && i<db->nDb );'), (52188, 2, u'-  assert( (p->btreeMask & (1<<i))!=0 );'), (52227, 2, u'-  assert( pOp->p3<SQLITE_N_BTREE_META );'), (52232, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (52233, 2, u'-  assert( db->aDb[iDb].pBt!=0 );'), (52234, 2, u'-  assert( (p->btreeMask & (1<<iDb))!=0 );'), (52261, 2, u'-  assert( pOp->p2<SQLITE_N_BTREE_META );'), (52262, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (52263, 2, u'-  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (52265, 2, u'-  assert( pDb->pBt!=0 );'), (52304, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (52305, 2, u'-  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (52399, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (52400, 2, u'-  assert( (p->btreeMask & (1<<iDb))!=0 );'), (52403, 2, u'-  assert( pX!=0 );'), (52413, 2, u'-    assert( p2>0 );'), (52414, 2, u'-    assert( p2<=p->nMem );'), (52423, 2, u'-  assert( i>=0 );'), (52510, 2, u'-  assert( i>=0 );'), (52527, 2, u'-      assert( pOp->p4type==P4_KEYINFO );'), (52530, 2, u'-        assert( pgno==MASTER_ROOT+1 );'), (52572, 2, u'-  assert( i>=0 );'), (52590, 2, u'-  assert( i>=0 && i<p->nCursor );'), (52655, 2, u'-  assert( i>=0 && i<p->nCursor );'), (52656, 2, u'-  assert( pOp->p2!=0 );'), (52658, 2, u'-  assert( pC!=0 );'), (52684, 2, u'-        assert( (pIn3->flags & MEM_Real)!=0 );'), (52710, 2, u'-          assert( oc==OP_SeekLe || oc==OP_SeekGt );'), (52725, 2, u'-      assert( pOp->p4type==P4_INT32 );'), (52726, 2, u'-      assert( nField>0 );'), (52755, 2, u'-      assert( oc==OP_SeekLt || oc==OP_SeekLe );'), (52767, 2, u'-    assert( pOp->p2>0 );'), (52794, 2, u'-  assert( i>=0 && i<p->nCursor );'), (52796, 2, u'-  assert( pC!=0 );'), (52798, 2, u'-    assert( pC->isTable );'), (52843, 2, u'-  assert( i>=0 && i<p->nCursor );'), (52844, 2, u'-  assert( p->apCsr[i]!=0 );'), (52849, 2, u'-    assert( pC->isTable==0 );'), (52850, 2, u'-    assert( pIn3->flags & MEM_Blob );'), (52905, 2, u'-  assert( pOp->p4type==P4_INT32 );'), (52906, 2, u'-  assert( pOp->p4.i>0 && pOp->p4.i<=p->nMem );'), (52910, 2, u'-  assert( i>=0 && i<p->nCursor );'), (52912, 2, u'-  assert( pCx!=0 );'), (52921, 2, u'-    assert( pK->flags & MEM_Blob );'), (52932, 2, u'-    assert( pCx->deferredMoveto==0 );'), (52974, 2, u'-    assert( pIn3->flags&MEM_Int );'), (52997, 2, u'-  assert( i>=0 && i<p->nCursor );'), (52998, 2, u'-  assert( p->apCsr[i]!=0 );'), (53002, 2, u'-    assert( pIn3->flags & MEM_Int );'), (53003, 2, u'-    assert( p->apCsr[i]->isTable );'), (53012, 2, u'-      assert( pC->rowidIsValid==0 );'), (53018, 2, u'-    assert( pC->isTable );'), (53020, 2, u'-    assert( pC->rowidIsValid==0 );'), (53034, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53035, 2, u'-  assert( p->apCsr[i]!=0 );'), (53060, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53061, 2, u'-  assert( p->apCsr[i]!=0 );'), (53104, 2, u'-    assert( (sqlite3BtreeFlags(pC->pCursor) & BTREE_INTKEY)!=0 );'), (53105, 2, u'-    assert( (sqlite3BtreeFlags(pC->pCursor) & BTREE_ZERODATA)==0 );'), (53140, 2, u'-        assert( pOp->p3>0 && pOp->p3<=p->nMem ); /* P3 is a valid memory cell */'), (53144, 2, u'-        assert( (pMem->flags & MEM_Int)!=0 );  /* mem(P3) holds an integer */'), (53159, 2, u'-      assert( pOp->p3==0 );  /* SQLITE_FULL must have occurred prior to this */'), (53222, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53224, 2, u'-  assert( pC!=0 );'), (53225, 2, u'-  assert( pC->pCursor!=0 || pC->pseudoTable );'), (53226, 2, u'-  assert( pKey->flags & MEM_Int );'), (53227, 2, u'-  assert( pC->isTable );'), (53238, 2, u'-    assert( pData->flags & (MEM_Blob|MEM_Str) );'), (53283, 2, u'-    assert( pC->isTable );'), (53285, 2, u'-    assert( pC->iDb>=0 );'), (53315, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53317, 2, u'-  assert( pC!=0 );'), (53318, 2, u'-  assert( pC->pCursor!=0 );  /* Only valid for real tables, no pseudotables */'), (53324, 2, u'-    assert( pC->isTable );'), (53325, 2, u'-    assert( pC->rowidIsValid );  /* lastRowid set by previous OP_NotFound */'), (53340, 2, u'-    assert( pC->iDb>=0 );'), (53391, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53393, 2, u'-  assert( pC->isTable || pOp->opcode==OP_RowKey );'), (53394, 2, u'-  assert( pC->isIndex || pOp->opcode==OP_RowData );'), (53395, 2, u'-  assert( pC!=0 );'), (53396, 2, u'-  assert( pC->nullRow==0 );'), (53397, 2, u'-  assert( pC->pseudoTable==0 );'), (53398, 2, u'-  assert( pC->pCursor!=0 );'), (53404, 2, u'-    assert( !pC->isTable );'), (53441, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53443, 2, u'-  assert( pC!=0 );'), (53454, 2, u'-    assert( pC->pCursor!=0 );'), (53473, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53475, 2, u'-  assert( pC!=0 );'), (53498, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53500, 2, u'-  assert( pC!=0 );'), (53502, 2, u'-  assert( pCrsr!=0 );'), (53549, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53551, 2, u'-  assert( pC!=0 );'), (53562, 2, u'-  assert( pOp->p2>0 && pOp->p2<p->nOp );'), (53596, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (53602, 2, u'-  assert( pCrsr );'), (53604, 2, u'-  assert( pC->deferredMoveto==0 );'), (53636, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53637, 2, u'-  assert( p->apCsr[i]!=0 );'), (53638, 2, u'-  assert( pIn2->flags & MEM_Blob );'), (53640, 2, u'-    assert( pC->isTable==0 );'), (53646, 2, u'-      assert( pC->deferredMoveto==0 );'), (53663, 2, u'-  assert( pOp->p3>0 );'), (53664, 2, u'-  assert( pOp->p2>0 && pOp->p2+pOp->p3<=p->nMem+1 );'), (53665, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53666, 2, u'-  assert( p->apCsr[i]!=0 );'), (53678, 2, u'-    assert( pC->deferredMoveto==0 );'), (53698, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53699, 2, u'-  assert( p->apCsr[i]!=0 );'), (53704, 2, u'-    assert( pC->deferredMoveto==0 );'), (53705, 2, u'-    assert( pC->isTable==0 );'), (53749, 2, u'-  assert( i>=0 && i<p->nCursor );'), (53750, 2, u'-  assert( p->apCsr[i]!=0 );'), (53754, 2, u'-    assert( pC->deferredMoveto==0 );'), (53755, 2, u'-    assert( pOp->p5==0 || pOp->p5==1 );'), (53756, 2, u'-    assert( pOp->p4type==P4_INT32 );'), (53769, 2, u'-      assert( pOp->opcode==OP_IdxGE );'), (53818, 2, u'-    assert( iCnt==1 );'), (53819, 2, u'-    assert( (p->btreeMask & (1<<iDb))!=0 );'), (53852, 2, u'-  assert( (p->btreeMask & (1<<pOp->p2))!=0 );'), (53892, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (53893, 2, u'-  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (53895, 2, u'-  assert( pDb->pBt!=0 );'), (53922, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (53945, 2, u'-  assert( sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (53961, 2, u'-      assert( db->init.busy==0 );'), (53964, 2, u'-      assert( !db->mallocFailed );'), (53988, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (54061, 2, u'-  assert( nRoot>0 );'), (54064, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54066, 2, u'-  assert( (pnErr->flags & MEM_Int)!=0 );'), (54067, 2, u'-  assert( (pnErr->flags & (MEM_Str|MEM_Blob))==0 );'), (54073, 2, u'-  assert( pOp->p5<db->nDb );'), (54074, 2, u'-  assert( (p->btreeMask & (1<<pOp->p5))!=0 );'), (54081, 2, u'-    assert( z==0 );'), (54103, 2, u'-  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (54105, 2, u'-  assert( pOp->p2>0 && pOp->p2<=p->nMem );'), (54107, 2, u'-  assert( (pVal->flags & MEM_Int)!=0 );'), (54125, 2, u'-  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (54137, 2, u'-    assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54155, 2, u'-  assert( i>=0 );'), (54177, 2, u'-  assert( p->contextStackTop>=0 );'), (54211, 2, u'-  assert( pIn1->flags&MEM_Int );'), (54226, 2, u'-  assert( pIn1->flags&MEM_Int );'), (54241, 2, u'-  assert( pIn1->flags&MEM_Int );'), (54265, 2, u'-  assert( n>=0 );'), (54268, 2, u'-  assert( apVal || n==0 );'), (54274, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54285, 2, u'-    assert( pOp>p->aOp );'), (54286, 2, u'-    assert( pOp[-1].p4type==P4_COLLSEQ );'), (54287, 2, u'-    assert( pOp[-1].opcode==OP_CollSeq );'), (54313, 2, u'-  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (54315, 2, u'-  assert( (pMem->flags & ~(MEM_Null|MEM_Agg))==0 );'), (54354, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (54355, 2, u'-  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (54402, 2, u'-  assert( p1>=0 && p1<db->nDb );'), (54403, 2, u'-  assert( (p->btreeMask & (1<<p1))!=0 );'), (54404, 2, u'-  assert( isWriteLock==0 || isWriteLock==1 );'), (54476, 2, u'-  assert(pVtab && pModule);'), (54532, 2, u'-  assert( pCur->pVtabCursor );'), (54538, 2, u'-  assert( (pQuery->flags&MEM_Int)!=0 && pArgc->flags==MEM_Int );'), (54588, 2, u'-  assert( pCur->pVtabCursor );'), (54594, 2, u'-  assert( pModule->xRowid );'), (54621, 2, u'-  assert( pCur->pVtabCursor );'), (54622, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54630, 2, u'-  assert( pModule->xColumn );'), (54679, 2, u'-  assert( pCur->pVtabCursor );'), (54685, 2, u'-  assert( pModule->xNext );'), (54725, 2, u'-  assert( pVtab->pModule->xRename );'), (54771, 2, u'-  assert( pOp->p4type==P4_VTAB );'), (54794, 2, u'-      assert( nArg>1 && apArg[0] && (apArg[0]->flags&MEM_Null) );'), (54886, 2, u'-    assert( pc>=-1 && pc<p->nOp );'), (54906, 2, u'-  assert( rc );'), (54945, 2, u'-  assert( p->zErrMsg==0 );'), (54956, 2, u'-  assert( db->u1.isInterrupted );'), (55270, 2, u'-    assert( db == v->db );'), (55379, 2, u'-        assert(p->iSize<=p->nBuf);'), (55643, 2, u'-  assert( iOfst+iAmt<=p->endpoint.iOffset );'), (55688, 2, u'-  assert(iOfst==p->endpoint.iOffset);'), (55704, 2, u'-        assert( p->pFirst );'), (55707, 2, u'-        assert( !p->pFirst );'), (55728, 2, u'-  assert(size==0);'), (55759, 2, u'-  assert( 0 );                                                 /*NO_TEST*/'), (55796, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(p) );'), (56015, 2, u'-  assert( iCol>=0 && iCol<pEList->nExpr );'), (56017, 2, u'-  assert( pOrig!=0 );'), (56018, 2, u'-  assert( pOrig->flags & EP_Resolved );'), (56087, 2, u'-  assert( pNC ); /* the name context cannot be NULL. */'), (56088, 2, u'-  assert( pColumnToken && pColumnToken->z ); /* The Z in X.Y.Z cannot be NULL */'), (56114, 2, u'-        assert( pTab!=0 && pTab->zName!=0 );'), (56116, 2, u'-        assert( pTab->nCol>0 );'), (56181, 2, u'-        assert( pTriggerStack->pTab );'), (56186, 2, u'-        assert( pTriggerStack->pTab );'), (56240, 2, u'-          assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (56241, 2, u'-          assert( pExpr->x.pList==0 );'), (56242, 2, u'-          assert( pExpr->x.pSelect==0 );'), (56252, 2, u'-          assert( zTab==0 && zDb==0 );'), (56312, 2, u'-    assert( pMatch->iCursor==pExpr->iTable );'), (56329, 2, u'-    assert( pNC!=0 );'), (56334, 2, u'-      assert( pTopNC!=0 );'), (56361, 2, u'-  assert( pNC!=0 );'), (56363, 2, u'-  assert( pParse==pWalker->pParse );'), (56372, 2, u'-      assert( pSrcList->a[i].iCursor>=0 && pSrcList->a[i].iCursor<pParse->nTab);'), (56386, 2, u'-      assert( pSrcList && pSrcList->nSrc==1 );'), (56420, 2, u'-        assert( pRight->op==TK_DOT );'), (56444, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (56509, 2, u'-        assert( pNC->nRef>=nRef );'), (56592, 2, u'-  assert( sqlite3ExprIsInteger(pE, &i)==0 );'), (56682, 2, u'-    assert( pEList!=0 );'), (56698, 2, u'-            assert(pDup);'), (56763, 2, u'-  assert( pEList!=0 );  /* sqlite3SelectNew() guarantees this */'), (56860, 2, u'-  assert( p!=0 );'), (56885, 2, u'-    assert( (p->selFlags & SF_Expanded)!=0 );'), (56886, 2, u'-    assert( (p->selFlags & SF_Resolved)==0 );'), (56908, 2, u'-    assert( pEList!=0 );'), (56932, 2, u'-    assert( (p->selFlags & SF_Aggregate)==0 );'), (57120, 2, u'-  assert( p!=0 );'), (57166, 2, u'-    assert( pExpr->flags&EP_xIsSelect );'), (57181, 2, u'-    assert( pExpr->pTab && j<pExpr->pTab->nCol );'), (57269, 2, u'-    assert( aff1==0 || aff2==0 );'), (57280, 2, u'-  assert( pExpr->op==TK_EQ || pExpr->op==TK_IN || pExpr->op==TK_LT ||'), (57283, 2, u'-  assert( pExpr->pLeft );'), (57341, 2, u'-  assert( pLeft );'), (57343, 2, u'-    assert( pLeft->pColl );'), (57346, 2, u'-    assert( pRight->pColl );'), (57536, 2, u'-    assert( pToken->dyn==0 );'), (57637, 2, u'-  assert( pRight!=0 );'), (57638, 2, u'-  assert( pLeft!=0 );'), (57655, 2, u'-  assert( pToken );'), (57663, 2, u'-  assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (57664, 2, u'-  assert( pToken->dyn==0 );'), (57693, 2, u'-  assert( pToken->n>=1 );'), (57694, 2, u'-  assert( pToken->z!=0 );'), (57695, 2, u'-  assert( pToken->z[0]!=0 );'), (57744, 2, u'-        assert( pParse->apVarExpr!=0 );'), (57796, 2, u'-    assert( (p->vvaFlags & EVVA_ReadOnlyToken)==0 );'), (57892, 2, u'-    assert( pzBuffer==0 || isReduced );'), (57911, 2, u'-        assert( ExprHasProperty(p, EP_Reduced)==0 );'), (58134, 2, u'-  assert( p==0 );'), (58156, 2, u'-    assert( pList->nAlloc==0 );'), (58168, 2, u'-  assert( pList->a!=0 );'), (58209, 2, u'-  assert( pList->a!=0 || (pList->nExpr==0 && pList->nAlloc==0) );'), (58210, 2, u'-  assert( pList->nExpr<=pList->nAlloc );'), (58391, 2, u'-  assert( pSrc!=0 );'), (58492, 2, u'-    assert(v);'), (58610, 2, u'-    assert( testAddr>0 || pParse->db->mallocFailed );'), (58653, 2, u'-        assert( !isRowid );'), (58656, 2, u'-        assert( (pExpr->iTable&0x0000FFFF)==pExpr->iTable );'), (58703, 2, u'-          assert( pParse->disableColCache>0 );'), (58734, 2, u'-      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (58784, 2, u'-  assert( z || v==0 || sqlite3VdbeDb(v)->mallocFailed );'), (58785, 2, u'-  assert( !z || !sqlite3Isdigit(z[n]) );'), (58819, 2, u'-    assert( !sqlite3Isdigit(z[n]) );'), (58874, 2, u'-  assert( v!=0 );'), (59013, 2, u'-  assert( pOp || pParse->db->mallocFailed );'), (59048, 2, u'-  assert( iAlias>0 && iAlias<=pParse->nAlias );'), (59083, 2, u'-  assert( v!=0 || db->mallocFailed );'), (59084, 2, u'-  assert( target>0 && target<=pParse->nMem );'), (59097, 2, u'-        assert( pCol->iMem>0 );'), (59110, 2, u'-        assert( pParse->ckBase>0 );'), (59143, 2, u'-      assert( pExpr->token.n>=3 );'), (59144, 2, u"-      assert( pExpr->token.z[0]=='x' || pExpr->token.z[0]=='X' );"), (59145, 2, u"-      assert( pExpr->token.z[1]=='\\'' );"), (59146, 2, u"-      assert( pExpr->token.z[pExpr->token.n-1]=='\\'' );"), (59193, 2, u'-      assert( to_op==OP_ToText    || aff!=SQLITE_AFF_TEXT    );'), (59194, 2, u'-      assert( to_op==OP_ToBlob    || aff!=SQLITE_AFF_NONE    );'), (59195, 2, u'-      assert( to_op==OP_ToNumeric || aff!=SQLITE_AFF_NUMERIC );'), (59196, 2, u'-      assert( to_op==OP_ToInt     || aff!=SQLITE_AFF_INTEGER );'), (59197, 2, u'-      assert( to_op==OP_ToReal    || aff!=SQLITE_AFF_REAL    );'), (59219, 2, u'-      assert( TK_LT==OP_Lt );'), (59220, 2, u'-      assert( TK_LE==OP_Le );'), (59221, 2, u'-      assert( TK_GT==OP_Gt );'), (59222, 2, u'-      assert( TK_GE==OP_Ge );'), (59223, 2, u'-      assert( TK_EQ==OP_Eq );'), (59224, 2, u'-      assert( TK_NE==OP_Ne );'), (59251, 2, u'-      assert( TK_AND==OP_And );'), (59252, 2, u'-      assert( TK_OR==OP_Or );'), (59253, 2, u'-      assert( TK_PLUS==OP_Add );'), (59254, 2, u'-      assert( TK_MINUS==OP_Subtract );'), (59255, 2, u'-      assert( TK_REM==OP_Remainder );'), (59256, 2, u'-      assert( TK_BITAND==OP_BitAnd );'), (59257, 2, u'-      assert( TK_BITOR==OP_BitOr );'), (59258, 2, u'-      assert( TK_SLASH==OP_Divide );'), (59259, 2, u'-      assert( TK_LSHIFT==OP_ShiftLeft );'), (59260, 2, u'-      assert( TK_RSHIFT==OP_ShiftRight );'), (59261, 2, u'-      assert( TK_CONCAT==OP_Concat );'), (59282, 2, u'-      assert( pLeft );'), (59299, 2, u'-      assert( TK_BITNOT==OP_BitNot );'), (59300, 2, u'-      assert( TK_NOT==OP_Not );'), (59312, 2, u'-      assert( TK_ISNULL==OP_IsNull );'), (59313, 2, u'-      assert( TK_NOTNULL==OP_NotNull );'), (59346, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (59358, 2, u'-      assert( pDef!=0 );'), (59579, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList );'), (59580, 2, u'-      assert((pExpr->x.pList->nExpr % 2) == 0);'), (59581, 2, u'-      assert(pExpr->x.pList->nExpr > 0);'), (59599, 2, u'-          assert( pTest!=0 );'), (59619, 2, u'-      assert( pParse->disableColCache>0 );'), (59631, 2, u'-         assert( pExpr->affinity==OE_Rollback ||'), (59638, 2, u'-         assert( pExpr->affinity == OE_Ignore );'), (59681, 2, u'-  assert( target>0 && target<=pParse->nMem );'), (59683, 2, u'-  assert( pParse->pVdbe || pParse->db->mallocFailed );'), (59706, 2, u'-  assert( target>0 );'), (59796, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (59847, 2, u'-  assert( pList!=0 );'), (59848, 2, u'-  assert( target>0 );'), (59888, 2, u'-  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (59899, 2, u'-      assert( pParse->disableColCache>0 );'), (59910, 2, u'-      assert( pParse->disableColCache>0 );'), (59925, 2, u'-      assert( TK_LT==OP_Lt );'), (59926, 2, u'-      assert( TK_LE==OP_Le );'), (59927, 2, u'-      assert( TK_GT==OP_Gt );'), (59928, 2, u'-      assert( TK_GE==OP_Ge );'), (59929, 2, u'-      assert( TK_EQ==OP_Eq );'), (59930, 2, u'-      assert( TK_NE==OP_Ne );'), (59948, 2, u'-      assert( TK_ISNULL==OP_IsNull );'), (59949, 2, u'-      assert( TK_NOTNULL==OP_NotNull );'), (59972, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (60018, 2, u'-  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (60043, 2, u'-  assert( pExpr->op!=TK_ISNULL || op==OP_NotNull );'), (60044, 2, u'-  assert( pExpr->op!=TK_NOTNULL || op==OP_IsNull );'), (60045, 2, u'-  assert( pExpr->op!=TK_NE || op==OP_Eq );'), (60046, 2, u'-  assert( pExpr->op!=TK_EQ || op==OP_Ne );'), (60047, 2, u'-  assert( pExpr->op!=TK_LT || op==OP_Ge );'), (60048, 2, u'-  assert( pExpr->op!=TK_LE || op==OP_Gt );'), (60049, 2, u'-  assert( pExpr->op!=TK_GT || op==OP_Le );'), (60050, 2, u'-  assert( pExpr->op!=TK_GE || op==OP_Lt );'), (60059, 2, u'-      assert( pParse->disableColCache>0 );'), (60070, 2, u'-      assert( pParse->disableColCache>0 );'), (60124, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (60339, 2, u'-            assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (60525, 2, u'-      assert( len>0 );'), (60584, 2, u'-      assert( len>0 );'), (60675, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (60677, 2, u'-  assert( iDb>=0 );'), (60683, 2, u'-    assert( iTrigDb==iDb || iTrigDb==1 );'), (60729, 2, u'-  assert( pSrc->nSrc==1 );'), (60730, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (60897, 2, u'-  assert( pNew );'), (60899, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (60906, 2, u'-  assert( pTab );'), (61009, 2, u'-  assert( pParse->pNewTable==0 );'), (61010, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (61028, 2, u'-  assert( pTab->addColOffset>0 );'), (61044, 2, u'-  assert( pNew->nCol>0 );'), (61046, 2, u'-  assert( nAlloc>=pNew->nCol && nAlloc%8==0 && nAlloc-pNew->nCol<8 );'), (61118, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (61119, 2, u'-  assert( sqlite3VdbeDb(v)==db );'), (61184, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (61186, 2, u'-  assert( iDb>=0 );'), (61209, 2, u'-    assert( iDb==sqlite3SchemaToIndex(pParse->db, pIdx->pSchema) );'), (61343, 2, u'-  assert( pTab!=0 );'), (61344, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (61375, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (61442, 2, u'-  assert( argc==2 );'), (61474, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (61475, 2, u'-  assert( db->aDb[iDb].pBt!=0 );'), (61476, 2, u'-  assert( sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (61706, 2, u'-    assert( iDb>=2 );'), (61813, 2, u'-  assert( db->mallocFailed || pAuthArg );'), (61845, 2, u'-  assert( v || db->mallocFailed );'), (61848, 2, u'-    assert( pFunc->nArg==-1 || (pFunc->nArg&0xff)==pFunc->nArg );'), (61926, 2, u'-  assert( db->nDb>iDb );'), (62188, 2, u'-    assert( pExpr->iTable==pStack->newIdx || pExpr->iTable==pStack->oldIdx );'), (62193, 2, u'-    assert( pExpr->iColumn<pTab->nCol );'), (62196, 2, u'-    assert( pTab->iPKey<pTab->nCol );'), (62201, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (62478, 2, u'-    assert( pParse->disableColCache==0 );  /* Disables and re-enables match */'), (62515, 2, u'-  assert( pParse->nested<10 );  /* Nesting should only be of limited depth */'), (62548, 2, u'-  assert( zName!=0 );'), (62616, 2, u'-    assert( pSchema || (j==1 && !db->aDb[1].pBt) );'), (62648, 2, u'-  assert( pOld==0 || pOld==p );'), (62693, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (62701, 2, u'-      assert(i==1 || (pDb->pBt && sqlite3BtreeHoldsMutex(pDb->pBt)));'), (62706, 2, u'-  assert( iDb==0 );'), (62758, 2, u'-  assert( pTable!=0 );'), (62795, 2, u'-  assert( pTable->nRef==0 );'), (62801, 2, u'-    assert( pIndex->pSchema==pTable->pSchema );'), (62811, 2, u'-    assert( sqlite3HashFind(&pTable->pSchema->aFKey,'), (62839, 2, u'-  assert( db!=0 );'), (62840, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (62841, 2, u'-  assert( zTabName && zTabName[0] );'), (62975, 2, u'-    assert( db->init.iDb==0 || db->init.busy );'), (63065, 2, u'-  assert( (isTemp & 1)==isTemp );'), (63466, 2, u'-    assert( autoInc==0 || autoInc==1 );'), (63529, 2, u'-      assert( pIdx->nColumn==1 );'), (63770, 2, u'-      assert( (int)(sqlite3Strlen30(z)+k+1)<=n );'), (63814, 2, u'-  assert( !db->init.busy || !pSelect );'), (63900, 2, u'-      assert(pParse->nTab==1);'), (63910, 2, u'-        assert( p->aCol==0 );'), (63978, 2, u'-      assert( p==pOld );  /* Malloc must have failed inside HashInsert() */'), (64001, 2, u'-      assert( !pSelect && pCons && pEnd );'), (64102, 2, u'-  assert( pTable );'), (64131, 2, u'-  assert( pTable->nCol>=0 );'), (64140, 2, u'-  assert( pTable->pSelect );'), (64159, 2, u'-      assert( pTable->aCol==0 );'), (64306, 2, u'-      assert( pIdx->pSchema==pTab->pSchema );'), (64335, 2, u'-  assert( pName->nSrc==1 );'), (64346, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (64431, 2, u'-      assert( pTrigger->pSchema==pTab->pSchema ||'), (64522, 2, u'-  assert( pTo!=0 );'), (64620, 2, u'-  assert( isDeferred==0 || isDeferred==1 );'), (64752, 2, u'-    assert( pName1 && pName2 );'), (64774, 2, u'-      assert(0);'), (64779, 2, u'-    assert( db->aDb[iDb].pSchema==pTab->pSchema );'), (64781, 2, u'-    assert( pName==0 );'), (64953, 2, u'-      assert( pListItem->pExpr->pColl );'), (64989, 2, u'-      assert( pIdx->onError!=OE_None );'), (64990, 2, u'-      assert( pIdx->autoIndex );'), (64991, 2, u'-      assert( pIndex->onError!=OE_None );'), (65032, 2, u'-      assert( p==pIndex );  /* Malloc must have failed */'), (65186, 2, u'-  assert( a!=0 );'), (65213, 2, u'-  assert( pName->nSrc==1 );'), (65399, 2, u'-  assert( iStart>=0 );'), (65400, 2, u'-  assert( nExtra>=1 );'), (65402, 2, u'-    assert( db->mallocFailed );'), (65414, 2, u'-      assert( db->mallocFailed );'), (65505, 2, u'-  assert(pList || pParse->db->mallocFailed );'), (65589, 2, u'-    assert( pItem->notIndexed==0 && pItem->zIndex==0 );'), (65692, 2, u'-    assert( !SAVEPOINT_BEGIN && SAVEPOINT_RELEASE==1 && SAVEPOINT_ROLLBACK==2 );'), (65725, 2, u'-    assert( (db->flags & SQLITE_InTrans)==0 || db->autoCommit );'), (65726, 2, u'-    assert( db->aDb[1].pSchema );'), (65767, 2, u'-    assert( iDb<db->nDb );'), (65768, 2, u'-    assert( db->aDb[iDb].pBt!=0 || iDb==1 );'), (65769, 2, u'-    assert( iDb<SQLITE_MAX_ATTACHED+2 );'), (65853, 2, u'-    assert( pDb!=0 );'), (65897, 2, u'-    assert( pName1->z );'), (65952, 2, u'-    assert( &pKey->aSortOrder[nCol]==&(((u8 *)pKey)[nBytes]) );'), (65955, 2, u'-      assert( zColl );'), (65996, 2, u'-  assert( !db->xCollNeeded || !db->xCollNeeded16 );'), (66077, 2, u'-  assert( !p || p->xCmp );'), (66103, 2, u'-    assert( p==pColl );'), (66151, 2, u'-      assert( pDel==0 || pDel==pColl );'), (66188, 2, u'-  assert( SQLITE_UTF8==1 && SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (66189, 2, u'-  assert( enc>=SQLITE_UTF8 && enc<=SQLITE_UTF16BE );'), (66312, 2, u'-  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (66395, 2, u'-    assert( pTab->dbMem==0 );'), (66453, 2, u'-  assert( pItem && pSrc->nSrc==1 );'), (66504, 2, u'-  assert( opcode==OP_OpenWrite || opcode==OP_OpenRead );'), (66583, 2, u'-    assert( pOffset == 0 );'), (66682, 2, u'-  assert( pTabList->nSrc==1 );'), (66711, 2, u'-  assert( iDb<db->nDb );'), (66714, 2, u'-  assert( rcauth==SQLITE_OK || rcauth==SQLITE_DENY || rcauth==SQLITE_IGNORE );'), (66718, 2, u'-  assert(!isView || pTrigger);'), (66734, 2, u'-  assert( pTabList->nSrc==1 );'), (66805, 2, u'-    assert( !isView );'), (66811, 2, u'-      assert( pIdx->pSchema==pTab->pSchema );'), (67102, 2, u'-  assert( argc>1 );'), (67105, 2, u'-  assert( pColl );'), (67106, 2, u'-  assert( mask==-1 || mask==0 );'), (67150, 2, u'-  assert( argc==1 );'), (67181, 2, u'-  assert( argc==1 );'), (67231, 2, u'-  assert( argc==3 || argc==2 );'), (67242, 2, u'-    assert( len==sqlite3_value_bytes(argv[0]) );'), (67280, 2, u'-  assert( p1>=0 && p2>=0 );'), (67307, 2, u'-  assert( argc==1 || argc==2 );'), (67332, 2, u'-  assert( nByte>0 );'), (67358, 2, u'-  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (67378, 2, u'-  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (67446, 2, u'-  assert( argc==1 );'), (67591, 2, u'-        assert( esc==0 );         /* This is GLOB, not LIKE */'), (67592, 2, u"-        assert( matchSet<0x80 );  /* '[' is a single-byte character */"), (67621, 2, u'-      assert( esc==0 );    /* This only occurs for GLOB, not LIKE */'), (67713, 2, u'-  assert( zB==sqlite3_value_text(argv[0]) );  /* Encoding did not change */'), (67787, 2, u'-  assert( argc==1 );'), (67799, 2, u'-      assert( zBlob==sqlite3_value_blob(argv[0]) ); /* No encoding change */'), (67840, 2, u'-      assert( sqlite3_value_type(argv[0])==SQLITE_NULL );'), (67859, 2, u'-  assert( argc==1 );'), (67863, 2, u'-  assert( pBlob==sqlite3_value_blob(argv[0]) );  /* No encoding change */'), (67886, 2, u'-  assert( argc==1 );'), (67920, 2, u'-  assert( argc==3 );'), (67925, 2, u'-  assert( zStr==sqlite3_value_text(argv[0]) );  /* No encoding change */'), (67928, 2, u'-    assert( sqlite3_value_type(argv[1])==SQLITE_NULL'), (67933, 2, u'-    assert( sqlite3_value_type(argv[1])!=SQLITE_NULL );'), (67938, 2, u'-  assert( zPattern==sqlite3_value_text(argv[1]) );  /* No encoding change */'), (67942, 2, u'-  assert( zRep==sqlite3_value_text(argv[2]) );'), (67944, 2, u'-  assert( nOut<SQLITE_MAX_LENGTH );'), (67976, 2, u'-  assert( j+nStr-i+1==nOut );'), (67979, 2, u'-  assert( j<=nOut );'), (68008, 2, u'-  assert( zIn==sqlite3_value_text(argv[0]) );'), (68091, 2, u'-  assert( argc==1 );'), (68169, 2, u'-  assert( argc==1 );'), (68242, 2, u'-  assert( argc==1 || p==0 || p->n>0x7fffffff'), (68311, 2, u'-  assert( argc==1 || argc==2 );'), (68360, 2, u'-    assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (68418, 2, u'-  assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (68430, 2, u'-  assert( (char*)&likeInfoAlt == (char*)&likeInfoAlt.matchAll );'), (68431, 2, u'-  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );'), (68432, 2, u'-  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );'), (68647, 2, u'-    assert( pOp!=0 );'), (68662, 2, u'-      assert( pOp->p4.pVtab!=0 );'), (68663, 2, u'-      assert( pOp->p4type==P4_VTAB );'), (68701, 2, u'-    assert( v );'), (68754, 2, u'-    assert( v );'), (68944, 2, u'-  assert( pTabList->nSrc==1 );'), (68952, 2, u'-  assert( iDb<db->nDb );'), (68974, 2, u'-  assert( (pTrigger && tmask) || (pTrigger==0 && tmask==0) );'), (68983, 2, u'-  assert( pTab!=0 );'), (69016, 2, u'-    assert( !pTrigger );'), (69017, 2, u'-    assert( pList==0 );'), (69078, 2, u'-    assert( pSelect->pEList );'), (69080, 2, u'-    assert( dest.nMem==nColumn );'), (69134, 2, u'-    assert( useTempTable==0 );'), (69296, 2, u'-      assert( pSelect==0 );  /* Otherwise useTempTable is true */'), (69307, 2, u'-    assert(!IsVirtual(pTab));'), (69325, 2, u'-        assert( pSelect==0 ); /* Otherwise useTempTable is true */'), (69418, 2, u'-          assert( IsVirtual(pTab) );'), (69636, 2, u'-  assert( v!=0 );'), (69637, 2, u'-  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (69658, 2, u'-    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (69737, 2, u'-          assert( seenReplace==0 );'), (69798, 2, u'-    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (69831, 2, u'-        assert( seenReplace==0 );'), (69875, 2, u'-  assert( v!=0 );'), (69876, 2, u'-  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (69929, 2, u'-  assert( v!=0 );'), (69933, 2, u'-    assert( pIdx->pSchema==pTab->pSchema );'), (69983, 2, u'-  assert( pDest && pSrc );'), (69984, 2, u'-  assert( pDest->pTable!=pSrc->pTable );'), (70078, 2, u'-  assert(pSelect->pSrc);   /* allocated even if there is no FROM clause */'), (70099, 2, u'-  assert( pSelect->pOffset==0 );  /* Must be so if pLimit==0 */'), (70107, 2, u'-  assert( pEList!=0 );'), (70111, 2, u'-  assert( pEList->a[0].pExpr );'), (70220, 2, u'-    assert( (pDest->tabFlags & TF_Autoincrement)==0 );'), (70232, 2, u'-    assert( pSrcIdx );'), (70327, 2, u'-    assert( rc==SQLITE_OK || pStmt==0 );'), (70358, 2, u'-            assert( azCols[i]!=0 );'), (70412, 2, u'-  assert( (rc&db->errMask)==rc );'), (71241, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (71340, 2, u'-    assert( (rc&0xff)==rc );'), (71605, 2, u'-      assert( v!=0 );  /* Already allocated by sqlite3Pragma() */'), (71641, 2, u'-                      assert( action==OE_Restrict ); break;'), (71700, 2, u'-  assert( pId2 );'), (71769, 2, u'-    assert( pBt!=0 );'), (71796, 2, u'-    assert( pBt!=0 );'), (71848, 2, u'-        assert(pDb==&db->aDb[0]);'), (71859, 2, u'-    assert(eMode==PAGER_LOCKINGMODE_NORMAL||eMode==PAGER_LOCKINGMODE_EXCLUSIVE);'), (71906, 2, u'-        assert(pDb==&db->aDb[0]);'), (71918, 2, u'-    assert( eMode==PAGER_JOURNALMODE_DELETE'), (71959, 2, u'-    assert( pBt!=0 );'), (71973, 2, u'-      assert( eAuto>=0 && eAuto<=2 );'), (72249, 2, u'-          assert( p->z );'), (72277, 2, u'-        assert( pTab->nCol>cnum );'), (72321, 2, u'-      assert( db->aDb[i].zName!=0 );'), (72623, 2, u'-      assert( encnames[SQLITE_UTF8].enc==SQLITE_UTF8 );'), (72624, 2, u'-      assert( encnames[SQLITE_UTF16LE].enc==SQLITE_UTF16LE );'), (72625, 2, u'-      assert( encnames[SQLITE_UTF16BE].enc==SQLITE_UTF16BE );'), (72691, 2, u'-        assert(iDb<=0);'), (72895, 2, u'-  assert( argc==3 );'), (72897, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (72904, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (72916, 2, u'-    assert( db->init.busy );'), (72921, 2, u'-    assert( rc!=SQLITE_OK || zErr==0 );'), (73002, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (73003, 2, u'-  assert( db->aDb[iDb].pSchema );'), (73004, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (73005, 2, u'-  assert( iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (73150, 2, u'-  assert( db->init.busy );'), (73227, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (73267, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (73292, 2, u'-    assert( sqlite3_mutex_held(db->mutex) );'), (73339, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (73346, 2, u'-    assert( i>=0 && i<db->nDb );'), (73368, 2, u'-  assert( ppStmt && *ppStmt==0 );'), (73369, 2, u'-  assert( !db->mallocFailed );'), (73370, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (73398, 2, u'-      assert( sqlite3BtreeHoldsMutex(pBt) );'), (73475, 2, u'-  assert( db->init.busy==0 || saveSqlFlag==0 );'), (73482, 2, u'-    assert(!(*ppStmt));'), (73495, 2, u'-  assert( (rc&db->errMask)==rc );'), (73507, 2, u'-  assert( ppStmt!=0 );'), (73534, 2, u'-  assert( sqlite3_mutex_held(sqlite3VdbeDb(p)->mutex) );'), (73536, 2, u'-  assert( zSql!=0 );  /* Reprepare only called for prepare_v2() statements */'), (73538, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (73544, 2, u'-    assert( pNew==0 );'), (73547, 2, u'-    assert( pNew!=0 );'), (73574, 2, u'-  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73586, 2, u'-  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73611, 2, u'-  assert( ppStmt );'), (73654, 2, u'-  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73666, 2, u'-  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73740, 2, u'-  assert( db->mallocFailed || !pOffset || pLimit ); /* OFFSET implies LIMIT */'), (73836, 2, u'-    assert( pB!=0 );'), (74217, 2, u'-  assert( v );'), (74219, 2, u'-  assert( pEList!=0 );'), (74237, 2, u'-    assert( pDest->nMem==nResultCol );'), (74257, 2, u'-    assert( pEList!=0 );'), (74258, 2, u'-    assert( pEList->nExpr==nColumn );'), (74318, 2, u'-      assert( nColumn==1 );'), (74349, 2, u'-      assert( nColumn==1 );'), (74387, 2, u'-      assert( eDest==SRT_Discard );'), (74494, 2, u'-      assert( nColumn==1 );'), (74501, 2, u'-      assert( nColumn==1 );'), (74515, 2, u'-        assert( regRow!=pDest->iMem+i );'), (74536, 2, u'-  assert( p->iLimit==0 );'), (74616, 2, u'-      assert( pTab );'), (74636, 2, u'-        assert( !pS );'), (74638, 2, u'-        assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (74663, 2, u'-      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (74674, 2, u'-    assert( pzOriginTab && pzOriginCol );'), (74743, 2, u'-  assert( v!=0 );'), (74763, 2, u'-      assert( j<pTabList->nSrc );'), (74766, 2, u'-      assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (74841, 2, u'-    assert( p->pRight==0 || p->pRight->token.z==0 || p->pRight->token.z[0]!=0 );'), (74921, 2, u'-  assert( pSelect!=0 );'), (74922, 2, u'-  assert( (pSelect->selFlags & SF_Resolved)!=0 );'), (74923, 2, u'-  assert( nCol==pSelect->pEList->nExpr || db->mallocFailed );'), (75131, 2, u'-  assert( p && p->pPrior );  /* Calling function guarantees this much */'), (75134, 2, u'-  assert( pPrior->pRightmost!=pPrior );'), (75135, 2, u'-  assert( pPrior->pRightmost==p->pRightmost );'), (75151, 2, u'-  assert( v!=0 );  /* The VDBE already created by calling function */'), (75156, 2, u'-    assert( p->pEList );'), (75164, 2, u'-  assert( p->pEList && pPrior->pEList );'), (75183, 2, u'-      assert( !pPrior->pLimit );'), (75226, 2, u'-        assert( p->pLimit==0 );      /* Not allowed on leftward elements */'), (75227, 2, u'-        assert( p->pOffset==0 );     /* Not allowed on leftward elements */'), (75234, 2, u'-        assert( p->pOrderBy==0 );'), (75236, 2, u'-        assert( p->addrOpenEphm[0] == -1 );'), (75239, 2, u'-        assert( p->pEList );'), (75244, 2, u'-      assert( !pPrior->pOrderBy );'), (75256, 2, u'-        assert( p->op==TK_UNION );'), (75287, 2, u'-        assert( p->pEList );'), (75321, 2, u'-      assert( p->pOrderBy==0 );'), (75324, 2, u'-      assert( p->addrOpenEphm[0] == -1 );'), (75327, 2, u'-      assert( p->pEList );'), (75340, 2, u'-      assert( p->addrOpenEphm[1] == -1 );'), (75361, 2, u'-      assert( p->pEList );'), (75402, 2, u'-    assert( p->pRightmost==p );'), (75427, 2, u'-          assert( pLoop->addrOpenEphm[1]<0 );'), (75525, 2, u'-      assert( pIn->nMem==1 );'), (75551, 2, u'-      assert( pIn->nMem==1 );'), (75735, 2, u'-  assert( p->pOrderBy!=0 );'), (75736, 2, u'-  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */'), (75748, 2, u'-  assert( pPrior->pOrderBy==0 );'), (75750, 2, u'-  assert( pOrderBy );'), (75761, 2, u'-        assert( pItem->iCol>0 );'), (75786, 2, u'-      assert( pItem->iCol>0  && pItem->iCol<=p->pEList->nExpr );'), (75826, 2, u'-    assert( nOrderBy>=nExpr || db->mallocFailed );'), (76066, 2, u'-      assert( pEList!=0 && pExpr->iColumn<pEList->nExpr );'), (76067, 2, u'-      assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (76069, 2, u'-      assert( pNew!=0 );'), (76071, 2, u'-      assert( pExpr->pLeft==0 );'), (76073, 2, u'-      assert( pExpr->pRight==0 );'), (76081, 2, u'-      assert( pExpr->x.pList==0 && pExpr->x.pSelect==0 );'), (76130, 2, u'-  assert( pSrc );  /* Even for (SELECT 1) we have: pSrc!=0 but pSrc->nSrc==0 */'), (76268, 2, u'-  assert( p!=0 );'), (76269, 2, u'-  assert( p->pPrior==0 );  /* Unable to flatten compound queries */'), (76271, 2, u'-  assert( pSrc && iFrom>=0 && iFrom<pSrc->nSrc );'), (76275, 2, u'-  assert( pSub!=0 );'), (76279, 2, u'-  assert( pSubSrc );'), (76488, 2, u'-      assert( pParent==p );  /* First time through the loop */'), (76491, 2, u'-      assert( pParent!=p );  /* 2nd and subsequent times through the loop */'), (76494, 2, u'-        assert( db->mallocFailed );'), (76556, 2, u'-      assert( pParent->pOrderBy==0 );'), (76568, 2, u'-      assert( pParent->pHaving==0 );'), (76574, 2, u'-      assert( pParent->pGroupBy==0 );'), (76652, 2, u'-  assert( !p->pGroupBy );'), (76661, 2, u'-  assert( pTab && !pTab->pSelect && pExpr );'), (76752, 2, u'-      assert( i==0 );'), (76759, 2, u'-      assert( pSel!=0 );'), (76760, 2, u'-      assert( pFrom->pTab==0 );'), (76774, 2, u'-      assert( pFrom->pTab==0 );'), (76879, 2, u'-              assert(IsVirtual(pTab));'), (77000, 2, u'-  assert( p->selFlags & SF_Resolved );'), (77010, 2, u'-        assert( pSel );'), (77089, 2, u'-      assert( !ExprHasProperty(pE, EP_xIsSelect) );'), (77113, 2, u'-    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (77135, 2, u'-    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (77146, 2, u'-      assert( nArg==1 );'), (77153, 2, u'-      assert( pList!=0 );  /* pList!=0 if pF->pFunc has NEEDCOLL */'), (77268, 2, u'-    assert(pDest->eDest==SRT_Exists || pDest->eDest==SRT_Union ||'), (77329, 2, u'-      assert( pItem->isPopulated==0 );'), (77425, 2, u'-    assert( isAgg || pGroupBy );'), (77453, 2, u'-    assert(!isDistinct);'), (77508, 2, u'-      assert( !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) );'), (77802, 2, u'-          assert( !ExprHasProperty(p->pEList->a[0].pExpr, EP_xIsSelect) );'), (78117, 2, u'-  assert( sizeof(res.azResult[0])>= sizeof(res.nData) );'), (78161, 2, u'-    assert( azResult!=0 );'), (78259, 2, u'-  assert( pName1!=0 );   /* pName1->z might be NULL, but not pName1 itself */'), (78260, 2, u'-  assert( pName2!=0 );'), (78261, 2, u'-  assert( op==TK_INSERT || op==TK_UPDATE || op==TK_DELETE );'), (78262, 2, u'-  assert( op>0 && op<0xff );'), (78294, 2, u'-  assert( pTableName->nSrc==1 );'), (78382, 2, u'-  assert( pParse->pNewTrigger==0 );'), (78393, 2, u'-    assert( pParse->pNewTrigger==pTrigger );'), (78460, 2, u'-      assert( pTab!=0 );'), (78468, 2, u'-  assert( !pParse->pNewTrigger );'), (78548, 2, u'-  assert(pEList == 0 || pSelect == 0);'), (78549, 2, u'-  assert(pEList != 0 || pSelect != 0 || db->mallocFailed);'), (78658, 2, u'-  assert( pName->nSrc==1 );'), (78700, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (78702, 2, u'-  assert( pTable );'), (78703, 2, u'-  assert( pTable->pSchema==pTrigger->pSchema || iDb==1 );'), (78719, 2, u'-  assert( pTable!=0 );'), (78801, 2, u'-  assert( pList==0 || IsVirtual(pTab)==0 );'), (78833, 2, u'-    assert( iDb<pParse->db->nDb );'), (78857, 2, u'-  assert( pTriggerStep!=0 );'), (78858, 2, u'-  assert( v!=0 );'), (78908, 2, u'-        assert(0);'), (78966, 2, u'-  assert(op == TK_UPDATE || op == TK_INSERT || op == TK_DELETE);'), (78967, 2, u'-  assert(tr_tm == TRIGGER_BEFORE || tr_tm == TRIGGER_AFTER );'), (78969, 2, u'-  assert(newIdx != -1 || oldIdx != -1);'), (79108, 2, u'-    assert( i<pTab->nCol );'), (79179, 2, u'-  assert( pTabList->nSrc==1 );'), (79441, 2, u'-        assert( pParse->nTab>iCur+i+1 );'), (79683, 2, u'-  assert( pTab->iPKey<0 );'), (79697, 2, u'-  assert( v );'), (79858, 2, u'-  assert( strcmp(db->aDb[db->nDb-1].zName,"vacuum_db")==0 );'), (79981, 2, u'-    assert( 1==sqlite3BtreeIsInTrans(pTemp) );'), (79982, 2, u'-    assert( 1==sqlite3BtreeIsInTrans(pMain) );'), (80137, 2, u'-  assert( pVtab->nRef>0 );'), (80139, 2, u'-  assert(db);'), (80140, 2, u'-  assert( sqlite3SafetyCheckOk(db) );'), (80162, 2, u'-    assert( p->pMod && p->pMod->pModule );'), (80224, 2, u'-  assert( 0==pTable->pIndex );'), (80228, 2, u'-  assert( iDb>=0 );'), (80347, 2, u'-      assert( pTab==pOld );  /* Malloc must have failed inside HashInsert() */'), (80375, 2, u'-    assert(pArg->z < p->z);'), (80404, 2, u'-  assert( !db->pVTab );'), (80405, 2, u'-  assert( xConstruct );'), (80409, 2, u'-  assert( rc==SQLITE_OK );'), (80466, 2, u"-          assert(zType[i-1]==' ');"), (80548, 2, u'-  assert(pTab && (pTab->tabFlags & TF_Virtual)!=0 && !pTab->pVtab);'), (80589, 2, u'-  assert((pTab->tabFlags & TF_Virtual)!=0 && pTab->nCol==0 && pTab->aCol==0);'), (80619, 2, u'-  assert( (rc&0xff)==rc );'), (80638, 2, u'-  assert(pTab);'), (80642, 2, u'-    assert( rc==SQLITE_OK );'), (80822, 2, u'-  assert( pVtab!=0 );'), (80823, 2, u'-  assert( pVtab->pModule!=0 );'), (80871, 2, u'-  assert( IsVirtual(pTab) );'), (81291, 2, u'-  assert( pMaskSet->n < ArraySize(pMaskSet->ix) );'), (81356, 2, u'-  assert( TK_GT>TK_EQ && TK_GT<TK_GE );'), (81357, 2, u'-  assert( TK_LT>TK_EQ && TK_LT<TK_GE );'), (81358, 2, u'-  assert( TK_LE>TK_EQ && TK_LE<TK_GE );'), (81359, 2, u'-  assert( TK_GE==TK_EQ+4 );'), (81383, 2, u'-  assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );'), (81391, 2, u'-    assert( TK_LT==TK_GT+2 );'), (81392, 2, u'-    assert( TK_GE==TK_LE+2 );'), (81393, 2, u'-    assert( TK_GT>TK_EQ );'), (81394, 2, u'-    assert( TK_GT<TK_LE );'), (81395, 2, u'-    assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );'), (81405, 2, u'-  assert( allowedOp(op) );'), (81411, 2, u'-    assert( (WO_EQ<<(op-TK_EQ)) < 0x7fff );'), (81414, 2, u'-  assert( op!=TK_ISNULL || c==WO_ISNULL );'), (81415, 2, u'-  assert( op!=TK_IN || c==WO_IN );'), (81416, 2, u'-  assert( op!=TK_EQ || c==WO_EQ );'), (81417, 2, u'-  assert( op!=TK_LT || c==WO_LT );'), (81418, 2, u'-  assert( op!=TK_LE || c==WO_LE );'), (81419, 2, u'-  assert( op!=TK_GT || c==WO_GT );'), (81420, 2, u'-  assert( op!=TK_GE || c==WO_GE );'), (81440, 2, u'-  assert( iCur>=0 );'), (81462, 2, u'-        assert(pX->pLeft);'), (81464, 2, u'-        assert(pColl || pParse->nErr);'), (81536, 2, u'-  assert( pColl!=0 || pLeft->iColumn==-1 );'), (81700, 2, u'-  assert( (pTerm->wtFlags & (TERM_DYNAMIC|TERM_ORINFO|TERM_ANDINFO))==0 );'), (81701, 2, u'-  assert( pExpr->op==TK_OR );'), (81710, 2, u'-  assert( pOrWc->nTerm>=2 );'), (81719, 2, u'-      assert( pOrTerm->eOperator==0 );'), (81720, 2, u'-      assert( (pOrTerm->wtFlags & (TERM_ANDINFO|TERM_ORINFO))==0 );'), (81738, 2, u'-            assert( pAndTerm->pExpr );'), (81792, 2, u'-        assert( pOrTerm->eOperator==WO_EQ );'), (81801, 2, u'-        assert( j==1 );'), (81802, 2, u'-        assert( (chngToIN&(chngToIN-1))==0 );'), (81803, 2, u'-        assert( chngToIN==getMask(pMaskSet, iColumn) );'), (81808, 2, u'-        assert( pOrTerm->eOperator==WO_EQ );'), (81842, 2, u'-        assert( pOrTerm->eOperator==WO_EQ );'), (81843, 2, u'-        assert( pOrTerm->leftCursor==iCursor );'), (81844, 2, u'-        assert( pOrTerm->u.leftColumn==iColumn );'), (81849, 2, u'-      assert( pLeft!=0 );'), (81855, 2, u'-        assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (81918, 2, u'-    assert( pExpr->pRight==0 );'), (81999, 2, u'-    assert( pList!=0 );'), (82000, 2, u'-    assert( pList->nExpr==2 );'), (82021, 2, u'-    assert( pWC->op==TK_AND );'), (82177, 2, u'-  assert( pOrderBy!=0 );'), (82179, 2, u'-  assert( nTerm>0 );'), (82236, 2, u'-    assert( pIdx->aSortOrder!=0 );'), (82237, 2, u'-    assert( pTerm->sortOrder==0 || pTerm->sortOrder==1 );'), (82238, 2, u'-    assert( iSortOrder==0 || iSortOrder==1 );'), (82292, 2, u'-  assert( pOrderBy!=0 );'), (82293, 2, u'-  assert( pOrderBy->nExpr>0 );'), (82414, 2, u'-      assert( (pTerm->eOperator&(pTerm->eOperator-1))==0 );'), (82465, 2, u'-      assert( (pTerm->eOperator&(pTerm->eOperator-1))==0 );'), (82475, 2, u'-      assert( WO_EQ==SQLITE_INDEX_CONSTRAINT_EQ );'), (82476, 2, u'-      assert( WO_LT==SQLITE_INDEX_CONSTRAINT_LT );'), (82477, 2, u'-      assert( WO_LE==SQLITE_INDEX_CONSTRAINT_LE );'), (82478, 2, u'-      assert( WO_GT==SQLITE_INDEX_CONSTRAINT_GT );'), (82479, 2, u'-      assert( WO_GE==SQLITE_INDEX_CONSTRAINT_GE );'), (82480, 2, u'-      assert( WO_MATCH==SQLITE_INDEX_CONSTRAINT_MATCH );'), (82481, 2, u'-      assert( pTerm->eOperator & (WO_EQ|WO_LT|WO_LE|WO_GT|WO_GE|WO_MATCH) );'), (82502, 2, u'-  assert( pTab->azModuleArg && pTab->azModuleArg[0] );'), (82503, 2, u'-  assert( pVtab );'), (82943, 2, u'-      assert( pCost->plan.wsFlags & WHERE_INDEXED );'), (83003, 2, u'-    assert( v!=0 );'), (83032, 2, u'-  assert( iTarget>0 );'), (83044, 2, u'-    assert( pX->op==TK_IN );'), (83050, 2, u'-    assert( pLevel->plan.wsFlags & WHERE_IN_ABLE );'), (83117, 2, u'-  assert( pLevel->plan.wsFlags & WHERE_INDEXED );'), (83128, 2, u'-  assert( pIdx->nColumn>=nEq );'), (83134, 2, u'-    assert( (pTerm->wtFlags & TERM_CODED)==0 );'), (83252, 2, u'-          assert( pParse->disableColCache );'), (83259, 2, u'-    assert( pParse->disableColCache );'), (83293, 2, u'-    assert( pTerm!=0 );'), (83294, 2, u'-    assert( pTerm->pExpr!=0 );'), (83295, 2, u'-    assert( pTerm->leftCursor==iCur );'), (83296, 2, u'-    assert( omitTable==0 );'), (83316, 2, u'-    assert( omitTable==0 );'), (83337, 2, u'-      assert( TK_LE==TK_GT+1 );      /* Make sure the ordering.. */'), (83338, 2, u'-      assert( TK_LT==TK_GT+2 );      /*  ... of the TK_xx values... */'), (83339, 2, u'-      assert( TK_GE==TK_GT+3 );      /*  ... is correcct. */'), (83342, 2, u'-      assert( pX!=0 );'), (83343, 2, u'-      assert( pStart->leftCursor==iCur );'), (83356, 2, u'-      assert( pX!=0 );'), (83357, 2, u'-      assert( pEnd->leftCursor==iCur );'), (83524, 2, u'-    assert( op!=0 );'), (83628, 2, u'-    assert( pTerm!=0 );'), (83629, 2, u'-    assert( pTerm->eOperator==WO_OR );'), (83630, 2, u'-    assert( (pTerm->wtFlags & TERM_ORINFO)!=0 );'), (83676, 2, u'-    assert( bRev==0 || bRev==1 );'), (83677, 2, u'-    assert( omitTable==0 );'), (83697, 2, u'-    assert( pE!=0 );'), (83722, 2, u'-      assert( pTerm->pExpr );'), (83771, 2, u'-        assert( pInfo->needToFreeIdxStr==0 || db->mallocFailed );'), (83967, 2, u'-      assert( (m-1)==toTheLeft );'), (84024, 2, u'-      assert( pTabItem->pTab );'), (84060, 2, u'-    assert( once );'), (84061, 2, u'-    assert( notReady & getMask(pMaskSet, pTabList->a[bestJ].iCursor) );'), (84091, 2, u'-        assert( bestPlan.plan.u.pIdx==pIdx );'), (84112, 2, u'-  assert( (wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || pWInfo->nLevel==1 );'), (84175, 2, u'-        assert( n<=pTab->nCol );'), (84185, 2, u'-      assert( pIx->pSchema==pTab->pSchema );'), (84186, 2, u'-      assert( iIdxCur>=0 );'), (84321, 2, u'-    assert( pTab!=0 );'), (84351, 2, u'-      assert( pIdx!=0 );'), (84364, 2, u'-          assert(!useIndexOnly || j<pIdx->nColumn);'), (85856, 2, u'-  assert( iLookAhead!=YYNOCODE );'), (85912, 2, u'-  assert( stateno<=YY_REDUCE_MAX );'), (85915, 2, u'-  assert( i!=YY_REDUCE_USE_DFLT );'), (85916, 2, u'-  assert( iLookAhead!=YYNOCODE );'), (85923, 2, u'-  assert( i>=0 && i<YY_SZ_ACTTAB );'), (85924, 2, u'-  assert( yy_lookahead[i]==iLookAhead );'), (87291, 2, u'-  assert( yymsp[-2].minor.yy145!=0 );'), (87300, 2, u'-  assert( yymsp[-1].minor.yy145!=0 );'), (87430, 2, u'-    assert( yyact == YYNSTATE + YYNRULE + 1 );'), (87465, 2, u'-  assert( TOKEN.z[0] );  /* The tokenizer always gives us a token */'), (87551, 2, u'-      assert( !yyendofinput );  /* Impossible to shift the $ token */'), (87558, 2, u'-      assert( yyact == YY_ERROR_ACTION );'), (88317, 2, u'-  assert( pzErrMsg!=0 );'), (88323, 2, u'-  assert( pParse->sLastToken.dyn==0 );'), (88324, 2, u'-  assert( pParse->pNewTable==0 );'), (88325, 2, u'-  assert( pParse->pNewTrigger==0 );'), (88326, 2, u'-  assert( pParse->nVar==0 );'), (88327, 2, u'-  assert( pParse->nVarExpr==0 );'), (88328, 2, u'-  assert( pParse->nVarExprAlloc==0 );'), (88329, 2, u'-  assert( pParse->apVarExpr==0 );'), (88333, 2, u'-    assert( i>=0 );'), (88335, 2, u'-    assert( pParse->sLastToken.dyn==0 );'), (88988, 2, u'-    assert( sqlite3GlobalConfig.nRefInitMutex==0 );'), (89005, 2, u'-    assert(sizeof(x)==8);'), (89006, 2, u'-    assert(sizeof(x)==sizeof(y));'), (89008, 2, u'-    assert( sqlite3IsNaN(y) );'), (89228, 2, u'-    assert( sz > (int)sizeof(LookasideSlot*) );'), (89414, 2, u'-  assert( sqlite3SafetyCheckSickOrOk(db) );'), (89446, 2, u'-  assert( db->nDb<=2 );'), (89447, 2, u'-  assert( db->aDb==db->aDbStatic );'), (89499, 2, u'-  assert( db->lookaside.nOut==0 );  /* Fails on a lookaside memory leak */'), (89513, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (89596, 2, u'-  assert( count>=0 );'), (89725, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (89773, 2, u'-      assert( !db->mallocFailed );'), (89781, 2, u'-  assert(p || db->mallocFailed);'), (89829, 2, u'-  assert( !db->mallocFailed );'), (90002, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (90003, 2, u'-  assert( ppBtree != 0);'), (90060, 2, u'-    assert( !db->mallocFailed );'), (90155, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (90356, 2, u'-  assert( sizeof(db->aLimit)==sizeof(aHardLimit) );'), (90393, 2, u'-  assert( db->pDfltColl!=0 );'), (90501, 2, u'-    assert( db->mutex!=0 || isThreadsafe==0 || sqlite3GlobalConfig.bFullMutex==0 );'), (90546, 2, u'-  assert( zFilename );'), (90547, 2, u'-  assert( ppDb );'), (90559, 2, u'-    assert( *ppDb || rc==SQLITE_NOMEM );'), (90584, 2, u'-  assert( !db->mallocFailed );'), (90604, 2, u'-  assert( !db->mallocFailed );'), (90625, 2, u'-  assert( !db->mallocFailed );'), (90882, 2, u'-      assert( pPager!=0 );'), (90884, 2, u'-      assert( fd!=0 );'), (91020, 2, u'-#define assertMutexHeld() \\'), (91021, 2, u'-  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) )'), (91053, 2, u'-    assert( p->pUnlockConnection || p->pBlockingConnection );'), (91058, 2, u'-      assert( p2->xUnlockNotify==p->xUnlockNotify || !seen );'), (91059, 2, u'-      assert( db==0 || p->pUnlockConnection!=db );'), (91060, 2, u'-      assert( db==0 || p->pBlockingConnection!=db );'), (91074, 2, u'-  assertMutexHeld();'), (91089, 2, u'-  assertMutexHeld();'), (91111, 2, u'-  assertMutexHeld();'), (91174, 2, u'-  assert( !db->mallocFailed );'), (91236, 2, u'-      assert( p->xUnlockNotify );'), (91243, 2, u'-      assert( aArg==aDyn || (aDyn==0 && aArg==aStatic) );'), (91244, 2, u'-      assert( nArg<=(int)ArraySize(aStatic) || aArg==aDyn );'), (92076, 2, u'-  assert( q - (unsigned char *)p <= VARINT_MAX );'), (92090, 2, u'-      assert( 0 );'), (92103, 2, u'- assert( *pi==i );'), (92128, 2, u'-  assert( nCapacity>=0 );'), (92146, 2, u'-  assert( nAddCapacity>0 );'), (92158, 2, u'-  assert( nSource>0 && pSource!=NULL );'), (92166, 2, u'-  assert( nSource1>0 && pSource1!=NULL );'), (92167, 2, u'-  assert( nSource2>0 && pSource2!=NULL );'), (92199, 2, u'-  assert( sb->b.nData>0 );'), (92274, 2, u'-  assert( pReader->nData>=0 );'), (92278, 2, u'-  assert( !dlrAtEnd(pReader) );'), (92282, 2, u'-  assert( !dlrAtEnd(pReader) );'), (92286, 2, u'-  assert( !dlrAtEnd(pReader) );'), (92290, 2, u'-  assert( !dlrAtEnd(pReader) );'), (92300, 2, u'-  assert( !dlrAtEnd(pReader) );'), (92306, 2, u'-  assert( !dlrAtEnd(pReader) );'), (92310, 2, u'-  assert( !dlrAtEnd(pReader) );'), (92313, 2, u'-  assert( pReader->nElement<=pReader->nData );'), (92323, 2, u'-      assert( n<pReader->nData );'), (92326, 2, u'-        assert( n<=pReader->nData );'), (92330, 2, u'-          assert( n<pReader->nData );'), (92334, 2, u'-          assert( n<pReader->nData );'), (92339, 2, u'-    assert( pReader->nElement<=pReader->nData );'), (92344, 2, u'-  assert( pData!=NULL && nData!=0 );'), (92366, 2, u'-  assert( nData>0 );'), (92367, 2, u'-  assert( pData!=0 );'), (92368, 2, u'-  assert( pData+nData>pData );'), (92384, 2, u'-        assert( n<=nData );'), (92387, 2, u'-    assert( n<=nData );'), (92393, 2, u'-#define ASSERT_VALID_DOCLIST(i, p, n, o) docListValidate(i, p, n, o)'), (92395, 2, u'-#define ASSERT_VALID_DOCLIST(i, p, n, o) assert( 1 )'), (92454, 2, u'-  assert( nFirstOld<nData || (nFirstOld==nData && pWriter->iType==DL_DOCIDS) );'), (92461, 2, u'-  ASSERT_VALID_DOCLIST(pWriter->iType, pData, nData, &iLastDocidDelta);'), (92462, 2, u'-  assert( iLastDocid==iFirstDocid-iDocid+iLastDocidDelta );'), (92484, 2, u'-  assert( !pWriter->has_iPrevDocid || iDocid>pWriter->iPrevDocid );'), (92485, 2, u'-  assert( pWriter->iType==DL_DOCIDS );'), (92523, 2, u'-  assert( !plrAtEnd(pReader) );'), (92527, 2, u'-  assert( !plrAtEnd(pReader) );'), (92531, 2, u'-  assert( !plrAtEnd(pReader) );'), (92535, 2, u'-  assert( !plrAtEnd(pReader) );'), (92541, 2, u'-  assert( !plrAtEnd(pReader) );'), (92556, 2, u'-  assert( i!=POS_COLUMN );'), (92571, 2, u'-  assert( n<=pReader->nData );'), (92635, 2, u'-  assert( pWriter->iPos!=-1 );'), (92646, 2, u'-  assert( iPos>=pWriter->iPos );'), (92650, 2, u'-    assert( iStartOffset>=pWriter->iOffset );'), (92653, 2, u'-    assert( iEndOffset>=iStartOffset );'), (92669, 2, u'-  assert( !pWriter->dlw->has_iPrevDocid || iDocid>pWriter->dlw->iPrevDocid );'), (92778, 2, u'-  assert( iOutType<=iType );'), (92876, 2, u'-  assert( nReaders>0 );'), (92882, 2, u'-  assert( nReaders<=MERGE_COUNT );'), (92885, 2, u'-    assert( pReaders[i].iType==pReaders[0].iType );'), (92945, 2, u'-  assert( pLeft->iType==pRight->iType );'), (92976, 2, u'-  assert( dlrDocid(pLeft)==dlrDocid(pRight) );'), (92977, 2, u'-  assert( pLeft->iType==pRight->iType );'), (92978, 2, u'-  assert( pLeft->iType==pOut->iType );'), (93087, 2, u'-  assert( dlrDocid(pLeft)==dlrDocid(pRight) );'), (93088, 2, u'-  assert( pOut->iType!=DL_POSITIONS_OFFSETS );'), (93141, 2, u'-  assert(!plrAtEnd(pLeft) || !plrAtEnd(pRight));'), (93191, 2, u'-  assert( iType!=DL_POSITIONS_OFFSETS );'), (93437, 2, u'-  assert( r == result + len );'), (93685, 2, u'-  assert( iStmt<MAX_STMT );'), (93730, 2, u'-  assert( idx>=-1 && idx<MERGE_COUNT );'), (94432, 2, u'-  assert( argc>=3 );'), (94836, 2, u'-    assert(p && p->eType==FTSQUERY_PHRASE );'), (94842, 2, u'-        assert( p->pParent->pRight==p );'), (94847, 2, u'-        assert( p->pRight!=0 );'), (94933, 2, u'-      assert( pToken->n<=nToken );'), (95012, 2, u'-        assert( pRight->eType==FTSQUERY_PHRASE );'), (95013, 2, u'-        assert( pLeft->eType==FTSQUERY_PHRASE );'), (95400, 2, u'-  assert( eType==DL_POSITIONS || eType==DL_DOCIDS );'), (95406, 2, u'-  assert( pTab->nPendingData<0 );'), (95477, 2, u'-            assert( pExpr->pRight->eType==FTSQUERY_PHRASE );'), (95478, 2, u'-            assert( pLeft->eType==FTSQUERY_PHRASE );'), (95546, 2, u'-    assert( 0==(*ppExpr) );'), (95616, 2, u'-    assert( c->iCursorType==idxNum );'), (95632, 2, u'-      assert( idxNum<=QUERY_FULLTEXT+v->nColumn);'), (95633, 2, u'-      assert( argc==1 );'), (95919, 2, u'-  assert( nData>0 );'), (95920, 2, u'-  assert( pData!=0 );'), (95921, 2, u'-  assert( pData+nData>pData );'), (95925, 2, u'-  assert( n>0 );'), (95926, 2, u'-  assert( iDummy>0 );'), (95927, 2, u'-  assert( n<nData );'), (95933, 2, u'-  assert( n>0 );'), (95934, 2, u'-  assert( n<=nData );'), (95942, 2, u'-    assert( n>0 );'), (95943, 2, u'-    assert( iDummy>0 );'), (95944, 2, u'-    assert( n+iDummy>0);'), (95945, 2, u'-    assert( n+iDummy<=nData );'), (95953, 2, u'-      assert( n>0 );'), (95954, 2, u'-      assert( iDummy>=0 );'), (95955, 2, u'-      assert( n<nData );'), (95961, 2, u'-      assert( n>0 );'), (95962, 2, u'-      assert( iDummy>0 );'), (95963, 2, u'-      assert( n+iDummy>0);'), (95964, 2, u'-      assert( n+iDummy<=nData );'), (95970, 2, u'-#define ASSERT_VALID_INTERIOR_BLOCK(x) interiorBlockValidate(x)'), (95972, 2, u'-#define ASSERT_VALID_INTERIOR_BLOCK(x) assert( 1 )'), (95995, 2, u'-  assert( iHeight>0 );'), (96005, 2, u'-  ASSERT_VALID_INTERIOR_BLOCK(pWriter->last);'), (96018, 2, u'-  ASSERT_VALID_INTERIOR_BLOCK(pWriter->last);'), (96041, 2, u'-  assert( pWriter->iLastChildBlock==iChildBlock );'), (96058, 2, u'-  ASSERT_VALID_INTERIOR_BLOCK(pWriter->last);'), (96105, 2, u'-  ASSERT_VALID_INTERIOR_BLOCK(block);'), (96119, 2, u'-    ASSERT_VALID_INTERIOR_BLOCK(block);'), (96159, 2, u'-  assert( nData>0 );'), (96160, 2, u"-  assert( pData[0]!='\\0' );"), (96166, 2, u'-  assert( 1+n<=nData );'), (96180, 2, u'-    assert( n+nTerm<=pReader->nData );'), (96195, 2, u'-  assert( !interiorReaderAtEnd(pReader) );'), (96199, 2, u'-  assert( !interiorReaderAtEnd(pReader) );'), (96205, 2, u'-  assert( !interiorReaderAtEnd(pReader) );'), (96222, 2, u'-    assert( n+nSuffix<=pReader->nData );'), (96316, 2, u'-  assert( nData>0 );'), (96317, 2, u'-  assert( pData!=0 );'), (96318, 2, u'-  assert( pData+nData>pData );'), (96322, 2, u'-  assert( iDummy==0 );'), (96323, 2, u'-  assert( n>0 );'), (96324, 2, u'-  assert( n<nData );'), (96330, 2, u'-  assert( n>0 );'), (96331, 2, u'-  assert( iDummy>0 );'), (96332, 2, u'-  assert( n+iDummy>0 );'), (96333, 2, u'-  assert( n+iDummy<nData );'), (96339, 2, u'-  assert( n>0 );'), (96340, 2, u'-  assert( iDummy>0 );'), (96341, 2, u'-  assert( n+iDummy>0 );'), (96342, 2, u'-  assert( n+iDummy<=nData );'), (96343, 2, u'-  ASSERT_VALID_DOCLIST(DL_DEFAULT, pData+n, iDummy, NULL);'), (96350, 2, u'-    assert( n>0 );'), (96351, 2, u'-    assert( iDummy>=0 );'), (96352, 2, u'-    assert( n<nData );'), (96356, 2, u'-    assert( n>0 );'), (96357, 2, u'-    assert( iDummy>0 );'), (96358, 2, u'-    assert( n+iDummy>0 );'), (96359, 2, u'-    assert( n+iDummy<nData );'), (96364, 2, u'-    assert( n>0 );'), (96365, 2, u'-    assert( iDummy>0 );'), (96366, 2, u'-    assert( n+iDummy>0 );'), (96367, 2, u'-    assert( n+iDummy<=nData );'), (96368, 2, u'-    ASSERT_VALID_DOCLIST(DL_DEFAULT, pData+n, iDummy, NULL);'), (96373, 2, u'-#define ASSERT_VALID_LEAF_NODE(p, n) leafNodeValidate(p, n)'), (96375, 2, u'-#define ASSERT_VALID_LEAF_NODE(p, n) assert( 1 )'), (96391, 2, u'-  assert( nData>2 );'), (96392, 2, u'-  assert( iData>=0 );'), (96393, 2, u'-  assert( iData+nData<=pWriter->data.nData );'), (96394, 2, u'-  ASSERT_VALID_LEAF_NODE(pWriter->data.pData+iData, nData);'), (96398, 2, u'-  assert( iBlockid!=0 );'), (96405, 2, u'-  assert( pWriter->data.nData>iData+1+n+nStartingTerm );'), (96406, 2, u'-  assert( pWriter->nTermDistinct>0 );'), (96407, 2, u'-  assert( pWriter->nTermDistinct<=nStartingTerm );'), (96424, 2, u'-    assert( iBlockid==pWriter->iEndBlockid );'), (96464, 2, u'-  assert( pWriter->has_parent );'), (96513, 2, u'-  assert( nTerm>0 );'), (96518, 2, u'-    assert( nPrefix<nTerm );'), (96562, 2, u'-  assert( iDoclistData>=n+nTerm );'), (96581, 2, u'-  ASSERT_VALID_LEAF_NODE(pWriter->data.pData, pWriter->data.nData);'), (96599, 2, u'-  ASSERT_VALID_DOCLIST(DL_DEFAULT,'), (96610, 2, u'-  assert( nActualData<=nData );'), (96611, 2, u'-  assert( nActual<=n );'), (96680, 2, u'-    assert( n<iDoclistData );'), (96684, 2, u'-    assert( 2*STANDALONE_MIN<=LEAF_MAX );'), (96685, 2, u'-    assert( n+pWriter->data.nData-iDoclistData<iDoclistData );'), (96691, 2, u'-  ASSERT_VALID_LEAF_NODE(pWriter->data.pData, pWriter->data.nData);'), (96739, 2, u'-  assert( pReader->term.nData>0 );'), (96746, 2, u'-  assert( pReader->term.nData>0 );'), (96752, 2, u'-  assert( pReader->term.nData>0 );'), (96761, 2, u'-  assert( nData>0 );'), (96762, 2, u"-  assert( pData[0]=='\\0' );"), (96772, 2, u'-  assert( 1+n+nTerm<nData );'), (96780, 2, u'-  assert( !leafReaderAtEnd(pReader) );'), (96784, 2, u'-  assert( n+nData<=pReader->nData );'), (96794, 2, u'-    assert( n+nSuffix<pReader->nData );'), (96838, 2, u'-  assert( !pReader->eof );'), (96842, 2, u'-  assert( !pReader->eof );'), (96848, 2, u'-  assert( !pReader->eof );'), (96852, 2, u'-  assert( !pReader->eof );'), (96938, 2, u'-  assert( !leavesReaderAtEnd(pReader) );'), (97017, 2, u'-    assert( i<MERGE_COUNT );'), (97052, 2, u'-  assert( nReaders<=MERGE_COUNT );'), (97111, 2, u'-  assert( i==MERGE_COUNT );'), (97192, 2, u'-  assert( nTerm>0 );'), (97226, 2, u'-            assert(pBuffers!=NULL);'), (97237, 2, u'-      assert(iBuffer<nBuffers && pBuffers[iBuffer].nData==0);'), (97302, 2, u'-  assert( nData>1 );'), (97303, 2, u"-  assert( *pData=='\\0' );"), (97324, 2, u'-  assert( iStartLeaf<=iEndLeaf );'), (97351, 2, u'-  assert( nData>1 );'), (97352, 2, u"-  assert( *pData!='\\0' );"), (97375, 2, u'-  assert( *piEndChild>=*piStartChild );'), (97376, 2, u'-  assert( isPrefix || *piStartChild==*piEndChild );'), (97391, 2, u'-  assert( iBlockid!=0 );'), (97392, 2, u'-  assert( pTerm!=NULL );'), (97393, 2, u'-  assert( nTerm!=0 );        /* TODO(shess) Why not allow this? */'), (97394, 2, u'-  assert( piStartChild!=NULL );'), (97395, 2, u'-  assert( piEndChild!=NULL );'), (97454, 2, u'-      assert( iNextStart<=iNextEnd );'), (97458, 2, u'-    assert( iStartChild<=iLeavesEnd );'), (97459, 2, u'-    assert( iEndChild<=iLeavesEnd );'), (97491, 2, u'-  assert( nData>1 );'), (97494, 2, u'-  assert( v->nPendingData<0 );'), (97539, 2, u'-  assert( v->nPendingData<0 );'), (97612, 2, u'-    assert( i<n );'), (97617, 2, u'-  assert( i==n );'), (97736, 2, u'-      assert( nArg==2+v->nColumn+2);'), (97747, 2, u'-    assert( nArg==2+v->nColumn+2);'), (97781, 2, u'-  assert( v->nPendingData<0 );'), (97790, 2, u'-  assert( v->nPendingData<0 );'), (97972, 2, u'-      assert( iReader<i );  /* Must execute the loop at least once. */'), (98083, 2, u'-      assert( i<nReaders );'), (98094, 2, u'-      assert( i==nReaders );'), (98195, 2, u'-  assert( nTerms>0 );'), (98202, 2, u'-    assert( iTerm<nTerms );'), (98207, 2, u'-  assert( iTerm==nTerms );'), (98209, 2, u'-  assert( nResultBytes>0 );   /* nTerms>0, nResultsBytes must be, too. */'), (98225, 2, u'-  assert( iByte==nResultBytes );'), (98226, 2, u"-  assert( result[nResultBytes-1]==' ' );"), (98298, 2, u'-          assert( rc==SQLITE_OK );'), (98324, 2, u'-  assert( pData!=NULL && nData>0 );'), (98347, 2, u'-          assert( dump.nData>0 );'), (98349, 2, u"-          assert( dump.pData[dump.nData]==' ');"), (98359, 2, u'-          assert( NULL=="Unhandled DL_DEFAULT value");'), (98365, 2, u'-      assert( dump.nData>0 );'), (98367, 2, u"-      assert( dump.pData[dump.nData]==' ');"), (98373, 2, u'-  assert( dump.nData>0 );'), (98375, 2, u"-  assert( dump.pData[dump.nData]==' ');"), (98377, 2, u'-  assert( dump.nData>0 );'), (98684, 2, u'-  assert( rc!=SQLITE_OK );'), (99040, 2, u'-        assert( nKey==4 );'), (99156, 2, u'-  assert( p->eType!=FTSQUERY_PHRASE );'), (99164, 2, u'-  assert( p->eType==FTSQUERY_AND );'), (99187, 2, u'-    assert( pSplit->pParent->pRight==pSplit );'), (99248, 2, u'-        assert( eType!=FTSQUERY_PHRASE || !p->pPhrase->isNot );'), (99265, 2, u'-          assert( pRet && pPrev );'), (99298, 2, u'-            assert( pPrev && pPrev->pLeft && pPrev->pRight==0 );'), (99309, 2, u'-      assert( nByte>0 );'), (99311, 2, u'-    assert( rc!=SQLITE_OK || (nByte>0 && nByte<=nIn) );'), (99542, 2, u'-  assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (99652, 2, u'-  assert( pNew!=0 );'), (99653, 2, u'-  assert( keyClass>=FTS3_HASH_STRING && keyClass<=FTS3_HASH_BINARY );'), (99669, 2, u'-  assert( pH!=0 );'), (99736, 2, u'-    assert( keyClass==FTS3_HASH_BINARY );'), (99751, 2, u'-    assert( keyClass==FTS3_HASH_BINARY );'), (99791, 2, u'-  assert( (new_size & (new_size-1))==0 );'), (99865, 2, u'-    assert( pH->first==0 );'), (99866, 2, u'-    assert( pH->count==0 );'), (99882, 2, u'-  assert( xHash!=0 );'), (99884, 2, u'-  assert( (pH->htsize & (pH->htsize-1))==0 );'), (99916, 2, u'-  assert( pH!=0 );'), (99918, 2, u'-  assert( xHash!=0 );'), (99920, 2, u'-  assert( (pH->htsize & (pH->htsize-1))==0 );'), (99957, 2, u'-  assert( pH->htsize>0 );'), (99958, 2, u'-  assert( (pH->htsize & (pH->htsize-1))==0 );'), (100115, 2, u"-  assert( x>='a' && x<='z' );"), (100124, 2, u"-  assert( x>='a' && x<='z' );"), (100670, 2, u'-  assert( argc==1 || argc==2 );'), (100759, 2, u'-  assert( argc==2 || argc==3 );'), (100901, 2, u'-  assert( rc==SQLITE_OK );'), (100902, 2, u'-  assert( p1==p2 );'), (100904, 2, u'-  assert( rc==SQLITE_ERROR );'), (100905, 2, u'-  assert( p2==0 );'), (100906, 2, u'-  assert( 0==strcmp(sqlite3_errmsg(db), "unknown tokenizer: nosuchtokenizer") );'), (100910, 2, u'-  assert( rc==SQLITE_OK );'), (100912, 2, u'-  assert( rc==SQLITE_OK );'), (100913, 2, u'-  assert( p2==p1 );'), (101475, 2, u'-  assert( sizeof(RtreeCoord)==4 );'), (101476, 2, u'-  assert( sizeof(u32)==4 );'), (101532, 2, u'-  assert( iNode!=0 );'), (101543, 2, u'-    assert( pNode->pNext==0 );'), (101557, 2, u'-    for( ; (*pp)!=pNode; pp = &(*pp)->pNext){ assert(*pp); }'), (101600, 2, u'-    assert( !pParent || !pNode->pParent || pNode->pParent==pParent );'), (101640, 2, u'-  assert( (rc==SQLITE_OK && pNode) || (pNode==0 && rc!=SQLITE_OK) );'), (101694, 2, u'-  assert(nCell<=nMaxCell);'), (101738, 2, u'-    assert( pNode->nRef>0 );'), (101767, 2, u'-  assert( iCell<NCELL(pNode) );'), (101956, 2, u'-    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (101988, 2, u'-    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (102026, 2, u'-  assert( iHeight>=0 );'), (102056, 2, u'-    assert( pCursor->pNode==pChild );'), (102074, 2, u'-    assert( ii<(NCELL(pNode)-1) );'), (102136, 2, u'-  assert(pCsr->pNode);'), (102158, 2, u'-      assert( pRtree->eCoordType==RTREE_COORD_INT32 );'), (102228, 2, u'-        assert( (idxStr==0 && argc==0) || strlen(idxStr)==argc*2 );'), (102247, 2, u'-        assert( pCsr->pNode==pRoot );'), (102254, 2, u'-        assert( pCsr->pNode==pRoot );'), (102258, 2, u'-      assert( rc!=SQLITE_OK || !pCsr->pNode || pCsr->iCell<NCELL(pCsr->pNode) );'), (102308, 2, u'-  assert( pIdxInfo->idxStr==0 );'), (102353, 2, u'-        assert( compatible[RTREE_EQ & 7]==0 );'), (102354, 2, u'-        assert( compatible[RTREE_LT & 7]==1 );'), (102355, 2, u'-        assert( compatible[RTREE_LE & 7]==1 );'), (102356, 2, u'-        assert( compatible[RTREE_GT & 7]==2 );'), (102357, 2, u'-        assert( compatible[RTREE_GE & 7]==2 );'), (102368, 2, u'-        assert( iIdx<sizeof(zIdxStr)-1 );'), (102382, 2, u'-  assert( iIdx>=0 );'), (102861, 2, u'-        assert( left<=right );'), (102928, 2, u'-        assert( xleft1<=xright1 && (xleft1<xright1 || xleft2<=xright2) );'), (103259, 2, u'-  assert( pNode->nRef==1 );'), (103534, 2, u'-    assert( !pRtree->aHash[ii] );'), (103554, 2, u'-  assert(nData>=1);'), (103555, 2, u'-  assert(hashIsEmpty(pRtree));'), (103648, 2, u'-    assert( nData==(pRtree->nDim*2 + 3) );'), (104143, 2, u'-    assert(uPattern!=0);'), (104325, 2, u'-      assert(!pExpr);'), (104391, 2, u'-  assert(nArg==1 || nArg==2);'), (104450, 2, u'-  assert(!"Unexpected return value from ucol_strcoll()");'), (104479, 2, u'-  assert(nArg==2);'), (104492, 2, u'-  assert(p);'), (104762, 2, u'-    assert(iStart<=iEnd);')]
===========================================
Class:    class MidiTimestamp { 
Class: class CDeviceHostReferenceHolder { 
Class: class CCtrlPointReferenceHolder { 
Class: class CUPnPCleaner : public NPT_Thread { 
Class: class CUPnPServer : public PLT_MediaConnect { 
Class: class CUPnPRenderer : public PLT_MediaRenderer { 
Class: class CRendererReferenceHolder { 
Class: class CMediaBrowser : public PLT_SyncMediaBrowser,                       public PLT_MediaContainerChangesListener { 
Class:   class GenreIdMapper { 
Class:            class cTSBuffer : public cThread { 
Class: class cDataResp : public cThread { 
Class:   class cLivePatFilter : public cFilter { 
Class: class cAllowedHosts : public cSVDRPhosts { 
Class: class cPluginVNSIServer : public cPlugin { class cPluginVNSIServer : public cPlugin 
Class: class NPT_XbmcFileStream { 
Class: class NPT_XbmcFileInputStream : public NPT_InputStream,                                 private NPT_XbmcFileStream  { 
Class: class NPT_XbmcFileOutputStream : public NPT_OutputStream,                                  private NPT_XbmcFileStream { 
Class: class NPT_XbmcFile: public NPT_FileInterface { 
Class: class NPT_XbmcFileStream { 
Class: class NPT_XbmcFileInputStream : public NPT_InputStream,                                 private NPT_XbmcFileStream  { 
Class: class NPT_XbmcFileOutputStream : public NPT_OutputStream,                                  private NPT_XbmcFileStream { 
Class: class NPT_XbmcFile: public NPT_FileInterface { 
Class: class NPT_TlsContextImpl { class NPT_TlsContextImpl 
Class:  class NPT_TlsSessionImpl { class NPT_TlsSessionImpl 
Class: class NPT_TlsInputStream : public NPT_InputStream { class NPT_TlsInputStream : public NPT_InputStream 
Class: class NPT_TlsOutputStream : public NPT_OutputStream { class NPT_TlsOutputStream : public NPT_OutputStream 
Class: class NPT_TlsContextImpl { class NPT_TlsContextImpl 
Class:  class NPT_TlsSessionImpl { class NPT_TlsSessionImpl 
Class: class NPT_TlsInputStream : public NPT_InputStream { class NPT_TlsInputStream : public NPT_InputStream 
Class: class NPT_TlsOutputStream : public NPT_OutputStream { class NPT_TlsOutputStream : public NPT_OutputStream 
Class: class Item { 
Class: class WriterThread : public NPT_Thread { 
Class: class ReaderThread : public NPT_Thread { 
Class: class Item { 
Class: class WriterThread : public NPT_Thread { 
Class: class ReaderThread : public NPT_Thread { 
Class: class FrameWriter : public NPT_Thread { 
Class: class FrameWriter : public NPT_Thread { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-# ifdef HAVE_ASSERT_H'), (32, 2, u'-#  include <assert.h>'), (45, 2, u'-  assert(value);'), (46, 2, u'-  assert(bytes == 8 || bytes == 4 || bytes == 3);'), (67, 2, u'-  assert(bytes == 4 || bytes == 5);'), (85, 2, u'-  assert(bytes >= 1 && bytes <= 4);'), (180, 2, u'-  assert(length <= 30);'), (231, 1, u'+# ifdef HAVE_ASSERT_H'), (232, 1, u'+#  include <assert.h>'), (245, 1, u'+  assert(value);'), (246, 1, u'+  assert(bytes == 8 || bytes == 4 || bytes == 3);'), (267, 1, u'+  assert(bytes == 4 || bytes == 5);'), (285, 1, u'+  assert(bytes >= 1 && bytes <= 4);'), (380, 1, u'+  assert(length <= 30);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(827, 2, u'-    Assert(strm->avail_out > 0, "bug2");'), (1061, 2, u'-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1072, 2, u'-    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1075, 2, u'-        Assert(cur_match < s->strstart, "no future");'), (1102, 2, u'-        Assert(scan[2] == match[2], "scan[2]?");'), (1113, 2, u'-        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1133, 2, u'-        Assert(*scan == *match, "match[2]?");'), (1145, 2, u'-        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1187, 2, u'-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1189, 2, u'-    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1191, 2, u'-    Assert(cur_match < s->strstart, "no future");'), (1206, 2, u'-    Assert(*scan == *match, "match[2]?");'), (1218, 2, u'-    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1340, 2, u'-        Assert(more >= 2, "more < 2");'), (1409, 2, u'-            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (1417, 2, u'-        Assert(s->block_start >= 0L, "block gone");'), (1666, 2, u'-    Assert (flush != Z_NO_FLUSH, "no flush?");'), (2563, 1, u'+    Assert(strm->avail_out > 0, "bug2");'), (2797, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (2808, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (2811, 1, u'+        Assert(cur_match < s->strstart, "no future");'), (2838, 1, u'+        Assert(scan[2] == match[2], "scan[2]?");'), (2849, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (2869, 1, u'+        Assert(*scan == *match, "match[2]?");'), (2881, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (2923, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (2925, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (2927, 1, u'+    Assert(cur_match < s->strstart, "no future");'), (2942, 1, u'+    Assert(*scan == *match, "match[2]?");'), (2954, 1, u'+    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (3076, 1, u'+        Assert(more >= 2, "more < 2");'), (3145, 1, u'+            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (3153, 1, u'+        Assert(s->block_start >= 0L, "block gone");'), (3402, 1, u'+    Assert (flush != Z_NO_FLUSH, "no flush?");')]
===========================================
Class: class FileHolder { 
Class: class FileHolder { 
Class:  class ColourRemapPixelShader : public Shader { 
Class:  class ColourRemapPixelShader : public Shader { 
Class: class asCBinaryStreamC : public asIBinaryStream { 
Class: class asCBinaryStreamC : public asIBinaryStream { 
Class: class asCDebugStats { 
Class:   class GenreIdMapper { 
Class:            class cTSBuffer : public cThread { 
Class: class cDataResp : public cThread { 
Class:   class cLivePatFilter : public cFilter { 
Class: class cAllowedHosts : public cSVDRPhosts { 
Class: class cPluginVNSIServer : public cPlugin { class cPluginVNSIServer : public cPlugin 
Class: class CDVDMsgAudioCodecChange : public CDVDMsg { 
Class:class CDVDMsgVideoCodecChange : public CDVDMsg { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(108, 2, u'-    assert((!k && !ibl) ||'), (167, 2, u'-    assert((k != (size_t)(-1) && !ibl) ||'), (179, 2, u'-      assert((!k && !tbl) ||'), (189, 2, u'-  assert(!k);'), (202, 2, u'-    assert((k != (size_t)(-1) && !ibl) ||'), (212, 2, u'-      assert((!k && !tbl) ||'), (219, 2, u'-  assert(!k);'), (220, 2, u'-  assert(!obl);')]
===========================================
Class: class FileHolder { 
Class:  class ColourRemapPixelShader : public Shader { 
Class: class asCBinaryStreamC : public asIBinaryStream { 
Class: class asCDebugStats { 
Class:class CAsyncFileCallback   : public CThread { 
Class: class asCBinaryStreamC : public asIBinaryStream { 
Class: class asCDebugStats { 
Class:   class CContextManager { 
Class: class asCOutputStream : public asIOutputStream { 
Class: class asCOutputStream : public asIOutputStream { 
Class:   class CContextManager { 
Class: class asCOutputStream : public asIOutputStream { 
Class: class asCOutputStream : public asIOutputStream { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-\tr = engine->RegisterObjectType("bstr", 4, asOBJ_PRIMITIVE); assert( r >= 0 );'), (27, 2, u'-\tr = engine->RegisterStringFactory("bstr", asFUNCTION(asBStrFactory), asCALL_CDECL); assert( r >= 0 );'), (30, 2, u'-\tr = engine->RegisterObjectMethod("bstr", "uint length() const", asFUNCTION(asBStrLengthMethod), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (33, 2, u'-\tr = engine->RegisterObjectBehaviour("bstr", asBEHAVE_CONSTRUCT,  "void f()",                  asFUNCTION(asBStrConstruct), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (34, 2, u'-\tr = engine->RegisterObjectBehaviour("bstr", asBEHAVE_DESTRUCT,   "void f()",                  asFUNCTION(asBStrDestruct),  asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (35, 2, u'-\tr = engine->RegisterObjectBehaviour("bstr", asBEHAVE_ASSIGNMENT, "bstr &f(const bstr &in)",   asFUNCTION(asBStrCopy),      asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (36, 2, u'-\tr = engine->RegisterObjectBehaviour("bstr", asBEHAVE_ADD_ASSIGN, "bstr &f(const bstr &in)",   asFUNCTION(asBStrAppend),    asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (37, 2, u'-\tr = engine->RegisterObjectBehaviour("bstr", asBEHAVE_INDEX,      "uint8 &f(int)",             asFUNCTION(asBStrByteAt),    asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (38, 2, u'-\tr = engine->RegisterObjectBehaviour("bstr", asBEHAVE_INDEX,      "const uint8 &f(int) const", asFUNCTION(asBStrByteAt),    asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (41, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "bstr f(bstr &in, bstr &in)", asFUNCTION(asBStrConcatenate),        asCALL_CDECL); assert( r >= 0 );'), (42, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_EQUAL,       "bool f(bstr &in, bstr &in)", asFUNCTION(asBStrEqual),              asCALL_CDECL); assert( r >= 0 );'), (43, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_NOTEQUAL,    "bool f(bstr &in, bstr &in)", asFUNCTION(asBStrNotEqual),           asCALL_CDECL); assert( r >= 0 );'), (44, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_LESSTHAN,    "bool f(bstr &in, bstr &in)", asFUNCTION(asBStrLessThan),           asCALL_CDECL); assert( r >= 0 );'), (45, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_LEQUAL,      "bool f(bstr &in, bstr &in)", asFUNCTION(asBStrLessThanOrEqual),    asCALL_CDECL); assert( r >= 0 );'), (46, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_GREATERTHAN, "bool f(bstr &in, bstr &in)", asFUNCTION(asBStrGreaterThan),        asCALL_CDECL); assert( r >= 0 );'), (47, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_GEQUAL,      "bool f(bstr &in, bstr &in)", asFUNCTION(asBStrGreaterThanOrEqual), asCALL_CDECL); assert( r >= 0 );'), (50, 2, u'-\tr = engine->RegisterGlobalFunction("bstr bstrSubstr(bstr &in, uint, uint)", asFUNCTION(asBStrSubstr),                           asCALL_CDECL); assert( r >= 0 );'), (51, 2, u'-\tr = engine->RegisterGlobalFunction("bstr bstrFormat(bits)",                 asFUNCTION(asBStrFormatBits),                       asCALL_CDECL); assert( r >= 0 );'), (52, 2, u'-\tr = engine->RegisterGlobalFunction("bstr bstrFormat(int)",                  asFUNCTION((asBSTR (*)(int))asBStrFormat),          asCALL_CDECL); assert( r >= 0 );'), (53, 2, u'-\tr = engine->RegisterGlobalFunction("bstr bstrFormat(uint)",                 asFUNCTION((asBSTR (*)(unsigned int))asBStrFormat), asCALL_CDECL); assert( r >= 0 );'), (54, 2, u'-\tr = engine->RegisterGlobalFunction("bstr bstrFormat(float)",                asFUNCTION((asBSTR (*)(float))asBStrFormat),        asCALL_CDECL); assert( r >= 0 );'), (55, 2, u'-\tr = engine->RegisterGlobalFunction("bstr bstrFormat(double)",               asFUNCTION((asBSTR (*)(double))asBStrFormat),       asCALL_CDECL); assert( r >= 0 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(154, 2, u'-\tr = engine->RegisterObjectType("string", sizeof(string), asOBJ_CLASS_CDA); assert( r >= 0 );'), (157, 2, u'-\tr = engine->RegisterStringFactory("string", asFUNCTION(StringFactory), asCALL_CDECL); assert( r >= 0 );'), (160, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_CONSTRUCT,  "void f()",                    asFUNCTION(ConstructString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (161, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_DESTRUCT,   "void f()",                    asFUNCTION(DestructString),  asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (162, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ASSIGNMENT, "string &f(const string &in)", asMETHODPR(string, operator =, (const string&), string&), asCALL_THISCALL); assert( r >= 0 );'), (163, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ADD_ASSIGN, "string &f(const string &in)", asMETHODPR(string, operator+=, (const string&), string&), asCALL_THISCALL); assert( r >= 0 );'), (166, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_EQUAL,       "bool f(const string &in, const string &in)",   asFUNCTIONPR(operator==, (const string &, const string &), bool), asCALL_CDECL); assert( r >= 0 );'), (167, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_NOTEQUAL,    "bool f(const string &in, const string &in)",   asFUNCTIONPR(operator!=, (const string &, const string &), bool), asCALL_CDECL); assert( r >= 0 );'), (168, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_LEQUAL,      "bool f(const string &in, const string &in)",   asFUNCTIONPR(operator<=, (const string &, const string &), bool), asCALL_CDECL); assert( r >= 0 );'), (169, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_GEQUAL,      "bool f(const string &in, const string &in)",   asFUNCTIONPR(operator>=, (const string &, const string &), bool), asCALL_CDECL); assert( r >= 0 );'), (170, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_LESSTHAN,    "bool f(const string &in, const string &in)",   asFUNCTIONPR(operator <, (const string &, const string &), bool), asCALL_CDECL); assert( r >= 0 );'), (171, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_GREATERTHAN, "bool f(const string &in, const string &in)",   asFUNCTIONPR(operator >, (const string &, const string &), bool), asCALL_CDECL); assert( r >= 0 );'), (172, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(const string &in, const string &in)", asFUNCTIONPR(operator +, (const string &, const string &), string), asCALL_CDECL); assert( r >= 0 );'), (175, 2, u'-\tr = engine->RegisterObjectMethod("string", "uint length() const", asMETHOD(string,size), asCALL_THISCALL); assert( r >= 0 );'), (178, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ASSIGNMENT, "string &f(double)", asFUNCTION(AssignDoubleToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (179, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ADD_ASSIGN, "string &f(double)", asFUNCTION(AddAssignDoubleToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (180, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(const string &in, double)", asFUNCTION(AddStringDouble), asCALL_CDECL); assert( r >= 0 );'), (181, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(double, const string &in)", asFUNCTION(AddDoubleString), asCALL_CDECL); assert( r >= 0 );'), (183, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ASSIGNMENT, "string &f(int)", asFUNCTION(AssignIntToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (184, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ADD_ASSIGN, "string &f(int)", asFUNCTION(AddAssignIntToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (185, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(const string &in, int)", asFUNCTION(AddStringInt), asCALL_CDECL); assert( r >= 0 );'), (186, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(int, const string &in)", asFUNCTION(AddIntString), asCALL_CDECL); assert( r >= 0 );'), (188, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ASSIGNMENT, "string &f(uint)", asFUNCTION(AssignUIntToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (189, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ADD_ASSIGN, "string &f(uint)", asFUNCTION(AddAssignUIntToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (190, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(const string &in, uint)", asFUNCTION(AddStringUInt), asCALL_CDECL); assert( r >= 0 );'), (191, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(uint, const string &in)", asFUNCTION(AddUIntString), asCALL_CDECL); assert( r >= 0 );'), (193, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ASSIGNMENT, "string &f(bits)", asFUNCTION(AssignBitsToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (194, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ADD_ASSIGN, "string &f(bits)", asFUNCTION(AddAssignBitsToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (195, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(const string &in, bits)", asFUNCTION(AddStringBits), asCALL_CDECL); assert( r >= 0 );'), (196, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(bits, const string &in)", asFUNCTION(AddBitsString), asCALL_CDECL); assert( r >= 0 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(109, 2, u'-\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);'), (110, 2, u'-\tr = engine->RegisterGlobalFunction("void SetMyAny(any@)", asFUNCTION(SetMyAny), asCALL_CDECL); assert( r >= 0 );'), (136, 2, u'-\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);'), (137, 2, u'-\tr = engine->RegisterGlobalFunction("void SetMyAny(any@)", asFUNCTION(SetMyAny), asCALL_CDECL); assert( r >= 0 );'), (163, 2, u'-\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);'), (164, 2, u'-\tr = engine->RegisterGlobalFunction("void SetMyAny(any@)", asFUNCTION(SetMyAny), asCALL_CDECL); assert( r >= 0 );'), (186, 2, u'-\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);'), (187, 2, u'-\tr = engine->RegisterGlobalFunction("void SetMyAny(any@)", asFUNCTION(SetMyAny), asCALL_CDECL); assert( r >= 0 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-static void Assert(bool expr)'), (167, 2, u'-\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 2, u'-\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);')]
===========================================
Class:class CIntArray class CIntArray
Class: class CIntArrayArray { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\tassert(arg1 == "1");'), (12, 2, u'-\tassert(arg2->buffer == "2");'), (13, 2, u'-\tassert(arg3 == "3");'), (20, 2, u'-\tassert(arg1 == "1");'), (21, 2, u'-\tassert(arg2->buffer == "2");'), (22, 2, u'-\tassert(arg3 == "3");'), (48, 2, u'-\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 2, u'-\tr = engine->BeginConfigGroup("group"); assert( r >= 0 );'), (31, 2, u'-\tr = engine->RegisterGlobalProperty("float val", &val); assert( r >= 0 );'), (32, 2, u'-\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (41, 2, u'-\tr = engine->SetConfigGroupModuleAccess("group", asALL_MODULES, false); assert( r >= 0 );'), (54, 2, u'-\tr = engine->SetConfigGroupModuleAccess("group", 0, true); assert( r >= 0 );'), (67, 2, u'-\tr = engine->BeginConfigGroup("group"); assert( r >= 0 );'), (68, 2, u'-\tr = engine->RegisterGlobalFunction("void Func()", asFUNCTION(Func), asCALL_CDECL); assert( r >= 0 );'), (69, 2, u'-\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (71, 2, u'-\tr = engine->SetConfigGroupModuleAccess("group", "m", false); assert( r >= 0 );'), (82, 2, u'-\tr = engine->SetConfigGroupModuleAccess("group", "m", true); assert( r >= 0 );'), (96, 2, u'-\tr = engine->BeginConfigGroup("group"); assert( r >= 0 );'), (97, 2, u'-\tr = engine->RegisterObjectType("mytype", sizeof(int), asOBJ_PRIMITIVE); assert( r >= 0 );'), (98, 2, u'-\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (100, 2, u'-\tr = engine->SetConfigGroupModuleAccess("group", 0, false); assert( r >= 0 );'), (118, 2, u'-\tr = engine->RegisterObjectType("mytype", sizeof(int), asOBJ_PRIMITIVE); assert( r >= 0 );'), (120, 2, u'-\tr = engine->BeginConfigGroup("group"); assert( r >= 0 );'), (121, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD, "mytype f(mytype &in, mytype &in)", asFUNCTION(TypeAdd), asCALL_CDECL); assert( r >= 0 );'), (122, 2, u'-\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (124, 2, u'-\tr = engine->SetConfigGroupModuleAccess("group", 0, false); assert( r >= 0 );')]
===========================================
Class:class CObj class CObj
Class: class CTestConstructor { 
Class:class CMyObj { class CMyObj 
Class: class CMySecondObj { class CMySecondObj 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(250, 2, u'-static void Assert(bool expr)'), (271, 2, u'-\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 2, u'-\tr = engine->RegisterObjectType("obj", 4, asOBJ_PRIMITIVE); assert( r >= 0 );'), (55, 2, u'-    r = engine->RegisterObjectBehaviour("obj", asBEHAVE_ALLOC, "obj &f(uint)", asFUNCTION(MyAlloc), asCALL_CDECL); assert( r >= 0 );'), (56, 2, u'-\tr = engine->RegisterObjectBehaviour("obj", asBEHAVE_FREE, "void f(obj &in)", asFUNCTION(MyFree), asCALL_CDECL); assert( r >= 0 );'), (57, 2, u'-\tr = engine->RegisterGlobalFunction("obj retObj()", asFUNCTION(ReturnObj), asCALL_CDECL); assert( r >= 0 );'), (58, 2, u'-\tr = engine->RegisterGlobalFunction("obj retObj2(obj)", asFUNCTION(ReturnObjGeneric), asCALL_GENERIC); assert( r >= 0 );')]
===========================================
Class:class CDict class CDict
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(100, 2, u'-\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (101, 2, u'-\tr = engine->RegisterGlobalFunction("void MyFunc()", asFUNCTION(MyFunc), asCALL_CDECL); assert( r >= 0 );'), (102, 2, u'-\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (113, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (117, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (135, 2, u'-\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (136, 2, u'-\tr = engine->RegisterGlobalProperty("int global", 0); assert( r >= 0 );'), (137, 2, u'-\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (147, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (151, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (166, 2, u'-\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (167, 2, u'-\tr = engine->RegisterGlobalProperty("int global", 0); assert( r >= 0 );'), (168, 2, u'-\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (176, 2, u'-\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (178, 2, u'-\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (188, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (192, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (213, 2, u'-\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (214, 2, u'-\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD, "string@ f(const string &in, const mytype &in)", asFUNCTION(MyFunc), asCALL_CDECL); assert( r >= 0 );'), (215, 2, u'-\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (225, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (229, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (281, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r < 0 );'), (287, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (295, 2, u'-\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (297, 2, u'-\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (307, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (311, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (319, 2, u'-\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (321, 2, u'-\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (331, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (335, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (352, 2, u'-\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (354, 2, u'-\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (364, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (368, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (387, 2, u'-\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (389, 2, u'-\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (399, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (403, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (452, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r < 0 );'), (458, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (467, 2, u'-\tr = engine->RegisterObjectType("mytype", sizeof(int), asOBJ_PRIMITIVE); assert( r >= 0 );'), (471, 2, u'-\tr = engine->RegisterGlobalFunction("void func(mytype)", asFUNCTION(0), asCALL_CDECL); assert( r >= 0 );'), (474, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (476, 2, u'-\tr = engine->RemoveConfigGroup("group2"); assert( r <= 0 );'), (478, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r <= 0 );'), (488, 2, u'-\tr = engine->RegisterObjectType("mytype", sizeof(int), asOBJ_PRIMITIVE); assert( r >= 0 );'), (491, 2, u'-\tr = engine->RegisterGlobalFunction("void func(mytype)", asFUNCTION(0), asCALL_CDECL); assert( r >= 0 );'), (493, 2, u'-\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );')]
===========================================
Class:class CObject class CObject
Class: class CRefObject { 
Class: class Obj { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\tassert(gen->GetObject() == 0);'), (24, 2, u'-\tassert(arg1 == 23);'), (25, 2, u'-\tassert(arg2 == 23);'), (26, 2, u'-\tassert(arg3 == "test");'), (33, 2, u'-\tassert(gen->GetObject() == &obj);'), (40, 2, u'-\tassert(arg1 == 23);'), (41, 2, u'-\tassert(arg2 == 23);'), (62, 2, u'-\tassert(d == 23);'), (69, 2, u'-\tassert(s == "Hello");'), (114, 2, u'-\tr = engine->RegisterObjectType("string", sizeof(string), asOBJ_CLASS_CDA); assert( r >= 0 );'), (115, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(GenericString_Construct), asCALL_GENERIC); assert( r >= 0 );'), (116, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(GenericString_Destruct), asCALL_GENERIC); assert( r >= 0 );'), (117, 2, u'-\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ASSIGNMENT, "string &f(string &in)", asFUNCTION(GenericString_Assignment), asCALL_GENERIC); assert( r >= 0 );'), (118, 2, u'-    r = engine->RegisterStringFactory("string", asFUNCTION(GenericString_Factory), asCALL_GENERIC); assert( r >= 0 );'), (120, 2, u'-\tr = engine->RegisterGlobalFunction("void test(double)", asFUNCTION(TestDouble), asCALL_GENERIC); assert( r >= 0 );'), (121, 2, u'-\tr = engine->RegisterGlobalFunction("void test(string)", asFUNCTION(TestString), asCALL_GENERIC); assert( r >= 0 );'), (123, 2, u'-\tr = engine->RegisterGlobalFunction("double func1(int, double, string)", asFUNCTION(GenFunc1), asCALL_GENERIC); assert( r >= 0 );'), (125, 2, u'-\tr = engine->RegisterObjectType("obj", 4, asOBJ_PRIMITIVE); assert( r >= 0 );'), (126, 2, u'-\tr = engine->RegisterObjectMethod("obj", "string mthd1(int, double)", asFUNCTION(GenMethod1), asCALL_GENERIC); assert( r >= 0 );'), (127, 2, u'-    r = engine->RegisterObjectBehaviour("obj", asBEHAVE_ASSIGNMENT, "obj &f(obj &in)", asFUNCTION(GenAssign), asCALL_GENERIC); assert( r >= 0 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 2, u'-\tr = engine->BindAllImportedFunctions(0); assert( r >= 0 );')]
===========================================
Class:class CObject class CObject
Class: class CObject2 { 
Class:class CGuiButton class CGuiButton
Class: class CVector2 { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(100, 2, u'-\tassert(self);'), (156, 2, u'-\tassert(f == 30.0f);')]
===========================================
Class:class CRefClass class CRefClass
Class:class CRefClass class CRefClass
Class:class CObject class CObject
Class:class ObjectInstance class ObjectInstance
Class: class ObjectType { 
Class:class CRefClass class CRefClass
Class: class Class2 { 
Class: class Class3 { 
Class:class ClassNotComplex 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-\tassert(in == "foo");'), (28, 2, u'-\tassert(in == "foo");'), (33, 2, u'-\tassert(in == "foo");'), (57, 2, u'-\tr = engine->RegisterObjectType("Foo",sizeof(Foo),asOBJ_CLASS_CDA); assert( r >=0 );'), (63, 2, u'-\t\tasCALL_CDECL_OBJLAST);\tassert( r >=0 );'), (69, 2, u'-\t\tasCALL_CDECL_OBJLAST);\tassert( r >=0 );'), (75, 2, u'-\t\tasCALL_CDECL_OBJLAST);\tassert( r >=0 );'), (81, 2, u'-\t\tasCALL_CDECL_OBJLAST);\tassert( r >=0 );'), (83, 2, u'-\tr = engine->RegisterObjectType("string",sizeof(std::string),asOBJ_CLASS_CDA);assert( r >=0 );'), (89, 2, u'-\t\tasCALL_CDECL_OBJLAST);\tassert( r >=0 );'), (95, 2, u'-\t\tasCALL_CDECL_OBJLAST);\tassert( r >=0 );'), (101, 2, u'-\t\tasCALL_CDECL_OBJLAST);\tassert( r >=0 );'), (107, 2, u'-\t\tasCALL_CDECL_OBJLAST);\t\tassert( r >=0 );'), (111, 2, u'-\t\tasCALL_CDECL);assert( r >=0 );'), (116, 2, u'-\t\tasCALL_CDECL_OBJLAST);assert( r >=0 );'), (121, 2, u'-\t\tasCALL_CDECL_OBJLAST);assert( r >=0 );'), (126, 2, u'-\t\tasCALL_CDECL);assert( r >=0 );')]
===========================================
Class:class CBytecodeStream : public asIBinaryStream class CBytecodeStream : public asIBinaryStream
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(223, 2, u'-\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);')]
===========================================
Class:class CProp class CProp
Class:class MyStruct class MyStruct
Class: class MyClass { 
Class:class CScriptStream class CScriptStream
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(66, 2, u'-\tassert( ctx == 0 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-static void Assert(bool expr)'), (61, 2, u'-\tr = engine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL); assert( r >= 0 );')]
===========================================
Class:class csVector3 class csVector3
Class: class Class2 { 
Class: class Class3 { 
Class: class ClassA2 { 
Class: class ClassA3 { 
Class: class ClassC2 { 
Class: class ClassC3 { 
Class: class ClassD2 { 
Class: class ClassD3 { 
Class: class CBase1 { 
Class: class CBase2 { 
Class: class CDerivedMultiple : public CBase1, public CBase2 { 
Class: class Class2 { 
Class: class Class3 { 
Class: class Class2 { 
Class: class Class3 { 
Class: class ClassNotComplex { 
Class:  class StringConsumer { 
Class: class CVBase1 { 
Class: class CVBase2 { 
Class: class CBase { 
Class: class CDerived : public CBase { 
Class: class asCOutputStream : public asIOutputStream { 
Class: class asCBinaryStreamC : public asIBinaryStream { 
Class: class asCDebugStats { 
Class:   class CContextManager { 
Class: class asCOutputStream : public asIOutputStream { 
Class: class asCOutputStream : public asIOutputStream { 
Class:   class CContextManager { 
Class: class asCOutputStream : public asIOutputStream { 
Class: class asCOutputStream : public asIOutputStream { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+\tr = engine->RegisterObjectType("bstr", 4, asOBJ_PRIMITIVE); assert( r >= 0 );'), (27, 1, u'+\tr = engine->RegisterStringFactory("bstr", asFUNCTION(asBStrFactory), asCALL_CDECL); assert( r >= 0 );'), (30, 1, u'+\tr = engine->RegisterObjectMethod("bstr", "uint length() const", asFUNCTION(asBStrLengthMethod), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (33, 1, u'+\tr = engine->RegisterObjectBehaviour("bstr", asBEHAVE_CONSTRUCT,  "void f()",                  asFUNCTION(asBStrConstruct), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (34, 1, u'+\tr = engine->RegisterObjectBehaviour("bstr", asBEHAVE_DESTRUCT,   "void f()",                  asFUNCTION(asBStrDestruct),  asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (35, 1, u'+\tr = engine->RegisterObjectBehaviour("bstr", asBEHAVE_ASSIGNMENT, "bstr &f(const bstr &in)",   asFUNCTION(asBStrCopy),      asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (36, 1, u'+\tr = engine->RegisterObjectBehaviour("bstr", asBEHAVE_ADD_ASSIGN, "bstr &f(const bstr &in)",   asFUNCTION(asBStrAppend),    asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (37, 1, u'+\tr = engine->RegisterObjectBehaviour("bstr", asBEHAVE_INDEX,      "uint8 &f(int)",             asFUNCTION(asBStrByteAt),    asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (38, 1, u'+\tr = engine->RegisterObjectBehaviour("bstr", asBEHAVE_INDEX,      "const uint8 &f(int) const", asFUNCTION(asBStrByteAt),    asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (41, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "bstr f(bstr &in, bstr &in)", asFUNCTION(asBStrConcatenate),        asCALL_CDECL); assert( r >= 0 );'), (42, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_EQUAL,       "bool f(bstr &in, bstr &in)", asFUNCTION(asBStrEqual),              asCALL_CDECL); assert( r >= 0 );'), (43, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_NOTEQUAL,    "bool f(bstr &in, bstr &in)", asFUNCTION(asBStrNotEqual),           asCALL_CDECL); assert( r >= 0 );'), (44, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_LESSTHAN,    "bool f(bstr &in, bstr &in)", asFUNCTION(asBStrLessThan),           asCALL_CDECL); assert( r >= 0 );'), (45, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_LEQUAL,      "bool f(bstr &in, bstr &in)", asFUNCTION(asBStrLessThanOrEqual),    asCALL_CDECL); assert( r >= 0 );'), (46, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_GREATERTHAN, "bool f(bstr &in, bstr &in)", asFUNCTION(asBStrGreaterThan),        asCALL_CDECL); assert( r >= 0 );'), (47, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_GEQUAL,      "bool f(bstr &in, bstr &in)", asFUNCTION(asBStrGreaterThanOrEqual), asCALL_CDECL); assert( r >= 0 );'), (50, 1, u'+\tr = engine->RegisterGlobalFunction("bstr bstrSubstr(bstr &in, uint, uint)", asFUNCTION(asBStrSubstr),                           asCALL_CDECL); assert( r >= 0 );'), (51, 1, u'+\tr = engine->RegisterGlobalFunction("bstr bstrFormat(bits)",                 asFUNCTION(asBStrFormatBits),                       asCALL_CDECL); assert( r >= 0 );'), (52, 1, u'+\tr = engine->RegisterGlobalFunction("bstr bstrFormat(int)",                  asFUNCTION((asBSTR (*)(int))asBStrFormat),          asCALL_CDECL); assert( r >= 0 );'), (53, 1, u'+\tr = engine->RegisterGlobalFunction("bstr bstrFormat(uint)",                 asFUNCTION((asBSTR (*)(unsigned int))asBStrFormat), asCALL_CDECL); assert( r >= 0 );'), (54, 1, u'+\tr = engine->RegisterGlobalFunction("bstr bstrFormat(float)",                asFUNCTION((asBSTR (*)(float))asBStrFormat),        asCALL_CDECL); assert( r >= 0 );'), (55, 1, u'+\tr = engine->RegisterGlobalFunction("bstr bstrFormat(double)",               asFUNCTION((asBSTR (*)(double))asBStrFormat),       asCALL_CDECL); assert( r >= 0 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(154, 1, u'+\tr = engine->RegisterObjectType("string", sizeof(string), asOBJ_CLASS_CDA); assert( r >= 0 );'), (157, 1, u'+\tr = engine->RegisterStringFactory("string", asFUNCTION(StringFactory), asCALL_CDECL); assert( r >= 0 );'), (160, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_CONSTRUCT,  "void f()",                    asFUNCTION(ConstructString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (161, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_DESTRUCT,   "void f()",                    asFUNCTION(DestructString),  asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (162, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ASSIGNMENT, "string &f(const string &in)", asMETHODPR(string, operator =, (const string&), string&), asCALL_THISCALL); assert( r >= 0 );'), (163, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ADD_ASSIGN, "string &f(const string &in)", asMETHODPR(string, operator+=, (const string&), string&), asCALL_THISCALL); assert( r >= 0 );'), (166, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_EQUAL,       "bool f(const string &in, const string &in)",   asFUNCTIONPR(operator==, (const string &, const string &), bool), asCALL_CDECL); assert( r >= 0 );'), (167, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_NOTEQUAL,    "bool f(const string &in, const string &in)",   asFUNCTIONPR(operator!=, (const string &, const string &), bool), asCALL_CDECL); assert( r >= 0 );'), (168, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_LEQUAL,      "bool f(const string &in, const string &in)",   asFUNCTIONPR(operator<=, (const string &, const string &), bool), asCALL_CDECL); assert( r >= 0 );'), (169, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_GEQUAL,      "bool f(const string &in, const string &in)",   asFUNCTIONPR(operator>=, (const string &, const string &), bool), asCALL_CDECL); assert( r >= 0 );'), (170, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_LESSTHAN,    "bool f(const string &in, const string &in)",   asFUNCTIONPR(operator <, (const string &, const string &), bool), asCALL_CDECL); assert( r >= 0 );'), (171, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_GREATERTHAN, "bool f(const string &in, const string &in)",   asFUNCTIONPR(operator >, (const string &, const string &), bool), asCALL_CDECL); assert( r >= 0 );'), (172, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(const string &in, const string &in)", asFUNCTIONPR(operator +, (const string &, const string &), string), asCALL_CDECL); assert( r >= 0 );'), (175, 1, u'+\tr = engine->RegisterObjectMethod("string", "uint length() const", asMETHOD(string,size), asCALL_THISCALL); assert( r >= 0 );'), (178, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ASSIGNMENT, "string &f(double)", asFUNCTION(AssignDoubleToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (179, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ADD_ASSIGN, "string &f(double)", asFUNCTION(AddAssignDoubleToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (180, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(const string &in, double)", asFUNCTION(AddStringDouble), asCALL_CDECL); assert( r >= 0 );'), (181, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(double, const string &in)", asFUNCTION(AddDoubleString), asCALL_CDECL); assert( r >= 0 );'), (183, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ASSIGNMENT, "string &f(int)", asFUNCTION(AssignIntToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (184, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ADD_ASSIGN, "string &f(int)", asFUNCTION(AddAssignIntToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (185, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(const string &in, int)", asFUNCTION(AddStringInt), asCALL_CDECL); assert( r >= 0 );'), (186, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(int, const string &in)", asFUNCTION(AddIntString), asCALL_CDECL); assert( r >= 0 );'), (188, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ASSIGNMENT, "string &f(uint)", asFUNCTION(AssignUIntToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (189, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ADD_ASSIGN, "string &f(uint)", asFUNCTION(AddAssignUIntToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (190, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(const string &in, uint)", asFUNCTION(AddStringUInt), asCALL_CDECL); assert( r >= 0 );'), (191, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(uint, const string &in)", asFUNCTION(AddUIntString), asCALL_CDECL); assert( r >= 0 );'), (193, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ASSIGNMENT, "string &f(bits)", asFUNCTION(AssignBitsToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (194, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ADD_ASSIGN, "string &f(bits)", asFUNCTION(AddAssignBitsToString), asCALL_CDECL_OBJLAST); assert( r >= 0 );'), (195, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(const string &in, bits)", asFUNCTION(AddStringBits), asCALL_CDECL); assert( r >= 0 );'), (196, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD,         "string f(bits, const string &in)", asFUNCTION(AddBitsString), asCALL_CDECL); assert( r >= 0 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(109, 1, u'+\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);'), (110, 1, u'+\tr = engine->RegisterGlobalFunction("void SetMyAny(any@)", asFUNCTION(SetMyAny), asCALL_CDECL); assert( r >= 0 );'), (136, 1, u'+\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);'), (137, 1, u'+\tr = engine->RegisterGlobalFunction("void SetMyAny(any@)", asFUNCTION(SetMyAny), asCALL_CDECL); assert( r >= 0 );'), (163, 1, u'+\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);'), (164, 1, u'+\tr = engine->RegisterGlobalFunction("void SetMyAny(any@)", asFUNCTION(SetMyAny), asCALL_CDECL); assert( r >= 0 );'), (186, 1, u'+\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);'), (187, 1, u'+\tr = engine->RegisterGlobalFunction("void SetMyAny(any@)", asFUNCTION(SetMyAny), asCALL_CDECL); assert( r >= 0 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+static void Assert(bool expr)'), (167, 1, u'+\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);')]
===========================================
Class:class CIntArray class CIntArray
Class: class CIntArrayArray { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\tassert(arg1 == "1");'), (12, 1, u'+\tassert(arg2->buffer == "2");'), (13, 1, u'+\tassert(arg3 == "3");'), (20, 1, u'+\tassert(arg1 == "1");'), (21, 1, u'+\tassert(arg2->buffer == "2");'), (22, 1, u'+\tassert(arg3 == "3");'), (48, 1, u'+\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+\tr = engine->BeginConfigGroup("group"); assert( r >= 0 );'), (31, 1, u'+\tr = engine->RegisterGlobalProperty("float val", &val); assert( r >= 0 );'), (32, 1, u'+\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (41, 1, u'+\tr = engine->SetConfigGroupModuleAccess("group", asALL_MODULES, false); assert( r >= 0 );'), (54, 1, u'+\tr = engine->SetConfigGroupModuleAccess("group", 0, true); assert( r >= 0 );'), (67, 1, u'+\tr = engine->BeginConfigGroup("group"); assert( r >= 0 );'), (68, 1, u'+\tr = engine->RegisterGlobalFunction("void Func()", asFUNCTION(Func), asCALL_CDECL); assert( r >= 0 );'), (69, 1, u'+\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (71, 1, u'+\tr = engine->SetConfigGroupModuleAccess("group", "m", false); assert( r >= 0 );'), (82, 1, u'+\tr = engine->SetConfigGroupModuleAccess("group", "m", true); assert( r >= 0 );'), (96, 1, u'+\tr = engine->BeginConfigGroup("group"); assert( r >= 0 );'), (97, 1, u'+\tr = engine->RegisterObjectType("mytype", sizeof(int), asOBJ_PRIMITIVE); assert( r >= 0 );'), (98, 1, u'+\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (100, 1, u'+\tr = engine->SetConfigGroupModuleAccess("group", 0, false); assert( r >= 0 );'), (118, 1, u'+\tr = engine->RegisterObjectType("mytype", sizeof(int), asOBJ_PRIMITIVE); assert( r >= 0 );'), (120, 1, u'+\tr = engine->BeginConfigGroup("group"); assert( r >= 0 );'), (121, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD, "mytype f(mytype &in, mytype &in)", asFUNCTION(TypeAdd), asCALL_CDECL); assert( r >= 0 );'), (122, 1, u'+\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (124, 1, u'+\tr = engine->SetConfigGroupModuleAccess("group", 0, false); assert( r >= 0 );')]
===========================================
Class:class CObj class CObj
Class: class CTestConstructor { 
Class:class CMyObj { class CMyObj 
Class: class CMySecondObj { class CMySecondObj 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(250, 1, u'+static void Assert(bool expr)'), (271, 1, u'+\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 1, u'+\tr = engine->RegisterObjectType("obj", 4, asOBJ_PRIMITIVE); assert( r >= 0 );'), (55, 1, u'+    r = engine->RegisterObjectBehaviour("obj", asBEHAVE_ALLOC, "obj &f(uint)", asFUNCTION(MyAlloc), asCALL_CDECL); assert( r >= 0 );'), (56, 1, u'+\tr = engine->RegisterObjectBehaviour("obj", asBEHAVE_FREE, "void f(obj &in)", asFUNCTION(MyFree), asCALL_CDECL); assert( r >= 0 );'), (57, 1, u'+\tr = engine->RegisterGlobalFunction("obj retObj()", asFUNCTION(ReturnObj), asCALL_CDECL); assert( r >= 0 );'), (58, 1, u'+\tr = engine->RegisterGlobalFunction("obj retObj2(obj)", asFUNCTION(ReturnObjGeneric), asCALL_GENERIC); assert( r >= 0 );')]
===========================================
Class:class CDict class CDict
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(100, 1, u'+\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (101, 1, u'+\tr = engine->RegisterGlobalFunction("void MyFunc()", asFUNCTION(MyFunc), asCALL_CDECL); assert( r >= 0 );'), (102, 1, u'+\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (113, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (117, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (135, 1, u'+\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (136, 1, u'+\tr = engine->RegisterGlobalProperty("int global", 0); assert( r >= 0 );'), (137, 1, u'+\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (147, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (151, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (166, 1, u'+\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (167, 1, u'+\tr = engine->RegisterGlobalProperty("int global", 0); assert( r >= 0 );'), (168, 1, u'+\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (176, 1, u'+\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (178, 1, u'+\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (188, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (192, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (213, 1, u'+\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (214, 1, u'+\tr = engine->RegisterGlobalBehaviour(asBEHAVE_ADD, "string@ f(const string &in, const mytype &in)", asFUNCTION(MyFunc), asCALL_CDECL); assert( r >= 0 );'), (215, 1, u'+\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (225, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (229, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (281, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r < 0 );'), (287, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (295, 1, u'+\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (297, 1, u'+\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (307, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (311, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (319, 1, u'+\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (321, 1, u'+\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (331, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (335, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (352, 1, u'+\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (354, 1, u'+\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (364, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (368, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (387, 1, u'+\tr = engine->BeginConfigGroup("group1"); assert( r >= 0 );'), (389, 1, u'+\tr = engine->EndConfigGroup(); assert( r >= 0 );'), (399, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (403, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (452, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r < 0 );'), (458, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r >= 0 );'), (467, 1, u'+\tr = engine->RegisterObjectType("mytype", sizeof(int), asOBJ_PRIMITIVE); assert( r >= 0 );'), (471, 1, u'+\tr = engine->RegisterGlobalFunction("void func(mytype)", asFUNCTION(0), asCALL_CDECL); assert( r >= 0 );'), (474, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );'), (476, 1, u'+\tr = engine->RemoveConfigGroup("group2"); assert( r <= 0 );'), (478, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r <= 0 );'), (488, 1, u'+\tr = engine->RegisterObjectType("mytype", sizeof(int), asOBJ_PRIMITIVE); assert( r >= 0 );'), (491, 1, u'+\tr = engine->RegisterGlobalFunction("void func(mytype)", asFUNCTION(0), asCALL_CDECL); assert( r >= 0 );'), (493, 1, u'+\tr = engine->RemoveConfigGroup("group1"); assert( r == asCONFIG_GROUP_IS_IN_USE );')]
===========================================
Class:class CObject class CObject
Class: class CRefObject { 
Class: class Obj { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\tassert(gen->GetObject() == 0);'), (24, 1, u'+\tassert(arg1 == 23);'), (25, 1, u'+\tassert(arg2 == 23);'), (26, 1, u'+\tassert(arg3 == "test");'), (33, 1, u'+\tassert(gen->GetObject() == &obj);'), (40, 1, u'+\tassert(arg1 == 23);'), (41, 1, u'+\tassert(arg2 == 23);'), (62, 1, u'+\tassert(d == 23);'), (69, 1, u'+\tassert(s == "Hello");'), (114, 1, u'+\tr = engine->RegisterObjectType("string", sizeof(string), asOBJ_CLASS_CDA); assert( r >= 0 );'), (115, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(GenericString_Construct), asCALL_GENERIC); assert( r >= 0 );'), (116, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(GenericString_Destruct), asCALL_GENERIC); assert( r >= 0 );'), (117, 1, u'+\tr = engine->RegisterObjectBehaviour("string", asBEHAVE_ASSIGNMENT, "string &f(string &in)", asFUNCTION(GenericString_Assignment), asCALL_GENERIC); assert( r >= 0 );'), (118, 1, u'+    r = engine->RegisterStringFactory("string", asFUNCTION(GenericString_Factory), asCALL_GENERIC); assert( r >= 0 );'), (120, 1, u'+\tr = engine->RegisterGlobalFunction("void test(double)", asFUNCTION(TestDouble), asCALL_GENERIC); assert( r >= 0 );'), (121, 1, u'+\tr = engine->RegisterGlobalFunction("void test(string)", asFUNCTION(TestString), asCALL_GENERIC); assert( r >= 0 );'), (123, 1, u'+\tr = engine->RegisterGlobalFunction("double func1(int, double, string)", asFUNCTION(GenFunc1), asCALL_GENERIC); assert( r >= 0 );'), (125, 1, u'+\tr = engine->RegisterObjectType("obj", 4, asOBJ_PRIMITIVE); assert( r >= 0 );'), (126, 1, u'+\tr = engine->RegisterObjectMethod("obj", "string mthd1(int, double)", asFUNCTION(GenMethod1), asCALL_GENERIC); assert( r >= 0 );'), (127, 1, u'+    r = engine->RegisterObjectBehaviour("obj", asBEHAVE_ASSIGNMENT, "obj &f(obj &in)", asFUNCTION(GenAssign), asCALL_GENERIC); assert( r >= 0 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 1, u'+\tr = engine->BindAllImportedFunctions(0); assert( r >= 0 );')]
===========================================
Class:class CObject class CObject
Class: class CObject2 { 
Class:class CGuiButton class CGuiButton
Class: class CVector2 { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(100, 1, u'+\tassert(self);'), (156, 1, u'+\tassert(f == 30.0f);')]
===========================================
Class:class CRefClass class CRefClass
Class:class CRefClass class CRefClass
Class:class CObject class CObject
Class:class ObjectInstance class ObjectInstance
Class: class ObjectType { 
Class:class CRefClass class CRefClass
Class: class Class2 { 
Class: class Class3 { 
Class:class ClassNotComplex 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+\tassert(in == "foo");'), (28, 1, u'+\tassert(in == "foo");'), (33, 1, u'+\tassert(in == "foo");'), (57, 1, u'+\tr = engine->RegisterObjectType("Foo",sizeof(Foo),asOBJ_CLASS_CDA); assert( r >=0 );'), (63, 1, u'+\t\tasCALL_CDECL_OBJLAST);\tassert( r >=0 );'), (69, 1, u'+\t\tasCALL_CDECL_OBJLAST);\tassert( r >=0 );'), (75, 1, u'+\t\tasCALL_CDECL_OBJLAST);\tassert( r >=0 );'), (81, 1, u'+\t\tasCALL_CDECL_OBJLAST);\tassert( r >=0 );'), (83, 1, u'+\tr = engine->RegisterObjectType("string",sizeof(std::string),asOBJ_CLASS_CDA);assert( r >=0 );'), (89, 1, u'+\t\tasCALL_CDECL_OBJLAST);\tassert( r >=0 );'), (95, 1, u'+\t\tasCALL_CDECL_OBJLAST);\tassert( r >=0 );'), (101, 1, u'+\t\tasCALL_CDECL_OBJLAST);\tassert( r >=0 );'), (107, 1, u'+\t\tasCALL_CDECL_OBJLAST);\t\tassert( r >=0 );'), (111, 1, u'+\t\tasCALL_CDECL);assert( r >=0 );'), (116, 1, u'+\t\tasCALL_CDECL_OBJLAST);assert( r >=0 );'), (121, 1, u'+\t\tasCALL_CDECL_OBJLAST);assert( r >=0 );'), (126, 1, u'+\t\tasCALL_CDECL);assert( r >=0 );')]
===========================================
Class:class CBytecodeStream : public asIBinaryStream class CBytecodeStream : public asIBinaryStream
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(223, 1, u'+\tengine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL);')]
===========================================
Class:class CProp class CProp
Class:class MyStruct class MyStruct
Class: class MyClass { 
Class:class CScriptStream class CScriptStream
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(66, 1, u'+\tassert( ctx == 0 );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 1, u'+static void Assert(bool expr)'), (61, 1, u'+\tr = engine->RegisterGlobalFunction("void Assert(bool)", asFUNCTION(Assert), asCALL_CDECL); assert( r >= 0 );')]
===========================================
Class:class csVector3 class csVector3
Class: class Class2 { 
Class: class Class3 { 
Class: class ClassA2 { 
Class: class ClassA3 { 
Class: class ClassC2 { 
Class: class ClassC3 { 
Class: class ClassD2 { 
Class: class ClassD3 { 
Class: class CBase1 { 
Class: class CBase2 { 
Class: class CDerivedMultiple : public CBase1, public CBase2 { 
Class: class Class2 { 
Class: class Class3 { 
Class: class Class2 { 
Class: class Class3 { 
Class: class ClassNotComplex { 
Class:  class StringConsumer { 
Class: class CVBase1 { 
Class: class CVBase2 { 
Class: class CBase { 
Class: class CDerived : public CBase { 
Class: class asCOutputStream : public asIOutputStream { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u"+    assert(use_facet< numpunct<char> >(current_locale).decimal_point() == '.');")]
===========================================
===========================================
Total add: 7
Total del: 9
Header: CLangInfo::CRegion::SetGlobalLocale
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u"+    assert(use_facet< numpunct<char> >(current_locale).decimal_point() == '.');")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u"+    assert(use_facet< numpunct<char> >(current_locale).decimal_point() == '.');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );'), (4, 1, u'+   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue || type_ == arrayValue );')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: Value::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );'), (4, 1, u'+   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue || type_ == arrayValue );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );'), (4, 1, u'+   JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue || type_ == arrayValue );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 2, u'-    assert(clip_bm->bitmap.pitch >= 0);')]
===========================================
===========================================
Total add: 58
Total del: 10
Header: blend_vector_clip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 2, u'-    assert(clip_bm->bitmap.pitch >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 2, u'-    assert(clip_bm->bitmap.pitch >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(pps);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: isom_write_avcc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(pps);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(pps);')]
===========================================
Class:class DllLibblurayInterface { 
Class: class DllLibbluray : public DllDynamic, DllLibblurayInterface { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    assert(!(max_paths&(max_paths-1)));')]
===========================================
===========================================
Total add: 7
Total del: 10
Header: adpcm_compress_trellis
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    assert(!(max_paths&(max_paths-1)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    assert(!(max_paths&(max_paths-1)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                                assert(pathn < max_paths);\\'), (3, 1, u'+                                assert(pathn < FREEZE_INTERVAL<<avctx->trellis);\\')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: adpcm_compress_trellis
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                                assert(pathn < max_paths);\\'), (3, 1, u'+                                assert(pathn < FREEZE_INTERVAL<<avctx->trellis);\\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                                assert(pathn < max_paths);\\'), (3, 1, u'+                                assert(pathn < FREEZE_INTERVAL<<avctx->trellis);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);')]
===========================================
===========================================
Total add: 19
Total del: 0
Header: print_long_term
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);')]
===========================================
===========================================
Total add: 1
Total del: 14
Header: ff_h264_decode_ref_pic_marking
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(max_order >= MIN_LPC_ORDER && max_order <= MAX_LPC_ORDER && use_lpc > 0);'), (3, 1, u'+    assert(max_order >= MIN_LPC_ORDER && max_order <= MAX_LPC_ORDER &&')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: ff_lpc_calc_coefs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(max_order >= MIN_LPC_ORDER && max_order <= MAX_LPC_ORDER && use_lpc > 0);'), (3, 1, u'+    assert(max_order >= MIN_LPC_ORDER && max_order <= MAX_LPC_ORDER &&')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(max_order >= MIN_LPC_ORDER && max_order <= MAX_LPC_ORDER && use_lpc > 0);'), (3, 1, u'+    assert(max_order >= MIN_LPC_ORDER && max_order <= MAX_LPC_ORDER &&')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+   assert(n <= FF_KBD_WINDOW_MAX);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: ff_kbd_window_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+   assert(n <= FF_KBD_WINDOW_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+   assert(n <= FF_KBD_WINDOW_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(88, 2, u'-    assert(s == c->avctx);'), (89, 2, u'-    assert(count <= s->thread_count);'), (122, 2, u'-    assert(!s->thread_opaque);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(data);')]
===========================================
===========================================
Total add: 2
Total del: 24
Header: xiph_parse_sdp_line
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(data);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(data);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(rnd >=0 && rnd<=5 && rnd!=4);'), (3, 1, u'+    assert((unsigned)rnd<=5 && rnd!=4);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: av_rescale_rnd
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(rnd >=0 && rnd<=5 && rnd!=4);'), (3, 1, u'+    assert((unsigned)rnd<=5 && rnd!=4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(rnd >=0 && rnd<=5 && rnd!=4);'), (3, 1, u'+    assert((unsigned)rnd<=5 && rnd!=4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(scraper->Parent());')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: CVideoDatabase::SetScraperForPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(scraper->Parent());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(scraper->Parent());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      assert ( m_activePreset2.get() );')]
===========================================
===========================================
Total add: 13
Total del: 9
Header: projectM::evaluateSecondPreset
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      assert ( m_activePreset2.get() );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      assert ( m_activePreset2.get() );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(symbols_size <= 2 || !symbols);')]
===========================================
===========================================
Total add: 30
Total del: 5
Header: init_vlc_sparse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(symbols_size <= 2 || !symbols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(symbols_size <= 2 || !symbols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(327, 1, u'+    assert(size <= MAX_FRAMESIZE / 2);')]
===========================================
===========================================
Total add: 360
Total del: 0
Header: wmavoice_decode_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(327, 1, u'+    assert(size <= MAX_FRAMESIZE / 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(327, 1, u'+    assert(size <= MAX_FRAMESIZE / 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(enc->codec_type == CODEC_TYPE_AUDIO);'), (6, 1, u'+        assert(enc->codec_type == AVMEDIA_TYPE_AUDIO);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: flv_write_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(enc->codec_type == CODEC_TYPE_AUDIO);'), (6, 1, u'+        assert(enc->codec_type == AVMEDIA_TYPE_AUDIO);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(enc->codec_type == CODEC_TYPE_AUDIO);'), (6, 1, u'+        assert(enc->codec_type == AVMEDIA_TYPE_AUDIO);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+                        assert(st->cur_len == 0);')]
===========================================
===========================================
Total add: 9
Total del: 1
Header: av_read_frame_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+                        assert(st->cur_len == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+                        assert(st->cur_len == 0);')]
===========================================
Class:class CMPCDecodeBuffer { 
Class:  class CMPCInputThread : public CThread { 
Class: class DllLibCrystalHD : public DllDynamic, DllLibCrystalHDInterface { 
Class:  class CMPCDecodeBuffer { 
Class:  class CMPCInputThread : public CThread { 
Class:  class CMPCOutputThread : public CThread { 
Class: class DllLibCrystalHD : public DllDynamic, DllLibCrystalHDInterface { 
Class:  class CMPCDecodeBuffer { 
Class:  class CMPCInputThread : public CThread { 
Class:  class CMPCOutputThread : public CThread { 
Class: class DllLibOpenMaxInterface { 
Class: class DllLibOpenMax : public DllDynamic, DllLibOpenMaxInterface { 
Class:  class DllLibOpenMaxInterface { 
Class: class DllLibOpenMax : public DllDynamic, DllLibOpenMaxInterface { 
Class: class DllLibOpenMax : public DllDynamic, DllLibOpenMaxInterface { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-                assert(!r->long_ref);'), (10, 2, u'-                assert(r->long_ref);')]
===========================================
===========================================
Total add: 10
Total del: 10
Header: fill_picture_parameters
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-                assert(!r->long_ref);'), (10, 2, u'-                assert(r->long_ref);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-                assert(!r->long_ref);'), (10, 2, u'-                assert(r->long_ref);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    ASSERT(CUtil::HasSlashAtEnd(m_strPath));')]
===========================================
===========================================
Total add: 0
Total del: 5
Header: CFileItem::CFileItem
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    ASSERT(CUtil::HasSlashAtEnd(m_strPath));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    ASSERT(CUtil::HasSlashAtEnd(m_strPath));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      assert(false);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: CAudioRendererFactory::Create
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+  assert(false);')]
===========================================
===========================================
Total add: 6
Total del: 9
Header: CAudioRendererFactory::Create
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+  assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+  assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(false);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: CAddonMgr::Init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(false);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CAddonMgr::Init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(status == CP_OK);'), (13, 2, u'-  assert(status == CP_OK);'), (16, 2, u'-  assert(status == CP_OK);')]
===========================================
===========================================
Total add: 15
Total del: 16
Header: CAddonMgr::Init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(status == CP_OK);'), (13, 2, u'-  assert(status == CP_OK);'), (16, 2, u'-  assert(status == CP_OK);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(status == CP_OK);'), (13, 2, u'-  assert(status == CP_OK);'), (16, 2, u'-  assert(status == CP_OK);')]
===========================================
Class: class DllLibVDADecoderInterface { 
Class: class DllLibVDADecoder : public DllDynamic, DllLibVDADecoderInterface { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(monitorId >= 0 && monitorId < MAX_MONITORS_NUM);')]
===========================================
===========================================
Total add: 5
Total del: 7
Header: &CWinSystemWin32::GetMonitor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(monitorId >= 0 && monitorId < MAX_MONITORS_NUM);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(monitorId >= 0 && monitorId < MAX_MONITORS_NUM);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(!url.GetHostName().IsEmpty());')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: CPluginDirectory::GetDirectory
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(!url.GetHostName().IsEmpty());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(!url.GetHostName().IsEmpty());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 2, u'-static void assert_processed_zero(cp_context_t *context) {'), (59, 2, u'-\t\tassert(plugin->processed == 0);'), (63, 2, u'-#define assert_processed_zero(c) assert(1)'), (273, 2, u'-\tassert(plugin->runtime_lib == NULL);'), (437, 2, u'-\t\tassert(plugin->imported == NULL);'), (478, 2, u'-\t\tassert(plugin->state == CP_PLUGIN_INSTALLED);'), (594, 2, u'-\tassert_processed_zero(context);'), (791, 2, u'-\tassert(plugin->state == CP_PLUGIN_RESOLVED);'), (832, 2, u'-\t\t\tassert(list_isempty(importing));'), (916, 2, u'-\t\t\tassert(hash_isempty(plugin->context->resolved_symbols));'), (919, 2, u'-\t\t\tassert(hash_isempty(plugin->context->symbol_providers));'), (974, 2, u'-\tassert(plugin->state == CP_PLUGIN_ACTIVE);'), (976, 2, u'-\tassert(plugin->state < CP_PLUGIN_ACTIVE);'), (984, 2, u'-\tassert_processed_zero(context);'), (1033, 2, u'-\tassert(plugin->state == CP_PLUGIN_RESOLVED);'), (1043, 2, u'-\tassert(list_isempty(plugin->imported));'), (1072, 2, u'-\tassert(import != NULL);'), (1094, 2, u'-\tassert(ce != NULL);'), (1110, 2, u'-\tassert(plugin != NULL);'), (1148, 2, u'-\tassert(context != NULL);'), (1149, 2, u'-\tassert(plugin != NULL);'), (1156, 2, u'-\t\tassert(list_isempty(plugin->importing));'), (1159, 2, u'-\tassert(plugin->imported == NULL);'), (1183, 2, u'-\tassert(plugin->state == CP_PLUGIN_INSTALLED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(400, 2, u'-\tassert((num & 1) == 0);'), (965, 2, u'-\t\t\t\tassert(!strcmp(name, "extension"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+static void assert_processed_zero(cp_context_t *context) {'), (59, 1, u'+\t\tassert(plugin->processed == 0);'), (63, 1, u'+#define assert_processed_zero(c) assert(1)'), (273, 1, u'+\tassert(plugin->runtime_lib == NULL);'), (437, 1, u'+\t\tassert(plugin->imported == NULL);'), (478, 1, u'+\t\tassert(plugin->state == CP_PLUGIN_INSTALLED);'), (594, 1, u'+\tassert_processed_zero(context);'), (791, 1, u'+\tassert(plugin->state == CP_PLUGIN_RESOLVED);'), (832, 1, u'+\t\t\tassert(list_isempty(importing));'), (916, 1, u'+\t\t\tassert(hash_isempty(plugin->context->resolved_symbols));'), (919, 1, u'+\t\t\tassert(hash_isempty(plugin->context->symbol_providers));'), (974, 1, u'+\tassert(plugin->state == CP_PLUGIN_ACTIVE);'), (976, 1, u'+\tassert(plugin->state < CP_PLUGIN_ACTIVE);'), (984, 1, u'+\tassert_processed_zero(context);'), (1033, 1, u'+\tassert(plugin->state == CP_PLUGIN_RESOLVED);'), (1043, 1, u'+\tassert(list_isempty(plugin->imported));'), (1072, 1, u'+\tassert(import != NULL);'), (1094, 1, u'+\tassert(ce != NULL);'), (1110, 1, u'+\tassert(plugin != NULL);'), (1148, 1, u'+\tassert(context != NULL);'), (1149, 1, u'+\tassert(plugin != NULL);'), (1156, 1, u'+\t\tassert(list_isempty(plugin->importing));'), (1159, 1, u'+\tassert(plugin->imported == NULL);'), (1183, 1, u'+\tassert(plugin->state == CP_PLUGIN_INSTALLED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(400, 1, u'+\tassert((num & 1) == 0);'), (965, 1, u'+\t\t\t\tassert(!strcmp(name, "extension"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 2, u'-static void assert_processed_zero(cp_context_t *context) {'), (59, 2, u'-\t\tassert(plugin->processed == 0);'), (63, 2, u'-#define assert_processed_zero(c) assert(1)'), (273, 2, u'-\tassert(plugin->runtime_lib == NULL);'), (437, 2, u'-\t\tassert(plugin->imported == NULL);'), (478, 2, u'-\t\tassert(plugin->state == CP_PLUGIN_INSTALLED);'), (594, 2, u'-\tassert_processed_zero(context);'), (791, 2, u'-\tassert(plugin->state == CP_PLUGIN_RESOLVED);'), (832, 2, u'-\t\t\tassert(list_isempty(importing));'), (916, 2, u'-\t\t\tassert(hash_isempty(plugin->context->resolved_symbols));'), (919, 2, u'-\t\t\tassert(hash_isempty(plugin->context->symbol_providers));'), (974, 2, u'-\tassert(plugin->state == CP_PLUGIN_ACTIVE);'), (976, 2, u'-\tassert(plugin->state < CP_PLUGIN_ACTIVE);'), (984, 2, u'-\tassert_processed_zero(context);'), (1033, 2, u'-\tassert(plugin->state == CP_PLUGIN_RESOLVED);'), (1043, 2, u'-\tassert(list_isempty(plugin->imported));'), (1072, 2, u'-\tassert(import != NULL);'), (1094, 2, u'-\tassert(ce != NULL);'), (1110, 2, u'-\tassert(plugin != NULL);'), (1148, 2, u'-\tassert(context != NULL);'), (1149, 2, u'-\tassert(plugin != NULL);'), (1156, 2, u'-\t\tassert(list_isempty(plugin->importing));'), (1159, 2, u'-\tassert(plugin->imported == NULL);'), (1183, 2, u'-\tassert(plugin->state == CP_PLUGIN_INSTALLED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(400, 2, u'-\tassert((num & 1) == 0);'), (965, 2, u'-\t\t\t\tassert(!strcmp(name, "extension"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+static void assert_processed_zero(cp_context_t *context) {'), (59, 1, u'+\t\tassert(plugin->processed == 0);'), (63, 1, u'+#define assert_processed_zero(c) assert(1)'), (273, 1, u'+\tassert(plugin->runtime_lib == NULL);'), (437, 1, u'+\t\tassert(plugin->imported == NULL);'), (478, 1, u'+\t\tassert(plugin->state == CP_PLUGIN_INSTALLED);'), (594, 1, u'+\tassert_processed_zero(context);'), (791, 1, u'+\tassert(plugin->state == CP_PLUGIN_RESOLVED);'), (832, 1, u'+\t\t\tassert(list_isempty(importing));'), (916, 1, u'+\t\t\tassert(hash_isempty(plugin->context->resolved_symbols));'), (919, 1, u'+\t\t\tassert(hash_isempty(plugin->context->symbol_providers));'), (974, 1, u'+\tassert(plugin->state == CP_PLUGIN_ACTIVE);'), (976, 1, u'+\tassert(plugin->state < CP_PLUGIN_ACTIVE);'), (984, 1, u'+\tassert_processed_zero(context);'), (1033, 1, u'+\tassert(plugin->state == CP_PLUGIN_RESOLVED);'), (1043, 1, u'+\tassert(list_isempty(plugin->imported));'), (1072, 1, u'+\tassert(import != NULL);'), (1094, 1, u'+\tassert(ce != NULL);'), (1110, 1, u'+\tassert(plugin != NULL);'), (1148, 1, u'+\tassert(context != NULL);'), (1149, 1, u'+\tassert(plugin != NULL);'), (1156, 1, u'+\t\tassert(list_isempty(plugin->importing));'), (1159, 1, u'+\tassert(plugin->imported == NULL);'), (1183, 1, u'+\tassert(plugin->state == CP_PLUGIN_INSTALLED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(400, 1, u'+\tassert((num & 1) == 0);'), (965, 1, u'+\t\t\t\tassert(!strcmp(name, "extension"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(453, 1, u'+\tassert(ep->plugin != NULL);'), (590, 1, u'+\tassert(e->plugin != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+\tassert(env != NULL);'), (76, 1, u'+\t\tassert(hash_isempty(env->infos));'), (81, 1, u'+\t\tassert(hash_isempty(env->plugins));'), (86, 1, u'+\t\tassert(list_isempty(env->started_plugins));'), (91, 1, u'+\t\tassert(hash_isempty(env->ext_points));'), (95, 1, u'+\t\tassert(hash_isempty(env->extensions));'), (99, 1, u'+\t\tassert(list_isempty(env->run_funcs));'), (116, 1, u'+\tassert(context != NULL);'), (125, 1, u'+\t\tassert(hash_isempty(context->resolved_symbols));'), (129, 1, u'+\t\tassert(hash_isempty(context->symbol_providers));'), (141, 1, u'+\tassert(env != NULL);'), (142, 1, u'+\tassert(error != NULL);'), (279, 1, u'+\tassert(context->env->mutex == NULL || !cpi_is_mutex_locked(context->env->mutex));'), (281, 1, u'+\tassert(!context->env->locked);'), (441, 1, u'+\tassert(ctx != NULL);'), (442, 1, u'+\tassert(funcmask != 0);'), (443, 1, u'+\tassert(func != NULL);'), (444, 1, u'+\tassert(cpi_is_context_locked(ctx));'), (486, 1, u'+\tassert(context->env->locked > 0);'), (495, 1, u'+\tassert(context->env->locked > 0);'), (496, 1, u'+\tassert(0);'), (504, 1, u'+\tassert(context->env->locked > 0);'), (521, 1, u'+\tassert(size >= 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 1, u'+\tassert(framework_locked > 0);'), (138, 1, u'+\tassert(initialized > 0);'), (142, 1, u'+\t\tassert(framework_mutex == NULL || !cpi_is_mutex_locked(framework_mutex));'), (144, 1, u'+\t\tassert(!framework_locked);'), (163, 1, u'+\tassert(msg != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(181, 1, u'+\tassert(cpi_is_context_locked(context));'), (201, 1, u'+\tassert(context != NULL);'), (202, 1, u'+\tassert(msg != NULL);'), (203, 1, u'+\tassert(severity >= CP_LOG_DEBUG && severity <= CP_LOG_ERROR);'), (211, 1, u'+\tassert(context != NULL);'), (212, 1, u'+\tassert(msg != NULL);'), (213, 1, u'+\tassert(severity >= CP_LOG_DEBUG && severity <= CP_LOG_ERROR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+static void assert_processed_zero(cp_context_t *context) {'), (59, 1, u'+\t\tassert(plugin->processed == 0);'), (63, 1, u'+#define assert_processed_zero(c) assert(1)'), (273, 1, u'+\tassert(plugin->runtime_lib == NULL);'), (437, 1, u'+\t\tassert(plugin->imported == NULL);'), (478, 1, u'+\t\tassert(plugin->state == CP_PLUGIN_INSTALLED);'), (594, 1, u'+\tassert_processed_zero(context);'), (791, 1, u'+\tassert(plugin->state == CP_PLUGIN_RESOLVED);'), (832, 1, u'+\t\t\tassert(list_isempty(importing));'), (916, 1, u'+\t\t\tassert(hash_isempty(plugin->context->resolved_symbols));'), (919, 1, u'+\t\t\tassert(hash_isempty(plugin->context->symbol_providers));'), (974, 1, u'+\tassert(plugin->state == CP_PLUGIN_ACTIVE);'), (976, 1, u'+\tassert(plugin->state < CP_PLUGIN_ACTIVE);'), (984, 1, u'+\tassert_processed_zero(context);'), (1033, 1, u'+\tassert(plugin->state == CP_PLUGIN_RESOLVED);'), (1043, 1, u'+\tassert(list_isempty(plugin->imported));'), (1072, 1, u'+\tassert(import != NULL);'), (1094, 1, u'+\tassert(ce != NULL);'), (1110, 1, u'+\tassert(plugin != NULL);'), (1147, 1, u'+\tassert(context != NULL);'), (1148, 1, u'+\tassert(plugin != NULL);'), (1155, 1, u'+\t\tassert(list_isempty(plugin->importing));'), (1158, 1, u'+\tassert(plugin->imported == NULL);'), (1182, 1, u'+\tassert(plugin->state == CP_PLUGIN_INSTALLED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 1, u'+\tassert(context != NULL);'), (83, 1, u'+\tassert(res != NULL);'), (84, 1, u'+\tassert(df != NULL);'), (85, 1, u'+\tassert(cpi_is_context_locked(context));'), (118, 1, u'+\tassert(context != NULL);'), (119, 1, u'+\tassert(res != NULL);'), (120, 1, u'+\tassert(cpi_is_context_locked(context));'), (133, 1, u'+\tassert(context != NULL);'), (134, 1, u'+\tassert(info != NULL);'), (135, 1, u'+\tassert(cpi_is_context_locked(context));'), (138, 1, u'+\t\tassert(ir != NULL && info == ir->resource);'), (204, 1, u'+\t\t\tassert(plugin != NULL);'), (219, 1, u'+\tassert(context != NULL);'), (220, 1, u'+\tassert(plugins != NULL);'), (253, 1, u'+\t\t\tassert(i < n);'), (279, 1, u'+\tassert(status != CP_OK || n == 0 || plugins[n - 1] != NULL);'), (310, 1, u'+\tassert(context != NULL);'), (311, 1, u'+\tassert(ext_points != NULL);'), (344, 1, u'+\t\t\tassert(i < n);'), (370, 1, u'+\tassert(status != CP_OK || n == 0 || ext_points[n - 1] != NULL);'), (383, 1, u'+\tassert(context != NULL);'), (384, 1, u'+\tassert(extensions != NULL);'), (438, 1, u'+\t\t\t\t\tassert(i < n);'), (457, 1, u'+\t\t\t\t\tassert(i < n);'), (486, 1, u'+\tassert(status != CP_OK || n == 0 || extensions[n - 1] != NULL);'), (603, 1, u'+\tassert(event != NULL);'), (604, 1, u'+\tassert(event->plugin_id != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(400, 1, u'+\tassert((num & 1) == 0);'), (962, 1, u'+\t\t\t\tassert(!strcmp(name, "extension"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(230, 1, u'+\t\t\t\tassert(s == CP_OK);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(305, 1, u'+\t\tassert(symbol_info->usage_count > 0);'), (307, 1, u'+\t\tassert(provider_info->usage_count > 0);'), (324, 1, u'+\t\t\tassert(node != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(171, 1, u'+\tassert(cpi_is_context_locked(ctx));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 1, u'+\t\tassert(!ec);'), (88, 1, u'+\t\tassert(!ec);'), (90, 1, u'+\t\tassert(!ec);'), (99, 1, u'+\tassert(mutex != NULL);'), (100, 1, u'+\tassert(mutex->lock_count == 0);'), (102, 1, u'+\tassert(!ec);'), (104, 1, u'+\tassert(!ec);'), (106, 1, u'+\tassert(!ec);'), (142, 1, u'+\tassert(mutex != NULL);'), (151, 1, u'+\tassert(mutex != NULL);'), (171, 1, u'+\tassert(mutex != NULL);'), (202, 1, u'+\tassert(mutex != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(85, 1, u'+\t\tassert(ec);'), (91, 1, u'+\t\tassert(ec);'), (93, 1, u'+\t\tassert(ec);'), (102, 1, u'+\tassert(mutex != NULL);'), (103, 1, u'+\tassert(mutex->lock_count == 0);'), (105, 1, u'+\tassert(ec);'), (107, 1, u'+\tassert(ec);'), (109, 1, u'+\tassert(ec);'), (189, 1, u'+\tassert(mutex != NULL);'), (198, 1, u'+\tassert(mutex != NULL);'), (214, 1, u'+\tassert(mutex != NULL);'), (248, 1, u'+\tassert(mutex != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(165, 1, u'+\tassert(v1 != NULL && v2 != NULL);'), (189, 1, u'+\t\t\tassert(v1 <= v1n && v2 <= v2n);'), (191, 1, u'+\t\tassert(v1 == v1n && v2 == v2n);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                        assert(ist->decoding_needed);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: output_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                        assert(ist->decoding_needed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                        assert(ist->decoding_needed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+                assert(nextvp->target_clock >= vp->target_clock);')]
===========================================
===========================================
Total add: 25
Total del: 4
Header: video_refresh_timer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+                assert(nextvp->target_clock >= vp->target_clock);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+                assert(nextvp->target_clock >= vp->target_clock);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pitch_delay_frac >= 0 && pitch_delay_frac < precision);'), (3, 1, u'+    assert(frac_pos >= 0 && frac_pos < precision);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ff_acelp_interpolate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pitch_delay_frac >= 0 && pitch_delay_frac < precision);'), (3, 1, u'+    assert(frac_pos >= 0 && frac_pos < precision);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pitch_delay_frac >= 0 && pitch_delay_frac < precision);'), (3, 1, u'+    assert(frac_pos >= 0 && frac_pos < precision);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 2, u'-    assert(w==h);'), (69, 2, u'-    assert(s>=0);')]
===========================================
===========================================
Total add: 0
Total del: 96
Header: sse16_c
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 2, u'-    assert(w==h);'), (69, 2, u'-    assert(s>=0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 2, u'-    assert(w==h);'), (69, 2, u'-    assert(s>=0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        assert(ref>=0);'), (12, 1, u'+        assert(!FRAME_MBAFF);'), (15, 1, u'+        assert(ref==0);'), (27, 1, u'+        assert(s->quarter_sample);')]
===========================================
===========================================
Total add: 31
Total del: 0
Header: decode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        assert(ref>=0);'), (12, 1, u'+        assert(!FRAME_MBAFF);'), (15, 1, u'+        assert(ref==0);'), (27, 1, u'+        assert(s->quarter_sample);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        assert(ref>=0);'), (12, 1, u'+        assert(!FRAME_MBAFF);'), (15, 1, u'+        assert(ref==0);'), (27, 1, u'+        assert(s->quarter_sample);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(258, 2, u'-            assert(s->dquant>=-2 && s->dquant<=2);'), (259, 2, u'-            assert((s->dquant&1)==0);'), (260, 2, u'-            assert(mb_type>=0);'), (280, 2, u'-                assert(s->dquant==0);'), (317, 2, u'-                assert(s->mv_dir & MV_DIRECT);'), (322, 2, u'-                assert(mb_type > 0 && mb_type < 4);'), (470, 2, u'-                assert(!s->progressive_sequence);'), (491, 2, u'-                assert(s->mv_type==MV_TYPE_8X8);'), (690, 2, u'-        assert(s->mb_intra);')]
===========================================
===========================================
Total add: 71
Total del: 756
Header: ff_h263_update_motion_val
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(258, 2, u'-            assert(s->dquant>=-2 && s->dquant<=2);'), (259, 2, u'-            assert((s->dquant&1)==0);'), (260, 2, u'-            assert(mb_type>=0);'), (280, 2, u'-                assert(s->dquant==0);'), (317, 2, u'-                assert(s->mv_dir & MV_DIRECT);'), (322, 2, u'-                assert(mb_type > 0 && mb_type < 4);'), (470, 2, u'-                assert(!s->progressive_sequence);'), (491, 2, u'-                assert(s->mv_type==MV_TYPE_8X8);'), (690, 2, u'-        assert(s->mb_intra);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(258, 2, u'-            assert(s->dquant>=-2 && s->dquant<=2);'), (259, 2, u'-            assert((s->dquant&1)==0);'), (260, 2, u'-            assert(mb_type>=0);'), (280, 2, u'-                assert(s->dquant==0);'), (317, 2, u'-                assert(s->mv_dir & MV_DIRECT);'), (322, 2, u'-                assert(mb_type > 0 && mb_type < 4);'), (470, 2, u'-                assert(!s->progressive_sequence);'), (491, 2, u'-                assert(s->mv_type==MV_TYPE_8X8);'), (690, 2, u'-        assert(s->mb_intra);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(s->bitstream_buffer_size==0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: retry:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(s->bitstream_buffer_size==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(s->bitstream_buffer_size==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(129, 2, u'-                assert(left_xy[0] == left_xy[1]);')]
===========================================
===========================================
Total add: 6
Total del: 458
Header: static const uint8_t div6[52]={
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(129, 2, u'-                assert(left_xy[0] == left_xy[1]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(129, 2, u'-                assert(left_xy[0] == left_xy[1]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(175, 2, u'-    assert(part_width==1 || part_width==2 || part_width==4);')]
===========================================
===========================================
Total add: 83
Total del: 180
Header: check_intra_pred_mode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(175, 2, u'-    assert(part_width==1 || part_width==2 || part_width==4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(175, 2, u'-    assert(part_width==1 || part_width==2 || part_width==4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(164, 2, u'-    assert(h->ref_list[1][0].reference&3);')]
===========================================
===========================================
Total add: 8
Total del: 641
Header: pred_16x8_motion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(164, 2, u'-    assert(h->ref_list[1][0].reference&3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(164, 2, u'-    assert(h->ref_list[1][0].reference&3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 2, u'-        assert(offset == FF_ARRAY_ELEMS(coeff_token_vlc_tables));')]
===========================================
===========================================
Total add: 0
Total del: 95
Header: hl_motion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 2, u'-        assert(offset == FF_ARRAY_ELEMS(coeff_token_vlc_tables));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 2, u'-        assert(offset == FF_ARRAY_ELEMS(coeff_token_vlc_tables));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 2, u'-            assert(len<=32);'), (95, 2, u'-            assert(len<=32);'), (110, 2, u'-        assert(len <= 32);'), (199, 2, u'-                            assert(ref->reference);'), (200, 2, u'-                            assert(!ref->long_ref);'), (220, 2, u'-                        assert(!(ref && !ref->reference));'), (223, 2, u'-                            assert(ref->long_ref);')]
===========================================
===========================================
Total add: 0
Total del: 299
Header: hl_decode_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 2, u'-            assert(len<=32);'), (95, 2, u'-            assert(len<=32);'), (110, 2, u'-        assert(len <= 32);'), (199, 2, u'-                            assert(ref->reference);'), (200, 2, u'-                            assert(!ref->long_ref);'), (220, 2, u'-                        assert(!(ref && !ref->reference));'), (223, 2, u'-                            assert(ref->long_ref);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 2, u'-            assert(len<=32);'), (95, 2, u'-            assert(len<=32);'), (110, 2, u'-        assert(len <= 32);'), (199, 2, u'-                            assert(ref->reference);'), (200, 2, u'-                            assert(!ref->long_ref);'), (220, 2, u'-                        assert(!(ref && !ref->reference));'), (223, 2, u'-                            assert(ref->long_ref);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(h->long_ref_count==0);')]
===========================================
===========================================
Total add: 1
Total del: 12
Header: unreference_pic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(h->long_ref_count==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(h->long_ref_count==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-    assert(i >= 0 && i < h->short_ref_count);'), (78, 2, u'-            assert(h->long_ref[i]->long_ref == 1);'), (193, 2, u'-            assert(mmco[i].long_arg <= 16);'), (215, 2, u'-        default: assert(0);'), (264, 2, u'-            assert(i < 16);'), (320, 2, u'-            assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);')]
===========================================
===========================================
Total add: 9
Total del: 340
Header: flush_dpb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-    assert(i >= 0 && i < h->short_ref_count);'), (78, 2, u'-            assert(h->long_ref[i]->long_ref == 1);'), (193, 2, u'-            assert(mmco[i].long_arg <= 16);'), (215, 2, u'-        default: assert(0);'), (264, 2, u'-            assert(i < 16);'), (320, 2, u'-            assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-    assert(i >= 0 && i < h->short_ref_count);'), (78, 2, u'-            assert(h->long_ref[i]->long_ref == 1);'), (193, 2, u'-            assert(mmco[i].long_arg <= 16);'), (215, 2, u'-        default: assert(0);'), (264, 2, u'-            assert(i < 16);'), (320, 2, u'-            assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(75, 2, u'-    assert(total_coeff<=16);')]
===========================================
===========================================
Total add: 50
Total del: 196
Header: ff_h264_get_slice_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(75, 2, u'-    assert(total_coeff<=16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(75, 2, u'-    assert(total_coeff<=16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(101, 2, u'-       assert(h->slice_type_nos == FF_I_TYPE);'), (211, 2, u'-            assert(h->slice_type_nos == FF_P_TYPE); //FIXME SP correct ?'), (370, 2, u'-            assert(IS_8X16(mb_type));'), (475, 2, u'-            assert((cbp&15) == 0 || (cbp&15) == 15);'), (616, 2, u'-        assert(h->slice_type_nos == FF_B_TYPE);'), (880, 2, u'-        assert(cat == 1 || cat == 2 || cat == 4);'), (1017, 2, u'-    assert(coeff_count > 0);'), (1028, 2, u'-            assert( cat == 1 || cat == 2 || cat == 4 );'), (1209, 2, u'-        assert(h->slice_type_nos == FF_I_TYPE);'), (1477, 2, u'-            assert(IS_8X16(mb_type));'), (1879, 2, u'-    assert(!FRAME_MBAFF);')]
===========================================
===========================================
Total add: 135
Total del: 3201
Header: predict_field_decoding_flag
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(101, 2, u'-       assert(h->slice_type_nos == FF_I_TYPE);'), (211, 2, u'-            assert(h->slice_type_nos == FF_P_TYPE); //FIXME SP correct ?'), (370, 2, u'-            assert(IS_8X16(mb_type));'), (475, 2, u'-            assert((cbp&15) == 0 || (cbp&15) == 15);'), (616, 2, u'-        assert(h->slice_type_nos == FF_B_TYPE);'), (880, 2, u'-        assert(cat == 1 || cat == 2 || cat == 4);'), (1017, 2, u'-    assert(coeff_count > 0);'), (1028, 2, u'-            assert( cat == 1 || cat == 2 || cat == 4 );'), (1209, 2, u'-        assert(h->slice_type_nos == FF_I_TYPE);'), (1477, 2, u'-            assert(IS_8X16(mb_type));'), (1879, 2, u'-    assert(!FRAME_MBAFF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(101, 2, u'-       assert(h->slice_type_nos == FF_I_TYPE);'), (211, 2, u'-            assert(h->slice_type_nos == FF_P_TYPE); //FIXME SP correct ?'), (370, 2, u'-            assert(IS_8X16(mb_type));'), (475, 2, u'-            assert((cbp&15) == 0 || (cbp&15) == 15);'), (616, 2, u'-        assert(h->slice_type_nos == FF_B_TYPE);'), (880, 2, u'-        assert(cat == 1 || cat == 2 || cat == 4);'), (1017, 2, u'-    assert(coeff_count > 0);'), (1028, 2, u'-            assert( cat == 1 || cat == 2 || cat == 4 );'), (1209, 2, u'-        assert(h->slice_type_nos == FF_I_TYPE);'), (1477, 2, u'-            assert(IS_8X16(mb_type));'), (1879, 2, u'-    assert(!FRAME_MBAFF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(972, 1, u'+        assert(cat == 1 || cat == 2 || cat == 4);'), (1109, 1, u'+    assert(coeff_count > 0);'), (1120, 1, u'+            assert( cat == 1 || cat == 2 || cat == 4 );'), (1244, 1, u'+        assert(h->slice_type_nos == FF_B_TYPE);'), (1297, 1, u'+        assert(h->slice_type_nos == FF_I_TYPE);'), (1555, 1, u'+            assert(IS_8X16(mb_type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(295, 1, u'+        assert(offset == FF_ARRAY_ELEMS(coeff_token_vlc_tables));'), (401, 1, u'+    assert(total_coeff<=16);'), (585, 1, u'+       assert(h->slice_type_nos == FF_I_TYPE);'), (693, 1, u'+            assert(h->slice_type_nos == FF_P_TYPE); //FIXME SP correct ?'), (848, 1, u'+            assert(IS_8X16(mb_type));'), (949, 1, u'+            assert((cbp&15) == 0 || (cbp&15) == 15);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(158, 1, u'+    assert(h->ref_list[1][0].reference&3);'), (184, 1, u'+                assert(match_count==1);'), (345, 1, u'+                assert(b8_stride==2);'), (395, 1, u'+    assert(h->ref_list[1][0].reference&3);'), (470, 1, u'+            assert(h->sps.direct_8x8_inference_flag);'), (553, 1, u'+                assert(b8_stride == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(321, 1, u'+    assert(!FRAME_MBAFF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(125, 1, u'+            assert(len<=32);'), (128, 1, u'+            assert(len<=32);'), (143, 1, u'+        assert(len <= 32);'), (232, 1, u'+                            assert(ref->reference);'), (233, 1, u'+                            assert(!ref->long_ref);'), (253, 1, u'+                        assert(!(ref && !ref->reference));'), (256, 1, u'+                            assert(ref->long_ref);'), (390, 1, u'+    assert(i >= 0 && i < h->short_ref_count);'), (428, 1, u'+            assert(h->long_ref[i]->long_ref == 1);'), (444, 1, u'+    assert(h->long_ref_count==0);'), (555, 1, u'+            assert(mmco[i].long_arg <= 16);'), (577, 1, u'+        default: assert(0);'), (626, 1, u'+            assert(i < 16);'), (682, 1, u'+            assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(77, 2, u'-    assert(shift == 4);'), (110, 2, u'-    assert(shift == 4);')]
===========================================
===========================================
Total add: 0
Total del: 586
Header: get_symbol2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(77, 2, u'-    assert(shift == 4);'), (110, 2, u'-    assert(shift == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(77, 2, u'-    assert(shift == 4);'), (110, 2, u'-    assert(shift == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(avi->frames_hdr_strm[n]);'), (5, 1, u'+        assert(avist->frames_hdr_strm);')]
===========================================
===========================================
Total add: 7
Total del: 5
Header: avi_write_counters
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(avi->frames_hdr_strm[n]);'), (5, 1, u'+        assert(avist->frames_hdr_strm);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(avi->frames_hdr_strm[n]);'), (5, 1, u'+        assert(avist->frames_hdr_strm);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(!st->codec->codec);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: av_find_stream_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(!st->codec->codec);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(!st->codec->codec);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(495, 2, u'-    assert(2*VOFW == VOF);'), (497, 2, u'-    assert(c->chrDstH <= dstH);')]
===========================================
===========================================
Total add: 108
Total del: 502
Header: *sws_getContext
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(495, 2, u'-    assert(2*VOFW == VOF);'), (497, 2, u'-    assert(c->chrDstH <= dstH);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(495, 2, u'-    assert(2*VOFW == VOF);'), (497, 2, u'-    assert(c->chrDstH <= dstH);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isInteger());')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: CVariant::asInteger
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isInteger());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isInteger());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isUnsignedInteger());')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: CVariant::asUnsignedInteger
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isUnsignedInteger());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isUnsignedInteger());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isBoolean());')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: CVariant::asBoolean
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isBoolean());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isBoolean());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isString());')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: *CVariant::asString
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isString());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isString());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isObject() || isNull());')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: &CVariant::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isObject() || isNull());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isObject() || isNull());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isArray() && size() > position);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: &CVariant::operator[]
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isArray() && size() > position);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isArray() && size() > position);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isArray() || isNull());')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: CVariant::push_back
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isArray() || isNull());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isArray() || isNull());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isObject() || isArray());')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: CVariant::size
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isObject() || isArray());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isObject() || isArray());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isObject() || isArray());')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: CVariant::empty
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isObject() || isArray());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isObject() || isArray());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isObject() || isArray());')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: CVariant::clear
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isObject() || isArray());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isNull() || isObject() || isArray());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isObject() || isNull());')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: CVariant::erase
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isObject() || isNull());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isObject() || isNull());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isArray() || isNull());')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: CVariant::erase
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isArray() || isNull());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isArray() || isNull());')]
===========================================
Class:class CAddon;
Class:class CAddon;
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(!url.GetHostName().IsEmpty());')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: CPluginDirectory::GetDirectory
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(!url.GetHostName().IsEmpty());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(!url.GetHostName().IsEmpty());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    assert(profile);')]
===========================================
===========================================
Total add: 21
Total del: 18
Header: CGUIDialogProfileSettings::ShowForProfile
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    assert(profile);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    assert(profile);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT(g_settings.m_vecProfiles.size() > 0);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: CGUIMediaWindow::OnClick
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT(g_settings.m_vecProfiles.size() > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT(g_settings.m_vecProfiles.size() > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(content != CONTENT_NONE);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: CVideoDatabase::GetScraperForPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(content != CONTENT_NONE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(content != CONTENT_NONE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      assert(content != CONTENT_NONE);')]
===========================================
===========================================
Total add: 34
Total del: 52
Header: CVideoDatabase::GetScraperForPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      assert(content != CONTENT_NONE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      assert(content != CONTENT_NONE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(scraper->Parent());')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: CVideoDatabase::SetScraperForPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(scraper->Parent());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(scraper->Parent());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(addon->Type() == type);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: CAddonMgr::FindAddons
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(addon->Type() == type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(addon->Type() == type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      assert(!m_addon);')]
===========================================
===========================================
Total add: 1
Total del: 5
Header: CGUIWindowScreensaver::OnMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      assert(!m_addon);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      assert(!m_addon);')]
===========================================
Class:class CAddon;
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(619, 1, u'+        assert(addon->Type() == type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  ASSERT(m_state->m_easyHandle == NULL);')]
===========================================
===========================================
Total add: 33
Total del: 1
Header: CFileCurl::Exists
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  ASSERT(m_state->m_easyHandle == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  ASSERT(m_state->m_easyHandle == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 2, u'-\ta_assert(websValid(wp));'), (57, 2, u'-\ta_assert(url && *url);'), (58, 2, u"-\ta_assert(path && *path == '/');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 2, u'-\ta_assert(map);'), (117, 2, u'-\ta_assert(map);'), (119, 2, u'-\ta_assert(mp[H_LEN] >= H_INCR);'), (121, 2, u'-\ta_assert(mp[handle + H_OFFSET]);'), (122, 2, u'-\ta_assert(mp[H_USED]);'), (162, 2, u'-\ta_assert(list);'), (163, 2, u'-\ta_assert(max);'), (182, 2, u'-\t\ta_assert(cp);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(410, 1, u'+   assert( collectComments_ );'), (413, 1, u'+      assert( lastValue_ != 0 );')]
===========================================
Class:class DefaultValueAllocator : public ValueAllocator class DefaultValueAllocator : public ValueAllocator
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+   assert( current >= buffer );'), (62, 1, u'+   assert( current >= buffer );'), (390, 1, u'+         assert( childValues_.size() == size );'), (478, 1, u'+   assert( int(indentString_.size()) >= indentSize_ );'), (666, 1, u'+         assert( childValues_.size() == size );'), (758, 1, u'+   assert( indentString_.size() >= indentation_.size() );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(163, 1, u'+TestResult::getAssertionNestingLevel() const'), (517, 1, u'+        reportType == _CRT_ASSERT )')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+  assert(index == m_iSourceChannels);')]
===========================================
===========================================
Total add: 15
Total del: 11
Header: CDVDAudioCodecLibFaad::GetChannelMap
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+  assert(index == m_iSourceChannels);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+  assert(index == m_iSourceChannels);')]
===========================================
Class:class CGetDirectory   : IJobCallback { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isInteger());'), (4, 1, u'+  assert(isNull() || isInteger());')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: CVariant::asInteger
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isInteger());'), (4, 1, u'+  assert(isNull() || isInteger());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isInteger());'), (4, 1, u'+  assert(isNull() || isInteger());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isUnsignedInteger());'), (4, 1, u'+  assert(isNull() || isUnsignedInteger());')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: CVariant::asUnsignedInteger
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isUnsignedInteger());'), (4, 1, u'+  assert(isNull() || isUnsignedInteger());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isUnsignedInteger());'), (4, 1, u'+  assert(isNull() || isUnsignedInteger());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isBoolean());'), (4, 1, u'+  assert(isNull() || isBoolean());')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: CVariant::asBoolean
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isBoolean());'), (4, 1, u'+  assert(isNull() || isBoolean());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isBoolean());'), (4, 1, u'+  assert(isNull() || isBoolean());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isString());'), (4, 1, u'+  assert(isNull() || isString());')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: *CVariant::asString
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isString());'), (4, 1, u'+  assert(isNull() || isString());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isString());'), (4, 1, u'+  assert(isNull() || isString());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(sampleSize == 2);')]
===========================================
===========================================
Total add: 15
Total del: 3
Header: CPCMRemap::SetInputFormat
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(sampleSize == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(sampleSize == 2);')]
===========================================
Class: class DllLibCrystalHD : public DllDynamic, DllLibCrystalHDInterface { 
Class:  class CMPCDecodeBuffer { 
Class:  class CMPCInputThread : public CThread { 
Class:  class CMPCOutputThread : public CThread { 
Class: class DllLibCrystalHD : public DllDynamic, DllLibCrystalHDInterface { 
Class:  class CMPCDecodeBuffer { 
Class:  class CMPCInputThread : public CThread { 
Class:  class CMPCOutputThread : public CThread { 
Class:  class CNtpSocket { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 2, u'-    assert(i < limit);'), (93, 2, u'-    assert(!buffer_);       // find realloc error'), (151, 2, u'-    assert (i == AUTO);'), (248, 2, u'-    assert(!buffer_);   // find realloc error'), (264, 2, u'-    assert(i == AUTO);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(337, 2, u'-    assert(peerX509_ == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1106, 2, u'-    assert(keyOutput == (keyLen + ivLen));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(80, 2, u'-            base.ca_, 0) != SSL_SUCCESS) assert(0);'), (83, 2, u'-            base.cert_, SSL_FILETYPE_PEM) != SSL_SUCCESS) assert(0);'), (86, 2, u'-            SSL_FILETYPE_PEM) != SSL_SUCCESS) assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(905, 2, u'-    assert(write_buffer_ == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(96, 2, u'-    assert( (keylen == 16) || (keylen == 24) || (keylen == 32) );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(258, 2, u'-        assert(expBegin->NotNegative());')]
===========================================
Class:class BadCertificate 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(96, 2, u'-\tassert(keylength >= 4 && keylength <= 56);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(106, 2, u'-    assert((bytes % 2) == 0);'), (116, 2, u'-        assert( b  < sizeof(hexDecode)/sizeof(hexDecode[0]) );'), (117, 2, u'-        assert( b2 < sizeof(hexDecode)/sizeof(hexDecode[0]) );'), (122, 2, u'-        assert( b != bad && b2 != bad );'), (185, 2, u'-    assert(i == outSz);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(194, 2, u'-    assert(!!r_ && !!s_);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 2, u'-    assert(digSz  <= MaxDigestSz);'), (43, 2, u'-    assert(buffSz <= MaxBufferSz);'), (124, 2, u'-    assert(digSz  <= MaxDigestSz);'), (125, 2, u'-    assert(buffSz <= MaxBufferSz);')]
===========================================
Class:class DWord { class DWord 
Class:  class Word { class Word 
Class:    template <class S, class D> S DivideThreeWordsByTwo(S* A, S B0, S B1, D* dummy_VC6_WorkAround = 0) { 
Class:    class Portable { 
Class:   class PentiumOptimized : public Portable { 
Class: class P4Optimized { 
Class:  class LowLevel : public PentiumOptimized { 
Class:class BadBER 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 2, u'-    assert(modn.Exponentiate(y, e_) == x);  // check'), (135, 2, u'-    assert(i==pkcsBlockLen || pkcsBlock[i-1]==0);'), (190, 2, u'-    assert(i==pkcsBlockLen || pkcsBlock[i-1]==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(150, 2, u'-\tassert(keylen >= 16 && keylen <= 32);')]
===========================================
Class:class MemoryTracker { class MemoryTracker 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(render != NULL);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: CVDPAU::FFGetBuffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(render != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(render != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(render != NULL);')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: CVDPAU::FFReleaseBuffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(render != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(render != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(src->linesize[0]==0 && src->linesize[1]==0 && src->linesize[2]==0);'), (3, 2, u'-  assert(offset[0]==0 && offset[1]==0 && offset[2]==0);')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: CVDPAU::FFDrawSlice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(src->linesize[0]==0 && src->linesize[1]==0 && src->linesize[2]==0);'), (3, 2, u'-  assert(offset[0]==0 && offset[1]==0 && offset[2]==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(src->linesize[0]==0 && src->linesize[1]==0 && src->linesize[2]==0);'), (3, 2, u'-  assert(offset[0]==0 && offset[1]==0 && offset[2]==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert( render != NULL );')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: CVDPAU::FFDrawSlice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert( render != NULL );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert( render != NULL );')]
===========================================
Class: class DllLibCrystalHD : public DllDynamic, DllLibCrystalHDInterface { 
Class:  class CMPCDecodeBuffer { 
Class:  class CMPCInputThread : public CThread { 
Class:  class CMPCOutputThread : public CThread { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(avc_context->pix_fmt == PIX_FMT_YUV420P);')]
===========================================
===========================================
Total add: 29
Total del: 27
Header: encode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(avc_context->pix_fmt == PIX_FMT_YUV420P);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(avc_context->pix_fmt == PIX_FMT_YUV420P);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    assert(lp_half_order <= MAX_LP_HALF_ORDER);')]
===========================================
===========================================
Total add: 21
Total del: 11
Header: lsp2polyf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    assert(lp_half_order <= MAX_LP_HALF_ORDER);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    assert(lp_half_order <= MAX_LP_HALF_ORDER);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            assert(!(s->avctx->flags & CODEC_FLAG_EMU_EDGE));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: mjpeg_decode_scan
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            assert(!(s->avctx->flags & CODEC_FLAG_EMU_EDGE));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            assert(!(s->avctx->flags & CODEC_FLAG_EMU_EDGE));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(mb_y < s->mb_height);')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: mpeg_decode_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(mb_y < s->mb_height);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(mb_y < s->mb_height);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u"-        assert(s->pict_type != FF_B_TYPE); //these should have been dropped if we don't have a reference")]
===========================================
===========================================
Total add: 0
Total del: 6
Header: alloc:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u"-        assert(s->pict_type != FF_B_TYPE); //these should have been dropped if we don't have a reference")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u"-        assert(s->pict_type != FF_B_TYPE); //these should have been dropped if we don't have a reference")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            assert((s->mb_y&1) == (s->picture_structure == PICT_BOTTOM_FIELD));')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: ff_init_block_index
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            assert((s->mb_y&1) == (s->picture_structure == PICT_BOTTOM_FIELD));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            assert((s->mb_y&1) == (s->picture_structure == PICT_BOTTOM_FIELD));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(count <= s->thread_count);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: avcodec_thread_execute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(count <= s->thread_count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(count <= s->thread_count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(flags == URL_WRONLY || flags == URL_RDONLY);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: url_resetbuf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(flags == URL_WRONLY || flags == URL_RDONLY);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(flags == URL_WRONLY || flags == URL_RDONLY);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(102, 1, u'+  assert(skip_ != NULL);'), (107, 1, u'+  assert(skip_ != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(342, 1, u'+  assert(vec[0] >= 0);'), (343, 1, u'+  assert(vec[1] >= 0);'), (375, 1, u'+      assert(NULL == "Unexpected return value from pcre_config(NEWLINE)");'), (393, 1, u'+    assert(matchstart >= start);'), (394, 1, u'+    assert(matchend >= matchstart);'), (542, 1, u'+  assert((1 + n) * 3 <= vecsize);  // results + PCRE workspace'), (544, 1, u'+  assert(matches >= 0);  // TryMatch never returns negatives'), (580, 1, u'+  assert(n >= 0);'), (631, 1, u'+  assert(pcre_retval == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(323, 1, u'+    assert(re.error().empty());'), (336, 1, u'+    assert(re.error().empty());'), (343, 1, u'+    assert(re.error().empty());'), (578, 1, u'+                bool assertive = true) {'), (584, 1, u'+                  (assertive? "matches" : "doesn\'t match"),'), (586, 1, u'+  if (assertive) {'), (970, 1, u"+    assert(buf[strlen(buf)-1] != '9');"), (975, 1, u"+    assert(buf[strlen(buf)-1] != '9');"), (993, 1, u"+    assert(buf[strlen(buf)-1] != '9');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(!zeroconf_service.GetIP().empty());'), (31, 1, u'+        assert(!zeroconf_service.GetIP().empty());')]
===========================================
===========================================
Total add: 25
Total del: 18
Header: CZeroconfDirectory::GetDirectory
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(!zeroconf_service.GetIP().empty());'), (31, 1, u'+        assert(!zeroconf_service.GetIP().empty());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(!zeroconf_service.GetIP().empty());'), (31, 1, u'+        assert(!zeroconf_service.GetIP().empty());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(!fcr_string.empty());'), (8, 2, u'-  assert(pos1 != -1 && pos2 != -1);')]
===========================================
===========================================
Total add: 13
Total del: 8
Header: CZeroconfBrowser::ZeroconfService::toPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(!fcr_string.empty());'), (8, 2, u'-  assert(pos1 != -1 && pos2 != -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(!fcr_string.empty());'), (8, 2, u'-  assert(pos1 != -1 && pos2 != -1);')]
===========================================
Class: class CASAPDecoder : public CInputDecoder { 
Class: class CASAPPlugin : public CInputPlugin { 
Class: class CASAPSourceStream : public CSourceStream, IMediaSeeking { 
Class: class CASAPSource : public CSource, IFileSourceFilter { 
Class: class input_asap { 
Class: class preferences_page_asap : public preferences_page { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_focusedLayout && m_layout);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: CGUIBaseContainer::CalculateLayout
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_focusedLayout && m_layout);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_focusedLayout && m_layout);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(totalAvailableOutputSurfaces > 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: CVDPAU::ConfigVDPAU
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(totalAvailableOutputSurfaces > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(totalAvailableOutputSurfaces > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(monitorId >= 0 && monitorId < MAX_MONITORS_NUM);')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: CWinSystemWin32::ResizeInternal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(monitorId >= 0 && monitorId < MAX_MONITORS_NUM);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(monitorId >= 0 && monitorId < MAX_MONITORS_NUM);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  assert(port.length());'), (17, 1, u'+  assert(m_iPort <= 65535 && m_iPort >= 1);')]
===========================================
===========================================
Total add: 3
Total del: 13
Header: CEventServer::StartServer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  assert(port.length());'), (17, 1, u'+  assert(m_iPort <= 65535 && m_iPort >= 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  assert(port.length());'), (17, 1, u'+  assert(m_iPort <= 65535 && m_iPort >= 1);')]
===========================================
Class: class NPT_HttpTcpConnector : public NPT_HttpClient::Connector { 
Class: class NPT_HttpStaticProxySelector : public NPT_HttpProxySelector { 
Class: class NPT_LogFileHandler : public NPT_LogHandler { class NPT_LogFileHandler : public NPT_LogHandler 
Class: class NPT_LogTcpHandler : public NPT_LogHandler { class NPT_LogTcpHandler : public NPT_LogHandler 
Class: class NPT_LogUdpHandler : public NPT_LogHandler { class NPT_LogUdpHandler : public NPT_LogHandler 
Class: class NPT_LogNullHandler : public NPT_LogHandler { class NPT_LogNullHandler : public NPT_LogHandler 
Class: class NPT_TlsContextImpl { class NPT_TlsContextImpl 
Class:  class NPT_TlsSessionImpl { class NPT_TlsSessionImpl 
Class: class NPT_TlsInputStream : public NPT_InputStream { class NPT_TlsInputStream : public NPT_InputStream 
Class: class NPT_TlsOutputStream : public NPT_OutputStream { class NPT_TlsOutputStream : public NPT_OutputStream 
Class: class NPT_XmlAttributeFinder { 
Class: class NPT_XmlAttributeFinderWithPrefix { 
Class: class NPT_XmlTagFinder { 
Class: class NPT_XmlTextFinder { 
Class: class NPT_XmlNamespaceCollapser { 
Class: class NPT_XmlAccumulator { class NPT_XmlAccumulator 
Class: class NPT_XmlProcessor { class NPT_XmlProcessor 
Class: class NPT_XmlAttributeWriter { 
Class: class NPT_XmlNodeWriter { 
Class: class NPT_XmlNodeCanonicalWriter { 
Class: class NPT_ZipInflateState { class NPT_ZipInflateState 
Class: class NPT_ZipDeflateState { class NPT_ZipDeflateState 
Class: class NPT_BsdSocketFd { 
Class: class NPT_BsdSocketStream { 
Class: class NPT_BsdSocketInputStream : public NPT_InputStream,                                  private NPT_BsdSocketStream { 
Class: class NPT_BsdSocket : public NPT_SocketInterface { 
Class: class NPT_BsdUdpSocket : public    NPT_UdpSocketInterface,                          protected NPT_BsdSocket  { 
Class: class NPT_BsdUdpMulticastSocket : public    NPT_UdpMulticastSocketInterface,                                   protected NPT_BsdUdpSocket  { 
Class: class NPT_BsdTcpClientSocket : protected NPT_BsdSocket { 
Class: class NPT_BsdTcpServerSocket : public    NPT_TcpServerSocketInterface,                                protected NPT_BsdSocket  { 
Class: class NPT_NullSystem : public NPT_SystemInterface { 
Class: class NPT_PSPDirectory : public NPT_DirectoryInterface { 
Class: class NPT_PSPFileStream { 
Class: class NPT_PSPFileInputStream : public NPT_InputStream,                                private NPT_PSPFileStream  { 
Class: class NPT_PSPFileOutputStream : public NPT_OutputStream,                                 private NPT_PSPFileStream { 
Class: class NPT_PSPFile: public NPT_FileInterface { 
Class: class NPT_PSPSharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_PSPAtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_PSPThread : public NPT_ThreadInterface { 
Class: class NPT_PosixSharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_PosixAtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_PosixThread : public NPT_ThreadInterface { 
Class: class NPT_StdcFileWrapper { 
Class: class NPT_StdcFileStream { 
Class: class NPT_StdcFileInputStream : public NPT_InputStream,                                 private NPT_StdcFileStream  { 
Class: class NPT_StdcFileOutputStream : public NPT_OutputStream,                                  private NPT_StdcFileStream { 
Class: class NPT_StdcFile: public NPT_FileInterface { 
Class: class NPT_Win32SerialPortStream { 
Class: class NPT_Win32SerialPortInputStream : public NPT_InputStream,                                        private NPT_Win32SerialPortStream  { 
Class: class NPT_Win32SerialPortOutputStream : public NPT_OutputStream,                                         private NPT_Win32SerialPortStream { 
Class: class NPT_Win32SerialPort: public NPT_SerialPortInterface { 
Class: class NPT_Win32SharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_Win32AtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_Win32Thread : public NPT_ThreadInterface { 
Class: class A { class A 
Class: class KillHandler : public NPT_HttpRequestHandler { 
Class: class TestHandler1 : public NPT_HttpRequestHandler { 
Class: class TestHandler2 : public NPT_HttpRequestHandler { 
Class: class ChunkedHandler : public NPT_HttpRequestHandler { 
Class: class A { class A 
Class:class Test1 { class Test1 
Class: class A { class A 
Class: class FooServerBarCmd1Message : public FooServerMessage { 
Class: class FooServerBarCmd2Message : public FooServerMessage { 
Class: class FooServerBarCmd3Message : public FooServerMessage { 
Class: class FooServerBarCmd4Message : public NPT_Message { 
Class: class FooClientMessageHandler { 
Class: class FooClientBarNotification1Message : public FooClientMessage { 
Class: class FooServer : public NPT_Thread,                   public NPT_MessageReceiver,                   public NPT_MessageHandler,                   public FooServerMessageHandler { 
Class: class FooClient : public NPT_MessageReceiver,                   public NPT_MessageHandler,                   public FooClientMessageHandler { 
Class:class TestServerTestCommandMessage : public TestServerMessage { 
Class:class TestClientMessageHandler { 
Class:class TestClientReplyMessage : public TestClientMessage { 
Class:class TestServer : public NPT_Thread,                    public NPT_MessageReceiver,                    public NPT_MessageHandler,                    public TestServerMessageHandler { 
Class:class TestClient : public NPT_MessageReceiver,                    public NPT_MessageHandler,                    public TestClientMessageHandler { 
Class:  class BarA { 
Class: class Item { 
Class: class WriterThread : public NPT_Thread { 
Class: class ReaderThread : public NPT_Thread { 
Class: class Thread1 : public NPT_Thread { 
Class: class Thread2 : public NPT_Runnable { 
Class: class Thread3 : public NPT_Thread { 
Class: class Thread4 : public NPT_Runnable { 
Class: class T1 : public NPT_Runnable { 
Class: class CBR : public NPT_Runnable, public NPT_ThreadCallbackReceiver { 
Class: class CBW : public NPT_Runnable { 
Class: class CBR2 : public NPT_Runnable, public NPT_ThreadCallbackReceiver { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(827, 1, u'+    Assert(strm->avail_out > 0, "bug2");'), (1061, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1072, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1075, 1, u'+        Assert(cur_match < s->strstart, "no future");'), (1102, 1, u'+        Assert(scan[2] == match[2], "scan[2]?");'), (1113, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1133, 1, u'+        Assert(*scan == *match, "match[2]?");'), (1145, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1187, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1189, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1191, 1, u'+    Assert(cur_match < s->strstart, "no future");'), (1206, 1, u'+    Assert(*scan == *match, "match[2]?");'), (1218, 1, u'+    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1340, 1, u'+        Assert(more >= 2, "more < 2");'), (1409, 1, u'+            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (1417, 1, u'+        Assert(s->block_start >= 0L, "block gone");'), (1666, 1, u'+    Assert (flush != Z_NO_FLUSH, "no flush?");')]
===========================================
Class: class NPT_HttpTcpConnector : public NPT_HttpClient::Connector { 
Class: class NPT_HttpStaticProxySelector : public NPT_HttpProxySelector { 
Class: class NPT_LogFileHandler : public NPT_LogHandler { class NPT_LogFileHandler : public NPT_LogHandler 
Class: class NPT_LogTcpHandler : public NPT_LogHandler { class NPT_LogTcpHandler : public NPT_LogHandler 
Class: class NPT_LogUdpHandler : public NPT_LogHandler { class NPT_LogUdpHandler : public NPT_LogHandler 
Class: class NPT_LogNullHandler : public NPT_LogHandler { class NPT_LogNullHandler : public NPT_LogHandler 
Class: class NPT_TlsContextImpl { class NPT_TlsContextImpl 
Class:  class NPT_TlsSessionImpl { class NPT_TlsSessionImpl 
Class: class NPT_TlsInputStream : public NPT_InputStream { class NPT_TlsInputStream : public NPT_InputStream 
Class: class NPT_TlsOutputStream : public NPT_OutputStream { class NPT_TlsOutputStream : public NPT_OutputStream 
Class: class NPT_XmlAttributeFinder { 
Class: class NPT_XmlAttributeFinderWithPrefix { 
Class: class NPT_XmlTagFinder { 
Class: class NPT_XmlTextFinder { 
Class: class NPT_XmlNamespaceCollapser { 
Class: class NPT_XmlAccumulator { class NPT_XmlAccumulator 
Class: class NPT_XmlProcessor { class NPT_XmlProcessor 
Class: class NPT_XmlAttributeWriter { 
Class: class NPT_XmlNodeWriter { 
Class: class NPT_XmlNodeCanonicalWriter { 
Class: class NPT_ZipInflateState { class NPT_ZipInflateState 
Class: class NPT_ZipDeflateState { class NPT_ZipDeflateState 
Class: class NPT_BsdSocketFd { 
Class: class NPT_BsdSocketStream { 
Class: class NPT_BsdSocketInputStream : public NPT_InputStream,                                  private NPT_BsdSocketStream { 
Class: class NPT_BsdSocket : public NPT_SocketInterface { 
Class: class NPT_BsdUdpSocket : public    NPT_UdpSocketInterface,                          protected NPT_BsdSocket  { 
Class: class NPT_BsdUdpMulticastSocket : public    NPT_UdpMulticastSocketInterface,                                   protected NPT_BsdUdpSocket  { 
Class: class NPT_BsdTcpClientSocket : protected NPT_BsdSocket { 
Class: class NPT_BsdTcpServerSocket : public    NPT_TcpServerSocketInterface,                                protected NPT_BsdSocket  { 
Class: class NPT_NullSystem : public NPT_SystemInterface { 
Class: class NPT_PSPDirectory : public NPT_DirectoryInterface { 
Class: class NPT_PSPFileStream { 
Class: class NPT_PSPFileInputStream : public NPT_InputStream,                                private NPT_PSPFileStream  { 
Class: class NPT_PSPFileOutputStream : public NPT_OutputStream,                                 private NPT_PSPFileStream { 
Class: class NPT_PSPFile: public NPT_FileInterface { 
Class: class NPT_PSPSharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_PSPAtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_PSPThread : public NPT_ThreadInterface { 
Class: class NPT_PosixSharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_PosixAtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_PosixThread : public NPT_ThreadInterface { 
Class: class NPT_StdcFileWrapper { 
Class: class NPT_StdcFileStream { 
Class: class NPT_StdcFileInputStream : public NPT_InputStream,                                 private NPT_StdcFileStream  { 
Class: class NPT_StdcFileOutputStream : public NPT_OutputStream,                                  private NPT_StdcFileStream { 
Class: class NPT_StdcFile: public NPT_FileInterface { 
Class: class NPT_Win32SerialPortStream { 
Class: class NPT_Win32SerialPortInputStream : public NPT_InputStream,                                        private NPT_Win32SerialPortStream  { 
Class: class NPT_Win32SerialPortOutputStream : public NPT_OutputStream,                                         private NPT_Win32SerialPortStream { 
Class: class NPT_Win32SerialPort: public NPT_SerialPortInterface { 
Class: class NPT_Win32SharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_Win32AtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_Win32Thread : public NPT_ThreadInterface { 
Class: class A { class A 
Class: class KillHandler : public NPT_HttpRequestHandler { 
Class: class TestHandler1 : public NPT_HttpRequestHandler { 
Class: class TestHandler2 : public NPT_HttpRequestHandler { 
Class: class ChunkedHandler : public NPT_HttpRequestHandler { 
Class: class A { class A 
Class:class Test1 { class Test1 
Class: class A { class A 
Class: class FooServerBarCmd1Message : public FooServerMessage { 
Class: class FooServerBarCmd2Message : public FooServerMessage { 
Class: class FooServerBarCmd3Message : public FooServerMessage { 
Class: class FooServerBarCmd4Message : public NPT_Message { 
Class: class FooClientMessageHandler { 
Class: class FooClientBarNotification1Message : public FooClientMessage { 
Class: class FooServer : public NPT_Thread,                   public NPT_MessageReceiver,                   public NPT_MessageHandler,                   public FooServerMessageHandler { 
Class: class FooClient : public NPT_MessageReceiver,                   public NPT_MessageHandler,                   public FooClientMessageHandler { 
Class:class TestServerTestCommandMessage : public TestServerMessage { 
Class:class TestClientMessageHandler { 
Class:class TestClientReplyMessage : public TestClientMessage { 
Class:class TestServer : public NPT_Thread,                    public NPT_MessageReceiver,                    public NPT_MessageHandler,                    public TestServerMessageHandler { 
Class:class TestClient : public NPT_MessageReceiver,                    public NPT_MessageHandler,                    public TestClientMessageHandler { 
Class:  class BarA { 
Class: class Item { 
Class: class WriterThread : public NPT_Thread { 
Class: class ReaderThread : public NPT_Thread { 
Class: class Thread1 : public NPT_Thread { 
Class: class Thread2 : public NPT_Runnable { 
Class: class Thread3 : public NPT_Thread { 
Class: class Thread4 : public NPT_Runnable { 
Class: class T1 : public NPT_Runnable { 
Class: class CBR : public NPT_Runnable, public NPT_ThreadCallbackReceiver { 
Class: class CBW : public NPT_Runnable { 
Class: class CBR2 : public NPT_Runnable, public NPT_ThreadCallbackReceiver { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(827, 2, u'-    Assert(strm->avail_out > 0, "bug2");'), (1061, 2, u'-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1072, 2, u'-    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1075, 2, u'-        Assert(cur_match < s->strstart, "no future");'), (1102, 2, u'-        Assert(scan[2] == match[2], "scan[2]?");'), (1113, 2, u'-        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1133, 2, u'-        Assert(*scan == *match, "match[2]?");'), (1145, 2, u'-        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1187, 2, u'-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1189, 2, u'-    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1191, 2, u'-    Assert(cur_match < s->strstart, "no future");'), (1206, 2, u'-    Assert(*scan == *match, "match[2]?");'), (1218, 2, u'-    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1340, 2, u'-        Assert(more >= 2, "more < 2");'), (1409, 2, u'-            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (1417, 2, u'-        Assert(s->block_start >= 0L, "block gone");'), (1666, 2, u'-    Assert (flush != Z_NO_FLUSH, "no flush?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(srcPitch <= dstPitch && srcRows <= dstRows);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: CBaseTexture::Update
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(srcPitch <= dstPitch && srcRows <= dstRows);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(srcPitch <= dstPitch && srcRows <= dstRows);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(640 + offset + 4 <= ctx->cid_table->coding_unit_size);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: dnxhd_encode_picture
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(640 + offset + 4 <= ctx->cid_table->coding_unit_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(640 + offset + 4 <= ctx->cid_table->coding_unit_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-            assert (p_dirac_params->p_encoder->enc_buf.size > 0);'), (11, 1, u'+            assert(p_dirac_params->p_encoder->enc_buf.size > 0);')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: libdirac_encode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-            assert (p_dirac_params->p_encoder->enc_buf.size > 0);'), (11, 1, u'+            assert(p_dirac_params->p_encoder->enc_buf.size > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-            assert (p_dirac_params->p_encoder->enc_buf.size > 0);'), (11, 1, u'+            assert(p_dirac_params->p_encoder->enc_buf.size > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-            assert (enc_buf->length > 0);'), (13, 2, u'-            assert (enc_buf->length <= buf_size);'), (15, 1, u'+            assert(enc_buf->length > 0);'), (16, 1, u'+            assert(enc_buf->length <= buf_size);')]
===========================================
===========================================
Total add: 5
Total del: 7
Header: libschroedinger_encode_frame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-            assert (enc_buf->length > 0);'), (13, 2, u'-            assert (enc_buf->length <= buf_size);'), (15, 1, u'+            assert(enc_buf->length > 0);'), (16, 1, u'+            assert(enc_buf->length <= buf_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-            assert (enc_buf->length > 0);'), (13, 2, u'-            assert (enc_buf->length <= buf_size);'), (15, 1, u'+            assert(enc_buf->length > 0);'), (16, 1, u'+            assert(enc_buf->length <= buf_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(110, 2, u'-                        assert(v);'), (113, 2, u'-                        assert(!v);')]
===========================================
===========================================
Total add: 0
Total del: 135
Header: ff_spatial_idwt_buffered_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(110, 2, u'-                        assert(v);'), (113, 2, u'-                        assert(!v);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(110, 2, u'-                        assert(v);'), (113, 2, u'-                        assert(!v);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 2, u'-    assert(sizeof(s->block_state) >= 256);'), (90, 2, u'-    assert(c->  stride ==   stride);'), (91, 2, u'-    assert(c->uvstride == uvstride);'), (130, 2, u'-        assert(ref_mx >= c->xmin);'), (131, 2, u'-        assert(ref_mx <= c->xmax);'), (132, 2, u'-        assert(ref_my >= c->ymin);'), (133, 2, u'-        assert(ref_my <= c->ymax);'), (197, 2, u'-    assert(iscore < 255*255*256 + s->lambda2*10);'), (198, 2, u'-    assert(iscore >= 0);'), (199, 2, u'-    assert(l>=0 && l<=255);'), (200, 2, u'-    assert(pl>=0 && pl<=255);')]
===========================================
===========================================
Total add: 11
Total del: 297
Header: pred_mv
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 2, u'-    assert(sizeof(s->block_state) >= 256);'), (90, 2, u'-    assert(c->  stride ==   stride);'), (91, 2, u'-    assert(c->uvstride == uvstride);'), (130, 2, u'-        assert(ref_mx >= c->xmin);'), (131, 2, u'-        assert(ref_mx <= c->xmax);'), (132, 2, u'-        assert(ref_my >= c->ymin);'), (133, 2, u'-        assert(ref_my <= c->ymax);'), (197, 2, u'-    assert(iscore < 255*255*256 + s->lambda2*10);'), (198, 2, u'-    assert(iscore >= 0);'), (199, 2, u'-    assert(l>=0 && l<=255);'), (200, 2, u'-    assert(pl>=0 && pl<=255);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 2, u'-    assert(sizeof(s->block_state) >= 256);'), (90, 2, u'-    assert(c->  stride ==   stride);'), (91, 2, u'-    assert(c->uvstride == uvstride);'), (130, 2, u'-        assert(ref_mx >= c->xmin);'), (131, 2, u'-        assert(ref_mx <= c->xmax);'), (132, 2, u'-        assert(ref_my >= c->ymin);'), (133, 2, u'-        assert(ref_my <= c->ymax);'), (197, 2, u'-    assert(iscore < 255*255*256 + s->lambda2*10);'), (198, 2, u'-    assert(iscore >= 0);'), (199, 2, u'-    assert(l>=0 && l<=255);'), (200, 2, u'-    assert(pl>=0 && pl<=255);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(135, 2, u'-        assert(block_w==8);'), (209, 2, u'-        assert(block_w== 8 || block_w==16);'), (259, 2, u'-    assert(mb_x>=0 && mb_y>=0);'), (260, 2, u'-    assert(mb_x<b_stride);'), (343, 2, u'-    assert(mb_x>=0 && mb_y>=0);'), (344, 2, u'-    assert(mb_x<b_stride);'), (345, 2, u'-    assert(((mb_x|mb_y)&1) == 0);'), (479, 1, u'+            assert(sx>=0 && sy>=0 && sx < score_stride);'), (482, 1, u'+            assert(score[sx + sy*score_stride] >= 0);'), (519, 1, u'+            assert(src == b->buf); // code does not depend on this but it is true currently'), (576, 1, u'+    assert(!(s->avctx->flags & CODEC_FLAG_EMU_EDGE));'), (1087, 1, u'+    assert(sizeof(s->block_state) >= 256);'), (1140, 1, u'+    assert(c->  stride ==   stride);'), (1141, 1, u'+    assert(c->uvstride == uvstride);'), (1275, 1, u'+        assert(ref_mx >= c->xmin);'), (1276, 1, u'+        assert(ref_mx <= c->xmax);'), (1277, 1, u'+        assert(ref_my >= c->ymin);'), (1278, 1, u'+        assert(ref_my <= c->ymax);'), (1397, 1, u'+    assert(iscore < 255*255*256 + s->lambda2*10);'), (1398, 1, u'+    assert(iscore >= 0);'), (1399, 1, u'+    assert(l>=0 && l<=255);'), (1400, 1, u'+    assert(pl>=0 && pl<=255);')]
===========================================
===========================================
Total add: 1066
Total del: 479
Header: get_block_bits
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(135, 2, u'-        assert(block_w==8);'), (209, 2, u'-        assert(block_w== 8 || block_w==16);'), (259, 2, u'-    assert(mb_x>=0 && mb_y>=0);'), (260, 2, u'-    assert(mb_x<b_stride);'), (343, 2, u'-    assert(mb_x>=0 && mb_y>=0);'), (344, 2, u'-    assert(mb_x<b_stride);'), (345, 2, u'-    assert(((mb_x|mb_y)&1) == 0);'), (479, 1, u'+            assert(sx>=0 && sy>=0 && sx < score_stride);'), (482, 1, u'+            assert(score[sx + sy*score_stride] >= 0);'), (519, 1, u'+            assert(src == b->buf); // code does not depend on this but it is true currently'), (576, 1, u'+    assert(!(s->avctx->flags & CODEC_FLAG_EMU_EDGE));'), (1087, 1, u'+    assert(sizeof(s->block_state) >= 256);'), (1140, 1, u'+    assert(c->  stride ==   stride);'), (1141, 1, u'+    assert(c->uvstride == uvstride);'), (1275, 1, u'+        assert(ref_mx >= c->xmin);'), (1276, 1, u'+        assert(ref_mx <= c->xmax);'), (1277, 1, u'+        assert(ref_my >= c->ymin);'), (1278, 1, u'+        assert(ref_my <= c->ymax);'), (1397, 1, u'+    assert(iscore < 255*255*256 + s->lambda2*10);'), (1398, 1, u'+    assert(iscore >= 0);'), (1399, 1, u'+    assert(l>=0 && l<=255);'), (1400, 1, u'+    assert(pl>=0 && pl<=255);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(135, 2, u'-        assert(block_w==8);'), (209, 2, u'-        assert(block_w== 8 || block_w==16);'), (259, 2, u'-    assert(mb_x>=0 && mb_y>=0);'), (260, 2, u'-    assert(mb_x<b_stride);'), (343, 2, u'-    assert(mb_x>=0 && mb_y>=0);'), (344, 2, u'-    assert(mb_x<b_stride);'), (345, 2, u'-    assert(((mb_x|mb_y)&1) == 0);'), (479, 1, u'+            assert(sx>=0 && sy>=0 && sx < score_stride);'), (482, 1, u'+            assert(score[sx + sy*score_stride] >= 0);'), (519, 1, u'+            assert(src == b->buf); // code does not depend on this but it is true currently'), (576, 1, u'+    assert(!(s->avctx->flags & CODEC_FLAG_EMU_EDGE));'), (1087, 1, u'+    assert(sizeof(s->block_state) >= 256);'), (1140, 1, u'+    assert(c->  stride ==   stride);'), (1141, 1, u'+    assert(c->uvstride == uvstride);'), (1275, 1, u'+        assert(ref_mx >= c->xmin);'), (1276, 1, u'+        assert(ref_mx <= c->xmax);'), (1277, 1, u'+        assert(ref_my >= c->ymin);'), (1278, 1, u'+        assert(ref_my <= c->ymax);'), (1397, 1, u'+    assert(iscore < 255*255*256 + s->lambda2*10);'), (1398, 1, u'+    assert(iscore >= 0);'), (1399, 1, u'+    assert(l>=0 && l<=255);'), (1400, 1, u'+    assert(pl>=0 && pl<=255);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(125, 1, u'+        assert(block_w==8);'), (204, 1, u'+        assert(block_w== 8 || block_w==16);'), (511, 1, u'+                        assert(v);'), (514, 1, u'+                        assert(!v);')]
===========================================
===========================================
Total add: 271
Total del: 240
Header: dequantize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(125, 1, u'+        assert(block_w==8);'), (204, 1, u'+        assert(block_w== 8 || block_w==16);'), (511, 1, u'+                        assert(v);'), (514, 1, u'+                        assert(!v);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(125, 1, u'+        assert(block_w==8);'), (204, 1, u'+        assert(block_w== 8 || block_w==16);'), (511, 1, u'+                        assert(v);'), (514, 1, u'+                        assert(!v);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+    assert(mb_x>=0 && mb_y>=0);'), (32, 1, u'+    assert(mb_x<b_stride);'), (115, 1, u'+    assert(mb_x>=0 && mb_y>=0);'), (116, 1, u'+    assert(mb_x<b_stride);'), (117, 1, u'+    assert(((mb_x|mb_y)&1) == 0);'), (334, 2, u'-    assert(coef_sum < INT_MAX);'), (498, 2, u'-            assert(sx>=0 && sy>=0 && sx < score_stride);'), (501, 2, u'-            assert(score[sx + sy*score_stride] >= 0);')]
===========================================
===========================================
Total add: 269
Total del: 204
Header: decode_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+    assert(mb_x>=0 && mb_y>=0);'), (32, 1, u'+    assert(mb_x<b_stride);'), (115, 1, u'+    assert(mb_x>=0 && mb_y>=0);'), (116, 1, u'+    assert(mb_x<b_stride);'), (117, 1, u'+    assert(((mb_x|mb_y)&1) == 0);'), (334, 2, u'-    assert(coef_sum < INT_MAX);'), (498, 2, u'-            assert(sx>=0 && sy>=0 && sx < score_stride);'), (501, 2, u'-            assert(score[sx + sy*score_stride] >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+    assert(mb_x>=0 && mb_y>=0);'), (32, 1, u'+    assert(mb_x<b_stride);'), (115, 1, u'+    assert(mb_x>=0 && mb_y>=0);'), (116, 1, u'+    assert(mb_x<b_stride);'), (117, 1, u'+    assert(((mb_x|mb_y)&1) == 0);'), (334, 2, u'-    assert(coef_sum < INT_MAX);'), (498, 2, u'-            assert(sx>=0 && sy>=0 && sx < score_stride);'), (501, 2, u'-            assert(score[sx + sy*score_stride] >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 2, u'-            assert(src == b->buf); // code does not depend on this but it is true currently')]
===========================================
===========================================
Total add: 49
Total del: 56
Header: dequantize_all
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 2, u'-            assert(src == b->buf); // code does not depend on this but it is true currently')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 2, u'-            assert(src == b->buf); // code does not depend on this but it is true currently')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(vr->classifications > 1 && temp<=65536); //needed for inverse[]'), (4, 1, u'+                        assert(vr->classifications > 1 && temp <= 65536); //needed for inverse[]')]
===========================================
===========================================
Total add: 9
Total del: 10
Header: vorbis_residue_decode_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(vr->classifications > 1 && temp<=65536); //needed for inverse[]'), (4, 1, u'+                        assert(vr->classifications > 1 && temp <= 65536); //needed for inverse[]')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(vr->classifications > 1 && temp<=65536); //needed for inverse[]'), (4, 1, u'+                        assert(vr->classifications > 1 && temp <= 65536); //needed for inverse[]')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+    assert(!*next_point);')]
===========================================
===========================================
Total add: 21
Total del: 5
Header: ff_interleave_add_packet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+    assert(!*next_point);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+    assert(!*next_point);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  assert(srcPitch <= dstPitch && srcRows <= dstRows);')]
===========================================
===========================================
Total add: 46
Total del: 25
Header: CBaseTexture::Update
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  assert(srcPitch <= dstPitch && srcRows <= dstRows);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  assert(srcPitch <= dstPitch && srcRows <= dstRows);')]
===========================================
Class:class PngImage  struct DxtData { 
Class: class CAutoBuffer { 
Class:  class CAutoTexBuffer { 
Class: class CAutoBuffer { 
Class:  class CAutoTexBuffer { 
Class:  class Error : public std::exception { 
Class:  class NonCopyable { 
Class:  class Mem : NonCopyable { 
Class:  class File : NonCopyable { 
Class:  class PngReadStruct : NonCopyable { 
Class:  class PngWriteStruct : NonCopyable { 
Class:  class PngRows : NonCopyable { 
Class: class PngImage { 
Class: class CFreeTypeLibrary { 
Class: class CAutoBuffer { 
Class:  class CAutoTexBuffer { 
Class:  class TiXmlParsingData { 
Class:   class CAutoBuffer { 
Class: class CUrlOptions   : public map<CStdString, CStdString> { 
Class: class NPT_XbmcFileStream { 
Class: class NPT_XbmcFileInputStream : public NPT_InputStream,                                 private NPT_XbmcFileStream  { 
Class: class NPT_XbmcFileOutputStream : public NPT_OutputStream,                                  private NPT_XbmcFileStream { 
Class: class NPT_XbmcFile: public NPT_FileInterface { 
Class:class CProtocolFinder { class CProtocolFinder 
Class: class CDeviceHostReferenceHolder { 
Class: class CCtrlPointReferenceHolder { 
Class: class CUPnPCleaner : public NPT_Thread { 
Class: class CUPnPServer : public PLT_MediaConnect { 
Class: class CUPnPRenderer : public PLT_MediaRenderer { 
Class: class CRendererReferenceHolder { 
Class: class CMediaBrowser : public PLT_SyncMediaBrowser,                       public PLT_MediaContainerChangesListener { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(371, 1, u'+        assert((mb_type > B_SYM_16X16) && (mb_type < B_8X8));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(227, 1, u'+                assert(left_xy[0] == left_xy[1]);'), (760, 1, u'+    assert(part_width==1 || part_width==2 || part_width==4);'), (996, 1, u'+    assert(h->ref_list[1][0].reference&3);'), (1803, 1, u'+    assert(IS_INTER(mb_type));'), (1833, 1, u'+        assert(IS_8X8(mb_type));'), (1866, 1, u'+                assert(IS_SUB_4X4(sub_mb_type));'), (1937, 1, u'+        assert(offset == FF_ARRAY_ELEMS(coeff_token_vlc_tables));'), (2245, 1, u'+    assert(s->linesize && s->uvlinesize);'), (2281, 1, u'+    assert(s->current_picture_ptr->long_ref==0);'), (2542, 1, u'+                                    assert(mb_y || linesize <= block_offset[i]);'), (2793, 1, u'+            assert(len<=32);'), (2796, 1, u'+            assert(len<=32);'), (2811, 1, u'+        assert(len <= 32);'), (2900, 1, u'+                            assert(ref->reference);'), (2901, 1, u'+                            assert(!ref->long_ref);'), (2921, 1, u'+                        assert(!(ref && !ref->reference));'), (2924, 1, u'+                            assert(ref->long_ref);'), (3137, 1, u'+    assert(h->long_ref_count==0);'), (3200, 1, u'+    assert(i >= 0 && i < h->short_ref_count);'), (3238, 1, u'+            assert(h->long_ref[i]->long_ref == 1);'), (3353, 1, u'+            assert(mmco[i].long_arg <= 16);'), (3375, 1, u'+        default: assert(0);'), (3424, 1, u'+            assert(i < 16);'), (3480, 1, u'+            assert(h->long_ref_count + h->short_ref_count <= h->sps.ref_frame_count);'), (3923, 1, u'+            assert(s0->current_picture_ptr);'), (3924, 1, u'+            assert(s0->current_picture_ptr->data[0]);'), (3925, 1, u'+            assert(s0->current_picture_ptr->reference != DELAYED_PIC_REF);'), (3957, 1, u'+            assert(!s0->current_picture_ptr);'), (3971, 1, u'+    assert(s->mb_num == s->mb_width * s->mb_height);'), (3981, 1, u'+    assert(s->mb_y < s->mb_height);'), (4272, 1, u'+    assert(total_coeff<=16);'), (4513, 1, u'+       assert(h->slice_type_nos == FF_I_TYPE);'), (4621, 1, u'+            assert(h->slice_type_nos == FF_P_TYPE); //FIXME SP correct ?'), (4780, 1, u'+            assert(IS_8X16(mb_type));'), (4885, 1, u'+            assert((cbp&15) == 0 || (cbp&15) == 15);'), (5026, 1, u'+        assert(h->slice_type_nos == FF_B_TYPE);'), (5290, 1, u'+        assert(cat == 1 || cat == 2 || cat == 4);'), (5427, 1, u'+    assert(coeff_count > 0);'), (5438, 1, u'+            assert( cat == 1 || cat == 2 || cat == 4 );'), (5619, 1, u'+        assert(h->slice_type_nos == FF_I_TYPE);'), (5887, 1, u'+            assert(IS_8X16(mb_type));'), (6289, 1, u'+    assert(!FRAME_MBAFF);'), (8111, 1, u'+            assert(pics <= MAX_DELAYED_PIC_COUNT);'), (8155, 1, u'+    assert(pict->data[0] || !*data_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(88, 1, u'+    assert(s == c->avctx);'), (89, 1, u'+    assert(count <= s->thread_count);'), (119, 1, u'+    assert(!s->thread_opaque);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+#define ASSERT_ALIGNED(ptr) assert(((unsigned long)ptr&0x0000000F));'), (25, 1, u'+#define ASSERT_ALIGNED(ptr) ;'), (426, 1, u'+        ASSERT_ALIGNED(dst);'), (538, 1, u'+        ASSERT_ALIGNED(dst);'), (773, 1, u'+        ASSERT_ALIGNED(dst);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(106, 1, u'+    assert(c->low   == 0);'), (107, 1, u'+    assert(c->range >= 0x100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(283, 1, u'+        assert(compensation_distance > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+    assert(s->f_code == 1);'), (43, 1, u'+    assert(s->unrestricted_mv == 1);'), (44, 1, u'+    assert(s->alt_inter_vlc == 0);'), (45, 1, u'+    assert(s->umvplus == 0);'), (46, 1, u'+    assert(s->modified_quant==1);'), (47, 1, u'+    assert(s->loop_filter==1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(215, 1, u'+    assert(x<8 && y<8 && x>=0 && y>=0);\\'), (248, 1, u'+    assert(x<8 && y<8 && x>=0 && y>=0);\\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(81, 1, u'+    assert(s == c->avctx);'), (82, 1, u'+    assert(count <= s->thread_count);'), (109, 1, u'+    assert(!s->thread_opaque);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 1, u'+        assert(0);'), (128, 1, u'+        assert(last_exp-10 >= 0 && last_exp-10 < 32);'), (136, 1, u'+        assert(code >= 0 && code < 120);'), (152, 1, u'+        assert(0); //FIXME not implemented'), (199, 1, u'+                assert(0); //FIXME not implemented'), (255, 1, u'+                    assert(0); //FIXME not implemented'), (261, 1, u'+        assert(0); //FIXME not implemented'), (283, 1, u'+                    assert(code < s->coef_vlcs[tindex]->n);'), (317, 1, u'+        assert(0);//FIXME not implemented'), (376, 1, u'+    assert((put_bits_count(&s->pb) & 7) == 0);'), (378, 1, u'+    assert(i>=0);')]
===========================================
Class:    class = ff_get_v(bc);
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(596, 1, u"+    assert(nut->frame_code['N'].flags == FLAG_INVALID);"), (699, 1, u'+    assert(nus->last_pts != AV_NOPTS_VALUE);'), (763, 1, u'+    assert(frame_code != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(113, 1, u'+    assert((int16_t)a[AV_INTEGER_SIZE-1] >= 0 && (int16_t)b[AV_INTEGER_SIZE-1] >= 0);'), (114, 1, u'+    assert(av_log2(b)>=0);'), (182, 1, u'+            assert(av_i2int(ai) == a);'), (183, 1, u'+            assert(av_i2int(bi) == b);'), (184, 1, u'+            assert(av_i2int(av_add_i(ai,bi)) == a+b);'), (185, 1, u'+            assert(av_i2int(av_sub_i(ai,bi)) == a-b);'), (186, 1, u'+            assert(av_i2int(av_mul_i(ai,bi)) == a*b);'), (187, 1, u'+            assert(av_i2int(av_shr_i(ai, 9)) == a>>9);'), (188, 1, u'+            assert(av_i2int(av_shr_i(ai,-9)) == a<<9);'), (189, 1, u'+            assert(av_i2int(av_shr_i(ai, 17)) == a>>17);'), (190, 1, u'+            assert(av_i2int(av_shr_i(ai,-17)) == a<<17);'), (191, 1, u'+            assert(av_log2_i(ai) == av_log2(a));'), (192, 1, u'+            assert(av_i2int(av_div_i(ai,bi)) == a/b);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+    assert(c > 0);'), (61, 1, u'+    assert(b >=0);'), (62, 1, u'+    assert(rnd >=0 && rnd<=5 && rnd!=4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+  assert((dtime->hour>>4) < 0xa && (dtime->hour&0xf) < 0xa);'), (36, 1, u'+  assert((dtime->minute>>4) < 0x7 && (dtime->minute&0xf) < 0xa);'), (37, 1, u'+  assert((dtime->second>>4) < 0x7 && (dtime->second&0xf) < 0xa);'), (38, 1, u'+  assert((dtime->frame_u&0xf) < 0xa);'), (153, 1, u'+  assert(!attr->unknown1);'), (271, 1, u'+    assert(attr->lang_code == 0 || attr->lang_code == 0xffff);')]
===========================================
Class: class CDemuxStreamVideoHTSP   : public CDemuxStreamVideo { 
Class: class CDemuxStreamAudioHTSP   : public CDemuxStreamAudio { 
Class: class CPulldownCorrection { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(87, 1, u'+\t\t\tFLAC__ASSERT(0 != object);'), (115, 1, u'+\t\t\t\tFLAC__ASSERT(0);'), (128, 1, u'+\t\t\tFLAC__ASSERT(object.is_valid());'), (141, 1, u'+\t\t\tFLAC__ASSERT(0 != object);'), (148, 1, u'+\t\t\tFLAC__ASSERT(0 != object);'), (165, 1, u'+\t\t\tFLAC__ASSERT(object.is_valid());'), (182, 1, u'+\t\t\tFLAC__ASSERT(0 != object);'), (191, 1, u'+\t\t\tFLAC__ASSERT(0 != object);'), (200, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (206, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (212, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (218, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (236, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (242, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (248, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (254, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (260, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (266, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (272, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (278, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (284, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (290, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (291, 1, u'+\t\t\tFLAC__ASSERT(value >= FLAC__MIN_BLOCK_SIZE);'), (292, 1, u'+\t\t\tFLAC__ASSERT(value <= FLAC__MAX_BLOCK_SIZE);'), (298, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (299, 1, u'+\t\t\tFLAC__ASSERT(value >= FLAC__MIN_BLOCK_SIZE);'), (300, 1, u'+\t\t\tFLAC__ASSERT(value <= FLAC__MAX_BLOCK_SIZE);'), (306, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (307, 1, u'+\t\t\tFLAC__ASSERT(value < (1u << FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN));'), (313, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (314, 1, u'+\t\t\tFLAC__ASSERT(value < (1u << FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN));'), (320, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (321, 1, u'+\t\t\tFLAC__ASSERT(FLAC__format_sample_rate_is_valid(value));'), (327, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (328, 1, u'+\t\t\tFLAC__ASSERT(value > 0);'), (329, 1, u'+\t\t\tFLAC__ASSERT(value <= FLAC__MAX_CHANNELS);'), (335, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (336, 1, u'+\t\t\tFLAC__ASSERT(value >= FLAC__MIN_BITS_PER_SAMPLE);'), (337, 1, u'+\t\t\tFLAC__ASSERT(value <= FLAC__MAX_BITS_PER_SAMPLE);'), (343, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (344, 1, u'+\t\t\tFLAC__ASSERT(value < (((FLAC__uint64)1) << FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN));'), (350, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (351, 1, u'+\t\t\tFLAC__ASSERT(0 != value);'), (369, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (387, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (393, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (399, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (400, 1, u'+\t\t\tFLAC__ASSERT(0 != value);'), (406, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (412, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (430, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (436, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (437, 1, u'+\t\t\tFLAC__ASSERT(index < object_->data.seek_table.num_points);'), (443, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (444, 1, u'+\t\t\tFLAC__ASSERT(index < object_->data.seek_table.num_points);'), (450, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (451, 1, u'+\t\t\tFLAC__ASSERT(index <= object_->data.seek_table.num_points);'), (457, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (458, 1, u'+\t\t\tFLAC__ASSERT(index < object_->data.seek_table.num_points);'), (464, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (504, 1, u'+\t\t\tFLAC__ASSERT(entry.is_valid());'), (511, 1, u'+\t\t\tFLAC__ASSERT(entry.is_valid());'), (529, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (535, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (541, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (547, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (553, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (559, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (565, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (571, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (572, 1, u'+\t\t\tFLAC__ASSERT(0 != field);'), (599, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (600, 1, u'+\t\t\tFLAC__ASSERT(0 != field_name);'), (620, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (621, 1, u'+\t\t\tFLAC__ASSERT(0 != field_value);'), (785, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (791, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (797, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (798, 1, u'+\t\t\tFLAC__ASSERT(index < object_->data.vorbis_comment.num_comments);'), (804, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (812, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (813, 1, u'+\t\t\tFLAC__ASSERT(index < object_->data.vorbis_comment.num_comments);'), (819, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (820, 1, u'+\t\t\tFLAC__ASSERT(index <= object_->data.vorbis_comment.num_comments);'), (826, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (832, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (833, 1, u'+\t\t\tFLAC__ASSERT(index < object_->data.vorbis_comment.num_comments);'), (875, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (876, 1, u'+\t\t\tFLAC__ASSERT(i < object_->num_indices);'), (882, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (883, 1, u'+\t\t\tFLAC__ASSERT(0 != value);'), (890, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (891, 1, u'+\t\t\tFLAC__ASSERT(value <= 1);'), (897, 1, u'+ \t\t\tFLAC__ASSERT(is_valid());'), (898, 1, u'+ \t\t\tFLAC__ASSERT(i < object_->num_indices);'), (916, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (922, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (928, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (934, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (940, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (941, 1, u'+\t\t\tFLAC__ASSERT(i < object_->data.cue_sheet.num_tracks);'), (947, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (948, 1, u'+\t\t\tFLAC__ASSERT(0 != value);'), (955, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (961, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (967, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (968, 1, u'+\t\t\tFLAC__ASSERT(track_num < object_->data.cue_sheet.num_tracks);'), (969, 1, u'+\t\t\tFLAC__ASSERT(index_num < object_->data.cue_sheet.tracks[track_num].num_indices);'), (975, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (976, 1, u'+\t\t\tFLAC__ASSERT(track_num < object_->data.cue_sheet.num_tracks);'), (977, 1, u'+\t\t\tFLAC__ASSERT(index_num <= object_->data.cue_sheet.tracks[track_num].num_indices);'), (983, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (984, 1, u'+\t\t\tFLAC__ASSERT(track_num < object_->data.cue_sheet.num_tracks);'), (985, 1, u'+\t\t\tFLAC__ASSERT(index_num < object_->data.cue_sheet.tracks[track_num].num_indices);'), (991, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (992, 1, u'+\t\t\tFLAC__ASSERT(i < object_->data.cue_sheet.num_tracks);'), (999, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1000, 1, u'+\t\t\tFLAC__ASSERT(i <= object_->data.cue_sheet.num_tracks);'), (1007, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1008, 1, u'+\t\t\tFLAC__ASSERT(i < object_->data.cue_sheet.num_tracks);'), (1014, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1020, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1038, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1044, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1050, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1056, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1062, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1068, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1074, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1080, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1086, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1092, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1098, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1105, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1112, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1118, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1124, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1130, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1136, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1155, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1161, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1167, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1180, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1194, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1210, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1224, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1240, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1254, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1270, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1307, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1308, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1319, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1325, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1331, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1337, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1344, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1351, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1357, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1364, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1371, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1377, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1383, 1, u'+\t\t\tFLAC__ASSERT(0 != block);'), (1384, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1390, 1, u'+\t\t\tFLAC__ASSERT(0 != block);'), (1391, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1397, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1431, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1437, 1, u'+\t\t\tFLAC__ASSERT(0 != filename);'), (1438, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1447, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1456, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1462, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1468, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1474, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1480, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1486, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1514, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1515, 1, u'+\t\t\tFLAC__ASSERT(chain.is_valid());'), (1521, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1527, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1533, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1539, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1548, 1, u'+\t\t\tFLAC__ASSERT(0 != block);'), (1549, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1560, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1566, 1, u'+\t\t\tFLAC__ASSERT(0 != block);'), (1567, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (1578, 1, u'+\t\t\tFLAC__ASSERT(0 != block);'), (1579, 1, u'+\t\t\tFLAC__ASSERT(is_valid());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(68, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (74, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (80, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (86, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (92, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (98, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (104, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (110, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (116, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (122, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (128, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (134, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (140, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (146, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (152, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (158, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (164, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (170, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (176, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (182, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (188, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (194, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (200, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (206, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (212, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (218, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (224, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (259, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (261, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (268, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (270, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (277, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (279, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (286, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (288, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (295, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (297, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (304, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (306, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (313, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (315, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (322, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (324, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (344, 1, u'+\t\t\tFLAC__ASSERT(0 != decoder_);'), (350, 1, u'+\t\t\tFLAC__ASSERT(0 != decoder_);'), (361, 1, u'+\t\t\tFLAC__ASSERT(0 != decoder_);'), (367, 1, u'+\t\t\tFLAC__ASSERT(0 != decoder_);'), (384, 1, u'+\t\t\tFLAC__ASSERT(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (75, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (81, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (87, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (93, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (99, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (105, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (111, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (117, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (123, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (129, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (135, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (141, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (147, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (153, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (159, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (165, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (171, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (177, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (183, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (189, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (195, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (220, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (226, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (232, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (238, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (244, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (250, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (256, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (262, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (268, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (274, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (280, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (286, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (292, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (298, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (304, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (310, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (316, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (322, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (328, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (334, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (340, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (346, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (352, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (358, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (364, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (394, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (396, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (403, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (405, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (412, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (414, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (421, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (423, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (430, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (432, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);'), (452, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (458, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (469, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (475, 1, u'+\t\t\tFLAC__ASSERT(is_valid());'), (492, 1, u'+\t\t\tFLAC__ASSERT(false);'), (504, 1, u'+\t\t\tFLAC__ASSERT(0 != client_data);'), (506, 1, u'+\t\t\tFLAC__ASSERT(0 != instance);')]
===========================================
Class:  class FMT { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(115, 1, u'+    assert((!k && !ibl) ||'), (176, 1, u'+    assert((k != (size_t)(-1) && !ibl) ||'), (188, 1, u'+      assert((!k && !tbl) ||'), (198, 1, u'+  assert(!k);'), (211, 1, u'+    assert((k != (size_t)(-1) && !ibl) ||'), (221, 1, u'+      assert((!k && !tbl) ||'), (228, 1, u'+  assert(!k);'), (229, 1, u'+  assert(!obl);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(441, 1, u'+#define Assert(cond,msg) {if(!(cond)) error(msg);}'), (445, 1, u'+#define Assert(cond,msg)'), (607, 1, u'+    Assert(encoder->strstart <= window_size-MIN_LOOKAHEAD, "insufficient lookahead");'), (610, 1, u'+\tAssert(cur_match < encoder->strstart, "no future");'), (642, 1, u'+\tAssert(scan <= encoder->window+(unsigned)(window_size-1), "wild scan");'), (751, 1, u'+\tAssert(window_size == (ulg)2*WSIZE, "no sliding with BIG_MEM");'), (1168, 1, u'+    Assert (length == 256, "ct_init: length != 256");'), (1183, 1, u'+    Assert (dist == 256, "ct_init: dist != 256");'), (1191, 1, u'+    Assert (dist == 256, "ct_init: 256+dist != 512");'), (1389, 1, u'+    Assert (code + encoder->bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,'), (1581, 1, u'+\t    Assert(count >= 3 && count <= 6, " 3_6?");'), (1650, 1, u'+    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");'), (1651, 1, u'+    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,'), (1770, 1, u'+\tAssert((ush)dist < (ush)MAX_DIST &&'), (1852, 1, u'+\t    Assert (code < D_CODES, "bad d_code");')]
===========================================
Class:    class MidiTimestamp { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(827, 1, u'+    Assert(strm->avail_out > 0, "bug2");'), (1061, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1072, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1075, 1, u'+        Assert(cur_match < s->strstart, "no future");'), (1102, 1, u'+        Assert(scan[2] == match[2], "scan[2]?");'), (1113, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1133, 1, u'+        Assert(*scan == *match, "match[2]?");'), (1145, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1187, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1189, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1191, 1, u'+    Assert(cur_match < s->strstart, "no future");'), (1206, 1, u'+    Assert(*scan == *match, "match[2]?");'), (1218, 1, u'+    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1340, 1, u'+        Assert(more >= 2, "more < 2");'), (1409, 1, u'+            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (1417, 1, u'+        Assert(s->block_start >= 0L, "block gone");'), (1666, 1, u'+    Assert (flush != Z_NO_FLUSH, "no flush?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 1, u'+\ta_assert(websValid(wp));'), (57, 1, u'+\ta_assert(url && *url);'), (58, 1, u"+\ta_assert(path && *path == '/');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 1, u'+\ta_assert(map);'), (117, 1, u'+\ta_assert(map);'), (119, 1, u'+\ta_assert(mp[H_LEN] >= H_INCR);'), (121, 1, u'+\ta_assert(mp[handle + H_OFFSET]);'), (122, 1, u'+\ta_assert(mp[H_USED]);'), (162, 1, u'+\ta_assert(list);'), (163, 1, u'+\ta_assert(max);'), (182, 1, u'+\t\ta_assert(cp);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+#define MoreAssert(x) (true)'), (64, 1, u'+#define MoreAssertQ(x)'), (172, 1, u'+\tMoreAssertQ(fragToFix != nil);'), (173, 1, u'+\tMoreAssertQ(fragToFix->locator.fileSpec != nil);'), (174, 1, u'+\tMoreAssertQ(fragToFix->connID != nil);'), (175, 1, u'+\tMoreAssertQ(fragToFix->loaderSection == nil);'), (176, 1, u'+\tMoreAssertQ(fragToFix->sectionHeaders == nil);'), (177, 1, u'+\tMoreAssertQ(fragToFix->fileRef == 0);'), (271, 1, u'+\tMoreAssertQ(inOpStart != nil);'), (272, 1, u'+\tMoreAssertQ(outCount  != nil);'), (295, 1, u'+\tMoreAssertQ(packedData != nil);'), (296, 1, u'+\tMoreAssertQ(unpackedData != nil);'), (297, 1, u'+\tMoreAssertQ(unpackedSize >= packedSize);'), (303, 1, u'+\tMoreAssertQ( packedSize   == GetPtrSize( (Ptr) packedData  ) );'), (304, 1, u'+\tMoreAssertQ( unpackedSize == GetPtrSize( (Ptr) unpackedData) );'), (310, 1, u'+\t\tMoreAssertQ(unpackCursor < &unpackedData[unpackedSize]);'), (545, 1, u'+\t\tMoreAssertQ( initSection >= 0 );\t\t// Negative indexes are pseudo-sections which are just not allowed!'), (546, 1, u'+\t\tMoreAssertQ( initSection < fragToFix->containerHeader.sectionCount );'), (590, 1, u'+\t\t\tMoreAssertQ(fragToFix->sectionHeaders[initSection].sectionKind == kPEFUnpackedDataSection);'), (614, 1, u'+\t\tMoreAssertQ( MemError() == noErr );'), (618, 1, u'+\t\tMoreAssertQ( MemError() == noErr );'), (635, 1, u'+\tMoreAssertQ(fragToFix != nil);'), (636, 1, u'+\tMoreAssertQ(fragToFix->containerHeader.tag1 == kPEFTag1);'), (663, 1, u'+\tMoreAssertQ(loaderSection != nil);'), (664, 1, u'+\tMoreAssertQ(libraryName != nil);'), (665, 1, u'+\tMoreAssertQ(importLibrary != nil);'), (725, 1, u'+\tMoreAssertQ(lookup != nil);'), (726, 1, u'+\tMoreAssertQ(loaderSection != nil);'), (727, 1, u'+\tMoreAssertQ(symbolIndex < loaderSection->totalImportedSymbolCount);'), (728, 1, u'+\tMoreAssertQ(symbolValue != nil);'), (802, 1, u'+\tMoreAssertQ(fragToFix != nil);'), (803, 1, u'+\tMoreAssertQ(state != nil);'), (821, 1, u'+\tMoreAssertQ(relocHeader->reservedA == 0);\t\t// PEF spec says it must be; we check to try to catch bugs in calculation of relocHeader'), (892, 1, u'+\tMoreAssertQ(fragToFix != nil);'), (893, 1, u'+\tMoreAssertQ(fragToFix->containerHeader.tag1 == kPEFTag1);'), (894, 1, u'+\tMoreAssertQ(fragToFix->sectionHeaders != nil);'), (895, 1, u'+\tMoreAssertQ(fragToFix->loaderSection != nil);'), (896, 1, u'+\tMoreAssertQ(fragToFix->section0Base != nil);\t// Technically, having a nil for these two is not a problem, ...'), (897, 1, u'+\tMoreAssertQ(fragToFix->section1Base != nil);\t// but in practise it a wildly deviant case and we should know about it.'), (898, 1, u'+\tMoreAssertQ(importLibrary != nil);'), (899, 1, u'+\tMoreAssertQ(lookup != nil);'), (915, 1, u'+\tMoreAssertQ(fragToFix->loaderSection->relocSectionCount <= 0x0FFFF);'), (970, 1, u'+\t\t\tMoreAssertQ( state.currentReloc < totalRelocs );'), (1054, 1, u'+\t\t\t\t\t\tMoreAssertQ(state.sectionC != nil);'), (1063, 1, u'+\t\t\t\t\t\tMoreAssertQ(state.sectionD != nil);'), (1147, 1, u'+\t\t\t\t\tMoreAssertQ(false);'), (1176, 1, u'+\tMoreAssertQ(fragToFixLocator != nil);'), (1177, 1, u'+\tMoreAssertQ(fragToFixConnID != nil);'), (1178, 1, u'+\tMoreAssertQ(fragToFixInitRoutine != nil);'), (1179, 1, u'+\tMoreAssertQ(weakLinkedLibraryName != nil);'), (1180, 1, u'+\tMoreAssertQ(lookup != nil);'), (1239, 1, u'+\t\t\tMoreAssertQ(junk == noErr);'), (1243, 1, u'+\t\t\tMoreAssertQ(MemError() == noErr);'), (1247, 1, u'+\t\t\tMoreAssertQ(MemError() == noErr);'), (1262, 1, u'+\tMoreAssertQ(symName != nil);'), (1263, 1, u'+\tMoreAssertQ(symAddr != nil);'), (1264, 1, u'+\tMoreAssertQ(refCon  != nil);'), (1276, 1, u'+\t\t\tMoreAssertQ(false);'), (1291, 1, u'+\tMoreAssertQ(connIDToImport != nil);'), (1305, 1, u'+\tMoreAssertQ(symName != nil);'), (1306, 1, u'+\tMoreAssertQ(symAddr != nil);'), (1307, 1, u'+\tMoreAssertQ(refCon  != nil);'), (1328, 1, u'+\t\tMoreAssertQ(false);'), (1357, 1, u'+\tMoreAssertQ(bundleToImport != nil);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(100, 1, u'+\t\t\tassert(0x88 <= c && c <= 0xfe);'), (101, 1, u'+\t\t\tassert(0x40 <= IN2 && IN2 <= 0xfe);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 1, u'+\t\tassert(modNameSize >= 0); /* else cast to size_t is wrong */')]
===========================================
Class: class FrameWriter : public NPT_Thread { 
Class: class PLT_CtrlPointListenerOnDeviceAddedIterator { 
Class: class PLT_CtrlPointListenerOnDeviceRemovedIterator { 
Class: class PLT_CtrlPointListenerOnActionResponseIterator { 
Class: class PLT_CtrlPointListenerOnEventNotifyIterator { 
Class: class PLT_AddGetSCPDRequestIterator { 
Class: class PLT_EventSubscriberRemoverIterator { 
Class: class PLT_ServiceReadyIterator { 
Class: class PLT_DeviceReadyIterator { 
Class: template <class T> class PLT_GetDescriptionIterator { 
Class: class NPT_HttpHeaderFinder { 
Class: class NPT_HttpHeaderPrinter { 
Class: class NPT_HttpHeaderLogger { 
Class: class PLT_UPnP_CtrlPointStopIterator { 
Class: class PLT_UPnP_DeviceStartIterator { 
Class: class PLT_UPnP_DeviceStopIterator { 
Class: class PLT_HttpCustomRequestHandler : public NPT_HttpRequestHandler { 
Class: class NPT_HttpTcpConnector : public NPT_HttpClient::Connector { 
Class: class NPT_HttpStaticProxySelector : public NPT_HttpProxySelector { 
Class: class NPT_LogFileHandler : public NPT_LogHandler { class NPT_LogFileHandler : public NPT_LogHandler 
Class: class NPT_LogTcpHandler : public NPT_LogHandler { class NPT_LogTcpHandler : public NPT_LogHandler 
Class: class NPT_LogUdpHandler : public NPT_LogHandler { class NPT_LogUdpHandler : public NPT_LogHandler 
Class: class NPT_LogNullHandler : public NPT_LogHandler { class NPT_LogNullHandler : public NPT_LogHandler 
Class: class NPT_TlsContextImpl { class NPT_TlsContextImpl 
Class:  class NPT_TlsSessionImpl { class NPT_TlsSessionImpl 
Class: class NPT_TlsInputStream : public NPT_InputStream { class NPT_TlsInputStream : public NPT_InputStream 
Class: class NPT_TlsOutputStream : public NPT_OutputStream { class NPT_TlsOutputStream : public NPT_OutputStream 
Class: class NPT_XmlAttributeFinder { 
Class: class NPT_XmlAttributeFinderWithPrefix { 
Class: class NPT_XmlTagFinder { 
Class: class NPT_XmlTextFinder { 
Class: class NPT_XmlNamespaceCollapser { 
Class: class NPT_XmlAccumulator { class NPT_XmlAccumulator 
Class: class NPT_XmlProcessor { class NPT_XmlProcessor 
Class: class NPT_XmlAttributeWriter { 
Class: class NPT_XmlNodeWriter { 
Class: class NPT_XmlNodeCanonicalWriter { 
Class: class NPT_ZipInflateState { class NPT_ZipInflateState 
Class: class NPT_ZipDeflateState { class NPT_ZipDeflateState 
Class: class NPT_BsdSocketFd { 
Class: class NPT_BsdSocketStream { 
Class: class NPT_BsdSocketInputStream : public NPT_InputStream,                                  private NPT_BsdSocketStream { 
Class: class NPT_BsdSocket : public NPT_SocketInterface { 
Class: class NPT_BsdUdpSocket : public    NPT_UdpSocketInterface,                          protected NPT_BsdSocket  { 
Class: class NPT_BsdUdpMulticastSocket : public    NPT_UdpMulticastSocketInterface,                                   protected NPT_BsdUdpSocket  { 
Class: class NPT_BsdTcpClientSocket : protected NPT_BsdSocket { 
Class: class NPT_BsdTcpServerSocket : public    NPT_TcpServerSocketInterface,                                protected NPT_BsdSocket  { 
Class: class NPT_NullSystem : public NPT_SystemInterface { 
Class: class NPT_PSPDirectory : public NPT_DirectoryInterface { 
Class: class NPT_PSPFileStream { 
Class: class NPT_PSPFileInputStream : public NPT_InputStream,                                private NPT_PSPFileStream  { 
Class: class NPT_PSPFileOutputStream : public NPT_OutputStream,                                 private NPT_PSPFileStream { 
Class: class NPT_PSPFile: public NPT_FileInterface { 
Class: class NPT_PSPSharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_PSPAtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_PSPThread : public NPT_ThreadInterface { 
Class: class NPT_PosixSharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_PosixAtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_PosixThread : public NPT_ThreadInterface { 
Class: class NPT_StdcFileWrapper { 
Class: class NPT_StdcFileStream { 
Class: class NPT_StdcFileInputStream : public NPT_InputStream,                                 private NPT_StdcFileStream  { 
Class: class NPT_StdcFileOutputStream : public NPT_OutputStream,                                  private NPT_StdcFileStream { 
Class: class NPT_StdcFile: public NPT_FileInterface { 
Class: class NPT_Win32SerialPortStream { 
Class: class NPT_Win32SerialPortInputStream : public NPT_InputStream,                                        private NPT_Win32SerialPortStream  { 
Class: class NPT_Win32SerialPortOutputStream : public NPT_OutputStream,                                         private NPT_Win32SerialPortStream { 
Class: class NPT_Win32SerialPort: public NPT_SerialPortInterface { 
Class: class NPT_Win32SharedVariable : public NPT_SharedVariableInterface { 
Class: class NPT_Win32AtomicVariable : public NPT_AtomicVariableInterface { 
Class: class NPT_Win32Thread : public NPT_ThreadInterface { 
Class: class A { class A 
Class: class KillHandler : public NPT_HttpRequestHandler { 
Class: class TestHandler1 : public NPT_HttpRequestHandler { 
Class: class TestHandler2 : public NPT_HttpRequestHandler { 
Class: class ChunkedHandler : public NPT_HttpRequestHandler { 
Class: class A { class A 
Class:class Test1 { class Test1 
Class: class A { class A 
Class: class FooServerBarCmd1Message : public FooServerMessage { 
Class: class FooServerBarCmd2Message : public FooServerMessage { 
Class: class FooServerBarCmd3Message : public FooServerMessage { 
Class: class FooServerBarCmd4Message : public NPT_Message { 
Class: class FooClientMessageHandler { 
Class: class FooClientBarNotification1Message : public FooClientMessage { 
Class: class FooServer : public NPT_Thread,                   public NPT_MessageReceiver,                   public NPT_MessageHandler,                   public FooServerMessageHandler { 
Class: class FooClient : public NPT_MessageReceiver,                   public NPT_MessageHandler,                   public FooClientMessageHandler { 
Class:class TestServerTestCommandMessage : public TestServerMessage { 
Class:class TestClientMessageHandler { 
Class:class TestClientReplyMessage : public TestClientMessage { 
Class:class TestServer : public NPT_Thread,                    public NPT_MessageReceiver,                    public NPT_MessageHandler,                    public TestServerMessageHandler { 
Class:class TestClient : public NPT_MessageReceiver,                    public NPT_MessageHandler,                    public TestClientMessageHandler { 
Class:  class BarA { 
Class: class Item { 
Class: class WriterThread : public NPT_Thread { 
Class: class ReaderThread : public NPT_Thread { 
Class: class Thread1 : public NPT_Thread { 
Class: class Thread2 : public NPT_Runnable { 
Class: class Thread3 : public NPT_Thread { 
Class: class Thread4 : public NPT_Runnable { 
Class: class T1 : public NPT_Runnable { 
Class: class CBR : public NPT_Runnable, public NPT_ThreadCallbackReceiver { 
Class: class CBW : public NPT_Runnable { 
Class: class CBR2 : public NPT_Runnable, public NPT_ThreadCallbackReceiver { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(827, 1, u'+    Assert(strm->avail_out > 0, "bug2");'), (1061, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1072, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1075, 1, u'+        Assert(cur_match < s->strstart, "no future");'), (1102, 1, u'+        Assert(scan[2] == match[2], "scan[2]?");'), (1113, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1133, 1, u'+        Assert(*scan == *match, "match[2]?");'), (1145, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1187, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1189, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1191, 1, u'+    Assert(cur_match < s->strstart, "no future");'), (1206, 1, u'+    Assert(*scan == *match, "match[2]?");'), (1218, 1, u'+    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1340, 1, u'+        Assert(more >= 2, "more < 2");'), (1409, 1, u'+            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (1417, 1, u'+        Assert(s->block_start >= 0L, "block gone");'), (1666, 1, u'+    Assert (flush != Z_NO_FLUSH, "no flush?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+    assert(i < limit);'), (93, 1, u'+    assert(!buffer_);       // find realloc error'), (151, 1, u'+    assert (i == AUTO);'), (248, 1, u'+    assert(!buffer_);   // find realloc error'), (264, 1, u'+    assert(i == AUTO);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(337, 1, u'+    assert(peerX509_ == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1106, 1, u'+    assert(keyOutput == (keyLen + ivLen));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(80, 1, u'+            base.ca_, 0) != SSL_SUCCESS) assert(0);'), (83, 1, u'+            base.cert_, SSL_FILETYPE_PEM) != SSL_SUCCESS) assert(0);'), (86, 1, u'+            SSL_FILETYPE_PEM) != SSL_SUCCESS) assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(905, 1, u'+    assert(write_buffer_ == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(96, 1, u'+    assert( (keylen == 16) || (keylen == 24) || (keylen == 32) );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(258, 1, u'+        assert(expBegin->NotNegative());')]
===========================================
Class:class BadCertificate 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(96, 1, u'+\tassert(keylength >= 4 && keylength <= 56);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(106, 1, u'+    assert((bytes % 2) == 0);'), (116, 1, u'+        assert( b  < sizeof(hexDecode)/sizeof(hexDecode[0]) );'), (117, 1, u'+        assert( b2 < sizeof(hexDecode)/sizeof(hexDecode[0]) );'), (122, 1, u'+        assert( b != bad && b2 != bad );'), (185, 1, u'+    assert(i == outSz);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(194, 1, u'+    assert(!!r_ && !!s_);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+    assert(digSz  <= MaxDigestSz);'), (43, 1, u'+    assert(buffSz <= MaxBufferSz);'), (124, 1, u'+    assert(digSz  <= MaxDigestSz);'), (125, 1, u'+    assert(buffSz <= MaxBufferSz);')]
===========================================
Class:class DWord { class DWord 
Class:  class Word { class Word 
Class:    template <class S, class D> S DivideThreeWordsByTwo(S* A, S B0, S B1, D* dummy_VC6_WorkAround = 0) { 
Class:    class Portable { 
Class:   class PentiumOptimized : public Portable { 
Class: class P4Optimized { 
Class:  class LowLevel : public PentiumOptimized { 
Class:class BadBER 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 1, u'+    assert(modn.Exponentiate(y, e_) == x);  // check'), (135, 1, u'+    assert(i==pkcsBlockLen || pkcsBlock[i-1]==0);'), (190, 1, u'+    assert(i==pkcsBlockLen || pkcsBlock[i-1]==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(150, 1, u'+\tassert(keylen >= 16 && keylen <= 32);')]
===========================================
Class:class MemoryTracker { class MemoryTracker 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+# ifdef HAVE_ASSERT_H'), (32, 1, u'+#  include <assert.h>'), (45, 1, u'+  assert(value);'), (46, 1, u'+  assert(bytes == 8 || bytes == 4 || bytes == 3);'), (67, 1, u'+  assert(bytes == 4 || bytes == 5);'), (85, 1, u'+  assert(bytes >= 1 && bytes <= 4);'), (180, 1, u'+  assert(length <= 30);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(827, 1, u'+    Assert(strm->avail_out > 0, "bug2");'), (1061, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1072, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1075, 1, u'+        Assert(cur_match < s->strstart, "no future");'), (1102, 1, u'+        Assert(scan[2] == match[2], "scan[2]?");'), (1113, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1133, 1, u'+        Assert(*scan == *match, "match[2]?");'), (1145, 1, u'+        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1187, 1, u'+    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");'), (1189, 1, u'+    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");'), (1191, 1, u'+    Assert(cur_match < s->strstart, "no future");'), (1206, 1, u'+    Assert(*scan == *match, "match[2]?");'), (1218, 1, u'+    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");'), (1340, 1, u'+        Assert(more >= 2, "more < 2");'), (1409, 1, u'+            Assert(s->strstart < s->w_size+MAX_DIST(s) ||'), (1417, 1, u'+        Assert(s->block_start >= 0L, "block gone");'), (1666, 1, u'+    Assert (flush != Z_NO_FLUSH, "no flush?");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1832, 1, u'+#undef g_assert_warning'), (1833, 1, u'+extern __typeof (g_assert_warning) g_assert_warning __attribute((alias("IA__g_assert_warning"), visibility("default")));'), (3159, 1, u'+#undef g_assertion_message'), (3160, 1, u'+extern __typeof (g_assertion_message) g_assertion_message __attribute((alias("IA__g_assertion_message"), visibility("default")));'), (3162, 1, u'+#undef g_assertion_message_cmpnum'), (3163, 1, u'+extern __typeof (g_assertion_message_cmpnum) g_assertion_message_cmpnum __attribute((alias("IA__g_assertion_message_cmpnum"), visibility("default")));'), (3165, 1, u'+#undef g_assertion_message_cmpstr'), (3166, 1, u'+extern __typeof (g_assertion_message_cmpstr) g_assertion_message_cmpstr __attribute((alias("IA__g_assertion_message_cmpstr"), visibility("default")));'), (3168, 1, u'+#undef g_assertion_message_expr'), (3169, 1, u'+extern __typeof (g_assertion_message_expr) g_assertion_message_expr __attribute((alias("IA__g_assertion_message_expr"), visibility("default")));'), (3171, 1, u'+#undef g_assertion_message_error'), (3172, 1, u'+extern __typeof (g_assertion_message_error) g_assertion_message_error __attribute((alias("IA__g_assertion_message_error"), visibility("default")));'), (3270, 1, u'+#undef g_test_trap_assertions'), (3271, 1, u'+extern __typeof (g_test_trap_assertions) g_test_trap_assertions __attribute((alias("IA__g_test_trap_assertions"), visibility("default")));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(176, 1, u'+  g_assert (__argc >= ARG_COUNT);'), (185, 1, u'+  g_assert (argc == __argc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(91, 1, u'+\tassert (channel_count <= MAX_CHANNELS) ;'), (163, 1, u'+\tassert (channel_count <= MAX_CHANNELS) ;'), (291, 1, u'+\tassert (channel_count <= MAX_CHANNELS) ;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(108, 1, u'+    assert((!k && !ibl) ||'), (167, 1, u'+    assert((k != (size_t)(-1) && !ibl) ||'), (179, 1, u'+      assert((!k && !tbl) ||'), (189, 1, u'+  assert(!k);'), (202, 1, u'+    assert((k != (size_t)(-1) && !ibl) ||'), (212, 1, u'+      assert((!k && !tbl) ||'), (219, 1, u'+  assert(!k);'), (220, 1, u'+  assert(!obl);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(465, 1, u'+SQLITE_PRIVATE   int sqlite3Assert(void);'), (466, 1, u'+# define ALWAYS(X)      ((X)?1:sqlite3Assert())'), (467, 1, u'+# define NEVER(X)       ((X)?sqlite3Assert():0)'), (10359, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (10369, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (10381, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (11066, 1, u'+      assert( n>=1 );'), (11659, 1, u'+  assert( rc==SQLITE_OK || pFile->pMethods==0 );'), (11728, 1, u'+  assert( pFile );'), (11769, 1, u'+  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) );'), (11806, 1, u'+  assert(vfsList);'), (12021, 1, u'+  assert( nByte>0 );'), (12041, 1, u'+  assert( pPrior!=0 );'), (12058, 1, u'+  assert( pPrior!=0 && nByte>0 );'), (12269, 1, u'+    assert( mem.nCurrent[i]>=0 );'), (12287, 1, u'+  assert( p->iForeGuard==(int)FOREGUARD );'), (12291, 1, u'+  assert( pInt[nReserve/sizeof(int)]==(int)REARGUARD );'), (12296, 1, u'+  while( nReserve-- > p->iSize ) assert( pU8[nReserve]==0x65 );'), (12317, 1, u'+  assert( (sizeof(struct MemBlockHdr)&7) == 0 );'), (12353, 1, u'+  assert( mem.disallow==0 );'), (12377, 1, u'+      assert(pBt[0]);'), (12405, 1, u'+  assert( sqlite3GlobalConfig.bMemstat || mem.mutex!=0 );'), (12411, 1, u'+    assert( pHdr->pPrev->pNext==pHdr );'), (12414, 1, u'+    assert( mem.pFirst==pHdr );'), (12418, 1, u'+    assert( pHdr->pNext->pPrev==pHdr );'), (12421, 1, u'+    assert( mem.pLast==pHdr );'), (12445, 1, u'+  assert( mem.disallow==0 );'), (12724, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12743, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12744, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (12745, 1, u'+  assert( i>=1 );'), (12747, 1, u'+  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (12748, 1, u'+  assert( size>=2 );'), (12762, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12777, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12778, 1, u'+  assert( i>=1 );'), (12779, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (12781, 1, u'+  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (12782, 1, u'+  assert( size>=2 );'), (12812, 1, u'+    assert( sqlite3_mutex_held(mem3.mutex) );'), (12828, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12829, 1, u'+  assert( i>=1 );'), (12830, 1, u'+  assert( mem3.aPool[i-1].u.hdr.size4x/4==nBlock );'), (12831, 1, u'+  assert( mem3.aPool[i+nBlock-1].u.hdr.prevSize==nBlock );'), (12845, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12846, 1, u'+  assert( mem3.szMaster>=nBlock );'), (12858, 1, u'+    assert( newi > mem3.iMaster+1 );'), (12892, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12896, 1, u'+    assert( (size&1)==0 );'), (12899, 1, u'+      assert( i > mem3.aPool[i-1].u.hdr.prevSize );'), (12933, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (12934, 1, u'+  assert( sizeof(Mem3Block)==8 );'), (12940, 1, u'+  assert( nBlock>=2 );'), (13014, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (13015, 1, u'+  assert( p>mem3.aPool && p<&mem3.aPool[mem3.nPool] );'), (13017, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x&1)==1 );'), (13019, 1, u'+  assert( i+size<=mem3.nPool+1 );'), (13055, 1, u'+  assert( (pBlock[-1].u.hdr.size4x&1)!=0 );'), (13075, 1, u'+  assert( nBytes>0 );          /* malloc.c filters out 0 byte requests */'), (13086, 1, u'+  assert( pPrior );'), (13133, 1, u'+  assert( sizeof(Mem3Block)==8 );'), (13183, 1, u'+      assert( 0 );'), (13188, 1, u'+      assert( 0 );'), (13193, 1, u'+      assert( 0 );'), (13376, 1, u'+  assert( i>=0 && i<mem5.nBlock );'), (13377, 1, u'+  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (13378, 1, u'+  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (13398, 1, u'+  assert( sqlite3_mutex_held(mem5.mutex) );'), (13399, 1, u'+  assert( i>=0 && i<mem5.nBlock );'), (13400, 1, u'+  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (13401, 1, u'+  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (13406, 1, u'+    assert( x<mem5.nBlock );'), (13436, 1, u'+    assert( i>=0 && i<mem5.nBlock );'), (13450, 1, u'+  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (13452, 1, u'+  assert( iFirst>=0 );'), (13523, 1, u'+  assert( iBlock>=0 && iBlock<mem5.nBlock );'), (13524, 1, u'+  assert( ((u8 *)pOld-mem5.zPool)%mem5.nAtom==0 );'), (13525, 1, u'+  assert( (mem5.aCtrl[iBlock] & CTRL_FREE)==0 );'), (13529, 1, u'+  assert( iBlock+size-1<(u32)mem5.nBlock );'), (13533, 1, u'+  assert( mem5.currentCount>0 );'), (13534, 1, u'+  assert( mem5.currentOut>=(size*mem5.nAtom) );'), (13537, 1, u'+  assert( mem5.currentOut>0 || mem5.currentCount==0 );'), (13538, 1, u'+  assert( mem5.currentCount>0 || mem5.currentOut==0 );'), (13548, 1, u'+    assert( iBuddy>=0 );'), (13584, 1, u'+assert(0);'), (13672, 1, u'+    assert((iOffset+nAlloc)>mem5.nBlock);'), (13798, 1, u'+        assert(pMaster);'), (13800, 1, u'+        assert( sqlite3GlobalConfig.mutex.xMutexAlloc==0'), (14021, 1, u'+      assert( id-2 >= 0 );'), (14022, 1, u'+      assert( id-2 < (int)(sizeof(aStatic)/sizeof(aStatic[0])) );'), (14035, 1, u'+  assert( p->cnt==0 );'), (14036, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14052, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(p) );'), (14056, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(p) );'), (14068, 1, u'+  assert( debugMutexHeld(p) );'), (14070, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(p) );'), (14231, 1, u'+      assert( iType-2 >= 0 );'), (14232, 1, u'+      assert( iType-2 < sizeof(staticMutexes)/sizeof(staticMutexes[0]) );'), (14248, 1, u'+  assert( p->nRef==0 );'), (14249, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14270, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || os2MutexNotheld(p) );'), (14282, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || os2MutexNotheld(p) );'), (14306, 1, u'+  assert( p->nRef>0 );'), (14308, 1, u'+  assert( p->owner==tid );'), (14310, 1, u'+  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (14525, 1, u'+      assert( iType-2 >= 0 );'), (14526, 1, u'+      assert( iType-2 < ArraySize(staticMutexes) );'), (14542, 1, u'+  assert( p->nRef==0 );'), (14543, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14560, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (14579, 1, u'+      assert( p->nRef==0 );'), (14600, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (14619, 1, u'+      assert( p->nRef==0 );'), (14654, 1, u'+  assert( pthreadMutexHeld(p) );'), (14656, 1, u'+  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (14851, 1, u'+      assert( iType-2 >= 0 );'), (14852, 1, u'+      assert( iType-2 < sizeof(staticMutexes)/sizeof(staticMutexes[0]) );'), (14868, 1, u'+  assert( p );'), (14869, 1, u'+  assert( p->nRef==0 );'), (14870, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (14887, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld(p) );'), (14894, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld(p) );'), (14925, 1, u'+  assert( p->nRef>0 );'), (14926, 1, u'+  assert( p->owner==GetCurrentThreadId() );'), (14928, 1, u'+  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (15194, 1, u'+  assert( sqlite3_mutex_held(mem0.mutex) );'), (15275, 1, u'+  assert( n>0 );'), (15282, 1, u'+  assert( scratchAllocOut==0 );'), (15300, 1, u'+      assert(  (((u8*)p - (u8*)0) & 7)==0 );'), (15332, 1, u'+    assert( scratchAllocOut==1 );'), (15353, 1, u'+      assert( i>=0 && i<sqlite3GlobalConfig.nScratch );'), (15355, 1, u'+      assert( mem0.nScratchFree<(u32)sqlite3GlobalConfig.nScratch );'), (15382, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (15412, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (15521, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (15556, 1, u'+  assert( db!=0 );'), (15557, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (15608, 1, u'+  assert( (n&0x7fffffff)==n );'), (15620, 1, u'+  assert( (n&0x7fffffff)==n );'), (15664, 1, u'+  assert( !db || sqlite3_mutex_held(db->mutex) );'), (16219, 1, u'+          assert( precision>0 );'), (16229, 1, u'+          assert( bufpt>buf );'), (16358, 1, u'+        assert( k>=0 && k<pSrc->nSrc );'), (16368, 1, u'+        assert( xtype==etINVALID );'), (16404, 1, u'+  assert( z!=0 || N==0 );'), (16502, 1, u'+  assert( db!=0 );'), (17389, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (17390, 1, u'+  assert( pMem->flags&MEM_Str );'), (17391, 1, u'+  assert( pMem->enc!=desiredEnc );'), (17392, 1, u'+  assert( pMem->enc!=0 );'), (17393, 1, u'+  assert( pMem->n>=0 );'), (17412, 1, u'+      assert( rc==SQLITE_NOMEM );'), (17468, 1, u'+      assert( desiredEnc==SQLITE_UTF16BE );'), (17479, 1, u'+    assert( desiredEnc==SQLITE_UTF8 );'), (17496, 1, u'+  assert( (pMem->n+(desiredEnc==SQLITE_UTF8?1:2))<=len );'), (17529, 1, u'+  assert( pMem->n>=0 );'), (17572, 1, u'+  assert( z<=zTerm );'), (17627, 1, u'+  assert( (m.flags & MEM_Term)!=0 || db->mallocFailed );'), (17628, 1, u'+  assert( (m.flags & MEM_Str)!=0 || db->mallocFailed );'), (17681, 1, u'+    assert( n>0 && n<=4 );'), (17688, 1, u'+    assert( c==t );'), (17689, 1, u'+    assert( (z-zBuf)==n );'), (17696, 1, u'+    assert( n>0 && n<=4 );'), (17700, 1, u'+    assert( c==i );'), (17701, 1, u'+    assert( (z-zBuf)==n );'), (17708, 1, u'+    assert( n>0 && n<=4 );'), (17712, 1, u'+    assert( c==i );'), (17713, 1, u'+    assert( (z-zBuf)==n );'), (17764, 1, u'+SQLITE_PRIVATE int sqlite3Assert(void){'), (17766, 1, u'+  assert( ALWAYS_was_false_or_NEVER_was_true );      /* Always fails */'), (18275, 1, u'+  assert( n<=9 );'), (18544, 1, u'+    assert( n>5 && n<=9 );'), (18586, 1, u"+  assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );"), (18650, 1, u'+    assert( sqlite3_mutex_held(db->mutex) );'), (18669, 1, u'+    assert( sqlite3_mutex_held(db->mutex) );'), (18738, 1, u'+  assert( pNew!=0 );'), (18753, 1, u'+  assert( pH!=0 );'), (18908, 1, u'+    assert( pH->first==0 );'), (18909, 1, u'+    assert( pH->count==0 );'), (18960, 1, u'+  assert( pH!=0 );'), (18974, 1, u'+        assert(nKey==elem->nKey);'), (19008, 1, u'+  assert( pH->htsize>0 );'), (19510, 1, u'+  assert( id!=0 );'), (19542, 1, u'+  assert( id!=0 );'), (19549, 1, u'+  assert( amt>0 );'), (19612, 1, u'+  assert( id!=0 );'), (19695, 1, u'+  assert( pFile!=0 );'), (19709, 1, u'+  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (19710, 1, u'+  assert( locktype!=PENDING_LOCK );'), (19711, 1, u'+  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (19737, 1, u'+    assert( pFile->locktype==NO_LOCK );'), (19748, 1, u'+    assert( pFile->locktype==SHARED_LOCK );'), (19771, 1, u'+    assert( pFile->locktype>=SHARED_LOCK );'), (19824, 1, u'+  assert( pFile!=0 );'), (19876, 1, u'+  assert( pFile!=0 );'), (19877, 1, u'+  assert( locktype<=SHARED_LOCK );'), (20304, 1, u'+      assert( !"Invalid flags argument" );'), (21067, 1, u'+    assert( 0 );'), (21069, 1, u'+  assert( p->l_whence==SEEK_SET );'), (21086, 1, u'+      assert( 0 );'), (21249, 1, u"+  assert( zAbsoluteName[0]=='/' );"), (21288, 1, u'+  assert( pId->nRef>0 );'), (21293, 1, u'+    assert( *pp==pId );'), (21603, 1, u'+        assert( pLock->pPrev->pNext==pLock );'), (21606, 1, u'+        assert( lockList==pLock );'), (21610, 1, u'+        assert( pLock->pNext->pPrev==pLock );'), (21626, 1, u'+        assert( pOpen->pPrev->pNext==pOpen );'), (21629, 1, u'+        assert( openList==pOpen );'), (21633, 1, u'+        assert( pOpen->pNext->pPrev==pOpen );'), (21834, 1, u'+  assert( pFile );'), (21937, 1, u'+  assert( pFile );'), (21954, 1, u'+  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (21955, 1, u'+  assert( locktype!=PENDING_LOCK );'), (21956, 1, u'+  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (21987, 1, u'+    assert( locktype==SHARED_LOCK );'), (21988, 1, u'+    assert( pFile->locktype==0 );'), (21989, 1, u'+    assert( pLock->cnt>0 );'), (22026, 1, u'+    assert( pLock->cnt==0 );'), (22027, 1, u'+    assert( pLock->locktype==0 );'), (22069, 1, u'+    assert( 0!=pFile->locktype );'), (22080, 1, u'+        assert(0);'), (22139, 1, u'+  assert( pFile );'), (22143, 1, u'+  assert( locktype<=SHARED_LOCK );'), (22153, 1, u'+  assert( pLock->cnt!=0 );'), (22155, 1, u'+    assert( pLock->locktype==pFile->locktype );'), (22169, 1, u'+    assert( pFile->inNormalWrite==0'), (22193, 1, u'+    lock.l_len = 2L;  assert( PENDING_BYTE+1==RESERVED_BYTE );'), (22240, 1, u'+    assert( pOpen->nLock>=0 );'), (22441, 1, u'+  assert( pFile );'), (22542, 1, u'+  assert( pFile );'), (22545, 1, u'+  assert( locktype<=SHARED_LOCK );'), (22561, 1, u'+  assert( locktype==NO_LOCK );'), (22622, 1, u'+  assert( pFile );'), (22701, 1, u'+  assert( pFile );'), (22744, 1, u'+  assert( pFile );'), (22747, 1, u'+  assert( locktype<=SHARED_LOCK );'), (22821, 1, u'+  assert( pFile );'), (22920, 1, u'+  assert( pFile );'), (22921, 1, u'+  assert( pSem );'), (22924, 1, u'+  assert( locktype<=SHARED_LOCK );'), (22957, 1, u'+    assert( pFile );'), (23066, 1, u'+  assert( pFile );'), (23127, 1, u'+  assert( pFile );'), (23143, 1, u'+  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (23144, 1, u'+  assert( locktype!=PENDING_LOCK );'), (23145, 1, u'+  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (23211, 1, u'+    assert( 0!=pFile->locktype );'), (23271, 1, u'+  assert( pFile );'), (23275, 1, u'+  assert( locktype<=SHARED_LOCK );'), (23309, 1, u'+      assert( pOpen->nLock>=0 );'), (23445, 1, u'+  assert( id );'), (23448, 1, u'+  assert( ((unixFile*)id)->isLockable==0'), (23514, 1, u'+  assert( id );'), (23515, 1, u'+  assert( amt>0 );'), (23518, 1, u'+  assert( ((unixFile*)id)->isLockable==0'), (23705, 1, u'+  assert((flags&0x0F)==SQLITE_SYNC_NORMAL'), (23714, 1, u'+  assert( pFile );'), (23758, 1, u'+  assert( id );'), (23775, 1, u'+  assert( id );'), (24146, 1, u'+  assert( pNew->pLock==NULL );'), (24147, 1, u'+  assert( pNew->pOpen==NULL );'), (24433, 1, u'+  assert((isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly));'), (24434, 1, u'+  assert(isCreate==0 || isReadWrite);'), (24435, 1, u'+  assert(isExclusive==0 || isCreate);'), (24436, 1, u'+  assert(isDelete==0 || isCreate);'), (24441, 1, u'+  assert( eType!=SQLITE_OPEN_MAIN_DB || !isDelete );'), (24442, 1, u'+  assert( eType!=SQLITE_OPEN_MAIN_JOURNAL || !isDelete );'), (24443, 1, u'+  assert( eType!=SQLITE_OPEN_MASTER_JOURNAL || !isDelete );'), (24446, 1, u'+  assert( eType==SQLITE_OPEN_MAIN_DB      || eType==SQLITE_OPEN_TEMP_DB'), (24455, 1, u'+    assert(isDelete && !isOpenDirectory);'), (24502, 1, u'+  assert( fd>=0 );'), (24617, 1, u'+      assert(!"Invalid flags argument");'), (24647, 1, u'+  assert( pVfs->mxPathname==MAX_PATHNAME );'), (24732, 1, u'+  assert((size_t)nBuf>=(sizeof(time_t)+sizeof(int)));'), (24757, 1, u'+      assert( sizeof(t)+sizeof(pid)<=(size_t)nBuf );'), (25459, 1, u'+  assert( (int)strlen(conchPath) == len+7 );'), (25509, 1, u'+    assert( (int)strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (25520, 1, u'+    assert( strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (25645, 1, u'+      assert( 0 );  /* The call assures that only valid opcodes are sent */'), (26735, 1, u'+  assert( id!=0 );'), (26784, 1, u'+  assert( id!=0 );'), (26822, 1, u'+  assert( id!=0 );'), (26831, 1, u'+  assert( amt>0 );'), (26857, 1, u'+  assert( id!=0 );'), (26889, 1, u'+  assert( id!=0 );'), (26926, 1, u'+  assert( id!=0 );'), (27030, 1, u'+  assert( id!=0 );'), (27044, 1, u'+  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (27045, 1, u'+  assert( locktype!=PENDING_LOCK );'), (27046, 1, u'+  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (27074, 1, u'+    assert( pFile->locktype==NO_LOCK );'), (27086, 1, u'+    assert( pFile->locktype==SHARED_LOCK );'), (27105, 1, u'+    assert( pFile->locktype>=SHARED_LOCK );'), (27149, 1, u'+  assert( id!=0 );'), (27180, 1, u'+  assert( pFile!=0 );'), (27181, 1, u'+  assert( locktype<=SHARED_LOCK );'), (27234, 1, u'+  assert( id!=0 );'), (27402, 1, u'+  assert( id!=0 );'), (27612, 1, u'+      assert(!"Invalid flags argument");'), (28108, 1, u'+  assert( sizeof(*p)==BITVEC_SZ );'), (28160, 1, u'+  assert( p!=0 );'), (28161, 1, u'+  assert( i>0 );'), (28162, 1, u'+  assert( i<=p->iSize );'), (28222, 1, u'+  assert( p!=0 );'), (28223, 1, u'+  assert( i>0 );'), (28429, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (28430, 1, u'+# define expensive_assert(X)  assert(X)'), (28432, 1, u'+# define expensive_assert(X)'), (28437, 1, u'+#if !defined(NDEBUG) && defined(SQLITE_ENABLE_EXPENSIVE_ASSERT)'), (28448, 1, u'+    assert( p->nRef || (p->flags&PGHDR_NEED_SYNC) );'), (28460, 1, u'+  assert( pPage->pDirtyNext || pPage==p->pDirtyTail );'), (28461, 1, u'+  assert( pPage->pDirtyPrev || pPage==p->pDirty );'), (28475, 1, u'+    assert( pPage==p->pDirtyTail );'), (28481, 1, u'+    assert( pPage==p->pDirty );'), (28487, 1, u'+  expensive_assert( pcacheCheckSynced(p) );'), (28497, 1, u'+  assert( pPage->pDirtyNext==0 && pPage->pDirtyPrev==0 && p->pDirty!=pPage );'), (28501, 1, u'+    assert( pPage->pDirtyNext->pDirtyPrev==0 );'), (28511, 1, u'+  expensive_assert( pcacheCheckSynced(p) );'), (28578, 1, u'+  assert( pCache->nRef==0 && pCache->pDirty==0 );'), (28598, 1, u'+  assert( pCache!=0 );'), (28599, 1, u'+  assert( pgno>0 );'), (28632, 1, u'+    expensive_assert( pcacheCheckSynced(pCache) );'), (28659, 1, u'+    assert( pPage->pCache==pCache );'), (28660, 1, u'+    assert( pPage->pgno==pgno );'), (28661, 1, u'+    assert( pPage->pExtra==(void *)&pPage[1] );'), (28680, 1, u'+  assert( p->nRef>0 );'), (28699, 1, u'+  assert(p->nRef>0);'), (28710, 1, u'+  assert( p->nRef==1 );'), (28728, 1, u'+  assert( p->nRef>0 );'), (28775, 1, u'+  assert( p->nRef>0 );'), (28776, 1, u'+  assert( newPgno>0 );'), (28801, 1, u'+        assert( p->flags&PGHDR_DIRTY );'), (29125, 1, u'+  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29154, 1, u'+  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29231, 1, u'+  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29271, 1, u'+  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29315, 1, u'+  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29336, 1, u'+  assert( sqlite3_mutex_held(pcache1.mutex) );'), (29558, 1, u'+  assert( pPage->pLruPrev==0 && pPage->pLruNext==0 );'), (29559, 1, u'+  assert( pcache1.pLruHead!=pPage && pcache1.pLruTail!=pPage );'), (29597, 1, u'+  assert( pPage->iKey==iOld );'), (29812, 1, u'+  assert( N >= sizeof(*p) );'), (29849, 1, u'+  assert( p!=0 );'), (29872, 1, u'+    assert( p->pEntry==0 );'), (29892, 1, u'+    assert( pA->pNext==0 || pA->v<=pA->pNext->v );'), (29893, 1, u'+    assert( pB->pNext==0 || pB->v<=pB->pNext->v );'), (29907, 1, u'+    assert( pA->pNext==0 || pA->v<=pA->pNext->v );'), (29910, 1, u'+    assert( pB==0 || pB->pNext==0 || pB->v<=pB->pNext->v );'), (29924, 1, u'+  assert( p->isSorted==0 );'), (30350, 1, u'+static int assert_pager_state(Pager *pPager){'), (30353, 1, u'+  assert( pPager->tempFile==0 || pPager->state>=PAGER_EXCLUSIVE );'), (30356, 1, u'+  assert( pPager->tempFile==0 || pPager->changeCountDone );'), (30465, 1, u'+  assert( !MEMDB );'), (30471, 1, u'+    assert( isOpen(pPager->fd) );'), (30476, 1, u'+    assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (30477, 1, u'+    assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (30519, 1, u'+  assert( !pPg->pageHash || pPager->errCode'), (30613, 1, u'+  assert( offset%JOURNAL_HDR_SZ(pPager)==0 );'), (30614, 1, u'+  assert( offset>=c );'), (30615, 1, u'+  assert( (offset-c)<JOURNAL_HDR_SZ(pPager) );'), (30642, 1, u'+  assert( isOpen(pPager->jfd) );'), (30696, 1, u'+  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (30735, 1, u'+  assert( isOpen(pPager->fd) || pPager->noSync );'), (30816, 1, u'+  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (30888, 1, u'+    assert( rc!=SQLITE_OK || iPageSize16==(u16)iPageSize );'), (30937, 1, u'+  assert( isOpen(pPager->jfd) );'), (31046, 1, u'+      assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (31125, 1, u'+  assert('), (31240, 1, u'+  assert( isOpen(pPager->jfd) || pPager->pInJournal==0 );'), (31270, 1, u'+      assert( pPager->journalMode==PAGER_JOURNALMODE_DELETE || rc );'), (31391, 1, u'+  assert( (isMainJrnl&~1)==0 );      /* isMainJrnl is 0 or 1 */'), (31392, 1, u'+  assert( (isSavepnt&~1)==0 );       /* isSavepnt is 0 or 1 */'), (31393, 1, u'+  assert( isMainJrnl || pDone );     /* pDone always used on sub-journals */'), (31394, 1, u'+  assert( isSavepnt || pDone==0 );   /* pDone never used on non-savepoint */'), (31397, 1, u'+  assert( aData );         /* Temp storage must have already been allocated */'), (31415, 1, u'+    assert( !isSavepnt );'), (31433, 1, u'+  assert( pPager->state==PAGER_RESERVED || pPager->state>=PAGER_EXCLUSIVE );'), (31468, 1, u'+  assert( pPg || !MEMDB );'), (31501, 1, u'+    assert( isSavepnt );'), (31725, 1, u'+    assert( !isOpen(pJournal) );'), (31788, 1, u'+  assert( isOpen(pPager->fd) || pPager->tempFile );'), (31801, 1, u'+    assert( MAX_SECTOR_SIZE>=512 );'), (31883, 1, u'+  assert( isOpen(pPager->jfd) );'), (31938, 1, u'+      assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) );'), (32004, 1, u'+  assert( 0 );'), (32012, 1, u'+  assert('), (32095, 1, u'+  assert( pPager->state>=PAGER_SHARED );'), (32130, 1, u'+    assert( rc!=SQLITE_DONE );'), (32145, 1, u'+    assert( rc!=SQLITE_DONE );'), (32152, 1, u'+    assert( !(nJRec==0'), (32165, 1, u'+    assert( rc!=SQLITE_DONE );'), (32167, 1, u'+  assert( rc!=SQLITE_OK || pPager->journalOff==szJ );'), (32177, 1, u'+      assert( offset==ii*(4+pPager->pageSize) );'), (32180, 1, u'+    assert( rc!=SQLITE_DONE );'), (32270, 1, u'+  assert( rc!=SQLITE_OK || isOpen(pFile) );'), (32349, 1, u'+    assert( pageSize==0 || (pageSize>=512 && pageSize<=SQLITE_MAX_PAGE_SIZE) );'), (32438, 1, u'+  assert( isOpen(pPager->fd) || pPager->tempFile );'), (32479, 1, u'+    assert( isOpen(pPager->fd) || pPager->tempFile );'), (32530, 1, u'+  assert( PAGER_SHARED==SHARED_LOCK );'), (32531, 1, u'+  assert( PAGER_RESERVED==RESERVED_LOCK );'), (32532, 1, u'+  assert( PAGER_EXCLUSIVE==EXCLUSIVE_LOCK );'), (32535, 1, u'+  assert( pPager->state>=PAGER_SHARED || pPager->dbSizeValid==0 );'), (32542, 1, u'+  assert( (pPager->state>=locktype)'), (32568, 1, u'+  assert( pPager->dbSizeValid );'), (32569, 1, u'+  assert( pPager->dbSize>=nPage );'), (32570, 1, u'+  assert( pPager->state>=PAGER_RESERVED );'), (32614, 1, u'+  assert( !pPager->aSavepoint && !pPager->pInJournal );'), (32615, 1, u'+  assert( !isOpen(pPager->jfd) && !isOpen(pPager->sjfd) );'), (32677, 1, u'+    assert( !pPager->tempFile );'), (32681, 1, u'+      assert( isOpen(pPager->jfd) );'), (32820, 1, u'+  assert( pPager->state>=PAGER_RESERVED );'), (32828, 1, u'+    assert( pPager->tempFile && rc==SQLITE_OK );'), (32904, 1, u'+    assert( pageInJournal(pPg) || pPg->pgno>pPager->dbOrigSize );'), (32912, 1, u'+    assert( pPager->nSavepoint>0 );'), (32943, 1, u'+  assert( pPg->pPager==pPager );'), (32944, 1, u'+  assert( pPg->flags&PGHDR_DIRTY );'), (33148, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(journalFileSize) );'), (33159, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );'), (33189, 1, u'+      assert(SQLITE_DEFAULT_PAGE_SIZE<=SQLITE_MAX_DEFAULT_PAGE_SIZE);'), (33201, 1, u'+        assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (33202, 1, u'+        assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (33203, 1, u'+        assert(SQLITE_MAX_DEFAULT_PAGE_SIZE<=65536);'), (33229, 1, u'+    assert( pPager->memDb==0 );'), (33238, 1, u'+    assert( !pPager->pTmpSpace );'), (33263, 1, u'+  assert( pPager->state == (tempFile ? PAGER_EXCLUSIVE : PAGER_UNLOCK) );'), (33266, 1, u'+  assert( tempFile==PAGER_LOCKINGMODE_NORMAL'), (33268, 1, u'+  assert( PAGER_LOCKINGMODE_EXCLUSIVE==1 );'), (33282, 1, u'+  assert( isOpen(pPager->fd) || tempFile );'), (33332, 1, u'+  assert( pPager!=0 );'), (33333, 1, u'+  assert( pPager->useJournal );'), (33334, 1, u'+  assert( isOpen(pPager->fd) );'), (33335, 1, u'+  assert( !isOpen(pPager->jfd) );'), (33396, 1, u'+  assert( pPager->state>=PAGER_SHARED && !MEMDB );'), (33399, 1, u'+    assert( pPager->tempFile );'), (33483, 1, u'+    assert( !MEMDB );'), (33484, 1, u'+    assert( sqlite3PcacheRefCount(pPager->pPCache)==0 );'), (33488, 1, u'+        assert( pPager->state==PAGER_UNLOCK );'), (33494, 1, u'+    assert( pPager->state>=SHARED_LOCK );'), (33540, 1, u'+            assert( !pPager->tempFile );'), (33542, 1, u'+            assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (33574, 1, u'+      assert( (pPager->state==PAGER_SHARED)'), (33604, 1, u'+      assert( pPager->dbSizeValid );'), (33619, 1, u'+    assert( pPager->exclusiveMode || pPager->state==PAGER_SHARED );'), (33716, 1, u'+  assert( assert_pager_state(pPager) );'), (33717, 1, u'+  assert( pPager->state==PAGER_UNLOCK'), (33731, 1, u'+  assert( pPager!=0 );'), (33742, 1, u'+  assert( pPager->state!=PAGER_UNLOCK );'), (33748, 1, u'+  assert( pPg->pgno==pgno );'), (33749, 1, u'+  assert( pPg->pPager==pPager || pPg->pPager==0 );'), (33789, 1, u'+      assert( pPg->pPager==pPager );'), (33823, 1, u'+  assert( pPager!=0 );'), (33824, 1, u'+  assert( pgno!=0 );'), (33898, 1, u'+  assert( pPager->state>=PAGER_RESERVED );'), (33899, 1, u'+  assert( pPager->useJournal );'), (33900, 1, u'+  assert( pPager->pInJournal==0 );'), (33937, 1, u'+    assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (33985, 1, u'+  assert( pPager->state!=PAGER_UNLOCK );'), (33987, 1, u'+    assert( pPager->pInJournal==0 );'), (33988, 1, u'+    assert( !MEMDB && !pPager->tempFile );'), (34018, 1, u'+    assert( pPager->nRec==0 );'), (34019, 1, u'+    assert( pPager->dbOrigSize==0 );'), (34020, 1, u'+    assert( pPager->pInJournal==0 );'), (34025, 1, u'+  assert( !isOpen(pPager->jfd) || pPager->journalOff>0 || rc!=SQLITE_OK );'), (34050, 1, u'+  assert( !pPager->setMaster );'), (34069, 1, u'+    assert( pPager->state!=PAGER_UNLOCK );'), (34074, 1, u'+    assert( pPager->state>=PAGER_RESERVED );'), (34094, 1, u'+        assert( pPg->pgno!=PAGER_MJ_PGNO(pPager) );'), (34134, 1, u'+        assert( pPager->pInJournal!=0 );'), (34137, 1, u'+        assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (34140, 1, u'+          assert( rc==SQLITE_NOMEM );'), (34166, 1, u'+  assert( pPager->state>=PAGER_SHARED );'), (34204, 1, u'+    assert( !MEMDB );'), (34205, 1, u'+    assert( pPager->doNotSync==0 );'), (34222, 1, u'+    assert(nPage>0);'), (34223, 1, u'+    assert(pg1<=pPg->pgno);'), (34224, 1, u'+    assert((pg1+nPage)>pPg->pgno);'), (34236, 1, u'+              assert(pPager->needSync);'), (34256, 1, u'+      assert( !MEMDB && pPager->noSync==0 );'), (34264, 1, u'+      assert(pPager->needSync);'), (34267, 1, u'+    assert( pPager->doNotSync==1 );'), (34343, 1, u'+  assert( isDirectMode==0 );'), (34349, 1, u'+  assert( pPager->state>=PAGER_RESERVED );'), (34354, 1, u'+    assert( !pPager->tempFile && isOpen(pPager->fd) );'), (34358, 1, u'+    assert( pPgHdr==0 || rc==SQLITE_OK );'), (34376, 1, u'+        assert( pPager->dbFileSize>0 );'), (34481, 1, u'+    assert( isOpen(pPager->jfd) || pPager->journalMode==PAGER_JOURNALMODE_OFF );'), (34554, 1, u'+      assert( rc!=SQLITE_IOERR_BLOCKED );'), (34564, 1, u'+      assert( pPager->state>=PAGER_EXCLUSIVE );'), (34636, 1, u'+    assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) );'), (34641, 1, u'+  assert( pPager->state==PAGER_SYNCED || MEMDB || !pPager->dbModified );'), (34794, 1, u'+    assert( pPager->nSavepoint==0 || isOpen(pPager->sjfd) ||'), (34813, 1, u'+      assert( pPager->dbSizeValid );'), (34867, 1, u'+  assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (34868, 1, u'+  assert( iSavepoint>=0 || op==SAVEPOINT_ROLLBACK );'), (34892, 1, u'+      assert(rc!=SQLITE_DONE);'), (34898, 1, u'+      assert( rc==SQLITE_OK );'), (34990, 1, u'+  assert( pPg->nRef>0 );'), (35030, 1, u'+    assert( pageInJournal(pPg) || pPg->pgno>pPager->dbOrigSize );'), (35031, 1, u'+    assert( pPg->flags&PGHDR_DIRTY );'), (35032, 1, u'+    assert( pPager->needSync );'), (35042, 1, u'+  assert( !pPgOld || pPgOld->nRef==1 );'), (35072, 1, u'+    assert( pPager->needSync );'), (35081, 1, u'+    assert( pPager->noSync==0 && !MEMDB );'), (35108, 1, u'+  assert( pPg->nRef>0 || pPg->pPager->memDb );'), (35132, 1, u'+  assert( eMode==PAGER_LOCKINGMODE_QUERY'), (35135, 1, u'+  assert( PAGER_LOCKINGMODE_QUERY<0 );'), (35136, 1, u'+  assert( PAGER_LOCKINGMODE_NORMAL>=0 && PAGER_LOCKINGMODE_EXCLUSIVE>=0 );'), (35162, 1, u'+  assert( eMode==PAGER_JOURNALMODE_QUERY'), (35168, 1, u'+  assert( PAGER_JOURNALMODE_QUERY<0 );'), (35811, 1, u'+  assert( p->pBt->inTransaction!=TRANS_NONE || p->pBt->nTransaction==0 ); \\'), (35812, 1, u'+  assert( p->pBt->inTransaction>=p->inTrans );'), (35876, 1, u'+  assert( p->locked==0 );'), (35877, 1, u'+  assert( sqlite3_mutex_notheld(p->pBt->mutex) );'), (35878, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (35890, 1, u'+  assert( p->locked==1 );'), (35891, 1, u'+  assert( sqlite3_mutex_held(p->pBt->mutex) );'), (35892, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (35893, 1, u'+  assert( p->db==p->pBt->db );'), (35922, 1, u'+  assert( p->pNext==0 || p->pNext->pBt>p->pBt );'), (35923, 1, u'+  assert( p->pPrev==0 || p->pPrev->pBt<p->pBt );'), (35924, 1, u'+  assert( p->pNext==0 || p->pNext->db==p->db );'), (35925, 1, u'+  assert( p->pPrev==0 || p->pPrev->db==p->db );'), (35926, 1, u'+  assert( p->sharable || (p->pNext==0 && p->pPrev==0) );'), (35929, 1, u'+  assert( !p->locked || p->wantToLock>0 );'), (35930, 1, u'+  assert( p->sharable || p->wantToLock==0 );'), (35933, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (35937, 1, u'+  assert( (p->locked==0 && p->sharable) || p->pBt->db==p->db );'), (35959, 1, u'+    assert( pLater->sharable );'), (35960, 1, u'+    assert( pLater->pNext==0 || pLater->pNext->pBt>pLater->pBt );'), (35961, 1, u'+    assert( !pLater->locked || pLater->wantToLock>0 );'), (35979, 1, u'+    assert( p->wantToLock>0 );'), (35995, 1, u'+  assert( p->sharable==0 || p->locked==0 || p->wantToLock>0 );'), (35996, 1, u'+  assert( p->sharable==0 || p->locked==0 || p->db==p->pBt->db );'), (35997, 1, u'+  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->pBt->mutex) );'), (35998, 1, u'+  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->db->mutex) );'), (36037, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (36040, 1, u'+    assert( !p || (p->locked==0 && p->sharable) || p->pBt->db==p->db );'), (36044, 1, u'+        assert( p->wantToLock==1 );'), (36063, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (36067, 1, u'+      assert( p->wantToLock>0 );'), (36120, 1, u'+      assert( pArray->aBtree[i]!=pBtree );'), (36124, 1, u'+  assert( pArray->nMutex>=0 );'), (36125, 1, u'+  assert( pArray->nMutex<ArraySize(pArray->aBtree)-1 );'), (36128, 1, u'+    assert( pArray->aBtree[i]!=pBtree );'), (36151, 1, u'+    assert( i==0 || pArray->aBtree[i-1]->pBt<p->pBt );'), (36152, 1, u'+    assert( !p->locked || p->wantToLock>0 );'), (36155, 1, u'+    assert( sqlite3_mutex_held(p->db->mutex) );'), (36172, 1, u'+    assert( i==0 || pArray->aBtree[i-1]->pBt<p->pBt );'), (36173, 1, u'+    assert( p->locked || !p->sharable );'), (36174, 1, u'+    assert( p->wantToLock>0 );'), (36177, 1, u'+    assert( sqlite3_mutex_held(p->db->mutex) );'), (36304, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (36305, 1, u'+  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (36306, 1, u'+  assert( p->db!=0 );'), (36312, 1, u'+  assert( eLock==READ_LOCK || (p==pBt->pWriter && p->inTrans==TRANS_WRITE) );'), (36313, 1, u'+  assert( eLock==READ_LOCK || pBt->inTransaction==TRANS_WRITE );'), (36359, 1, u'+      assert( pIter->eLock==READ_LOCK || pIter->eLock==WRITE_LOCK );'), (36360, 1, u'+      assert( eLock==READ_LOCK || pIter->pBtree==p || pIter->eLock==READ_LOCK);'), (36364, 1, u'+          assert( p==pBt->pWriter );'), (36389, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (36390, 1, u'+  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (36391, 1, u'+  assert( p->db!=0 );'), (36398, 1, u'+  assert( SQLITE_OK==querySharedCacheTableLock(p, iTable, eLock) );'), (36440, 1, u'+  assert( WRITE_LOCK>READ_LOCK );'), (36462, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (36463, 1, u'+  assert( p->sharable || 0==*ppIter );'), (36464, 1, u'+  assert( p->inTrans>0 );'), (36468, 1, u'+    assert( pBt->isExclusive==0 || pBt->pWriter==pLock->pBtree );'), (36469, 1, u'+    assert( pLock->pBtree->inTrans>=pLock->eLock );'), (36478, 1, u'+  assert( pBt->isPending==0 || pBt->pWriter );'), (36515, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (36526, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (36617, 1, u'+  assert( CURSOR_VALID==pCur->eState );'), (36618, 1, u'+  assert( 0==pCur->pKey );'), (36619, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (36642, 1, u'+  assert( !pCur->apPage[0]->intKey || !pCur->pKey );'), (36665, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (36666, 1, u'+  assert( pExcept==0 || pExcept->pBt==pBt );'), (36683, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (36698, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (36699, 1, u'+  assert( pCur->eState>=CURSOR_REQUIRESEEK );'), (36708, 1, u'+    assert( pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_INVALID );'), (36751, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (36775, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (36777, 1, u'+  assert( 0==PTRMAP_ISPAGE(pBt, PENDING_BYTE_PAGE(pBt)) );'), (36779, 1, u'+  assert( pBt->autoVacuum );'), (36818, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (36828, 1, u'+  assert( pEType!=0 );'), (36859, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (36892, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (36895, 1, u'+  assert( pPage->leaf==0 || pPage->leaf==1 );'), (36897, 1, u'+  assert( n==4-4*pPage->leaf );'), (36988, 1, u'+  assert( pCell!=0 );'), (36990, 1, u'+  assert( (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload );'), (37004, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37030, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37031, 1, u'+  assert( pPage->pBt!=0 );'), (37032, 1, u'+  assert( pPage->pBt->usableSize <= SQLITE_MAX_PAGE_SIZE );'), (37033, 1, u'+  assert( pPage->nOverflow==0 );'), (37034, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37040, 1, u'+  assert( nCell==get2byte(&data[hdr+3]) );'), (37057, 1, u'+    assert( cbrk+size<=usableSize && cbrk>=0 );'), (37061, 1, u'+  assert( cbrk>=cellOffset+2*nCell );'), (37068, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37096, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37097, 1, u'+  assert( pPage->pBt );'), (37098, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37099, 1, u'+  assert( nByte>=0 );  /* Minimum cell size is 4 */'), (37100, 1, u'+  assert( pPage->nFree>=nByte );'), (37101, 1, u'+  assert( pPage->nOverflow==0 );'), (37106, 1, u'+  assert( nByte <= ('), (37159, 1, u'+  assert( pPage->pBt!=0 );'), (37160, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37161, 1, u'+  assert( start>=pPage->hdrOffset+6+(pPage->leaf?0:4) );'), (37162, 1, u'+  assert( (start + size)<=pPage->pBt->usableSize );'), (37163, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37164, 1, u'+  assert( size>=0 );   /* Minimum cell size is 4 */'), (37176, 1, u'+    assert( pbegin<=pPage->pBt->usableSize-4 );'), (37185, 1, u'+  assert( pbegin>addr || pbegin==0 );'), (37195, 1, u'+    assert( pbegin>addr );'), (37196, 1, u'+    assert( pbegin<=pPage->pBt->usableSize-4 );'), (37222, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37241, 1, u'+  assert( pPage->hdrOffset==(pPage->pgno==1 ? 100 : 0) );'), (37242, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37243, 1, u'+  pPage->leaf = (u8)(flagByte>>3);  assert( PTF_LEAF == 1<<3 );'), (37274, 1, u'+  assert( pPage->pBt!=0 );'), (37275, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37276, 1, u'+  assert( pPage->pgno==sqlite3PagerPagenumber(pPage->pDbPage) );'), (37277, 1, u'+  assert( pPage == sqlite3PagerGetExtra(pPage->pDbPage) );'), (37278, 1, u'+  assert( pPage->aData == sqlite3PagerGetData(pPage->pDbPage) );'), (37295, 1, u'+    assert( pBt->pageSize>=512 && pBt->pageSize<=32768 );'), (37366, 1, u'+  assert( sqlite3PagerPagenumber(pPage->pDbPage)==pPage->pgno );'), (37367, 1, u'+  assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (37368, 1, u'+  assert( sqlite3PagerGetData(pPage->pDbPage) == data );'), (37369, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (37370, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (37382, 1, u'+  assert( pBt->pageSize>=512 && pBt->pageSize<=32768 );'), (37423, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (37437, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (37452, 1, u'+  assert( pBt->pPage1 );'), (37454, 1, u'+  assert( rc==SQLITE_OK || nPage==-1 );'), (37471, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (37510, 1, u'+    assert( pPage->nOverflow==0 || sqlite3PagerPageRefcount(pPage->pDbPage)>1 );'), (37511, 1, u'+    assert( pPage->aData );'), (37512, 1, u'+    assert( pPage->pBt );'), (37513, 1, u'+    assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (37514, 1, u'+    assert( sqlite3PagerGetData(pPage->pDbPage)==pPage->aData );'), (37515, 1, u'+    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37531, 1, u'+  assert( sqlite3PagerPageRefcount(pData)>0 );'), (37533, 1, u'+    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (37552, 1, u'+  assert( pBt->db );'), (37553, 1, u'+  assert( sqlite3_mutex_held(pBt->db->mutex) );'), (37594, 1, u'+  assert( db!=0 );'), (37595, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (37627, 1, u'+        assert( pBt->nRef>0 );'), (37656, 1, u'+    assert( sizeof(i64)==8 || sizeof(i64)==4 );'), (37657, 1, u'+    assert( sizeof(u64)==8 || sizeof(u64)==4 );'), (37658, 1, u'+    assert( sizeof(u32)==4 );'), (37659, 1, u'+    assert( sizeof(u16)==2 );'), (37660, 1, u'+    assert( sizeof(Pgno)==4 );'), (37710, 1, u'+    assert( (pBt->pageSize & 7)==0 );  /* 8-byte alignment of pageSize */'), (37779, 1, u'+    assert( sqlite3_mutex_held(mutexOpen) );'), (37797, 1, u'+  assert( sqlite3_mutex_notheld(pBt->mutex) );'), (37851, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (37873, 1, u'+  assert( p->wantToLock==0 && p->locked==0 );'), (37880, 1, u'+    assert( !pBt->pCursor );'), (37891, 1, u'+  assert( p->wantToLock==0 );'), (37892, 1, u'+  assert( p->locked==0 );'), (37918, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (37936, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (37951, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (37953, 1, u'+  assert( pBt && pBt->pPager );'), (37983, 1, u'+  assert( nReserve>=-1 && nReserve<=255 );'), (37992, 1, u'+  assert( nReserve>=0 && nReserve<=255 );'), (37995, 1, u'+    assert( (pageSize & 7)==0 );'), (37996, 1, u'+    assert( !pBt->pPage1 && !pBt->pCursor );'), (38102, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (38103, 1, u'+  assert( pBt->pPage1==0 );'), (38142, 1, u'+    assert( (pageSize & 7)==0 );'), (38186, 1, u'+  assert( pBt->maxLeaf + 23 <= MX_CELL_SIZE(pBt) );'), (38203, 1, u'+  assert( sqlite3BtreeHoldsMutex(pRef) );'), (38230, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (38233, 1, u'+      assert( pBt->pPage1->aData );'), (38258, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (38264, 1, u'+  assert( pP1!=0 );'), (38269, 1, u'+  assert( sizeof(zMagicHeader)==16 );'), (38273, 1, u'+  assert( pBt->usableSize<=pBt->pageSize && pBt->usableSize+255>=pBt->pageSize);'), (38282, 1, u'+  assert( pBt->autoVacuum==1 || pBt->autoVacuum==0 );'), (38283, 1, u'+  assert( pBt->incrVacuum==1 || pBt->incrVacuum==0 );'), (38407, 1, u'+      assert( !pBt->pWriter );'), (38444, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (38492, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (38493, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (38558, 1, u'+  assert( eType==PTRMAP_OVERFLOW2 || eType==PTRMAP_OVERFLOW1 ||'), (38560, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (38561, 1, u'+  assert( pDbPage->pBt==pBt );'), (38639, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (38640, 1, u'+  assert( iLastPg>nFin );'), (38673, 1, u'+        assert( iFreePg==iLastPg );'), (38701, 1, u'+      assert( iFreePg<iLastPg );'), (38749, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE && p->inTrans==TRANS_WRITE );'), (38774, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (38776, 1, u'+  assert(pBt->autoVacuum);'), (38818, 1, u'+  assert( nRef==sqlite3PagerRefcount(pPager) );'), (38895, 1, u'+    assert( pBt->inTransaction==TRANS_WRITE );'), (38896, 1, u'+    assert( pBt->nTransaction>0 );'), (39031, 1, u'+    assert( TRANS_WRITE==pBt->inTransaction );'), (39043, 1, u'+    assert( countWriteCursors(pBt)==0 );'), (39049, 1, u'+    assert( pBt->nTransaction>0 );'), (39087, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (39088, 1, u'+  assert( pBt->readOnly==0 );'), (39089, 1, u'+  assert( iStatement>0 );'), (39090, 1, u'+  assert( iStatement>p->db->nSavepoint );'), (39094, 1, u'+    assert( pBt->inTransaction==TRANS_WRITE );'), (39122, 1, u'+    assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (39123, 1, u'+    assert( iSavepoint>=0 || (iSavepoint==-1 && op==SAVEPOINT_ROLLBACK) );'), (39175, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (39176, 1, u'+  assert( wrFlag==0 || wrFlag==1 );'), (39178, 1, u'+    assert( !pBt->readOnly );'), (39184, 1, u'+      assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (39275, 1, u'+  assert( pCur->cachedRowid==iRowid );'), (39324, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39331, 1, u'+  assert( pTempCur->pKey==0 );'), (39340, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39365, 1, u'+  static void assertCellInfo(BtCursor *pCur){'), (39370, 1, u'+    assert( memcmp(&info, &pCur->info, sizeof(info))==0 );'), (39373, 1, u'+  #define assertCellInfo(x)'), (39383, 1, u'+      assertCellInfo(pCur);'), (39394, 1, u'+    assertCellInfo(pCur);                                                      \\'), (39409, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39412, 1, u'+    assert( pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID );'), (39433, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39436, 1, u'+    assert( pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID );'), (39477, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (39478, 1, u'+  assert(pPgnoNext);'), (39508, 1, u'+    assert(rc==SQLITE_OK || pPage==0);'), (39600, 1, u'+  assert( pPage );'), (39601, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (39602, 1, u'+  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (39603, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39671, 1, u'+        assert(!pCur->aOverflow[iIdx] || pCur->aOverflow[iIdx]==nextPage);'), (39731, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39734, 1, u'+    assert( pCur->eState==CURSOR_VALID );'), (39735, 1, u'+    assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (39739, 1, u'+    assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (39763, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39766, 1, u'+    assert( pCur->eState==CURSOR_VALID );'), (39767, 1, u'+    assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (39768, 1, u'+    assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (39803, 1, u'+  assert( pCur!=0 && pCur->iPage>=0 && pCur->apPage[pCur->iPage]);'), (39804, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (39805, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39807, 1, u'+  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (39845, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39852, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39870, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39871, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (39872, 1, u'+  assert( pCur->iPage<BTCURSOR_MAX_DEPTH );'), (39898, 1, u'+static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){'), (39899, 1, u'+  assert( iIdx<=pParent->nCell );'), (39901, 1, u'+    assert( get4byte(&pParent->aData[pParent->hdrOffset+8])==iChild );'), (39903, 1, u'+    assert( get4byte(findCell(pParent, iIdx))==iChild );'), (39907, 1, u'+#  define assertParentIndex(x,y,z)'), (39919, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39920, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (39921, 1, u'+  assert( pCur->iPage>0 );'), (39922, 1, u'+  assert( pCur->apPage[pCur->iPage] );'), (39923, 1, u'+  assertParentIndex('), (39943, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (39944, 1, u'+  assert( CURSOR_INVALID < CURSOR_REQUIRESEEK );'), (39945, 1, u'+  assert( CURSOR_VALID   < CURSOR_REQUIRESEEK );'), (39946, 1, u'+  assert( CURSOR_FAULT   > CURSOR_REQUIRESEEK );'), (39969, 1, u'+  assert( pRoot->pgno==pCur->pgnoRoot );'), (39978, 1, u'+    assert( pRoot->pgno==1 );'), (39980, 1, u'+    assert( subpage>0 );'), (40001, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (40002, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (40004, 1, u'+    assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (40026, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (40027, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (40048, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (40049, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40053, 1, u'+      assert( pCur->apPage[pCur->iPage]->nCell==0 );'), (40057, 1, u'+      assert( pCur->apPage[pCur->iPage]->nCell>0 );'), (40072, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (40073, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40077, 1, u'+      assert( pCur->apPage[pCur->iPage]->nCell==0 );'), (40080, 1, u'+      assert( pCur->eState==CURSOR_VALID );'), (40127, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (40128, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40149, 1, u'+  assert( pCur->apPage[pCur->iPage] );'), (40150, 1, u'+  assert( pCur->apPage[pCur->iPage]->isInit );'), (40153, 1, u'+    assert( pCur->apPage[pCur->iPage]->nCell==0 );'), (40156, 1, u'+  assert( pCur->apPage[0]->intKey || pIdxKey );'), (40192, 1, u'+          assert( nCellKey>intKey );'), (40236, 1, u'+    assert( lwr==upr+1 );'), (40237, 1, u'+    assert( pPage->isInit );'), (40246, 1, u'+      assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (40279, 1, u'+    assert( nKey==(i64)(int)nKey );'), (40313, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (40328, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (40333, 1, u'+  assert( pRes!=0 );'), (40347, 1, u'+  assert( pPage->isInit );'), (40348, 1, u'+  assert( idx<=pPage->nCell );'), (40396, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (40414, 1, u'+  assert( pPage->isInit );'), (40481, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (40496, 1, u'+      assert( nearby>0 );'), (40497, 1, u'+      assert( pBt->autoVacuum );'), (40536, 1, u'+        assert( pPrevTrunk==0 );'), (40555, 1, u'+        assert( *pPgno==iTrunk );'), (40589, 1, u'+            assert( sqlite3PagerIswriteable(pPage1->pDbPage) );'), (40646, 1, u'+          assert( sqlite3PagerIswriteable(pTrunk->pDbPage) );'), (40679, 1, u'+      assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (40691, 1, u'+    assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (40701, 1, u'+  assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (40736, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (40737, 1, u'+  assert( iPage>1 );'), (40738, 1, u'+  assert( !pMemPage || pMemPage->pgno==iPage );'), (40864, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (40870, 1, u'+  assert( pBt->usableSize > 4 );'), (40873, 1, u'+  assert( ovflPgno==0 || nOvfl>0 );'), (40930, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (40934, 1, u'+  assert( pCell<pPage->aData || pCell>=&pPage->aData[pBt->pageSize]'), (40949, 1, u'+  assert( info.nHeader==nHeader );'), (40950, 1, u'+  assert( info.nKey==nKey );'), (40951, 1, u'+  assert( info.nData==(u32)(nData+nZero) );'), (41011, 1, u'+      assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (41015, 1, u'+      assert( pPrior<pPage->aData || pPrior>=&pPage->aData[pBt->pageSize]'), (41031, 1, u'+    assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (41035, 1, u'+    assert( pPayload<pPage->aData || pPayload>=&pPage->aData[pBt->pageSize]'), (41040, 1, u'+      assert( pSrc );'), (41074, 1, u'+  assert( idx>=0 && idx<pPage->nCell );'), (41075, 1, u'+  assert( sz==cellSize(pPage, idx) );'), (41076, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (41077, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41134, 1, u'+  assert( i>=0 && i<=pPage->nCell+pPage->nOverflow );'), (41135, 1, u'+  assert( pPage->nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=5460 );'), (41136, 1, u'+  assert( pPage->nOverflow<=ArraySize(pPage->aOvfl) );'), (41137, 1, u'+  assert( sz==cellSizePtr(pPage, pCell) );'), (41138, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41145, 1, u'+    assert( j<(int)(sizeof(pPage->aOvfl)/sizeof(pPage->aOvfl[0])) );'), (41154, 1, u'+    assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (41167, 1, u'+      assert( end + sz <= top );'), (41170, 1, u'+    assert( idx>0 );'), (41171, 1, u'+    assert( end <= get2byte(&data[hdr+5]) );'), (41191, 1, u'+      assert( (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload );'), (41221, 1, u'+  assert( pPage->nOverflow==0 );'), (41222, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41223, 1, u'+  assert( nCell>=0 && nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=5460 );'), (41228, 1, u'+  assert( totalSize+2*nCell<=pPage->nFree );'), (41229, 1, u'+  assert( pPage->nCell==0 );'), (41230, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (41237, 1, u'+    assert( cellbody>0 );'), (41238, 1, u'+    assert( pPage->nFree >= 2*nCell );'), (41246, 1, u'+    assert( cellbody==pPage->pBt->usableSize );'), (41301, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41310, 1, u'+    assert( sqlite3PagerIswriteable(pNew->pDbPage) );'), (41329, 1, u'+    assert( pPage->nCell>0 );'), (41333, 1, u'+    assert( parentSize<64 );'), (41334, 1, u'+    assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (41369, 1, u'+  assert( pPage->nOverflow==0 );'), (41449, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (41455, 1, u'+  assert( pCur->iPage>0 );'), (41456, 1, u'+  assert( pPage->isInit );'), (41457, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) || pPage->nOverflow==1 );'), (41460, 1, u'+  assert( pParent );'), (41483, 1, u'+    assert( pPage->intKey );'), (41502, 1, u'+  assertParentIndex(pParent, idx, pPage->pgno);'), (41523, 1, u'+      assert( !pParent->leaf );'), (41534, 1, u'+    assert( i==nOld );'), (41559, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(aCopy[0]) );'), (41562, 1, u'+    assert( ((aCopy[i] - (u8*)0) & 7)==0 ); /* 8-byte alignment required */'), (41565, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(aSpace1) );'), (41611, 1, u'+      assert( nCell<nMaxCells );'), (41616, 1, u'+        aFrom[nCell] = (u8)i;   assert( i>=0 && i<6 );'), (41637, 1, u'+        assert( nCell<nMaxCells );'), (41641, 1, u'+        assert( sz<=pBt->pageSize/4 );'), (41642, 1, u'+        assert( iSpace1<=pBt->pageSize );'), (41649, 1, u'+        assert( leafCorrection==0 || leafCorrection==4 );'), (41651, 1, u'+        assert( get4byte(pTemp)==pgnoOld[i] );'), (41653, 1, u'+          assert( leafCorrection==0 );'), (41658, 1, u'+          assert( leafCorrection==4 );'), (41687, 1, u'+    assert( i<nMaxCells );'), (41719, 1, u'+    assert( d<nMaxCells );'), (41720, 1, u'+    assert( r<nMaxCells );'), (41736, 1, u'+  assert( cntNew[0]>0 || (pParent->pgno==1 && pParent->nCell==0) );'), (41741, 1, u'+  assert( pPage->pgno>1 );'), (41753, 1, u'+      assert( i>0 );'), (41823, 1, u'+    assert( j<nMaxCells );'), (41824, 1, u'+    assert( pNew->pgno==pgnoNew[i] );'), (41827, 1, u'+    assert( pNew->nCell>0 || (nNew==1 && cntNew[0]==0) );'), (41828, 1, u'+    assert( pNew->nOverflow==0 );'), (41837, 1, u'+        assert( k<nMaxCells );'), (41860, 1, u'+      assert( j<nMaxCells );'), (41903, 1, u'+          assert(leafCorrection==4);'), (41908, 1, u'+      assert( sz<=pBt->pageSize/4 );'), (41909, 1, u'+      assert( iSpace2<=pBt->pageSize );'), (41912, 1, u'+      assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (41937, 1, u'+  assert( j==nCell );'), (41938, 1, u'+  assert( nOld>0 );'), (41939, 1, u'+  assert( nNew>0 );'), (41950, 1, u'+  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (41965, 1, u'+  assert( pParent->isInit );'), (42007, 1, u'+  assert( pCur->iPage==0 );'), (42010, 1, u'+  assert( pPage->nCell==0 );'), (42011, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (42035, 1, u'+    assert( pgnoChild>0 );'), (42036, 1, u'+    assert( pgnoChild<=pagerPagecount(pPage->pBt) );'), (42042, 1, u'+      assert( pChild->nOverflow==0 );'), (42054, 1, u'+        assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42068, 1, u'+      assert( rc==SQLITE_OK );'), (42073, 1, u'+    assert( pPage->nOverflow==0 );'), (42108, 1, u'+  assert( pCur->iPage==0 );'), (42109, 1, u'+  assert( pCur->apPage[0]->nOverflow>0 );'), (42114, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (42115, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42118, 1, u'+  assert( sqlite3PagerIswriteable(pChild->pDbPage) );'), (42127, 1, u'+  assert( pChild->isInit==0 );'), (42136, 1, u'+    assert( pChild->nCell==pPage->nCell );'), (42137, 1, u'+    assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42179, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (42184, 1, u'+      assert( pCur->apPage[0]==pPage );'), (42185, 1, u'+      assert( pPage->nOverflow==0 || rc!=SQLITE_OK );'), (42189, 1, u'+      assert( pCur->apPage[0]==pPage );'), (42190, 1, u'+      assert( pPage->nOverflow==0 || rc!=SQLITE_OK );'), (42242, 1, u'+  assert( sqlite3BtreeHoldsMutex(pBtree) );'), (42261, 1, u'+      assert(dbOther);'), (42297, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (42298, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (42299, 1, u'+  assert( !pBt->readOnly );'), (42300, 1, u'+  assert( pCur->wrFlag );'), (42304, 1, u'+    assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (42321, 1, u'+  assert( pPage->intKey || nKey>=0 );'), (42322, 1, u'+  assert( pPage->leaf || !pPage->intKey );'), (42326, 1, u'+  assert( pPage->isInit );'), (42332, 1, u'+  assert( szNew==cellSizePtr(pPage, newCell) );'), (42333, 1, u'+  assert( szNew<=MX_CELL_SIZE(pBt) );'), (42337, 1, u'+    assert( idx<pPage->nCell );'), (42354, 1, u'+    assert( pPage->leaf );'), (42359, 1, u'+    assert( pPage->leaf );'), (42390, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (42391, 1, u'+  assert( pPage->isInit );'), (42392, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (42393, 1, u'+  assert( !pBt->readOnly );'), (42400, 1, u'+  assert( pCur->wrFlag );'), (42404, 1, u'+    assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (42449, 1, u'+    assert( !pPage->intKey );'), (42453, 1, u'+      assert( leafCur.aiIdx[leafCur.iPage]==0 );'), (42465, 1, u'+      assert( MX_CELL_SIZE(pBt)>=szNext+4 );'), (42515, 1, u'+        assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (42551, 1, u'+        assert( rc!=SQLITE_OK || pLeafPage->pgno==leafPgno );'), (42552, 1, u'+        assert( rc!=SQLITE_OK || leafCur.aiIdx[leafCur.iPage]==0 );'), (42561, 1, u'+        assert( leafCursorInvalid || !leafCur.pagesShuffled'), (42597, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (42598, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (42599, 1, u'+  assert( !pBt->readOnly );'), (42635, 1, u'+    assert( pgnoRoot>=3 );'), (42668, 1, u'+      assert( eType!=PTRMAP_ROOTPAGE );'), (42669, 1, u'+      assert( eType!=PTRMAP_FREEPAGE );'), (42707, 1, u'+  assert( sqlite3PagerIswriteable(pRoot->pDbPage) );'), (42736, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (42756, 1, u'+    assert( pPage->intKey );'), (42787, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (42824, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (42825, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (42910, 1, u'+      assert( maxRootPgno!=PENDING_BYTE_PAGE(pBt) );'), (42964, 1, u'+  assert( idx>=0 && idx<=15 );'), (43019, 1, u'+  assert( idx>=1 && idx<=15 );'), (43021, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (43022, 1, u'+  assert( pBt->pPage1!=0 );'), (43029, 1, u'+      assert( pBt->autoVacuum || iMeta==0 );'), (43030, 1, u'+      assert( iMeta==0 || iMeta==1 );'), (43050, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (43051, 1, u'+  assert( pPage!=0 );'), (43052, 1, u'+  assert( pPage->pBt==pCur->pBt );'), (43337, 1, u'+    assert( rc==SQLITE_CORRUPT );  /* The only possible error from InitPage */'), (43360, 1, u'+    assert( sz==info.nPayload );'), (43599, 1, u'+  assert( p->pBt->pPager!=0 );'), (43612, 1, u'+  assert( p->pBt->pPager!=0 );'), (43620, 1, u'+  assert( p==0 || sqlite3_mutex_held(p->db->mutex) );'), (43628, 1, u'+  assert( p );'), (43629, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (43634, 1, u'+  assert( p );'), (43635, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (43677, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (43680, 1, u'+  assert( rc==SQLITE_OK || rc==SQLITE_LOCKED_SHAREDCACHE );'), (43696, 1, u'+    assert( READ_LOCK+1==WRITE_LOCK );'), (43697, 1, u'+    assert( isWriteLock==0 || isWriteLock==1 );'), (43720, 1, u'+  assert( cursorHoldsMutex(pCsr) );'), (43721, 1, u'+  assert( sqlite3_mutex_held(pCsr->pBtree->db->mutex) );'), (43722, 1, u'+  assert(pCsr->isIncrblobHandle);'), (43725, 1, u'+  assert( pCsr->eState!=CURSOR_REQUIRESEEK );'), (43738, 1, u'+  assert( !pCsr->pBt->readOnly'), (43743, 1, u'+    assert( rc==SQLITE_LOCKED_SHAREDCACHE );'), (43764, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (43765, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (43766, 1, u'+  assert(!pCur->isIncrblobHandle);'), (43767, 1, u'+  assert(!pCur->aOverflow);'), (43872, 1, u'+    assert( sParse.zErrMsg==0 );'), (43985, 1, u'+  assert( p->bDestLocked );'), (43986, 1, u'+  assert( !isFatalError(p->rc) );'), (43987, 1, u'+  assert( iSrcPg!=PENDING_BYTE_PAGE(p->pSrc->pBt) );'), (43988, 1, u'+  assert( zSrcData );'), (44168, 1, u'+        assert( pFile );'), (44169, 1, u'+        assert( (i64)nDestTruncate*(i64)nDestPagesize >= iSize || ('), (44215, 1, u'+      assert( rc2==SQLITE_OK );'), (44304, 1, u'+    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (44311, 1, u'+      assert( rc!=SQLITE_BUSY && rc!=SQLITE_LOCKED );'), (44333, 1, u'+    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (44372, 1, u'+  assert( b.rc!=SQLITE_OK );'), (44427, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (44428, 1, u'+  assert( desiredEnc==SQLITE_UTF8 || desiredEnc==SQLITE_UTF16LE'), (44433, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44442, 1, u'+  assert(rc==SQLITE_OK    || rc==SQLITE_NOMEM);'), (44443, 1, u'+  assert(rc==SQLITE_OK    || pMem->enc!=desiredEnc);'), (44444, 1, u'+  assert(rc==SQLITE_NOMEM || pMem->enc==desiredEnc);'), (44463, 1, u'+  assert( 1 >='), (44469, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (44509, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44510, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (44533, 1, u'+    assert( pMem->flags&MEM_Blob );'), (44534, 1, u'+    assert( (pMem->flags&MEM_RowSet)==0 );'), (44535, 1, u'+    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44559, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44590, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44591, 1, u'+  assert( !(fg&MEM_Zero) );'), (44592, 1, u'+  assert( !(fg&(MEM_Str|MEM_Blob)) );'), (44593, 1, u'+  assert( fg&(MEM_Int|MEM_Real) );'), (44594, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (44595, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44611, 1, u'+    assert( fg & MEM_Real );'), (44633, 1, u'+    assert( (pMem->flags & MEM_Null)!=0 || pFunc==pMem->u.pDef );'), (44634, 1, u'+    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44641, 1, u'+    assert( 0==(pMem->flags&MEM_Dyn) && !pMem->xDel );'), (44655, 1, u'+  assert( p->db==0 || sqlite3_mutex_held(p->db->mutex) );'), (44658, 1, u'+    assert( (p->flags & MEM_Agg)==0 );'), (44661, 1, u'+    assert( (p->flags&MEM_RowSet)==0 );'), (44731, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44732, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44745, 1, u'+    assert( pMem->z );'), (44760, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44761, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44775, 1, u'+    assert( pMem->z );'), (44789, 1, u'+  assert( pMem->flags & MEM_Real );'), (44790, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (44791, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44792, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44804, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44805, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (44806, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44818, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44819, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (44833, 1, u'+  assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))==0 );'), (44834, 1, u'+  assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );'), (44835, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (44905, 1, u'+  assert( db!=0 );'), (44915, 1, u'+    assert( pMem->zMalloc );'), (44918, 1, u'+    assert( pMem->u.pRowSet!=0 );'), (44928, 1, u'+  assert( p->db!=0 );'), (44951, 1, u'+  assert( (pFrom->flags & MEM_RowSet)==0 );'), (44957, 1, u'+    assert( srcType==MEM_Ephem || srcType==MEM_Static );'), (44969, 1, u'+  assert( (pFrom->flags & MEM_RowSet)==0 );'), (44991, 1, u'+  assert( pFrom->db==0 || sqlite3_mutex_held(pFrom->db->mutex) );'), (44992, 1, u'+  assert( pTo->db==0 || sqlite3_mutex_held(pTo->db->mutex) );'), (44993, 1, u'+  assert( pFrom->db==0 || pTo->db==0 || pFrom->db==pTo->db );'), (45022, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (45023, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (45038, 1, u'+    assert( enc!=0 );'), (45111, 1, u'+  assert( (combined_flags & MEM_RowSet)==0 );'), (45147, 1, u'+      assert( f1&MEM_Int );'), (45148, 1, u'+      assert( f2&MEM_Int );'), (45166, 1, u'+    assert( pMem1->enc==pMem2->enc );'), (45167, 1, u'+    assert( pMem1->enc==SQLITE_UTF8 ||'), (45174, 1, u'+    assert( !pColl || pColl->xCmp );'), (45238, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (45239, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (45245, 1, u'+  assert( zData!=0 );'), (45284, 1, u'+  assert( pVal->db==0 || sqlite3_mutex_held(pVal->db->mutex) );'), (45285, 1, u'+  assert( (enc&3)==(enc&~SQLITE_UTF16_ALIGNED) );'), (45286, 1, u'+  assert( (pVal->flags & MEM_RowSet)==0 );'), (45291, 1, u'+  assert( (MEM_Blob>>3) == MEM_Str );'), (45297, 1, u'+      assert( (pVal->flags & (MEM_Ephem|MEM_Static))!=0 );'), (45304, 1, u'+    assert( (pVal->flags&MEM_Blob)==0 );'), (45306, 1, u'+    assert( 0==(1&SQLITE_PTR_TO_INT(pVal->z)) );'), (45308, 1, u'+  assert(pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) || pVal->db==0'), (45378, 1, u'+    assert( pExpr->token.n>=3 );'), (45379, 1, u"+    assert( pExpr->token.z[0]=='x' || pExpr->token.z[0]=='X' );"), (45380, 1, u"+    assert( pExpr->token.z[1]=='\\'' );"), (45381, 1, u"+    assert( pExpr->token.z[pExpr->token.n-1]=='\\'' );"), (45499, 1, u'+  assert( p->zSql==0 );'), (45583, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (45584, 1, u'+  assert( op>0 && op<0xff );'), (45655, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (45675, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (45676, 1, u'+  assert( j>=0 && j<p->nLabel );'), (45741, 1, u'+      assert( p->nOp - i >= 3 );'), (45742, 1, u'+      assert( pOp[-1].opcode==OP_Integer );'), (45749, 1, u'+      assert( -1-pOp->p2<p->nLabel );'), (45777, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (45787, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (45828, 1, u'+  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45839, 1, u'+  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45849, 1, u'+  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45860, 1, u'+  assert( p==0 || p->magic==VDBE_MAGIC_INIT );'), (45862, 1, u'+    assert( p->nOp>0 );'), (45966, 1, u'+  assert( p!=0 );'), (45968, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (45975, 1, u'+  assert( addr<p->nOp );'), (46034, 1, u'+  assert( p->nOp>0 || p->aOp==0 );'), (46035, 1, u'+  assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );'), (46047, 1, u'+  assert( p->nOp>0 || p->aOp==0 );'), (46048, 1, u'+  assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );'), (46063, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (46064, 1, u'+  assert( (addr>=0 && addr<p->nOp) || p->db->mallocFailed );'), (46076, 1, u'+  assert( nTemp>=20 );'), (46105, 1, u'+      assert( i<nTemp );'), (46132, 1, u'+      assert( (pMem->flags & MEM_Null)==0 );'), (46161, 1, u'+  assert( zP4!=0 );'), (46172, 1, u'+  assert( i>=0 && i<p->db->nDb );'), (46173, 1, u'+  assert( i<(int)sizeof(p->btreeMask)*8 );'), (46213, 1, u'+      assert( (&p[1])==pEnd || p[0].db==p[1].db );'), (46244, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (46251, 1, u'+      assert( !pMem->xDel );'), (46281, 1, u'+  assert( p->explain );'), (46283, 1, u'+  assert( db->magic==SQLITE_MAGIC_BUSY );'), (46284, 1, u'+  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY || p->rc==SQLITE_NOMEM );'), (46320, 1, u'+      assert( pMem->z!=0 );'), (46345, 1, u'+      assert( p->db->mallocFailed );'), (46353, 1, u'+      assert( pMem->z!=0 );'), (46362, 1, u'+        assert( p->db->mallocFailed );'), (46465, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(*ppFrom) );'), (46504, 1, u'+  assert( p!=0 );'), (46505, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (46509, 1, u'+  assert( p->nOp>0 );'), (46540, 1, u'+    assert( EIGHT_BYTE_ALIGNMENT(zCsr) );'), (46579, 1, u'+    assert( p->aMem[n].db==db );'), (46723, 1, u'+  assert( idx<p->nResColumn );'), (46724, 1, u'+  assert( var<COLNAME_N );'), (46726, 1, u'+    assert( !zName || xDel!=SQLITE_DYNAMIC );'), (46729, 1, u'+  assert( p->aColName!=0 );'), (46732, 1, u'+  assert( rc!=0 || !zName || (pColName->flags&MEM_Term)!=0 );'), (46775, 1, u'+    assert( (db->flags & SQLITE_CommitBusy)==0 );'), (46977, 1, u'+  assert( cnt==db->activeVdbeCnt );'), (46978, 1, u'+  assert( nWrite==db->writeVdbeCnt );'), (47027, 1, u'+    assert( eOp==SAVEPOINT_ROLLBACK || eOp==SAVEPOINT_RELEASE);'), (47028, 1, u'+    assert( db->nStatement>0 );'), (47029, 1, u'+    assert( p->iStatement==(db->nStatement+db->nSavepoint) );'), (47243, 1, u'+    assert( db->activeVdbeCnt>=db->writeVdbeCnt );'), (47259, 1, u'+  assert( db->activeVdbeCnt>0 || db->autoCommit==0 || db->nStatement==0 );'), (47364, 1, u'+    assert( (rc & p->db->errMask)==rc );'), (47403, 1, u'+    assert( db->pVdbe==p );'), (47440, 1, u'+    assert( p->isTable );'), (47537, 1, u'+  assert( pMem->db->mallocFailed || flags&(MEM_Str|MEM_Blob) );'), (47542, 1, u'+  assert( n>=0 );'), (47638, 1, u'+      assert( sizeof(v)==sizeof(pMem->r) );'), (47645, 1, u'+    assert( len<=nBuf );'), (47655, 1, u'+    assert( pMem->n + ((pMem->flags & MEM_Zero)?pMem->u.nZero:0)'), (47657, 1, u'+    assert( pMem->n<=nBuf );'), (47732, 1, u'+      assert( sizeof(r1)==sizeof(t2) && memcmp(&r1, &t2, sizeof(r1))==0 );'), (47742, 1, u'+        assert( sizeof(x)==8 && sizeof(pMem->r)==8 );'), (47822, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (47839, 1, u'+  assert( u<=pKeyInfo->nField + 1 );'), (48073, 1, u'+  assert( pUnpacked->flags & UNPACKED_IGNORE_ROWID );'), (48084, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (48176, 1, u'+    assert(p->pLruNext || p==sqlite3LruStatements.pLast);'), (48177, 1, u'+    assert(!p->pLruNext || p->pLruNext->pLruPrev==p);'), (48178, 1, u'+    assert(p->pLruPrev || p==sqlite3LruStatements.pFirst);'), (48179, 1, u'+    assert(!p->pLruPrev || p->pLruPrev->pLruNext==p);'), (48198, 1, u'+  assert( stmtLruCheck() );'), (48201, 1, u'+    assert( !sqlite3LruStatements.pLast );'), (48205, 1, u'+    assert( !sqlite3LruStatements.pLast->pLruNext );'), (48211, 1, u'+  assert( stmtLruCheck() );'), (48223, 1, u'+    assert( stmtLruCheck() );'), (48236, 1, u'+    assert( stmtLruCheck() );'), (48358, 1, u'+    assert( (rc & (v->db->errMask))==rc );'), (48443, 1, u'+  assert( n>=0 );'), (48444, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48448, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48452, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48458, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48464, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48468, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48472, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48481, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48491, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48500, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48509, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48514, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48518, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48527, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48535, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48554, 1, u'+  assert(p);'), (48637, 1, u'+  assert( rc==SQLITE_ROW  || rc==SQLITE_DONE   || rc==SQLITE_ERROR'), (48640, 1, u'+  assert( p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE );'), (48712, 1, u'+  assert( p && p->pFunc );'), (48721, 1, u'+  assert( p && p->pFunc );'), (48754, 1, u'+  assert( p && p->pFunc && p->pFunc->xStep );'), (48755, 1, u'+  assert( sqlite3_mutex_held(p->s.db->mutex) );'), (48781, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48804, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (48844, 1, u'+  assert( p && p->pMem && p->pFunc && p->pFunc->xStep );'), (49029, 1, u'+  assert( db!=0 );'), (49034, 1, u'+    assert( db->mallocFailed==0 );'), (49324, 1, u'+        assert( pOp->p1>0 && pOp->p1<=p->nVar );'), (49378, 1, u'+  assert( pTo->db==pFrom->db );'), (49379, 1, u'+  assert( pTo->nVar==pFrom->nVar );'), (49627, 1, u'+  assert( opcode>0 && opcode<(int)sizeof(opcodeProperty) );'), (49669, 1, u'+  assert( iCur<p->nCursor );'), (49747, 1, u'+    assert( affinity==SQLITE_AFF_INTEGER || affinity==SQLITE_AFF_REAL'), (49799, 1, u'+      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (49802, 1, u'+      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (49805, 1, u'+      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (49836, 1, u'+      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (49839, 1, u'+      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (49842, 1, u'+      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (50046, 1, u'+  assert( n==(db->nSavepoint + db->isTransactionSavepoint) );'), (50108, 1, u'+  assert( p->magic==VDBE_MAGIC_RUN );  /* sqlite3_step() verifies this */'), (50109, 1, u'+  assert( db->magic==SQLITE_MAGIC_BUSY );'), (50116, 1, u'+  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY );'), (50118, 1, u'+  assert( p->explain==0 );'), (50141, 1, u'+    assert( pc>=0 && pc<p->nOp );'), (50211, 1, u'+      assert( pOp->p2>0 );'), (50212, 1, u'+      assert( pOp->p2<=p->nMem );'), (50230, 1, u'+      assert( pOp->p1>0 );'), (50231, 1, u'+      assert( pOp->p1<=p->nMem );'), (50235, 1, u'+        assert( pOp->p2>0 );'), (50236, 1, u'+        assert( pOp->p2<=p->nMem );'), (50240, 1, u'+          assert( pOp->p3>0 );'), (50241, 1, u'+          assert( pOp->p3<=p->nMem );'), (50245, 1, u'+        assert( pOp->p3>0 );'), (50246, 1, u'+        assert( pOp->p3<=p->nMem );'), (50251, 1, u'+      assert( pOp->p2>0 );'), (50252, 1, u'+      assert( pOp->p2<=p->nMem );'), (50256, 1, u'+      assert( pOp->p3>0 );'), (50257, 1, u'+      assert( pOp->p3<=p->nMem );'), (50318, 1, u'+  assert( pOp->p1>0 );'), (50319, 1, u'+  assert( pOp->p1<=p->nMem );'), (50321, 1, u'+  assert( (pIn1->flags & MEM_Dyn)==0 );'), (50334, 1, u'+  assert( pIn1->flags & MEM_Int );'), (50345, 1, u'+  assert( (pIn1->flags & MEM_Dyn)==0 );'), (50392, 1, u'+  assert( rc==SQLITE_BUSY || rc==SQLITE_OK );'), (50417, 1, u'+  assert( pOp->p4.pI64!=0 );'), (50430, 1, u'+  assert( !sqlite3IsNaN(*pOp->p4.pReal) );'), (50441, 1, u'+  assert( pOp->p4.z!=0 );'), (50477, 1, u'+  assert( pOp->p4.z!=0 );'), (50505, 1, u'+  assert( pOp->p1 <= SQLITE_MAX_LENGTH );'), (50525, 1, u'+  assert( j>=0 && j+n<=p->nVar );'), (50526, 1, u'+  assert( k>=1 && k+n-1<=p->nMem );'), (50527, 1, u'+  assert( pOp->p4.z==0 || pOp->p3==1 );'), (50555, 1, u'+  assert( n>0 && p1>0 && p2>0 );'), (50556, 1, u'+  assert( p1+n<=p2 || p2+n<=p1 );'), (50561, 1, u'+    assert( pOut<=&p->aMem[p->nMem] );'), (50562, 1, u'+    assert( pIn1<=&p->aMem[p->nMem] );'), (50582, 1, u'+  assert( pOp->p2>0 );'), (50583, 1, u'+  assert( pOp->p2<=p->nMem );'), (50585, 1, u'+  assert( pOut!=pIn1 );'), (50606, 1, u'+  assert( pOp->p2>0 );'), (50607, 1, u'+  assert( pOp->p2<=p->nMem );'), (50609, 1, u'+  assert( pOut!=pIn1 );'), (50626, 1, u'+  assert( p->nResColumn==pOp->p2 );'), (50627, 1, u'+  assert( pOp->p1>0 );'), (50628, 1, u'+  assert( pOp->p1+pOp->p2<=p->nMem+1 );'), (50642, 1, u'+  assert( p->iStatement==0 || db->flags&SQLITE_CountRows );'), (50684, 1, u'+  assert( pIn1!=pOut );'), (50838, 1, u'+  assert( pOp->p4type==P4_COLLSEQ );'), (50866, 1, u'+  assert( apVal || n==0 );'), (50868, 1, u'+  assert( n==0 || (pOp->p2>0 && pOp->p2+n<=p->nMem+1) );'), (50869, 1, u'+  assert( pOp->p3<pOp->p2 || pOp->p3>=pOp->p2+n );'), (50877, 1, u'+  assert( pOp->p4type==P4_FUNCDEF || pOp->p4type==P4_VDBEFUNC );'), (50886, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (50902, 1, u'+    assert( pOp>p->aOp );'), (50903, 1, u'+    assert( pOp[-1].p4type==P4_COLLSEQ );'), (50904, 1, u'+    assert( pOp[-1].opcode==OP_CollSeq );'), (50995, 1, u'+    default:  assert( pOp->opcode==OP_ShiftRight );'), (51066, 1, u'+  assert( MEM_Str==(MEM_Blob>>3) );'), (51070, 1, u'+  assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (51089, 1, u'+    assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (51243, 1, u'+  assert( pOp->p4type==P4_COLLSEQ || pOp->p4.pColl==0 );'), (51277, 1, u'+  assert( pOp->p4type==P4_INTARRAY );'), (51278, 1, u'+  assert( pOp->p4.ai );'), (51301, 1, u'+  assert( n>0 );'), (51302, 1, u'+  assert( pKeyInfo!=0 );'), (51304, 1, u'+  assert( p1>0 && p1+n<=p->nMem+1 );'), (51306, 1, u'+  assert( p2>0 && p2+n<=p->nMem+1 );'), (51313, 1, u'+    assert( i<pKeyInfo->nField );'), (51462, 1, u'+  assert( pOp->p3==0 || pOp->p1>0 );'), (51537, 1, u'+  assert( p1<p->nCursor );'), (51538, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (51555, 1, u'+  assert( pC!=0 );'), (51557, 1, u'+  assert( pC->pVtabCursor==0 );'), (51579, 1, u'+    assert( pC->pseudoTable );'), (51584, 1, u'+    assert( payloadSize==0 || zRec!=0 );'), (51591, 1, u'+    assert( pDest->flags&MEM_Null );'), (51598, 1, u'+  assert( p2<nField );'), (51613, 1, u'+    assert(aType);'), (51705, 1, u'+    assert( rc==SQLITE_OK );'), (51724, 1, u'+      assert( pDest->flags&MEM_Null );'), (51734, 1, u'+    assert( sMem.z==sMem.zMalloc );'), (51735, 1, u'+    assert( !(pDest->flags & MEM_Dyn) );'), (51736, 1, u'+    assert( !(pDest->flags & (MEM_Blob|MEM_Str)) || pDest->z==sMem.z );'), (51823, 1, u'+  assert( nField>0 && pOp->p2>0 && pOp->p2+nField<=p->nMem+1 );'), (51868, 1, u'+  assert( pOp->p3<pOp->p1 || pOp->p3>=pOp->p1+pOp->p2 );'), (51884, 1, u'+  assert( i==nByte );'), (51886, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (51946, 1, u'+    assert( i>=0 && i<db->nDb );'), (51947, 1, u'+    assert( db->aDb[i].pBt!=0 );'), (51949, 1, u'+    assert( sqlite3BtreeIsInTrans(pBt) );'), (51950, 1, u'+    assert( (p->btreeMask & (1<<i))!=0 );'), (51952, 1, u'+      assert( db->nStatement>=0 && db->nSavepoint>=0 );'), (51974, 1, u'+  assert( db->pSavepoint==0 || db->autoCommit==0 );'), (51975, 1, u'+  assert( p1==SAVEPOINT_BEGIN||p1==SAVEPOINT_RELEASE||p1==SAVEPOINT_ROLLBACK );'), (51976, 1, u'+  assert( db->pSavepoint || db->isTransactionSavepoint==0 );'), (51977, 1, u'+  assert( checkSavepointCount(db) );'), (52082, 1, u'+        assert( pSavepoint==db->pSavepoint );'), (52109, 1, u'+  assert( desiredAutoCommit==1 || desiredAutoCommit==0 );'), (52110, 1, u'+  assert( desiredAutoCommit==1 || rollback==0 );'), (52112, 1, u'+  assert( db->activeVdbeCnt>0 );  /* At least this one VM is active */'), (52131, 1, u'+      assert( desiredAutoCommit==1 );'), (52143, 1, u'+    assert( db->nStatement==0 );'), (52187, 1, u'+  assert( i>=0 && i<db->nDb );'), (52188, 1, u'+  assert( (p->btreeMask & (1<<i))!=0 );'), (52227, 1, u'+  assert( pOp->p3<SQLITE_N_BTREE_META );'), (52232, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (52233, 1, u'+  assert( db->aDb[iDb].pBt!=0 );'), (52234, 1, u'+  assert( (p->btreeMask & (1<<iDb))!=0 );'), (52261, 1, u'+  assert( pOp->p2<SQLITE_N_BTREE_META );'), (52262, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (52263, 1, u'+  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (52265, 1, u'+  assert( pDb->pBt!=0 );'), (52304, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (52305, 1, u'+  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (52399, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (52400, 1, u'+  assert( (p->btreeMask & (1<<iDb))!=0 );'), (52403, 1, u'+  assert( pX!=0 );'), (52413, 1, u'+    assert( p2>0 );'), (52414, 1, u'+    assert( p2<=p->nMem );'), (52423, 1, u'+  assert( i>=0 );'), (52510, 1, u'+  assert( i>=0 );'), (52527, 1, u'+      assert( pOp->p4type==P4_KEYINFO );'), (52530, 1, u'+        assert( pgno==MASTER_ROOT+1 );'), (52572, 1, u'+  assert( i>=0 );'), (52590, 1, u'+  assert( i>=0 && i<p->nCursor );'), (52655, 1, u'+  assert( i>=0 && i<p->nCursor );'), (52656, 1, u'+  assert( pOp->p2!=0 );'), (52658, 1, u'+  assert( pC!=0 );'), (52684, 1, u'+        assert( (pIn3->flags & MEM_Real)!=0 );'), (52710, 1, u'+          assert( oc==OP_SeekLe || oc==OP_SeekGt );'), (52725, 1, u'+      assert( pOp->p4type==P4_INT32 );'), (52726, 1, u'+      assert( nField>0 );'), (52755, 1, u'+      assert( oc==OP_SeekLt || oc==OP_SeekLe );'), (52767, 1, u'+    assert( pOp->p2>0 );'), (52794, 1, u'+  assert( i>=0 && i<p->nCursor );'), (52796, 1, u'+  assert( pC!=0 );'), (52798, 1, u'+    assert( pC->isTable );'), (52843, 1, u'+  assert( i>=0 && i<p->nCursor );'), (52844, 1, u'+  assert( p->apCsr[i]!=0 );'), (52849, 1, u'+    assert( pC->isTable==0 );'), (52850, 1, u'+    assert( pIn3->flags & MEM_Blob );'), (52905, 1, u'+  assert( pOp->p4type==P4_INT32 );'), (52906, 1, u'+  assert( pOp->p4.i>0 && pOp->p4.i<=p->nMem );'), (52910, 1, u'+  assert( i>=0 && i<p->nCursor );'), (52912, 1, u'+  assert( pCx!=0 );'), (52921, 1, u'+    assert( pK->flags & MEM_Blob );'), (52932, 1, u'+    assert( pCx->deferredMoveto==0 );'), (52974, 1, u'+    assert( pIn3->flags&MEM_Int );'), (52997, 1, u'+  assert( i>=0 && i<p->nCursor );'), (52998, 1, u'+  assert( p->apCsr[i]!=0 );'), (53002, 1, u'+    assert( pIn3->flags & MEM_Int );'), (53003, 1, u'+    assert( p->apCsr[i]->isTable );'), (53012, 1, u'+      assert( pC->rowidIsValid==0 );'), (53018, 1, u'+    assert( pC->isTable );'), (53020, 1, u'+    assert( pC->rowidIsValid==0 );'), (53034, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53035, 1, u'+  assert( p->apCsr[i]!=0 );'), (53060, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53061, 1, u'+  assert( p->apCsr[i]!=0 );'), (53104, 1, u'+    assert( (sqlite3BtreeFlags(pC->pCursor) & BTREE_INTKEY)!=0 );'), (53105, 1, u'+    assert( (sqlite3BtreeFlags(pC->pCursor) & BTREE_ZERODATA)==0 );'), (53140, 1, u'+        assert( pOp->p3>0 && pOp->p3<=p->nMem ); /* P3 is a valid memory cell */'), (53144, 1, u'+        assert( (pMem->flags & MEM_Int)!=0 );  /* mem(P3) holds an integer */'), (53159, 1, u'+      assert( pOp->p3==0 );  /* SQLITE_FULL must have occurred prior to this */'), (53222, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53224, 1, u'+  assert( pC!=0 );'), (53225, 1, u'+  assert( pC->pCursor!=0 || pC->pseudoTable );'), (53226, 1, u'+  assert( pKey->flags & MEM_Int );'), (53227, 1, u'+  assert( pC->isTable );'), (53238, 1, u'+    assert( pData->flags & (MEM_Blob|MEM_Str) );'), (53283, 1, u'+    assert( pC->isTable );'), (53285, 1, u'+    assert( pC->iDb>=0 );'), (53315, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53317, 1, u'+  assert( pC!=0 );'), (53318, 1, u'+  assert( pC->pCursor!=0 );  /* Only valid for real tables, no pseudotables */'), (53324, 1, u'+    assert( pC->isTable );'), (53325, 1, u'+    assert( pC->rowidIsValid );  /* lastRowid set by previous OP_NotFound */'), (53340, 1, u'+    assert( pC->iDb>=0 );'), (53391, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53393, 1, u'+  assert( pC->isTable || pOp->opcode==OP_RowKey );'), (53394, 1, u'+  assert( pC->isIndex || pOp->opcode==OP_RowData );'), (53395, 1, u'+  assert( pC!=0 );'), (53396, 1, u'+  assert( pC->nullRow==0 );'), (53397, 1, u'+  assert( pC->pseudoTable==0 );'), (53398, 1, u'+  assert( pC->pCursor!=0 );'), (53404, 1, u'+    assert( !pC->isTable );'), (53441, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53443, 1, u'+  assert( pC!=0 );'), (53454, 1, u'+    assert( pC->pCursor!=0 );'), (53473, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53475, 1, u'+  assert( pC!=0 );'), (53498, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53500, 1, u'+  assert( pC!=0 );'), (53502, 1, u'+  assert( pCrsr!=0 );'), (53549, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53551, 1, u'+  assert( pC!=0 );'), (53562, 1, u'+  assert( pOp->p2>0 && pOp->p2<p->nOp );'), (53596, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (53602, 1, u'+  assert( pCrsr );'), (53604, 1, u'+  assert( pC->deferredMoveto==0 );'), (53636, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53637, 1, u'+  assert( p->apCsr[i]!=0 );'), (53638, 1, u'+  assert( pIn2->flags & MEM_Blob );'), (53640, 1, u'+    assert( pC->isTable==0 );'), (53646, 1, u'+      assert( pC->deferredMoveto==0 );'), (53663, 1, u'+  assert( pOp->p3>0 );'), (53664, 1, u'+  assert( pOp->p2>0 && pOp->p2+pOp->p3<=p->nMem+1 );'), (53665, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53666, 1, u'+  assert( p->apCsr[i]!=0 );'), (53678, 1, u'+    assert( pC->deferredMoveto==0 );'), (53698, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53699, 1, u'+  assert( p->apCsr[i]!=0 );'), (53704, 1, u'+    assert( pC->deferredMoveto==0 );'), (53705, 1, u'+    assert( pC->isTable==0 );'), (53749, 1, u'+  assert( i>=0 && i<p->nCursor );'), (53750, 1, u'+  assert( p->apCsr[i]!=0 );'), (53754, 1, u'+    assert( pC->deferredMoveto==0 );'), (53755, 1, u'+    assert( pOp->p5==0 || pOp->p5==1 );'), (53756, 1, u'+    assert( pOp->p4type==P4_INT32 );'), (53769, 1, u'+      assert( pOp->opcode==OP_IdxGE );'), (53818, 1, u'+    assert( iCnt==1 );'), (53819, 1, u'+    assert( (p->btreeMask & (1<<iDb))!=0 );'), (53852, 1, u'+  assert( (p->btreeMask & (1<<pOp->p2))!=0 );'), (53892, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (53893, 1, u'+  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (53895, 1, u'+  assert( pDb->pBt!=0 );'), (53922, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (53945, 1, u'+  assert( sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (53961, 1, u'+      assert( db->init.busy==0 );'), (53964, 1, u'+      assert( !db->mallocFailed );'), (53988, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (54061, 1, u'+  assert( nRoot>0 );'), (54064, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54066, 1, u'+  assert( (pnErr->flags & MEM_Int)!=0 );'), (54067, 1, u'+  assert( (pnErr->flags & (MEM_Str|MEM_Blob))==0 );'), (54073, 1, u'+  assert( pOp->p5<db->nDb );'), (54074, 1, u'+  assert( (p->btreeMask & (1<<pOp->p5))!=0 );'), (54081, 1, u'+    assert( z==0 );'), (54103, 1, u'+  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (54105, 1, u'+  assert( pOp->p2>0 && pOp->p2<=p->nMem );'), (54107, 1, u'+  assert( (pVal->flags & MEM_Int)!=0 );'), (54125, 1, u'+  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (54137, 1, u'+    assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54155, 1, u'+  assert( i>=0 );'), (54177, 1, u'+  assert( p->contextStackTop>=0 );'), (54211, 1, u'+  assert( pIn1->flags&MEM_Int );'), (54226, 1, u'+  assert( pIn1->flags&MEM_Int );'), (54241, 1, u'+  assert( pIn1->flags&MEM_Int );'), (54265, 1, u'+  assert( n>=0 );'), (54268, 1, u'+  assert( apVal || n==0 );'), (54274, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54285, 1, u'+    assert( pOp>p->aOp );'), (54286, 1, u'+    assert( pOp[-1].p4type==P4_COLLSEQ );'), (54287, 1, u'+    assert( pOp[-1].opcode==OP_CollSeq );'), (54313, 1, u'+  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (54315, 1, u'+  assert( (pMem->flags & ~(MEM_Null|MEM_Agg))==0 );'), (54354, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (54355, 1, u'+  assert( (p->btreeMask & (1<<pOp->p1))!=0 );'), (54402, 1, u'+  assert( p1>=0 && p1<db->nDb );'), (54403, 1, u'+  assert( (p->btreeMask & (1<<p1))!=0 );'), (54404, 1, u'+  assert( isWriteLock==0 || isWriteLock==1 );'), (54476, 1, u'+  assert(pVtab && pModule);'), (54532, 1, u'+  assert( pCur->pVtabCursor );'), (54538, 1, u'+  assert( (pQuery->flags&MEM_Int)!=0 && pArgc->flags==MEM_Int );'), (54588, 1, u'+  assert( pCur->pVtabCursor );'), (54594, 1, u'+  assert( pModule->xRowid );'), (54621, 1, u'+  assert( pCur->pVtabCursor );'), (54622, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (54630, 1, u'+  assert( pModule->xColumn );'), (54679, 1, u'+  assert( pCur->pVtabCursor );'), (54685, 1, u'+  assert( pModule->xNext );'), (54725, 1, u'+  assert( pVtab->pModule->xRename );'), (54771, 1, u'+  assert( pOp->p4type==P4_VTAB );'), (54794, 1, u'+      assert( nArg>1 && apArg[0] && (apArg[0]->flags&MEM_Null) );'), (54886, 1, u'+    assert( pc>=-1 && pc<p->nOp );'), (54906, 1, u'+  assert( rc );'), (54945, 1, u'+  assert( p->zErrMsg==0 );'), (54956, 1, u'+  assert( db->u1.isInterrupted );'), (55270, 1, u'+    assert( db == v->db );'), (55379, 1, u'+        assert(p->iSize<=p->nBuf);'), (55643, 1, u'+  assert( iOfst+iAmt<=p->endpoint.iOffset );'), (55688, 1, u'+  assert(iOfst==p->endpoint.iOffset);'), (55704, 1, u'+        assert( p->pFirst );'), (55707, 1, u'+        assert( !p->pFirst );'), (55728, 1, u'+  assert(size==0);'), (55759, 1, u'+  assert( 0 );                                                 /*NO_TEST*/'), (55796, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(p) );'), (56015, 1, u'+  assert( iCol>=0 && iCol<pEList->nExpr );'), (56017, 1, u'+  assert( pOrig!=0 );'), (56018, 1, u'+  assert( pOrig->flags & EP_Resolved );'), (56087, 1, u'+  assert( pNC ); /* the name context cannot be NULL. */'), (56088, 1, u'+  assert( pColumnToken && pColumnToken->z ); /* The Z in X.Y.Z cannot be NULL */'), (56114, 1, u'+        assert( pTab!=0 && pTab->zName!=0 );'), (56116, 1, u'+        assert( pTab->nCol>0 );'), (56181, 1, u'+        assert( pTriggerStack->pTab );'), (56186, 1, u'+        assert( pTriggerStack->pTab );'), (56240, 1, u'+          assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (56241, 1, u'+          assert( pExpr->x.pList==0 );'), (56242, 1, u'+          assert( pExpr->x.pSelect==0 );'), (56252, 1, u'+          assert( zTab==0 && zDb==0 );'), (56312, 1, u'+    assert( pMatch->iCursor==pExpr->iTable );'), (56329, 1, u'+    assert( pNC!=0 );'), (56334, 1, u'+      assert( pTopNC!=0 );'), (56361, 1, u'+  assert( pNC!=0 );'), (56363, 1, u'+  assert( pParse==pWalker->pParse );'), (56372, 1, u'+      assert( pSrcList->a[i].iCursor>=0 && pSrcList->a[i].iCursor<pParse->nTab);'), (56386, 1, u'+      assert( pSrcList && pSrcList->nSrc==1 );'), (56420, 1, u'+        assert( pRight->op==TK_DOT );'), (56444, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (56509, 1, u'+        assert( pNC->nRef>=nRef );'), (56592, 1, u'+  assert( sqlite3ExprIsInteger(pE, &i)==0 );'), (56682, 1, u'+    assert( pEList!=0 );'), (56698, 1, u'+            assert(pDup);'), (56763, 1, u'+  assert( pEList!=0 );  /* sqlite3SelectNew() guarantees this */'), (56860, 1, u'+  assert( p!=0 );'), (56885, 1, u'+    assert( (p->selFlags & SF_Expanded)!=0 );'), (56886, 1, u'+    assert( (p->selFlags & SF_Resolved)==0 );'), (56908, 1, u'+    assert( pEList!=0 );'), (56932, 1, u'+    assert( (p->selFlags & SF_Aggregate)==0 );'), (57120, 1, u'+  assert( p!=0 );'), (57166, 1, u'+    assert( pExpr->flags&EP_xIsSelect );'), (57181, 1, u'+    assert( pExpr->pTab && j<pExpr->pTab->nCol );'), (57269, 1, u'+    assert( aff1==0 || aff2==0 );'), (57280, 1, u'+  assert( pExpr->op==TK_EQ || pExpr->op==TK_IN || pExpr->op==TK_LT ||'), (57283, 1, u'+  assert( pExpr->pLeft );'), (57341, 1, u'+  assert( pLeft );'), (57343, 1, u'+    assert( pLeft->pColl );'), (57346, 1, u'+    assert( pRight->pColl );'), (57536, 1, u'+    assert( pToken->dyn==0 );'), (57637, 1, u'+  assert( pRight!=0 );'), (57638, 1, u'+  assert( pLeft!=0 );'), (57655, 1, u'+  assert( pToken );'), (57663, 1, u'+  assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (57664, 1, u'+  assert( pToken->dyn==0 );'), (57693, 1, u'+  assert( pToken->n>=1 );'), (57694, 1, u'+  assert( pToken->z!=0 );'), (57695, 1, u'+  assert( pToken->z[0]!=0 );'), (57744, 1, u'+        assert( pParse->apVarExpr!=0 );'), (57796, 1, u'+    assert( (p->vvaFlags & EVVA_ReadOnlyToken)==0 );'), (57892, 1, u'+    assert( pzBuffer==0 || isReduced );'), (57911, 1, u'+        assert( ExprHasProperty(p, EP_Reduced)==0 );'), (58134, 1, u'+  assert( p==0 );'), (58156, 1, u'+    assert( pList->nAlloc==0 );'), (58168, 1, u'+  assert( pList->a!=0 );'), (58209, 1, u'+  assert( pList->a!=0 || (pList->nExpr==0 && pList->nAlloc==0) );'), (58210, 1, u'+  assert( pList->nExpr<=pList->nAlloc );'), (58391, 1, u'+  assert( pSrc!=0 );'), (58492, 1, u'+    assert(v);'), (58610, 1, u'+    assert( testAddr>0 || pParse->db->mallocFailed );'), (58653, 1, u'+        assert( !isRowid );'), (58656, 1, u'+        assert( (pExpr->iTable&0x0000FFFF)==pExpr->iTable );'), (58703, 1, u'+          assert( pParse->disableColCache>0 );'), (58734, 1, u'+      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (58784, 1, u'+  assert( z || v==0 || sqlite3VdbeDb(v)->mallocFailed );'), (58785, 1, u'+  assert( !z || !sqlite3Isdigit(z[n]) );'), (58819, 1, u'+    assert( !sqlite3Isdigit(z[n]) );'), (58874, 1, u'+  assert( v!=0 );'), (59013, 1, u'+  assert( pOp || pParse->db->mallocFailed );'), (59048, 1, u'+  assert( iAlias>0 && iAlias<=pParse->nAlias );'), (59083, 1, u'+  assert( v!=0 || db->mallocFailed );'), (59084, 1, u'+  assert( target>0 && target<=pParse->nMem );'), (59097, 1, u'+        assert( pCol->iMem>0 );'), (59110, 1, u'+        assert( pParse->ckBase>0 );'), (59143, 1, u'+      assert( pExpr->token.n>=3 );'), (59144, 1, u"+      assert( pExpr->token.z[0]=='x' || pExpr->token.z[0]=='X' );"), (59145, 1, u"+      assert( pExpr->token.z[1]=='\\'' );"), (59146, 1, u"+      assert( pExpr->token.z[pExpr->token.n-1]=='\\'' );"), (59193, 1, u'+      assert( to_op==OP_ToText    || aff!=SQLITE_AFF_TEXT    );'), (59194, 1, u'+      assert( to_op==OP_ToBlob    || aff!=SQLITE_AFF_NONE    );'), (59195, 1, u'+      assert( to_op==OP_ToNumeric || aff!=SQLITE_AFF_NUMERIC );'), (59196, 1, u'+      assert( to_op==OP_ToInt     || aff!=SQLITE_AFF_INTEGER );'), (59197, 1, u'+      assert( to_op==OP_ToReal    || aff!=SQLITE_AFF_REAL    );'), (59219, 1, u'+      assert( TK_LT==OP_Lt );'), (59220, 1, u'+      assert( TK_LE==OP_Le );'), (59221, 1, u'+      assert( TK_GT==OP_Gt );'), (59222, 1, u'+      assert( TK_GE==OP_Ge );'), (59223, 1, u'+      assert( TK_EQ==OP_Eq );'), (59224, 1, u'+      assert( TK_NE==OP_Ne );'), (59251, 1, u'+      assert( TK_AND==OP_And );'), (59252, 1, u'+      assert( TK_OR==OP_Or );'), (59253, 1, u'+      assert( TK_PLUS==OP_Add );'), (59254, 1, u'+      assert( TK_MINUS==OP_Subtract );'), (59255, 1, u'+      assert( TK_REM==OP_Remainder );'), (59256, 1, u'+      assert( TK_BITAND==OP_BitAnd );'), (59257, 1, u'+      assert( TK_BITOR==OP_BitOr );'), (59258, 1, u'+      assert( TK_SLASH==OP_Divide );'), (59259, 1, u'+      assert( TK_LSHIFT==OP_ShiftLeft );'), (59260, 1, u'+      assert( TK_RSHIFT==OP_ShiftRight );'), (59261, 1, u'+      assert( TK_CONCAT==OP_Concat );'), (59282, 1, u'+      assert( pLeft );'), (59299, 1, u'+      assert( TK_BITNOT==OP_BitNot );'), (59300, 1, u'+      assert( TK_NOT==OP_Not );'), (59312, 1, u'+      assert( TK_ISNULL==OP_IsNull );'), (59313, 1, u'+      assert( TK_NOTNULL==OP_NotNull );'), (59346, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (59358, 1, u'+      assert( pDef!=0 );'), (59579, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList );'), (59580, 1, u'+      assert((pExpr->x.pList->nExpr % 2) == 0);'), (59581, 1, u'+      assert(pExpr->x.pList->nExpr > 0);'), (59599, 1, u'+          assert( pTest!=0 );'), (59619, 1, u'+      assert( pParse->disableColCache>0 );'), (59631, 1, u'+         assert( pExpr->affinity==OE_Rollback ||'), (59638, 1, u'+         assert( pExpr->affinity == OE_Ignore );'), (59681, 1, u'+  assert( target>0 && target<=pParse->nMem );'), (59683, 1, u'+  assert( pParse->pVdbe || pParse->db->mallocFailed );'), (59706, 1, u'+  assert( target>0 );'), (59796, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (59847, 1, u'+  assert( pList!=0 );'), (59848, 1, u'+  assert( target>0 );'), (59888, 1, u'+  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (59899, 1, u'+      assert( pParse->disableColCache>0 );'), (59910, 1, u'+      assert( pParse->disableColCache>0 );'), (59925, 1, u'+      assert( TK_LT==OP_Lt );'), (59926, 1, u'+      assert( TK_LE==OP_Le );'), (59927, 1, u'+      assert( TK_GT==OP_Gt );'), (59928, 1, u'+      assert( TK_GE==OP_Ge );'), (59929, 1, u'+      assert( TK_EQ==OP_Eq );'), (59930, 1, u'+      assert( TK_NE==OP_Ne );'), (59948, 1, u'+      assert( TK_ISNULL==OP_IsNull );'), (59949, 1, u'+      assert( TK_NOTNULL==OP_NotNull );'), (59972, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (60018, 1, u'+  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (60043, 1, u'+  assert( pExpr->op!=TK_ISNULL || op==OP_NotNull );'), (60044, 1, u'+  assert( pExpr->op!=TK_NOTNULL || op==OP_IsNull );'), (60045, 1, u'+  assert( pExpr->op!=TK_NE || op==OP_Eq );'), (60046, 1, u'+  assert( pExpr->op!=TK_EQ || op==OP_Ne );'), (60047, 1, u'+  assert( pExpr->op!=TK_LT || op==OP_Ge );'), (60048, 1, u'+  assert( pExpr->op!=TK_LE || op==OP_Gt );'), (60049, 1, u'+  assert( pExpr->op!=TK_GT || op==OP_Le );'), (60050, 1, u'+  assert( pExpr->op!=TK_GE || op==OP_Lt );'), (60059, 1, u'+      assert( pParse->disableColCache>0 );'), (60070, 1, u'+      assert( pParse->disableColCache>0 );'), (60124, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (60339, 1, u'+            assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (60525, 1, u'+      assert( len>0 );'), (60584, 1, u'+      assert( len>0 );'), (60675, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (60677, 1, u'+  assert( iDb>=0 );'), (60683, 1, u'+    assert( iTrigDb==iDb || iTrigDb==1 );'), (60729, 1, u'+  assert( pSrc->nSrc==1 );'), (60730, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (60897, 1, u'+  assert( pNew );'), (60899, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (60906, 1, u'+  assert( pTab );'), (61009, 1, u'+  assert( pParse->pNewTable==0 );'), (61010, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (61028, 1, u'+  assert( pTab->addColOffset>0 );'), (61044, 1, u'+  assert( pNew->nCol>0 );'), (61046, 1, u'+  assert( nAlloc>=pNew->nCol && nAlloc%8==0 && nAlloc-pNew->nCol<8 );'), (61118, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (61119, 1, u'+  assert( sqlite3VdbeDb(v)==db );'), (61184, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (61186, 1, u'+  assert( iDb>=0 );'), (61209, 1, u'+    assert( iDb==sqlite3SchemaToIndex(pParse->db, pIdx->pSchema) );'), (61343, 1, u'+  assert( pTab!=0 );'), (61344, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (61375, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (61442, 1, u'+  assert( argc==2 );'), (61474, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (61475, 1, u'+  assert( db->aDb[iDb].pBt!=0 );'), (61476, 1, u'+  assert( sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (61706, 1, u'+    assert( iDb>=2 );'), (61813, 1, u'+  assert( db->mallocFailed || pAuthArg );'), (61845, 1, u'+  assert( v || db->mallocFailed );'), (61848, 1, u'+    assert( pFunc->nArg==-1 || (pFunc->nArg&0xff)==pFunc->nArg );'), (61926, 1, u'+  assert( db->nDb>iDb );'), (62188, 1, u'+    assert( pExpr->iTable==pStack->newIdx || pExpr->iTable==pStack->oldIdx );'), (62193, 1, u'+    assert( pExpr->iColumn<pTab->nCol );'), (62196, 1, u'+    assert( pTab->iPKey<pTab->nCol );'), (62201, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (62478, 1, u'+    assert( pParse->disableColCache==0 );  /* Disables and re-enables match */'), (62515, 1, u'+  assert( pParse->nested<10 );  /* Nesting should only be of limited depth */'), (62548, 1, u'+  assert( zName!=0 );'), (62616, 1, u'+    assert( pSchema || (j==1 && !db->aDb[1].pBt) );'), (62648, 1, u'+  assert( pOld==0 || pOld==p );'), (62693, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (62701, 1, u'+      assert(i==1 || (pDb->pBt && sqlite3BtreeHoldsMutex(pDb->pBt)));'), (62706, 1, u'+  assert( iDb==0 );'), (62758, 1, u'+  assert( pTable!=0 );'), (62795, 1, u'+  assert( pTable->nRef==0 );'), (62801, 1, u'+    assert( pIndex->pSchema==pTable->pSchema );'), (62811, 1, u'+    assert( sqlite3HashFind(&pTable->pSchema->aFKey,'), (62839, 1, u'+  assert( db!=0 );'), (62840, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (62841, 1, u'+  assert( zTabName && zTabName[0] );'), (62975, 1, u'+    assert( db->init.iDb==0 || db->init.busy );'), (63065, 1, u'+  assert( (isTemp & 1)==isTemp );'), (63466, 1, u'+    assert( autoInc==0 || autoInc==1 );'), (63529, 1, u'+      assert( pIdx->nColumn==1 );'), (63770, 1, u'+      assert( (int)(sqlite3Strlen30(z)+k+1)<=n );'), (63814, 1, u'+  assert( !db->init.busy || !pSelect );'), (63900, 1, u'+      assert(pParse->nTab==1);'), (63910, 1, u'+        assert( p->aCol==0 );'), (63978, 1, u'+      assert( p==pOld );  /* Malloc must have failed inside HashInsert() */'), (64001, 1, u'+      assert( !pSelect && pCons && pEnd );'), (64102, 1, u'+  assert( pTable );'), (64131, 1, u'+  assert( pTable->nCol>=0 );'), (64140, 1, u'+  assert( pTable->pSelect );'), (64159, 1, u'+      assert( pTable->aCol==0 );'), (64306, 1, u'+      assert( pIdx->pSchema==pTab->pSchema );'), (64335, 1, u'+  assert( pName->nSrc==1 );'), (64346, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (64431, 1, u'+      assert( pTrigger->pSchema==pTab->pSchema ||'), (64522, 1, u'+  assert( pTo!=0 );'), (64620, 1, u'+  assert( isDeferred==0 || isDeferred==1 );'), (64752, 1, u'+    assert( pName1 && pName2 );'), (64774, 1, u'+      assert(0);'), (64779, 1, u'+    assert( db->aDb[iDb].pSchema==pTab->pSchema );'), (64781, 1, u'+    assert( pName==0 );'), (64953, 1, u'+      assert( pListItem->pExpr->pColl );'), (64989, 1, u'+      assert( pIdx->onError!=OE_None );'), (64990, 1, u'+      assert( pIdx->autoIndex );'), (64991, 1, u'+      assert( pIndex->onError!=OE_None );'), (65032, 1, u'+      assert( p==pIndex );  /* Malloc must have failed */'), (65186, 1, u'+  assert( a!=0 );'), (65213, 1, u'+  assert( pName->nSrc==1 );'), (65399, 1, u'+  assert( iStart>=0 );'), (65400, 1, u'+  assert( nExtra>=1 );'), (65402, 1, u'+    assert( db->mallocFailed );'), (65414, 1, u'+      assert( db->mallocFailed );'), (65505, 1, u'+  assert(pList || pParse->db->mallocFailed );'), (65589, 1, u'+    assert( pItem->notIndexed==0 && pItem->zIndex==0 );'), (65692, 1, u'+    assert( !SAVEPOINT_BEGIN && SAVEPOINT_RELEASE==1 && SAVEPOINT_ROLLBACK==2 );'), (65725, 1, u'+    assert( (db->flags & SQLITE_InTrans)==0 || db->autoCommit );'), (65726, 1, u'+    assert( db->aDb[1].pSchema );'), (65767, 1, u'+    assert( iDb<db->nDb );'), (65768, 1, u'+    assert( db->aDb[iDb].pBt!=0 || iDb==1 );'), (65769, 1, u'+    assert( iDb<SQLITE_MAX_ATTACHED+2 );'), (65853, 1, u'+    assert( pDb!=0 );'), (65897, 1, u'+    assert( pName1->z );'), (65952, 1, u'+    assert( &pKey->aSortOrder[nCol]==&(((u8 *)pKey)[nBytes]) );'), (65955, 1, u'+      assert( zColl );'), (65996, 1, u'+  assert( !db->xCollNeeded || !db->xCollNeeded16 );'), (66077, 1, u'+  assert( !p || p->xCmp );'), (66103, 1, u'+    assert( p==pColl );'), (66151, 1, u'+      assert( pDel==0 || pDel==pColl );'), (66188, 1, u'+  assert( SQLITE_UTF8==1 && SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (66189, 1, u'+  assert( enc>=SQLITE_UTF8 && enc<=SQLITE_UTF16BE );'), (66312, 1, u'+  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (66395, 1, u'+    assert( pTab->dbMem==0 );'), (66453, 1, u'+  assert( pItem && pSrc->nSrc==1 );'), (66504, 1, u'+  assert( opcode==OP_OpenWrite || opcode==OP_OpenRead );'), (66583, 1, u'+    assert( pOffset == 0 );'), (66682, 1, u'+  assert( pTabList->nSrc==1 );'), (66711, 1, u'+  assert( iDb<db->nDb );'), (66714, 1, u'+  assert( rcauth==SQLITE_OK || rcauth==SQLITE_DENY || rcauth==SQLITE_IGNORE );'), (66718, 1, u'+  assert(!isView || pTrigger);'), (66734, 1, u'+  assert( pTabList->nSrc==1 );'), (66805, 1, u'+    assert( !isView );'), (66811, 1, u'+      assert( pIdx->pSchema==pTab->pSchema );'), (67102, 1, u'+  assert( argc>1 );'), (67105, 1, u'+  assert( pColl );'), (67106, 1, u'+  assert( mask==-1 || mask==0 );'), (67150, 1, u'+  assert( argc==1 );'), (67181, 1, u'+  assert( argc==1 );'), (67231, 1, u'+  assert( argc==3 || argc==2 );'), (67242, 1, u'+    assert( len==sqlite3_value_bytes(argv[0]) );'), (67280, 1, u'+  assert( p1>=0 && p2>=0 );'), (67307, 1, u'+  assert( argc==1 || argc==2 );'), (67332, 1, u'+  assert( nByte>0 );'), (67358, 1, u'+  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (67378, 1, u'+  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (67446, 1, u'+  assert( argc==1 );'), (67591, 1, u'+        assert( esc==0 );         /* This is GLOB, not LIKE */'), (67592, 1, u"+        assert( matchSet<0x80 );  /* '[' is a single-byte character */"), (67621, 1, u'+      assert( esc==0 );    /* This only occurs for GLOB, not LIKE */'), (67713, 1, u'+  assert( zB==sqlite3_value_text(argv[0]) );  /* Encoding did not change */'), (67787, 1, u'+  assert( argc==1 );'), (67799, 1, u'+      assert( zBlob==sqlite3_value_blob(argv[0]) ); /* No encoding change */'), (67840, 1, u'+      assert( sqlite3_value_type(argv[0])==SQLITE_NULL );'), (67859, 1, u'+  assert( argc==1 );'), (67863, 1, u'+  assert( pBlob==sqlite3_value_blob(argv[0]) );  /* No encoding change */'), (67886, 1, u'+  assert( argc==1 );'), (67920, 1, u'+  assert( argc==3 );'), (67925, 1, u'+  assert( zStr==sqlite3_value_text(argv[0]) );  /* No encoding change */'), (67928, 1, u'+    assert( sqlite3_value_type(argv[1])==SQLITE_NULL'), (67933, 1, u'+    assert( sqlite3_value_type(argv[1])!=SQLITE_NULL );'), (67938, 1, u'+  assert( zPattern==sqlite3_value_text(argv[1]) );  /* No encoding change */'), (67942, 1, u'+  assert( zRep==sqlite3_value_text(argv[2]) );'), (67944, 1, u'+  assert( nOut<SQLITE_MAX_LENGTH );'), (67976, 1, u'+  assert( j+nStr-i+1==nOut );'), (67979, 1, u'+  assert( j<=nOut );'), (68008, 1, u'+  assert( zIn==sqlite3_value_text(argv[0]) );'), (68091, 1, u'+  assert( argc==1 );'), (68169, 1, u'+  assert( argc==1 );'), (68242, 1, u'+  assert( argc==1 || p==0 || p->n>0x7fffffff'), (68311, 1, u'+  assert( argc==1 || argc==2 );'), (68360, 1, u'+    assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (68418, 1, u'+  assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (68430, 1, u'+  assert( (char*)&likeInfoAlt == (char*)&likeInfoAlt.matchAll );'), (68431, 1, u'+  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );'), (68432, 1, u'+  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );'), (68647, 1, u'+    assert( pOp!=0 );'), (68662, 1, u'+      assert( pOp->p4.pVtab!=0 );'), (68663, 1, u'+      assert( pOp->p4type==P4_VTAB );'), (68701, 1, u'+    assert( v );'), (68754, 1, u'+    assert( v );'), (68944, 1, u'+  assert( pTabList->nSrc==1 );'), (68952, 1, u'+  assert( iDb<db->nDb );'), (68974, 1, u'+  assert( (pTrigger && tmask) || (pTrigger==0 && tmask==0) );'), (68983, 1, u'+  assert( pTab!=0 );'), (69016, 1, u'+    assert( !pTrigger );'), (69017, 1, u'+    assert( pList==0 );'), (69078, 1, u'+    assert( pSelect->pEList );'), (69080, 1, u'+    assert( dest.nMem==nColumn );'), (69134, 1, u'+    assert( useTempTable==0 );'), (69296, 1, u'+      assert( pSelect==0 );  /* Otherwise useTempTable is true */'), (69307, 1, u'+    assert(!IsVirtual(pTab));'), (69325, 1, u'+        assert( pSelect==0 ); /* Otherwise useTempTable is true */'), (69418, 1, u'+          assert( IsVirtual(pTab) );'), (69636, 1, u'+  assert( v!=0 );'), (69637, 1, u'+  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (69658, 1, u'+    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (69737, 1, u'+          assert( seenReplace==0 );'), (69798, 1, u'+    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (69831, 1, u'+        assert( seenReplace==0 );'), (69875, 1, u'+  assert( v!=0 );'), (69876, 1, u'+  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (69929, 1, u'+  assert( v!=0 );'), (69933, 1, u'+    assert( pIdx->pSchema==pTab->pSchema );'), (69983, 1, u'+  assert( pDest && pSrc );'), (69984, 1, u'+  assert( pDest->pTable!=pSrc->pTable );'), (70078, 1, u'+  assert(pSelect->pSrc);   /* allocated even if there is no FROM clause */'), (70099, 1, u'+  assert( pSelect->pOffset==0 );  /* Must be so if pLimit==0 */'), (70107, 1, u'+  assert( pEList!=0 );'), (70111, 1, u'+  assert( pEList->a[0].pExpr );'), (70220, 1, u'+    assert( (pDest->tabFlags & TF_Autoincrement)==0 );'), (70232, 1, u'+    assert( pSrcIdx );'), (70327, 1, u'+    assert( rc==SQLITE_OK || pStmt==0 );'), (70358, 1, u'+            assert( azCols[i]!=0 );'), (70412, 1, u'+  assert( (rc&db->errMask)==rc );'), (71241, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (71340, 1, u'+    assert( (rc&0xff)==rc );'), (71605, 1, u'+      assert( v!=0 );  /* Already allocated by sqlite3Pragma() */'), (71641, 1, u'+                      assert( action==OE_Restrict ); break;'), (71700, 1, u'+  assert( pId2 );'), (71769, 1, u'+    assert( pBt!=0 );'), (71796, 1, u'+    assert( pBt!=0 );'), (71848, 1, u'+        assert(pDb==&db->aDb[0]);'), (71859, 1, u'+    assert(eMode==PAGER_LOCKINGMODE_NORMAL||eMode==PAGER_LOCKINGMODE_EXCLUSIVE);'), (71906, 1, u'+        assert(pDb==&db->aDb[0]);'), (71918, 1, u'+    assert( eMode==PAGER_JOURNALMODE_DELETE'), (71959, 1, u'+    assert( pBt!=0 );'), (71973, 1, u'+      assert( eAuto>=0 && eAuto<=2 );'), (72249, 1, u'+          assert( p->z );'), (72277, 1, u'+        assert( pTab->nCol>cnum );'), (72321, 1, u'+      assert( db->aDb[i].zName!=0 );'), (72623, 1, u'+      assert( encnames[SQLITE_UTF8].enc==SQLITE_UTF8 );'), (72624, 1, u'+      assert( encnames[SQLITE_UTF16LE].enc==SQLITE_UTF16LE );'), (72625, 1, u'+      assert( encnames[SQLITE_UTF16BE].enc==SQLITE_UTF16BE );'), (72691, 1, u'+        assert(iDb<=0);'), (72895, 1, u'+  assert( argc==3 );'), (72897, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (72904, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (72916, 1, u'+    assert( db->init.busy );'), (72921, 1, u'+    assert( rc!=SQLITE_OK || zErr==0 );'), (73002, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (73003, 1, u'+  assert( db->aDb[iDb].pSchema );'), (73004, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (73005, 1, u'+  assert( iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (73150, 1, u'+  assert( db->init.busy );'), (73227, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (73267, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (73292, 1, u'+    assert( sqlite3_mutex_held(db->mutex) );'), (73339, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (73346, 1, u'+    assert( i>=0 && i<db->nDb );'), (73368, 1, u'+  assert( ppStmt && *ppStmt==0 );'), (73369, 1, u'+  assert( !db->mallocFailed );'), (73370, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (73398, 1, u'+      assert( sqlite3BtreeHoldsMutex(pBt) );'), (73475, 1, u'+  assert( db->init.busy==0 || saveSqlFlag==0 );'), (73482, 1, u'+    assert(!(*ppStmt));'), (73495, 1, u'+  assert( (rc&db->errMask)==rc );'), (73507, 1, u'+  assert( ppStmt!=0 );'), (73534, 1, u'+  assert( sqlite3_mutex_held(sqlite3VdbeDb(p)->mutex) );'), (73536, 1, u'+  assert( zSql!=0 );  /* Reprepare only called for prepare_v2() statements */'), (73538, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (73544, 1, u'+    assert( pNew==0 );'), (73547, 1, u'+    assert( pNew!=0 );'), (73574, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73586, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73611, 1, u'+  assert( ppStmt );'), (73654, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73666, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (73740, 1, u'+  assert( db->mallocFailed || !pOffset || pLimit ); /* OFFSET implies LIMIT */'), (73836, 1, u'+    assert( pB!=0 );'), (74217, 1, u'+  assert( v );'), (74219, 1, u'+  assert( pEList!=0 );'), (74237, 1, u'+    assert( pDest->nMem==nResultCol );'), (74257, 1, u'+    assert( pEList!=0 );'), (74258, 1, u'+    assert( pEList->nExpr==nColumn );'), (74318, 1, u'+      assert( nColumn==1 );'), (74349, 1, u'+      assert( nColumn==1 );'), (74387, 1, u'+      assert( eDest==SRT_Discard );'), (74494, 1, u'+      assert( nColumn==1 );'), (74501, 1, u'+      assert( nColumn==1 );'), (74515, 1, u'+        assert( regRow!=pDest->iMem+i );'), (74536, 1, u'+  assert( p->iLimit==0 );'), (74616, 1, u'+      assert( pTab );'), (74636, 1, u'+        assert( !pS );'), (74638, 1, u'+        assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (74663, 1, u'+      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (74674, 1, u'+    assert( pzOriginTab && pzOriginCol );'), (74743, 1, u'+  assert( v!=0 );'), (74763, 1, u'+      assert( j<pTabList->nSrc );'), (74766, 1, u'+      assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (74841, 1, u'+    assert( p->pRight==0 || p->pRight->token.z==0 || p->pRight->token.z[0]!=0 );'), (74921, 1, u'+  assert( pSelect!=0 );'), (74922, 1, u'+  assert( (pSelect->selFlags & SF_Resolved)!=0 );'), (74923, 1, u'+  assert( nCol==pSelect->pEList->nExpr || db->mallocFailed );'), (75131, 1, u'+  assert( p && p->pPrior );  /* Calling function guarantees this much */'), (75134, 1, u'+  assert( pPrior->pRightmost!=pPrior );'), (75135, 1, u'+  assert( pPrior->pRightmost==p->pRightmost );'), (75151, 1, u'+  assert( v!=0 );  /* The VDBE already created by calling function */'), (75156, 1, u'+    assert( p->pEList );'), (75164, 1, u'+  assert( p->pEList && pPrior->pEList );'), (75183, 1, u'+      assert( !pPrior->pLimit );'), (75226, 1, u'+        assert( p->pLimit==0 );      /* Not allowed on leftward elements */'), (75227, 1, u'+        assert( p->pOffset==0 );     /* Not allowed on leftward elements */'), (75234, 1, u'+        assert( p->pOrderBy==0 );'), (75236, 1, u'+        assert( p->addrOpenEphm[0] == -1 );'), (75239, 1, u'+        assert( p->pEList );'), (75244, 1, u'+      assert( !pPrior->pOrderBy );'), (75256, 1, u'+        assert( p->op==TK_UNION );'), (75287, 1, u'+        assert( p->pEList );'), (75321, 1, u'+      assert( p->pOrderBy==0 );'), (75324, 1, u'+      assert( p->addrOpenEphm[0] == -1 );'), (75327, 1, u'+      assert( p->pEList );'), (75340, 1, u'+      assert( p->addrOpenEphm[1] == -1 );'), (75361, 1, u'+      assert( p->pEList );'), (75402, 1, u'+    assert( p->pRightmost==p );'), (75427, 1, u'+          assert( pLoop->addrOpenEphm[1]<0 );'), (75525, 1, u'+      assert( pIn->nMem==1 );'), (75551, 1, u'+      assert( pIn->nMem==1 );'), (75735, 1, u'+  assert( p->pOrderBy!=0 );'), (75736, 1, u'+  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */'), (75748, 1, u'+  assert( pPrior->pOrderBy==0 );'), (75750, 1, u'+  assert( pOrderBy );'), (75761, 1, u'+        assert( pItem->iCol>0 );'), (75786, 1, u'+      assert( pItem->iCol>0  && pItem->iCol<=p->pEList->nExpr );'), (75826, 1, u'+    assert( nOrderBy>=nExpr || db->mallocFailed );'), (76066, 1, u'+      assert( pEList!=0 && pExpr->iColumn<pEList->nExpr );'), (76067, 1, u'+      assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (76069, 1, u'+      assert( pNew!=0 );'), (76071, 1, u'+      assert( pExpr->pLeft==0 );'), (76073, 1, u'+      assert( pExpr->pRight==0 );'), (76081, 1, u'+      assert( pExpr->x.pList==0 && pExpr->x.pSelect==0 );'), (76130, 1, u'+  assert( pSrc );  /* Even for (SELECT 1) we have: pSrc!=0 but pSrc->nSrc==0 */'), (76268, 1, u'+  assert( p!=0 );'), (76269, 1, u'+  assert( p->pPrior==0 );  /* Unable to flatten compound queries */'), (76271, 1, u'+  assert( pSrc && iFrom>=0 && iFrom<pSrc->nSrc );'), (76275, 1, u'+  assert( pSub!=0 );'), (76279, 1, u'+  assert( pSubSrc );'), (76488, 1, u'+      assert( pParent==p );  /* First time through the loop */'), (76491, 1, u'+      assert( pParent!=p );  /* 2nd and subsequent times through the loop */'), (76494, 1, u'+        assert( db->mallocFailed );'), (76556, 1, u'+      assert( pParent->pOrderBy==0 );'), (76568, 1, u'+      assert( pParent->pHaving==0 );'), (76574, 1, u'+      assert( pParent->pGroupBy==0 );'), (76652, 1, u'+  assert( !p->pGroupBy );'), (76661, 1, u'+  assert( pTab && !pTab->pSelect && pExpr );'), (76752, 1, u'+      assert( i==0 );'), (76759, 1, u'+      assert( pSel!=0 );'), (76760, 1, u'+      assert( pFrom->pTab==0 );'), (76774, 1, u'+      assert( pFrom->pTab==0 );'), (76879, 1, u'+              assert(IsVirtual(pTab));'), (77000, 1, u'+  assert( p->selFlags & SF_Resolved );'), (77010, 1, u'+        assert( pSel );'), (77089, 1, u'+      assert( !ExprHasProperty(pE, EP_xIsSelect) );'), (77113, 1, u'+    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (77135, 1, u'+    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (77146, 1, u'+      assert( nArg==1 );'), (77153, 1, u'+      assert( pList!=0 );  /* pList!=0 if pF->pFunc has NEEDCOLL */'), (77268, 1, u'+    assert(pDest->eDest==SRT_Exists || pDest->eDest==SRT_Union ||'), (77329, 1, u'+      assert( pItem->isPopulated==0 );'), (77425, 1, u'+    assert( isAgg || pGroupBy );'), (77453, 1, u'+    assert(!isDistinct);'), (77508, 1, u'+      assert( !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) );'), (77802, 1, u'+          assert( !ExprHasProperty(p->pEList->a[0].pExpr, EP_xIsSelect) );'), (78117, 1, u'+  assert( sizeof(res.azResult[0])>= sizeof(res.nData) );'), (78161, 1, u'+    assert( azResult!=0 );'), (78259, 1, u'+  assert( pName1!=0 );   /* pName1->z might be NULL, but not pName1 itself */'), (78260, 1, u'+  assert( pName2!=0 );'), (78261, 1, u'+  assert( op==TK_INSERT || op==TK_UPDATE || op==TK_DELETE );'), (78262, 1, u'+  assert( op>0 && op<0xff );'), (78294, 1, u'+  assert( pTableName->nSrc==1 );'), (78382, 1, u'+  assert( pParse->pNewTrigger==0 );'), (78393, 1, u'+    assert( pParse->pNewTrigger==pTrigger );'), (78460, 1, u'+      assert( pTab!=0 );'), (78468, 1, u'+  assert( !pParse->pNewTrigger );'), (78548, 1, u'+  assert(pEList == 0 || pSelect == 0);'), (78549, 1, u'+  assert(pEList != 0 || pSelect != 0 || db->mallocFailed);'), (78658, 1, u'+  assert( pName->nSrc==1 );'), (78700, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (78702, 1, u'+  assert( pTable );'), (78703, 1, u'+  assert( pTable->pSchema==pTrigger->pSchema || iDb==1 );'), (78719, 1, u'+  assert( pTable!=0 );'), (78801, 1, u'+  assert( pList==0 || IsVirtual(pTab)==0 );'), (78833, 1, u'+    assert( iDb<pParse->db->nDb );'), (78857, 1, u'+  assert( pTriggerStep!=0 );'), (78858, 1, u'+  assert( v!=0 );'), (78908, 1, u'+        assert(0);'), (78966, 1, u'+  assert(op == TK_UPDATE || op == TK_INSERT || op == TK_DELETE);'), (78967, 1, u'+  assert(tr_tm == TRIGGER_BEFORE || tr_tm == TRIGGER_AFTER );'), (78969, 1, u'+  assert(newIdx != -1 || oldIdx != -1);'), (79108, 1, u'+    assert( i<pTab->nCol );'), (79179, 1, u'+  assert( pTabList->nSrc==1 );'), (79441, 1, u'+        assert( pParse->nTab>iCur+i+1 );'), (79683, 1, u'+  assert( pTab->iPKey<0 );'), (79697, 1, u'+  assert( v );'), (79858, 1, u'+  assert( strcmp(db->aDb[db->nDb-1].zName,"vacuum_db")==0 );'), (79981, 1, u'+    assert( 1==sqlite3BtreeIsInTrans(pTemp) );'), (79982, 1, u'+    assert( 1==sqlite3BtreeIsInTrans(pMain) );'), (80137, 1, u'+  assert( pVtab->nRef>0 );'), (80139, 1, u'+  assert(db);'), (80140, 1, u'+  assert( sqlite3SafetyCheckOk(db) );'), (80162, 1, u'+    assert( p->pMod && p->pMod->pModule );'), (80224, 1, u'+  assert( 0==pTable->pIndex );'), (80228, 1, u'+  assert( iDb>=0 );'), (80347, 1, u'+      assert( pTab==pOld );  /* Malloc must have failed inside HashInsert() */'), (80375, 1, u'+    assert(pArg->z < p->z);'), (80404, 1, u'+  assert( !db->pVTab );'), (80405, 1, u'+  assert( xConstruct );'), (80409, 1, u'+  assert( rc==SQLITE_OK );'), (80466, 1, u"+          assert(zType[i-1]==' ');"), (80548, 1, u'+  assert(pTab && (pTab->tabFlags & TF_Virtual)!=0 && !pTab->pVtab);'), (80589, 1, u'+  assert((pTab->tabFlags & TF_Virtual)!=0 && pTab->nCol==0 && pTab->aCol==0);'), (80619, 1, u'+  assert( (rc&0xff)==rc );'), (80638, 1, u'+  assert(pTab);'), (80642, 1, u'+    assert( rc==SQLITE_OK );'), (80822, 1, u'+  assert( pVtab!=0 );'), (80823, 1, u'+  assert( pVtab->pModule!=0 );'), (80871, 1, u'+  assert( IsVirtual(pTab) );'), (81291, 1, u'+  assert( pMaskSet->n < ArraySize(pMaskSet->ix) );'), (81356, 1, u'+  assert( TK_GT>TK_EQ && TK_GT<TK_GE );'), (81357, 1, u'+  assert( TK_LT>TK_EQ && TK_LT<TK_GE );'), (81358, 1, u'+  assert( TK_LE>TK_EQ && TK_LE<TK_GE );'), (81359, 1, u'+  assert( TK_GE==TK_EQ+4 );'), (81383, 1, u'+  assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );'), (81391, 1, u'+    assert( TK_LT==TK_GT+2 );'), (81392, 1, u'+    assert( TK_GE==TK_LE+2 );'), (81393, 1, u'+    assert( TK_GT>TK_EQ );'), (81394, 1, u'+    assert( TK_GT<TK_LE );'), (81395, 1, u'+    assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );'), (81405, 1, u'+  assert( allowedOp(op) );'), (81411, 1, u'+    assert( (WO_EQ<<(op-TK_EQ)) < 0x7fff );'), (81414, 1, u'+  assert( op!=TK_ISNULL || c==WO_ISNULL );'), (81415, 1, u'+  assert( op!=TK_IN || c==WO_IN );'), (81416, 1, u'+  assert( op!=TK_EQ || c==WO_EQ );'), (81417, 1, u'+  assert( op!=TK_LT || c==WO_LT );'), (81418, 1, u'+  assert( op!=TK_LE || c==WO_LE );'), (81419, 1, u'+  assert( op!=TK_GT || c==WO_GT );'), (81420, 1, u'+  assert( op!=TK_GE || c==WO_GE );'), (81440, 1, u'+  assert( iCur>=0 );'), (81462, 1, u'+        assert(pX->pLeft);'), (81464, 1, u'+        assert(pColl || pParse->nErr);'), (81536, 1, u'+  assert( pColl!=0 || pLeft->iColumn==-1 );'), (81700, 1, u'+  assert( (pTerm->wtFlags & (TERM_DYNAMIC|TERM_ORINFO|TERM_ANDINFO))==0 );'), (81701, 1, u'+  assert( pExpr->op==TK_OR );'), (81710, 1, u'+  assert( pOrWc->nTerm>=2 );'), (81719, 1, u'+      assert( pOrTerm->eOperator==0 );'), (81720, 1, u'+      assert( (pOrTerm->wtFlags & (TERM_ANDINFO|TERM_ORINFO))==0 );'), (81738, 1, u'+            assert( pAndTerm->pExpr );'), (81792, 1, u'+        assert( pOrTerm->eOperator==WO_EQ );'), (81801, 1, u'+        assert( j==1 );'), (81802, 1, u'+        assert( (chngToIN&(chngToIN-1))==0 );'), (81803, 1, u'+        assert( chngToIN==getMask(pMaskSet, iColumn) );'), (81808, 1, u'+        assert( pOrTerm->eOperator==WO_EQ );'), (81842, 1, u'+        assert( pOrTerm->eOperator==WO_EQ );'), (81843, 1, u'+        assert( pOrTerm->leftCursor==iCursor );'), (81844, 1, u'+        assert( pOrTerm->u.leftColumn==iColumn );'), (81849, 1, u'+      assert( pLeft!=0 );'), (81855, 1, u'+        assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (81918, 1, u'+    assert( pExpr->pRight==0 );'), (81999, 1, u'+    assert( pList!=0 );'), (82000, 1, u'+    assert( pList->nExpr==2 );'), (82021, 1, u'+    assert( pWC->op==TK_AND );'), (82177, 1, u'+  assert( pOrderBy!=0 );'), (82179, 1, u'+  assert( nTerm>0 );'), (82236, 1, u'+    assert( pIdx->aSortOrder!=0 );'), (82237, 1, u'+    assert( pTerm->sortOrder==0 || pTerm->sortOrder==1 );'), (82238, 1, u'+    assert( iSortOrder==0 || iSortOrder==1 );'), (82292, 1, u'+  assert( pOrderBy!=0 );'), (82293, 1, u'+  assert( pOrderBy->nExpr>0 );'), (82414, 1, u'+      assert( (pTerm->eOperator&(pTerm->eOperator-1))==0 );'), (82465, 1, u'+      assert( (pTerm->eOperator&(pTerm->eOperator-1))==0 );'), (82475, 1, u'+      assert( WO_EQ==SQLITE_INDEX_CONSTRAINT_EQ );'), (82476, 1, u'+      assert( WO_LT==SQLITE_INDEX_CONSTRAINT_LT );'), (82477, 1, u'+      assert( WO_LE==SQLITE_INDEX_CONSTRAINT_LE );'), (82478, 1, u'+      assert( WO_GT==SQLITE_INDEX_CONSTRAINT_GT );'), (82479, 1, u'+      assert( WO_GE==SQLITE_INDEX_CONSTRAINT_GE );'), (82480, 1, u'+      assert( WO_MATCH==SQLITE_INDEX_CONSTRAINT_MATCH );'), (82481, 1, u'+      assert( pTerm->eOperator & (WO_EQ|WO_LT|WO_LE|WO_GT|WO_GE|WO_MATCH) );'), (82502, 1, u'+  assert( pTab->azModuleArg && pTab->azModuleArg[0] );'), (82503, 1, u'+  assert( pVtab );'), (82943, 1, u'+      assert( pCost->plan.wsFlags & WHERE_INDEXED );'), (83003, 1, u'+    assert( v!=0 );'), (83032, 1, u'+  assert( iTarget>0 );'), (83044, 1, u'+    assert( pX->op==TK_IN );'), (83050, 1, u'+    assert( pLevel->plan.wsFlags & WHERE_IN_ABLE );'), (83117, 1, u'+  assert( pLevel->plan.wsFlags & WHERE_INDEXED );'), (83128, 1, u'+  assert( pIdx->nColumn>=nEq );'), (83134, 1, u'+    assert( (pTerm->wtFlags & TERM_CODED)==0 );'), (83252, 1, u'+          assert( pParse->disableColCache );'), (83259, 1, u'+    assert( pParse->disableColCache );'), (83293, 1, u'+    assert( pTerm!=0 );'), (83294, 1, u'+    assert( pTerm->pExpr!=0 );'), (83295, 1, u'+    assert( pTerm->leftCursor==iCur );'), (83296, 1, u'+    assert( omitTable==0 );'), (83316, 1, u'+    assert( omitTable==0 );'), (83337, 1, u'+      assert( TK_LE==TK_GT+1 );      /* Make sure the ordering.. */'), (83338, 1, u'+      assert( TK_LT==TK_GT+2 );      /*  ... of the TK_xx values... */'), (83339, 1, u'+      assert( TK_GE==TK_GT+3 );      /*  ... is correcct. */'), (83342, 1, u'+      assert( pX!=0 );'), (83343, 1, u'+      assert( pStart->leftCursor==iCur );'), (83356, 1, u'+      assert( pX!=0 );'), (83357, 1, u'+      assert( pEnd->leftCursor==iCur );'), (83524, 1, u'+    assert( op!=0 );'), (83628, 1, u'+    assert( pTerm!=0 );'), (83629, 1, u'+    assert( pTerm->eOperator==WO_OR );'), (83630, 1, u'+    assert( (pTerm->wtFlags & TERM_ORINFO)!=0 );'), (83676, 1, u'+    assert( bRev==0 || bRev==1 );'), (83677, 1, u'+    assert( omitTable==0 );'), (83697, 1, u'+    assert( pE!=0 );'), (83722, 1, u'+      assert( pTerm->pExpr );'), (83771, 1, u'+        assert( pInfo->needToFreeIdxStr==0 || db->mallocFailed );'), (83967, 1, u'+      assert( (m-1)==toTheLeft );'), (84024, 1, u'+      assert( pTabItem->pTab );'), (84060, 1, u'+    assert( once );'), (84061, 1, u'+    assert( notReady & getMask(pMaskSet, pTabList->a[bestJ].iCursor) );'), (84091, 1, u'+        assert( bestPlan.plan.u.pIdx==pIdx );'), (84112, 1, u'+  assert( (wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || pWInfo->nLevel==1 );'), (84175, 1, u'+        assert( n<=pTab->nCol );'), (84185, 1, u'+      assert( pIx->pSchema==pTab->pSchema );'), (84186, 1, u'+      assert( iIdxCur>=0 );'), (84321, 1, u'+    assert( pTab!=0 );'), (84351, 1, u'+      assert( pIdx!=0 );'), (84364, 1, u'+          assert(!useIndexOnly || j<pIdx->nColumn);'), (85856, 1, u'+  assert( iLookAhead!=YYNOCODE );'), (85912, 1, u'+  assert( stateno<=YY_REDUCE_MAX );'), (85915, 1, u'+  assert( i!=YY_REDUCE_USE_DFLT );'), (85916, 1, u'+  assert( iLookAhead!=YYNOCODE );'), (85923, 1, u'+  assert( i>=0 && i<YY_SZ_ACTTAB );'), (85924, 1, u'+  assert( yy_lookahead[i]==iLookAhead );'), (87291, 1, u'+  assert( yymsp[-2].minor.yy145!=0 );'), (87300, 1, u'+  assert( yymsp[-1].minor.yy145!=0 );'), (87430, 1, u'+    assert( yyact == YYNSTATE + YYNRULE + 1 );'), (87465, 1, u'+  assert( TOKEN.z[0] );  /* The tokenizer always gives us a token */'), (87551, 1, u'+      assert( !yyendofinput );  /* Impossible to shift the $ token */'), (87558, 1, u'+      assert( yyact == YY_ERROR_ACTION );'), (88317, 1, u'+  assert( pzErrMsg!=0 );'), (88323, 1, u'+  assert( pParse->sLastToken.dyn==0 );'), (88324, 1, u'+  assert( pParse->pNewTable==0 );'), (88325, 1, u'+  assert( pParse->pNewTrigger==0 );'), (88326, 1, u'+  assert( pParse->nVar==0 );'), (88327, 1, u'+  assert( pParse->nVarExpr==0 );'), (88328, 1, u'+  assert( pParse->nVarExprAlloc==0 );'), (88329, 1, u'+  assert( pParse->apVarExpr==0 );'), (88333, 1, u'+    assert( i>=0 );'), (88335, 1, u'+    assert( pParse->sLastToken.dyn==0 );'), (88988, 1, u'+    assert( sqlite3GlobalConfig.nRefInitMutex==0 );'), (89005, 1, u'+    assert(sizeof(x)==8);'), (89006, 1, u'+    assert(sizeof(x)==sizeof(y));'), (89008, 1, u'+    assert( sqlite3IsNaN(y) );'), (89228, 1, u'+    assert( sz > (int)sizeof(LookasideSlot*) );'), (89414, 1, u'+  assert( sqlite3SafetyCheckSickOrOk(db) );'), (89446, 1, u'+  assert( db->nDb<=2 );'), (89447, 1, u'+  assert( db->aDb==db->aDbStatic );'), (89499, 1, u'+  assert( db->lookaside.nOut==0 );  /* Fails on a lookaside memory leak */'), (89513, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (89596, 1, u'+  assert( count>=0 );'), (89725, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (89773, 1, u'+      assert( !db->mallocFailed );'), (89781, 1, u'+  assert(p || db->mallocFailed);'), (89829, 1, u'+  assert( !db->mallocFailed );'), (90002, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (90003, 1, u'+  assert( ppBtree != 0);'), (90060, 1, u'+    assert( !db->mallocFailed );'), (90155, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (90356, 1, u'+  assert( sizeof(db->aLimit)==sizeof(aHardLimit) );'), (90393, 1, u'+  assert( db->pDfltColl!=0 );'), (90501, 1, u'+    assert( db->mutex!=0 || isThreadsafe==0 || sqlite3GlobalConfig.bFullMutex==0 );'), (90546, 1, u'+  assert( zFilename );'), (90547, 1, u'+  assert( ppDb );'), (90559, 1, u'+    assert( *ppDb || rc==SQLITE_NOMEM );'), (90584, 1, u'+  assert( !db->mallocFailed );'), (90604, 1, u'+  assert( !db->mallocFailed );'), (90625, 1, u'+  assert( !db->mallocFailed );'), (90882, 1, u'+      assert( pPager!=0 );'), (90884, 1, u'+      assert( fd!=0 );'), (91020, 1, u'+#define assertMutexHeld() \\'), (91021, 1, u'+  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) )'), (91053, 1, u'+    assert( p->pUnlockConnection || p->pBlockingConnection );'), (91058, 1, u'+      assert( p2->xUnlockNotify==p->xUnlockNotify || !seen );'), (91059, 1, u'+      assert( db==0 || p->pUnlockConnection!=db );'), (91060, 1, u'+      assert( db==0 || p->pBlockingConnection!=db );'), (91074, 1, u'+  assertMutexHeld();'), (91089, 1, u'+  assertMutexHeld();'), (91111, 1, u'+  assertMutexHeld();'), (91174, 1, u'+  assert( !db->mallocFailed );'), (91236, 1, u'+      assert( p->xUnlockNotify );'), (91243, 1, u'+      assert( aArg==aDyn || (aDyn==0 && aArg==aStatic) );'), (91244, 1, u'+      assert( nArg<=(int)ArraySize(aStatic) || aArg==aDyn );'), (92076, 1, u'+  assert( q - (unsigned char *)p <= VARINT_MAX );'), (92090, 1, u'+      assert( 0 );'), (92103, 1, u'+ assert( *pi==i );'), (92128, 1, u'+  assert( nCapacity>=0 );'), (92146, 1, u'+  assert( nAddCapacity>0 );'), (92158, 1, u'+  assert( nSource>0 && pSource!=NULL );'), (92166, 1, u'+  assert( nSource1>0 && pSource1!=NULL );'), (92167, 1, u'+  assert( nSource2>0 && pSource2!=NULL );'), (92199, 1, u'+  assert( sb->b.nData>0 );'), (92274, 1, u'+  assert( pReader->nData>=0 );'), (92278, 1, u'+  assert( !dlrAtEnd(pReader) );'), (92282, 1, u'+  assert( !dlrAtEnd(pReader) );'), (92286, 1, u'+  assert( !dlrAtEnd(pReader) );'), (92290, 1, u'+  assert( !dlrAtEnd(pReader) );'), (92300, 1, u'+  assert( !dlrAtEnd(pReader) );'), (92306, 1, u'+  assert( !dlrAtEnd(pReader) );'), (92310, 1, u'+  assert( !dlrAtEnd(pReader) );'), (92313, 1, u'+  assert( pReader->nElement<=pReader->nData );'), (92323, 1, u'+      assert( n<pReader->nData );'), (92326, 1, u'+        assert( n<=pReader->nData );'), (92330, 1, u'+          assert( n<pReader->nData );'), (92334, 1, u'+          assert( n<pReader->nData );'), (92339, 1, u'+    assert( pReader->nElement<=pReader->nData );'), (92344, 1, u'+  assert( pData!=NULL && nData!=0 );'), (92366, 1, u'+  assert( nData>0 );'), (92367, 1, u'+  assert( pData!=0 );'), (92368, 1, u'+  assert( pData+nData>pData );'), (92384, 1, u'+        assert( n<=nData );'), (92387, 1, u'+    assert( n<=nData );'), (92393, 1, u'+#define ASSERT_VALID_DOCLIST(i, p, n, o) docListValidate(i, p, n, o)'), (92395, 1, u'+#define ASSERT_VALID_DOCLIST(i, p, n, o) assert( 1 )'), (92454, 1, u'+  assert( nFirstOld<nData || (nFirstOld==nData && pWriter->iType==DL_DOCIDS) );'), (92461, 1, u'+  ASSERT_VALID_DOCLIST(pWriter->iType, pData, nData, &iLastDocidDelta);'), (92462, 1, u'+  assert( iLastDocid==iFirstDocid-iDocid+iLastDocidDelta );'), (92484, 1, u'+  assert( !pWriter->has_iPrevDocid || iDocid>pWriter->iPrevDocid );'), (92485, 1, u'+  assert( pWriter->iType==DL_DOCIDS );'), (92523, 1, u'+  assert( !plrAtEnd(pReader) );'), (92527, 1, u'+  assert( !plrAtEnd(pReader) );'), (92531, 1, u'+  assert( !plrAtEnd(pReader) );'), (92535, 1, u'+  assert( !plrAtEnd(pReader) );'), (92541, 1, u'+  assert( !plrAtEnd(pReader) );'), (92556, 1, u'+  assert( i!=POS_COLUMN );'), (92571, 1, u'+  assert( n<=pReader->nData );'), (92635, 1, u'+  assert( pWriter->iPos!=-1 );'), (92646, 1, u'+  assert( iPos>=pWriter->iPos );'), (92650, 1, u'+    assert( iStartOffset>=pWriter->iOffset );'), (92653, 1, u'+    assert( iEndOffset>=iStartOffset );'), (92669, 1, u'+  assert( !pWriter->dlw->has_iPrevDocid || iDocid>pWriter->dlw->iPrevDocid );'), (92778, 1, u'+  assert( iOutType<=iType );'), (92876, 1, u'+  assert( nReaders>0 );'), (92882, 1, u'+  assert( nReaders<=MERGE_COUNT );'), (92885, 1, u'+    assert( pReaders[i].iType==pReaders[0].iType );'), (92945, 1, u'+  assert( pLeft->iType==pRight->iType );'), (92976, 1, u'+  assert( dlrDocid(pLeft)==dlrDocid(pRight) );'), (92977, 1, u'+  assert( pLeft->iType==pRight->iType );'), (92978, 1, u'+  assert( pLeft->iType==pOut->iType );'), (93087, 1, u'+  assert( dlrDocid(pLeft)==dlrDocid(pRight) );'), (93088, 1, u'+  assert( pOut->iType!=DL_POSITIONS_OFFSETS );'), (93141, 1, u'+  assert(!plrAtEnd(pLeft) || !plrAtEnd(pRight));'), (93191, 1, u'+  assert( iType!=DL_POSITIONS_OFFSETS );'), (93437, 1, u'+  assert( r == result + len );'), (93685, 1, u'+  assert( iStmt<MAX_STMT );'), (93730, 1, u'+  assert( idx>=-1 && idx<MERGE_COUNT );'), (94432, 1, u'+  assert( argc>=3 );'), (94836, 1, u'+    assert(p && p->eType==FTSQUERY_PHRASE );'), (94842, 1, u'+        assert( p->pParent->pRight==p );'), (94847, 1, u'+        assert( p->pRight!=0 );'), (94933, 1, u'+      assert( pToken->n<=nToken );'), (95012, 1, u'+        assert( pRight->eType==FTSQUERY_PHRASE );'), (95013, 1, u'+        assert( pLeft->eType==FTSQUERY_PHRASE );'), (95400, 1, u'+  assert( eType==DL_POSITIONS || eType==DL_DOCIDS );'), (95406, 1, u'+  assert( pTab->nPendingData<0 );'), (95477, 1, u'+            assert( pExpr->pRight->eType==FTSQUERY_PHRASE );'), (95478, 1, u'+            assert( pLeft->eType==FTSQUERY_PHRASE );'), (95546, 1, u'+    assert( 0==(*ppExpr) );'), (95616, 1, u'+    assert( c->iCursorType==idxNum );'), (95632, 1, u'+      assert( idxNum<=QUERY_FULLTEXT+v->nColumn);'), (95633, 1, u'+      assert( argc==1 );'), (95919, 1, u'+  assert( nData>0 );'), (95920, 1, u'+  assert( pData!=0 );'), (95921, 1, u'+  assert( pData+nData>pData );'), (95925, 1, u'+  assert( n>0 );'), (95926, 1, u'+  assert( iDummy>0 );'), (95927, 1, u'+  assert( n<nData );'), (95933, 1, u'+  assert( n>0 );'), (95934, 1, u'+  assert( n<=nData );'), (95942, 1, u'+    assert( n>0 );'), (95943, 1, u'+    assert( iDummy>0 );'), (95944, 1, u'+    assert( n+iDummy>0);'), (95945, 1, u'+    assert( n+iDummy<=nData );'), (95953, 1, u'+      assert( n>0 );'), (95954, 1, u'+      assert( iDummy>=0 );'), (95955, 1, u'+      assert( n<nData );'), (95961, 1, u'+      assert( n>0 );'), (95962, 1, u'+      assert( iDummy>0 );'), (95963, 1, u'+      assert( n+iDummy>0);'), (95964, 1, u'+      assert( n+iDummy<=nData );'), (95970, 1, u'+#define ASSERT_VALID_INTERIOR_BLOCK(x) interiorBlockValidate(x)'), (95972, 1, u'+#define ASSERT_VALID_INTERIOR_BLOCK(x) assert( 1 )'), (95995, 1, u'+  assert( iHeight>0 );'), (96005, 1, u'+  ASSERT_VALID_INTERIOR_BLOCK(pWriter->last);'), (96018, 1, u'+  ASSERT_VALID_INTERIOR_BLOCK(pWriter->last);'), (96041, 1, u'+  assert( pWriter->iLastChildBlock==iChildBlock );'), (96058, 1, u'+  ASSERT_VALID_INTERIOR_BLOCK(pWriter->last);'), (96105, 1, u'+  ASSERT_VALID_INTERIOR_BLOCK(block);'), (96119, 1, u'+    ASSERT_VALID_INTERIOR_BLOCK(block);'), (96159, 1, u'+  assert( nData>0 );'), (96160, 1, u"+  assert( pData[0]!='\\0' );"), (96166, 1, u'+  assert( 1+n<=nData );'), (96180, 1, u'+    assert( n+nTerm<=pReader->nData );'), (96195, 1, u'+  assert( !interiorReaderAtEnd(pReader) );'), (96199, 1, u'+  assert( !interiorReaderAtEnd(pReader) );'), (96205, 1, u'+  assert( !interiorReaderAtEnd(pReader) );'), (96222, 1, u'+    assert( n+nSuffix<=pReader->nData );'), (96316, 1, u'+  assert( nData>0 );'), (96317, 1, u'+  assert( pData!=0 );'), (96318, 1, u'+  assert( pData+nData>pData );'), (96322, 1, u'+  assert( iDummy==0 );'), (96323, 1, u'+  assert( n>0 );'), (96324, 1, u'+  assert( n<nData );'), (96330, 1, u'+  assert( n>0 );'), (96331, 1, u'+  assert( iDummy>0 );'), (96332, 1, u'+  assert( n+iDummy>0 );'), (96333, 1, u'+  assert( n+iDummy<nData );'), (96339, 1, u'+  assert( n>0 );'), (96340, 1, u'+  assert( iDummy>0 );'), (96341, 1, u'+  assert( n+iDummy>0 );'), (96342, 1, u'+  assert( n+iDummy<=nData );'), (96343, 1, u'+  ASSERT_VALID_DOCLIST(DL_DEFAULT, pData+n, iDummy, NULL);'), (96350, 1, u'+    assert( n>0 );'), (96351, 1, u'+    assert( iDummy>=0 );'), (96352, 1, u'+    assert( n<nData );'), (96356, 1, u'+    assert( n>0 );'), (96357, 1, u'+    assert( iDummy>0 );'), (96358, 1, u'+    assert( n+iDummy>0 );'), (96359, 1, u'+    assert( n+iDummy<nData );'), (96364, 1, u'+    assert( n>0 );'), (96365, 1, u'+    assert( iDummy>0 );'), (96366, 1, u'+    assert( n+iDummy>0 );'), (96367, 1, u'+    assert( n+iDummy<=nData );'), (96368, 1, u'+    ASSERT_VALID_DOCLIST(DL_DEFAULT, pData+n, iDummy, NULL);'), (96373, 1, u'+#define ASSERT_VALID_LEAF_NODE(p, n) leafNodeValidate(p, n)'), (96375, 1, u'+#define ASSERT_VALID_LEAF_NODE(p, n) assert( 1 )'), (96391, 1, u'+  assert( nData>2 );'), (96392, 1, u'+  assert( iData>=0 );'), (96393, 1, u'+  assert( iData+nData<=pWriter->data.nData );'), (96394, 1, u'+  ASSERT_VALID_LEAF_NODE(pWriter->data.pData+iData, nData);'), (96398, 1, u'+  assert( iBlockid!=0 );'), (96405, 1, u'+  assert( pWriter->data.nData>iData+1+n+nStartingTerm );'), (96406, 1, u'+  assert( pWriter->nTermDistinct>0 );'), (96407, 1, u'+  assert( pWriter->nTermDistinct<=nStartingTerm );'), (96424, 1, u'+    assert( iBlockid==pWriter->iEndBlockid );'), (96464, 1, u'+  assert( pWriter->has_parent );'), (96513, 1, u'+  assert( nTerm>0 );'), (96518, 1, u'+    assert( nPrefix<nTerm );'), (96562, 1, u'+  assert( iDoclistData>=n+nTerm );'), (96581, 1, u'+  ASSERT_VALID_LEAF_NODE(pWriter->data.pData, pWriter->data.nData);'), (96599, 1, u'+  ASSERT_VALID_DOCLIST(DL_DEFAULT,'), (96610, 1, u'+  assert( nActualData<=nData );'), (96611, 1, u'+  assert( nActual<=n );'), (96680, 1, u'+    assert( n<iDoclistData );'), (96684, 1, u'+    assert( 2*STANDALONE_MIN<=LEAF_MAX );'), (96685, 1, u'+    assert( n+pWriter->data.nData-iDoclistData<iDoclistData );'), (96691, 1, u'+  ASSERT_VALID_LEAF_NODE(pWriter->data.pData, pWriter->data.nData);'), (96739, 1, u'+  assert( pReader->term.nData>0 );'), (96746, 1, u'+  assert( pReader->term.nData>0 );'), (96752, 1, u'+  assert( pReader->term.nData>0 );'), (96761, 1, u'+  assert( nData>0 );'), (96762, 1, u"+  assert( pData[0]=='\\0' );"), (96772, 1, u'+  assert( 1+n+nTerm<nData );'), (96780, 1, u'+  assert( !leafReaderAtEnd(pReader) );'), (96784, 1, u'+  assert( n+nData<=pReader->nData );'), (96794, 1, u'+    assert( n+nSuffix<pReader->nData );'), (96838, 1, u'+  assert( !pReader->eof );'), (96842, 1, u'+  assert( !pReader->eof );'), (96848, 1, u'+  assert( !pReader->eof );'), (96852, 1, u'+  assert( !pReader->eof );'), (96938, 1, u'+  assert( !leavesReaderAtEnd(pReader) );'), (97017, 1, u'+    assert( i<MERGE_COUNT );'), (97052, 1, u'+  assert( nReaders<=MERGE_COUNT );'), (97111, 1, u'+  assert( i==MERGE_COUNT );'), (97192, 1, u'+  assert( nTerm>0 );'), (97226, 1, u'+            assert(pBuffers!=NULL);'), (97237, 1, u'+      assert(iBuffer<nBuffers && pBuffers[iBuffer].nData==0);'), (97302, 1, u'+  assert( nData>1 );'), (97303, 1, u"+  assert( *pData=='\\0' );"), (97324, 1, u'+  assert( iStartLeaf<=iEndLeaf );'), (97351, 1, u'+  assert( nData>1 );'), (97352, 1, u"+  assert( *pData!='\\0' );"), (97375, 1, u'+  assert( *piEndChild>=*piStartChild );'), (97376, 1, u'+  assert( isPrefix || *piStartChild==*piEndChild );'), (97391, 1, u'+  assert( iBlockid!=0 );'), (97392, 1, u'+  assert( pTerm!=NULL );'), (97393, 1, u'+  assert( nTerm!=0 );        /* TODO(shess) Why not allow this? */'), (97394, 1, u'+  assert( piStartChild!=NULL );'), (97395, 1, u'+  assert( piEndChild!=NULL );'), (97454, 1, u'+      assert( iNextStart<=iNextEnd );'), (97458, 1, u'+    assert( iStartChild<=iLeavesEnd );'), (97459, 1, u'+    assert( iEndChild<=iLeavesEnd );'), (97491, 1, u'+  assert( nData>1 );'), (97494, 1, u'+  assert( v->nPendingData<0 );'), (97539, 1, u'+  assert( v->nPendingData<0 );'), (97612, 1, u'+    assert( i<n );'), (97617, 1, u'+  assert( i==n );'), (97736, 1, u'+      assert( nArg==2+v->nColumn+2);'), (97747, 1, u'+    assert( nArg==2+v->nColumn+2);'), (97781, 1, u'+  assert( v->nPendingData<0 );'), (97790, 1, u'+  assert( v->nPendingData<0 );'), (97972, 1, u'+      assert( iReader<i );  /* Must execute the loop at least once. */'), (98083, 1, u'+      assert( i<nReaders );'), (98094, 1, u'+      assert( i==nReaders );'), (98195, 1, u'+  assert( nTerms>0 );'), (98202, 1, u'+    assert( iTerm<nTerms );'), (98207, 1, u'+  assert( iTerm==nTerms );'), (98209, 1, u'+  assert( nResultBytes>0 );   /* nTerms>0, nResultsBytes must be, too. */'), (98225, 1, u'+  assert( iByte==nResultBytes );'), (98226, 1, u"+  assert( result[nResultBytes-1]==' ' );"), (98298, 1, u'+          assert( rc==SQLITE_OK );'), (98324, 1, u'+  assert( pData!=NULL && nData>0 );'), (98347, 1, u'+          assert( dump.nData>0 );'), (98349, 1, u"+          assert( dump.pData[dump.nData]==' ');"), (98359, 1, u'+          assert( NULL=="Unhandled DL_DEFAULT value");'), (98365, 1, u'+      assert( dump.nData>0 );'), (98367, 1, u"+      assert( dump.pData[dump.nData]==' ');"), (98373, 1, u'+  assert( dump.nData>0 );'), (98375, 1, u"+  assert( dump.pData[dump.nData]==' ');"), (98377, 1, u'+  assert( dump.nData>0 );'), (98684, 1, u'+  assert( rc!=SQLITE_OK );'), (99040, 1, u'+        assert( nKey==4 );'), (99156, 1, u'+  assert( p->eType!=FTSQUERY_PHRASE );'), (99164, 1, u'+  assert( p->eType==FTSQUERY_AND );'), (99187, 1, u'+    assert( pSplit->pParent->pRight==pSplit );'), (99248, 1, u'+        assert( eType!=FTSQUERY_PHRASE || !p->pPhrase->isNot );'), (99265, 1, u'+          assert( pRet && pPrev );'), (99298, 1, u'+            assert( pPrev && pPrev->pLeft && pPrev->pRight==0 );'), (99309, 1, u'+      assert( nByte>0 );'), (99311, 1, u'+    assert( rc!=SQLITE_OK || (nByte>0 && nByte<=nIn) );'), (99542, 1, u'+  assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (99652, 1, u'+  assert( pNew!=0 );'), (99653, 1, u'+  assert( keyClass>=FTS3_HASH_STRING && keyClass<=FTS3_HASH_BINARY );'), (99669, 1, u'+  assert( pH!=0 );'), (99736, 1, u'+    assert( keyClass==FTS3_HASH_BINARY );'), (99751, 1, u'+    assert( keyClass==FTS3_HASH_BINARY );'), (99791, 1, u'+  assert( (new_size & (new_size-1))==0 );'), (99865, 1, u'+    assert( pH->first==0 );'), (99866, 1, u'+    assert( pH->count==0 );'), (99882, 1, u'+  assert( xHash!=0 );'), (99884, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (99916, 1, u'+  assert( pH!=0 );'), (99918, 1, u'+  assert( xHash!=0 );'), (99920, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (99957, 1, u'+  assert( pH->htsize>0 );'), (99958, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (100115, 1, u"+  assert( x>='a' && x<='z' );"), (100124, 1, u"+  assert( x>='a' && x<='z' );"), (100670, 1, u'+  assert( argc==1 || argc==2 );'), (100759, 1, u'+  assert( argc==2 || argc==3 );'), (100901, 1, u'+  assert( rc==SQLITE_OK );'), (100902, 1, u'+  assert( p1==p2 );'), (100904, 1, u'+  assert( rc==SQLITE_ERROR );'), (100905, 1, u'+  assert( p2==0 );'), (100906, 1, u'+  assert( 0==strcmp(sqlite3_errmsg(db), "unknown tokenizer: nosuchtokenizer") );'), (100910, 1, u'+  assert( rc==SQLITE_OK );'), (100912, 1, u'+  assert( rc==SQLITE_OK );'), (100913, 1, u'+  assert( p2==p1 );'), (101475, 1, u'+  assert( sizeof(RtreeCoord)==4 );'), (101476, 1, u'+  assert( sizeof(u32)==4 );'), (101532, 1, u'+  assert( iNode!=0 );'), (101543, 1, u'+    assert( pNode->pNext==0 );'), (101557, 1, u'+    for( ; (*pp)!=pNode; pp = &(*pp)->pNext){ assert(*pp); }'), (101600, 1, u'+    assert( !pParent || !pNode->pParent || pNode->pParent==pParent );'), (101640, 1, u'+  assert( (rc==SQLITE_OK && pNode) || (pNode==0 && rc!=SQLITE_OK) );'), (101694, 1, u'+  assert(nCell<=nMaxCell);'), (101738, 1, u'+    assert( pNode->nRef>0 );'), (101767, 1, u'+  assert( iCell<NCELL(pNode) );'), (101956, 1, u'+    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (101988, 1, u'+    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (102026, 1, u'+  assert( iHeight>=0 );'), (102056, 1, u'+    assert( pCursor->pNode==pChild );'), (102074, 1, u'+    assert( ii<(NCELL(pNode)-1) );'), (102136, 1, u'+  assert(pCsr->pNode);'), (102158, 1, u'+      assert( pRtree->eCoordType==RTREE_COORD_INT32 );'), (102228, 1, u'+        assert( (idxStr==0 && argc==0) || strlen(idxStr)==argc*2 );'), (102247, 1, u'+        assert( pCsr->pNode==pRoot );'), (102254, 1, u'+        assert( pCsr->pNode==pRoot );'), (102258, 1, u'+      assert( rc!=SQLITE_OK || !pCsr->pNode || pCsr->iCell<NCELL(pCsr->pNode) );'), (102308, 1, u'+  assert( pIdxInfo->idxStr==0 );'), (102353, 1, u'+        assert( compatible[RTREE_EQ & 7]==0 );'), (102354, 1, u'+        assert( compatible[RTREE_LT & 7]==1 );'), (102355, 1, u'+        assert( compatible[RTREE_LE & 7]==1 );'), (102356, 1, u'+        assert( compatible[RTREE_GT & 7]==2 );'), (102357, 1, u'+        assert( compatible[RTREE_GE & 7]==2 );'), (102368, 1, u'+        assert( iIdx<sizeof(zIdxStr)-1 );'), (102382, 1, u'+  assert( iIdx>=0 );'), (102861, 1, u'+        assert( left<=right );'), (102928, 1, u'+        assert( xleft1<=xright1 && (xleft1<xright1 || xleft2<=xright2) );'), (103259, 1, u'+  assert( pNode->nRef==1 );'), (103534, 1, u'+    assert( !pRtree->aHash[ii] );'), (103554, 1, u'+  assert(nData>=1);'), (103555, 1, u'+  assert(hashIsEmpty(pRtree));'), (103648, 1, u'+    assert( nData==(pRtree->nDim*2 + 3) );'), (104143, 1, u'+    assert(uPattern!=0);'), (104325, 1, u'+      assert(!pExpr);'), (104391, 1, u'+  assert(nArg==1 || nArg==2);'), (104450, 1, u'+  assert(!"Unexpected return value from ucol_strcoll()");'), (104479, 1, u'+  assert(nArg==2);'), (104492, 1, u'+  assert(p);'), (104762, 1, u'+    assert(iStart<=iEnd);')]
===========================================
Class: class Program : public ResourceManager::Resource<GLuint> { class Program : public ResourceManager::Resource<GLuint> 
Class: class Device : public ResourceManager::Resource<ALCdevice*> { class Device : public ResourceManager::Resource<ALCdevice*> 
Class: class Context : public ResourceManager::Resource<ALCcontext*> { class Context : public ResourceManager::Resource<ALCcontext*> 
Class: class Source : public ResourceManager::Resource<ALuint> { class Source : public ResourceManager::Resource<ALuint> 
Class:  class CNtpSocket { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(146, 1, u'+  assert(func);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(185, 1, u'+\t\tassert(m_activePreset.get());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 1, u'+    assert(samples == 2048);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(125, 1, u'+    assert(engine_val);'), (145, 1, u'+    assert(engine_val);'), (165, 1, u'+    assert(engine_val);'), (184, 1, u'+    assert(engine_val);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+\tassert(gen_expr);'), (48, 1, u'+\tassert(param);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+\t assert(param->engine_val);'), (54, 1, u'+  assert(!(eqn_ptr == NULL || param_matrix == NULL));'), (69, 1, u'+\tassert(index >= 0);'), (70, 1, u'+\tassert(param != 0);'), (71, 1, u'+\tassert(gen_expr != 0);')]
===========================================
Class:  class CVaPassNext{ class CVaPassNext
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
17483
Mismatch count:151181
Normal count:2968464
