projects/top_C/textmate
Going to process projects/top_C/textmate/all_log.txt 
---------- textmate ------------

===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tOAK_ASSERT_EQ(text::uppercase("au\xc3\x9fer"), "AUSSER");')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: test_upcase
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tOAK_ASSERT_EQ(text::uppercase("au\xc3\x9fer"), "AUSSER");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tOAK_ASSERT_EQ(text::uppercase("au\xc3\x9fer"), "AUSSER");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t\tOAK_ASSERT(CFStringGetCString(storage, &c[0], c.size(), kCFStringEncodingASCII));'), (22, 1, u'+\t\tOAK_ASSERT_EQ(buffer, c.substr(0, c.size()-1));'), (25, 2, u'-\tOAK_ASSERT(CFStringGetCString(storage, &c[0], c.size(), kCFStringEncodingASCII));'), (26, 2, u'-\tOAK_ASSERT_EQ(buffer, c.substr(0, c.size()-1));')]
===========================================
===========================================
Total add: 15
Total del: 10
Header: benchmark_cfstring_random_insert_1_mb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t\tOAK_ASSERT(CFStringGetCString(storage, &c[0], c.size(), kCFStringEncodingASCII));'), (22, 1, u'+\t\tOAK_ASSERT_EQ(buffer, c.substr(0, c.size()-1));'), (25, 2, u'-\tOAK_ASSERT(CFStringGetCString(storage, &c[0], c.size(), kCFStringEncodingASCII));'), (26, 2, u'-\tOAK_ASSERT_EQ(buffer, c.substr(0, c.size()-1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t\tOAK_ASSERT(CFStringGetCString(storage, &c[0], c.size(), kCFStringEncodingASCII));'), (22, 1, u'+\t\tOAK_ASSERT_EQ(buffer, c.substr(0, c.size()-1));'), (25, 2, u'-\tOAK_ASSERT(CFStringGetCString(storage, &c[0], c.size(), kCFStringEncodingASCII));'), (26, 2, u'-\tOAK_ASSERT_EQ(buffer, c.substr(0, c.size()-1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ(expand("{a,b,{c},d}"),     "a,d}:b,d}:{c,d}");'), (3, 1, u'+\tOAK_ASSERT_EQ(expand("{a,b,{c},d}"),     "a:b:{c}:d");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_glob_brace_expansion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ(expand("{a,b,{c},d}"),     "a,d}:b,d}:{c,d}");'), (3, 1, u'+\tOAK_ASSERT_EQ(expand("{a,b,{c},d}"),     "a:b:{c}:d");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ(expand("{a,b,{c},d}"),     "a,d}:b,d}:{c,d}");'), (3, 1, u'+\tOAK_ASSERT_EQ(expand("{a,b,{c},d}"),     "a:b:{c}:d");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}").size(),         4);'), (3, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}")[0],             "ac");'), (4, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}")[1],             "ad");'), (5, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}")[2],             "bc");'), (6, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}")[3],             "bd");'), (7, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}").size(),                4);'), (8, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}")[0],                    "ac");'), (9, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}")[1],                    "ad");'), (10, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}")[2],                    "bc");'), (11, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}")[3],                    "bd");')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: test_brace_expansion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}").size(),         4);'), (3, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}")[0],             "ac");'), (4, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}")[1],             "ad");'), (5, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}")[2],             "bc");'), (6, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}")[3],             "bd");'), (7, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}").size(),                4);'), (8, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}")[0],                    "ac");'), (9, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}")[1],                    "ad");'), (10, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}")[2],                    "bc");'), (11, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}")[3],                    "bd");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}").size(),         4);'), (3, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}")[0],             "ac");'), (4, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}")[1],             "ad");'), (5, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}")[2],             "bc");'), (6, 2, u'-\tOAK_ASSERT_EQ(expand_braces("{a,b}{c,d}")[3],             "bd");'), (7, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}").size(),                4);'), (8, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}")[0],                    "ac");'), (9, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}")[1],                    "ad");'), (10, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}")[2],                    "bc");'), (11, 1, u'+\tOAK_ASSERT_EQ(sorted("{a,b}{c,d}")[3],                    "bd");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ(match[3], NULL_STR);'), (3, 1, u'+\tOAK_ASSERT_EQ(match[3], NULL_STR);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_match
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ(match[3], NULL_STR);'), (3, 1, u'+\tOAK_ASSERT_EQ(match[3], NULL_STR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ(match[3], NULL_STR);'), (3, 1, u'+\tOAK_ASSERT_EQ(match[3], NULL_STR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tASSERT_LE(index.index, _buffer.size());')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: namespace ng
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tASSERT_LE(index.index, _buffer.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tASSERT_LE(index.index, _buffer.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tvoid wait ()                                                                                                                      { OAK_ASSERT(dispatch_get_current_queue() != dispatch_get_main_queue()); dispatch_semaphore_wait(_semaphore, DISPATCH_TIME_FOREVER); }')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct callback_t : document::open_callback_t
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tvoid wait ()                                                                                                                      { OAK_ASSERT(dispatch_get_current_queue() != dispatch_get_main_queue()); dispatch_semaphore_wait(_semaphore, DISPATCH_TIME_FOREVER); }')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tvoid wait ()                                                                                                                      { OAK_ASSERT(dispatch_get_current_queue() != dispatch_get_main_queue()); dispatch_semaphore_wait(_semaphore, DISPATCH_TIME_FOREVER); }')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tOAK_ASSERT(dispatch_get_current_queue() != dispatch_get_main_queue());')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: struct stall_t : file::open_callback_t
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tOAK_ASSERT(dispatch_get_current_queue() != dispatch_get_main_queue());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tOAK_ASSERT(dispatch_get_current_queue() != dispatch_get_main_queue());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tvoid wait () { OAK_ASSERT(dispatch_get_current_queue() != dispatch_get_main_queue()); dispatch_semaphore_wait(_semaphore, DISPATCH_TIME_FOREVER); }')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct stall_t : file::save_callback_t
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tvoid wait () { OAK_ASSERT(dispatch_get_current_queue() != dispatch_get_main_queue()); dispatch_semaphore_wait(_semaphore, DISPATCH_TIME_FOREVER); }')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tvoid wait () { OAK_ASSERT(dispatch_get_current_queue() != dispatch_get_main_queue()); dispatch_semaphore_wait(_semaphore, DISPATCH_TIME_FOREVER); }')]
===========================================
Class:class FileWatchTests : public CxxTest::TestSuite void test_file_watch () public: 	void test_file_watch () 	{ 	
Class: class GrammarFixturesTests : public CxxTest::TestSuite void test_file_type () public: 	void test_file_type () 	{ 	
Class:class GrammarPickingTests : public CxxTest::TestSuite void test_grammar_picking () public: 	void test_grammar_picking () 	{ 	
Class:class InodeTests : public CxxTest::TestSuite void test_inode () public: 	void test_inode () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t\tTS_ASSERT(*doc_1 == *doc_2);'), (27, 2, u'-\t\tTS_ASSERT(*doc_2 == *doc_3);'), (28, 1, u'+\tOAK_ASSERT(*doc_1 == *doc_2);'), (29, 1, u'+\tOAK_ASSERT(*doc_2 == *doc_3);'), (31, 2, u'-\t\tTS_ASSERT_EQUALS(path::name(doc_1->path()), "file_1.txt");'), (32, 2, u'-\t\tTS_ASSERT_EQUALS(path::name(doc_2->path()), "file_1.txt");'), (33, 2, u'-\t\tTS_ASSERT_EQUALS(path::name(doc_3->path()), "file_1.txt");'), (34, 1, u'+\tOAK_ASSERT_EQ(path::name(doc_1->path()), "file_1.txt");'), (35, 1, u'+\tOAK_ASSERT_EQ(path::name(doc_2->path()), "file_1.txt");'), (36, 1, u'+\tOAK_ASSERT_EQ(path::name(doc_3->path()), "file_1.txt");'), (45, 2, u'-\t\tTS_ASSERT(*doc_4 == *doc_5);'), (46, 2, u'-\t\tTS_ASSERT_EQUALS(path::name(doc_4->path()), "future.txt");'), (49, 1, u'+\tOAK_ASSERT(*doc_4 == *doc_5);'), (50, 1, u'+\tOAK_ASSERT_EQ(path::name(doc_4->path()), "future.txt");')]
===========================================
Class:class ReplaceTests : public CxxTest::TestSuite #include <document/document.h>  void test_replace_single_line () public: 	void test_replace_single_line () 	{ 	
Class:class SaveTests : public CxxTest::TestSuite void test_save () public: 	void test_save () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t\tTS_ASSERT_EQUALS(path::content(jail.path("test.txt")), "\xc3\x86blegr\xc3\xb8d");'), (20, 1, u'+\tOAK_ASSERT_EQ(path::content(jail.path("test.txt")), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
Class:class SymlinksTests : public CxxTest::TestSuite void test_symlinks () public: 	void test_symlinks () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t\tTS_ASSERT_EQUALS(path::exists(jail.path("test.txt")), true);'), (17, 2, u'-\t\tTS_ASSERT_EQUALS(path::exists(jail.path("link.txt")), true);'), (18, 1, u'+\tOAK_ASSERT_EQ(path::exists(jail.path("test.txt")), true);'), (19, 1, u'+\tOAK_ASSERT_EQ(path::exists(jail.path("link.txt")), true);'), (23, 2, u'-\t\tTS_ASSERT_EQUALS(srcDoc->identifier(), linkDoc->identifier());'), (26, 1, u'+\tOAK_ASSERT_EQ(srcDoc->identifier(), linkDoc->identifier());'), (29, 2, u'-\t\tTS_ASSERT_EQUALS(srcDoc->identifier(), aliasDoc->identifier());'), (33, 1, u'+\tOAK_ASSERT_EQ(srcDoc->identifier(), aliasDoc->identifier());')]
===========================================
Class:class XAttrTests : public CxxTest::TestSuite void test_bookmarks () public: 	void test_bookmarks () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-\t\tTS_ASSERT_EQUALS(marks.size(), 3);'), (22, 2, u'-\t\tTS_ASSERT_EQUALS(marks[0], "bookmark");'), (23, 2, u'-\t\tTS_ASSERT_EQUALS(marks[3], "bookmark");'), (24, 2, u'-\t\tTS_ASSERT_EQUALS(marks[12], "bookmark");'), (27, 1, u'+\tOAK_ASSERT_EQ(marks.size(), 3);'), (28, 1, u'+\tOAK_ASSERT_EQ(marks[0], "bookmark");'), (29, 1, u'+\tOAK_ASSERT_EQ(marks[3], "bookmark");'), (30, 1, u'+\tOAK_ASSERT_EQ(marks[12], "bookmark");'), (49, 2, u'-\t\tTS_ASSERT_EQUALS(doc->selection(), "2:2&3:1");'), (50, 1, u'+\tOAK_ASSERT_EQ(doc->selection(), "2:2&3:1");')]
===========================================
Class: class BundleFixturesTests : public CxxTest::TestSuite { 
Class:class OpenTests : public CxxTest::TestSuite struct stall_t : file::open_callback_t 	struct stall_t : file::open_callback_t 	stall_t (std::string const& encoding = NULL_STR, std::string const& fileType = NULL_STR) : _encoding(encoding), _file_type(fileType) 		stall_t (std::string const& encoding = NULL_STR, std::string const& fileType = NULL_STR) : _error(false), _run_loop(CFSTR()), _bom(false), _encoding(encoding), _file_type(fileType), _line_feeds(NULL_STR) { } 		stall_t (std::string const& encoding = NULL_STR, std::string const& fileType = NULL_STR) : _error(false), _run_loop(CFSTR()), _bom(false), _encoding(encoding), _file_type(fileType), _line_feeds(NULL_STR) 
Class:class SaveTests : public CxxTest::TestSuite struct stall_t : file::save_callback_t 	struct stall_t : file::save_callback_t 	stall_t (bool* success = NULL, std::string const& path = NULL_STR, std::string const& encoding = NULL_STR) : _success(success), _path(path), _encoding(encoding) 		stall_t (bool* success = NULL, std::string const& path = NULL_STR, std::string const& encoding = NULL_STR) : _success(success), _path(path), _encoding(encoding), _run_loop(CFSTR()) { } 		stall_t (bool* success = NULL, std::string const& path = NULL_STR, std::string const& encoding = NULL_STR) : _success(success), _path(path), _encoding(encoding), _run_loop(CFSTR()) 
Class: class StatusTests : public CxxTest::TestSuite void test_status () public: 	void test_status () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/u_cr/cr.txt"), kFileTestNoParent);'), (34, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/u_rw/cr.txt"), kFileTestWritable);'), (35, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/u_rw/rw.txt"), kFileTestWritable);'), (36, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/u_rw/ro.txt"), kFileTestNotWritableButOwner);'), (37, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/u_ro/cr.txt"), kFileTestWritableByRoot); // ?'), (38, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/u_ro/rw.txt"), kFileTestWritable);'), (39, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/u_ro/ro.txt"), kFileTestNotWritableButOwner);'), (40, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/o_rw/cr.txt"), kFileTestWritable);'), (41, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/o_rw/rw.txt"), kFileTestWritableByRoot);'), (42, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/o_rw/ro.txt"), kFileTestNotWritable);'), (43, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/o_ro/cr.txt"), kFileTestWritableByRoot); // ?'), (44, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/o_ro/rw.txt"), kFileTestWritableByRoot);'), (45, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/o_ro/ro.txt"), kFileTestNotWritable);'), (53, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/tmp/x/u_cr/cr.txt"), kFileTestNoParent);'), (54, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/tmp/x/u_rw/cr.txt"), kFileTestWritable);'), (55, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/tmp/x/u_rw/rw.txt"), kFileTestWritable);'), (56, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/tmp/x/u_rw/ro.txt"), kFileTestNotWritableButOwner);'), (57, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/tmp/x/u_ro/cr.txt"), kFileTestWritableByRoot); // ?'), (58, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/tmp/x/u_ro/rw.txt"), kFileTestWritable);'), (59, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/tmp/x/u_ro/ro.txt"), kFileTestNotWritableButOwner);'), (60, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/tmp/x/o_rw/cr.txt"), kFileTestWritable);'), (61, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/tmp/x/o_rw/rw.txt"), kFileTestWritableByRoot);'), (62, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/tmp/x/o_rw/ro.txt"), kFileTestNotWritable);'), (63, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/tmp/x/o_ro/cr.txt"), kFileTestWritableByRoot); // ?'), (64, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/tmp/x/o_ro/rw.txt"), kFileTestWritableByRoot);'), (65, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/tmp/x/o_ro/ro.txt"), kFileTestNotWritable);'), (74, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/Volumes/ro/cr.txt"), kFileTestReadOnly);'), (75, 2, u'-\t\t\tTS_ASSERT_EQUALS(file::status("/Volumes/ro/rw.txt"), kFileTestReadOnly);'), (83, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/Volumes/ro/cr.txt"), kFileTestReadOnly);'), (84, 1, u'+\t\tOAK_ASSERT_EQ(file::status("/Volumes/ro/rw.txt"), kFileTestReadOnly);')]
===========================================
Class:class TypeTests : public CxxTest::TestSuite void test_file_type () public: 	void test_file_type () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t\tTS_ASSERT(plist::save(xmlPlist, true, plist::kPlistFormatXML));'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(file::type(xmlPlist, io::bytes_ptr(new io::bytes_t(path::content(xmlPlist)))), "source.xml.plist");'), (13, 2, u'-\t\tTS_ASSERT_EQUALS(file::type(jail.path("ascii.plist"), io::bytes_ptr(new io::bytes_t("{ foo = \'bar\'; }"))), "source.plist");'), (19, 1, u'+\tOAK_ASSERT(plist::save(xmlPlist, true, plist::kPlistFormatXML));'), (20, 1, u'+\tOAK_ASSERT_EQ(file::type(xmlPlist, io::bytes_ptr(new io::bytes_t(path::content(xmlPlist)))), "source.xml.plist");'), (21, 1, u'+\tOAK_ASSERT_EQ(file::type(jail.path("ascii.plist"), io::bytes_ptr(new io::bytes_t("{ foo = \'bar\'; }"))), "source.plist");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86blegr\xc3\xb8d"));'), (3, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86b\\xFFlegr\xc3\xb8d"));'), (4, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86b\\xC0legr\xc3\xb8d"));'), (5, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86b\\xC0\\xFElegr\xc3\xb8d"));'), (6, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86b\\xFE\\xC0legr\xc3\xb8d"));'), (7, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86blegr\xc3\xb8d\\xFE"));'), (8, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86blegr\xc3\xb8d"),           "\xc3\x86blegr\xc3\xb8d");'), (9, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86b\\xFFlegr\xc3\xb8d"),       "\xc3\x86blegr\xc3\xb8d");'), (10, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86b\\xC0legr\xc3\xb8d"),       "\xc3\x86blegr\xc3\xb8d");'), (11, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86b\\xC0\\xFElegr\xc3\xb8d"),   "\xc3\x86blegr\xc3\xb8d");'), (12, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86b\\xFE\\xC0legr\xc3\xb8d"),   "\xc3\x86blegr\xc3\xb8d");'), (13, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86blegr\xc3\xb8d\\xFE"),       "\xc3\x86blegr\xc3\xb8d");'), (15, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xE2\\x99\\xA5y"),     "x\\xE2\\x99\\xA5y");'), (16, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xE2\\x99y"),         "xy");'), (17, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xE2y"),             "xy");'), (18, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\x99\\xA5y"),         "xy");'), (19, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xA5y"),             "xy");'), (21, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xE2\\x99\\xA5"),       "\\xE2\\x99\\xA5");'), (22, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xE2\\x99"),           "");'), (23, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xE2"),               "");'), (24, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\x99\\xA5"),           "");'), (25, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xA5"),               "");'), (27, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xF0\\xA0\\xBB\\xB5y"), "x\\xF0\\xA0\\xBB\\xB5y");'), (28, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xF0\\xA0\\xBBy"),     "xy");'), (29, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xF0\\xA0y"),         "xy");'), (30, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xF0y"),             "xy");'), (32, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xF0\\xA0\\xBB\\xB5"),   "\\xF0\\xA0\\xBB\\xB5");'), (33, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xF0\\xA0\\xBB"),       "");'), (34, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xF0\\xA0"),           "");'), (35, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xF0"),               "");')]
===========================================
===========================================
Total add: 28
Total del: 6
Header: test_sanitize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86blegr\xc3\xb8d"));'), (3, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86b\\xFFlegr\xc3\xb8d"));'), (4, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86b\\xC0legr\xc3\xb8d"));'), (5, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86b\\xC0\\xFElegr\xc3\xb8d"));'), (6, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86b\\xFE\\xC0legr\xc3\xb8d"));'), (7, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86blegr\xc3\xb8d\\xFE"));'), (8, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86blegr\xc3\xb8d"),           "\xc3\x86blegr\xc3\xb8d");'), (9, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86b\\xFFlegr\xc3\xb8d"),       "\xc3\x86blegr\xc3\xb8d");'), (10, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86b\\xC0legr\xc3\xb8d"),       "\xc3\x86blegr\xc3\xb8d");'), (11, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86b\\xC0\\xFElegr\xc3\xb8d"),   "\xc3\x86blegr\xc3\xb8d");'), (12, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86b\\xFE\\xC0legr\xc3\xb8d"),   "\xc3\x86blegr\xc3\xb8d");'), (13, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86blegr\xc3\xb8d\\xFE"),       "\xc3\x86blegr\xc3\xb8d");'), (15, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xE2\\x99\\xA5y"),     "x\\xE2\\x99\\xA5y");'), (16, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xE2\\x99y"),         "xy");'), (17, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xE2y"),             "xy");'), (18, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\x99\\xA5y"),         "xy");'), (19, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xA5y"),             "xy");'), (21, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xE2\\x99\\xA5"),       "\\xE2\\x99\\xA5");'), (22, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xE2\\x99"),           "");'), (23, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xE2"),               "");'), (24, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\x99\\xA5"),           "");'), (25, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xA5"),               "");'), (27, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xF0\\xA0\\xBB\\xB5y"), "x\\xF0\\xA0\\xBB\\xB5y");'), (28, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xF0\\xA0\\xBBy"),     "xy");'), (29, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xF0\\xA0y"),         "xy");'), (30, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xF0y"),             "xy");'), (32, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xF0\\xA0\\xBB\\xB5"),   "\\xF0\\xA0\\xBB\\xB5");'), (33, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xF0\\xA0\\xBB"),       "");'), (34, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xF0\\xA0"),           "");'), (35, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xF0"),               "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86blegr\xc3\xb8d"));'), (3, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86b\\xFFlegr\xc3\xb8d"));'), (4, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86b\\xC0legr\xc3\xb8d"));'), (5, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86b\\xC0\\xFElegr\xc3\xb8d"));'), (6, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86b\\xFE\\xC0legr\xc3\xb8d"));'), (7, 2, u'-\tOAK_ASSERT_EQ("\xc3\x86blegr\xc3\xb8d", sanitize("\xc3\x86blegr\xc3\xb8d\\xFE"));'), (8, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86blegr\xc3\xb8d"),           "\xc3\x86blegr\xc3\xb8d");'), (9, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86b\\xFFlegr\xc3\xb8d"),       "\xc3\x86blegr\xc3\xb8d");'), (10, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86b\\xC0legr\xc3\xb8d"),       "\xc3\x86blegr\xc3\xb8d");'), (11, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86b\\xC0\\xFElegr\xc3\xb8d"),   "\xc3\x86blegr\xc3\xb8d");'), (12, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86b\\xFE\\xC0legr\xc3\xb8d"),   "\xc3\x86blegr\xc3\xb8d");'), (13, 1, u'+\tOAK_ASSERT_EQ(sanitize("\xc3\x86blegr\xc3\xb8d\\xFE"),       "\xc3\x86blegr\xc3\xb8d");'), (15, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xE2\\x99\\xA5y"),     "x\\xE2\\x99\\xA5y");'), (16, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xE2\\x99y"),         "xy");'), (17, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xE2y"),             "xy");'), (18, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\x99\\xA5y"),         "xy");'), (19, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xA5y"),             "xy");'), (21, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xE2\\x99\\xA5"),       "\\xE2\\x99\\xA5");'), (22, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xE2\\x99"),           "");'), (23, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xE2"),               "");'), (24, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\x99\\xA5"),           "");'), (25, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xA5"),               "");'), (27, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xF0\\xA0\\xBB\\xB5y"), "x\\xF0\\xA0\\xBB\\xB5y");'), (28, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xF0\\xA0\\xBBy"),     "xy");'), (29, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xF0\\xA0y"),         "xy");'), (30, 1, u'+\tOAK_ASSERT_EQ(sanitize("x\\xF0y"),             "xy");'), (32, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xF0\\xA0\\xBB\\xB5"),   "\\xF0\\xA0\\xBB\\xB5");'), (33, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xF0\\xA0\\xBB"),       "");'), (34, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xF0\\xA0"),           "");'), (35, 1, u'+\tOAK_ASSERT_EQ(sanitize("\\xF0"),               "");')]
===========================================
Class:class run_tests : public CxxTest::TestSuite static delegate_ptr run_command (std::string const& cmd, std::string const& output = ) public: 	delegate_ptr run_command (std::string const& cmd, std::string const& output = ) 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(104, 2, u'-\t\tASSERT(command.find("#!") == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8NSNotFound ", kSelectionMoveToEndOfSubWord),   " NS\xe2\x80\xb8NotFound ");'), (8, 2, u'-\tOAK_ASSERT_EQ(move(" NS\xe2\x80\xb8NotFound ", kSelectionMoveToEndOfSubWord),   " NSNot\xe2\x80\xb8Found ");'), (9, 2, u'-\tOAK_ASSERT_EQ(move(" NSNot\xe2\x80\xb8Found ", kSelectionMoveToEndOfSubWord),   " NSNotFound\xe2\x80\xb8 ");'), (10, 2, u'-\tOAK_ASSERT_EQ(move(" NSNotFound\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " NSNot\xe2\x80\xb8Found ");'), (11, 2, u'-\tOAK_ASSERT_EQ(move(" NSNot\xe2\x80\xb8Found ", kSelectionMoveToBeginOfSubWord), " NS\xe2\x80\xb8NotFound ");'), (12, 2, u'-\tOAK_ASSERT_EQ(move(" NS\xe2\x80\xb8NotFound ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8NSNotFound ");'), (14, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8camelCase ", kSelectionMoveToEndOfSubWord),   " camel\xe2\x80\xb8Case ");'), (15, 2, u'-\tOAK_ASSERT_EQ(move(" camel\xe2\x80\xb8Case ", kSelectionMoveToEndOfSubWord),   " camelCase\xe2\x80\xb8 ");'), (16, 2, u'-\tOAK_ASSERT_EQ(move(" camelCase\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " camel\xe2\x80\xb8Case ");'), (17, 2, u'-\tOAK_ASSERT_EQ(move(" camel\xe2\x80\xb8Case ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8camelCase ");'), (19, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8CamelCase ", kSelectionMoveToEndOfSubWord),   " Camel\xe2\x80\xb8Case ");'), (20, 2, u'-\tOAK_ASSERT_EQ(move(" Camel\xe2\x80\xb8Case ", kSelectionMoveToEndOfSubWord),   " CamelCase\xe2\x80\xb8 ");'), (21, 2, u'-\tOAK_ASSERT_EQ(move(" CamelCase\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " Camel\xe2\x80\xb8Case ");'), (22, 2, u'-\tOAK_ASSERT_EQ(move(" Camel\xe2\x80\xb8Case ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8CamelCase ");'), (24, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8snake_Case ", kSelectionMoveToEndOfSubWord),   " snake\xe2\x80\xb8_Case ");'), (25, 2, u'-\tOAK_ASSERT_EQ(move(" snake\xe2\x80\xb8_Case ", kSelectionMoveToEndOfSubWord),   " snake_Case\xe2\x80\xb8 ");'), (26, 2, u'-\tOAK_ASSERT_EQ(move(" snake_Case\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " snake_\xe2\x80\xb8Case ");'), (27, 2, u'-\tOAK_ASSERT_EQ(move(" snake_\xe2\x80\xb8Case ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8snake_Case ");'), (29, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8NDEBUG ", kSelectionMoveToEndOfSubWord),   " NDEBUG\xe2\x80\xb8 ");'), (30, 2, u'-\tOAK_ASSERT_EQ(move(" NDEBUG\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8NDEBUG ");'), (32, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8 space ", kSelectionMoveToEndOfSubWord),   "  space\xe2\x80\xb8 ");'), (33, 2, u'-\tOAK_ASSERT_EQ(move(" space \xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8space  ");'), (35, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8  space ", kSelectionMoveToEndOfSubWord),   "   \xe2\x80\xb8space ");'), (36, 2, u'-\tOAK_ASSERT_EQ(move(" space  \xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " space\xe2\x80\xb8   ");'), (38, 2, u'-\tOAK_ASSERT_EQ(move("\xe2\x80\xb80b0000\'0000", kSelectionMoveToEndOfSubWord),   "0b\xe2\x80\xb80000\'0000");'), (39, 2, u'-\tOAK_ASSERT_EQ(move("0b\xe2\x80\xb80000\'0000", kSelectionMoveToEndOfSubWord),   "0b0000\xe2\x80\xb8\'0000");'), (40, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\xe2\x80\xb8\'0000", kSelectionMoveToEndOfSubWord),   "0b0000\'\xe2\x80\xb80000");'), (41, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\'\xe2\x80\xb80000", kSelectionMoveToEndOfSubWord),   "0b0000\'0000\xe2\x80\xb8");'), (42, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\'0000\xe2\x80\xb8", kSelectionMoveToBeginOfSubWord), "0b0000\'\xe2\x80\xb80000");'), (43, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\'\xe2\x80\xb80000", kSelectionMoveToBeginOfSubWord), "0b0000\xe2\x80\xb8\'0000");'), (44, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\xe2\x80\xb8\'0000", kSelectionMoveToBeginOfSubWord), "0b\xe2\x80\xb80000\'0000");'), (45, 2, u'-\tOAK_ASSERT_EQ(move("0b\xe2\x80\xb80000\'0000", kSelectionMoveToBeginOfSubWord), "0\xe2\x80\xb8b0000\'0000");'), (46, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8NSNotFound "), " NS\xe2\x80\xb8NotFound ");'), (47, 1, u'+\tOAK_ASSERT_EQ(right(" NS\xe2\x80\xb8NotFound "), " NSNot\xe2\x80\xb8Found ");'), (48, 1, u'+\tOAK_ASSERT_EQ(right(" NSNot\xe2\x80\xb8Found "), " NSNotFound\xe2\x80\xb8 ");'), (49, 1, u'+\tOAK_ASSERT_EQ( left(" NSNotFound\xe2\x80\xb8 "), " NSNot\xe2\x80\xb8Found ");'), (50, 1, u'+\tOAK_ASSERT_EQ( left(" NSNot\xe2\x80\xb8Found "), " NS\xe2\x80\xb8NotFound ");'), (51, 1, u'+\tOAK_ASSERT_EQ( left(" NS\xe2\x80\xb8NotFound "), " \xe2\x80\xb8NSNotFound ");'), (53, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8camelCase "), " camel\xe2\x80\xb8Case ");'), (54, 1, u'+\tOAK_ASSERT_EQ(right(" camel\xe2\x80\xb8Case "), " camelCase\xe2\x80\xb8 ");'), (55, 1, u'+\tOAK_ASSERT_EQ( left(" camelCase\xe2\x80\xb8 "), " camel\xe2\x80\xb8Case ");'), (56, 1, u'+\tOAK_ASSERT_EQ( left(" camel\xe2\x80\xb8Case "), " \xe2\x80\xb8camelCase ");'), (58, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8CamelCase "), " Camel\xe2\x80\xb8Case ");'), (59, 1, u'+\tOAK_ASSERT_EQ(right(" Camel\xe2\x80\xb8Case "), " CamelCase\xe2\x80\xb8 ");'), (60, 1, u'+\tOAK_ASSERT_EQ( left(" CamelCase\xe2\x80\xb8 "), " Camel\xe2\x80\xb8Case ");'), (61, 1, u'+\tOAK_ASSERT_EQ( left(" Camel\xe2\x80\xb8Case "), " \xe2\x80\xb8CamelCase ");'), (63, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8snake_Case "), " snake\xe2\x80\xb8_Case ");'), (64, 1, u'+\tOAK_ASSERT_EQ(right(" snake\xe2\x80\xb8_Case "), " snake_Case\xe2\x80\xb8 ");'), (65, 1, u'+\tOAK_ASSERT_EQ( left(" snake_Case\xe2\x80\xb8 "), " snake_\xe2\x80\xb8Case ");'), (66, 1, u'+\tOAK_ASSERT_EQ( left(" snake_\xe2\x80\xb8Case "), " \xe2\x80\xb8snake_Case ");'), (68, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8NDEBUG "), " NDEBUG\xe2\x80\xb8 ");'), (69, 1, u'+\tOAK_ASSERT_EQ( left(" NDEBUG\xe2\x80\xb8 "), " \xe2\x80\xb8NDEBUG ");'), (71, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8 space "), "  space\xe2\x80\xb8 ");'), (72, 1, u'+\tOAK_ASSERT_EQ( left(" space \xe2\x80\xb8 "), " \xe2\x80\xb8space  ");'), (74, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8  space "), "   \xe2\x80\xb8space ");'), (75, 1, u'+\tOAK_ASSERT_EQ( left(" space  \xe2\x80\xb8 "), " space\xe2\x80\xb8   ");'), (77, 1, u'+\tOAK_ASSERT_EQ(right("\xe2\x80\xb80b0000\'0000"), "0b\xe2\x80\xb80000\'0000");'), (78, 1, u'+\tOAK_ASSERT_EQ(right("0b\xe2\x80\xb80000\'0000"), "0b0000\xe2\x80\xb8\'0000");'), (79, 1, u'+\tOAK_ASSERT_EQ(right("0b0000\xe2\x80\xb8\'0000"), "0b0000\'\xe2\x80\xb80000");'), (80, 1, u'+\tOAK_ASSERT_EQ(right("0b0000\'\xe2\x80\xb80000"), "0b0000\'0000\xe2\x80\xb8");'), (81, 1, u'+\tOAK_ASSERT_EQ( left("0b0000\'0000\xe2\x80\xb8"), "0b0000\'\xe2\x80\xb80000");'), (82, 1, u'+\tOAK_ASSERT_EQ( left("0b0000\'\xe2\x80\xb80000"), "0b0000\xe2\x80\xb8\'0000");'), (83, 1, u'+\tOAK_ASSERT_EQ( left("0b0000\xe2\x80\xb8\'0000"), "0b\xe2\x80\xb80000\'0000");'), (84, 1, u'+\tOAK_ASSERT_EQ( left("0b\xe2\x80\xb80000\'0000"), "0\xe2\x80\xb8b0000\'0000");')]
===========================================
===========================================
Total add: 42
Total del: 39
Header: move
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8NSNotFound ", kSelectionMoveToEndOfSubWord),   " NS\xe2\x80\xb8NotFound ");'), (8, 2, u'-\tOAK_ASSERT_EQ(move(" NS\xe2\x80\xb8NotFound ", kSelectionMoveToEndOfSubWord),   " NSNot\xe2\x80\xb8Found ");'), (9, 2, u'-\tOAK_ASSERT_EQ(move(" NSNot\xe2\x80\xb8Found ", kSelectionMoveToEndOfSubWord),   " NSNotFound\xe2\x80\xb8 ");'), (10, 2, u'-\tOAK_ASSERT_EQ(move(" NSNotFound\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " NSNot\xe2\x80\xb8Found ");'), (11, 2, u'-\tOAK_ASSERT_EQ(move(" NSNot\xe2\x80\xb8Found ", kSelectionMoveToBeginOfSubWord), " NS\xe2\x80\xb8NotFound ");'), (12, 2, u'-\tOAK_ASSERT_EQ(move(" NS\xe2\x80\xb8NotFound ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8NSNotFound ");'), (14, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8camelCase ", kSelectionMoveToEndOfSubWord),   " camel\xe2\x80\xb8Case ");'), (15, 2, u'-\tOAK_ASSERT_EQ(move(" camel\xe2\x80\xb8Case ", kSelectionMoveToEndOfSubWord),   " camelCase\xe2\x80\xb8 ");'), (16, 2, u'-\tOAK_ASSERT_EQ(move(" camelCase\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " camel\xe2\x80\xb8Case ");'), (17, 2, u'-\tOAK_ASSERT_EQ(move(" camel\xe2\x80\xb8Case ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8camelCase ");'), (19, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8CamelCase ", kSelectionMoveToEndOfSubWord),   " Camel\xe2\x80\xb8Case ");'), (20, 2, u'-\tOAK_ASSERT_EQ(move(" Camel\xe2\x80\xb8Case ", kSelectionMoveToEndOfSubWord),   " CamelCase\xe2\x80\xb8 ");'), (21, 2, u'-\tOAK_ASSERT_EQ(move(" CamelCase\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " Camel\xe2\x80\xb8Case ");'), (22, 2, u'-\tOAK_ASSERT_EQ(move(" Camel\xe2\x80\xb8Case ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8CamelCase ");'), (24, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8snake_Case ", kSelectionMoveToEndOfSubWord),   " snake\xe2\x80\xb8_Case ");'), (25, 2, u'-\tOAK_ASSERT_EQ(move(" snake\xe2\x80\xb8_Case ", kSelectionMoveToEndOfSubWord),   " snake_Case\xe2\x80\xb8 ");'), (26, 2, u'-\tOAK_ASSERT_EQ(move(" snake_Case\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " snake_\xe2\x80\xb8Case ");'), (27, 2, u'-\tOAK_ASSERT_EQ(move(" snake_\xe2\x80\xb8Case ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8snake_Case ");'), (29, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8NDEBUG ", kSelectionMoveToEndOfSubWord),   " NDEBUG\xe2\x80\xb8 ");'), (30, 2, u'-\tOAK_ASSERT_EQ(move(" NDEBUG\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8NDEBUG ");'), (32, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8 space ", kSelectionMoveToEndOfSubWord),   "  space\xe2\x80\xb8 ");'), (33, 2, u'-\tOAK_ASSERT_EQ(move(" space \xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8space  ");'), (35, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8  space ", kSelectionMoveToEndOfSubWord),   "   \xe2\x80\xb8space ");'), (36, 2, u'-\tOAK_ASSERT_EQ(move(" space  \xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " space\xe2\x80\xb8   ");'), (38, 2, u'-\tOAK_ASSERT_EQ(move("\xe2\x80\xb80b0000\'0000", kSelectionMoveToEndOfSubWord),   "0b\xe2\x80\xb80000\'0000");'), (39, 2, u'-\tOAK_ASSERT_EQ(move("0b\xe2\x80\xb80000\'0000", kSelectionMoveToEndOfSubWord),   "0b0000\xe2\x80\xb8\'0000");'), (40, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\xe2\x80\xb8\'0000", kSelectionMoveToEndOfSubWord),   "0b0000\'\xe2\x80\xb80000");'), (41, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\'\xe2\x80\xb80000", kSelectionMoveToEndOfSubWord),   "0b0000\'0000\xe2\x80\xb8");'), (42, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\'0000\xe2\x80\xb8", kSelectionMoveToBeginOfSubWord), "0b0000\'\xe2\x80\xb80000");'), (43, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\'\xe2\x80\xb80000", kSelectionMoveToBeginOfSubWord), "0b0000\xe2\x80\xb8\'0000");'), (44, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\xe2\x80\xb8\'0000", kSelectionMoveToBeginOfSubWord), "0b\xe2\x80\xb80000\'0000");'), (45, 2, u'-\tOAK_ASSERT_EQ(move("0b\xe2\x80\xb80000\'0000", kSelectionMoveToBeginOfSubWord), "0\xe2\x80\xb8b0000\'0000");'), (46, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8NSNotFound "), " NS\xe2\x80\xb8NotFound ");'), (47, 1, u'+\tOAK_ASSERT_EQ(right(" NS\xe2\x80\xb8NotFound "), " NSNot\xe2\x80\xb8Found ");'), (48, 1, u'+\tOAK_ASSERT_EQ(right(" NSNot\xe2\x80\xb8Found "), " NSNotFound\xe2\x80\xb8 ");'), (49, 1, u'+\tOAK_ASSERT_EQ( left(" NSNotFound\xe2\x80\xb8 "), " NSNot\xe2\x80\xb8Found ");'), (50, 1, u'+\tOAK_ASSERT_EQ( left(" NSNot\xe2\x80\xb8Found "), " NS\xe2\x80\xb8NotFound ");'), (51, 1, u'+\tOAK_ASSERT_EQ( left(" NS\xe2\x80\xb8NotFound "), " \xe2\x80\xb8NSNotFound ");'), (53, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8camelCase "), " camel\xe2\x80\xb8Case ");'), (54, 1, u'+\tOAK_ASSERT_EQ(right(" camel\xe2\x80\xb8Case "), " camelCase\xe2\x80\xb8 ");'), (55, 1, u'+\tOAK_ASSERT_EQ( left(" camelCase\xe2\x80\xb8 "), " camel\xe2\x80\xb8Case ");'), (56, 1, u'+\tOAK_ASSERT_EQ( left(" camel\xe2\x80\xb8Case "), " \xe2\x80\xb8camelCase ");'), (58, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8CamelCase "), " Camel\xe2\x80\xb8Case ");'), (59, 1, u'+\tOAK_ASSERT_EQ(right(" Camel\xe2\x80\xb8Case "), " CamelCase\xe2\x80\xb8 ");'), (60, 1, u'+\tOAK_ASSERT_EQ( left(" CamelCase\xe2\x80\xb8 "), " Camel\xe2\x80\xb8Case ");'), (61, 1, u'+\tOAK_ASSERT_EQ( left(" Camel\xe2\x80\xb8Case "), " \xe2\x80\xb8CamelCase ");'), (63, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8snake_Case "), " snake\xe2\x80\xb8_Case ");'), (64, 1, u'+\tOAK_ASSERT_EQ(right(" snake\xe2\x80\xb8_Case "), " snake_Case\xe2\x80\xb8 ");'), (65, 1, u'+\tOAK_ASSERT_EQ( left(" snake_Case\xe2\x80\xb8 "), " snake_\xe2\x80\xb8Case ");'), (66, 1, u'+\tOAK_ASSERT_EQ( left(" snake_\xe2\x80\xb8Case "), " \xe2\x80\xb8snake_Case ");'), (68, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8NDEBUG "), " NDEBUG\xe2\x80\xb8 ");'), (69, 1, u'+\tOAK_ASSERT_EQ( left(" NDEBUG\xe2\x80\xb8 "), " \xe2\x80\xb8NDEBUG ");'), (71, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8 space "), "  space\xe2\x80\xb8 ");'), (72, 1, u'+\tOAK_ASSERT_EQ( left(" space \xe2\x80\xb8 "), " \xe2\x80\xb8space  ");'), (74, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8  space "), "   \xe2\x80\xb8space ");'), (75, 1, u'+\tOAK_ASSERT_EQ( left(" space  \xe2\x80\xb8 "), " space\xe2\x80\xb8   ");'), (77, 1, u'+\tOAK_ASSERT_EQ(right("\xe2\x80\xb80b0000\'0000"), "0b\xe2\x80\xb80000\'0000");'), (78, 1, u'+\tOAK_ASSERT_EQ(right("0b\xe2\x80\xb80000\'0000"), "0b0000\xe2\x80\xb8\'0000");'), (79, 1, u'+\tOAK_ASSERT_EQ(right("0b0000\xe2\x80\xb8\'0000"), "0b0000\'\xe2\x80\xb80000");'), (80, 1, u'+\tOAK_ASSERT_EQ(right("0b0000\'\xe2\x80\xb80000"), "0b0000\'0000\xe2\x80\xb8");'), (81, 1, u'+\tOAK_ASSERT_EQ( left("0b0000\'0000\xe2\x80\xb8"), "0b0000\'\xe2\x80\xb80000");'), (82, 1, u'+\tOAK_ASSERT_EQ( left("0b0000\'\xe2\x80\xb80000"), "0b0000\xe2\x80\xb8\'0000");'), (83, 1, u'+\tOAK_ASSERT_EQ( left("0b0000\xe2\x80\xb8\'0000"), "0b\xe2\x80\xb80000\'0000");'), (84, 1, u'+\tOAK_ASSERT_EQ( left("0b\xe2\x80\xb80000\'0000"), "0\xe2\x80\xb8b0000\'0000");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8NSNotFound ", kSelectionMoveToEndOfSubWord),   " NS\xe2\x80\xb8NotFound ");'), (8, 2, u'-\tOAK_ASSERT_EQ(move(" NS\xe2\x80\xb8NotFound ", kSelectionMoveToEndOfSubWord),   " NSNot\xe2\x80\xb8Found ");'), (9, 2, u'-\tOAK_ASSERT_EQ(move(" NSNot\xe2\x80\xb8Found ", kSelectionMoveToEndOfSubWord),   " NSNotFound\xe2\x80\xb8 ");'), (10, 2, u'-\tOAK_ASSERT_EQ(move(" NSNotFound\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " NSNot\xe2\x80\xb8Found ");'), (11, 2, u'-\tOAK_ASSERT_EQ(move(" NSNot\xe2\x80\xb8Found ", kSelectionMoveToBeginOfSubWord), " NS\xe2\x80\xb8NotFound ");'), (12, 2, u'-\tOAK_ASSERT_EQ(move(" NS\xe2\x80\xb8NotFound ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8NSNotFound ");'), (14, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8camelCase ", kSelectionMoveToEndOfSubWord),   " camel\xe2\x80\xb8Case ");'), (15, 2, u'-\tOAK_ASSERT_EQ(move(" camel\xe2\x80\xb8Case ", kSelectionMoveToEndOfSubWord),   " camelCase\xe2\x80\xb8 ");'), (16, 2, u'-\tOAK_ASSERT_EQ(move(" camelCase\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " camel\xe2\x80\xb8Case ");'), (17, 2, u'-\tOAK_ASSERT_EQ(move(" camel\xe2\x80\xb8Case ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8camelCase ");'), (19, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8CamelCase ", kSelectionMoveToEndOfSubWord),   " Camel\xe2\x80\xb8Case ");'), (20, 2, u'-\tOAK_ASSERT_EQ(move(" Camel\xe2\x80\xb8Case ", kSelectionMoveToEndOfSubWord),   " CamelCase\xe2\x80\xb8 ");'), (21, 2, u'-\tOAK_ASSERT_EQ(move(" CamelCase\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " Camel\xe2\x80\xb8Case ");'), (22, 2, u'-\tOAK_ASSERT_EQ(move(" Camel\xe2\x80\xb8Case ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8CamelCase ");'), (24, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8snake_Case ", kSelectionMoveToEndOfSubWord),   " snake\xe2\x80\xb8_Case ");'), (25, 2, u'-\tOAK_ASSERT_EQ(move(" snake\xe2\x80\xb8_Case ", kSelectionMoveToEndOfSubWord),   " snake_Case\xe2\x80\xb8 ");'), (26, 2, u'-\tOAK_ASSERT_EQ(move(" snake_Case\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " snake_\xe2\x80\xb8Case ");'), (27, 2, u'-\tOAK_ASSERT_EQ(move(" snake_\xe2\x80\xb8Case ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8snake_Case ");'), (29, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8NDEBUG ", kSelectionMoveToEndOfSubWord),   " NDEBUG\xe2\x80\xb8 ");'), (30, 2, u'-\tOAK_ASSERT_EQ(move(" NDEBUG\xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8NDEBUG ");'), (32, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8 space ", kSelectionMoveToEndOfSubWord),   "  space\xe2\x80\xb8 ");'), (33, 2, u'-\tOAK_ASSERT_EQ(move(" space \xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " \xe2\x80\xb8space  ");'), (35, 2, u'-\tOAK_ASSERT_EQ(move(" \xe2\x80\xb8  space ", kSelectionMoveToEndOfSubWord),   "   \xe2\x80\xb8space ");'), (36, 2, u'-\tOAK_ASSERT_EQ(move(" space  \xe2\x80\xb8 ", kSelectionMoveToBeginOfSubWord), " space\xe2\x80\xb8   ");'), (38, 2, u'-\tOAK_ASSERT_EQ(move("\xe2\x80\xb80b0000\'0000", kSelectionMoveToEndOfSubWord),   "0b\xe2\x80\xb80000\'0000");'), (39, 2, u'-\tOAK_ASSERT_EQ(move("0b\xe2\x80\xb80000\'0000", kSelectionMoveToEndOfSubWord),   "0b0000\xe2\x80\xb8\'0000");'), (40, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\xe2\x80\xb8\'0000", kSelectionMoveToEndOfSubWord),   "0b0000\'\xe2\x80\xb80000");'), (41, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\'\xe2\x80\xb80000", kSelectionMoveToEndOfSubWord),   "0b0000\'0000\xe2\x80\xb8");'), (42, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\'0000\xe2\x80\xb8", kSelectionMoveToBeginOfSubWord), "0b0000\'\xe2\x80\xb80000");'), (43, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\'\xe2\x80\xb80000", kSelectionMoveToBeginOfSubWord), "0b0000\xe2\x80\xb8\'0000");'), (44, 2, u'-\tOAK_ASSERT_EQ(move("0b0000\xe2\x80\xb8\'0000", kSelectionMoveToBeginOfSubWord), "0b\xe2\x80\xb80000\'0000");'), (45, 2, u'-\tOAK_ASSERT_EQ(move("0b\xe2\x80\xb80000\'0000", kSelectionMoveToBeginOfSubWord), "0\xe2\x80\xb8b0000\'0000");'), (46, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8NSNotFound "), " NS\xe2\x80\xb8NotFound ");'), (47, 1, u'+\tOAK_ASSERT_EQ(right(" NS\xe2\x80\xb8NotFound "), " NSNot\xe2\x80\xb8Found ");'), (48, 1, u'+\tOAK_ASSERT_EQ(right(" NSNot\xe2\x80\xb8Found "), " NSNotFound\xe2\x80\xb8 ");'), (49, 1, u'+\tOAK_ASSERT_EQ( left(" NSNotFound\xe2\x80\xb8 "), " NSNot\xe2\x80\xb8Found ");'), (50, 1, u'+\tOAK_ASSERT_EQ( left(" NSNot\xe2\x80\xb8Found "), " NS\xe2\x80\xb8NotFound ");'), (51, 1, u'+\tOAK_ASSERT_EQ( left(" NS\xe2\x80\xb8NotFound "), " \xe2\x80\xb8NSNotFound ");'), (53, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8camelCase "), " camel\xe2\x80\xb8Case ");'), (54, 1, u'+\tOAK_ASSERT_EQ(right(" camel\xe2\x80\xb8Case "), " camelCase\xe2\x80\xb8 ");'), (55, 1, u'+\tOAK_ASSERT_EQ( left(" camelCase\xe2\x80\xb8 "), " camel\xe2\x80\xb8Case ");'), (56, 1, u'+\tOAK_ASSERT_EQ( left(" camel\xe2\x80\xb8Case "), " \xe2\x80\xb8camelCase ");'), (58, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8CamelCase "), " Camel\xe2\x80\xb8Case ");'), (59, 1, u'+\tOAK_ASSERT_EQ(right(" Camel\xe2\x80\xb8Case "), " CamelCase\xe2\x80\xb8 ");'), (60, 1, u'+\tOAK_ASSERT_EQ( left(" CamelCase\xe2\x80\xb8 "), " Camel\xe2\x80\xb8Case ");'), (61, 1, u'+\tOAK_ASSERT_EQ( left(" Camel\xe2\x80\xb8Case "), " \xe2\x80\xb8CamelCase ");'), (63, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8snake_Case "), " snake\xe2\x80\xb8_Case ");'), (64, 1, u'+\tOAK_ASSERT_EQ(right(" snake\xe2\x80\xb8_Case "), " snake_Case\xe2\x80\xb8 ");'), (65, 1, u'+\tOAK_ASSERT_EQ( left(" snake_Case\xe2\x80\xb8 "), " snake_\xe2\x80\xb8Case ");'), (66, 1, u'+\tOAK_ASSERT_EQ( left(" snake_\xe2\x80\xb8Case "), " \xe2\x80\xb8snake_Case ");'), (68, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8NDEBUG "), " NDEBUG\xe2\x80\xb8 ");'), (69, 1, u'+\tOAK_ASSERT_EQ( left(" NDEBUG\xe2\x80\xb8 "), " \xe2\x80\xb8NDEBUG ");'), (71, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8 space "), "  space\xe2\x80\xb8 ");'), (72, 1, u'+\tOAK_ASSERT_EQ( left(" space \xe2\x80\xb8 "), " \xe2\x80\xb8space  ");'), (74, 1, u'+\tOAK_ASSERT_EQ(right(" \xe2\x80\xb8  space "), "   \xe2\x80\xb8space ");'), (75, 1, u'+\tOAK_ASSERT_EQ( left(" space  \xe2\x80\xb8 "), " space\xe2\x80\xb8   ");'), (77, 1, u'+\tOAK_ASSERT_EQ(right("\xe2\x80\xb80b0000\'0000"), "0b\xe2\x80\xb80000\'0000");'), (78, 1, u'+\tOAK_ASSERT_EQ(right("0b\xe2\x80\xb80000\'0000"), "0b0000\xe2\x80\xb8\'0000");'), (79, 1, u'+\tOAK_ASSERT_EQ(right("0b0000\xe2\x80\xb8\'0000"), "0b0000\'\xe2\x80\xb80000");'), (80, 1, u'+\tOAK_ASSERT_EQ(right("0b0000\'\xe2\x80\xb80000"), "0b0000\'0000\xe2\x80\xb8");'), (81, 1, u'+\tOAK_ASSERT_EQ( left("0b0000\'0000\xe2\x80\xb8"), "0b0000\'\xe2\x80\xb80000");'), (82, 1, u'+\tOAK_ASSERT_EQ( left("0b0000\'\xe2\x80\xb80000"), "0b0000\xe2\x80\xb8\'0000");'), (83, 1, u'+\tOAK_ASSERT_EQ( left("0b0000\xe2\x80\xb8\'0000"), "0b\xe2\x80\xb80000\'0000");'), (84, 1, u'+\tOAK_ASSERT_EQ( left("0b\xe2\x80\xb80000\'0000"), "0\xe2\x80\xb8b0000\'0000");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tOAK_ASSERT_EQ(move("\xe2\x80\xb80b0000\'0000", kSelectionMoveToEndOfSubWord),   "0b\xe2\x80\xb80000\'0000");'), (4, 1, u'+\tOAK_ASSERT_EQ(move("0b\xe2\x80\xb80000\'0000", kSelectionMoveToEndOfSubWord),   "0b0000\xe2\x80\xb8\'0000");'), (5, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\xe2\x80\xb8\'0000", kSelectionMoveToEndOfSubWord),   "0b0000\'\xe2\x80\xb80000");'), (6, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\'\xe2\x80\xb80000", kSelectionMoveToEndOfSubWord),   "0b0000\'0000\xe2\x80\xb8");'), (7, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\'0000\xe2\x80\xb8", kSelectionMoveToBeginOfSubWord), "0b0000\'\xe2\x80\xb80000");'), (8, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\'\xe2\x80\xb80000", kSelectionMoveToBeginOfSubWord), "0b0000\xe2\x80\xb8\'0000");'), (9, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\xe2\x80\xb8\'0000", kSelectionMoveToBeginOfSubWord), "0b\xe2\x80\xb80000\'0000");'), (10, 1, u'+\tOAK_ASSERT_EQ(move("0b\xe2\x80\xb80000\'0000", kSelectionMoveToBeginOfSubWord), "0\xe2\x80\xb8b0000\'0000");')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: test_subword_movement
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tOAK_ASSERT_EQ(move("\xe2\x80\xb80b0000\'0000", kSelectionMoveToEndOfSubWord),   "0b\xe2\x80\xb80000\'0000");'), (4, 1, u'+\tOAK_ASSERT_EQ(move("0b\xe2\x80\xb80000\'0000", kSelectionMoveToEndOfSubWord),   "0b0000\xe2\x80\xb8\'0000");'), (5, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\xe2\x80\xb8\'0000", kSelectionMoveToEndOfSubWord),   "0b0000\'\xe2\x80\xb80000");'), (6, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\'\xe2\x80\xb80000", kSelectionMoveToEndOfSubWord),   "0b0000\'0000\xe2\x80\xb8");'), (7, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\'0000\xe2\x80\xb8", kSelectionMoveToBeginOfSubWord), "0b0000\'\xe2\x80\xb80000");'), (8, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\'\xe2\x80\xb80000", kSelectionMoveToBeginOfSubWord), "0b0000\xe2\x80\xb8\'0000");'), (9, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\xe2\x80\xb8\'0000", kSelectionMoveToBeginOfSubWord), "0b\xe2\x80\xb80000\'0000");'), (10, 1, u'+\tOAK_ASSERT_EQ(move("0b\xe2\x80\xb80000\'0000", kSelectionMoveToBeginOfSubWord), "0\xe2\x80\xb8b0000\'0000");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tOAK_ASSERT_EQ(move("\xe2\x80\xb80b0000\'0000", kSelectionMoveToEndOfSubWord),   "0b\xe2\x80\xb80000\'0000");'), (4, 1, u'+\tOAK_ASSERT_EQ(move("0b\xe2\x80\xb80000\'0000", kSelectionMoveToEndOfSubWord),   "0b0000\xe2\x80\xb8\'0000");'), (5, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\xe2\x80\xb8\'0000", kSelectionMoveToEndOfSubWord),   "0b0000\'\xe2\x80\xb80000");'), (6, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\'\xe2\x80\xb80000", kSelectionMoveToEndOfSubWord),   "0b0000\'0000\xe2\x80\xb8");'), (7, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\'0000\xe2\x80\xb8", kSelectionMoveToBeginOfSubWord), "0b0000\'\xe2\x80\xb80000");'), (8, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\'\xe2\x80\xb80000", kSelectionMoveToBeginOfSubWord), "0b0000\xe2\x80\xb8\'0000");'), (9, 1, u'+\tOAK_ASSERT_EQ(move("0b0000\xe2\x80\xb8\'0000", kSelectionMoveToBeginOfSubWord), "0b\xe2\x80\xb80000\'0000");'), (10, 1, u'+\tOAK_ASSERT_EQ(move("0b\xe2\x80\xb80000\'0000", kSelectionMoveToBeginOfSubWord), "0\xe2\x80\xb8b0000\'0000");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tOAK_ASSERT_EQ(utf8::find_safe_end(first+1, first+2), first+2);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: test_safe_end
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tOAK_ASSERT_EQ(utf8::find_safe_end(first+1, first+2), first+2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tOAK_ASSERT_EQ(utf8::find_safe_end(first+1, first+2), first+2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tOAK_ASSERT(tree.find(*key, &numeric_comp) != tree.end());'), (7, 1, u'+\t\tOAK_ASSERT(tree.find(key, &numeric_comp) != tree.end());')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: test_erase
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tOAK_ASSERT(tree.find(*key, &numeric_comp) != tree.end());'), (7, 1, u'+\t\tOAK_ASSERT(tree.find(key, &numeric_comp) != tree.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tOAK_ASSERT(tree.find(*key, &numeric_comp) != tree.end());'), (7, 1, u'+\t\tOAK_ASSERT(tree.find(key, &numeric_comp) != tree.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tOAK_ASSERT(tree.find(*key, &numeric_comp) != tree.end());'), (6, 2, u'-\t\tOAK_ASSERT_EQ(tree.find(*key, &numeric_comp)->key, *key);'), (7, 1, u'+\t\tOAK_ASSERT(tree.find(key, &numeric_comp) != tree.end());'), (8, 1, u'+\t\tOAK_ASSERT_EQ(tree.find(key, &numeric_comp)->key, key);'), (10, 2, u'-\t\tOAK_ASSERT(tree.lower_bound(*key, &numeric_comp) != tree.end());'), (11, 2, u'-\t\tOAK_ASSERT_EQ(tree.lower_bound(*key, &numeric_comp)->key, *key);'), (12, 1, u'+\t\tOAK_ASSERT(tree.lower_bound(key, &numeric_comp) != tree.end());'), (13, 1, u'+\t\tOAK_ASSERT_EQ(tree.lower_bound(key, &numeric_comp)->key, key);'), (15, 2, u'-\t\tOAK_ASSERT(tree.upper_bound(*key, &numeric_comp) == ++tree.find(*key, &numeric_comp));'), (17, 1, u'+\t\tOAK_ASSERT(tree.upper_bound(key, &numeric_comp) == ++tree.find(key, &numeric_comp));'), (20, 2, u'-\t\t\tOAK_ASSERT_LT(*key, tree.upper_bound(*key, &numeric_comp)->key);'), (21, 1, u'+\t\t\tOAK_ASSERT_LT(key, tree.upper_bound(key, &numeric_comp)->key);')]
===========================================
===========================================
Total add: 8
Total del: 8
Header: test_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tOAK_ASSERT(tree.find(*key, &numeric_comp) != tree.end());'), (6, 2, u'-\t\tOAK_ASSERT_EQ(tree.find(*key, &numeric_comp)->key, *key);'), (7, 1, u'+\t\tOAK_ASSERT(tree.find(key, &numeric_comp) != tree.end());'), (8, 1, u'+\t\tOAK_ASSERT_EQ(tree.find(key, &numeric_comp)->key, key);'), (10, 2, u'-\t\tOAK_ASSERT(tree.lower_bound(*key, &numeric_comp) != tree.end());'), (11, 2, u'-\t\tOAK_ASSERT_EQ(tree.lower_bound(*key, &numeric_comp)->key, *key);'), (12, 1, u'+\t\tOAK_ASSERT(tree.lower_bound(key, &numeric_comp) != tree.end());'), (13, 1, u'+\t\tOAK_ASSERT_EQ(tree.lower_bound(key, &numeric_comp)->key, key);'), (15, 2, u'-\t\tOAK_ASSERT(tree.upper_bound(*key, &numeric_comp) == ++tree.find(*key, &numeric_comp));'), (17, 1, u'+\t\tOAK_ASSERT(tree.upper_bound(key, &numeric_comp) == ++tree.find(key, &numeric_comp));'), (20, 2, u'-\t\t\tOAK_ASSERT_LT(*key, tree.upper_bound(*key, &numeric_comp)->key);'), (21, 1, u'+\t\t\tOAK_ASSERT_LT(key, tree.upper_bound(key, &numeric_comp)->key);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tOAK_ASSERT(tree.find(*key, &numeric_comp) != tree.end());'), (6, 2, u'-\t\tOAK_ASSERT_EQ(tree.find(*key, &numeric_comp)->key, *key);'), (7, 1, u'+\t\tOAK_ASSERT(tree.find(key, &numeric_comp) != tree.end());'), (8, 1, u'+\t\tOAK_ASSERT_EQ(tree.find(key, &numeric_comp)->key, key);'), (10, 2, u'-\t\tOAK_ASSERT(tree.lower_bound(*key, &numeric_comp) != tree.end());'), (11, 2, u'-\t\tOAK_ASSERT_EQ(tree.lower_bound(*key, &numeric_comp)->key, *key);'), (12, 1, u'+\t\tOAK_ASSERT(tree.lower_bound(key, &numeric_comp) != tree.end());'), (13, 1, u'+\t\tOAK_ASSERT_EQ(tree.lower_bound(key, &numeric_comp)->key, key);'), (15, 2, u'-\t\tOAK_ASSERT(tree.upper_bound(*key, &numeric_comp) == ++tree.find(*key, &numeric_comp));'), (17, 1, u'+\t\tOAK_ASSERT(tree.upper_bound(key, &numeric_comp) == ++tree.find(key, &numeric_comp));'), (20, 2, u'-\t\t\tOAK_ASSERT_LT(*key, tree.upper_bound(*key, &numeric_comp)->key);'), (21, 1, u'+\t\t\tOAK_ASSERT_LT(key, tree.upper_bound(key, &numeric_comp)->key);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tOAK_ASSERT(tree.find(*key, &numeric_comp) == tree.end());'), (6, 1, u'+\t\tOAK_ASSERT(tree.find(key, &numeric_comp) == tree.end());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tOAK_ASSERT(tree.find(*key, &numeric_comp) == tree.end());'), (6, 1, u'+\t\tOAK_ASSERT(tree.find(key, &numeric_comp) == tree.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tOAK_ASSERT(tree.find(*key, &numeric_comp) == tree.end());'), (6, 1, u'+\t\tOAK_ASSERT(tree.find(key, &numeric_comp) == tree.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t\tOAK_ASSERT(tree.lower_bound(*key, &numeric_comp) == tree.end());'), (9, 1, u'+\t\t\tOAK_ASSERT(tree.lower_bound(key, &numeric_comp) == tree.end());')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: test_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t\tOAK_ASSERT(tree.lower_bound(*key, &numeric_comp) == tree.end());'), (9, 1, u'+\t\t\tOAK_ASSERT(tree.lower_bound(key, &numeric_comp) == tree.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t\tOAK_ASSERT(tree.lower_bound(*key, &numeric_comp) == tree.end());'), (9, 1, u'+\t\t\tOAK_ASSERT(tree.lower_bound(key, &numeric_comp) == tree.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tOAK_ASSERT_LE(*key, tree.lower_bound(*key, &numeric_comp)->key);'), (3, 2, u'-\t\t\tOAK_ASSERT_EQ(tree.lower_bound(*key, &numeric_comp)->key, *existingKeys.lower_bound(*key));'), (4, 1, u'+\t\t\tOAK_ASSERT_LE(key, tree.lower_bound(key, &numeric_comp)->key);'), (5, 1, u'+\t\t\tOAK_ASSERT_EQ(tree.lower_bound(key, &numeric_comp)->key, *existingKeys.lower_bound(key));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tOAK_ASSERT_LE(*key, tree.lower_bound(*key, &numeric_comp)->key);'), (3, 2, u'-\t\t\tOAK_ASSERT_EQ(tree.lower_bound(*key, &numeric_comp)->key, *existingKeys.lower_bound(*key));'), (4, 1, u'+\t\t\tOAK_ASSERT_LE(key, tree.lower_bound(key, &numeric_comp)->key);'), (5, 1, u'+\t\t\tOAK_ASSERT_EQ(tree.lower_bound(key, &numeric_comp)->key, *existingKeys.lower_bound(key));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tOAK_ASSERT_LE(*key, tree.lower_bound(*key, &numeric_comp)->key);'), (3, 2, u'-\t\t\tOAK_ASSERT_EQ(tree.lower_bound(*key, &numeric_comp)->key, *existingKeys.lower_bound(*key));'), (4, 1, u'+\t\t\tOAK_ASSERT_LE(key, tree.lower_bound(key, &numeric_comp)->key);'), (5, 1, u'+\t\t\tOAK_ASSERT_EQ(tree.lower_bound(key, &numeric_comp)->key, *existingKeys.lower_bound(key));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t\tOAK_ASSERT(tree.upper_bound(*key, &numeric_comp) == tree.end());'), (9, 1, u'+\t\t\tOAK_ASSERT(tree.upper_bound(key, &numeric_comp) == tree.end());')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: test_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t\tOAK_ASSERT(tree.upper_bound(*key, &numeric_comp) == tree.end());'), (9, 1, u'+\t\t\tOAK_ASSERT(tree.upper_bound(key, &numeric_comp) == tree.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t\tOAK_ASSERT(tree.upper_bound(*key, &numeric_comp) == tree.end());'), (9, 1, u'+\t\t\tOAK_ASSERT(tree.upper_bound(key, &numeric_comp) == tree.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tOAK_ASSERT_LT(*key, tree.upper_bound(*key, &numeric_comp)->key);'), (3, 2, u'-\t\t\tOAK_ASSERT_EQ(tree.upper_bound(*key, &numeric_comp)->key, *existingKeys.upper_bound(*key));'), (4, 1, u'+\t\t\tOAK_ASSERT_LT(key, tree.upper_bound(key, &numeric_comp)->key);'), (5, 1, u'+\t\t\tOAK_ASSERT_EQ(tree.upper_bound(key, &numeric_comp)->key, *existingKeys.upper_bound(key));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test_search
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tOAK_ASSERT_LT(*key, tree.upper_bound(*key, &numeric_comp)->key);'), (3, 2, u'-\t\t\tOAK_ASSERT_EQ(tree.upper_bound(*key, &numeric_comp)->key, *existingKeys.upper_bound(*key));'), (4, 1, u'+\t\t\tOAK_ASSERT_LT(key, tree.upper_bound(key, &numeric_comp)->key);'), (5, 1, u'+\t\t\tOAK_ASSERT_EQ(tree.upper_bound(key, &numeric_comp)->key, *existingKeys.upper_bound(key));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tOAK_ASSERT_LT(*key, tree.upper_bound(*key, &numeric_comp)->key);'), (3, 2, u'-\t\t\tOAK_ASSERT_EQ(tree.upper_bound(*key, &numeric_comp)->key, *existingKeys.upper_bound(*key));'), (4, 1, u'+\t\t\tOAK_ASSERT_LT(key, tree.upper_bound(key, &numeric_comp)->key);'), (5, 1, u'+\t\t\tOAK_ASSERT_EQ(tree.upper_bound(key, &numeric_comp)->key, *existingKeys.upper_bound(key));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t\tOAK_ASSERT(tree.find(*key, &position_comp) != tree.end());'), (15, 1, u'+\t\tOAK_ASSERT(tree.find(key, &position_comp) != tree.end());')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: test_range_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t\tOAK_ASSERT(tree.find(*key, &position_comp) != tree.end());'), (15, 1, u'+\t\tOAK_ASSERT(tree.find(key, &position_comp) != tree.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t\tOAK_ASSERT(tree.find(*key, &position_comp) != tree.end());'), (15, 1, u'+\t\tOAK_ASSERT(tree.find(key, &position_comp) != tree.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u"-\t\tASSERT_EQ((*line)[1], ' ');"), (7, 1, u"+\t\tASSERT_EQ(line[1], ' ');")]
===========================================
===========================================
Total add: 3
Total del: 3
Header: parse_status_output
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u"-\t\tASSERT_EQ((*line)[1], ' ');"), (7, 1, u"+\t\tASSERT_EQ(line[1], ' ');")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u"-\t\tASSERT_EQ((*line)[1], ' ');"), (7, 1, u"+\t\tASSERT_EQ(line[1], ' ');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 2, u'-\t\tASSERT(_delegate);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT_NE(it, softlines.begin());'), (3, 1, u'+\t\tASSERT(it != softlines.begin());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: namespace ng
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT_NE(it, softlines.begin());'), (3, 1, u'+\t\tASSERT(it != softlines.begin());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT_NE(it, softlines.begin());'), (3, 1, u'+\t\tASSERT(it != softlines.begin());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tASSERT_NE(it, softlines.begin());'), (15, 1, u'+\t\tASSERT_LT(softline - softlineOffset, softlines.size());')]
===========================================
===========================================
Total add: 20
Total del: 0
Header: namespace ng
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tASSERT_NE(it, softlines.begin());'), (15, 1, u'+\t\tASSERT_LT(softline - softlineOffset, softlines.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tASSERT_NE(it, softlines.begin());'), (15, 1, u'+\t\tASSERT_LT(softline - softlineOffset, softlines.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tASSERT(scopes.empty() || (--scopes.end())->first <= text.size());')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: namespace ct
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tASSERT(scopes.empty() || (--scopes.end())->first <= text.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tASSERT(scopes.empty() || (--scopes.end())->first <= text.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\t\tASSERT(scope.back() != NULL_STR);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: namespace
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\t\tASSERT(scope.back() != NULL_STR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\t\tASSERT(scope.back() != NULL_STR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tASSERT(node);'), (17, 1, u'+\t\tASSERT(node);')]
===========================================
===========================================
Total add: 8
Total del: 6
Header: namespace scope
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tASSERT(node);'), (17, 1, u'+\t\tASSERT(node);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tASSERT(node);'), (17, 1, u'+\t\tASSERT(node);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-\t\t\t\tassert(i); assert(j);'), (38, 2, u'-\t\t\t\tassert(i-1 < path.scopes.size());'), (39, 2, u'-\t\t\t\tassert(j-1 < scopes.size());')]
===========================================
===========================================
Total add: 60
Total del: 65
Header: namespace scope
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-\t\t\t\tassert(i); assert(j);'), (38, 2, u'-\t\t\t\tassert(i-1 < path.scopes.size());'), (39, 2, u'-\t\t\t\tassert(j-1 < scopes.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-\t\t\t\tassert(i); assert(j);'), (38, 2, u'-\t\t\t\tassert(i-1 < path.scopes.size());'), (39, 2, u'-\t\t\t\tassert(j-1 < scopes.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t\t\tassert(i < lhs.size()); assert(i < rhs.size());')]
===========================================
===========================================
Total add: 19
Total del: 5
Header: namespace scope
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t\t\tassert(i < lhs.size()); assert(i < rhs.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t\t\tassert(i < lhs.size()); assert(i < rhs.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\tASSERT(v.size() % 2 == 1); ASSERT_EQ(v.back(), "");')]
===========================================
===========================================
Total add: 7
Total del: 5
Header: parse_diff
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\tASSERT(v.size() % 2 == 1); ASSERT_EQ(v.back(), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\tASSERT(v.size() % 2 == 1); ASSERT_EQ(v.back(), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\tASSERT(!v.empty()); ASSERT_EQ(v.back(), "");'), (8, 2, u"-\t\tASSERT_EQ((*str)[1], ' ');")]
===========================================
===========================================
Total add: 3
Total del: 6
Header: parse_ls
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\tASSERT(!v.empty()); ASSERT_EQ(v.back(), "");'), (8, 2, u"-\t\tASSERT_EQ((*str)[1], ' ');")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\tASSERT(!v.empty()); ASSERT_EQ(v.back(), "");'), (8, 2, u"-\t\tASSERT_EQ((*str)[1], ' ');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tOAK_ASSERT_EQ(decode::url_part("foo%2Bbar"),                "foo+bar");'), (3, 1, u'+\tOAK_ASSERT_EQ(decode::url_part("foo+bar"),                  "foo bar");')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: test_decode_url
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tOAK_ASSERT_EQ(decode::url_part("foo%2Bbar"),                "foo+bar");'), (3, 1, u'+\tOAK_ASSERT_EQ(decode::url_part("foo+bar"),                  "foo bar");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tOAK_ASSERT_EQ(decode::url_part("foo%2Bbar"),                "foo+bar");'), (3, 1, u'+\tOAK_ASSERT_EQ(decode::url_part("foo+bar"),                  "foo bar");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\t\t\tASSERT(scope.back() != NULL_STR);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: namespace
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\t\t\tASSERT(scope.back() != NULL_STR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\t\t\tASSERT(scope.back() != NULL_STR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tOAK_ASSERT_EQ("bar < foo",       transform::transpose("foo < bar"));'), (3, 1, u'+\tOAK_ASSERT_EQ("bar <= foo",      transform::transpose("foo <= bar"));'), (4, 1, u'+\tOAK_ASSERT_EQ("bar == foo",      transform::transpose("foo == bar"));'), (5, 1, u'+\tOAK_ASSERT_EQ("bar != foo",      transform::transpose("foo != bar"));'), (6, 1, u'+\tOAK_ASSERT_EQ("bar > foo",       transform::transpose("foo > bar"));'), (7, 1, u'+\tOAK_ASSERT_EQ("bar >= foo",      transform::transpose("foo >= bar"));')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: test_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tOAK_ASSERT_EQ("bar < foo",       transform::transpose("foo < bar"));'), (3, 1, u'+\tOAK_ASSERT_EQ("bar <= foo",      transform::transpose("foo <= bar"));'), (4, 1, u'+\tOAK_ASSERT_EQ("bar == foo",      transform::transpose("foo == bar"));'), (5, 1, u'+\tOAK_ASSERT_EQ("bar != foo",      transform::transpose("foo != bar"));'), (6, 1, u'+\tOAK_ASSERT_EQ("bar > foo",       transform::transpose("foo > bar"));'), (7, 1, u'+\tOAK_ASSERT_EQ("bar >= foo",      transform::transpose("foo >= bar"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tOAK_ASSERT_EQ("bar < foo",       transform::transpose("foo < bar"));'), (3, 1, u'+\tOAK_ASSERT_EQ("bar <= foo",      transform::transpose("foo <= bar"));'), (4, 1, u'+\tOAK_ASSERT_EQ("bar == foo",      transform::transpose("foo == bar"));'), (5, 1, u'+\tOAK_ASSERT_EQ("bar != foo",      transform::transpose("foo != bar"));'), (6, 1, u'+\tOAK_ASSERT_EQ("bar > foo",       transform::transpose("foo > bar"));'), (7, 1, u'+\tOAK_ASSERT_EQ("bar >= foo",      transform::transpose("foo >= bar"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "fixup! Lorem ipsum dolor sit amet."), "\xc2\xabtest\xc2\xbb\xc2\xabfixup\xc2\xbb\xc2\xabwarn\xc2\xbbfixup!\xc2\xab/warn\xc2\xbb\xc2\xab/fixup\xc2\xbb\xc2\xabwarn\xc2\xbb Lorem ipsum dolor sit amet.\xc2\xab/warn\xc2\xbb\xc2\xab/test\xc2\xbb");')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: test_captures
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "fixup! Lorem ipsum dolor sit amet."), "\xc2\xabtest\xc2\xbb\xc2\xabfixup\xc2\xbb\xc2\xabwarn\xc2\xbbfixup!\xc2\xab/warn\xc2\xbb\xc2\xab/fixup\xc2\xbb\xc2\xabwarn\xc2\xbb Lorem ipsum dolor sit amet.\xc2\xab/warn\xc2\xbb\xc2\xab/test\xc2\xbb");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "fixup! Lorem ipsum dolor sit amet."), "\xc2\xabtest\xc2\xbb\xc2\xabfixup\xc2\xbb\xc2\xabwarn\xc2\xbbfixup!\xc2\xab/warn\xc2\xbb\xc2\xab/fixup\xc2\xbb\xc2\xabwarn\xc2\xbb Lorem ipsum dolor sit amet.\xc2\xab/warn\xc2\xbb\xc2\xab/test\xc2\xbb");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ("d\xc3\xb8rgelb\xc3\x86",   transform::transpose("\xc3\x86blegr\xc3\xb8d"));'), (3, 2, u'-\tOAK_ASSERT_EQ("d\xc3\xb8rgelb\xc3\x86\\n", transform::transpose("\xc3\x86blegr\xc3\xb8d\\n"));'), (4, 2, u'-\tOAK_ASSERT_EQ("bar, foo",   transform::transpose("foo, bar"));'), (5, 2, u'-\tOAK_ASSERT_EQ("(bar, foo)", transform::transpose("(foo, bar)"));'), (6, 1, u'+\tOAK_ASSERT_EQ("d\xc3\xb8rgelb\xc3\x86",        transform::transpose("\xc3\x86blegr\xc3\xb8d"));'), (7, 1, u'+\tOAK_ASSERT_EQ("d\xc3\xb8rgelb\xc3\x86\\n",      transform::transpose("\xc3\x86blegr\xc3\xb8d\\n"));'), (8, 1, u'+\tOAK_ASSERT_EQ("bar, foo",        transform::transpose("foo, bar"));'), (9, 1, u'+\tOAK_ASSERT_EQ("bar, (foo)",      transform::transpose("(foo), bar"));'), (10, 1, u'+\tOAK_ASSERT_EQ("(bar), foo",      transform::transpose("foo, (bar)"));'), (11, 1, u'+\tOAK_ASSERT_EQ("(bar, foo)",      transform::transpose("(foo, bar)"));'), (12, 1, u'+\tOAK_ASSERT_EQ("bar + foo",       transform::transpose("foo + bar"));'), (13, 1, u'+\tOAK_ASSERT_EQ("\'bar\', \'foo\'",    transform::transpose("\'foo\', \'bar\'"));'), (14, 1, u'+\tOAK_ASSERT_EQ("bar() : foo()",   transform::transpose("foo() : bar()"));'), (15, 1, u'+\tOAK_ASSERT_EQ("(\'bar\', \'foo\')",  transform::transpose("(\'foo\', \'bar\')"));')]
===========================================
===========================================
Total add: 10
Total del: 4
Header: test_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ("d\xc3\xb8rgelb\xc3\x86",   transform::transpose("\xc3\x86blegr\xc3\xb8d"));'), (3, 2, u'-\tOAK_ASSERT_EQ("d\xc3\xb8rgelb\xc3\x86\\n", transform::transpose("\xc3\x86blegr\xc3\xb8d\\n"));'), (4, 2, u'-\tOAK_ASSERT_EQ("bar, foo",   transform::transpose("foo, bar"));'), (5, 2, u'-\tOAK_ASSERT_EQ("(bar, foo)", transform::transpose("(foo, bar)"));'), (6, 1, u'+\tOAK_ASSERT_EQ("d\xc3\xb8rgelb\xc3\x86",        transform::transpose("\xc3\x86blegr\xc3\xb8d"));'), (7, 1, u'+\tOAK_ASSERT_EQ("d\xc3\xb8rgelb\xc3\x86\\n",      transform::transpose("\xc3\x86blegr\xc3\xb8d\\n"));'), (8, 1, u'+\tOAK_ASSERT_EQ("bar, foo",        transform::transpose("foo, bar"));'), (9, 1, u'+\tOAK_ASSERT_EQ("bar, (foo)",      transform::transpose("(foo), bar"));'), (10, 1, u'+\tOAK_ASSERT_EQ("(bar), foo",      transform::transpose("foo, (bar)"));'), (11, 1, u'+\tOAK_ASSERT_EQ("(bar, foo)",      transform::transpose("(foo, bar)"));'), (12, 1, u'+\tOAK_ASSERT_EQ("bar + foo",       transform::transpose("foo + bar"));'), (13, 1, u'+\tOAK_ASSERT_EQ("\'bar\', \'foo\'",    transform::transpose("\'foo\', \'bar\'"));'), (14, 1, u'+\tOAK_ASSERT_EQ("bar() : foo()",   transform::transpose("foo() : bar()"));'), (15, 1, u'+\tOAK_ASSERT_EQ("(\'bar\', \'foo\')",  transform::transpose("(\'foo\', \'bar\')"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ("d\xc3\xb8rgelb\xc3\x86",   transform::transpose("\xc3\x86blegr\xc3\xb8d"));'), (3, 2, u'-\tOAK_ASSERT_EQ("d\xc3\xb8rgelb\xc3\x86\\n", transform::transpose("\xc3\x86blegr\xc3\xb8d\\n"));'), (4, 2, u'-\tOAK_ASSERT_EQ("bar, foo",   transform::transpose("foo, bar"));'), (5, 2, u'-\tOAK_ASSERT_EQ("(bar, foo)", transform::transpose("(foo, bar)"));'), (6, 1, u'+\tOAK_ASSERT_EQ("d\xc3\xb8rgelb\xc3\x86",        transform::transpose("\xc3\x86blegr\xc3\xb8d"));'), (7, 1, u'+\tOAK_ASSERT_EQ("d\xc3\xb8rgelb\xc3\x86\\n",      transform::transpose("\xc3\x86blegr\xc3\xb8d\\n"));'), (8, 1, u'+\tOAK_ASSERT_EQ("bar, foo",        transform::transpose("foo, bar"));'), (9, 1, u'+\tOAK_ASSERT_EQ("bar, (foo)",      transform::transpose("(foo), bar"));'), (10, 1, u'+\tOAK_ASSERT_EQ("(bar), foo",      transform::transpose("foo, (bar)"));'), (11, 1, u'+\tOAK_ASSERT_EQ("(bar, foo)",      transform::transpose("(foo, bar)"));'), (12, 1, u'+\tOAK_ASSERT_EQ("bar + foo",       transform::transpose("foo + bar"));'), (13, 1, u'+\tOAK_ASSERT_EQ("\'bar\', \'foo\'",    transform::transpose("\'foo\', \'bar\'"));'), (14, 1, u'+\tOAK_ASSERT_EQ("bar() : foo()",   transform::transpose("foo() : bar()"));'), (15, 1, u'+\tOAK_ASSERT_EQ("(\'bar\', \'foo\')",  transform::transpose("(\'foo\', \'bar\')"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(rule->include.expired());'), (3, 1, u'+\t\tASSERT(!rule->include);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: namespace parse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(rule->include.expired());'), (3, 1, u'+\t\tASSERT(!rule->include);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(rule->include.expired());'), (3, 1, u'+\t\tASSERT(!rule->include);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\tASSERT(grammarItem);'), (17, 1, u'+\t\tASSERT(item);')]
===========================================
===========================================
Total add: 15
Total del: 4
Header: namespace parse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\tASSERT(grammarItem);'), (17, 1, u'+\t\tASSERT(item);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\tASSERT(grammarItem);'), (17, 1, u'+\t\tASSERT(item);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+\t\tASSERT(rule->include.expired());')]
===========================================
===========================================
Total add: 123
Total del: 0
Header: namespace parse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+\t\tASSERT(rule->include.expired());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+\t\tASSERT(rule->include.expired());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tASSERT(grammarItem);')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: namespace parse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tASSERT(grammarItem);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tASSERT(grammarItem);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 2, u'-\t\tASSERT(!escape);')]
===========================================
===========================================
Total add: 9
Total del: 57
Header: namespace parse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 2, u'-\t\tASSERT(!escape);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 2, u'-\t\tASSERT(!escape);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tASSERT(grammarItem);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: namespace parse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tASSERT(grammarItem);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tASSERT(grammarItem);')]
===========================================
Class:class EventStringTests : public CxxTest::TestSuite void test_normalize_event_string () public: 	void test_normalize_event_string () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("@"),    "");'), (9, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("#"),    "");'), (10, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("$"),    "");'), (11, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("^"),    "");'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("~"),    "");'), (13, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("@~"),   "");'), (14, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("!"),    "!");'), (15, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("@"),    "");'), (16, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("#"),    "");'), (17, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("$"),    "");'), (18, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("^"),    "");'), (19, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("~"),    "");'), (20, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("@~"),   "");'), (21, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("!"),    "!");'), (23, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("\\\\@"),    "@");'), (24, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("\\\\#"),    "#");'), (25, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("\\\\$"),    "$");'), (26, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("\\\\^"),    "^");'), (27, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("\\\\~"),    "~");'), (28, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("@\\\\~"),   "@~");'), (29, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("~\\\\@"),   "~@");'), (30, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("\\\\!"),    "!");'), (31, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("\\\\\\\\"),   "\\\\");'), (32, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("\\\\@"),    "@");'), (33, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("\\\\#"),    "#");'), (34, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("\\\\$"),    "$");'), (35, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("\\\\^"),    "^");'), (36, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("\\\\~"),    "~");'), (37, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("@\\\\~"),   "@~");'), (38, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("~\\\\@"),   "~@");'), (39, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("\\\\!"),    "!");'), (40, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("\\\\\\\\"),   "\\\\");'), (42, 2, u'-\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("^$@~#1"), "#^~$@1");'), (44, 1, u'+\tOAK_ASSERT_EQ(ns::normalize_event_string("^$@~#1"), "#^~$@1");'), (49, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("@"),    "@");'), (50, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("#"),    "#");'), (51, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("$"),    "$");'), (52, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("^"),    "^");'), (53, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("~"),    "~");'), (54, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("@~"),   "\xe2\x8c\x98~");'), (55, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("~@"),   "\xe2\x8c\xa5@");'), (56, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("!"),    "!");'), (57, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("\\\\"),   "\\\\");'), (60, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("@"),    "@");'), (61, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("#"),    "#");'), (62, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("$"),    "$");'), (63, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("^"),    "^");'), (64, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("~"),    "~");'), (65, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("@~"),   "\xe2\x8c\x98~");'), (66, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("~@"),   "\xe2\x8c\xa5@");'), (67, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("!"),    "!");'), (68, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("\\\\"),   "\\\\");'), (70, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("@1"),    "\xe2\x8c\x981");'), (71, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("#1"),    "1\xe2\x83\xa3");'), (72, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("$1"),    "\xe2\x87\xa71");'), (73, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("^1"),    "\xe2\x8c\x831");'), (74, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("~1"),    "\xe2\x8c\xa51");'), (75, 2, u'-\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("A"),     "\xe2\x87\xa7A");'), (78, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("@1"),    "\xe2\x8c\x981");'), (79, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("#1"),    "1\xe2\x83\xa3");'), (80, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("$1"),    "\xe2\x87\xa71");'), (81, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("^1"),    "\xe2\x8c\x831");'), (82, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("~1"),    "\xe2\x8c\xa51");'), (83, 1, u'+\tOAK_ASSERT_EQ(ns::glyphs_for_event_string("A"),     "\xe2\x87\xa7A");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tOAK_ASSERT_EQ("\xe2\x80\xb8c\xcc\x84\xcc\x8c\xe2\x80\xb8 \xe2\x80\xb8\xf0\xa0\xbb\xb5\xe2\x80\xb8", search("\\\\b", "c\xcc\x84\xcc\x8c \xf0\xa0\xbb\xb5", find::regular_expression));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: test_find_all
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tOAK_ASSERT_EQ("\xe2\x80\xb8c\xcc\x84\xcc\x8c\xe2\x80\xb8 \xe2\x80\xb8\xf0\xa0\xbb\xb5\xe2\x80\xb8", search("\\\\b", "c\xcc\x84\xcc\x8c \xf0\xa0\xbb\xb5", find::regular_expression));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tOAK_ASSERT_EQ("\xe2\x80\xb8c\xcc\x84\xcc\x8c\xe2\x80\xb8 \xe2\x80\xb8\xf0\xa0\xbb\xb5\xe2\x80\xb8", search("\\\\b", "c\xcc\x84\xcc\x8c \xf0\xa0\xbb\xb5", find::regular_expression));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+\t\t\t\tASSERT(false);'), (75, 1, u'+\t\t\t\tASSERT(false);')]
===========================================
===========================================
Total add: 58
Total del: 18
Header: namespace document
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+\t\t\t\tASSERT(false);'), (75, 1, u'+\t\t\t\tASSERT(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+\t\t\t\tASSERT(false);'), (75, 1, u'+\t\t\t\tASSERT(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+\t\t\t\tASSERT(false);')]
===========================================
===========================================
Total add: 6
Total del: 10
Header: namespace document
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+\t\t\t\tASSERT(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+\t\t\t\tASSERT(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t\t\t\tASSERTF(it != documents_by_path.end(), "%s, %s", to_s(key).c_str(), to_s(uuid).c_str());'), (35, 1, u'+\t\t\t\tASSERT(false);'), (37, 2, u'-\t\t\tASSERT(documents.find(uuid) != documents.end());'), (40, 1, u'+\t\t\tASSERT(it != _documents_by_uuid.end());'), (51, 2, u'-\t\t\t\tASSERT(documents_by_path.find(oldKey) != documents_by_path.end());'), (57, 2, u'-\t\t\t\tASSERT(documents_by_path.find(newKey) == documents_by_path.end());'), (110, 1, u'+\t\t\tASSERT(_documents_by_uuid.find(r->uuid) == _documents_by_uuid.end());'), (117, 1, u'+\t\t\t\tASSERT(_documents_by_path.find(r->path) == _documents_by_path.end());'), (124, 1, u'+\t\t\t\tASSERT(_documents_by_inode.find(r->inode) == _documents_by_inode.end());'), (144, 2, u'-\t\t\t\tASSERTF(it == documents_by_path.end() || !it->second.lock(), "%s, %s\\n", to_s(doc->_key).c_str(), to_s(doc->identifier()).c_str());'), (154, 1, u'+\t\t\tASSERT(it != _documents_by_uuid.end());')]
===========================================
===========================================
Total add: 62
Total del: 64
Header: namespace document
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t\t\t\tASSERTF(it != documents_by_path.end(), "%s, %s", to_s(key).c_str(), to_s(uuid).c_str());'), (35, 1, u'+\t\t\t\tASSERT(false);'), (37, 2, u'-\t\t\tASSERT(documents.find(uuid) != documents.end());'), (40, 1, u'+\t\t\tASSERT(it != _documents_by_uuid.end());'), (51, 2, u'-\t\t\t\tASSERT(documents_by_path.find(oldKey) != documents_by_path.end());'), (57, 2, u'-\t\t\t\tASSERT(documents_by_path.find(newKey) == documents_by_path.end());'), (110, 1, u'+\t\t\tASSERT(_documents_by_uuid.find(r->uuid) == _documents_by_uuid.end());'), (117, 1, u'+\t\t\t\tASSERT(_documents_by_path.find(r->path) == _documents_by_path.end());'), (124, 1, u'+\t\t\t\tASSERT(_documents_by_inode.find(r->inode) == _documents_by_inode.end());'), (144, 2, u'-\t\t\t\tASSERTF(it == documents_by_path.end() || !it->second.lock(), "%s, %s\\n", to_s(doc->_key).c_str(), to_s(doc->identifier()).c_str());'), (154, 1, u'+\t\t\tASSERT(it != _documents_by_uuid.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t\t\t\tASSERTF(it != documents_by_path.end(), "%s, %s", to_s(key).c_str(), to_s(uuid).c_str());'), (35, 1, u'+\t\t\t\tASSERT(false);'), (37, 2, u'-\t\t\tASSERT(documents.find(uuid) != documents.end());'), (40, 1, u'+\t\t\tASSERT(it != _documents_by_uuid.end());'), (51, 2, u'-\t\t\t\tASSERT(documents_by_path.find(oldKey) != documents_by_path.end());'), (57, 2, u'-\t\t\t\tASSERT(documents_by_path.find(newKey) == documents_by_path.end());'), (110, 1, u'+\t\t\tASSERT(_documents_by_uuid.find(r->uuid) == _documents_by_uuid.end());'), (117, 1, u'+\t\t\t\tASSERT(_documents_by_path.find(r->path) == _documents_by_path.end());'), (124, 1, u'+\t\t\t\tASSERT(_documents_by_inode.find(r->inode) == _documents_by_inode.end());'), (144, 2, u'-\t\t\t\tASSERTF(it == documents_by_path.end() || !it->second.lock(), "%s, %s\\n", to_s(doc->_key).c_str(), to_s(doc->identifier()).c_str());'), (154, 1, u'+\t\t\tASSERT(it != _documents_by_uuid.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t\tTS_ASSERT_EQUALS(path::name(doc_2->path()), "file_2.txt");'), (15, 1, u'+\t\tTS_ASSERT(*doc_2 == *doc_3);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(path::name(doc_1->path()), "file_1.txt");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(path::name(doc_2->path()), "file_1.txt");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(path::name(doc_3->path()), "file_1.txt");'), (25, 1, u'+\t\tTS_ASSERT(*doc_4 == *doc_5);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(path::name(doc_4->path()), "future.txt");')]
===========================================
===========================================
Total add: 18
Total del: 2
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t\tTS_ASSERT_EQUALS(path::name(doc_2->path()), "file_2.txt");'), (15, 1, u'+\t\tTS_ASSERT(*doc_2 == *doc_3);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(path::name(doc_1->path()), "file_1.txt");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(path::name(doc_2->path()), "file_1.txt");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(path::name(doc_3->path()), "file_1.txt");'), (25, 1, u'+\t\tTS_ASSERT(*doc_4 == *doc_5);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(path::name(doc_4->path()), "future.txt");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t\tTS_ASSERT_EQUALS(path::name(doc_2->path()), "file_2.txt");'), (15, 1, u'+\t\tTS_ASSERT(*doc_2 == *doc_3);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(path::name(doc_1->path()), "file_1.txt");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(path::name(doc_2->path()), "file_1.txt");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(path::name(doc_3->path()), "file_1.txt");'), (25, 1, u'+\t\tTS_ASSERT(*doc_4 == *doc_5);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(path::name(doc_4->path()), "future.txt");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tASSERT_EQ(lock_count, 1); // we assert that a lock has been obtained by the caller')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: namespace document
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tASSERT_EQ(lock_count, 1); // we assert that a lock has been obtained by the caller')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tASSERT_EQ(lock_count, 1); // we assert that a lock has been obtained by the caller')]
===========================================
Class:class DeltaTreeTests : public CxxTest::TestSuite struct annotation_t 	struct annotation_t 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(85, 2, u'-\tvoid tearDown () { TS_ASSERT(tree.structural_integrity()); tree.clear(); }'), (95, 2, u'-\t\tTS_ASSERT(tree.structural_integrity());'), (96, 2, u'-\t\tTS_ASSERT_EQUALS(tree.aggregated().number_of_children, tree.size());'), (107, 2, u'-\t\tTS_ASSERT_EQUALS(buf, buffer);'), (112, 2, u'-\t\tTS_ASSERT_EQUALS(buf, buffer);')]
===========================================
Class:class NumericTreeTests : public CxxTest::TestSuite static int numeric_comp (ssize_t key, ssize_t const& offset, ssize_t const& node) { return key < node ? -1 : (key == node ? 0 : +1); } static int numeric_comp (ssize_t key, ssize_t const& offset, ssize_t const& node) 
Class:class RangeTreeTests : public CxxTest::TestSuite struct key_t 	struct key_t 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t\tTS_ASSERT_EQUALS(m, range_t(0, 6));'), (20, 1, u'+\tOAK_ASSERT_EQ(m, range_t(0, 6));'), (32, 2, u'-\t\tTS_ASSERT_LESS_THAN(m.second, m.first);'), (34, 2, u'-\t\tTS_ASSERT_LESS_THAN(m.second, m.first);'), (37, 2, u'-\t\tTS_ASSERT_EQUALS(range_t(base + m.first, base + m.second), range_t(6, 17));'), (42, 1, u'+\tOAK_ASSERT_LT(m.second, m.first);'), (44, 1, u'+\tOAK_ASSERT_LT(m.second, m.first);'), (47, 1, u'+\tOAK_ASSERT_EQ(range_t(base + m.first, base + m.second), range_t(6, 17));')]
===========================================
Class:class FormatStringTests : public CxxTest::TestSuite void test_format_string () public: 	void test_format_string () 	{ 	
Class:class GlobTests : public CxxTest::TestSuite static std::string expand (std::string const& str) 	static std::string expand (std::string const& str) 	{ 	
Class:class GlobListTests : public CxxTest::TestSuite void test_empty_glob_list () public: 	void test_empty_glob_list () 	{ 	
Class:class IndentTests : public CxxTest::TestSuite static std::map<indent::pattern_type, regexp::pattern_t> const& patterns () 	static std::map<indent::pattern_type, regexp::pattern_t> const& patterns () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (131, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (159, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (185, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (213, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (239, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (267, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (293, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (319, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (343, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (361, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (377, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
Total add: 181
Total del: 185
Header: struct line_t
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (131, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (159, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (185, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (213, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (239, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (267, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (293, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (319, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (343, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (361, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (377, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (131, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (159, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (185, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (213, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (239, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (267, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (293, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (319, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (343, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (361, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);'), (377, 1, u'+\t\tOAK_MASSERT_EQ(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
Class:class MatchTests : public CxxTest::TestSuite void test_match () public: 	void test_match () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\tTS_ASSERT(match);'), (10, 2, u'-\t\tTS_ASSERT_EQUALS(match[0], "foo bar");'), (11, 2, u'-\t\tTS_ASSERT_EQUALS(match[1], "foo");'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(match[2], "bar");'), (13, 2, u'-\t\tTS_ASSERT_EQUALS(match[3], NULL_STR);'), (17, 1, u'+\tOAK_ASSERT(match);'), (18, 1, u'+\tOAK_ASSERT_EQ(match[0], "foo bar");'), (19, 1, u'+\tOAK_ASSERT_EQ(match[1], "foo");'), (20, 1, u'+\tOAK_ASSERT_EQ(match[2], "bar");'), (21, 1, u'+\tOAK_ASSERT_EQ(match[3], NULL_STR);')]
===========================================
Class:class SnippetTests : public CxxTest::TestSuite void test_snippet () public: 	void test_snippet () 	{ 	
Class: class CaseTests : public CxxTest::TestSuite void test_upcase () public: 	void test_upcase () 	{ 	
Class:class CtypeTests : public CxxTest::TestSuite void test_east_asia_width () public: 	void test_east_asia_width () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x10FF), false);'), (9, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x1100), true);'), (10, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x1101), true);'), (11, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x33FE), true);'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x33FF), true);'), (13, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x3400), true);'), (14, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x3401), true);'), (15, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x3402), true);'), (16, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x4DBE), true);'), (17, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x4DBF), true);'), (18, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x4DC0), false);'), (19, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x4DC1), false);'), (20, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x10FF), false);'), (21, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x1100), true);'), (22, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x1101), true);'), (23, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x33FE), true);'), (24, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x33FF), true);'), (25, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x3400), true);'), (26, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x3401), true);'), (27, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x3402), true);'), (28, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x4DBE), true);'), (29, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x4DBF), true);'), (30, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x4DC0), false);'), (31, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x4DC1), false);'), (33, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x2E99), true);'), (34, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x2E9A), false);'), (35, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x2E9B), true);'), (36, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x2E99), true);'), (37, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x2E9A), false);'), (38, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x2E9B), true);'), (40, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x3FFFC), true);'), (41, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x3FFFD), true);'), (42, 2, u'-\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x3FFFE), false);'), (45, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x3FFFC), true);'), (46, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x3FFFD), true);'), (47, 1, u'+\tOAK_ASSERT_EQ(text::is_east_asian_width(0x3FFFE), false);')]
===========================================
Class:class DecodeTests : public CxxTest::TestSuite void test_decode () public: 	void test_decode () 	{ 	
Class:class EncodeTests : public CxxTest::TestSuite void test_url () public: 	void test_url () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\tTS_ASSERT_EQUALS("http://host/" + encode::url_part("\xc3\xa6blegr\xc3\xb8d.html"), "http://host/%C3%A6blegr%C3%B8d.html");'), (9, 2, u'-\t\tTS_ASSERT_EQUALS(encode::url_part("http://example?a=b&c=d"), "http%3A%2F%2Fexample%3Fa%3Db%26c%3Dd");'), (10, 2, u'-\t\tTS_ASSERT_EQUALS(encode::url_part("me@example.org"), "me%40example.org");'), (11, 2, u'-\t\tTS_ASSERT_EQUALS("file://localhost" + encode::url_part("/foo/bar/file name.txt", "/"), "file://localhost/foo/bar/file%20name.txt");'), (14, 1, u'+\tOAK_ASSERT_EQ("http://host/" + encode::url_part("\xc3\xa6blegr\xc3\xb8d.html"), "http://host/%C3%A6blegr%C3%B8d.html");'), (15, 1, u'+\tOAK_ASSERT_EQ(encode::url_part("http://example?a=b&c=d"), "http%3A%2F%2Fexample%3Fa%3Db%26c%3Dd");'), (16, 1, u'+\tOAK_ASSERT_EQ(encode::url_part("me@example.org"), "me%40example.org");'), (17, 1, u'+\tOAK_ASSERT_EQ("file://localhost" + encode::url_part("/foo/bar/file name.txt", "/"), "file://localhost/foo/bar/file%20name.txt");')]
===========================================
Class:class format_tests : public CxxTest::TestSuite void test_format_number () public: 	void test_format_number () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\tTS_ASSERT_EQUALS(text::format_size(1),                "1 byte");'), (9, 2, u'-\t\tTS_ASSERT_EQUALS(text::format_size(2),                "2 bytes");'), (10, 2, u'-\t\tTS_ASSERT_EQUALS(text::format_size(600),            "600 bytes");'), (11, 2, u'-\t\tTS_ASSERT_EQUALS(text::format_size(1024),           "1.0 KiB");'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(text::format_size(5*1024),         "5.0 KiB");'), (13, 2, u'-\t\tTS_ASSERT_EQUALS(text::format_size(5*1024+512),     "5.5 KiB");'), (14, 2, u'-\t\tTS_ASSERT_EQUALS(text::format_size(1024*1024),      "1.0 MiB");'), (15, 2, u'-\t\tTS_ASSERT_EQUALS(text::format_size(5*1024*1024),    "5.0 MiB");'), (16, 2, u'-\t\tTS_ASSERT_EQUALS(text::format_size(1024*1024*1024), "1.0 GiB");'), (19, 1, u'+\tOAK_ASSERT_EQ(text::format_size(1),                "1 byte");'), (20, 1, u'+\tOAK_ASSERT_EQ(text::format_size(2),                "2 bytes");'), (21, 1, u'+\tOAK_ASSERT_EQ(text::format_size(600),            "600 bytes");'), (22, 1, u'+\tOAK_ASSERT_EQ(text::format_size(1024),           "1.0 KiB");'), (23, 1, u'+\tOAK_ASSERT_EQ(text::format_size(5*1024),         "5.0 KiB");'), (24, 1, u'+\tOAK_ASSERT_EQ(text::format_size(5*1024+512),     "5.5 KiB");'), (25, 1, u'+\tOAK_ASSERT_EQ(text::format_size(1024*1024),      "1.0 MiB");'), (26, 1, u'+\tOAK_ASSERT_EQ(text::format_size(5*1024*1024),    "5.0 MiB");'), (27, 1, u'+\tOAK_ASSERT_EQ(text::format_size(1024*1024*1024), "1.0 GiB");')]
===========================================
Class:class IndentTests : public CxxTest::TestSuite void test_tab_follows_indent () public: 	void test_tab_follows_indent () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\tTS_ASSERT_EQUALS(indent.tab_size(),    4);'), (10, 2, u'-\t\tTS_ASSERT_EQUALS(indent.indent_size(), 4);'), (12, 1, u'+\tOAK_ASSERT_EQ(indent.tab_size(),    4);'), (13, 1, u'+\tOAK_ASSERT_EQ(indent.indent_size(), 4);'), (16, 2, u'-\t\tTS_ASSERT_EQUALS(indent.tab_size(),    8);'), (17, 2, u'-\t\tTS_ASSERT_EQUALS(indent.indent_size(), 8);'), (19, 1, u'+\tOAK_ASSERT_EQ(indent.tab_size(),    8);'), (20, 1, u'+\tOAK_ASSERT_EQ(indent.indent_size(), 8);'), (23, 2, u'-\t\tTS_ASSERT_EQUALS(indent.tab_size(),    3);'), (24, 2, u'-\t\tTS_ASSERT_EQUALS(indent.indent_size(), 3);'), (26, 1, u'+\tOAK_ASSERT_EQ(indent.tab_size(),    3);'), (27, 1, u'+\tOAK_ASSERT_EQ(indent.indent_size(), 3);'), (33, 2, u'-\t\tTS_ASSERT_EQUALS(indent.tab_size(),    5);'), (34, 2, u'-\t\tTS_ASSERT_EQUALS(indent.indent_size(), 3);'), (36, 1, u'+\tOAK_ASSERT_EQ(indent.tab_size(),    5);'), (37, 1, u'+\tOAK_ASSERT_EQ(indent.indent_size(), 3);'), (40, 2, u'-\t\tTS_ASSERT_EQUALS(indent.tab_size(),    5);'), (41, 2, u'-\t\tTS_ASSERT_EQUALS(indent.indent_size(), 2);'), (44, 1, u'+\tOAK_ASSERT_EQ(indent.tab_size(),    5);'), (45, 1, u'+\tOAK_ASSERT_EQ(indent.indent_size(), 2);'), (50, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(0, 1), "    ");'), (51, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(1, 1),  "   ");'), (52, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(2, 1),   "  ");'), (53, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(3, 1),    " ");'), (54, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(4, 1), "    ");'), (55, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(5, 1),  "   ");'), (56, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(6, 1),   "  ");'), (57, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(7, 1),    " ");'), (58, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(8, 1), "    ");'), (61, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 4, true).create(0, 1), "    ");'), (62, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 4, true).create(1, 1),  "   ");'), (63, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 4, true).create(2, 1),   "  ");'), (64, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 4, true).create(3, 1),    " ");'), (65, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 4, true).create(4, 1), "    ");'), (66, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 4, true).create(5, 1),  "   ");'), (67, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 4, true).create(6, 1),   "  ");'), (68, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 4, true).create(7, 1),    " ");'), (69, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 4, true).create(8, 1), "    ");'), (71, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(0, 2), "        ");'), (72, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(1, 2),  "       ");'), (73, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(2, 2),   "      ");'), (74, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(3, 2),    "     ");'), (75, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(4, 2), "        ");'), (77, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 4, true).create(0, 2), "        ");'), (78, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 4, true).create(1, 2),  "       ");'), (79, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 4, true).create(2, 2),   "      ");'), (80, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 4, true).create(3, 2),    "     ");'), (81, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 4, true).create(4, 2), "        ");'), (86, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(0, 1), "    ");'), (87, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(1, 1),  "   ");'), (88, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(2, 1),   "  ");'), (89, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(3, 1),    " ");'), (90, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(4, 1),   "\\t");'), (91, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(5, 1),   "\\t");'), (92, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(6, 1),   "\\t");'), (93, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(7, 1),   "\\t");'), (94, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(8, 1), "    ");'), (97, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(0, 1), "    ");'), (98, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(1, 1),  "   ");'), (99, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(2, 1),   "  ");'), (100, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(3, 1),    " ");'), (101, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(4, 1),   "\\t");'), (102, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(5, 1),   "\\t");'), (103, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(6, 1),   "\\t");'), (104, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(7, 1),   "\\t");'), (105, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(8, 1), "    ");'), (107, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(0, 2), "\\t");'), (108, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(1, 2), "\\t");'), (109, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(2, 2), "\\t");'), (110, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(3, 2), "\\t");'), (111, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(4, 2), "\\t    ");'), (112, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(5, 2), "\\t    ");'), (113, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(6, 2), "\\t    ");'), (114, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(7, 2), "\\t    ");'), (115, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(8, 2), "\\t");'), (116, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(0, 2), "\\t");'), (117, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(1, 2), "\\t");'), (118, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(2, 2), "\\t");'), (119, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(3, 2), "\\t");'), (120, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(4, 2), "\\t    ");'), (121, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(5, 2), "\\t    ");'), (122, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(6, 2), "\\t    ");'), (123, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(7, 2), "\\t    ");'), (124, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(8, 2), "\\t");'), (126, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(0, 3), "\\t    ");'), (127, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(1, 3), "\\t    ");'), (128, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(2, 3), "\\t    ");'), (129, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(3, 3), "\\t    ");'), (130, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(4, 3), "\\t\\t");'), (131, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(5, 3), "\\t\\t");'), (132, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(6, 3), "\\t\\t");'), (133, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(7, 3), "\\t\\t");'), (134, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(8, 3), "\\t    ");'), (136, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(0, 3), "\\t    ");'), (137, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(1, 3), "\\t    ");'), (138, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(2, 3), "\\t    ");'), (139, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(3, 3), "\\t    ");'), (140, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(4, 3), "\\t\\t");'), (141, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(5, 3), "\\t\\t");'), (142, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(6, 3), "\\t\\t");'), (143, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(7, 3), "\\t\\t");'), (144, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(8, 4, false).create(8, 3), "\\t    ");'), (149, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(0, 1), "\\t\\t");'), (150, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(1, 1), "\\t\\t");'), (151, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(2, 1), "\\t\\t");'), (152, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(3, 1), "\\t\\t");'), (153, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(4, 1), "\\t\\t");'), (154, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(5, 1), "\\t\\t");'), (155, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(6, 1), "\\t\\t");'), (156, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(7, 1), "\\t\\t");'), (157, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(8, 1), "\\t\\t");'), (160, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(0, 1), "\\t\\t");'), (161, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(1, 1), "\\t\\t");'), (162, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(2, 1), "\\t\\t");'), (163, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(3, 1), "\\t\\t");'), (164, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(4, 1), "\\t\\t");'), (165, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(5, 1), "\\t\\t");'), (166, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(6, 1), "\\t\\t");'), (167, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(7, 1), "\\t\\t");'), (168, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(8, 1), "\\t\\t");'), (170, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(0, 2), "\\t\\t\\t\\t");'), (171, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(1, 2), "\\t\\t\\t\\t");'), (172, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(2, 2), "\\t\\t\\t\\t");'), (173, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(3, 2), "\\t\\t\\t\\t");'), (174, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(4, 2), "\\t\\t\\t\\t");'), (175, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(5, 2), "\\t\\t\\t\\t");'), (176, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(6, 2), "\\t\\t\\t\\t");'), (177, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(7, 2), "\\t\\t\\t\\t");'), (178, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(8, 2), "\\t\\t\\t\\t");'), (179, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(0, 2), "\\t\\t\\t\\t");'), (180, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(1, 2), "\\t\\t\\t\\t");'), (181, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(2, 2), "\\t\\t\\t\\t");'), (182, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(3, 2), "\\t\\t\\t\\t");'), (183, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(4, 2), "\\t\\t\\t\\t");'), (184, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(5, 2), "\\t\\t\\t\\t");'), (185, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(6, 2), "\\t\\t\\t\\t");'), (186, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(7, 2), "\\t\\t\\t\\t");'), (187, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(8, 2), "\\t\\t\\t\\t");'), (189, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(0, 3), "\\t\\t\\t\\t\\t\\t");'), (190, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(1, 3), "\\t\\t\\t\\t\\t\\t");'), (191, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(2, 3), "\\t\\t\\t\\t\\t\\t");'), (192, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(3, 3), "\\t\\t\\t\\t\\t\\t");'), (193, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(4, 3), "\\t\\t\\t\\t\\t\\t");'), (194, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(5, 3), "\\t\\t\\t\\t\\t\\t");'), (195, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(6, 3), "\\t\\t\\t\\t\\t\\t");'), (196, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(7, 3), "\\t\\t\\t\\t\\t\\t");'), (197, 2, u'-\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(8, 3), "\\t\\t\\t\\t\\t\\t");'), (200, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(0, 3), "\\t\\t\\t\\t\\t\\t");'), (201, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(1, 3), "\\t\\t\\t\\t\\t\\t");'), (202, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(2, 3), "\\t\\t\\t\\t\\t\\t");'), (203, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(3, 3), "\\t\\t\\t\\t\\t\\t");'), (204, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(4, 3), "\\t\\t\\t\\t\\t\\t");'), (205, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(5, 3), "\\t\\t\\t\\t\\t\\t");'), (206, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(6, 3), "\\t\\t\\t\\t\\t\\t");'), (207, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(7, 3), "\\t\\t\\t\\t\\t\\t");'), (208, 1, u'+\tOAK_ASSERT_EQ(text::indent_t(4, 8, false).create(8, 3), "\\t\\t\\t\\t\\t\\t");')]
===========================================
Class:class RankerTests : public CxxTest::TestSuite void test_capital_coverage () public: 	void test_capital_coverage () 	{ 	
Class:class SplitTests : public CxxTest::TestSuite void test_split_1 () public: 	void test_split_1 () 	{ 	
Class:class TokenizeTests : public CxxTest::TestSuite static std::string replace_token (std::string const& str, char token, std::string const& replacement) 	std::string replace_token (std::string const& str, char token, std::string const& replacement) 	{ 	
Class:class trim_tests : public CxxTest::TestSuite void test_trim () public: 	void test_trim () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\tTS_ASSERT_EQUALS(text::trim("Hello",             " \\t\\n"), "Hello");'), (9, 2, u'-\t\tTS_ASSERT_EQUALS(text::trim(" Hello",            " \\t\\n"), "Hello");'), (10, 2, u'-\t\tTS_ASSERT_EQUALS(text::trim("Hello ",            " \\t\\n"), "Hello");'), (11, 2, u'-\t\tTS_ASSERT_EQUALS(text::trim(" Hello ",           " \\t\\n"), "Hello");'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(text::trim("  Hello  ",         " \\t\\n"), "Hello");'), (13, 2, u'-\t\tTS_ASSERT_EQUALS(text::trim("\\tHello",           " \\t\\n"), "Hello");'), (14, 2, u'-\t\tTS_ASSERT_EQUALS(text::trim("Hello\\t",           " \\t\\n"), "Hello");'), (15, 2, u'-\t\tTS_ASSERT_EQUALS(text::trim("\\tHello\\t",         " \\t\\n"), "Hello");'), (16, 2, u'-\t\tTS_ASSERT_EQUALS(text::trim(" \\tHello\\t ",       " \\t\\n"), "Hello");'), (17, 2, u'-\t\tTS_ASSERT_EQUALS(text::trim("\\nHello",           " \\t\\n"), "Hello");'), (18, 2, u'-\t\tTS_ASSERT_EQUALS(text::trim("Hello\\n",           " \\t\\n"), "Hello");'), (19, 2, u'-\t\tTS_ASSERT_EQUALS(text::trim("\\nHello\\n",         " \\t\\n"), "Hello");'), (20, 2, u'-\t\tTS_ASSERT_EQUALS(text::trim(" \\t\\nHello\\n\\t ",   " \\t\\n"), "Hello");'), (21, 2, u'-\t\tTS_ASSERT_EQUALS(text::trim("  \\t\\nHello\\n\\t  ", " \\t\\n"), "Hello");'), (24, 1, u'+\tOAK_ASSERT_EQ(text::trim("Hello",             " \\t\\n"), "Hello");'), (25, 1, u'+\tOAK_ASSERT_EQ(text::trim(" Hello",            " \\t\\n"), "Hello");'), (26, 1, u'+\tOAK_ASSERT_EQ(text::trim("Hello ",            " \\t\\n"), "Hello");'), (27, 1, u'+\tOAK_ASSERT_EQ(text::trim(" Hello ",           " \\t\\n"), "Hello");'), (28, 1, u'+\tOAK_ASSERT_EQ(text::trim("  Hello  ",         " \\t\\n"), "Hello");'), (29, 1, u'+\tOAK_ASSERT_EQ(text::trim("\\tHello",           " \\t\\n"), "Hello");'), (30, 1, u'+\tOAK_ASSERT_EQ(text::trim("Hello\\t",           " \\t\\n"), "Hello");'), (31, 1, u'+\tOAK_ASSERT_EQ(text::trim("\\tHello\\t",         " \\t\\n"), "Hello");'), (32, 1, u'+\tOAK_ASSERT_EQ(text::trim(" \\tHello\\t ",       " \\t\\n"), "Hello");'), (33, 1, u'+\tOAK_ASSERT_EQ(text::trim("\\nHello",           " \\t\\n"), "Hello");'), (34, 1, u'+\tOAK_ASSERT_EQ(text::trim("Hello\\n",           " \\t\\n"), "Hello");'), (35, 1, u'+\tOAK_ASSERT_EQ(text::trim("\\nHello\\n",         " \\t\\n"), "Hello");'), (36, 1, u'+\tOAK_ASSERT_EQ(text::trim(" \\t\\nHello\\n\\t ",   " \\t\\n"), "Hello");'), (37, 1, u'+\tOAK_ASSERT_EQ(text::trim("  \\t\\nHello\\n\\t  ", " \\t\\n"), "Hello");')]
===========================================
Class:class utf8_tests : public CxxTest::TestSuite void test_safe_end () public: 	void test_safe_end () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, first),   first);'), (14, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, first+1), first);'), (15, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, first+2), first+2);'), (16, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, first+3), first+3);'), (17, 1, u'+\tOAK_ASSERT_EQ(utf8::find_safe_end(first, first),   first);'), (18, 1, u'+\tOAK_ASSERT_EQ(utf8::find_safe_end(first, first+1), first);'), (19, 1, u'+\tOAK_ASSERT_EQ(utf8::find_safe_end(first, first+2), first+2);'), (20, 1, u'+\tOAK_ASSERT_EQ(utf8::find_safe_end(first, first+3), first+3);'), (22, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, last),    last);'), (23, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, last-1),  last-1);'), (24, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, last-2),  last-3);'), (25, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, last-3),  last-3);'), (26, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, last-4),  last-4);'), (28, 1, u'+\tOAK_ASSERT_EQ(utf8::find_safe_end(first, last),    last);'), (29, 1, u'+\tOAK_ASSERT_EQ(utf8::find_safe_end(first, last-1),  last-1);'), (30, 1, u'+\tOAK_ASSERT_EQ(utf8::find_safe_end(first, last-2),  last-3);'), (31, 1, u'+\tOAK_ASSERT_EQ(utf8::find_safe_end(first, last-3),  last-3);'), (32, 1, u'+\tOAK_ASSERT_EQ(utf8::find_safe_end(first, last-4),  last-4);'), (51, 2, u'-\t\tTS_ASSERT_EQUALS(chars, expected);'), (53, 1, u'+\tOAK_ASSERT_EQ(chars, expected);'), (58, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch("\xe2\x99\xa5"),             0x2665);'), (59, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch("\xf0\xa0\xbb\xb5"),            0x20EF5);'), (60, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch("\\U0010FFFF"),  0x10FFFF);'), (63, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch("\xe2\x99\xa5"),             0x2665);'), (64, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch("\xf0\xa0\xbb\xb5"),            0x20EF5);'), (65, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch("\\U0010FFFF"),  0x10FFFF);'), (67, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00000003)), 0x00000003);'), (68, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00000030)), 0x00000030);'), (69, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00000300)), 0x00000300);'), (70, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00003000)), 0x00003000);'), (71, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00030000)), 0x00030000);'), (72, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00300000)), 0x00300000);'), (73, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x03000000)), 0x03000000);'), (74, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x30000000)), 0x30000000);'), (75, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x00000003)), 0x00000003);'), (76, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x00000030)), 0x00000030);'), (77, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x00000300)), 0x00000300);'), (78, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x00003000)), 0x00003000);'), (79, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x00030000)), 0x00030000);'), (80, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x00300000)), 0x00300000);'), (81, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x03000000)), 0x03000000);'), (82, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x30000000)), 0x30000000);'), (84, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x20000003)), 0x20000003);'), (85, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x02000030)), 0x02000030);'), (86, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00200300)), 0x00200300);'), (87, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00023000)), 0x00023000);'), (88, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00032000)), 0x00032000);'), (89, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00300200)), 0x00300200);'), (90, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x03000020)), 0x03000020);'), (91, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x30000002)), 0x30000002);'), (92, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x20000003)), 0x20000003);'), (93, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x02000030)), 0x02000030);'), (94, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x00200300)), 0x00200300);'), (95, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x00023000)), 0x00023000);'), (96, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x00032000)), 0x00032000);'), (97, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x00300200)), 0x00300200);'), (98, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x03000020)), 0x03000020);'), (99, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x30000002)), 0x30000002);'), (101, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x3FFFFFFF)), 0x3fFFFFFF);'), (102, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x40000000)), 0x40000000);'), (104, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x3FFFFFFF)), 0x3fFFFFFF);'), (105, 1, u'+\tOAK_ASSERT_EQ(utf8::to_ch(utf8::to_s(0x40000000)), 0x40000000);'), (110, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_s(    0x2665),           "\xe2\x99\xa5");'), (111, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_s(   0x20EF5),           "\xf0\xa0\xbb\xb5");'), (112, 2, u'-\t\tTS_ASSERT_EQUALS(utf8::to_s(  0x10FFFF),  "\\U0010FFFF");'), (115, 1, u'+\tOAK_ASSERT_EQ(utf8::to_s(    0x2665),           "\xe2\x99\xa5");'), (116, 1, u'+\tOAK_ASSERT_EQ(utf8::to_s(   0x20EF5),           "\xf0\xa0\xbb\xb5");'), (117, 1, u'+\tOAK_ASSERT_EQ(utf8::to_s(  0x10FFFF),  "\\U0010FFFF");'), (123, 2, u'-\t\tTS_ASSERT_EQUALS(str, "\xe2\x80\x9c\xc3\x86blegr\xc3\xb8d\xe2\x80\xa6\xe2\x80\x9d \xe2\x80\x94 \xf0\xa0\xbb\xb5");'), (130, 1, u'+\tOAK_ASSERT_EQ(str, "\xe2\x80\x9c\xc3\x86blegr\xc3\xb8d\xe2\x80\xa6\xe2\x80\x9d \xe2\x80\x94 \xf0\xa0\xbb\xb5");')]
===========================================
Class:class WrapTests : public CxxTest::TestSuite { 
Class:class DateTests : public CxxTest::TestSuite void test_date_value () public: 	void test_date_value () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t\tTS_ASSERT_DELTA(now.value(), stillNow.value(), 0.5);'), (14, 1, u'+\tOAK_ASSERT_LT(abs(now.value() - stillNow.value()), 0.5);'), (21, 2, u'-\t\tTS_ASSERT_EQUALS(now.value(), stillNow.value());'), (26, 1, u'+\tOAK_ASSERT_EQ(now.value(), stillNow.value());'), (29, 2, u'-\t\tTS_ASSERT_EQUALS(now.value(), stillNow.value());'), (33, 1, u'+\tOAK_ASSERT_EQ(now.value(), stillNow.value());')]
===========================================
Class:class DeltaTests : public CxxTest::TestSuite void test_delta () public: 	void test_delta () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(136, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(plist::create_delta(oldPlist, newPlist)), to_s(deltaPlist));'), (137, 1, u'+\tOAK_ASSERT_EQ(to_s(plist::create_delta(oldPlist, newPlist)), to_s(deltaPlist));'), (142, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(plist::merge_delta(plists)), to_s(newPlist));'), (146, 1, u'+\tOAK_ASSERT_EQ(to_s(plist::merge_delta(plists)), to_s(newPlist));'), (155, 2, u'-\t\tTS_ASSERT(plist::equal(plist::create_delta(oldPlist, newPlist), deltaPlist));'), (156, 2, u'-\t\tTS_ASSERT(plist::equal(plist::merge_delta(plists), newPlist));'), (157, 2, u'-\t\tTS_ASSERT(!plist::equal(oldPlist, newPlist));'), (159, 1, u'+\tOAK_ASSERT(plist::equal(plist::create_delta(oldPlist, newPlist), deltaPlist));'), (160, 1, u'+\tOAK_ASSERT(plist::equal(plist::merge_delta(plists), newPlist));'), (161, 1, u'+\tOAK_ASSERT(!plist::equal(oldPlist, newPlist));'), (227, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(plist::merge_delta(plists)), to_s(newPlist));'), (233, 1, u'+\tOAK_ASSERT_EQ(to_s(plist::merge_delta(plists)), to_s(newPlist));')]
===========================================
Class:class PrettyPrintTests : public CxxTest::TestSuite { 
Class:class SimpleTests : public CxxTest::TestSuite static int32_t parse_int (std::string const& src) 	static int32_t parse_int (std::string const& src) 	{ 	
Class:class ScopeSelectorTests : public CxxTest::TestSuite void test_child_selector () public: 	void test_child_selector () 	{ 	
Class:class AllWordsTests : public CxxTest::TestSuite static std::string all_words (ng::buffer_t const& buf) 	std::string all_words (ng::buffer_t const& buf) 	{ 	
Class:class HighlightPairFixtures __attribute__((constructor)) static void setup_fixtures () public: 	HighlightPairFixtures () 	{ 	
Class:class ColumnMovementTests : public CxxTest::TestSuite void test_column_movement () public: 	void test_column_movement () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-\t\tTS_ASSERT_EQUALS(ng::to_s(buf, ng::move(buf, ng::ranges_t( 2), kSelectionMoveToEndOfColumn)), "3:3");'), (26, 2, u'-\t\tTS_ASSERT_EQUALS(ng::to_s(buf, ng::move(buf, ng::ranges_t( 5), kSelectionMoveToEndOfColumn)), "3:6");'), (27, 2, u'-\t\tTS_ASSERT_EQUALS(ng::to_s(buf, ng::move(buf, ng::ranges_t( 7), kSelectionMoveToEndOfColumn)), "3:8");'), (28, 2, u'-\t\tTS_ASSERT_EQUALS(ng::to_s(buf, ng::move(buf, ng::ranges_t(21), kSelectionMoveToEndOfColumn)), "5:8");'), (31, 1, u'+\tOAK_ASSERT_EQ(ng::to_s(buf, ng::move(buf, ng::ranges_t( 2), kSelectionMoveToEndOfColumn)), "3:3");'), (32, 1, u'+\tOAK_ASSERT_EQ(ng::to_s(buf, ng::move(buf, ng::ranges_t( 5), kSelectionMoveToEndOfColumn)), "3:6");'), (33, 1, u'+\tOAK_ASSERT_EQ(ng::to_s(buf, ng::move(buf, ng::ranges_t( 7), kSelectionMoveToEndOfColumn)), "3:8");'), (34, 1, u'+\tOAK_ASSERT_EQ(ng::to_s(buf, ng::move(buf, ng::ranges_t(21), kSelectionMoveToEndOfColumn)), "5:8");')]
===========================================
Class:class FindTests : public CxxTest::TestSuite static std::string search (std::string const& needle, std::string haystack, find::options_t options = find::none, bool* didWrap = nullptr) 	std::string search (std::string const& needle, std::string haystack, find::options_t options = find::none, bool* didWrap = nullptr) 	{ 	
Class:class StringificationTests : public CxxTest::TestSuite static std::string round_trip (ng::buffer_t const& buf, std::string const& str) 	static std::string round_trip (ng::buffer_t const& buf, std::string const& str) 	{ 	
Class: class ThemeTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\tOAK_ASSERT_EQ(to_s(gutter.divider),               "#666666FF");'), (18, 1, u'+\tOAK_ASSERT_EQ(to_s(gutter.selectionBorder),       "#666666FF");'), (19, 1, u'+\tOAK_ASSERT_EQ(to_s(gutter.foreground),            "#808080FF");'), (20, 1, u'+\tOAK_ASSERT_EQ(to_s(gutter.background),            "#212121FF");'), (21, 1, u'+\tOAK_ASSERT_EQ(to_s(gutter.icons),                 "#808080FF");'), (22, 1, u'+\tOAK_ASSERT_EQ(to_s(gutter.iconsHover),            "#808080FF");'), (23, 1, u'+\tOAK_ASSERT_EQ(to_s(gutter.iconsPressed),          "#808080FF");'), (24, 1, u'+\tOAK_ASSERT_EQ(to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (25, 1, u'+\tOAK_ASSERT_EQ(to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (26, 1, u'+\tOAK_ASSERT_EQ(to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (27, 1, u'+\tOAK_ASSERT_EQ(to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (28, 1, u'+\tOAK_ASSERT_EQ(to_s(gutter.selectionIconsPressed), "#F2F2F2FF");'), (39, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.divider),               "#666666FF");'), (40, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBorder),       "#666666FF");'), (41, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.foreground),            "#808080FF");'), (42, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.background),            "#212121FF");'), (43, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.icons),                 "#808080FF");'), (44, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsHover),            "#808080FF");'), (45, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsPressed),          "#808080FF");'), (46, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (47, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (48, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (49, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (50, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsPressed), "#F2F2F2FF");')]
===========================================
Class:class ScanPathTestSuite : public CxxTest::TestSuite static void run_scanner (scan_path_t& scanner) 	static void run_scanner (scan_path_t& scanner) 	{ 	
Class: class AnchorsTests : public CxxTest::TestSuite void test_anchors () public: 	void test_anchors () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(167, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "xy xy\\nxy xy\\n[xy xy\\nxy xy]\\nxy xy"), "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb xy\\nxy xy\\n[\xc2\xabbom\xc2\xbbxy\xc2\xab/bom\xc2\xbb xy\\nxy xy]\\nxy \xc2\xabeof\xc2\xbbxy\xc2\xab/eof\xc2\xbb\xc2\xab/test\xc2\xbb");'), (168, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "xy xy"),                               "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb \xc2\xabeof\xc2\xbbxy\xc2\xab/eof\xc2\xbb\xc2\xab/test\xc2\xbb");'), (169, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "xy xy\\n"),                             "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb xy\\n\xc2\xab/test\xc2\xbb");'), (170, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "[xy xy]"),                             "\xc2\xabtest\xc2\xbb[\xc2\xabbom\xc2\xbbxy\xc2\xab/bom\xc2\xbb xy]\xc2\xab/test\xc2\xbb");'), (172, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "xy xy\\nxy xy\\n[xy xy\\nxy xy]\\nxy xy"), "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb xy\\nxy xy\\n[\xc2\xabbom\xc2\xbbxy\xc2\xab/bom\xc2\xbb xy\\nxy xy]\\nxy \xc2\xabeof\xc2\xbbxy\xc2\xab/eof\xc2\xbb\xc2\xab/test\xc2\xbb");'), (173, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "xy xy"),                               "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb \xc2\xabeof\xc2\xbbxy\xc2\xab/eof\xc2\xbb\xc2\xab/test\xc2\xbb");'), (174, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "xy xy\\n"),                             "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb xy\\n\xc2\xab/test\xc2\xbb");'), (175, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "[xy xy]"),                             "\xc2\xabtest\xc2\xbb[\xc2\xabbom\xc2\xbbxy\xc2\xab/bom\xc2\xbb xy]\xc2\xab/test\xc2\xbb");'), (181, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "foo\\n"),        "\xc2\xabtest\xc2\xbb\xc2\xabhead\xc2\xbb\xc2\xabb-buf\xc2\xbbfoo\xc2\xab/b-buf\xc2\xbb\xc2\xab/head\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (182, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "> foo\\n"),      "\xc2\xabtest\xc2\xbb\xc2\xabgt\xc2\xbb> \xc2\xabb-cap\xc2\xbbfoo\xc2\xab/b-cap\xc2\xbb\xc2\xab/gt\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (183, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "foo <\\n"),      "\xc2\xabtest\xc2\xbb\xc2\xablt\xc2\xbb\xc2\xabb-buf\xc2\xbbfoo\xc2\xab/b-buf\xc2\xbb <\xc2\xab/lt\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (184, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "\\nfoo\\n"),      "\xc2\xabtest\xc2\xbb\\n\xc2\xabline\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb\xc2\xab/line\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (185, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "\\nfoo"),        "\xc2\xabtest\xc2\xbb\\n\xc2\xabtail\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb\xc2\xab/tail\xc2\xbb\xc2\xab/test\xc2\xbb");'), (186, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "\\nfoo bar"),    "\xc2\xabtest\xc2\xbb\\n\xc2\xabtail\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb \xc2\xabe-buf\xc2\xbbbar\xc2\xab/e-buf\xc2\xbb\xc2\xab/tail\xc2\xbb\xc2\xab/test\xc2\xbb");'), (190, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "foo\\n"),        "\xc2\xabtest\xc2\xbb\xc2\xabhead\xc2\xbb\xc2\xabb-buf\xc2\xbbfoo\xc2\xab/b-buf\xc2\xbb\xc2\xab/head\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (191, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "> foo\\n"),      "\xc2\xabtest\xc2\xbb\xc2\xabgt\xc2\xbb> \xc2\xabb-cap\xc2\xbbfoo\xc2\xab/b-cap\xc2\xbb\xc2\xab/gt\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (192, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "foo <\\n"),      "\xc2\xabtest\xc2\xbb\xc2\xablt\xc2\xbb\xc2\xabb-buf\xc2\xbbfoo\xc2\xab/b-buf\xc2\xbb <\xc2\xab/lt\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (193, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "\\nfoo\\n"),      "\xc2\xabtest\xc2\xbb\\n\xc2\xabline\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb\xc2\xab/line\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (194, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "\\nfoo"),        "\xc2\xabtest\xc2\xbb\\n\xc2\xabtail\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb\xc2\xab/tail\xc2\xbb\xc2\xab/test\xc2\xbb");'), (195, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "\\nfoo bar"),    "\xc2\xabtest\xc2\xbb\\n\xc2\xabtail\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb \xc2\xabe-buf\xc2\xbbbar\xc2\xab/e-buf\xc2\xbb\xc2\xab/tail\xc2\xbb\xc2\xab/test\xc2\xbb");')]
===========================================
===========================================
Total add: 94
Total del: 104
Header: static bundles::item_ptr AnchorInCapturesTestGrammarItem;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(167, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "xy xy\\nxy xy\\n[xy xy\\nxy xy]\\nxy xy"), "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb xy\\nxy xy\\n[\xc2\xabbom\xc2\xbbxy\xc2\xab/bom\xc2\xbb xy\\nxy xy]\\nxy \xc2\xabeof\xc2\xbbxy\xc2\xab/eof\xc2\xbb\xc2\xab/test\xc2\xbb");'), (168, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "xy xy"),                               "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb \xc2\xabeof\xc2\xbbxy\xc2\xab/eof\xc2\xbb\xc2\xab/test\xc2\xbb");'), (169, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "xy xy\\n"),                             "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb xy\\n\xc2\xab/test\xc2\xbb");'), (170, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "[xy xy]"),                             "\xc2\xabtest\xc2\xbb[\xc2\xabbom\xc2\xbbxy\xc2\xab/bom\xc2\xbb xy]\xc2\xab/test\xc2\xbb");'), (172, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "xy xy\\nxy xy\\n[xy xy\\nxy xy]\\nxy xy"), "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb xy\\nxy xy\\n[\xc2\xabbom\xc2\xbbxy\xc2\xab/bom\xc2\xbb xy\\nxy xy]\\nxy \xc2\xabeof\xc2\xbbxy\xc2\xab/eof\xc2\xbb\xc2\xab/test\xc2\xbb");'), (173, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "xy xy"),                               "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb \xc2\xabeof\xc2\xbbxy\xc2\xab/eof\xc2\xbb\xc2\xab/test\xc2\xbb");'), (174, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "xy xy\\n"),                             "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb xy\\n\xc2\xab/test\xc2\xbb");'), (175, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "[xy xy]"),                             "\xc2\xabtest\xc2\xbb[\xc2\xabbom\xc2\xbbxy\xc2\xab/bom\xc2\xbb xy]\xc2\xab/test\xc2\xbb");'), (181, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "foo\\n"),        "\xc2\xabtest\xc2\xbb\xc2\xabhead\xc2\xbb\xc2\xabb-buf\xc2\xbbfoo\xc2\xab/b-buf\xc2\xbb\xc2\xab/head\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (182, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "> foo\\n"),      "\xc2\xabtest\xc2\xbb\xc2\xabgt\xc2\xbb> \xc2\xabb-cap\xc2\xbbfoo\xc2\xab/b-cap\xc2\xbb\xc2\xab/gt\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (183, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "foo <\\n"),      "\xc2\xabtest\xc2\xbb\xc2\xablt\xc2\xbb\xc2\xabb-buf\xc2\xbbfoo\xc2\xab/b-buf\xc2\xbb <\xc2\xab/lt\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (184, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "\\nfoo\\n"),      "\xc2\xabtest\xc2\xbb\\n\xc2\xabline\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb\xc2\xab/line\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (185, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "\\nfoo"),        "\xc2\xabtest\xc2\xbb\\n\xc2\xabtail\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb\xc2\xab/tail\xc2\xbb\xc2\xab/test\xc2\xbb");'), (186, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "\\nfoo bar"),    "\xc2\xabtest\xc2\xbb\\n\xc2\xabtail\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb \xc2\xabe-buf\xc2\xbbbar\xc2\xab/e-buf\xc2\xbb\xc2\xab/tail\xc2\xbb\xc2\xab/test\xc2\xbb");'), (190, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "foo\\n"),        "\xc2\xabtest\xc2\xbb\xc2\xabhead\xc2\xbb\xc2\xabb-buf\xc2\xbbfoo\xc2\xab/b-buf\xc2\xbb\xc2\xab/head\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (191, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "> foo\\n"),      "\xc2\xabtest\xc2\xbb\xc2\xabgt\xc2\xbb> \xc2\xabb-cap\xc2\xbbfoo\xc2\xab/b-cap\xc2\xbb\xc2\xab/gt\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (192, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "foo <\\n"),      "\xc2\xabtest\xc2\xbb\xc2\xablt\xc2\xbb\xc2\xabb-buf\xc2\xbbfoo\xc2\xab/b-buf\xc2\xbb <\xc2\xab/lt\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (193, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "\\nfoo\\n"),      "\xc2\xabtest\xc2\xbb\\n\xc2\xabline\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb\xc2\xab/line\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (194, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "\\nfoo"),        "\xc2\xabtest\xc2\xbb\\n\xc2\xabtail\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb\xc2\xab/tail\xc2\xbb\xc2\xab/test\xc2\xbb");'), (195, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "\\nfoo bar"),    "\xc2\xabtest\xc2\xbb\\n\xc2\xabtail\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb \xc2\xabe-buf\xc2\xbbbar\xc2\xab/e-buf\xc2\xbb\xc2\xab/tail\xc2\xbb\xc2\xab/test\xc2\xbb");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(167, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "xy xy\\nxy xy\\n[xy xy\\nxy xy]\\nxy xy"), "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb xy\\nxy xy\\n[\xc2\xabbom\xc2\xbbxy\xc2\xab/bom\xc2\xbb xy\\nxy xy]\\nxy \xc2\xabeof\xc2\xbbxy\xc2\xab/eof\xc2\xbb\xc2\xab/test\xc2\xbb");'), (168, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "xy xy"),                               "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb \xc2\xabeof\xc2\xbbxy\xc2\xab/eof\xc2\xbb\xc2\xab/test\xc2\xbb");'), (169, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "xy xy\\n"),                             "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb xy\\n\xc2\xab/test\xc2\xbb");'), (170, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "[xy xy]"),                             "\xc2\xabtest\xc2\xbb[\xc2\xabbom\xc2\xbbxy\xc2\xab/bom\xc2\xbb xy]\xc2\xab/test\xc2\xbb");'), (172, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "xy xy\\nxy xy\\n[xy xy\\nxy xy]\\nxy xy"), "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb xy\\nxy xy\\n[\xc2\xabbom\xc2\xbbxy\xc2\xab/bom\xc2\xbb xy\\nxy xy]\\nxy \xc2\xabeof\xc2\xbbxy\xc2\xab/eof\xc2\xbb\xc2\xab/test\xc2\xbb");'), (173, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "xy xy"),                               "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb \xc2\xabeof\xc2\xbbxy\xc2\xab/eof\xc2\xbb\xc2\xab/test\xc2\xbb");'), (174, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "xy xy\\n"),                             "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb xy\\n\xc2\xab/test\xc2\xbb");'), (175, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "[xy xy]"),                             "\xc2\xabtest\xc2\xbb[\xc2\xabbom\xc2\xbbxy\xc2\xab/bom\xc2\xbb xy]\xc2\xab/test\xc2\xbb");'), (181, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "foo\\n"),        "\xc2\xabtest\xc2\xbb\xc2\xabhead\xc2\xbb\xc2\xabb-buf\xc2\xbbfoo\xc2\xab/b-buf\xc2\xbb\xc2\xab/head\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (182, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "> foo\\n"),      "\xc2\xabtest\xc2\xbb\xc2\xabgt\xc2\xbb> \xc2\xabb-cap\xc2\xbbfoo\xc2\xab/b-cap\xc2\xbb\xc2\xab/gt\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (183, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "foo <\\n"),      "\xc2\xabtest\xc2\xbb\xc2\xablt\xc2\xbb\xc2\xabb-buf\xc2\xbbfoo\xc2\xab/b-buf\xc2\xbb <\xc2\xab/lt\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (184, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "\\nfoo\\n"),      "\xc2\xabtest\xc2\xbb\\n\xc2\xabline\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb\xc2\xab/line\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (185, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "\\nfoo"),        "\xc2\xabtest\xc2\xbb\\n\xc2\xabtail\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb\xc2\xab/tail\xc2\xbb\xc2\xab/test\xc2\xbb");'), (186, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "\\nfoo bar"),    "\xc2\xabtest\xc2\xbb\\n\xc2\xabtail\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb \xc2\xabe-buf\xc2\xbbbar\xc2\xab/e-buf\xc2\xbb\xc2\xab/tail\xc2\xbb\xc2\xab/test\xc2\xbb");'), (190, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "foo\\n"),        "\xc2\xabtest\xc2\xbb\xc2\xabhead\xc2\xbb\xc2\xabb-buf\xc2\xbbfoo\xc2\xab/b-buf\xc2\xbb\xc2\xab/head\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (191, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "> foo\\n"),      "\xc2\xabtest\xc2\xbb\xc2\xabgt\xc2\xbb> \xc2\xabb-cap\xc2\xbbfoo\xc2\xab/b-cap\xc2\xbb\xc2\xab/gt\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (192, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "foo <\\n"),      "\xc2\xabtest\xc2\xbb\xc2\xablt\xc2\xbb\xc2\xabb-buf\xc2\xbbfoo\xc2\xab/b-buf\xc2\xbb <\xc2\xab/lt\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (193, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "\\nfoo\\n"),      "\xc2\xabtest\xc2\xbb\\n\xc2\xabline\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb\xc2\xab/line\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (194, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "\\nfoo"),        "\xc2\xabtest\xc2\xbb\\n\xc2\xabtail\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb\xc2\xab/tail\xc2\xbb\xc2\xab/test\xc2\xbb");'), (195, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "\\nfoo bar"),    "\xc2\xabtest\xc2\xbb\\n\xc2\xabtail\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb \xc2\xabe-buf\xc2\xbbbar\xc2\xab/e-buf\xc2\xbb\xc2\xab/tail\xc2\xbb\xc2\xab/test\xc2\xbb");')]
===========================================
Class: class BeginWhileTests : public CxxTest::TestSuite void test_begin_while () public: 	void test_begin_while () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(266, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, buf), res);'), (267, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "> _first\\n> second_\\n> third\\nfourth"),       "\xc2\xabmdown\xc2\xbb\xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbb\xc2\xabem\xc2\xbb_first\\n> second_\xc2\xab/em\xc2\xbb\xc2\xab/p\xc2\xbb\\n> \xc2\xabp\xc2\xbbthird\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb\xc2\xabp\xc2\xbbfourth\xc2\xab/p\xc2\xbb\xc2\xab/mdown\xc2\xbb");'), (268, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "> > _first\\n> > second_\\n> > third\\nfourth"), "\xc2\xabmdown\xc2\xbb\xc2\xabq\xc2\xbb> \xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbb\xc2\xabem\xc2\xbb_first\\n> > second_\xc2\xab/em\xc2\xbb\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb> \xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbbthird\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb\xc2\xab/q\xc2\xbb\xc2\xabp\xc2\xbbfourth\xc2\xab/p\xc2\xbb\xc2\xab/mdown\xc2\xbb");'), (271, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, buf), res);'), (272, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "> _first\\n> second_\\n> third\\nfourth"),       "\xc2\xabmdown\xc2\xbb\xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbb\xc2\xabem\xc2\xbb_first\\n> second_\xc2\xab/em\xc2\xbb\xc2\xab/p\xc2\xbb\\n> \xc2\xabp\xc2\xbbthird\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb\xc2\xabp\xc2\xbbfourth\xc2\xab/p\xc2\xbb\xc2\xab/mdown\xc2\xbb");'), (273, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "> > _first\\n> > second_\\n> > third\\nfourth"), "\xc2\xabmdown\xc2\xbb\xc2\xabq\xc2\xbb> \xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbb\xc2\xabem\xc2\xbb_first\\n> > second_\xc2\xab/em\xc2\xbb\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb> \xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbbthird\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb\xc2\xab/q\xc2\xbb\xc2\xabp\xc2\xbbfourth\xc2\xab/p\xc2\xbb\xc2\xab/mdown\xc2\xbb");')]
===========================================
===========================================
Total add: 128
Total del: 138
Header: static bundles::item_ptr BeginWhileTestGrammarItem;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(266, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, buf), res);'), (267, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "> _first\\n> second_\\n> third\\nfourth"),       "\xc2\xabmdown\xc2\xbb\xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbb\xc2\xabem\xc2\xbb_first\\n> second_\xc2\xab/em\xc2\xbb\xc2\xab/p\xc2\xbb\\n> \xc2\xabp\xc2\xbbthird\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb\xc2\xabp\xc2\xbbfourth\xc2\xab/p\xc2\xbb\xc2\xab/mdown\xc2\xbb");'), (268, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "> > _first\\n> > second_\\n> > third\\nfourth"), "\xc2\xabmdown\xc2\xbb\xc2\xabq\xc2\xbb> \xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbb\xc2\xabem\xc2\xbb_first\\n> > second_\xc2\xab/em\xc2\xbb\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb> \xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbbthird\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb\xc2\xab/q\xc2\xbb\xc2\xabp\xc2\xbbfourth\xc2\xab/p\xc2\xbb\xc2\xab/mdown\xc2\xbb");'), (271, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, buf), res);'), (272, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "> _first\\n> second_\\n> third\\nfourth"),       "\xc2\xabmdown\xc2\xbb\xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbb\xc2\xabem\xc2\xbb_first\\n> second_\xc2\xab/em\xc2\xbb\xc2\xab/p\xc2\xbb\\n> \xc2\xabp\xc2\xbbthird\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb\xc2\xabp\xc2\xbbfourth\xc2\xab/p\xc2\xbb\xc2\xab/mdown\xc2\xbb");'), (273, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "> > _first\\n> > second_\\n> > third\\nfourth"), "\xc2\xabmdown\xc2\xbb\xc2\xabq\xc2\xbb> \xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbb\xc2\xabem\xc2\xbb_first\\n> > second_\xc2\xab/em\xc2\xbb\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb> \xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbbthird\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb\xc2\xab/q\xc2\xbb\xc2\xabp\xc2\xbbfourth\xc2\xab/p\xc2\xbb\xc2\xab/mdown\xc2\xbb");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(266, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, buf), res);'), (267, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "> _first\\n> second_\\n> third\\nfourth"),       "\xc2\xabmdown\xc2\xbb\xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbb\xc2\xabem\xc2\xbb_first\\n> second_\xc2\xab/em\xc2\xbb\xc2\xab/p\xc2\xbb\\n> \xc2\xabp\xc2\xbbthird\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb\xc2\xabp\xc2\xbbfourth\xc2\xab/p\xc2\xbb\xc2\xab/mdown\xc2\xbb");'), (268, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "> > _first\\n> > second_\\n> > third\\nfourth"), "\xc2\xabmdown\xc2\xbb\xc2\xabq\xc2\xbb> \xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbb\xc2\xabem\xc2\xbb_first\\n> > second_\xc2\xab/em\xc2\xbb\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb> \xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbbthird\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb\xc2\xab/q\xc2\xbb\xc2\xabp\xc2\xbbfourth\xc2\xab/p\xc2\xbb\xc2\xab/mdown\xc2\xbb");'), (271, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, buf), res);'), (272, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "> _first\\n> second_\\n> third\\nfourth"),       "\xc2\xabmdown\xc2\xbb\xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbb\xc2\xabem\xc2\xbb_first\\n> second_\xc2\xab/em\xc2\xbb\xc2\xab/p\xc2\xbb\\n> \xc2\xabp\xc2\xbbthird\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb\xc2\xabp\xc2\xbbfourth\xc2\xab/p\xc2\xbb\xc2\xab/mdown\xc2\xbb");'), (273, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "> > _first\\n> > second_\\n> > third\\nfourth"), "\xc2\xabmdown\xc2\xbb\xc2\xabq\xc2\xbb> \xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbb\xc2\xabem\xc2\xbb_first\\n> > second_\xc2\xab/em\xc2\xbb\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb> \xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbbthird\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb\xc2\xab/q\xc2\xbb\xc2\xabp\xc2\xbbfourth\xc2\xab/p\xc2\xbb\xc2\xab/mdown\xc2\xbb");')]
===========================================
Class: class CapturesTests : public CxxTest::TestSuite void test_captures () public: 	void test_captures () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "Lorem ipsum."),                       "\xc2\xabtest\xc2\xbbLorem ipsum.\xc2\xab/test\xc2\xbb");'), (65, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "fixup! Lorem ipsum."),                "\xc2\xabtest\xc2\xbb\xc2\xabfixup\xc2\xbbfixup!\xc2\xab/fixup\xc2\xbb Lorem ipsum.\xc2\xab/test\xc2\xbb");'), (66, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "Lorem ipsum dolor sit amet."),        "\xc2\xabtest\xc2\xbb\xc2\xabwarn\xc2\xbbLorem ipsum dolor sit amet.\xc2\xab/warn\xc2\xbb\xc2\xab/test\xc2\xbb");'), (72, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "Lorem ipsum."),                       "\xc2\xabtest\xc2\xbbLorem ipsum.\xc2\xab/test\xc2\xbb");'), (73, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "fixup! Lorem ipsum."),                "\xc2\xabtest\xc2\xbb\xc2\xabfixup\xc2\xbbfixup!\xc2\xab/fixup\xc2\xbb Lorem ipsum.\xc2\xab/test\xc2\xbb");'), (74, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "Lorem ipsum dolor sit amet."),        "\xc2\xabtest\xc2\xbb\xc2\xabwarn\xc2\xbbLorem ipsum dolor sit amet.\xc2\xab/warn\xc2\xbb\xc2\xab/test\xc2\xbb");')]
===========================================
===========================================
Total add: 31
Total del: 41
Header: static bundles::item_ptr CaptureTestGrammarItem;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "Lorem ipsum."),                       "\xc2\xabtest\xc2\xbbLorem ipsum.\xc2\xab/test\xc2\xbb");'), (65, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "fixup! Lorem ipsum."),                "\xc2\xabtest\xc2\xbb\xc2\xabfixup\xc2\xbbfixup!\xc2\xab/fixup\xc2\xbb Lorem ipsum.\xc2\xab/test\xc2\xbb");'), (66, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "Lorem ipsum dolor sit amet."),        "\xc2\xabtest\xc2\xbb\xc2\xabwarn\xc2\xbbLorem ipsum dolor sit amet.\xc2\xab/warn\xc2\xbb\xc2\xab/test\xc2\xbb");'), (72, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "Lorem ipsum."),                       "\xc2\xabtest\xc2\xbbLorem ipsum.\xc2\xab/test\xc2\xbb");'), (73, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "fixup! Lorem ipsum."),                "\xc2\xabtest\xc2\xbb\xc2\xabfixup\xc2\xbbfixup!\xc2\xab/fixup\xc2\xbb Lorem ipsum.\xc2\xab/test\xc2\xbb");'), (74, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "Lorem ipsum dolor sit amet."),        "\xc2\xabtest\xc2\xbb\xc2\xabwarn\xc2\xbbLorem ipsum dolor sit amet.\xc2\xab/warn\xc2\xbb\xc2\xab/test\xc2\xbb");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "Lorem ipsum."),                       "\xc2\xabtest\xc2\xbbLorem ipsum.\xc2\xab/test\xc2\xbb");'), (65, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "fixup! Lorem ipsum."),                "\xc2\xabtest\xc2\xbb\xc2\xabfixup\xc2\xbbfixup!\xc2\xab/fixup\xc2\xbb Lorem ipsum.\xc2\xab/test\xc2\xbb");'), (66, 2, u'-\t\tTS_ASSERT_EQUALS(markup(grammar, "Lorem ipsum dolor sit amet."),        "\xc2\xabtest\xc2\xbb\xc2\xabwarn\xc2\xbbLorem ipsum dolor sit amet.\xc2\xab/warn\xc2\xbb\xc2\xab/test\xc2\xbb");'), (72, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "Lorem ipsum."),                       "\xc2\xabtest\xc2\xbbLorem ipsum.\xc2\xab/test\xc2\xbb");'), (73, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "fixup! Lorem ipsum."),                "\xc2\xabtest\xc2\xbb\xc2\xabfixup\xc2\xbbfixup!\xc2\xab/fixup\xc2\xbb Lorem ipsum.\xc2\xab/test\xc2\xbb");'), (74, 1, u'+\tOAK_ASSERT_EQ(markup(grammar, "Lorem ipsum dolor sit amet."),        "\xc2\xabtest\xc2\xbb\xc2\xabwarn\xc2\xbbLorem ipsum dolor sit amet.\xc2\xab/warn\xc2\xbb\xc2\xab/test\xc2\xbb");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(pthread_main_np() != 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: namespace command
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(pthread_main_np() != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(pthread_main_np() != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(pthread_main_np() != 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: namespace command
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(pthread_main_np() != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(pthread_main_np() != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(pthread_main_np() != 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: namespace command
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(pthread_main_np() != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(pthread_main_np() != 0);')]
===========================================
Class:class ClipboardTests : public CxxTest::TestSuite void test_empty () public: 	void setUp () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t\tTS_ASSERT(cb->empty());'), (15, 2, u'-\t\tTS_ASSERT(!cb->previous());'), (16, 2, u'-\t\tTS_ASSERT(!cb->current());'), (17, 2, u'-\t\tTS_ASSERT(!cb->next());'), (19, 1, u'+\tOAK_ASSERT(cb->empty());'), (20, 1, u'+\tOAK_ASSERT(!cb->previous());'), (21, 1, u'+\tOAK_ASSERT(!cb->current());'), (22, 1, u'+\tOAK_ASSERT(!cb->next());'), (34, 2, u'-\t\tTS_ASSERT_EQUALS(cb->current()->content(),  "fud");'), (35, 2, u'-\t\tTS_ASSERT_EQUALS(cb->previous()->content(), "bar");'), (36, 2, u'-\t\tTS_ASSERT_EQUALS(cb->previous()->content(), "foo");'), (37, 2, u'-\t\tTS_ASSERT(!cb->previous());'), (38, 2, u'-\t\tTS_ASSERT_EQUALS(cb->next()->content(),     "bar");'), (39, 2, u'-\t\tTS_ASSERT_EQUALS(cb->next()->content(),     "fud");'), (40, 2, u'-\t\tTS_ASSERT(!cb->next());'), (48, 1, u'+\tOAK_ASSERT_EQ(cb->current()->content(),  "fud");'), (49, 1, u'+\tOAK_ASSERT_EQ(cb->previous()->content(), "bar");'), (50, 1, u'+\tOAK_ASSERT_EQ(cb->previous()->content(), "foo");'), (51, 1, u'+\tOAK_ASSERT(!cb->previous());'), (52, 1, u'+\tOAK_ASSERT_EQ(cb->next()->content(),     "bar");'), (53, 1, u'+\tOAK_ASSERT_EQ(cb->next()->content(),     "fud");'), (54, 1, u'+\tOAK_ASSERT(!cb->next());')]
===========================================
Class:class CommandTests : public CxxTest::TestSuite void test_replace_selection_command () public: 	void test_replace_selection_command () 	{ 	
Class:class MacroTests : public CxxTest::TestSuite void test_insert () public: 	void test_insert () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-\t\tTS_ASSERT_EQUALS(editor.as_string(), "Test");'), (29, 1, u'+\tOAK_ASSERT_EQ(editor.as_string(), "Test");'), (68, 2, u'-\t\tTS_ASSERT_EQUALS(editor.as_string(), "2010-01-25");'), (73, 1, u'+\tOAK_ASSERT_EQ(editor.as_string(), "2010-01-25");')]
===========================================
Class:class MarkTests : public CxxTest::TestSuite void test_mark () public: 	void test_mark () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-\t\tTS_ASSERT_EQUALS(editor.as_string(), "NiceHello world");'), (34, 1, u'+\tOAK_ASSERT_EQ(editor.as_string(), "NiceHello world");'), (37, 2, u'-\t\tTS_ASSERT_EQUALS(editor.as_string(), "Nice world");'), (39, 1, u'+\tOAK_ASSERT_EQ(editor.as_string(), "Nice world");'), (46, 2, u'-\t\tTS_ASSERT_EQUALS(editor.as_string(), "Nice House");'), (52, 1, u'+\tOAK_ASSERT_EQ(editor.as_string(), "Nice House");'), (56, 2, u'-\t\tTS_ASSERT_EQUALS(editor.as_string(), "Nice Big House");'), (61, 1, u'+\tOAK_ASSERT_EQ(editor.as_string(), "Nice Big House");')]
===========================================
Class:class UIProxyFixture : public CxxTest::GlobalFixture __attribute__((constructor)) static void setup_fixtures () public: 	bool setUpWorld() 	static struct proxy_t : document::ui_proxy_t 		static struct proxy_t : document::ui_proxy_t 		{ 		
Class: class UiProxyFixturesTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8", search("xx", "xx xx xx xx",         options, &didWrap)); TS_ASSERT(!didWrap);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (9, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "x\xe2\x80\xb8x xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (11, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "\xe2\x80\xb8x\xe2\x80\xb8x xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (13, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (14, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "\xe2\x80\xb8xx \xe2\x80\xb8xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "\xe2\x80\xb8xx x\xe2\x80\xb8x xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "xx xx xx xx\xe2\x80\xb8",        options, &didWrap)); TS_ASSERT(!didWrap);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "xx xx xx x\xe2\x80\xb8x",        options, &didWrap)); TS_ASSERT(!didWrap);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx \xe2\x80\xb8xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx\xe2\x80\xb8 xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (20, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "xx xx xx x\xe2\x80\xb8x\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (21, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (22, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx\xe2\x80\xb8 xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (23, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx x\xe2\x80\xb8x xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (24, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx \xe2\x80\xb8xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (25, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx\xe2\x80\xb8 xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx x\xe2\x80\xb8x xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (27, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (28, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (29, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (32, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx xx\xe2\x80\xb8",     wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (33, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx x\xe2\x80\xb8x",     wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (34, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx \xe2\x80\xb8xx",     wrapAround, &didWrap)); TS_ASSERT(!didWrap);'), (35, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx\xe2\x80\xb8 xx",     wrapAround, &didWrap)); TS_ASSERT(!didWrap);'), (36, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx x\xe2\x80\xb8x\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (37, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (38, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx\xe2\x80\xb8 xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (39, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx \xe2\x80\xb8xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (40, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx\xe2\x80\xb8 xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (41, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx x\xe2\x80\xb8x xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (42, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (43, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (44, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx xx xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(!didWrap);')]
===========================================
===========================================
Total add: 43
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8", search("xx", "xx xx xx xx",         options, &didWrap)); TS_ASSERT(!didWrap);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (9, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "x\xe2\x80\xb8x xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (11, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "\xe2\x80\xb8x\xe2\x80\xb8x xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (13, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (14, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "\xe2\x80\xb8xx \xe2\x80\xb8xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "\xe2\x80\xb8xx x\xe2\x80\xb8x xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "xx xx xx xx\xe2\x80\xb8",        options, &didWrap)); TS_ASSERT(!didWrap);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "xx xx xx x\xe2\x80\xb8x",        options, &didWrap)); TS_ASSERT(!didWrap);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx \xe2\x80\xb8xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx\xe2\x80\xb8 xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (20, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "xx xx xx x\xe2\x80\xb8x\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (21, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (22, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx\xe2\x80\xb8 xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (23, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx x\xe2\x80\xb8x xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (24, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx \xe2\x80\xb8xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (25, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx\xe2\x80\xb8 xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx x\xe2\x80\xb8x xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (27, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (28, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (29, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (32, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx xx\xe2\x80\xb8",     wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (33, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx x\xe2\x80\xb8x",     wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (34, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx \xe2\x80\xb8xx",     wrapAround, &didWrap)); TS_ASSERT(!didWrap);'), (35, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx\xe2\x80\xb8 xx",     wrapAround, &didWrap)); TS_ASSERT(!didWrap);'), (36, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx x\xe2\x80\xb8x\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (37, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (38, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx\xe2\x80\xb8 xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (39, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx \xe2\x80\xb8xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (40, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx\xe2\x80\xb8 xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (41, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx x\xe2\x80\xb8x xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (42, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (43, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (44, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx xx xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(!didWrap);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8", search("xx", "xx xx xx xx",         options, &didWrap)); TS_ASSERT(!didWrap);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (9, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "x\xe2\x80\xb8x xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (11, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "\xe2\x80\xb8x\xe2\x80\xb8x xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (13, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (14, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "\xe2\x80\xb8xx \xe2\x80\xb8xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "\xe2\x80\xb8xx x\xe2\x80\xb8x xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "xx xx xx xx\xe2\x80\xb8",        options, &didWrap)); TS_ASSERT(!didWrap);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "xx xx xx x\xe2\x80\xb8x",        options, &didWrap)); TS_ASSERT(!didWrap);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx \xe2\x80\xb8xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx\xe2\x80\xb8 xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (20, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "xx xx xx x\xe2\x80\xb8x\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (21, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (22, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx\xe2\x80\xb8 xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (23, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx x\xe2\x80\xb8x xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (24, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx \xe2\x80\xb8xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (25, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx\xe2\x80\xb8 xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx x\xe2\x80\xb8x xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (27, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (28, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (29, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (32, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx xx\xe2\x80\xb8",     wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (33, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx x\xe2\x80\xb8x",     wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (34, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx \xe2\x80\xb8xx",     wrapAround, &didWrap)); TS_ASSERT(!didWrap);'), (35, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx\xe2\x80\xb8 xx",     wrapAround, &didWrap)); TS_ASSERT(!didWrap);'), (36, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx x\xe2\x80\xb8x\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (37, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (38, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx xx\xe2\x80\xb8 xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (39, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx \xe2\x80\xb8xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (40, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx xx\xe2\x80\xb8 xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (41, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx x\xe2\x80\xb8x xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (42, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (43, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (44, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx xx xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(!didWrap);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8", search("xx", "xx xx xx xx",         options, &didWrap)); TS_ASSERT(!didWrap);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "\xe2\x80\xb8xx xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (9, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "x\xe2\x80\xb8x xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (11, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "\xe2\x80\xb8x\xe2\x80\xb8x xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (13, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (14, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx \xe2\x80\xb8xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx x\xe2\x80\xb8x xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx xx\xe2\x80\xb8",        options, &didWrap)); TS_ASSERT(!didWrap);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx x\xe2\x80\xb8x",        options, &didWrap)); TS_ASSERT(!didWrap);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx \xe2\x80\xb8xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx\xe2\x80\xb8 xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (20, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx x\xe2\x80\xb8x\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (21, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (22, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx\xe2\x80\xb8 xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (23, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx xx x\xe2\x80\xb8x xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (24, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx xx \xe2\x80\xb8xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (25, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx xx\xe2\x80\xb8 xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx x\xe2\x80\xb8x xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (27, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (28, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (29, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (32, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx xx",     wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (33, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "x\xe2\x80\xb8x xx xx xx",     wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (34, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx",     wrapAround, &didWrap)); TS_ASSERT(!didWrap);'), (35, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx",     wrapAround, &didWrap)); TS_ASSERT(!didWrap);'), (36, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8x\xe2\x80\xb8x xx xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (37, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (38, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx \xe2\x80\xb8xx xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (39, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx\xe2\x80\xb8 xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (40, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx \xe2\x80\xb8xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (41, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx x\xe2\x80\xb8x xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (42, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx\xe2\x80\xb8 xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (43, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx \xe2\x80\xb8xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (44, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(!didWrap);')]
===========================================
===========================================
Total add: 43
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8", search("xx", "xx xx xx xx",         options, &didWrap)); TS_ASSERT(!didWrap);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "\xe2\x80\xb8xx xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (9, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "x\xe2\x80\xb8x xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (11, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "\xe2\x80\xb8x\xe2\x80\xb8x xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (13, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (14, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx \xe2\x80\xb8xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx x\xe2\x80\xb8x xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx xx\xe2\x80\xb8",        options, &didWrap)); TS_ASSERT(!didWrap);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx x\xe2\x80\xb8x",        options, &didWrap)); TS_ASSERT(!didWrap);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx \xe2\x80\xb8xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx\xe2\x80\xb8 xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (20, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx x\xe2\x80\xb8x\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (21, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (22, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx\xe2\x80\xb8 xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (23, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx xx x\xe2\x80\xb8x xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (24, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx xx \xe2\x80\xb8xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (25, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx xx\xe2\x80\xb8 xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx x\xe2\x80\xb8x xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (27, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (28, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (29, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (32, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx xx",     wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (33, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "x\xe2\x80\xb8x xx xx xx",     wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (34, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx",     wrapAround, &didWrap)); TS_ASSERT(!didWrap);'), (35, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx",     wrapAround, &didWrap)); TS_ASSERT(!didWrap);'), (36, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8x\xe2\x80\xb8x xx xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (37, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (38, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx \xe2\x80\xb8xx xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (39, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx\xe2\x80\xb8 xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (40, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx \xe2\x80\xb8xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (41, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx x\xe2\x80\xb8x xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (42, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx\xe2\x80\xb8 xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (43, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx \xe2\x80\xb8xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (44, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(!didWrap);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8 \xe2\x80\xb8xx\xe2\x80\xb8", search("xx", "xx xx xx xx",         options, &didWrap)); TS_ASSERT(!didWrap);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "\xe2\x80\xb8xx xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (9, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "x\xe2\x80\xb8x xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (11, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "\xe2\x80\xb8x\xe2\x80\xb8x xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (13, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx xx",         search("xx", "\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (14, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx \xe2\x80\xb8xx xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "\xe2\x80\xb8xx x\xe2\x80\xb8x xx xx",       options, &didWrap)); TS_ASSERT(!didWrap);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "xx xx xx xx\xe2\x80\xb8",        options, &didWrap)); TS_ASSERT(!didWrap);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx x\xe2\x80\xb8x",        options, &didWrap)); TS_ASSERT(!didWrap);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx \xe2\x80\xb8xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx\xe2\x80\xb8 xx",        options, &didWrap)); TS_ASSERT(!didWrap);'), (20, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx x\xe2\x80\xb8x\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (21, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (22, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx \xe2\x80\xb8xx\xe2\x80\xb8 xx",       search("xx", "xx xx xx\xe2\x80\xb8 xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (23, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx xx x\xe2\x80\xb8x xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (24, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx xx \xe2\x80\xb8xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (25, 1, u'+\t\tTS_ASSERT_EQUALS("xx \xe2\x80\xb8xx\xe2\x80\xb8 xx xx",       search("xx", "xx xx\xe2\x80\xb8 xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx x\xe2\x80\xb8x xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (27, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (28, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (29, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx xx\xe2\x80\xb8",       options, &didWrap)); TS_ASSERT(!didWrap);'), (32, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx xx",     wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (33, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "x\xe2\x80\xb8x xx xx xx",     wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (34, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx\xe2\x80\xb8 xx xx xx",     wrapAround, &didWrap)); TS_ASSERT(!didWrap);'), (35, 1, u'+\t\tTS_ASSERT_EQUALS("\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",       search("xx", "xx \xe2\x80\xb8xx xx xx",     wrapAround, &didWrap)); TS_ASSERT(!didWrap);'), (36, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8x\xe2\x80\xb8x xx xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (37, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx\xe2\x80\xb8 xx xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (38, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx \xe2\x80\xb8xx xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (39, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx\xe2\x80\xb8 xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (40, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx \xe2\x80\xb8xx xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (41, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx x\xe2\x80\xb8x xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (42, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx\xe2\x80\xb8 xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (43, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx \xe2\x80\xb8xx",    wrapAround, &didWrap)); TS_ASSERT(didWrap);'), (44, 1, u'+\t\tTS_ASSERT_EQUALS("xx xx xx \xe2\x80\xb8xx\xe2\x80\xb8",       search("xx", "\xe2\x80\xb8xx xx xx xx\xe2\x80\xb8",    wrapAround, &didWrap)); TS_ASSERT(!didWrap);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html></html\xe2\x80\xb8>", kSelectionMoveToBeginOfTypingPair), "<html></html\xe2\x80\xb8>");'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html></html>\xe2\x80\xb8", kSelectionMoveToBeginOfTypingPair), "\xe2\x80\xb8<html></html>");'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html><body></body\xe2\x80\xb8></html>", kSelectionMoveToBeginOfTypingPair), "<html><body>\xe2\x80\xb8</body></html>");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html><body>\xe2\x80\xb8</body></html>", kSelectionMoveToBeginOfTypingPair), "<html>\xe2\x80\xb8<body></body></html>");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(move("<\xe2\x80\xb8html></html>", kSelectionMoveToEndOfTypingPair), "<\xe2\x80\xb8html></html>");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(move("\xe2\x80\xb8<html></html>", kSelectionMoveToEndOfTypingPair), "<html></html>\xe2\x80\xb8");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html><\xe2\x80\xb8body></body></html>", kSelectionMoveToEndOfTypingPair), "<html><body>\xe2\x80\xb8</body></html>");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html><body>\xe2\x80\xb8</body></html>", kSelectionMoveToEndOfTypingPair), "<html><body></body>\xe2\x80\xb8</html>");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first\xe2\x80\xb8</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul><li>\xe2\x80\xb8first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>\xe2\x80\xb8  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul>\xe2\x80\xb8<li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li> \xe2\x80\xb8 <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul>\xe2\x80\xb8<li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li\xe2\x80\xb8> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul>\xe2\x80\xb8<li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li>\xe2\x80\xb8 <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul>\xe2\x80\xb8<li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li> <a> <b>hello</b>\xe2\x80\xb8 <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul><li>first</li>  <li> <a> \xe2\x80\xb8<b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li> <a> <b>hello</b> \xe2\x80\xb8<em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul><li>first</li>  <li> <a>\xe2\x80\xb8 <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li> <a> <b>hello</b> <em>world</em></a>\xe2\x80\xb8</li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul><li>first</li>  <li> \xe2\x80\xb8<a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first\xe2\x80\xb8</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToEndOfTypingPair), "<ul><li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li>\xe2\x80\xb8</ul>");'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li> \xe2\x80\xb8 <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToEndOfTypingPair), "<ul><li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li>\xe2\x80\xb8</ul>");'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li> <a> <b>hello</b> \xe2\x80\xb8<em>world</em></a></li><li>third</li></ul>", kSelectionMoveToEndOfTypingPair), "<ul><li>first</li>  <li> <a> <b>hello</b> <em>world</em>\xe2\x80\xb8</a></li><li>third</li></ul>");')]
===========================================
===========================================
Total add: 26
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html></html\xe2\x80\xb8>", kSelectionMoveToBeginOfTypingPair), "<html></html\xe2\x80\xb8>");'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html></html>\xe2\x80\xb8", kSelectionMoveToBeginOfTypingPair), "\xe2\x80\xb8<html></html>");'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html><body></body\xe2\x80\xb8></html>", kSelectionMoveToBeginOfTypingPair), "<html><body>\xe2\x80\xb8</body></html>");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html><body>\xe2\x80\xb8</body></html>", kSelectionMoveToBeginOfTypingPair), "<html>\xe2\x80\xb8<body></body></html>");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(move("<\xe2\x80\xb8html></html>", kSelectionMoveToEndOfTypingPair), "<\xe2\x80\xb8html></html>");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(move("\xe2\x80\xb8<html></html>", kSelectionMoveToEndOfTypingPair), "<html></html>\xe2\x80\xb8");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html><\xe2\x80\xb8body></body></html>", kSelectionMoveToEndOfTypingPair), "<html><body>\xe2\x80\xb8</body></html>");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html><body>\xe2\x80\xb8</body></html>", kSelectionMoveToEndOfTypingPair), "<html><body></body>\xe2\x80\xb8</html>");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first\xe2\x80\xb8</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul><li>\xe2\x80\xb8first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>\xe2\x80\xb8  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul>\xe2\x80\xb8<li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li> \xe2\x80\xb8 <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul>\xe2\x80\xb8<li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li\xe2\x80\xb8> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul>\xe2\x80\xb8<li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li>\xe2\x80\xb8 <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul>\xe2\x80\xb8<li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li> <a> <b>hello</b>\xe2\x80\xb8 <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul><li>first</li>  <li> <a> \xe2\x80\xb8<b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li> <a> <b>hello</b> \xe2\x80\xb8<em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul><li>first</li>  <li> <a>\xe2\x80\xb8 <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li> <a> <b>hello</b> <em>world</em></a>\xe2\x80\xb8</li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul><li>first</li>  <li> \xe2\x80\xb8<a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first\xe2\x80\xb8</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToEndOfTypingPair), "<ul><li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li>\xe2\x80\xb8</ul>");'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li> \xe2\x80\xb8 <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToEndOfTypingPair), "<ul><li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li>\xe2\x80\xb8</ul>");'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li> <a> <b>hello</b> \xe2\x80\xb8<em>world</em></a></li><li>third</li></ul>", kSelectionMoveToEndOfTypingPair), "<ul><li>first</li>  <li> <a> <b>hello</b> <em>world</em>\xe2\x80\xb8</a></li><li>third</li></ul>");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html></html\xe2\x80\xb8>", kSelectionMoveToBeginOfTypingPair), "<html></html\xe2\x80\xb8>");'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html></html>\xe2\x80\xb8", kSelectionMoveToBeginOfTypingPair), "\xe2\x80\xb8<html></html>");'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html><body></body\xe2\x80\xb8></html>", kSelectionMoveToBeginOfTypingPair), "<html><body>\xe2\x80\xb8</body></html>");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html><body>\xe2\x80\xb8</body></html>", kSelectionMoveToBeginOfTypingPair), "<html>\xe2\x80\xb8<body></body></html>");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(move("<\xe2\x80\xb8html></html>", kSelectionMoveToEndOfTypingPair), "<\xe2\x80\xb8html></html>");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(move("\xe2\x80\xb8<html></html>", kSelectionMoveToEndOfTypingPair), "<html></html>\xe2\x80\xb8");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html><\xe2\x80\xb8body></body></html>", kSelectionMoveToEndOfTypingPair), "<html><body>\xe2\x80\xb8</body></html>");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(move("<html><body>\xe2\x80\xb8</body></html>", kSelectionMoveToEndOfTypingPair), "<html><body></body>\xe2\x80\xb8</html>");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first\xe2\x80\xb8</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul><li>\xe2\x80\xb8first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>\xe2\x80\xb8  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul>\xe2\x80\xb8<li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li> \xe2\x80\xb8 <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul>\xe2\x80\xb8<li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li\xe2\x80\xb8> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul>\xe2\x80\xb8<li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li>\xe2\x80\xb8 <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul>\xe2\x80\xb8<li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li> <a> <b>hello</b>\xe2\x80\xb8 <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul><li>first</li>  <li> <a> \xe2\x80\xb8<b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li> <a> <b>hello</b> \xe2\x80\xb8<em>world</em></a></li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul><li>first</li>  <li> <a>\xe2\x80\xb8 <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li> <a> <b>hello</b> <em>world</em></a>\xe2\x80\xb8</li><li>third</li></ul>", kSelectionMoveToBeginOfTypingPair), "<ul><li>first</li>  <li> \xe2\x80\xb8<a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first\xe2\x80\xb8</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToEndOfTypingPair), "<ul><li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li>\xe2\x80\xb8</ul>");'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li> \xe2\x80\xb8 <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li></ul>", kSelectionMoveToEndOfTypingPair), "<ul><li>first</li>  <li> <a> <b>hello</b> <em>world</em></a></li><li>third</li>\xe2\x80\xb8</ul>");'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(move("<ul><li>first</li>  <li> <a> <b>hello</b> \xe2\x80\xb8<em>world</em></a></li><li>third</li></ul>", kSelectionMoveToEndOfTypingPair), "<ul><li>first</li>  <li> <a> <b>hello</b> <em>world</em>\xe2\x80\xb8</a></li><li>third</li></ul>");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(ng::highlight_ranges_for_movement(buf, caret, ng::move(buf, caret, kSelectionMoveLeft))),  "[3-7]");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(ng::highlight_ranges_for_movement(buf, caret, ng::move(buf, caret, kSelectionMoveRight))), "[0-3]");')]
===========================================
===========================================
Total add: 12
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(ng::highlight_ranges_for_movement(buf, caret, ng::move(buf, caret, kSelectionMoveLeft))),  "[3-7]");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(ng::highlight_ranges_for_movement(buf, caret, ng::move(buf, caret, kSelectionMoveRight))), "[0-3]");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(ng::highlight_ranges_for_movement(buf, caret, ng::move(buf, caret, kSelectionMoveLeft))),  "[3-7]");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(ng::highlight_ranges_for_movement(buf, caret, ng::move(buf, caret, kSelectionMoveRight))), "[0-3]");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(plist::merge_delta(plists)), to_s(newPlist));')]
===========================================
===========================================
Total add: 38
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(plist::merge_delta(plists)), to_s(newPlist));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(plist::merge_delta(plists)), to_s(newPlist));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(_marks.find(markType) != _marks.end())'), (3, 2, u'-\t\tASSERT(_marks.find(markType)->second.find(index) != _marks.find(markType)->second.end())'), (4, 1, u'+\t\tASSERT(_marks.find(markType) != _marks.end());'), (5, 1, u'+\t\tASSERT(_marks.find(markType)->second.find(index) != _marks.find(markType)->second.end());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: namespace ng
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(_marks.find(markType) != _marks.end())'), (3, 2, u'-\t\tASSERT(_marks.find(markType)->second.find(index) != _marks.find(markType)->second.end())'), (4, 1, u'+\t\tASSERT(_marks.find(markType) != _marks.end());'), (5, 1, u'+\t\tASSERT(_marks.find(markType)->second.find(index) != _marks.find(markType)->second.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(_marks.find(markType) != _marks.end())'), (3, 2, u'-\t\tASSERT(_marks.find(markType)->second.find(index) != _marks.find(markType)->second.end())'), (4, 1, u'+\t\tASSERT(_marks.find(markType) != _marks.end());'), (5, 1, u'+\t\tASSERT(_marks.find(markType)->second.find(index) != _marks.find(markType)->second.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(!_buffer)'), (3, 1, u'+\t\tASSERT(!_buffer);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: namespace document
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(!_buffer)'), (3, 1, u'+\t\tASSERT(!_buffer);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(!_buffer)'), (3, 1, u'+\t\tASSERT(!_buffer);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(!_callbacks.empty())'), (3, 1, u'+\t\tASSERT(!_callbacks.empty());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: namespace scm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(!_callbacks.empty())'), (3, 1, u'+\t\tASSERT(!_callbacks.empty());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tASSERT(!_callbacks.empty())'), (3, 1, u'+\t\tASSERT(!_callbacks.empty());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tASSERT(!dry());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: namespace scm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tASSERT(!dry());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tASSERT(!dry());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(move("(bad\xe2\x80\xb8ly} nested)", kSelectionMoveToBeginOfTypingPair), "(\xe2\x80\xb8badly} nested)");'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(move("(bad\xe2\x80\xb8ly} nested)", kSelectionMoveToEndOfTypingPair),   "(badly} nested\xe2\x80\xb8)");'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(move("{bad\xe2\x80\xb8ly) nested}", kSelectionMoveToBeginOfTypingPair), "{\xe2\x80\xb8badly) nested}");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(move("{bad\xe2\x80\xb8ly) nested}", kSelectionMoveToEndOfTypingPair),   "{badly) nested\xe2\x80\xb8}");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(move("{(bad\xe2\x80\xb8ly} nested)", kSelectionMoveToBeginOfTypingPair), "{\xe2\x80\xb8(badly} nested)");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(move("{(bad\xe2\x80\xb8ly} nested)", kSelectionMoveToEndOfTypingPair),   "{(badly\xe2\x80\xb8} nested)");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(move("({bad\xe2\x80\xb8ly) nested}", kSelectionMoveToBeginOfTypingPair), "(\xe2\x80\xb8{badly) nested}");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(move("({bad\xe2\x80\xb8ly) nested}", kSelectionMoveToEndOfTypingPair),   "({badly\xe2\x80\xb8) nested}");')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(move("(bad\xe2\x80\xb8ly} nested)", kSelectionMoveToBeginOfTypingPair), "(\xe2\x80\xb8badly} nested)");'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(move("(bad\xe2\x80\xb8ly} nested)", kSelectionMoveToEndOfTypingPair),   "(badly} nested\xe2\x80\xb8)");'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(move("{bad\xe2\x80\xb8ly) nested}", kSelectionMoveToBeginOfTypingPair), "{\xe2\x80\xb8badly) nested}");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(move("{bad\xe2\x80\xb8ly) nested}", kSelectionMoveToEndOfTypingPair),   "{badly) nested\xe2\x80\xb8}");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(move("{(bad\xe2\x80\xb8ly} nested)", kSelectionMoveToBeginOfTypingPair), "{\xe2\x80\xb8(badly} nested)");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(move("{(bad\xe2\x80\xb8ly} nested)", kSelectionMoveToEndOfTypingPair),   "{(badly\xe2\x80\xb8} nested)");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(move("({bad\xe2\x80\xb8ly) nested}", kSelectionMoveToBeginOfTypingPair), "(\xe2\x80\xb8{badly) nested}");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(move("({bad\xe2\x80\xb8ly) nested}", kSelectionMoveToEndOfTypingPair),   "({badly\xe2\x80\xb8) nested}");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(move("(bad\xe2\x80\xb8ly} nested)", kSelectionMoveToBeginOfTypingPair), "(\xe2\x80\xb8badly} nested)");'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(move("(bad\xe2\x80\xb8ly} nested)", kSelectionMoveToEndOfTypingPair),   "(badly} nested\xe2\x80\xb8)");'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(move("{bad\xe2\x80\xb8ly) nested}", kSelectionMoveToBeginOfTypingPair), "{\xe2\x80\xb8badly) nested}");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(move("{bad\xe2\x80\xb8ly) nested}", kSelectionMoveToEndOfTypingPair),   "{badly) nested\xe2\x80\xb8}");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(move("{(bad\xe2\x80\xb8ly} nested)", kSelectionMoveToBeginOfTypingPair), "{\xe2\x80\xb8(badly} nested)");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(move("{(bad\xe2\x80\xb8ly} nested)", kSelectionMoveToEndOfTypingPair),   "{(badly\xe2\x80\xb8} nested)");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(move("({bad\xe2\x80\xb8ly) nested}", kSelectionMoveToBeginOfTypingPair), "(\xe2\x80\xb8{badly) nested}");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(move("({bad\xe2\x80\xb8ly) nested}", kSelectionMoveToEndOfTypingPair),   "({badly\xe2\x80\xb8) nested}");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tTS_ASSERT_DIFFERS(pos, std::string::npos);'), (20, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 0), kSelectionMoveToBeginOfTypingPair)),         "1");'), (21, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 5), kSelectionMoveToBeginOfTypingPair)),       "1:6");'), (22, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 6), kSelectionMoveToBeginOfTypingPair)),       "1:7");'), (23, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 9), kSelectionMoveToBeginOfTypingPair)),       "1:7");'), (24, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(10), kSelectionMoveToBeginOfTypingPair)),       "1:7");'), (25, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(16), kSelectionMoveToBeginOfTypingPair)),      "1:11");'), (26, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(17), kSelectionMoveToBeginOfTypingPair)),      "1:10");'), (27, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(18), kSelectionMoveToBeginOfTypingPair)),       "1:6");'), (28, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(19), kSelectionMoveToBeginOfTypingPair)),      "1:20");'), (32, 1, u'+\t\tTS_ASSERT_EQUALS(move("\xe2\x80\xb8this (is (a test)).", kSelectionMoveToBeginOfTypingPair), "\xe2\x80\xb8this (is (a test)).");'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(move("this \xe2\x80\xb8(is (a test)).", kSelectionMoveToBeginOfTypingPair), "this \xe2\x80\xb8(is (a test)).");'), (34, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (\xe2\x80\xb8is (a test)).", kSelectionMoveToBeginOfTypingPair), "this (\xe2\x80\xb8is (a test)).");'), (35, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is \xe2\x80\xb8(a test)).", kSelectionMoveToBeginOfTypingPair), "this (\xe2\x80\xb8is (a test)).");'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (\xe2\x80\xb8a test)).", kSelectionMoveToBeginOfTypingPair), "this (\xe2\x80\xb8is (a test)).");'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test\xe2\x80\xb8)).", kSelectionMoveToBeginOfTypingPair), "this (is (\xe2\x80\xb8a test)).");'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test)\xe2\x80\xb8).", kSelectionMoveToBeginOfTypingPair), "this (is \xe2\x80\xb8(a test)).");'), (39, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test))\xe2\x80\xb8.", kSelectionMoveToBeginOfTypingPair), "this \xe2\x80\xb8(is (a test)).");'), (40, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test)).\xe2\x80\xb8", kSelectionMoveToBeginOfTypingPair), "this (is (a test)).\xe2\x80\xb8");'), (42, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 0), kSelectionMoveToEndOfTypingPair)),           "1");'), (43, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 5), kSelectionMoveToEndOfTypingPair)),        "1:19");'), (44, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 6), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (45, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 9), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (46, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(10), kSelectionMoveToEndOfTypingPair)),        "1:17");'), (47, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(16), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (48, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(17), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (49, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(18), kSelectionMoveToEndOfTypingPair)),        "1:19");'), (50, 1, u'+\t\tTS_ASSERT_EQUALS(move("\xe2\x80\xb8this (is (a test)).", kSelectionMoveToEndOfTypingPair), "\xe2\x80\xb8this (is (a test)).");'), (51, 1, u'+\t\tTS_ASSERT_EQUALS(move("this \xe2\x80\xb8(is (a test)).", kSelectionMoveToEndOfTypingPair), "this (is (a test))\xe2\x80\xb8.");'), (52, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (\xe2\x80\xb8is (a test)).", kSelectionMoveToEndOfTypingPair), "this (is (a test)\xe2\x80\xb8).");'), (53, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is \xe2\x80\xb8(a test)).", kSelectionMoveToEndOfTypingPair), "this (is (a test)\xe2\x80\xb8).");'), (54, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (\xe2\x80\xb8a test)).", kSelectionMoveToEndOfTypingPair), "this (is (a test\xe2\x80\xb8)).");'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test\xe2\x80\xb8)).", kSelectionMoveToEndOfTypingPair), "this (is (a test)\xe2\x80\xb8).");'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test)\xe2\x80\xb8).", kSelectionMoveToEndOfTypingPair), "this (is (a test)\xe2\x80\xb8).");'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test))\xe2\x80\xb8.", kSelectionMoveToEndOfTypingPair), "this (is (a test))\xe2\x80\xb8.");'), (58, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test)).\xe2\x80\xb8", kSelectionMoveToEndOfTypingPair), "this (is (a test)).\xe2\x80\xb8");')]
===========================================
===========================================
Total add: 33
Total del: 20
Header: class BraceSelectionTests : public CxxTest::TestSuite
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tTS_ASSERT_DIFFERS(pos, std::string::npos);'), (20, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 0), kSelectionMoveToBeginOfTypingPair)),         "1");'), (21, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 5), kSelectionMoveToBeginOfTypingPair)),       "1:6");'), (22, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 6), kSelectionMoveToBeginOfTypingPair)),       "1:7");'), (23, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 9), kSelectionMoveToBeginOfTypingPair)),       "1:7");'), (24, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(10), kSelectionMoveToBeginOfTypingPair)),       "1:7");'), (25, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(16), kSelectionMoveToBeginOfTypingPair)),      "1:11");'), (26, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(17), kSelectionMoveToBeginOfTypingPair)),      "1:10");'), (27, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(18), kSelectionMoveToBeginOfTypingPair)),       "1:6");'), (28, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(19), kSelectionMoveToBeginOfTypingPair)),      "1:20");'), (32, 1, u'+\t\tTS_ASSERT_EQUALS(move("\xe2\x80\xb8this (is (a test)).", kSelectionMoveToBeginOfTypingPair), "\xe2\x80\xb8this (is (a test)).");'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(move("this \xe2\x80\xb8(is (a test)).", kSelectionMoveToBeginOfTypingPair), "this \xe2\x80\xb8(is (a test)).");'), (34, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (\xe2\x80\xb8is (a test)).", kSelectionMoveToBeginOfTypingPair), "this (\xe2\x80\xb8is (a test)).");'), (35, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is \xe2\x80\xb8(a test)).", kSelectionMoveToBeginOfTypingPair), "this (\xe2\x80\xb8is (a test)).");'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (\xe2\x80\xb8a test)).", kSelectionMoveToBeginOfTypingPair), "this (\xe2\x80\xb8is (a test)).");'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test\xe2\x80\xb8)).", kSelectionMoveToBeginOfTypingPair), "this (is (\xe2\x80\xb8a test)).");'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test)\xe2\x80\xb8).", kSelectionMoveToBeginOfTypingPair), "this (is \xe2\x80\xb8(a test)).");'), (39, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test))\xe2\x80\xb8.", kSelectionMoveToBeginOfTypingPair), "this \xe2\x80\xb8(is (a test)).");'), (40, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test)).\xe2\x80\xb8", kSelectionMoveToBeginOfTypingPair), "this (is (a test)).\xe2\x80\xb8");'), (42, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 0), kSelectionMoveToEndOfTypingPair)),           "1");'), (43, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 5), kSelectionMoveToEndOfTypingPair)),        "1:19");'), (44, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 6), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (45, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 9), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (46, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(10), kSelectionMoveToEndOfTypingPair)),        "1:17");'), (47, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(16), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (48, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(17), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (49, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(18), kSelectionMoveToEndOfTypingPair)),        "1:19");'), (50, 1, u'+\t\tTS_ASSERT_EQUALS(move("\xe2\x80\xb8this (is (a test)).", kSelectionMoveToEndOfTypingPair), "\xe2\x80\xb8this (is (a test)).");'), (51, 1, u'+\t\tTS_ASSERT_EQUALS(move("this \xe2\x80\xb8(is (a test)).", kSelectionMoveToEndOfTypingPair), "this (is (a test))\xe2\x80\xb8.");'), (52, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (\xe2\x80\xb8is (a test)).", kSelectionMoveToEndOfTypingPair), "this (is (a test)\xe2\x80\xb8).");'), (53, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is \xe2\x80\xb8(a test)).", kSelectionMoveToEndOfTypingPair), "this (is (a test)\xe2\x80\xb8).");'), (54, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (\xe2\x80\xb8a test)).", kSelectionMoveToEndOfTypingPair), "this (is (a test\xe2\x80\xb8)).");'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test\xe2\x80\xb8)).", kSelectionMoveToEndOfTypingPair), "this (is (a test)\xe2\x80\xb8).");'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test)\xe2\x80\xb8).", kSelectionMoveToEndOfTypingPair), "this (is (a test)\xe2\x80\xb8).");'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test))\xe2\x80\xb8.", kSelectionMoveToEndOfTypingPair), "this (is (a test))\xe2\x80\xb8.");'), (58, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test)).\xe2\x80\xb8", kSelectionMoveToEndOfTypingPair), "this (is (a test)).\xe2\x80\xb8");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tTS_ASSERT_DIFFERS(pos, std::string::npos);'), (20, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 0), kSelectionMoveToBeginOfTypingPair)),         "1");'), (21, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 5), kSelectionMoveToBeginOfTypingPair)),       "1:6");'), (22, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 6), kSelectionMoveToBeginOfTypingPair)),       "1:7");'), (23, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 9), kSelectionMoveToBeginOfTypingPair)),       "1:7");'), (24, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(10), kSelectionMoveToBeginOfTypingPair)),       "1:7");'), (25, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(16), kSelectionMoveToBeginOfTypingPair)),      "1:11");'), (26, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(17), kSelectionMoveToBeginOfTypingPair)),      "1:10");'), (27, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(18), kSelectionMoveToBeginOfTypingPair)),       "1:6");'), (28, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(19), kSelectionMoveToBeginOfTypingPair)),      "1:20");'), (32, 1, u'+\t\tTS_ASSERT_EQUALS(move("\xe2\x80\xb8this (is (a test)).", kSelectionMoveToBeginOfTypingPair), "\xe2\x80\xb8this (is (a test)).");'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(move("this \xe2\x80\xb8(is (a test)).", kSelectionMoveToBeginOfTypingPair), "this \xe2\x80\xb8(is (a test)).");'), (34, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (\xe2\x80\xb8is (a test)).", kSelectionMoveToBeginOfTypingPair), "this (\xe2\x80\xb8is (a test)).");'), (35, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is \xe2\x80\xb8(a test)).", kSelectionMoveToBeginOfTypingPair), "this (\xe2\x80\xb8is (a test)).");'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (\xe2\x80\xb8a test)).", kSelectionMoveToBeginOfTypingPair), "this (\xe2\x80\xb8is (a test)).");'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test\xe2\x80\xb8)).", kSelectionMoveToBeginOfTypingPair), "this (is (\xe2\x80\xb8a test)).");'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test)\xe2\x80\xb8).", kSelectionMoveToBeginOfTypingPair), "this (is \xe2\x80\xb8(a test)).");'), (39, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test))\xe2\x80\xb8.", kSelectionMoveToBeginOfTypingPair), "this \xe2\x80\xb8(is (a test)).");'), (40, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test)).\xe2\x80\xb8", kSelectionMoveToBeginOfTypingPair), "this (is (a test)).\xe2\x80\xb8");'), (42, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 0), kSelectionMoveToEndOfTypingPair)),           "1");'), (43, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 5), kSelectionMoveToEndOfTypingPair)),        "1:19");'), (44, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 6), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (45, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 9), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (46, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(10), kSelectionMoveToEndOfTypingPair)),        "1:17");'), (47, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(16), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (48, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(17), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (49, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(18), kSelectionMoveToEndOfTypingPair)),        "1:19");'), (50, 1, u'+\t\tTS_ASSERT_EQUALS(move("\xe2\x80\xb8this (is (a test)).", kSelectionMoveToEndOfTypingPair), "\xe2\x80\xb8this (is (a test)).");'), (51, 1, u'+\t\tTS_ASSERT_EQUALS(move("this \xe2\x80\xb8(is (a test)).", kSelectionMoveToEndOfTypingPair), "this (is (a test))\xe2\x80\xb8.");'), (52, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (\xe2\x80\xb8is (a test)).", kSelectionMoveToEndOfTypingPair), "this (is (a test)\xe2\x80\xb8).");'), (53, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is \xe2\x80\xb8(a test)).", kSelectionMoveToEndOfTypingPair), "this (is (a test)\xe2\x80\xb8).");'), (54, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (\xe2\x80\xb8a test)).", kSelectionMoveToEndOfTypingPair), "this (is (a test\xe2\x80\xb8)).");'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test\xe2\x80\xb8)).", kSelectionMoveToEndOfTypingPair), "this (is (a test)\xe2\x80\xb8).");'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test)\xe2\x80\xb8).", kSelectionMoveToEndOfTypingPair), "this (is (a test)\xe2\x80\xb8).");'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test))\xe2\x80\xb8.", kSelectionMoveToEndOfTypingPair), "this (is (a test))\xe2\x80\xb8.");'), (58, 1, u'+\t\tTS_ASSERT_EQUALS(move("this (is (a test)).\xe2\x80\xb8", kSelectionMoveToEndOfTypingPair), "this (is (a test)).\xe2\x80\xb8");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 2, u'-\t\tASSERT(command.find("#!") == 0);'), (197, 2, u'-\t\tASSERT(pthread_main_np() != 0);'), (207, 2, u'-\t\tASSERT(pthread_main_np() != 0);'), (218, 2, u'-\t\tASSERT(pthread_main_np() != 0);')]
===========================================
===========================================
Total add: 0
Total del: 285
Header: namespace oak
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 2, u'-\t\tASSERT(command.find("#!") == 0);'), (197, 2, u'-\t\tASSERT(pthread_main_np() != 0);'), (207, 2, u'-\t\tASSERT(pthread_main_np() != 0);'), (218, 2, u'-\t\tASSERT(pthread_main_np() != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(92, 2, u'-\t\tASSERT(command.find("#!") == 0);'), (197, 2, u'-\t\tASSERT(pthread_main_np() != 0);'), (207, 2, u'-\t\tASSERT(pthread_main_np() != 0);'), (218, 2, u'-\t\tASSERT(pthread_main_np() != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(104, 1, u'+\t\tASSERT(command.find("#!") == 0);'), (209, 1, u'+\t\tASSERT(pthread_main_np() != 0);'), (219, 1, u'+\t\tASSERT(pthread_main_np() != 0);'), (230, 1, u'+\t\tASSERT(pthread_main_np() != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-\t\tASSERT_LT(index, files.size());')]
===========================================
===========================================
Total add: 0
Total del: 59
Header: namespace path
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-\t\tASSERT_LT(index, files.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-\t\tASSERT_LT(index, files.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\tASSERT(!_buffer);')]
===========================================
===========================================
Total add: 15
Total del: 4
Header: namespace document
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\tASSERT(!_buffer);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\tASSERT(!_buffer);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), content);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), content);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: class document_tests : public CxxTest::TestSuite
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), content);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), content);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), content);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), content);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "Lorem ipsum charum sit amet, abetarda adipisicing elit.");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "Lorem ipsum charum sit amet, abetarda adipisicing elit.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "Lorem ipsum charum sit amet, abetarda adipisicing elit.");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "Lorem ipsum charum sit amet, abetarda adipisicing elit.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "Lorem ipsum charum sit amet, abetarda adipisicing elit.");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "Lorem ipsum charum sit amet, abetarda adipisicing elit.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "Foo\\nJazz\\nFud\\n");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "Foo\\nJazz\\nFud\\n");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "Foo\\nJazz\\nFud\\n");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "Foo\\nJazz\\nFud\\n");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "Foo\\nJazz\\nFud\\n");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(doc->content(), "Foo\\nJazz\\nFud\\n");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("")["TEST"],                        "foo");'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.c++")["TEST"],              "foo:bar");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.any")["TM_COMMENT_STYLE"],  "Base Environment");'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.ruby")["TM_COMMENT_STYLE"], "Ruby Environment");'), (8, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text.plain")["PATH"], "/usr/bin:/bin:/sbin");'), (9, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text.tex")["PATH"],   "/usr/bin:/bin:/sbin:/usr/texbin");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "")["TEST"],                        "foo");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "source.c++")["TEST"],              "foo:bar");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "source.any")["TM_COMMENT_STYLE"],  "Base Environment");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "source.ruby")["TM_COMMENT_STYLE"], "Ruby Environment");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "text.plain")["PATH"], "/usr/bin:/bin:/sbin");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "text.tex")["PATH"],   "/usr/bin:/bin:/sbin:/usr/texbin");')]
===========================================
===========================================
Total add: 8
Total del: 6
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("")["TEST"],                        "foo");'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.c++")["TEST"],              "foo:bar");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.any")["TM_COMMENT_STYLE"],  "Base Environment");'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.ruby")["TM_COMMENT_STYLE"], "Ruby Environment");'), (8, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text.plain")["PATH"], "/usr/bin:/bin:/sbin");'), (9, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text.tex")["PATH"],   "/usr/bin:/bin:/sbin:/usr/texbin");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "")["TEST"],                        "foo");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "source.c++")["TEST"],              "foo:bar");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "source.any")["TM_COMMENT_STYLE"],  "Base Environment");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "source.ruby")["TM_COMMENT_STYLE"], "Ruby Environment");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "text.plain")["PATH"], "/usr/bin:/bin:/sbin");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "text.tex")["PATH"],   "/usr/bin:/bin:/sbin:/usr/texbin");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("")["TEST"],                        "foo");'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.c++")["TEST"],              "foo:bar");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.any")["TM_COMMENT_STYLE"],  "Base Environment");'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.ruby")["TM_COMMENT_STYLE"], "Ruby Environment");'), (8, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text.plain")["PATH"], "/usr/bin:/bin:/sbin");'), (9, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text.tex")["PATH"],   "/usr/bin:/bin:/sbin:/usr/texbin");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "")["TEST"],                        "foo");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "source.c++")["TEST"],              "foo:bar");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "source.any")["TM_COMMENT_STYLE"],  "Base Environment");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "source.ruby")["TM_COMMENT_STYLE"], "Ruby Environment");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "text.plain")["PATH"], "/usr/bin:/bin:/sbin");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(base, "text.tex")["PATH"],   "/usr/bin:/bin:/sbin:/usr/texbin");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text")["DialogPath"], jail.path("Bundles/Dialog.tmbundle/Support/bin"));'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(std::map<std::string, std::string>(), "text")["DialogPath"], jail.path("Bundles/Dialog.tmbundle/Support/bin"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text")["DialogPath"], jail.path("Bundles/Dialog.tmbundle/Support/bin"));'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(std::map<std::string, std::string>(), "text")["DialogPath"], jail.path("Bundles/Dialog.tmbundle/Support/bin"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text")["DialogPath"], jail.path("Bundles/Dialog.tmbundle/Support/bin"));'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables(std::map<std::string, std::string>(), "text")["DialogPath"], jail.path("Bundles/Dialog.tmbundle/Support/bin"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("")["TEST"],                        "foo");'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("source.c++")["TEST"],              "foo:bar");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("source.any")["TM_COMMENT_STYLE"],  "Base Environment");'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("source.ruby")["TM_COMMENT_STYLE"], "Ruby Environment");'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("")["TEST"],                        "foo");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.c++")["TEST"],              "foo:bar");'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.any")["TM_COMMENT_STYLE"],  "Base Environment");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.ruby")["TM_COMMENT_STYLE"], "Ruby Environment");'), (11, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("text.plain")["PATH"], "/usr/bin:/bin:/sbin");'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("text.tex")["PATH"],   "/usr/bin:/bin:/sbin:/usr/texbin");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text.plain")["PATH"], "/usr/bin:/bin:/sbin");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text.tex")["PATH"],   "/usr/bin:/bin:/sbin:/usr/texbin");')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("")["TEST"],                        "foo");'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("source.c++")["TEST"],              "foo:bar");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("source.any")["TM_COMMENT_STYLE"],  "Base Environment");'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("source.ruby")["TM_COMMENT_STYLE"], "Ruby Environment");'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("")["TEST"],                        "foo");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.c++")["TEST"],              "foo:bar");'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.any")["TM_COMMENT_STYLE"],  "Base Environment");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.ruby")["TM_COMMENT_STYLE"], "Ruby Environment");'), (11, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("text.plain")["PATH"], "/usr/bin:/bin:/sbin");'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("text.tex")["PATH"],   "/usr/bin:/bin:/sbin:/usr/texbin");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text.plain")["PATH"], "/usr/bin:/bin:/sbin");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text.tex")["PATH"],   "/usr/bin:/bin:/sbin:/usr/texbin");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("")["TEST"],                        "foo");'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("source.c++")["TEST"],              "foo:bar");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("source.any")["TM_COMMENT_STYLE"],  "Base Environment");'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("source.ruby")["TM_COMMENT_STYLE"], "Ruby Environment");'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("")["TEST"],                        "foo");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.c++")["TEST"],              "foo:bar");'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.any")["TM_COMMENT_STYLE"],  "Base Environment");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("source.ruby")["TM_COMMENT_STYLE"], "Ruby Environment");'), (11, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("text.plain")["PATH"], "/usr/bin:/bin:/sbin");'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("text.tex")["PATH"],   "/usr/bin:/bin:/sbin:/usr/texbin");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text.plain")["PATH"], "/usr/bin:/bin:/sbin");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text.tex")["PATH"],   "/usr/bin:/bin:/sbin:/usr/texbin");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("text")["DialogPath"], jail.path("Bundles/Dialog.tmbundle/Support/bin"));'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text")["DialogPath"], jail.path("Bundles/Dialog.tmbundle/Support/bin"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("text")["DialogPath"], jail.path("Bundles/Dialog.tmbundle/Support/bin"));'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text")["DialogPath"], jail.path("Bundles/Dialog.tmbundle/Support/bin"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(bundles::environment("text")["DialogPath"], jail.path("Bundles/Dialog.tmbundle/Support/bin"));'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::scope_variables("text")["DialogPath"], jail.path("Bundles/Dialog.tmbundle/Support/bin"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-\t\tTS_ASSERT_EQUALS(lhs.rescan(path, "*", "*"), rhs.rescan(path, "*", "*"));'), (35, 2, u'-\t\tTS_ASSERT_EQUALS(lhs, fs::from_plist(plist::load(plistFile)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo bar$").does_match(dyn), true);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo bar dyn$").does_match(dyn), false);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo bar dyn").does_match(dyn), true);')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo bar$").does_match(dyn), true);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo bar dyn$").does_match(dyn), false);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo bar dyn").does_match(dyn), true);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo bar$").does_match(dyn), true);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo bar dyn$").does_match(dyn), false);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo bar dyn").does_match(dyn), true);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\tTS_ASSERT_EQUALS(lhs, fs::node_t(jail.path()));'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(lhs.rescan(path, "*", "*"), rhs.rescan(path, "*", "*"));')]
===========================================
===========================================
Total add: 6
Total del: 3
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\tTS_ASSERT_EQUALS(lhs, fs::node_t(jail.path()));'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(lhs.rescan(path, "*", "*"), rhs.rescan(path, "*", "*"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\tTS_ASSERT_EQUALS(lhs, fs::node_t(jail.path()));'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(lhs.rescan(path, "*", "*"), rhs.rescan(path, "*", "*"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (7, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (7, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (7, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (7, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (7, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (7, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content, patterns()), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\tTS_ASSERT(globalSelector.does_match(scope, &globalRank));'), (14, 1, u'+\t\tTS_ASSERT(phpSelector.does_match(scope, &phpRank));'), (15, 1, u'+\t\tTS_ASSERT_LESS_THAN(phpRank, globalRank);')]
===========================================
===========================================
Total add: 15
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\tTS_ASSERT(globalSelector.does_match(scope, &globalRank));'), (14, 1, u'+\t\tTS_ASSERT(phpSelector.does_match(scope, &phpRank));'), (15, 1, u'+\t\tTS_ASSERT_LESS_THAN(phpRank, globalRank);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\tTS_ASSERT(globalSelector.does_match(scope, &globalRank));'), (14, 1, u'+\t\tTS_ASSERT(phpSelector.does_match(scope, &phpRank));'), (15, 1, u'+\t\tTS_ASSERT_LESS_THAN(phpRank, globalRank);')]
===========================================
Class: class sw_update_tests : public CxxTest::TestSuite static key_chain_t key_chain () 	static std::string const& pubkey () 	{ 	
Class: class DownloadTests : public CxxTest::TestSuite void test_download () public: 	void test_download () 	struct my_filter : filter_t 		struct my_filter : filter_t 		{ 		
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(96, 2, u'-\t\tTS_ASSERT_EQUALS(network::download(network::request_t(url, &myFilter, NULL), &error), 200);'), (98, 1, u'+\tOAK_ASSERT_EQ(network::download(network::request_t(url, &myFilter, NULL), &error), 200);'), (115, 2, u'-\t\t\t\tTS_ASSERT_EQUALS(status, "HTTP/1.0 200 OK");'), (116, 2, u'-\t\t\t\tTS_ASSERT(headers.find("content-length") != headers.end());'), (117, 2, u'-\t\t\t\tTS_ASSERT_EQUALS(headers.find("content-length")->second, std::to_string(fileSize));'), (118, 2, u'-\t\t\t\tTS_ASSERT_EQUALS(body, std::string(fileContent, fileContent + fileSize));'), (121, 1, u'+\t\t\tOAK_ASSERT_EQ(status, "HTTP/1.0 200 OK");'), (122, 1, u'+\t\t\tOAK_ASSERT(headers.find("content-length") != headers.end());'), (123, 1, u'+\t\t\tOAK_ASSERT_EQ(headers.find("content-length")->second, std::to_string(fileSize));'), (124, 1, u'+\t\t\tOAK_ASSERT_EQ(body, std::string(fileContent, fileContent + fileSize));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\tOAK_ASSERT_EQ(storage[i], buffer[i]);'), (18, 2, u'-\tOAK_ASSERT_EQ(str, buffer);')]
===========================================
===========================================
Total add: 15
Total del: 10
Header: test_insert
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\tOAK_ASSERT_EQ(storage[i], buffer[i]);'), (18, 2, u'-\tOAK_ASSERT_EQ(str, buffer);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\tOAK_ASSERT_EQ(storage[i], buffer[i]);'), (18, 2, u'-\tOAK_ASSERT_EQ(str, buffer);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tASSERT(!_callbacks.empty())')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: namespace scm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tASSERT(!_callbacks.empty())')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tASSERT(!_callbacks.empty())')]
===========================================
Class:class CascadingTests : public CxxTest::TestSuite void test_scope_selector_ranking () public: 	void test_scope_selector_ranking () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("file")                            ).get("mySetting"), "1");'), (19, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("file"),                     "text").get("mySetting"), "2");'), (20, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("file"),              "text.markup").get("mySetting"), "3");'), (21, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("file"),         "text.markup.html").get("mySetting"), "4");'), (22, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(jail.path("file")                            ).get("mySetting"), "1");'), (23, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(jail.path("file"),                     "text").get("mySetting"), "2");'), (24, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(jail.path("file"),              "text.markup").get("mySetting"), "3");'), (25, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(jail.path("file"),         "text.markup.html").get("mySetting"), "4");'), (27, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/file")                        ).get("mySetting"), "5");'), (28, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/file"),                 "text").get("mySetting"), "2");'), (29, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/file"),          "text.markup").get("mySetting"), "6");'), (30, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/file"),     "text.markup.html").get("mySetting"), "4");'), (31, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(jail.path("foo/file")                        ).get("mySetting"), "5");'), (32, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(jail.path("foo/file"),                 "text").get("mySetting"), "2");'), (33, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(jail.path("foo/file"),          "text.markup").get("mySetting"), "6");'), (34, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(jail.path("foo/file"),     "text.markup.html").get("mySetting"), "4");'), (36, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/bar/file")                    ).get("mySetting"), "5");'), (37, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/bar/file"),             "text").get("mySetting"), "7");'), (38, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/bar/file"),      "text.markup").get("mySetting"), "6");'), (39, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/bar/file"), "text.markup.html").get("mySetting"), "8");'), (42, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(jail.path("foo/bar/file")                    ).get("mySetting"), "5");'), (43, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(jail.path("foo/bar/file"),             "text").get("mySetting"), "7");'), (44, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(jail.path("foo/bar/file"),      "text.markup").get("mySetting"), "6");'), (45, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(jail.path("foo/bar/file"), "text.markup.html").get("mySetting"), "8");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(                                ).get("testKey_1", "unset"),   "set");'), (37, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.md"                 ).get("testKey_1", "unset"),   "set");'), (38, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.txt"                ).get("testKey_1", "unset"),   "set");'), (39, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text.plain"   ).get("testKey_1", "unset"),   "set");'), (40, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text"         ).get("testKey_1", "unset"),   "set");'), (41, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source.c"     ).get("testKey_1", "unset"),   "set");'), (42, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source"       ).get("testKey_1", "unset"),   "set");'), (43, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr.untitled").get("testKey_1", "unset"),   "set");'), (44, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr"         ).get("testKey_1", "unset"),   "set");'), (45, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(                                ).get("testKey_1", "unset"),   "set");'), (46, 1, u'+\tOAK_ASSERT_EQ(settings_for_path("/tmp/dummy.md"                 ).get("testKey_1", "unset"),   "set");'), (47, 1, u'+\tOAK_ASSERT_EQ(settings_for_path("/tmp/dummy.txt"                ).get("testKey_1", "unset"),   "set");'), (48, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "text.plain"   ).get("testKey_1", "unset"),   "set");'), (49, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "text"         ).get("testKey_1", "unset"),   "set");'), (50, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "source.c"     ).get("testKey_1", "unset"),   "set");'), (51, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "source"       ).get("testKey_1", "unset"),   "set");'), (52, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "attr.untitled").get("testKey_1", "unset"),   "set");'), (53, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "attr"         ).get("testKey_1", "unset"),   "set");'), (55, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(                                ).get("testKey_2", "unset"), "unset");'), (56, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.md"                 ).get("testKey_2", "unset"), "unset");'), (57, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.txt"                ).get("testKey_2", "unset"), "unset");'), (58, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text.plain"   ).get("testKey_2", "unset"), "unset");'), (59, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text"         ).get("testKey_2", "unset"), "unset");'), (60, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source.c"     ).get("testKey_2", "unset"), "unset");'), (61, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source"       ).get("testKey_2", "unset"), "unset");'), (62, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr.untitled").get("testKey_2", "unset"),   "set");'), (63, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr"         ).get("testKey_2", "unset"), "unset");'), (64, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(                                ).get("testKey_2", "unset"), "unset");'), (65, 1, u'+\tOAK_ASSERT_EQ(settings_for_path("/tmp/dummy.md"                 ).get("testKey_2", "unset"), "unset");'), (66, 1, u'+\tOAK_ASSERT_EQ(settings_for_path("/tmp/dummy.txt"                ).get("testKey_2", "unset"), "unset");'), (67, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "text.plain"   ).get("testKey_2", "unset"), "unset");'), (68, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "text"         ).get("testKey_2", "unset"), "unset");'), (69, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "source.c"     ).get("testKey_2", "unset"), "unset");'), (70, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "source"       ).get("testKey_2", "unset"), "unset");'), (71, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "attr.untitled").get("testKey_2", "unset"),   "set");'), (72, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "attr"         ).get("testKey_2", "unset"), "unset");'), (74, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(                                ).get("testKey_3", "unset"), "unset");'), (75, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.md"                 ).get("testKey_3", "unset"),   "set");'), (76, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.txt"                ).get("testKey_3", "unset"), "unset");'), (77, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text.plain"   ).get("testKey_3", "unset"), "unset");'), (78, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text"         ).get("testKey_3", "unset"), "unset");'), (79, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source.c"     ).get("testKey_3", "unset"), "unset");'), (80, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source"       ).get("testKey_3", "unset"), "unset");'), (81, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr.untitled").get("testKey_3", "unset"), "unset");'), (82, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr"         ).get("testKey_3", "unset"), "unset");'), (83, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(                                ).get("testKey_3", "unset"), "unset");'), (84, 1, u'+\tOAK_ASSERT_EQ(settings_for_path("/tmp/dummy.md"                 ).get("testKey_3", "unset"),   "set");'), (85, 1, u'+\tOAK_ASSERT_EQ(settings_for_path("/tmp/dummy.txt"                ).get("testKey_3", "unset"), "unset");'), (86, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "text.plain"   ).get("testKey_3", "unset"), "unset");'), (87, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "text"         ).get("testKey_3", "unset"), "unset");'), (88, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "source.c"     ).get("testKey_3", "unset"), "unset");'), (89, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "source"       ).get("testKey_3", "unset"), "unset");'), (90, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "attr.untitled").get("testKey_3", "unset"), "unset");'), (91, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "attr"         ).get("testKey_3", "unset"), "unset");'), (93, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(                                ).get("testKey_4", "unset"),   "set");'), (94, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path("dummy.md"                      ).get("testKey_4", "unset"),   "set");'), (95, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path("dummy.txt"                     ).get("testKey_4", "unset"),   "set");'), (96, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text.plain"   ).get("testKey_4", "unset"),   "set");'), (97, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text"         ).get("testKey_4", "unset"),   "set");'), (98, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source.c"     ).get("testKey_4", "unset"), "other");'), (99, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source"       ).get("testKey_4", "unset"), "other");'), (100, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr.untitled").get("testKey_4", "unset"),   "set");'), (101, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr"         ).get("testKey_4", "unset"),   "set");'), (102, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(                                ).get("testKey_4", "unset"),   "set");'), (103, 1, u'+\tOAK_ASSERT_EQ(settings_for_path("dummy.md"                      ).get("testKey_4", "unset"),   "set");'), (104, 1, u'+\tOAK_ASSERT_EQ(settings_for_path("dummy.txt"                     ).get("testKey_4", "unset"),   "set");'), (105, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "text.plain"   ).get("testKey_4", "unset"),   "set");'), (106, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "text"         ).get("testKey_4", "unset"),   "set");'), (107, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "source.c"     ).get("testKey_4", "unset"), "other");'), (108, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "source"       ).get("testKey_4", "unset"), "other");'), (109, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "attr.untitled").get("testKey_4", "unset"),   "set");'), (110, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(NULL_STR,        "attr"         ).get("testKey_4", "unset"),   "set");'), (112, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path(                                ).get("testKey_5", "unset"),   "set");'), (113, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.md"                 ).get("testKey_5", "unset"),   "set");'), (114, 2, u'-\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.txt"                ).get("testKey_5", "unset"), "other");'), (117, 1, u'+\tOAK_ASSERT_EQ(settings_for_path(                                ).get("testKey_5", "unset"),   "set");'), (118, 1, u'+\tOAK_ASSERT_EQ(settings_for_path("/tmp/dummy.md"                 ).get("testKey_5", "unset"),   "set");'), (119, 1, u'+\tOAK_ASSERT_EQ(settings_for_path("/tmp/dummy.txt"                ).get("testKey_5", "unset"), "other");')]
===========================================
Class:class SettingsTests : public CxxTest::TestSuite void test_settings () public: 	void test_settings () 	{ 	
Class:class TrackFileTests : public CxxTest::TestSuite static bool test_range (track_paths_t& tracker, std::vector<std::string> const& paths, size_t first, size_t last) 	static bool test_range (track_paths_t& tracker, std::vector<std::string> const& paths, size_t first, size_t last) 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_MASSERT_EQ("\\n\\n  Unable to test mercurial driver (hg executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install mercurial\\n", system("which -s hg"), 0);'), (4, 1, u'+\tOAK_MASSERT("\\n\\n  Unable to test mercurial driver (hg executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install mercurial\\n", hg != NULL_STR);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: test_basic_status
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_MASSERT_EQ("\\n\\n  Unable to test mercurial driver (hg executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install mercurial\\n", system("which -s hg"), 0);'), (4, 1, u'+\tOAK_MASSERT("\\n\\n  Unable to test mercurial driver (hg executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install mercurial\\n", hg != NULL_STR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_MASSERT_EQ("\\n\\n  Unable to test mercurial driver (hg executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install mercurial\\n", system("which -s hg"), 0);'), (4, 1, u'+\tOAK_MASSERT("\\n\\n  Unable to test mercurial driver (hg executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install mercurial\\n", hg != NULL_STR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\tOAK_MASSERT_EQ("\\n\\n  Unable to test subversion driver (svn executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install subversion\\n", system("which -s svn"), 0);'), (14, 1, u'+\tOAK_MASSERT("\\n\\n  Unable to test subversion driver (svn executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install subversion\\n", svn != NULL_STR);')]
===========================================
===========================================
Total add: 2
Total del: 11
Header: test_basic_status
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\tOAK_MASSERT_EQ("\\n\\n  Unable to test subversion driver (svn executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install subversion\\n", system("which -s svn"), 0);'), (14, 1, u'+\tOAK_MASSERT("\\n\\n  Unable to test subversion driver (svn executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install subversion\\n", svn != NULL_STR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\tOAK_MASSERT_EQ("\\n\\n  Unable to test subversion driver (svn executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install subversion\\n", system("which -s svn"), 0);'), (14, 1, u'+\tOAK_MASSERT("\\n\\n  Unable to test subversion driver (svn executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install subversion\\n", svn != NULL_STR);')]
===========================================
Class:class ConnectionTests : public CxxTest::TestSuite void test_connection () public: 	void test_connection () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-\t\t\tTS_ASSERT_EQUALS(greeting, "welcome!");'), (26, 2, u'-\t\t\tTS_ASSERT_EQUALS(version, 42);'), (37, 1, u'+\t\tOAK_ASSERT_EQ(greeting, "welcome!");'), (38, 1, u'+\t\tOAK_ASSERT_EQ(version, 42);'), (52, 2, u'-\t\t\tTS_ASSERT_EQUALS(msg, "I am bored");'), (53, 2, u'-\t\t\tTS_ASSERT_EQUALS(cmd, "quit");'), (54, 1, u'+\t\tOAK_ASSERT_EQ(msg, "I am bored");'), (55, 1, u'+\t\tOAK_ASSERT_EQ(cmd, "quit");')]
===========================================
Class:class IndexedMapTests : public CxxTest::TestSuite void test_basic () public: 	void test_basic () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-\t\tTS_ASSERT_EQUALS(tmp.size(), sorted.size());'), (30, 2, u'-\t\tTS_ASSERT(std::equal(tmp.begin(), tmp.end(), sorted.begin()));'), (33, 1, u'+\tOAK_ASSERT_EQ(tmp.size(), sorted.size());'), (34, 1, u'+\tOAK_ASSERT(std::equal(tmp.begin(), tmp.end(), sorted.begin()));'), (45, 2, u'-\t\t\tTS_ASSERT_EQUALS(tmp.size(), sorted.size());'), (46, 2, u'-\t\t\tTS_ASSERT(std::equal(tmp.begin(), tmp.end(), sorted.begin()));')]
===========================================
===========================================
Total add: 18
Total del: 30
Header: expected
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-\t\tTS_ASSERT_EQUALS(tmp.size(), sorted.size());'), (30, 2, u'-\t\tTS_ASSERT(std::equal(tmp.begin(), tmp.end(), sorted.begin()));'), (33, 1, u'+\tOAK_ASSERT_EQ(tmp.size(), sorted.size());'), (34, 1, u'+\tOAK_ASSERT(std::equal(tmp.begin(), tmp.end(), sorted.begin()));'), (45, 2, u'-\t\t\tTS_ASSERT_EQUALS(tmp.size(), sorted.size());'), (46, 2, u'-\t\t\tTS_ASSERT(std::equal(tmp.begin(), tmp.end(), sorted.begin()));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-\t\tTS_ASSERT_EQUALS(tmp.size(), sorted.size());'), (30, 2, u'-\t\tTS_ASSERT(std::equal(tmp.begin(), tmp.end(), sorted.begin()));'), (33, 1, u'+\tOAK_ASSERT_EQ(tmp.size(), sorted.size());'), (34, 1, u'+\tOAK_ASSERT(std::equal(tmp.begin(), tmp.end(), sorted.begin()));'), (45, 2, u'-\t\t\tTS_ASSERT_EQUALS(tmp.size(), sorted.size());'), (46, 2, u'-\t\t\tTS_ASSERT(std::equal(tmp.begin(), tmp.end(), sorted.begin()));')]
===========================================
Class:class StorageTests : public CxxTest::TestSuite struct key_t 	static std::string format_number (size_t i) 	{ 	
Class:class RectTests : public CxxTest::TestSuite static void set (std::vector<std::string>& canvas, CGRect const& r, char m = 'x') 	static void set (std::vector<std::string>& canvas, CGRect const& r, char m = 'x') 	for(size_t y = (size_t)CGRectGetMinY(r); y < (size_t)CGRectGetMaxY(r); ++y) 		for(size_t y = (size_t)CGRectGetMinY(r); y < (size_t)CGRectGetMaxY(r); ++y) 		{ 		
Class:class AttributesTests : public CxxTest::TestSuite void test_attributes () public: 	void test_attributes () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-\t\tTS_ASSERT_EQUALS(path::get_attr(file, "foo"), "bar");'), (22, 2, u'-\t\tTS_ASSERT_EQUALS(path::get_attr(file, "buz"), "jazz");'), (23, 1, u'+\tOAK_ASSERT_EQ(path::get_attr(file, "foo"), "bar");'), (24, 1, u'+\tOAK_ASSERT_EQ(path::get_attr(file, "buz"), "jazz");'), (35, 2, u'-\t\tTS_ASSERT_EQUALS(path::get_attr(file, "foo"), NULL_STR);'), (36, 2, u'-\t\tTS_ASSERT_EQUALS(path::get_attr(file, "buz"), "jazz");'), (37, 2, u'-\t\tTS_ASSERT_EQUALS(path::get_attr(file, "new"), "value");'), (38, 1, u'+\tOAK_ASSERT_EQ(path::get_attr(file, "foo"), NULL_STR);'), (39, 1, u'+\tOAK_ASSERT_EQ(path::get_attr(file, "buz"), "jazz");'), (40, 1, u'+\tOAK_ASSERT_EQ(path::get_attr(file, "new"), "value");'), (42, 2, u'-\t\tTS_ASSERT_EQUALS(path::attributes(file).size(), 2);'), (43, 1, u'+\tOAK_ASSERT_EQ(path::attributes(file).size(), 2);'), (45, 2, u'-\t\tTS_ASSERT_EQUALS(path::content(file), "\xc2\xabsome content\xc2\xbb");'), (48, 1, u'+\tOAK_ASSERT_EQ(path::content(file), "\xc2\xabsome content\xc2\xbb");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tTS_ASSERT_EQUALS(path::display_name(lPath), title);'), (3, 1, u'+\tOAK_ASSERT_EQ(path::display_name(lPath), title);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: make_localised_dir
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tTS_ASSERT_EQUALS(path::display_name(lPath), title);'), (3, 1, u'+\tOAK_ASSERT_EQ(path::display_name(lPath), title);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tTS_ASSERT_EQUALS(path::display_name(lPath), title);'), (3, 1, u'+\tOAK_ASSERT_EQ(path::display_name(lPath), title);')]
===========================================
Class:class DisambiguatePathsTests : public CxxTest::TestSuite template <size_t N> void run_test (std::string const (&path_list)[N], size_t expected_parents) 	template <size_t N> void run_test (std::string const (&path_list)[N], size_t expected_parents) 	{ 	
Class:class EventsTests : public CxxTest::TestSuite struct callback_t : fs::event_callback_t 	struct callback_t : fs::event_callback_t 	callback_t (test::jail_t const& jail, bool log = false) : _jail(jail), _in_replay(false), _log(log) { } 	callback_t (test::jail_t const& jail, bool log = false) : _jail(jail), _in_replay(false), _log(log) 
Class:class IdentifierTests : public CxxTest::TestSuite void test_identifier () public: 	void test_identifier () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t\tTS_ASSERT_EQUALS(path::exists(jail.path("test.txt")), true);'), (17, 2, u'-\t\tTS_ASSERT_EQUALS(path::exists(jail.path("link.txt")), true);'), (18, 1, u'+\tOAK_ASSERT_EQ(path::exists(jail.path("test.txt")), true);'), (19, 1, u'+\tOAK_ASSERT_EQ(path::exists(jail.path("link.txt")), true);'), (32, 2, u'-\t\tTS_ASSERT_EQUALS(id_1, id_3);'), (33, 2, u'-\t\tTS_ASSERT_EQUALS(id_1, id_5);'), (34, 2, u'-\t\tTS_ASSERT_DIFFERS(id_1, id_2);'), (35, 2, u'-\t\tTS_ASSERT_EQUALS(id_2, id_4);'), (36, 2, u'-\t\tTS_ASSERT_DIFFERS(id_3, id_4);'), (39, 1, u'+\tOAK_ASSERT_EQ(id_1, id_3);'), (40, 1, u'+\tOAK_ASSERT_EQ(id_1, id_5);'), (41, 1, u'+\tOAK_ASSERT_NE(id_1, id_2);'), (42, 1, u'+\tOAK_ASSERT_EQ(id_2, id_4);'), (43, 1, u'+\tOAK_ASSERT_NE(id_3, id_4);')]
===========================================
Class:class path_tests : public CxxTest::TestSuite void test_normalize () public: 	void test_normalize () 	{ 	
Class:class ResolveTests : public CxxTest::TestSuite void test_resolve_symlinks () public: 	void test_resolve_symlinks () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_1")),      jail.path("file"));'), (47, 2, u'-\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_2")),      jail.path("dir"));'), (48, 2, u'-\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_3")),      jail.path("dir/foo"));'), (49, 2, u'-\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_4")),      jail.path("dir/bar"));'), (50, 2, u'-\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_5")),      jail.path("dir/foo/bar"));'), (51, 2, u'-\t\tTS_ASSERT_EQUALS(resolve(jail.path("dir/link_6")),  jail.path("file"));'), (52, 2, u'-\t\tTS_ASSERT_EQUALS(resolve(jail.path("dir/link_7")),  jail.path("dir"));'), (53, 2, u'-\t\tTS_ASSERT_EQUALS(resolve(jail.path("dir/link_8")),  jail.path("dir/foo"));'), (54, 2, u'-\t\tTS_ASSERT_EQUALS(resolve(jail.path("dir/link_9")),  jail.path("link_2/link_9"));'), (55, 2, u'-\t\tTS_ASSERT_EQUALS(resolve(jail.path("dir/link_10")), jail.path("link_2/link_9"));'), (56, 2, u'-\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_11")),     jail.path("missing"));'), (57, 2, u'-\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_12")),     jail.path("dir/missing"));'), (58, 2, u'-\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_13")),     jail.path("dir/missing"));'), (60, 1, u'+\tOAK_ASSERT_EQ(resolve(jail.path("link_1")),      jail.path("file"));'), (61, 1, u'+\tOAK_ASSERT_EQ(resolve(jail.path("link_2")),      jail.path("dir"));'), (62, 1, u'+\tOAK_ASSERT_EQ(resolve(jail.path("link_3")),      jail.path("dir/foo"));'), (63, 1, u'+\tOAK_ASSERT_EQ(resolve(jail.path("link_4")),      jail.path("dir/bar"));'), (64, 1, u'+\tOAK_ASSERT_EQ(resolve(jail.path("link_5")),      jail.path("dir/foo/bar"));'), (65, 1, u'+\tOAK_ASSERT_EQ(resolve(jail.path("dir/link_6")),  jail.path("file"));'), (66, 1, u'+\tOAK_ASSERT_EQ(resolve(jail.path("dir/link_7")),  jail.path("dir"));'), (67, 1, u'+\tOAK_ASSERT_EQ(resolve(jail.path("dir/link_8")),  jail.path("dir/foo"));'), (68, 1, u'+\tOAK_ASSERT_EQ(resolve(jail.path("dir/link_9")),  jail.path("link_2/link_9"));'), (69, 1, u'+\tOAK_ASSERT_EQ(resolve(jail.path("dir/link_10")), jail.path("link_2/link_9"));'), (70, 1, u'+\tOAK_ASSERT_EQ(resolve(jail.path("link_11")),     jail.path("missing"));'), (71, 1, u'+\tOAK_ASSERT_EQ(resolve(jail.path("link_12")),     jail.path("dir/missing"));'), (72, 1, u'+\tOAK_ASSERT_EQ(resolve(jail.path("link_13")),     jail.path("dir/missing"));'), (117, 2, u'-\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_1")),      jail.path("file"));'), (118, 2, u'-\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_2")),      jail.path("dir"));'), (119, 2, u'-\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_3")),      jail.path("dir/foo"));'), (120, 2, u'-\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_4")),      jail.path("link_2/bar"));'), (121, 2, u'-\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_5")),      jail.path("link_3/bar"));'), (122, 2, u'-\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("dir/link_6")),  jail.path("file"));'), (123, 2, u'-\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("dir/link_7")),  jail.path("dir"));'), (124, 2, u'-\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("dir/link_8")),  jail.path("link_2/foo"));'), (125, 2, u'-\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("dir/link_9")),  jail.path("link_2/link_9"));'), (126, 2, u'-\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("dir/link_10")), jail.path("link_2/link_9"));'), (127, 2, u'-\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_11")),     jail.path("missing"));'), (128, 2, u'-\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_12")),     jail.path("dir/missing"));'), (129, 2, u'-\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_13")),     jail.path("link_2/missing"));'), (132, 1, u'+\tOAK_ASSERT_EQ(resolve_head(jail.path("link_1")),      jail.path("file"));'), (133, 1, u'+\tOAK_ASSERT_EQ(resolve_head(jail.path("link_2")),      jail.path("dir"));'), (134, 1, u'+\tOAK_ASSERT_EQ(resolve_head(jail.path("link_3")),      jail.path("dir/foo"));'), (135, 1, u'+\tOAK_ASSERT_EQ(resolve_head(jail.path("link_4")),      jail.path("link_2/bar"));'), (136, 1, u'+\tOAK_ASSERT_EQ(resolve_head(jail.path("link_5")),      jail.path("link_3/bar"));'), (137, 1, u'+\tOAK_ASSERT_EQ(resolve_head(jail.path("dir/link_6")),  jail.path("file"));'), (138, 1, u'+\tOAK_ASSERT_EQ(resolve_head(jail.path("dir/link_7")),  jail.path("dir"));'), (139, 1, u'+\tOAK_ASSERT_EQ(resolve_head(jail.path("dir/link_8")),  jail.path("link_2/foo"));'), (140, 1, u'+\tOAK_ASSERT_EQ(resolve_head(jail.path("dir/link_9")),  jail.path("link_2/link_9"));'), (141, 1, u'+\tOAK_ASSERT_EQ(resolve_head(jail.path("dir/link_10")), jail.path("link_2/link_9"));'), (142, 1, u'+\tOAK_ASSERT_EQ(resolve_head(jail.path("link_11")),     jail.path("missing"));'), (143, 1, u'+\tOAK_ASSERT_EQ(resolve_head(jail.path("link_12")),     jail.path("dir/missing"));'), (144, 1, u'+\tOAK_ASSERT_EQ(resolve_head(jail.path("link_13")),     jail.path("link_2/missing"));')]
===========================================
Class:class unique_tests : public CxxTest::TestSuite void touch (std::string const& path) 	void touch (std::string const& path) 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo.txt"), " copy"),          jail.path("foo.txt"));'), (22, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo.txt"), " copy"),          jail.path("foo copy.txt"));'), (24, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo.txt"), " copy"),          jail.path("foo copy 2.txt"));'), (26, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo.txt"), " copy"),          jail.path("foo copy 3.txt"));'), (28, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo copy.txt"), " copy"),     jail.path("foo copy 4.txt"));'), (29, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo copy 2.txt"), " copy"),   jail.path("foo copy 4.txt"));'), (30, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo copy 3.txt"), " copy"),   jail.path("foo copy 4.txt"));'), (31, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo copy 4.txt"), " copy"),   jail.path("foo copy 4.txt"));'), (32, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("foo.txt"), " copy"),          jail.path("foo.txt"));'), (34, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("foo.txt"), " copy"),          jail.path("foo copy.txt"));'), (36, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("foo.txt"), " copy"),          jail.path("foo copy 2.txt"));'), (38, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("foo.txt"), " copy"),          jail.path("foo copy 3.txt"));'), (40, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("foo copy.txt"), " copy"),     jail.path("foo copy 4.txt"));'), (41, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("foo copy 2.txt"), " copy"),   jail.path("foo copy 4.txt"));'), (42, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("foo copy 3.txt"), " copy"),   jail.path("foo copy 4.txt"));'), (43, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("foo copy 4.txt"), " copy"),   jail.path("foo copy 4.txt"));'), (45, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("untitled folder")),           jail.path("untitled folder"));'), (47, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("untitled folder")),           jail.path("untitled folder 2"));'), (49, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("untitled folder")),           jail.path("untitled folder 3"));'), (50, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("untitled folder 2")),         jail.path("untitled folder 3"));'), (51, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("untitled folder")),           jail.path("untitled folder"));'), (53, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("untitled folder")),           jail.path("untitled folder 2"));'), (55, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("untitled folder")),           jail.path("untitled folder 3"));'), (56, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("untitled folder 2")),         jail.path("untitled folder 3"));'), (58, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("bar.txt")),                   jail.path("bar.txt"));'), (60, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("bar.txt")),                   jail.path("bar 2.txt"));'), (62, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("bar.txt")),                   jail.path("bar 3.txt"));'), (64, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("bar.txt")),                   jail.path("bar 4.txt"));'), (65, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("bar 2.txt")),                 jail.path("bar 4.txt"));'), (66, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("bar 3.txt")),                 jail.path("bar 4.txt"));'), (68, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("bar.txt")),                   jail.path("bar.txt"));'), (70, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("bar.txt")),                   jail.path("bar 2.txt"));'), (72, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("bar.txt")),                   jail.path("bar 3.txt"));'), (74, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("bar.txt")),                   jail.path("bar 4.txt"));'), (75, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("bar 2.txt")),                 jail.path("bar 4.txt"));'), (76, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("bar 3.txt")),                 jail.path("bar 4.txt"));'), (83, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path("abcd.txt"), " copy"), jail.path("abcd copy.txt"));'), (88, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path("abcd.txt"), " copy"), jail.path("abcd copy.txt"));'), (90, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path(" copy.txt"), " copy"), jail.path(" copy.txt"));'), (92, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path(" copy.txt"), " copy"), jail.path(" copy copy.txt"));'), (94, 2, u'-\t\tTS_ASSERT_EQUALS(path::unique(jail.path(" copy.txt"), " copy"), jail.path(" copy copy 2.txt"));'), (97, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path(" copy.txt"), " copy"), jail.path(" copy.txt"));'), (99, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path(" copy.txt"), " copy"), jail.path(" copy copy.txt"));'), (101, 1, u'+\tOAK_ASSERT_EQ(path::unique(jail.path(" copy.txt"), " copy"), jail.path(" copy copy 2.txt"));')]
===========================================
Class:class XattrTests : public CxxTest::TestSuite void test_xattr () public: 	void test_xattr () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t\tTS_ASSERT_EQUALS(statfs(path::home().c_str(), &buf), 0);'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(getattrlist(buf.f_mntonname, &(attrlist){ ATTR_BIT_MAP_COUNT, 0, 0, ATTR_VOL_INFO|ATTR_VOL_CAPABILITIES, 0, 0, 0 }, &attrBuf, sizeof(attrBuf), 0), 0);'), (13, 2, u'-\t\tTS_ASSERT_EQUALS(attrBuf.length, sizeof(attrBuf));'), (14, 2, u'-\t\tTS_ASSERT_EQUALS(attrBuf.attr.capabilities[VOL_CAPABILITIES_INTERFACES] & VOL_CAP_INT_EXCHANGEDATA, VOL_CAP_INT_EXCHANGEDATA);'), (20, 1, u'+\tOAK_ASSERT_EQ(statfs(path::home().c_str(), &buf), 0);'), (21, 1, u'+\tOAK_ASSERT_EQ(getattrlist(buf.f_mntonname, &(attrlist){ ATTR_BIT_MAP_COUNT, 0, 0, ATTR_VOL_INFO|ATTR_VOL_CAPABILITIES, 0, 0, 0 }, &attrBuf, sizeof(attrBuf), 0), 0);'), (22, 1, u'+\tOAK_ASSERT_EQ(attrBuf.length, sizeof(attrBuf));'), (23, 1, u'+\tOAK_ASSERT_EQ(attrBuf.attr.capabilities[VOL_CAPABILITIES_INTERFACES] & VOL_CAP_INT_EXCHANGEDATA, VOL_CAP_INT_EXCHANGEDATA);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ(scm::ng::info(jail.path()) ? true : false, false);'), (3, 1, u'+\tOAK_ASSERT_EQ(scm::info(jail.path()) ? true : false, false);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_disabling_scm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ(scm::ng::info(jail.path()) ? true : false, false);'), (3, 1, u'+\tOAK_ASSERT_EQ(scm::info(jail.path()) ? true : false, false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tOAK_ASSERT_EQ(scm::ng::info(jail.path()) ? true : false, false);'), (3, 1, u'+\tOAK_ASSERT_EQ(scm::info(jail.path()) ? true : false, false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tASSERTF(path::is_directory(_wc_path) || !path::exists(_wc_path) || _wc_path == NULL_STR, "Path: %s\\n", _wc_path.c_str());')]
===========================================
===========================================
Total add: 20
Total del: 21
Header: namespace scm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tASSERTF(path::is_directory(_wc_path) || !path::exists(_wc_path) || _wc_path == NULL_STR, "Path: %s\\n", _wc_path.c_str());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tASSERTF(path::is_directory(_wc_path) || !path::exists(_wc_path) || _wc_path == NULL_STR, "Path: %s\\n", _wc_path.c_str());')]
===========================================
Class:class FsTreeTests : public CxxTest::TestSuite void test_fs_tree () public: 	void test_fs_tree () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\tTS_ASSERT_EQUALS(fs::snapshot_t(path), fs::snapshot_t(path));'), (11, 1, u'+\tOAK_ASSERT_EQ(fs::snapshot_t(path), fs::snapshot_t(path));'), (15, 2, u'-\t\tTS_ASSERT_DIFFERS(jailSnapshot, fs::snapshot_t(path));'), (16, 2, u'-\t\tTS_ASSERT_EQUALS(jailSnapshot, fs::snapshot_t(jail.path()));'), (18, 2, u'-\t\tTS_ASSERT_DIFFERS(jailSnapshot, fs::snapshot_t(jail.path()));'), (23, 1, u'+\tOAK_ASSERT_NE(jailSnapshot, fs::snapshot_t(path));'), (24, 1, u'+\tOAK_ASSERT_EQ(jailSnapshot, fs::snapshot_t(jail.path()));'), (26, 1, u'+\tOAK_ASSERT_NE(jailSnapshot, fs::snapshot_t(jail.path()));')]
===========================================
Class: class git_tests : public CxxTest::TestSuite { 
Class:class hg_tests : public CxxTest::TestSuite void test_basic_status () public: 	void test_basic_status () 	{ 	
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\tOAK_MASSERT_EQ("\\n\\n  Unable to test mercurial driver (hg executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install mercurial\\n", system("which -s hg"), 0);'), (13, 2, u'-\t\tTSM_ASSERT_EQUALS("\\n\\n  Unable to test mercurial driver (hg executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install mercurial\\n", system("which -s hg"), 0);'), (33, 2, u'-\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_NAME"],   "hg");'), (34, 2, u'-\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_BRANCH"], "default");'), (36, 1, u'+\t\tOAK_ASSERT_EQ(vars["TM_SCM_NAME"],   "hg");'), (37, 1, u'+\t\tOAK_ASSERT_EQ(vars["TM_SCM_BRANCH"], "default");'), (39, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("clean.txt")),     scm::status::none);'), (40, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("ignored.txt")),   scm::status::ignored);'), (41, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("modified.txt")),  scm::status::modified);'), (42, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("added.txt")),     scm::status::added);'), (43, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("missing.txt")),   scm::status::deleted);'), (44, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("untracked.txt")), scm::status::unversioned);'), (50, 1, u'+\t\tOAK_ASSERT_EQ(info->status(jail.path("clean.txt")),     scm::status::none);'), (51, 1, u'+\t\tOAK_ASSERT_EQ(info->status(jail.path("ignored.txt")),   scm::status::ignored);'), (52, 1, u'+\t\tOAK_ASSERT_EQ(info->status(jail.path("modified.txt")),  scm::status::modified);'), (53, 1, u'+\t\tOAK_ASSERT_EQ(info->status(jail.path("added.txt")),     scm::status::added);'), (54, 1, u'+\t\tOAK_ASSERT_EQ(info->status(jail.path("missing.txt")),   scm::status::deleted);'), (55, 1, u'+\t\tOAK_ASSERT_EQ(info->status(jail.path("untracked.txt")), scm::status::unversioned);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+\tOAK_MASSERT_EQ("\\n\\n  Unable to test subversion driver (svn executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install subversion\\n", system("which -s svn"), 0);'), (36, 1, u'+\t\tOAK_ASSERT_EQ(vars["TM_SCM_NAME"],   "svn");'), (37, 1, u'+\t\tOAK_ASSERT_EQ(vars["TM_SCM_BRANCH"], expectedBranch);'), (39, 1, u'+\t\tOAK_ASSERT_EQ(info->status(jail.path(path::join(wcName, "clean.txt"))),     scm::status::none);'), (40, 1, u'+\t\tOAK_ASSERT_EQ(info->status(jail.path(path::join(wcName, "ignored.txt"))),   scm::status::ignored);'), (41, 1, u'+\t\tOAK_ASSERT_EQ(info->status(jail.path(path::join(wcName, "modified.txt"))),  scm::status::modified);'), (42, 1, u'+\t\tOAK_ASSERT_EQ(info->status(jail.path(path::join(wcName, "added.txt"))),     scm::status::added);'), (43, 1, u'+\t\tOAK_ASSERT_EQ(info->status(jail.path(path::join(wcName, "missing.txt"))),   scm::status::deleted);'), (44, 1, u'+\t\tOAK_ASSERT_EQ(info->status(jail.path(path::join(wcName, "untracked.txt"))), scm::status::unversioned);'), (60, 2, u'-\t\tTSM_ASSERT_EQUALS("\\n\\n  Unable to test subversion driver (svn executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install subversion\\n", system("which -s svn"), 0);'), (77, 2, u'-\t\t\tTS_ASSERT_EQUALS(expectedBranch, info->branch());'), (80, 2, u'-\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_NAME"],   "svn");'), (81, 2, u'-\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_BRANCH"], expectedBranch);'), (83, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "clean.txt"))),     scm::status::none);'), (84, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "ignored.txt"))),   scm::status::ignored);'), (85, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "modified.txt"))),  scm::status::modified);'), (86, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "added.txt"))),     scm::status::added);'), (87, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "missing.txt"))),   scm::status::deleted);'), (88, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "untracked.txt"))), scm::status::unversioned);'), (97, 2, u'-\t\tTS_ASSERT_EQUALS(info ? true : false, false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.divider),               "#666666FF");'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionBorder),       "#666666FF");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.foreground),            "#808080FF");'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.background),            "#212121FF");'), (6, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.icons),                 "#808080FF");'), (7, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.iconsHover),            "#808080FF");'), (8, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.iconsPressed),          "#808080FF");'), (9, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (10, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (11, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (13, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIconsPressed), "#F2F2F2FF");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.divider),               "#666666FF");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBorder),       "#666666FF");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.foreground),            "#808080FF");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.background),            "#212121FF");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.icons),                 "#808080FF");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsHover),            "#808080FF");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsPressed),          "#808080FF");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsPressed), "#F2F2F2FF");')]
===========================================
===========================================
Total add: 12
Total del: 12
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.divider),               "#666666FF");'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionBorder),       "#666666FF");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.foreground),            "#808080FF");'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.background),            "#212121FF");'), (6, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.icons),                 "#808080FF");'), (7, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.iconsHover),            "#808080FF");'), (8, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.iconsPressed),          "#808080FF");'), (9, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (10, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (11, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (13, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIconsPressed), "#F2F2F2FF");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.divider),               "#666666FF");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBorder),       "#666666FF");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.foreground),            "#808080FF");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.background),            "#212121FF");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.icons),                 "#808080FF");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsHover),            "#808080FF");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsPressed),          "#808080FF");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsPressed), "#F2F2F2FF");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.divider),               "#666666FF");'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionBorder),       "#666666FF");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.foreground),            "#808080FF");'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.background),            "#212121FF");'), (6, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.icons),                 "#808080FF");'), (7, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.iconsHover),            "#808080FF");'), (8, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.iconsPressed),          "#808080FF");'), (9, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (10, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (11, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (13, 2, u'-\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIconsPressed), "#F2F2F2FF");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.divider),               "#666666FF");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBorder),       "#666666FF");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.foreground),            "#808080FF");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.background),            "#212121FF");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.icons),                 "#808080FF");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsHover),            "#808080FF");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsPressed),          "#808080FF");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsPressed), "#F2F2F2FF");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.divider),               "#666666FF");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBorder),       "#666666FF");'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.foreground),            "#808080FF");'), (6, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.background),            "#212121FF");'), (7, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.icons),                 "#808080FF");'), (8, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsHover),            "#808080FF");'), (9, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsPressed),          "#808080FF");'), (10, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (11, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (13, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (14, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsPressed), "#F2F2F2FF");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.divider),               "#666666FF");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionBorder),       "#666666FF");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.foreground),            "#808080FF");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.background),            "#212121FF");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.icons),                 "#808080FF");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.iconsHover),            "#808080FF");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.iconsPressed),          "#808080FF");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIconsPressed), "#F2F2F2FF");')]
===========================================
===========================================
Total add: 13
Total del: 13
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.divider),               "#666666FF");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBorder),       "#666666FF");'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.foreground),            "#808080FF");'), (6, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.background),            "#212121FF");'), (7, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.icons),                 "#808080FF");'), (8, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsHover),            "#808080FF");'), (9, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsPressed),          "#808080FF");'), (10, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (11, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (13, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (14, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsPressed), "#F2F2F2FF");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.divider),               "#666666FF");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionBorder),       "#666666FF");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.foreground),            "#808080FF");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.background),            "#212121FF");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.icons),                 "#808080FF");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.iconsHover),            "#808080FF");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.iconsPressed),          "#808080FF");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIconsPressed), "#F2F2F2FF");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.divider),               "#666666FF");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBorder),       "#666666FF");'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.foreground),            "#808080FF");'), (6, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.background),            "#212121FF");'), (7, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.icons),                 "#808080FF");'), (8, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsHover),            "#808080FF");'), (9, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsPressed),          "#808080FF");'), (10, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (11, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (12, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (13, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (14, 2, u'-\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsPressed), "#F2F2F2FF");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.divider),               "#666666FF");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionBorder),       "#666666FF");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.foreground),            "#808080FF");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.background),            "#212121FF");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.icons),                 "#808080FF");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.iconsHover),            "#808080FF");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.iconsPressed),          "#808080FF");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(cf::to_s(gutter.selectionIconsPressed), "#F2F2F2FF");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tTS_ASSERT(match);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(match[0], "foo bar");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(match[1], "foo");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(match[2], "bar");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(match[3], NULL_STR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tTS_ASSERT_EQUALS(headers.find("content-length")->second, text::format("%zu", fileSize));'), (3, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(headers.find("content-length")->second, std::to_string(fileSize));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tTS_ASSERT_EQUALS(headers.find("content-length")->second, text::format("%zu", fileSize));'), (3, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(headers.find("content-length")->second, std::to_string(fileSize));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tTS_ASSERT_EQUALS(headers.find("content-length")->second, text::format("%zu", fileSize));'), (3, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(headers.find("content-length")->second, std::to_string(fileSize));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_child("/foo/bar",     "/foo/bar"),    true);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_child("/foo/bar/fud", "/foo/bar"),    true);'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_child("/foo/barry",   "/foo/bar"),   false);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_child("/foo/bar",     "/foo/barry"), false);')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_child("/foo/bar",     "/foo/bar"),    true);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_child("/foo/bar/fud", "/foo/bar"),    true);'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_child("/foo/barry",   "/foo/bar"),   false);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_child("/foo/bar",     "/foo/barry"), false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_child("/foo/bar",     "/foo/bar"),    true);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_child("/foo/bar/fud", "/foo/bar"),    true);'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_child("/foo/barry",   "/foo/bar"),   false);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_child("/foo/bar",     "/foo/barry"), false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(err, "Corrupt archive.");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(err, "Extracting archive.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(err, "Corrupt archive.");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(err, "Extracting archive.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(err, "Corrupt archive.");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(err, "Extracting archive.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(err, "Corrupt archive.");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(err, "Extracting archive.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(err, "Corrupt archive.");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(err, "Extracting archive.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(err, "Corrupt archive.");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(err, "Extracting archive.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR, "", jail.path()).get("testSetting"), "parent");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR, "", jail.path("folder")).get("testSetting"), "child");')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR, "", jail.path()).get("testSetting"), "parent");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR, "", jail.path("folder")).get("testSetting"), "child");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR, "", jail.path()).get("testSetting"), "parent");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR, "", jail.path("folder")).get("testSetting"), "child");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_error, false);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_file_type, "x.test");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(std::string(cb->_content->begin(), cb->_content->end()), "dummy");')]
===========================================
===========================================
Total add: 15
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_error, false);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_file_type, "x.test");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(std::string(cb->_content->begin(), cb->_content->end()), "dummy");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_error, false);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_file_type, "x.test");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(std::string(cb->_content->begin(), cb->_content->end()), "dummy");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(cb->_file_type, "x.test");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_file_type, "text.plain");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(cb->_file_type, "x.test");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_file_type, "text.plain");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(cb->_file_type, "x.test");'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_file_type, "text.plain");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tASSERT(scope.left && scope.right);'), (6, 1, u'+\tASSERT(scope);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: theme_t::gutter_styles
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tASSERT(scope.left && scope.right);'), (6, 1, u'+\tASSERT(scope);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tASSERT(scope.left && scope.right);'), (6, 1, u'+\tASSERT(scope);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t\tTS_ASSERT_EQUALS(parents.size(), paths.size());'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(parents[0], 0);'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(parents[1], 1);'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(parents[2], 2);'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(parents[3], 1);'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(parents[4], 2);'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(parents[5], 0);'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(parents[6], 1);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(parents[7], 0);'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(parents[8], 2);')]
===========================================
===========================================
Total add: 28
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t\tTS_ASSERT_EQUALS(parents.size(), paths.size());'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(parents[0], 0);'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(parents[1], 1);'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(parents[2], 2);'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(parents[3], 1);'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(parents[4], 2);'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(parents[5], 0);'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(parents[6], 1);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(parents[7], 0);'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(parents[8], 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t\tTS_ASSERT_EQUALS(parents.size(), paths.size());'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(parents[0], 0);'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(parents[1], 1);'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(parents[2], 2);'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(parents[3], 1);'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(parents[4], 2);'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(parents[5], 0);'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(parents[6], 1);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(parents[7], 0);'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(parents[8], 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tTS_ASSERT_EQUALS(wc.variable("TM_SCM_NAME"),   "git");'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(wc.variable("TM_SCM_BRANCH"), "master");')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tTS_ASSERT_EQUALS(wc.variable("TM_SCM_NAME"),   "git");'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(wc.variable("TM_SCM_BRANCH"), "master");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tTS_ASSERT_EQUALS(wc.variable("TM_SCM_NAME"),   "git");'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(wc.variable("TM_SCM_BRANCH"), "master");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_NAME"],   "hg");'), (4, 1, u'+\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_BRANCH"], "default");')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_NAME"],   "hg");'), (4, 1, u'+\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_BRANCH"], "default");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_NAME"],   "hg");'), (4, 1, u'+\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_BRANCH"], "default");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_NAME"],   "svn");'), (4, 1, u'+\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_BRANCH"], expectedBranch);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_NAME"],   "svn");'), (4, 1, u'+\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_BRANCH"], expectedBranch);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_NAME"],   "svn");'), (4, 1, u'+\t\t\tTS_ASSERT_EQUALS(vars["TM_SCM_BRANCH"], expectedBranch);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_LESS_THAN(oak::rank("rmate", "RMateServer.cc"), oak::rank("rmate", "rmate"));')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_LESS_THAN(oak::rank("rmate", "RMateServer.cc"), oak::rank("rmate", "rmate"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_LESS_THAN(oak::rank("rmate", "RMateServer.cc"), oak::rank("rmate", "rmate"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tTS_ASSERT(globs.include("foo"));'), (6, 1, u'+\t\tTS_ASSERT(globs.include("bar"));'), (7, 1, u'+\t\tTS_ASSERT(globs.include(".foo"));'), (8, 1, u'+\t\tTS_ASSERT(globs.include(".bar"));'), (14, 1, u'+\t\tTS_ASSERT(globs.include("foo"));'), (15, 1, u'+\t\tTS_ASSERT(globs.include("bar"));'), (16, 1, u'+\t\tTS_ASSERT(globs.exclude(".foo"));'), (17, 1, u'+\t\tTS_ASSERT(globs.exclude(".bar"));')]
===========================================
===========================================
Total add: 18
Total del: 0
Header: class GlobListTests : public CxxTest::TestSuite
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tTS_ASSERT(globs.include("foo"));'), (6, 1, u'+\t\tTS_ASSERT(globs.include("bar"));'), (7, 1, u'+\t\tTS_ASSERT(globs.include(".foo"));'), (8, 1, u'+\t\tTS_ASSERT(globs.include(".bar"));'), (14, 1, u'+\t\tTS_ASSERT(globs.include("foo"));'), (15, 1, u'+\t\tTS_ASSERT(globs.include("bar"));'), (16, 1, u'+\t\tTS_ASSERT(globs.exclude(".foo"));'), (17, 1, u'+\t\tTS_ASSERT(globs.exclude(".bar"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tTS_ASSERT(globs.include("foo"));'), (6, 1, u'+\t\tTS_ASSERT(globs.include("bar"));'), (7, 1, u'+\t\tTS_ASSERT(globs.include(".foo"));'), (8, 1, u'+\t\tTS_ASSERT(globs.include(".bar"));'), (14, 1, u'+\t\tTS_ASSERT(globs.include("foo"));'), (15, 1, u'+\t\tTS_ASSERT(globs.include("bar"));'), (16, 1, u'+\t\tTS_ASSERT(globs.exclude(".foo"));'), (17, 1, u'+\t\tTS_ASSERT(globs.exclude(".bar"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.divider),               "#666666FF");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBorder),       "#666666FF");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.foreground),            "#808080FF");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.background),            "#212121FF");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.icons),                 "#808080FF");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsHover),            "#808080FF");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.iconsPressed),          "#808080FF");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionForeground),   "#F2F2F2FF");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionBackground),   "#0D0D0DFF");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIcons),        "#F2F2F2FF");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsHover),   "#F2F2F2FF");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(gutter.selectionIconsPressed), "#F2F2F2FF");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 4);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(matches[0].second.range.min().line, 0);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(matches[1].second.range.min().line, 1);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(matches[2].second.range.min().line, 2);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(matches[3].second.range.min().line, 3);'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 4);'), (35, 1, u'+\t\tTS_ASSERT_EQUALS(matches[0].second.range.min().line, 0);'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(matches[1].second.range.min().line, 1);'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(matches[2].second.range.min().line, 2);'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(matches[3].second.range.min().line, 3);'), (52, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 4);'), (54, 1, u'+\t\tTS_ASSERT_EQUALS(matches[0].second.range.min().line, 0);'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(matches[1].second.range.min().line, 1);'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(matches[2].second.range.min().line, 2);'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(matches[3].second.range.min().line, 3);')]
===========================================
===========================================
Total add: 57
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 4);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(matches[0].second.range.min().line, 0);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(matches[1].second.range.min().line, 1);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(matches[2].second.range.min().line, 2);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(matches[3].second.range.min().line, 3);'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 4);'), (35, 1, u'+\t\tTS_ASSERT_EQUALS(matches[0].second.range.min().line, 0);'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(matches[1].second.range.min().line, 1);'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(matches[2].second.range.min().line, 2);'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(matches[3].second.range.min().line, 3);'), (52, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 4);'), (54, 1, u'+\t\tTS_ASSERT_EQUALS(matches[0].second.range.min().line, 0);'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(matches[1].second.range.min().line, 1);'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(matches[2].second.range.min().line, 2);'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(matches[3].second.range.min().line, 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 4);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(matches[0].second.range.min().line, 0);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(matches[1].second.range.min().line, 1);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(matches[2].second.range.min().line, 2);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(matches[3].second.range.min().line, 3);'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 4);'), (35, 1, u'+\t\tTS_ASSERT_EQUALS(matches[0].second.range.min().line, 0);'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(matches[1].second.range.min().line, 1);'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(matches[2].second.range.min().line, 2);'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(matches[3].second.range.min().line, 3);'), (52, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 4);'), (54, 1, u'+\t\tTS_ASSERT_EQUALS(matches[0].second.range.min().line, 0);'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(matches[1].second.range.min().line, 1);'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(matches[2].second.range.min().line, 2);'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(matches[3].second.range.min().line, 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+\t\tTS_ASSERT_EQUALS(move(0, kSelectionMoveToBeginOfIndentedLine), "1");'), (28, 1, u'+\t\tTS_ASSERT_EQUALS(move(2, kSelectionMoveToBeginOfIndentedLine), "1");'), (29, 1, u'+\t\tTS_ASSERT_EQUALS(move(4, kSelectionMoveToBeginOfIndentedLine), "1");'), (30, 1, u'+\t\tTS_ASSERT_EQUALS(move(6, kSelectionMoveToBeginOfIndentedLine), "1:5");'), (31, 1, u'+\t\tTS_ASSERT_EQUALS(move(8, kSelectionMoveToBeginOfIndentedLine), "1:5");'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(move( 0, kSelectionMoveToEndOfIndentedLine), "1:5");'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(move( 2, kSelectionMoveToEndOfIndentedLine), "1:5");'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(move( 4, kSelectionMoveToEndOfIndentedLine), "1:18");'), (39, 1, u'+\t\tTS_ASSERT_EQUALS(move( 6, kSelectionMoveToEndOfIndentedLine), "1:18");'), (40, 1, u'+\t\tTS_ASSERT_EQUALS(move( 8, kSelectionMoveToEndOfIndentedLine), "1:18");'), (41, 1, u'+\t\tTS_ASSERT_EQUALS(move(17, kSelectionMoveToEndOfIndentedLine), "1:18");'), (46, 1, u'+\t\tTS_ASSERT_EQUALS(extend(0, kSelectionExtendToBeginOfIndentedLine), "1");'), (47, 1, u'+\t\tTS_ASSERT_EQUALS(extend(2, kSelectionExtendToBeginOfIndentedLine), "1-1:3");'), (48, 1, u'+\t\tTS_ASSERT_EQUALS(extend(4, kSelectionExtendToBeginOfIndentedLine), "1-1:5");'), (49, 1, u'+\t\tTS_ASSERT_EQUALS(extend(6, kSelectionExtendToBeginOfIndentedLine), "1:5-1:7");'), (50, 1, u'+\t\tTS_ASSERT_EQUALS(extend(8, kSelectionExtendToBeginOfIndentedLine), "1:5-1:9");'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(extend( 0, kSelectionExtendToEndOfIndentedLine), "1-1:5");'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(extend( 2, kSelectionExtendToEndOfIndentedLine), "1:3-1:5");'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(extend( 4, kSelectionExtendToEndOfIndentedLine), "1:5-1:18");'), (58, 1, u'+\t\tTS_ASSERT_EQUALS(extend( 6, kSelectionExtendToEndOfIndentedLine), "1:7-1:18");'), (59, 1, u'+\t\tTS_ASSERT_EQUALS(extend( 8, kSelectionExtendToEndOfIndentedLine), "1:9-1:18");'), (60, 1, u'+\t\tTS_ASSERT_EQUALS(extend(17, kSelectionExtendToEndOfIndentedLine), "1:18");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - std::begin(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("file")                            ).get("mySetting"), "1");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("file"),                     "text").get("mySetting"), "2");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("file"),              "text.markup").get("mySetting"), "3");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("file"),         "text.markup.html").get("mySetting"), "4");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/file")                        ).get("mySetting"), "5");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/file"),                 "text").get("mySetting"), "2");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/file"),          "text.markup").get("mySetting"), "6");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/file"),     "text.markup.html").get("mySetting"), "4");'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/bar/file")                    ).get("mySetting"), "5");'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/bar/file"),             "text").get("mySetting"), "7");'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/bar/file"),      "text.markup").get("mySetting"), "6");'), (28, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("foo/bar/file"), "text.markup.html").get("mySetting"), "8");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tTS_ASSERT( path::glob_t("*file").does_match("file"));'), (3, 1, u'+\t\tTS_ASSERT( path::glob_t("fi*le").does_match("file"));'), (4, 1, u'+\t\tTS_ASSERT( path::glob_t("file*").does_match("file"));'), (5, 1, u'+\t\tTS_ASSERT(!path::glob_t("*.ext").does_match(".ext"));'), (6, 1, u'+\t\tTS_ASSERT( path::glob_t(".*ext").does_match(".ext"));'), (7, 1, u'+\t\tTS_ASSERT( path::glob_t(".ext*").does_match(".ext"));')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tTS_ASSERT( path::glob_t("*file").does_match("file"));'), (3, 1, u'+\t\tTS_ASSERT( path::glob_t("fi*le").does_match("file"));'), (4, 1, u'+\t\tTS_ASSERT( path::glob_t("file*").does_match("file"));'), (5, 1, u'+\t\tTS_ASSERT(!path::glob_t("*.ext").does_match(".ext"));'), (6, 1, u'+\t\tTS_ASSERT( path::glob_t(".*ext").does_match(".ext"));'), (7, 1, u'+\t\tTS_ASSERT( path::glob_t(".ext*").does_match(".ext"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tTS_ASSERT( path::glob_t("*file").does_match("file"));'), (3, 1, u'+\t\tTS_ASSERT( path::glob_t("fi*le").does_match("file"));'), (4, 1, u'+\t\tTS_ASSERT( path::glob_t("file*").does_match("file"));'), (5, 1, u'+\t\tTS_ASSERT(!path::glob_t("*.ext").does_match(".ext"));'), (6, 1, u'+\t\tTS_ASSERT( path::glob_t(".*ext").does_match(".ext"));'), (7, 1, u'+\t\tTS_ASSERT( path::glob_t(".ext*").does_match(".ext"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\tTS_ASSERT(globs.include("main.cc")           );'), (16, 1, u'+\t\tTS_ASSERT(globs.include("foo/main.cc")       );'), (17, 1, u'+\t\tTS_ASSERT(globs.include(".htaccess")         );'), (18, 1, u'+\t\tTS_ASSERT(globs.include("foo/.htaccess")     );'), (19, 1, u'+\t\tTS_ASSERT(globs.include("cache/.htaccess")   );'), (21, 1, u'+\t\tTS_ASSERT(globs.exclude(".profile")          );'), (22, 1, u'+\t\tTS_ASSERT(globs.exclude("foo/.profile")      );'), (23, 1, u'+\t\tTS_ASSERT(globs.exclude("main.pdf")          );'), (24, 1, u'+\t\tTS_ASSERT(globs.exclude("foo/main.pdf")      );'), (25, 1, u'+\t\tTS_ASSERT(globs.exclude("vendor/main.cc")    );'), (26, 1, u'+\t\tTS_ASSERT(globs.exclude("vendor/.htaccess")  );'), (27, 1, u'+\t\tTS_ASSERT(globs.exclude("cache/main.cc")     );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tTS_ASSERT( path::glob_t("*"        ).does_match("foo.txt"));'), (4, 1, u'+\t\tTS_ASSERT( path::glob_t("foo*"     ).does_match("foo.txt"));'), (5, 1, u'+\t\tTS_ASSERT( path::glob_t("foo/*"    ).does_match("foo/bar.txt"));'), (6, 1, u'+\t\tTS_ASSERT( path::glob_t("foo/bar*" ).does_match("foo/bar.txt"));'), (7, 1, u'+\t\tTS_ASSERT(!path::glob_t("*"        ).does_match(".txt"));'), (8, 1, u'+\t\tTS_ASSERT(!path::glob_t("foo/*"    ).does_match("foo/.txt"));'), (9, 1, u'+\t\tTS_ASSERT(!path::glob_t("foo/bar/*").does_match("foo/bar/.txt"));'), (11, 1, u'+\t\tTS_ASSERT( path::glob_t("cache/*"   ).does_match("cache/test.cc"));'), (12, 1, u'+\t\tTS_ASSERT( path::glob_t("cache/**"  ).does_match("cache/test.cc"));'), (13, 1, u'+\t\tTS_ASSERT( path::glob_t("cache/**"  ).does_match("cache/foo/test.cc"));'), (14, 1, u'+\t\tTS_ASSERT( path::glob_t("cache/**/*").does_match("cache/foo/test.cc"));'), (15, 1, u'+\t\tTS_ASSERT(!path::glob_t("cache/*"   ).does_match("cache/.htaccess"));'), (16, 1, u'+\t\tTS_ASSERT(!path::glob_t("cache/**"  ).does_match("cache/.htaccess"));'), (17, 1, u'+\t\tTS_ASSERT(!path::glob_t("cache/**"  ).does_match("cache/foo/.htaccess"));'), (18, 1, u'+\t\tTS_ASSERT(!path::glob_t("cache/**/*").does_match("cache/foo/.htaccess"));'), (20, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/*"   ).does_match("cache/test.cc"));'), (21, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**"  ).does_match("cache/test.cc"));'), (22, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**"  ).does_match("cache/foo/test.cc"));'), (23, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**/*").does_match("cache/foo/test.cc"));'), (24, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/*"   ).does_match("cache/.htaccess"));'), (25, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**"  ).does_match("cache/.htaccess"));'), (26, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**"  ).does_match("cache/foo/.htaccess"));'), (27, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**/*").does_match("cache/foo/.htaccess"));')]
===========================================
===========================================
Total add: 26
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tTS_ASSERT( path::glob_t("*"        ).does_match("foo.txt"));'), (4, 1, u'+\t\tTS_ASSERT( path::glob_t("foo*"     ).does_match("foo.txt"));'), (5, 1, u'+\t\tTS_ASSERT( path::glob_t("foo/*"    ).does_match("foo/bar.txt"));'), (6, 1, u'+\t\tTS_ASSERT( path::glob_t("foo/bar*" ).does_match("foo/bar.txt"));'), (7, 1, u'+\t\tTS_ASSERT(!path::glob_t("*"        ).does_match(".txt"));'), (8, 1, u'+\t\tTS_ASSERT(!path::glob_t("foo/*"    ).does_match("foo/.txt"));'), (9, 1, u'+\t\tTS_ASSERT(!path::glob_t("foo/bar/*").does_match("foo/bar/.txt"));'), (11, 1, u'+\t\tTS_ASSERT( path::glob_t("cache/*"   ).does_match("cache/test.cc"));'), (12, 1, u'+\t\tTS_ASSERT( path::glob_t("cache/**"  ).does_match("cache/test.cc"));'), (13, 1, u'+\t\tTS_ASSERT( path::glob_t("cache/**"  ).does_match("cache/foo/test.cc"));'), (14, 1, u'+\t\tTS_ASSERT( path::glob_t("cache/**/*").does_match("cache/foo/test.cc"));'), (15, 1, u'+\t\tTS_ASSERT(!path::glob_t("cache/*"   ).does_match("cache/.htaccess"));'), (16, 1, u'+\t\tTS_ASSERT(!path::glob_t("cache/**"  ).does_match("cache/.htaccess"));'), (17, 1, u'+\t\tTS_ASSERT(!path::glob_t("cache/**"  ).does_match("cache/foo/.htaccess"));'), (18, 1, u'+\t\tTS_ASSERT(!path::glob_t("cache/**/*").does_match("cache/foo/.htaccess"));'), (20, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/*"   ).does_match("cache/test.cc"));'), (21, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**"  ).does_match("cache/test.cc"));'), (22, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**"  ).does_match("cache/foo/test.cc"));'), (23, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**/*").does_match("cache/foo/test.cc"));'), (24, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/*"   ).does_match("cache/.htaccess"));'), (25, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**"  ).does_match("cache/.htaccess"));'), (26, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**"  ).does_match("cache/foo/.htaccess"));'), (27, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**/*").does_match("cache/foo/.htaccess"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tTS_ASSERT( path::glob_t("*"        ).does_match("foo.txt"));'), (4, 1, u'+\t\tTS_ASSERT( path::glob_t("foo*"     ).does_match("foo.txt"));'), (5, 1, u'+\t\tTS_ASSERT( path::glob_t("foo/*"    ).does_match("foo/bar.txt"));'), (6, 1, u'+\t\tTS_ASSERT( path::glob_t("foo/bar*" ).does_match("foo/bar.txt"));'), (7, 1, u'+\t\tTS_ASSERT(!path::glob_t("*"        ).does_match(".txt"));'), (8, 1, u'+\t\tTS_ASSERT(!path::glob_t("foo/*"    ).does_match("foo/.txt"));'), (9, 1, u'+\t\tTS_ASSERT(!path::glob_t("foo/bar/*").does_match("foo/bar/.txt"));'), (11, 1, u'+\t\tTS_ASSERT( path::glob_t("cache/*"   ).does_match("cache/test.cc"));'), (12, 1, u'+\t\tTS_ASSERT( path::glob_t("cache/**"  ).does_match("cache/test.cc"));'), (13, 1, u'+\t\tTS_ASSERT( path::glob_t("cache/**"  ).does_match("cache/foo/test.cc"));'), (14, 1, u'+\t\tTS_ASSERT( path::glob_t("cache/**/*").does_match("cache/foo/test.cc"));'), (15, 1, u'+\t\tTS_ASSERT(!path::glob_t("cache/*"   ).does_match("cache/.htaccess"));'), (16, 1, u'+\t\tTS_ASSERT(!path::glob_t("cache/**"  ).does_match("cache/.htaccess"));'), (17, 1, u'+\t\tTS_ASSERT(!path::glob_t("cache/**"  ).does_match("cache/foo/.htaccess"));'), (18, 1, u'+\t\tTS_ASSERT(!path::glob_t("cache/**/*").does_match("cache/foo/.htaccess"));'), (20, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/*"   ).does_match("cache/test.cc"));'), (21, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**"  ).does_match("cache/test.cc"));'), (22, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**"  ).does_match("cache/foo/test.cc"));'), (23, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**/*").does_match("cache/foo/test.cc"));'), (24, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/*"   ).does_match("cache/.htaccess"));'), (25, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**"  ).does_match("cache/.htaccess"));'), (26, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**"  ).does_match("cache/foo/.htaccess"));'), (27, 1, u'+\t\tTS_ASSERT(!path::glob_t("!cache/**/*").does_match("cache/foo/.htaccess"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT(!path::glob_t("**.txt"      ).does_match("foo/bar/fud.txt"));'), (3, 2, u'-\t\tTS_ASSERT(!path::glob_t("f**.txt"     ).does_match("foo/bar/fud.txt"));'), (4, 1, u'+\t\tTS_ASSERT( path::glob_t("**.txt"      ).does_match("fud.txt"));'), (5, 1, u'+\t\tTS_ASSERT( path::glob_t("**.txt"      ).does_match("foo/bar/fud.txt"));'), (6, 1, u'+\t\tTS_ASSERT( path::glob_t("**/*.txt"    ).does_match("fud.txt"));'), (7, 1, u'+\t\tTS_ASSERT( path::glob_t("f**.txt"     ).does_match("foo/bar.txt"));'), (8, 1, u'+\t\tTS_ASSERT(!path::glob_t("f*.txt"      ).does_match("foo/bar.txt"));'), (9, 1, u'+\t\tTS_ASSERT( path::glob_t("f**bar.txt"  ).does_match("fbar.txt"));'), (10, 1, u'+\t\tTS_ASSERT( path::glob_t("f**bar.txt"  ).does_match("foo/bar.txt"));'), (11, 1, u'+\t\tTS_ASSERT(!path::glob_t("f**bar.txt"  ).does_match("foo/.bar.txt"));')]
===========================================
===========================================
Total add: 8
Total del: 2
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT(!path::glob_t("**.txt"      ).does_match("foo/bar/fud.txt"));'), (3, 2, u'-\t\tTS_ASSERT(!path::glob_t("f**.txt"     ).does_match("foo/bar/fud.txt"));'), (4, 1, u'+\t\tTS_ASSERT( path::glob_t("**.txt"      ).does_match("fud.txt"));'), (5, 1, u'+\t\tTS_ASSERT( path::glob_t("**.txt"      ).does_match("foo/bar/fud.txt"));'), (6, 1, u'+\t\tTS_ASSERT( path::glob_t("**/*.txt"    ).does_match("fud.txt"));'), (7, 1, u'+\t\tTS_ASSERT( path::glob_t("f**.txt"     ).does_match("foo/bar.txt"));'), (8, 1, u'+\t\tTS_ASSERT(!path::glob_t("f*.txt"      ).does_match("foo/bar.txt"));'), (9, 1, u'+\t\tTS_ASSERT( path::glob_t("f**bar.txt"  ).does_match("fbar.txt"));'), (10, 1, u'+\t\tTS_ASSERT( path::glob_t("f**bar.txt"  ).does_match("foo/bar.txt"));'), (11, 1, u'+\t\tTS_ASSERT(!path::glob_t("f**bar.txt"  ).does_match("foo/.bar.txt"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT(!path::glob_t("**.txt"      ).does_match("foo/bar/fud.txt"));'), (3, 2, u'-\t\tTS_ASSERT(!path::glob_t("f**.txt"     ).does_match("foo/bar/fud.txt"));'), (4, 1, u'+\t\tTS_ASSERT( path::glob_t("**.txt"      ).does_match("fud.txt"));'), (5, 1, u'+\t\tTS_ASSERT( path::glob_t("**.txt"      ).does_match("foo/bar/fud.txt"));'), (6, 1, u'+\t\tTS_ASSERT( path::glob_t("**/*.txt"    ).does_match("fud.txt"));'), (7, 1, u'+\t\tTS_ASSERT( path::glob_t("f**.txt"     ).does_match("foo/bar.txt"));'), (8, 1, u'+\t\tTS_ASSERT(!path::glob_t("f*.txt"      ).does_match("foo/bar.txt"));'), (9, 1, u'+\t\tTS_ASSERT( path::glob_t("f**bar.txt"  ).does_match("fbar.txt"));'), (10, 1, u'+\t\tTS_ASSERT( path::glob_t("f**bar.txt"  ).does_match("foo/bar.txt"));'), (11, 1, u'+\t\tTS_ASSERT(!path::glob_t("f**bar.txt"  ).does_match("foo/.bar.txt"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "foo", find::extend_selection, ng::range_t(4, 7)), "1:5-1:8&1:9-1:12");'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "foo", find::extend_selection, ng::ranges_t{ ng::range_t(4, 7), ng::range_t(8, 11) }), "1:5-1:8&1:9-1:12&1:13-1:16");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "\\\\b", find::extend_selection|find::regular_expression, ng::range_t(4)), "1:5&1:8");'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "\\\\b", find::extend_selection|find::regular_expression, ng::ranges_t{ ng::range_t(4), ng::range_t(7) }), "1:5&1:8&1:9");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "foo", find::extend_selection|find::backwards, ng::range_t(4, 7)), "1-1:4&1:5-1:8");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "foo", find::extend_selection|find::backwards, ng::ranges_t{ ng::range_t(4, 7), ng::range_t(8, 11) }), "1-1:4&1:5-1:8&1:9-1:12");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "\\\\b", find::extend_selection|find::backwards|find::regular_expression, ng::range_t(4)), "1:4&1:5");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "\\\\b", find::extend_selection|find::backwards|find::regular_expression, ng::ranges_t{ ng::range_t(3), ng::range_t(4) }), "1&1:4&1:5");')]
===========================================
===========================================
Total add: 18
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "foo", find::extend_selection, ng::range_t(4, 7)), "1:5-1:8&1:9-1:12");'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "foo", find::extend_selection, ng::ranges_t{ ng::range_t(4, 7), ng::range_t(8, 11) }), "1:5-1:8&1:9-1:12&1:13-1:16");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "\\\\b", find::extend_selection|find::regular_expression, ng::range_t(4)), "1:5&1:8");'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "\\\\b", find::extend_selection|find::regular_expression, ng::ranges_t{ ng::range_t(4), ng::range_t(7) }), "1:5&1:8&1:9");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "foo", find::extend_selection|find::backwards, ng::range_t(4, 7)), "1-1:4&1:5-1:8");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "foo", find::extend_selection|find::backwards, ng::ranges_t{ ng::range_t(4, 7), ng::range_t(8, 11) }), "1-1:4&1:5-1:8&1:9-1:12");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "\\\\b", find::extend_selection|find::backwards|find::regular_expression, ng::range_t(4)), "1:4&1:5");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "\\\\b", find::extend_selection|find::backwards|find::regular_expression, ng::ranges_t{ ng::range_t(3), ng::range_t(4) }), "1&1:4&1:5");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "foo", find::extend_selection, ng::range_t(4, 7)), "1:5-1:8&1:9-1:12");'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "foo", find::extend_selection, ng::ranges_t{ ng::range_t(4, 7), ng::range_t(8, 11) }), "1:5-1:8&1:9-1:12&1:13-1:16");'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "\\\\b", find::extend_selection|find::regular_expression, ng::range_t(4)), "1:5&1:8");'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "\\\\b", find::extend_selection|find::regular_expression, ng::ranges_t{ ng::range_t(4), ng::range_t(7) }), "1:5&1:8&1:9");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "foo", find::extend_selection|find::backwards, ng::range_t(4, 7)), "1-1:4&1:5-1:8");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "foo", find::extend_selection|find::backwards, ng::ranges_t{ ng::range_t(4, 7), ng::range_t(8, 11) }), "1-1:4&1:5-1:8&1:9-1:12");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "\\\\b", find::extend_selection|find::backwards|find::regular_expression, ng::range_t(4)), "1:4&1:5");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo foo foo foo", "\\\\b", find::extend_selection|find::backwards|find::regular_expression, ng::ranges_t{ ng::range_t(3), ng::range_t(4) }), "1&1:4&1:5");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tTS_ASSERT_EQUALS(info ? true : false, false);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tTS_ASSERT_EQUALS(info ? true : false, false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tTS_ASSERT_EQUALS(info ? true : false, false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::versioned);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::none);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::versioned);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::none);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::versioned);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::none);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::versioned);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::none);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::versioned);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::none);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::versioned);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::none);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::none);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::none);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::none);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::none);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::none);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::none);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("clean.txt")),     scm::status::versioned);'), (3, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("clean.txt")),     scm::status::none);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("clean.txt")),     scm::status::versioned);'), (3, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("clean.txt")),     scm::status::none);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("clean.txt")),     scm::status::versioned);'), (3, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("clean.txt")),     scm::status::none);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "clean.txt"))),     scm::status::versioned);'), (3, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "clean.txt"))),     scm::status::none);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "clean.txt"))),     scm::status::versioned);'), (3, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "clean.txt"))),     scm::status::none);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "clean.txt"))),     scm::status::versioned);'), (3, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "clean.txt"))),     scm::status::none);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tASSERT_NE(svn, NULL_STR);'), (6, 1, u'+\tASSERT_NE(svn, NULL_STR); ASSERT_NE(xsltPath, NULL_STR);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: parse_info_output
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tASSERT_NE(svn, NULL_STR);'), (6, 1, u'+\tASSERT_NE(svn, NULL_STR); ASSERT_NE(xsltPath, NULL_STR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tASSERT_NE(svn, NULL_STR);'), (6, 1, u'+\tASSERT_NE(svn, NULL_STR); ASSERT_NE(xsltPath, NULL_STR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tASSERT_EQ(v.back(), "");'), (13, 2, u'-\t\tASSERT_EQ(v2.size(), 3);')]
===========================================
===========================================
Total add: 13
Total del: 18
Header: parse_status_output
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tASSERT_EQ(v.back(), "");'), (13, 2, u'-\t\tASSERT_EQ(v2.size(), 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tASSERT_EQ(v.back(), "");'), (13, 2, u'-\t\tASSERT_EQ(v2.size(), 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde(home()),               "~");'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde(join(home(), "foo")),  "~/foo");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde("foo" + home()),       "foo" + home());'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde("/dummy"),             "/dummy");'), (6, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde(NULL_STR),             NULL_STR);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home()),                    "~");'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home() + "/"),              "~/");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home() + "//"),             "~/");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home() + "/./"),            "~/");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home() + "./"),             home() + "./");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(join(home(), "foo")),       "~/foo");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(join(home(), "foo") + "/"), "~/foo/");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde("foo" + home()),            "foo" + home());'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde("/dummy"),                  "/dummy");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(NULL_STR),                  NULL_STR);')]
===========================================
===========================================
Total add: 10
Total del: 5
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde(home()),               "~");'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde(join(home(), "foo")),  "~/foo");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde("foo" + home()),       "foo" + home());'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde("/dummy"),             "/dummy");'), (6, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde(NULL_STR),             NULL_STR);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home()),                    "~");'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home() + "/"),              "~/");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home() + "//"),             "~/");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home() + "/./"),            "~/");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home() + "./"),             home() + "./");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(join(home(), "foo")),       "~/foo");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(join(home(), "foo") + "/"), "~/foo/");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde("foo" + home()),            "foo" + home());'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde("/dummy"),                  "/dummy");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(NULL_STR),                  NULL_STR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde(home()),               "~");'), (3, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde(join(home(), "foo")),  "~/foo");'), (4, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde("foo" + home()),       "foo" + home());'), (5, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde("/dummy"),             "/dummy");'), (6, 2, u'-\t\tTS_ASSERT_EQUALS(path::with_tilde(NULL_STR),             NULL_STR);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home()),                    "~");'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home() + "/"),              "~/");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home() + "//"),             "~/");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home() + "/./"),            "~/");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home() + "./"),             home() + "./");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(join(home(), "foo")),       "~/foo");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(join(home(), "foo") + "/"), "~/foo/");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde("foo" + home()),            "foo" + home());'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde("/dummy"),                  "/dummy");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(NULL_STR),                  NULL_STR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 2, u"-\tASSERT_EQ(flag, '\\0'); // we use \xe2\x80\x98flag\xe2\x80\x99 in the assertion to output the unrecognized status flag")]
===========================================
===========================================
Total add: 18
Total del: 19
Header: OAK_DEBUG_VAR
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 2, u"-\tASSERT_EQ(flag, '\\0'); // we use \xe2\x80\x98flag\xe2\x80\x99 in the assertion to output the unrecognized status flag")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 2, u"-\tASSERT_EQ(flag, '\\0'); // we use \xe2\x80\x98flag\xe2\x80\x99 in the assertion to output the unrecognized status flag")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\tASSERT((*line).length() > 7);'), (11, 1, u'+\t\tASSERT_EQ(v2.size(), 3);')]
===========================================
===========================================
Total add: 11
Total del: 8
Header: parse_status_output
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\tASSERT((*line).length() > 7);'), (11, 1, u'+\t\tASSERT_EQ(v2.size(), 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\tASSERT((*line).length() > 7);'), (11, 1, u'+\t\tASSERT_EQ(v2.size(), 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (3, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%td: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(                                ).get("testKey_1", "unset"),   "set");'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.md"                 ).get("testKey_1", "unset"),   "set");'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.txt"                ).get("testKey_1", "unset"),   "set");'), (28, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text.plain"   ).get("testKey_1", "unset"),   "set");'), (29, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text"         ).get("testKey_1", "unset"),   "set");'), (30, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source.c"     ).get("testKey_1", "unset"),   "set");'), (31, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source"       ).get("testKey_1", "unset"),   "set");'), (32, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr.untitled").get("testKey_1", "unset"),   "set");'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr"         ).get("testKey_1", "unset"),   "set");'), (35, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(                                ).get("testKey_2", "unset"), "unset");'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.md"                 ).get("testKey_2", "unset"), "unset");'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.txt"                ).get("testKey_2", "unset"), "unset");'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text.plain"   ).get("testKey_2", "unset"), "unset");'), (39, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text"         ).get("testKey_2", "unset"), "unset");'), (40, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source.c"     ).get("testKey_2", "unset"), "unset");'), (41, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source"       ).get("testKey_2", "unset"), "unset");'), (42, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr.untitled").get("testKey_2", "unset"),   "set");'), (43, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr"         ).get("testKey_2", "unset"), "unset");'), (45, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(                                ).get("testKey_3", "unset"), "unset");'), (46, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.md"                 ).get("testKey_3", "unset"),   "set");'), (47, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.txt"                ).get("testKey_3", "unset"), "unset");'), (48, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text.plain"   ).get("testKey_3", "unset"), "unset");'), (49, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text"         ).get("testKey_3", "unset"), "unset");'), (50, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source.c"     ).get("testKey_3", "unset"), "unset");'), (51, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source"       ).get("testKey_3", "unset"), "unset");'), (52, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr.untitled").get("testKey_3", "unset"), "unset");'), (53, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr"         ).get("testKey_3", "unset"), "unset");'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(                                ).get("testKey_4", "unset"),   "set");'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path("dummy.md"                      ).get("testKey_4", "unset"),   "set");'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path("dummy.txt"                     ).get("testKey_4", "unset"),   "set");'), (58, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text.plain"   ).get("testKey_4", "unset"),   "set");'), (59, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "text"         ).get("testKey_4", "unset"),   "set");'), (60, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source.c"     ).get("testKey_4", "unset"), "other");'), (61, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "source"       ).get("testKey_4", "unset"), "other");'), (62, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr.untitled").get("testKey_4", "unset"),   "set");'), (63, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(NULL_STR,        "attr"         ).get("testKey_4", "unset"),   "set");'), (65, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(                                ).get("testKey_5", "unset"),   "set");'), (66, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.md"                 ).get("testKey_5", "unset"),   "set");'), (67, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path("/tmp/dummy.txt"                ).get("testKey_5", "unset"), "other");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tASSERT_NE(default_settings_path(), NULL_STR);'), (3, 1, u'+\tASSERT_NE(global_settings_path(), NULL_STR);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: settings_t::raw_get
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tASSERT_NE(default_settings_path(), NULL_STR);'), (3, 1, u'+\tASSERT_NE(global_settings_path(), NULL_STR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tASSERT_NE(default_settings_path(), NULL_STR);'), (3, 1, u'+\tASSERT_NE(global_settings_path(), NULL_STR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tASSERT_NE(default_settings_path(), NULL_STR);'), (3, 1, u'+\tASSERT_NE(global_settings_path(), NULL_STR);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: settings_t::set
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tASSERT_NE(default_settings_path(), NULL_STR);'), (3, 1, u'+\tASSERT_NE(global_settings_path(), NULL_STR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tASSERT_NE(default_settings_path(), NULL_STR);'), (3, 1, u'+\tASSERT_NE(global_settings_path(), NULL_STR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\t\tTSM_ASSERT_EQUALS("\\n\\n  Unable to test subversion driver (svn executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install subversion\\n", system("which -s svn"), 0);'), (29, 1, u'+\t\t\tTS_ASSERT_EQUALS(expectedBranch, info->branch());'), (31, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "clean.txt"))),     scm::status::versioned);'), (32, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "ignored.txt"))),   scm::status::ignored);'), (33, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "modified.txt"))),  scm::status::modified);'), (34, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "added.txt"))),     scm::status::added);'), (35, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "missing.txt"))),   scm::status::deleted);'), (36, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path(path::join(wcName, "untracked.txt"))), scm::status::unversioned);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tTS_ASSERT_EQUALS(escape("\\t\\n\\r\\\\q"),               "\\\\t\\\\n\\\\r\\\\q");'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("${var}")),                "${var}");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("foo\\n")),                  "foo\\n");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("foo\\\\n")),                "foo\\\\n");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("\\\\No-Escape")),      "\\\\No-Escape");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("(?bla)")),                "(?bla)");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("Escape\\\\\\\\me")),    "Escape\\\\\\\\me");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("(?1:baz: buz)")),  "(?1:baz: buz)");')]
===========================================
===========================================
Total add: 14
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tTS_ASSERT_EQUALS(escape("\\t\\n\\r\\\\q"),               "\\\\t\\\\n\\\\r\\\\q");'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("${var}")),                "${var}");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("foo\\n")),                  "foo\\n");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("foo\\\\n")),                "foo\\\\n");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("\\\\No-Escape")),      "\\\\No-Escape");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("(?bla)")),                "(?bla)");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("Escape\\\\\\\\me")),    "Escape\\\\\\\\me");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("(?1:baz: buz)")),  "(?1:baz: buz)");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tTS_ASSERT_EQUALS(escape("\\t\\n\\r\\\\q"),               "\\\\t\\\\n\\\\r\\\\q");'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("${var}")),                "${var}");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("foo\\n")),                  "foo\\n");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("foo\\\\n")),                "foo\\\\n");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("\\\\No-Escape")),      "\\\\No-Escape");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("(?bla)")),                "(?bla)");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("Escape\\\\\\\\me")),    "Escape\\\\\\\\me");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(expand(escape("(?1:baz: buz)")),  "(?1:baz: buz)");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-\t\tASSERT(value.get());')]
===========================================
===========================================
Total add: 23
Total del: 26
Header: namespace cf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-\t\tASSERT(value.get());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-\t\tASSERT(value.get());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x10FF), false);'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x1100), true);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x1101), true);'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x33FE), true);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x33FF), true);'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x3400), true);'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x3401), true);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x3402), true);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x4DBE), true);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x4DBF), true);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x4DC0), false);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x4DC1), false);'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x2E99), true);'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x2E9A), false);'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x2E9B), true);'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x3FFFC), true);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x3FFFD), true);'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(text::is_east_asian_width(0x3FFFE), false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("../"),         false);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("../foo"),      false);'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("./"),          false);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/."),          true);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/.."),         false);'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/../"),        false);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/../tmp"),     false); // this path is actually valid, so might revise path::normalize()'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/./.."),       false);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/./../tmp"),   false); // this path is actually valid, so might revise path::normalize()'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/./foo"),      true);'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("//."),         true);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("//../../foo"), false);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("//./foo"),     true);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/foo/.."),     true);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/foo/../.."),  false);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("foo"),         false);')]
===========================================
===========================================
Total add: 20
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("../"),         false);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("../foo"),      false);'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("./"),          false);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/."),          true);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/.."),         false);'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/../"),        false);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/../tmp"),     false); // this path is actually valid, so might revise path::normalize()'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/./.."),       false);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/./../tmp"),   false); // this path is actually valid, so might revise path::normalize()'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/./foo"),      true);'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("//."),         true);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("//../../foo"), false);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("//./foo"),     true);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/foo/.."),     true);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/foo/../.."),  false);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("foo"),         false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("../"),         false);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("../foo"),      false);'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("./"),          false);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/."),          true);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/.."),         false);'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/../"),        false);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/../tmp"),     false); // this path is actually valid, so might revise path::normalize()'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/./.."),       false);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/./../tmp"),   false); // this path is actually valid, so might revise path::normalize()'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/./foo"),      true);'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("//."),         true);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("//../../foo"), false);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("//./foo"),     true);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/foo/.."),     true);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("/foo/../.."),  false);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(path::is_absolute("foo"),         false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\t\t\tTS_ASSERT(strcmp(status.c_str(),"HTTP/1.0 200 OK")==0 || strcmp(status.c_str(),"HTTP/1.1 200 OK")==0);'), (4, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(status, "HTTP/1.0 200 OK");')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\t\t\tTS_ASSERT(strcmp(status.c_str(),"HTTP/1.0 200 OK")==0 || strcmp(status.c_str(),"HTTP/1.1 200 OK")==0);'), (4, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(status, "HTTP/1.0 200 OK");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\t\t\tTS_ASSERT(strcmp(status.c_str(),"HTTP/1.0 200 OK")==0 || strcmp(status.c_str(),"HTTP/1.1 200 OK")==0);'), (4, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(status, "HTTP/1.0 200 OK");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::unversioned);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::unversioned);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::unversioned);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/b"), scm::status::none);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/b"), scm::status::unversioned);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/b"), scm::status::none);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/b"), scm::status::unversioned);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/b"), scm::status::none);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/b"), scm::status::unversioned);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::unversioned);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::unversioned);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::unversioned);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::added);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::mixed);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::added);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::mixed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::added);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::mixed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::modified);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::modified);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::modified);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::mixed);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::mixed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (3, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::mixed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tTS_ASSERT_EQUALS(status, "HTTP/1.0 200 OK");'), (4, 1, u'+\t\t\t\tTS_ASSERT(strcmp(status.c_str(),"HTTP/1.0 200 OK")==0 || strcmp(status.c_str(),"HTTP/1.1 200 OK")==0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tTS_ASSERT_EQUALS(status, "HTTP/1.0 200 OK");'), (4, 1, u'+\t\t\t\tTS_ASSERT(strcmp(status.c_str(),"HTTP/1.0 200 OK")==0 || strcmp(status.c_str(),"HTTP/1.1 200 OK")==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tTS_ASSERT_EQUALS(status, "HTTP/1.0 200 OK");'), (4, 1, u'+\t\t\t\tTS_ASSERT(strcmp(status.c_str(),"HTTP/1.0 200 OK")==0 || strcmp(status.c_str(),"HTTP/1.1 200 OK")==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo > bar").does_match("foo bar foo"), true);'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > bar $").does_match("foo bar foo"), false);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("bar > foo $").does_match("foo bar foo"), true);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > bar > foo $").does_match("foo bar foo"), true);'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo > bar > foo $").does_match("foo bar foo"), true);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("bar > foo $").does_match("foo bar foo"), true);'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo > bar > baz").does_match("foo bar baz foo bar baz"), true);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo > bar > baz").does_match("foo foo bar baz foo bar baz"), false);')]
===========================================
===========================================
Total add: 14
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo > bar").does_match("foo bar foo"), true);'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > bar $").does_match("foo bar foo"), false);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("bar > foo $").does_match("foo bar foo"), true);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > bar > foo $").does_match("foo bar foo"), true);'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo > bar > foo $").does_match("foo bar foo"), true);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("bar > foo $").does_match("foo bar foo"), true);'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo > bar > baz").does_match("foo bar baz foo bar baz"), true);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo > bar > baz").does_match("foo foo bar baz foo bar baz"), false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo > bar").does_match("foo bar foo"), true);'), (6, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > bar $").does_match("foo bar foo"), false);'), (7, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("bar > foo $").does_match("foo bar foo"), true);'), (8, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > bar > foo $").does_match("foo bar foo"), true);'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo > bar > foo $").does_match("foo bar foo"), true);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("bar > foo $").does_match("foo bar foo"), true);'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo > bar > baz").does_match("foo bar baz foo bar baz"), true);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo > bar > baz").does_match("foo foo bar baz foo bar baz"), false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo").does_match("foo bar foo"), true);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo").does_match("foo bar foo"), true);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo").does_match("foo bar foo"), true);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > foo > fud").does_match("foo foo fud baz"), true);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > foo fud > fud").does_match("foo foo bar fud fud"), true);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > foo > fud").does_match("foo foo fud baz"), true);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > foo fud > fud").does_match("foo foo bar fud fud"), true);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > foo > fud").does_match("foo foo fud baz"), true);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > foo fud > fud").does_match("foo foo bar fud fud"), true);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > fud").does_match("foo bar fud"), false);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > foo > fud").does_match("foo foo fud"), true);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > foo > fud").does_match("foo foo fud fud"), true);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ bar").does_match("foo bar"), false);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo $").does_match("foo bar"), false);')]
===========================================
===========================================
Total add: 7
Total del: 4
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > fud").does_match("foo bar fud"), false);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > foo > fud").does_match("foo foo fud"), true);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > foo > fud").does_match("foo foo fud fud"), true);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ bar").does_match("foo bar"), false);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo $").does_match("foo bar"), false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > fud").does_match("foo bar fud"), false);'), (4, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > foo > fud").does_match("foo foo fud"), true);'), (5, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo > foo > fud").does_match("foo foo fud fud"), true);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ bar").does_match("foo bar"), false);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo $").does_match("foo bar"), false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(73, 1, u'+\t\t\tASSERT(it != bol_offsets.end());'), (242, 1, u'+\t\t\t\t\tASSERT_NE(m.second, 0); ASSERT_LE(m.second, len - offset);')]
===========================================
Class: class ScanPathTestSuite : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 1);'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(scanner.get_scanned_file_count(), 2);'), (28, 1, u'+\t\tTS_ASSERT_EQUALS(matches.begin()->first->path(), jail.path("matches"));'), (44, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 1);'), (45, 1, u'+\t\tTS_ASSERT_EQUALS(scanner.get_scanned_file_count(), 2);'), (46, 1, u'+\t\tTS_ASSERT_EQUALS(matches.begin()->first->path(), jail.path("text.x"));'), (62, 1, u'+\t\tTS_ASSERT_EQUALS(scanner.get_scanned_file_count(), 2);'), (63, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 2);'), (64, 1, u'+\t\tTS_ASSERT_EQUALS(matches[0].first->path(), jail.path("text.x"));'), (65, 1, u'+\t\tTS_ASSERT_EQUALS(matches[1].first->path(), jail.path("text.z"));'), (83, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 1);'), (84, 1, u'+\t\tTS_ASSERT_EQUALS(scanner.get_scanned_file_count(), 1);'), (93, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 2);'), (94, 1, u'+\t\tTS_ASSERT_EQUALS(hidden_scanner.get_scanned_file_count(), 2);'), (113, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 0);'), (114, 1, u'+\t\tTS_ASSERT_EQUALS(scanner.get_scanned_file_count(), 1);'), (123, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 1);'), (124, 1, u'+\t\tTS_ASSERT_EQUALS(follow_scanner.get_scanned_file_count(), 2);'), (139, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 1);'), (140, 1, u'+\t\tTS_ASSERT_EQUALS(scanner.get_scanned_file_count(), 1);'), (158, 1, u'+\t\tTS_ASSERT_EQUALS(matches.size(), 1);'), (159, 1, u'+\t\tTS_ASSERT_EQUALS(scanner.get_scanned_file_count(), 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 1, u'+\t\tASSERTF(c.counts[name] > 0, "name = %s, count = %zd\\n", name, c.counts[name]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(94, 1, u'+\t\t\t\t\t\tASSERTF((pid_t)changed.ident == pid, "pid %d, changed %d", pid, (pid_t)changed.ident);'), (238, 1, u'+\t\tASSERT(_full_app_path != NULL_STR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(206, 1, u'+\t\tASSERT(command.find("#!") == 0);'), (303, 1, u'+\t\tASSERT(pthread_main_np() != 0);'), (313, 1, u'+\t\tASSERT(pthread_main_np() != 0);'), (324, 1, u'+\t\tASSERT(pthread_main_np() != 0);')]
===========================================
Class: class sw_update_tests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+\tASSERT_LT(socketPath.size(), sizeof(addr.sun_path));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t\t\tTS_ASSERT_EQUALS(greeting, "welcome!");'), (22, 1, u'+\t\t\tTS_ASSERT_EQUALS(version, 42);'), (34, 1, u'+\t\t\tTS_ASSERT_EQUALS(msg, "I am bored");'), (35, 1, u'+\t\t\tTS_ASSERT_EQUALS(cmd, "quit");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+\t\t\tASSERT(0 < i);'), (84, 1, u'+\t\t\tASSERT(from);'), (133, 1, u'+\t\tASSERT_LE(from, to); ASSERT_LE(to, size());'), (213, 1, u'+\t\tASSERT_LE(from, to); ASSERT_LE(to, size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+\t\tASSERT(_marks.find(markType) != _marks.end())'), (36, 1, u'+\t\tASSERT(_marks.find(markType)->second.find(index) != _marks.find(markType)->second.end())'), (72, 1, u'+\t\tASSERT_LE(from, to);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 1, u'+\t\tASSERT(_pairs.find(index) != _pairs.end());'), (81, 1, u'+\t\tASSERT(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(76, 1, u'+\t\tASSERT_LE(from, to);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t\t\tASSERT_EQ(_offset + pos, _helper->size());'), (42, 1, u'+\t\t\tASSERT_LE(pos, it->key);'), (60, 1, u'+\t\t\tASSERT_LE(pos, size());'), (86, 1, u'+\t\t\tASSERT_LE(first, last); ASSERT_LE(last, size());'), (99, 1, u'+\t\t\tASSERT_LE(i, size());'), (106, 1, u'+\t\t\tASSERT_LE(first, last); ASSERT_LE(last, size());')]
===========================================
Class: class IndexedMapTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 1, u'+\t\tTS_ASSERT_EQUALS(tmp.size(), sorted.size());'), (59, 1, u'+\t\tTS_ASSERT(std::equal(tmp.begin(), tmp.end(), sorted.begin()));'), (70, 1, u'+\t\t\tTS_ASSERT_EQUALS(tmp.size(), sorted.size());'), (71, 1, u'+\t\t\tTS_ASSERT(std::equal(tmp.begin(), tmp.end(), sorted.begin()));'), (79, 1, u'+\t\tTS_ASSERT_EQUALS(keys.size(), sorted.size());'), (80, 1, u'+\t\tTS_ASSERT(std::equal(keys.begin(), keys.end(), sorted.begin()));'), (85, 1, u'+\t\tTS_ASSERT(map.empty());'), (99, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.size(), 5);'), (101, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(0)->first, 10);'), (102, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(1)->first, 20);'), (103, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(2)->first, 30);'), (104, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(3)->first, 40);'), (105, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(4)->first, 50);'), (107, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(0).index(), 0);'), (108, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(1).index(), 1);'), (109, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(2).index(), 2);'), (110, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(3).index(), 3);'), (111, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(4).index(), 4);'), (113, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(10).index(), 0);'), (114, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(20).index(), 1);'), (115, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(30).index(), 2);'), (116, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(40).index(), 3);'), (117, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(50).index(), 4);'), (121, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.size(), 4);'), (123, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(0)->first, 10);'), (124, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(1)->first, 20);'), (125, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(2)->first, 40);'), (126, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(3)->first, 50);'), (128, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(0).index(), 0);'), (129, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(1).index(), 1);'), (130, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(2).index(), 2);'), (131, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.nth(3).index(), 3);'), (133, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(10).index(), 0);'), (134, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(20).index(), 1);'), (135, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(40).index(), 2);'), (136, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(50).index(), 3);'), (152, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(10-1).index(), 5);'), (153, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(20-1).index(), 5);'), (154, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(30-1).index(), 5);'), (155, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(40-1).index(), 5);'), (156, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(50-1).index(), 5);'), (158, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(10).index(), 0);'), (159, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(20).index(), 1);'), (160, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(30).index(), 2);'), (161, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(40).index(), 3);'), (162, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(50).index(), 4);'), (164, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(10+1).index(), 5);'), (165, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(20+1).index(), 5);'), (166, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(30+1).index(), 5);'), (167, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(40+1).index(), 5);'), (168, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.find(50+1).index(), 5);'), (184, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(10-1).index(), 0);'), (185, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(20-1).index(), 1);'), (186, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(30-1).index(), 2);'), (187, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(40-1).index(), 3);'), (188, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(50-1).index(), 4);'), (190, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(10).index(), 0);'), (191, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(20).index(), 1);'), (192, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(30).index(), 2);'), (193, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(40).index(), 3);'), (194, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(50).index(), 4);'), (196, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(10+1).index(), 1);'), (197, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(20+1).index(), 2);'), (198, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(30+1).index(), 3);'), (199, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(40+1).index(), 4);'), (200, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.lower_bound(50+1).index(), 5);'), (216, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(10-1).index(), 0);'), (217, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(20-1).index(), 1);'), (218, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(30-1).index(), 2);'), (219, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(40-1).index(), 3);'), (220, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(50-1).index(), 4);'), (222, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(10).index(), 1);'), (223, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(20).index(), 2);'), (224, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(30).index(), 3);'), (225, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(40).index(), 4);'), (226, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(50).index(), 5);'), (228, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(10+1).index(), 1);'), (229, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(20+1).index(), 2);'), (230, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(30+1).index(), 3);'), (231, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(40+1).index(), 4);'), (232, 1, u'+\t\t\tTS_ASSERT_EQUALS(map.upper_bound(50+1).index(), 5);'), (243, 1, u'+\t\tTS_ASSERT_EQUALS(values(nonPreserveLeft), expected(nonPreserveLeftPost));'), (249, 1, u'+\t\tTS_ASSERT_EQUALS(values(nonPreserveRight), expected(nonPreserveRightPost));'), (273, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(actual, expected);'), (302, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(actual, expected);'), (321, 1, u'+\t\tTS_ASSERT_EQUALS(values.size(), sizeofA(random));'), (322, 1, u'+\t\tTS_ASSERT(std::find(values.begin(), values.end(), false) == values.end());'), (330, 1, u'+\t\tTS_ASSERT_EQUALS(values.size(), sizeofA(random));'), (331, 1, u'+\t\tTS_ASSERT(std::find(values.begin(), values.end(), true) == values.end());'), (367, 1, u'+\t\t\t\t\tTS_ASSERT_EQUALS(sortedLeft.size(), keysLeft.size());'), (368, 1, u'+\t\t\t\t\tTS_ASSERT_EQUALS(sortedRight.size(), keysRight.size());'), (369, 1, u'+\t\t\t\t\tTS_ASSERT(std::equal(sortedLeft.begin(), sortedLeft.end(), keysLeft.begin()));'), (370, 1, u'+\t\t\t\t\tTS_ASSERT(std::equal(sortedRight.begin(), sortedRight.end(), keysRight.begin()));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(87, 1, u'+\t\tTS_ASSERT(CFStringGetCString(storage, &c[0], c.size(), kCFStringEncodingASCII));'), (88, 1, u'+\t\tTS_ASSERT_EQUALS(buffer, c.substr(0, c.size()-1));'), (101, 1, u'+\t\tTS_ASSERT_EQUALS(buffer, storage);'), (114, 1, u'+\t\t\tTS_ASSERT_EQUALS(storage[i], buffer[i]);'), (154, 1, u'+\t\tTS_ASSERT_EQUALS(str, buffer);'), (168, 1, u'+\t\tTS_ASSERT_EQUALS(storage.size(), 0);'), (183, 1, u'+\t\tTS_ASSERT_EQUALS(str, buffer);'), (194, 1, u'+\t\t\tTS_ASSERT_EQUALS(storage.substr(range.src, range.src + range.len), buffer.substr(range.src, range.len));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+\t\tTS_ASSERT_EQUALS(lhs, fs::node_t(jail.path()));'), (32, 1, u'+\t\tTS_ASSERT_EQUALS(lhs, fs::from_plist(plist::load(plistFile)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(133, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::environment("")["TEST"],                        "foo");'), (134, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::environment("source.c++")["TEST"],              "foo:bar");'), (135, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::environment("source.any")["TM_COMMENT_STYLE"],  "Base Environment");'), (136, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::environment("source.ruby")["TM_COMMENT_STYLE"], "Ruby Environment");'), (138, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::environment("text.plain")["PATH"], "/usr/bin:/bin:/sbin");'), (139, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::environment("text.tex")["PATH"],   "/usr/bin:/bin:/sbin:/usr/texbin");'), (145, 1, u'+\t\tTS_ASSERT_EQUALS(baseEnv["TM_COMMENT_START"],   "/*");'), (146, 1, u'+\t\tTS_ASSERT_EQUALS(baseEnv["TM_COMMENT_STOP"],    "*/");'), (147, 1, u'+\t\tTS_ASSERT_EQUALS(baseEnv["TM_COMMENT_START_2"], "//");'), (148, 1, u'+\t\tTS_ASSERT(baseEnv.find("TM_COMMENT_STOP_2") == baseEnv.end());'), (151, 1, u'+\t\tTS_ASSERT_EQUALS(rubyEnv["TM_COMMENT_START"],   "# ");'), (152, 1, u'+\t\tTS_ASSERT(rubyEnv.find("TM_COMMENT_STOP") == rubyEnv.end());'), (153, 1, u'+\t\tTS_ASSERT_EQUALS(rubyEnv["TM_COMMENT_START_2"], "==begin");'), (154, 1, u'+\t\tTS_ASSERT_EQUALS(rubyEnv["TM_COMMENT_STOP_2"],  "==end");'), (159, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::query(bundles::kFieldKeyEquivalent, "^p", "source.c++").size(), 1);'), (160, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::query(bundles::kFieldKeyEquivalent, "^p", "source.c++", bundles::kItemTypeMenuTypes, oak::uuid_t(), false).size(), 2);'), (161, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::query(bundles::kFieldKeyEquivalent, "^p", "source.c++", bundles::kItemTypeMenuTypes, oak::uuid_t(), false, true).size(), 3);'), (163, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::query(bundles::kFieldTabTrigger, "bla", "source.any").size(), 1);'), (164, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::query(bundles::kFieldTabTrigger, "bla", "source.any").front()->name(), "Base Snippet");'), (165, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::query(bundles::kFieldTabTrigger, "bla", "source.c++").size(), 1);'), (166, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::query(bundles::kFieldTabTrigger, "bla", "source.c++").front()->name(), "C++ Snippet");'), (168, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::query(bundles::kFieldTabTrigger, "bla", "source.c++", bundles::kItemTypeMenuTypes, oak::uuid_t(), false).size(), 2);'), (169, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::query(bundles::kFieldTabTrigger, "bla", "source.c++", bundles::kItemTypeMenuTypes, oak::uuid_t(), false).front()->name(), "C++ Snippet");'), (170, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::query(bundles::kFieldTabTrigger, "bla", "source.c++", bundles::kItemTypeMenuTypes, oak::uuid_t(), false).back()->name(),  "Base Snippet");'), (175, 1, u'+\t\tTS_ASSERT_EQUALS(bundles::environment("text")["DialogPath"], jail.path("Bundles/Dialog.tmbundle/Support/bin"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+\t\tASSERT(value.get());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tASSERT(!path.empty() && path != NULL_STR);'), (15, 1, u'+\t\t\t\tASSERT_NE(ext, std::string::npos);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("xxxxxxxxx")), "xxxxxxxxx");'), (59, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str(".........")), ".........");'), (61, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("x........")), "x........");'), (62, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str(".x.......")), ".x.......");'), (63, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("..x......")), "..x......");'), (64, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("...x.....")), "...x.....");'), (65, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("....x....")), "....x....");'), (66, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str(".....x...")), ".....x...");'), (67, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("......x..")), "......x..");'), (68, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str(".......x.")), ".......x.");'), (69, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("........x")), "........x");'), (71, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("xx.......")), "xx.......");'), (72, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str(".xx......")), ".xx......");'), (73, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("...xx....")), "...xx....");'), (74, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("....xx...")), "....xx...");'), (75, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("......xx.")), "......xx.");'), (76, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str(".......xx")), ".......xx");'), (78, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("x..x.....")), "x..x.....");'), (79, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str(".x..x....")), ".x..x....");'), (80, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("..x..x...")), "..x..x...");'), (81, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("...x..x..")), "...x..x..");'), (82, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("....x..x.")), "....x..x.");'), (83, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str(".....x..x")), ".....x..x");'), (85, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("xxx......")), "xxx......");'), (86, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("...xxx...")), "...xxx...");'), (87, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("......xxx")), "......xxx");'), (89, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("x..x..x..")), "x..x..x..");'), (90, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str(".x..x..x.")), ".x..x..x.");'), (91, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(from_str("..x..x..x")), "..x..x..x");'), (96, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "........."), "xxxxxxxxx");'), (97, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "xxxxxxxxx"), ".........");'), (99, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "x........"), ".xxxxxxxx");'), (100, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", ".x......."), "x.xxxxxxx");'), (101, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "..x......"), "xx.xxxxxx");'), (102, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "...x....."), "xxx.xxxxx");'), (103, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "....x...."), "xxxx.xxxx");'), (104, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", ".....x..."), "xxxxx.xxx");'), (105, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "......x.."), "xxxxxx.xx");'), (106, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", ".......x."), "xxxxxxx.x");'), (107, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "........x"), "xxxxxxxx.");'), (109, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "xx......."), "..xxxxxxx");'), (110, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", ".xx......"), "x..xxxxxx");'), (111, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "...xx...."), "xxx..xxxx");'), (112, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "....xx..."), "xxxx..xxx");'), (113, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "......xx."), "xxxxxx..x");'), (114, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", ".......xx"), "xxxxxxx..");'), (116, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "x..x....."), ".xx.xxxxx");'), (117, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", ".x..x...."), "x.xx.xxxx");'), (118, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "..x..x..."), "xx.xx.xxx");'), (119, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "...x..x.."), "xxx.xx.xx");'), (120, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "....x..x."), "xxxx.xx.x");'), (121, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", ".....x..x"), "xxxxx.xx.");'), (123, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "xxx......"), "...xxxxxx");'), (124, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "...xxx..."), "xxx...xxx");'), (125, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "......xxx"), "xxxxxx...");'), (127, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "x..x..x.."), ".xx.xx.xx");'), (128, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", ".x..x..x."), "x.xx.xx.x");'), (129, 1, u'+\t\tTS_ASSERT_EQUALS(xor_rects("xxxxxxxxx", "..x..x..x"), "xx.xx.xx.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+\t\tASSERT(_delegate);')]
===========================================
Class: class run_tests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(107, 1, u'+\t\tTS_ASSERT_EQUALS(res->placement, output::tool_tip);'), (108, 1, u'+\t\tTS_ASSERT_EQUALS(res->out, "Hello");'), (109, 1, u'+\t\tTS_ASSERT_EQUALS(res->err, "");'), (110, 1, u'+\t\tTS_ASSERT_EQUALS(res->rc, 0);'), (116, 1, u'+\t\tTS_ASSERT_EQUALS(res->placement, output::new_window);'), (117, 1, u'+\t\tTS_ASSERT_EQUALS(res->out, "Hello");'), (118, 1, u'+\t\tTS_ASSERT_EQUALS(res->err, "");'), (119, 1, u'+\t\tTS_ASSERT_EQUALS(res->rc, 0);'), (125, 1, u'+\t\tTS_ASSERT_EQUALS(res->html, "Hello\\nError\\n");'), (126, 1, u'+\t\tTS_ASSERT_EQUALS(res->out, "");'), (127, 1, u'+\t\tTS_ASSERT_EQUALS(res->err, "");'), (128, 1, u'+\t\tTS_ASSERT_EQUALS(res->rc, 0);'), (134, 1, u'+\t\tTS_ASSERT_EQUALS(res->html, "Hello\\n");'), (135, 1, u'+\t\tTS_ASSERT_EQUALS(res->out, "");'), (136, 1, u'+\t\tTS_ASSERT_EQUALS(res->err, "Error\\n");'), (137, 1, u'+\t\tTS_ASSERT_EQUALS(res->rc, 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 1, u'+\t\tTS_ASSERT_EQUALS(doc->is_open(), true);'), (34, 1, u'+\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), content);'), (66, 1, u'+\t\tTS_ASSERT_EQUALS(path::content(jail.path("utf32-be.txt")), std::string("\\x00\\x00\\xFE\\xFF\\x00\\x00\\x00\\x77\\x00\\x00\\x00\\x6F\\x00\\x00\\x00\\x72\\x00\\x00\\x00\\x6C\\x00\\x00\\x00\\x64", 24));'), (67, 1, u'+\t\tTS_ASSERT_EQUALS(path::content(jail.path("utf32-le.txt")), std::string("\\xFF\\xFE\\x00\\x00\\x77\\x00\\x00\\x00\\x6F\\x00\\x00\\x00\\x72\\x00\\x00\\x00\\x6C\\x00\\x00\\x00\\x64\\x00\\x00\\x00", 24));'), (68, 1, u'+\t\tTS_ASSERT_EQUALS(path::content(jail.path("utf16-be.txt")), std::string("\\xFE\\xFF\\x00\\x77\\x00\\x6F\\x00\\x72\\x00\\x6C\\x00\\x64", 12));'), (69, 1, u'+\t\tTS_ASSERT_EQUALS(path::content(jail.path("utf16-le.txt")), std::string("\\xFF\\xFE\\x77\\x00\\x6F\\x00\\x72\\x00\\x6C\\x00\\x64\\x00", 12));'), (70, 1, u'+\t\tTS_ASSERT_EQUALS(path::content(jail.path("utf8-bom.txt")), std::string("\\xEF\\xBB\\xBF\\x77\\x6F\\x72\\x6C\\x64", 8));'), (71, 1, u'+\t\tTS_ASSERT_EQUALS(path::content(jail.path("utf8.txt")),     std::string("\\x77\\x6F\\x72\\x6C\\x64", 5));'), (81, 1, u'+\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (91, 1, u'+\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (102, 1, u'+\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");'), (113, 1, u'+\t\tTS_ASSERT_EQUALS(err, true);'), (123, 1, u'+\t\tTS_ASSERT_EQUALS(err, true);'), (134, 1, u'+\t\tTS_ASSERT_EQUALS(err, true);'), (145, 1, u'+\t\tTS_ASSERT_EQUALS(err, false);'), (146, 1, u'+\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
Class: class FileWatchTests : public CxxTest::TestSuite { 
Class: class GrammarFixturesTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+\t\tTS_ASSERT_EQUALS(items.size(), 1);'), (43, 1, u'+\t\tTS_ASSERT_EQUALS(items[0]->name(), "Plain Text");'), (49, 1, u'+\t\tTS_ASSERT_EQUALS(items.size(), 1);'), (50, 1, u'+\t\tTS_ASSERT_EQUALS(items[0]->name(), "Plain Text");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(doc->buffer().scope(0).left), "source.c");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(doc->buffer().scope(0).left), "source.c");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(doc->file_type(), "source.c");'), (31, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(doc->buffer().scope(0).left), "source.c");'), (32, 1, u'+\t\tTS_ASSERT_EQUALS(doc->file_type(), "source.c");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\tTS_ASSERT(*doc_1 == *doc_2);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(path::name(doc_2->path()), "file_2.txt");')]
===========================================
Class:class ReplaceTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "Lorem ipsum charum sit amet, abetarda adipisicing elit.");'), (29, 1, u'+\t\tTS_ASSERT_EQUALS(doc->buffer().substr(0, doc->buffer().size()), "Foo\\nJazz\\nFud\\n");'), (47, 1, u'+\t\tTS_ASSERT_EQUALS(path::content(jail.path("test.txt")), "Good\\nJazz\\nFud\\nA new line\\n");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+\t\tTS_ASSERT_EQUALS(path::content(jail.path("test.txt")), "\xc3\x86blegr\xc3\xb8d");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+\t\tTS_ASSERT_EQUALS(path::exists(jail.path("test.txt")), true);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(path::exists(jail.path("link.txt")), true);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(srcDoc->identifier(), linkDoc->identifier());'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(srcDoc->identifier(), aliasDoc->identifier());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t\tTS_ASSERT_EQUALS(marks.size(), 3);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(marks[0], "bookmark");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(marks[3], "bookmark");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(marks[12], "bookmark");'), (32, 1, u'+\t\tTS_ASSERT_EQUALS(doc->selection(), "2:2&3:1");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(248, 1, u'+\t\t\t\t\tASSERTF(to_action(sel) != kNop, "%s", sel.c_str());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(110, 1, u'+\t\t\t\tASSERT(i+1 < _marks.size() && _marks[i+1].type == mark_t::kEndMark);'), (148, 1, u'+\t\t\t\t\tASSERT_LT(to, index);'), (248, 1, u'+\t\tASSERT(document->is_open());'), (417, 1, u"+\t\t\tASSERT(fragments == std::count(str.begin(), str.end(), '\\n') + 1);"), (1215, 1, u'+\t\t\tASSERT_LE(range.min().index, caret); ASSERT_LE(caret, range.max().index);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+\t\tASSERT_LE(first.index, last.index);'), (15, 1, u'+\t\tASSERT_EQ(buffer.convert(first.index).line, buffer.convert(last.index).line);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\tTS_ASSERT(cb->empty());'), (14, 1, u'+\t\tTS_ASSERT(!cb->previous());'), (15, 1, u'+\t\tTS_ASSERT(!cb->current());'), (16, 1, u'+\t\tTS_ASSERT(!cb->next());'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(cb->current()->content(),  "fud");'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(cb->previous()->content(), "bar");'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(cb->previous()->content(), "foo");'), (28, 1, u'+\t\tTS_ASSERT(!cb->previous());'), (29, 1, u'+\t\tTS_ASSERT_EQUALS(cb->next()->content(),     "bar");'), (30, 1, u'+\t\tTS_ASSERT_EQUALS(cb->next()->content(),     "fud");'), (31, 1, u'+\t\tTS_ASSERT(!cb->next());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t\tTS_ASSERT_EQUALS(editor.as_string(), "Test");'), (41, 1, u'+\t\tTS_ASSERT_EQUALS(editor.as_string(), "2010-01-25");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t\tTS_ASSERT_EQUALS(editor.as_string(), "NiceHello world");'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(editor.as_string(), "Nice world");'), (31, 1, u'+\t\tTS_ASSERT_EQUALS(editor.as_string(), "Nice House");'), (35, 1, u'+\t\tTS_ASSERT_EQUALS(editor.as_string(), "Nice Big House");')]
===========================================
Class: class UiProxyFixturesTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(59, 1, u'+\t\t\tASSERT(to != kCharsetUTF8 || utf8::is_valid(buffer.begin(), buffer.end()));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+\t\t\t\tASSERT(!_saved);')]
===========================================
Class: class BundleFixturesTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(68, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_error, false);'), (69, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_file_type, "source.c");'), (82, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_error, false);'), (83, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_file_type, "source.c");'), (95, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_error, false);'), (96, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_file_type, "source.c");'), (109, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_error, false);'), (110, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_file_type, "text.plain");'), (111, 1, u'+\t\tTS_ASSERT_EQUALS(std::string(cb->_content->begin(), cb->_content->end()), "\xc3\x86blegr\xc3\xb8d");'), (124, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_error, true);'), (137, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_error, false);'), (138, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_file_type, "x.test");'), (139, 1, u'+\t\tTS_ASSERT_EQUALS(std::string(cb->_content->begin(), cb->_content->end()), "dummy");'), (152, 1, u'+\t\tTS_ASSERT_EQUALS(cb->_error, true);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 1, u'+\t\tTS_ASSERT_EQUALS(success, true);'), (70, 1, u'+\t\tTS_ASSERT_EQUALS(path::content(path), content);'), (86, 1, u'+\t\tTS_ASSERT_EQUALS(success, true);'), (87, 1, u'+\t\tTS_ASSERT_EQUALS(path::content(path), content);'), (102, 1, u'+\t\tTS_ASSERT_EQUALS(success, false);'), (118, 1, u'+\t\tTS_ASSERT_EQUALS(success, true);'), (119, 1, u'+\t\tTS_ASSERT_EQUALS(path::content(path), "AEblegrod...\\n");'), (135, 1, u'+\t\tTS_ASSERT_EQUALS(success, false);'), (149, 1, u'+\t\tTS_ASSERT(didSave);'), (150, 1, u'+\t\tTS_ASSERT_EQUALS(path::content(jail.path("file.sha1")), sha1(content));')]
===========================================
Class: class StatusTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/u_cr/cr.txt"), kFileTestNoParent);'), (28, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/u_rw/cr.txt"), kFileTestWritable);'), (29, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/u_rw/rw.txt"), kFileTestWritable);'), (30, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/u_rw/ro.txt"), kFileTestNotWritableButOwner);'), (31, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/u_ro/cr.txt"), kFileTestWritableByRoot); // ?'), (32, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/u_ro/rw.txt"), kFileTestWritable);'), (33, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/u_ro/ro.txt"), kFileTestNotWritableButOwner);'), (34, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/o_rw/cr.txt"), kFileTestWritable);'), (35, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/o_rw/rw.txt"), kFileTestWritableByRoot);'), (36, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/o_rw/ro.txt"), kFileTestNotWritable);'), (37, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/o_ro/cr.txt"), kFileTestWritableByRoot); // ?'), (38, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/o_ro/rw.txt"), kFileTestWritableByRoot);'), (39, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/tmp/x/o_ro/ro.txt"), kFileTestNotWritable);'), (48, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/Volumes/ro/cr.txt"), kFileTestReadOnly);'), (49, 1, u'+\t\t\tTS_ASSERT_EQUALS(file::status("/Volumes/ro/rw.txt"), kFileTestReadOnly);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\tTS_ASSERT(plist::save(xmlPlist, true, plist::kPlistFormatXML));'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(file::type(xmlPlist, io::bytes_ptr(new io::bytes_t(path::content(xmlPlist)))), "source.xml.plist");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(file::type(jail.path("ascii.plist"), io::bytes_ptr(new io::bytes_t("{ foo = \'bar\'; }"))), "source.plist");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+\t\t\t\tASSERT_EQ(errno, ENOENT);'), (135, 1, u'+\t\t\tASSERT(*stream);'), (168, 1, u'+\t\t\t\t\tASSERT(stream._replay);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(197, 1, u'+\t\tASSERTF(b[0] == \'/\', "\xe2\x80\x98%s\xe2\x80\x99 - \xe2\x80\x98%s\xe2\x80\x99\\n", p.c_str(), b.c_str());'), (738, 1, u'+\t\tASSERT_LT(index, files.size());'), (788, 1, u'+\t\tASSERT_EQ(res, last - first);'), (790, 1, u'+\t\tASSERT_EQ(rc, 0);'), (924, 1, u'+\t\t\tASSERT(overwrite == false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\t\tASSERT_EQ(access(src.c_str(), F_OK), 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t\tTS_ASSERT_EQUALS(path::get_attr(file, "foo"), "bar");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(path::get_attr(file, "buz"), "jazz");'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(path::get_attr(file, "foo"), NULL_STR);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(path::get_attr(file, "buz"), "jazz");'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(path::get_attr(file, "new"), "value");'), (29, 1, u'+\t\tTS_ASSERT_EQUALS(path::attributes(file).size(), 2);'), (31, 1, u'+\t\tTS_ASSERT_EQUALS(path::content(file), "\xc2\xabsome content\xc2\xbb");')]
===========================================
Class: class DisambiguatePathsTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t\t\tTSM_ASSERT(path::relative_to(path, _jail.path()).c_str(), _allowed.find(path) != _allowed.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+\t\tTS_ASSERT_EQUALS(path::exists(jail.path("test.txt")), true);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(path::exists(jail.path("link.txt")), true);'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(id_1, id_3);'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(id_1, id_5);'), (25, 1, u'+\t\tTS_ASSERT_DIFFERS(id_1, id_2);'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(id_2, id_4);'), (27, 1, u'+\t\tTS_ASSERT_DIFFERS(id_3, id_4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tTS_ASSERT_EQUALS(path::normalize("//foo//"),                            "/foo");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(path::normalize("/foo/././."),                         "/foo");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(path::normalize("/foo/bar/fud/../../baz/.."),          "/foo");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(path::normalize("//foo/bar//.//fud/../../baz/..//."),  "/foo");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(path::normalize("foo/.."),                             "");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(path::normalize("foo/../.."),                          "..");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(path::normalize("foo/../../bar"),                      "../bar");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(path::normalize("./bar"),                              "bar");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(path::normalize("../bar"),                             "../bar");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(path::normalize(NULL_STR),                             NULL_STR);'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(path::strip_extension("foo"),                   "foo");'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(path::strip_extension("foo.css.php"),           "foo.css");'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(path::strip_extension("/foo.bar/foo.css.php"),  "/foo.bar/foo.css");'), (28, 1, u'+\t\tTS_ASSERT_EQUALS(path::strip_extensions("foo"),                   "foo");'), (29, 1, u'+\t\tTS_ASSERT_EQUALS(path::strip_extensions("foo.css.php"),           "foo");'), (30, 1, u'+\t\tTS_ASSERT_EQUALS(path::strip_extensions("/foo.bar/foo.css.php"),  "/foo.bar/foo");'), (32, 1, u'+\t\tTS_ASSERT_EQUALS(path::extension("foo"),                   "");'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(path::extension("foo.css.php"),           ".php");'), (34, 1, u'+\t\tTS_ASSERT_EQUALS(path::extension("/foo.bar/foo.css.php"),  ".php");'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(path::extensions("foo"),                   "");'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(path::extensions("foo.css.php"),           ".css.php");'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(path::extensions("/foo.bar/foo.css.php"),  ".css.php");'), (43, 1, u'+\t\tTS_ASSERT_EQUALS(path::extensions(".profile"),                ".profile");'), (44, 1, u'+\t\tTS_ASSERT_EQUALS(path::strip_extensions(".profile"),          "");'), (46, 1, u'+\t\tTS_ASSERT_EQUALS(path::extensions("/home/me/.profile"),       ".profile");'), (47, 1, u'+\t\tTS_ASSERT_EQUALS(path::strip_extensions("/home/me/.profile"), "/home/me/");'), (52, 1, u'+\t\tTS_ASSERT_EQUALS(path::extensions("(allan) ##textmate (103,+nt) Issues with 1.5.10? See h\xe2\x80\xa6 2.limechat"),       ".limechat");'), (53, 1, u'+\t\tTS_ASSERT_EQUALS(path::strip_extensions("(allan) ##textmate (103,+nt) Issues with 1.5.10? See h\xe2\x80\xa6 2.limechat"), "(allan) ##textmate (103,+nt) Issues with 1.5.10? See h\xe2\x80\xa6 2");'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(path::extensions("index.php4"),                    ".php4");'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(path::strip_extensions("index.php4"),              "index");'), (58, 1, u'+\t\tTS_ASSERT_EQUALS(path::extensions("TextMate.tar.bz2"),              ".tar.bz2");'), (59, 1, u'+\t\tTS_ASSERT_EQUALS(path::strip_extensions("TextMate.tar.bz2"),        "TextMate");'), (61, 1, u'+\t\tTS_ASSERT_EQUALS(path::extensions("TextMate_1.5.10.dmg"),           ".dmg");'), (62, 1, u'+\t\tTS_ASSERT_EQUALS(path::strip_extensions("TextMate_1.5.10.dmg"),     "TextMate_1.5.10");'), (64, 1, u'+\t\tTS_ASSERT_EQUALS(path::extensions("TextMate_1.5.10.tar.bz2"),       ".tar.bz2");'), (65, 1, u'+\t\tTS_ASSERT_EQUALS(path::strip_extensions("TextMate_1.5.10.tar.bz2"), "TextMate_1.5.10");'), (70, 1, u'+\t\tTS_ASSERT_EQUALS(path::rank("foo.css.php", "hp"),          0);'), (71, 1, u'+\t\tTS_ASSERT_DIFFERS(path::rank("foo.css.php", "php"),        0);'), (72, 1, u'+\t\tTS_ASSERT_EQUALS(path::rank("foo.css.php", "gphp"),        0);'), (73, 1, u'+\t\tTS_ASSERT_DIFFERS(path::rank("foo.css.php", "css.php"),    0);'), (74, 1, u'+\t\tTS_ASSERT_LESS_THAN(path::rank("foo.css.php", "css.php"),  path::rank("foo.css.php", "php"));'), (79, 1, u'+\t\tTS_ASSERT_EQUALS(path::relative_to("/foo/bar/fud", "/foo"),      "bar/fud");'), (80, 1, u'+\t\tTS_ASSERT_EQUALS(path::relative_to("/foo/bar/fud", "/foo/bar"),  "fud");'), (81, 1, u'+\t\tTS_ASSERT_EQUALS(path::relative_to("/foo/fud",     "/foo/bar"),  "../fud");'), (82, 1, u'+\t\tTS_ASSERT_EQUALS(path::relative_to("/foo/baz/fud", "/foo/bar"),  "../baz/fud");'), (87, 1, u'+\t\tTS_ASSERT_EQUALS(path::name("/foo/bar/fud"),     "fud");'), (88, 1, u'+\t\tTS_ASSERT_EQUALS(path::parent("/foo/bar/fud"),   "/foo/bar");'), (89, 1, u'+\t\tTS_ASSERT_EQUALS(path::join("/foo/bar", "fud"),  "/foo/bar/fud");'), (91, 1, u'+\t\tTS_ASSERT_EQUALS(path::name("foo/bar/fud"),      "fud");'), (92, 1, u'+\t\tTS_ASSERT_EQUALS(path::parent("foo/bar/fud"),    "foo/bar");'), (93, 1, u'+\t\tTS_ASSERT_EQUALS(path::join("foo/bar", "fud"),   "foo/bar/fud");'), (100, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(home()),               "~");'), (101, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(join(home(), "foo")),  "~/foo");'), (102, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde("foo" + home()),       "foo" + home());'), (103, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde("/dummy"),             "/dummy");'), (104, 1, u'+\t\tTS_ASSERT_EQUALS(path::with_tilde(NULL_STR),             NULL_STR);'), (109, 1, u'+\t\tTS_ASSERT_EQUALS(path::resolve(NULL_STR), NULL_STR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_1")),      jail.path("file"));'), (30, 1, u'+\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_2")),      jail.path("dir"));'), (31, 1, u'+\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_3")),      jail.path("dir/foo"));'), (32, 1, u'+\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_4")),      jail.path("dir/bar"));'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_5")),      jail.path("dir/foo/bar"));'), (34, 1, u'+\t\tTS_ASSERT_EQUALS(resolve(jail.path("dir/link_6")),  jail.path("file"));'), (35, 1, u'+\t\tTS_ASSERT_EQUALS(resolve(jail.path("dir/link_7")),  jail.path("dir"));'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(resolve(jail.path("dir/link_8")),  jail.path("dir/foo"));'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(resolve(jail.path("dir/link_9")),  jail.path("link_2/link_9"));'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(resolve(jail.path("dir/link_10")), jail.path("link_2/link_9"));'), (39, 1, u'+\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_11")),     jail.path("missing"));'), (40, 1, u'+\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_12")),     jail.path("dir/missing"));'), (41, 1, u'+\t\tTS_ASSERT_EQUALS(resolve(jail.path("link_13")),     jail.path("dir/missing"));'), (67, 1, u'+\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_1")),      jail.path("file"));'), (68, 1, u'+\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_2")),      jail.path("dir"));'), (69, 1, u'+\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_3")),      jail.path("dir/foo"));'), (70, 1, u'+\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_4")),      jail.path("link_2/bar"));'), (71, 1, u'+\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_5")),      jail.path("link_3/bar"));'), (72, 1, u'+\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("dir/link_6")),  jail.path("file"));'), (73, 1, u'+\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("dir/link_7")),  jail.path("dir"));'), (74, 1, u'+\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("dir/link_8")),  jail.path("link_2/foo"));'), (75, 1, u'+\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("dir/link_9")),  jail.path("link_2/link_9"));'), (76, 1, u'+\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("dir/link_10")), jail.path("link_2/link_9"));'), (77, 1, u'+\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_11")),     jail.path("missing"));'), (78, 1, u'+\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_12")),     jail.path("dir/missing"));'), (79, 1, u'+\t\tTS_ASSERT_EQUALS(resolve_head(jail.path("link_13")),     jail.path("link_2/missing"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo.txt"), " copy"),          jail.path("foo.txt"));'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo.txt"), " copy"),          jail.path("foo copy.txt"));'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo.txt"), " copy"),          jail.path("foo copy 2.txt"));'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo.txt"), " copy"),          jail.path("foo copy 3.txt"));'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo copy.txt"), " copy"),     jail.path("foo copy 4.txt"));'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo copy 2.txt"), " copy"),   jail.path("foo copy 4.txt"));'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo copy 3.txt"), " copy"),   jail.path("foo copy 4.txt"));'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("foo copy 4.txt"), " copy"),   jail.path("foo copy 4.txt"));'), (29, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("untitled folder")),           jail.path("untitled folder"));'), (31, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("untitled folder")),           jail.path("untitled folder 2"));'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("untitled folder")),           jail.path("untitled folder 3"));'), (34, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("untitled folder 2")),         jail.path("untitled folder 3"));'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("bar.txt")),                   jail.path("bar.txt"));'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("bar.txt")),                   jail.path("bar 2.txt"));'), (40, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("bar.txt")),                   jail.path("bar 3.txt"));'), (42, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("bar.txt")),                   jail.path("bar 4.txt"));'), (43, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("bar 2.txt")),                 jail.path("bar 4.txt"));'), (44, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("bar 3.txt")),                 jail.path("bar 4.txt"));'), (51, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path("abcd.txt"), " copy"), jail.path("abcd copy.txt"));'), (53, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path(" copy.txt"), " copy"), jail.path(" copy.txt"));'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path(" copy.txt"), " copy"), jail.path(" copy copy.txt"));'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(path::unique(jail.path(" copy.txt"), " copy"), jail.path(" copy copy 2.txt"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t\tTS_ASSERT_EQUALS(statfs(path::home().c_str(), &buf), 0);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(getattrlist(buf.f_mntonname, &(attrlist){ ATTR_BIT_MAP_COUNT, 0, 0, ATTR_VOL_INFO|ATTR_VOL_CAPABILITIES, 0, 0, 0 }, &attrBuf, sizeof(attrBuf), 0), 0);'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(attrBuf.length, sizeof(attrBuf));'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(attrBuf.attr.capabilities[VOL_CAPABILITIES_INTERFACES] & VOL_CAP_INT_EXCHANGEDATA, VOL_CAP_INT_EXCHANGEDATA);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+\t\tASSERT(utf8::is_valid(text.begin(), text.end()));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(59, 1, u'+\t\t\tASSERT(utf8::is_valid(text.begin(), text.end()));'), (91, 1, u'+\t\tASSERT_LE(from, to); ASSERT_LE(to, _length);'), (266, 1, u'+\t\tASSERT_LE(bufferOffset, from); ASSERT_LE(to, bufferOffset + length());'), (330, 1, u'+\t\t\tASSERT(utf8::is_valid(str.begin(), str.end()));'), (424, 1, u'+\t\t\t\tASSERT_EQ(node->type(), kNodeTypeText);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tASSERT(color);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(62, 1, u'+\tvoid tearDown () { TS_ASSERT(tree.structural_integrity()); tree.clear(); }'), (66, 1, u'+\t\tTS_ASSERT(tree.structural_integrity());'), (67, 1, u'+\t\tTS_ASSERT_EQUALS(tree.aggregated().number_of_children, tree.size());'), (75, 1, u'+\t\tTS_ASSERT_EQUALS(buf, buffer);'), (80, 1, u'+\t\tTS_ASSERT_EQUALS(buf, buffer);'), (91, 1, u'+\t\tTS_ASSERT_EQUALS(buf, buffer);'), (99, 1, u'+\t\tTS_ASSERT_EQUALS(buf, buffer);'), (107, 1, u'+\t\tTS_ASSERT_EQUALS(maxLen, tree.aggregated().width);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+\t\tTS_ASSERT(tree.structural_integrity());'), (38, 1, u'+\t\tTS_ASSERT(tree.structural_integrity());'), (39, 1, u'+\t\tTS_ASSERT_EQUALS(tree.size(), keys.size());'), (44, 1, u'+\t\tTS_ASSERT_EQUALS(tree.size(), keys.size());'), (47, 1, u'+\t\tTS_ASSERT(std::equal(tree.begin(),  tree.end(),  keys.begin(),  &numeric_bin_comp));'), (48, 1, u'+\t\tTS_ASSERT(std::equal(tree.rbegin(), tree.rend(), keys.rbegin(), &numeric_bin_comp));'), (56, 1, u'+\t\tTS_ASSERT(tmp.structural_integrity());'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(tmp.size(), keys.size());'), (60, 1, u'+\t\tTS_ASSERT(std::equal(tmp.begin(), tmp.end(), keys.begin(), &numeric_bin_comp));'), (63, 1, u'+\t\tTS_ASSERT(tmp.empty());'), (64, 1, u'+\t\tTS_ASSERT(std::equal(tree.begin(), tree.end(), keys.begin(), &numeric_bin_comp));'), (67, 1, u'+\t\tTS_ASSERT_EQUALS(tmp.size(), keys.size());'), (68, 1, u'+\t\tTS_ASSERT(std::equal(tmp.begin(), tmp.end(), tree.begin(), &numeric_bin_comp_2));'), (78, 1, u'+\t\t\tTS_ASSERT_DIFFERS(tree.find(keys[i], &numeric_comp), tree.end());'), (82, 1, u'+\t\t\tTS_ASSERT_EQUALS(tree.size(), tmp.size());'), (83, 1, u'+\t\t\tTS_ASSERT(tree.structural_integrity());'), (84, 1, u'+\t\t\tTS_ASSERT(std::equal(tree.begin(), tree.end(), tmp.begin(), &numeric_bin_comp));'), (88, 1, u'+\t\tTS_ASSERT_EQUALS(tree.size(), keys.size());'), (91, 1, u'+\t\tTS_ASSERT(std::equal(tree.begin(), tree.end(), keys.begin(), &numeric_bin_comp));'), (96, 1, u'+\t\t\tTS_ASSERT_DIFFERS(tree.find(*key, &numeric_comp), tree.end());'), (98, 1, u'+\t\t\tTS_ASSERT(tree.structural_integrity());'), (101, 1, u'+\t\tTS_ASSERT(tree.empty());'), (116, 1, u'+\t\t\tTS_ASSERT_DIFFERS(tree.find(*key, &numeric_comp), tree.end());'), (117, 1, u'+\t\t\tTS_ASSERT_EQUALS(tree.find(*key, &numeric_comp)->key, *key);'), (119, 1, u'+\t\t\tTS_ASSERT_DIFFERS(tree.lower_bound(*key, &numeric_comp), tree.end());'), (120, 1, u'+\t\t\tTS_ASSERT_EQUALS(tree.lower_bound(*key, &numeric_comp)->key, *key);'), (122, 1, u'+\t\t\tTS_ASSERT_EQUALS(tree.upper_bound(*key, &numeric_comp), ++tree.find(*key, &numeric_comp));'), (125, 1, u'+\t\t\t\tTS_ASSERT_LESS_THAN(*key, tree.upper_bound(*key, &numeric_comp)->key);'), (135, 1, u'+\t\t\tTS_ASSERT_EQUALS(tree.find(*key, &numeric_comp), tree.end());'), (146, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(tree.lower_bound(*key, &numeric_comp), tree.end());'), (150, 1, u'+\t\t\t\tTS_ASSERT_LESS_THAN_EQUALS(*key, tree.lower_bound(*key, &numeric_comp)->key);'), (151, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(tree.lower_bound(*key, &numeric_comp)->key, *existingKeys.lower_bound(*key));'), (163, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(tree.upper_bound(*key, &numeric_comp), tree.end());'), (167, 1, u'+\t\t\t\tTS_ASSERT_LESS_THAN(*key, tree.upper_bound(*key, &numeric_comp)->key);'), (168, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(tree.upper_bound(*key, &numeric_comp)->key, *existingKeys.upper_bound(*key));'), (180, 1, u'+\t\tTS_ASSERT(std::equal(tree.begin(), tree.end(), &keys[0], &numeric_bin_comp));'), (182, 1, u'+\t\tTS_ASSERT_EQUALS(tree.lower_bound(0, &numeric_comp),  tree.begin());'), (183, 1, u'+\t\tTS_ASSERT_EQUALS(tree.lower_bound(1, &numeric_comp),  tree.begin());'), (184, 1, u'+\t\tTS_ASSERT_DIFFERS(tree.lower_bound(2, &numeric_comp), tree.begin());'), (185, 1, u'+\t\tTS_ASSERT_DIFFERS(tree.upper_bound(5, &numeric_comp), tree.end());'), (186, 1, u'+\t\tTS_ASSERT_EQUALS(tree.upper_bound(6, &numeric_comp),  tree.end());'), (187, 1, u'+\t\tTS_ASSERT_EQUALS(tree.upper_bound(7, &numeric_comp),  tree.end());'), (189, 1, u'+\t\tTS_ASSERT_EQUALS(std::distance(tree.begin(), tree.lower_bound(3, &numeric_comp)), 2);'), (190, 1, u'+\t\tTS_ASSERT_EQUALS(std::distance(tree.begin(), tree.upper_bound(3, &numeric_comp)), 5);'), (192, 1, u'+\t\tTS_ASSERT_EQUALS(std::distance(tree.begin(), tree.lower_bound(4, &numeric_comp)), 5);'), (193, 1, u'+\t\tTS_ASSERT_EQUALS(std::distance(tree.begin(), tree.upper_bound(4, &numeric_comp)), 7);'), (195, 1, u'+\t\tTS_ASSERT_EQUALS(std::distance(tree.begin(), tree.lower_bound(5, &numeric_comp)), 7);'), (196, 1, u'+\t\tTS_ASSERT_EQUALS(std::distance(tree.begin(), tree.upper_bound(5, &numeric_comp)), 8);'), (198, 1, u'+\t\tTS_ASSERT_EQUALS(std::distance(tree.begin(), tree.lower_bound(6, &numeric_comp)), 8);'), (199, 1, u'+\t\tTS_ASSERT_EQUALS(std::distance(tree.begin(), tree.upper_bound(6, &numeric_comp)), 9);'), (201, 1, u'+\t\tTS_ASSERT(tree.structural_integrity());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(78, 1, u'+\t\tTS_ASSERT_EQUALS(tree.size(), 2);'), (79, 1, u'+\t\tTS_ASSERT_DIFFERS(tree.find(30, &position_comp), tree.end());'), (80, 1, u'+\t\tTS_ASSERT_DIFFERS(tree.find(50, &position_comp), tree.end());'), (88, 1, u'+\t\tTS_ASSERT_EQUALS(tree.size(), 2);'), (89, 1, u'+\t\tTS_ASSERT_DIFFERS(tree.find(20, &position_comp), tree.end());'), (90, 1, u'+\t\tTS_ASSERT_DIFFERS(tree.find(30, &position_comp), tree.end());'), (111, 1, u'+\t\tTS_ASSERT_EQUALS(fromTree, keys);'), (128, 1, u'+\t\t\tTS_ASSERT_DIFFERS(tree.find(*key, &position_comp), tree.end());'), (139, 1, u'+\t\t\tTS_ASSERT_DIFFERS(it, tree.end());'), (145, 1, u'+\t\tTS_ASSERT_EQUALS(tree.size(), keys.size());'), (150, 1, u'+\t\tTS_ASSERT(tree.empty());')]
===========================================
Class: class DownloadTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(77, 1, u'+\t\tTS_ASSERT_EQUALS(network::download(network::request_t(url, &myFilter, NULL), &error), 200);'), (87, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(status, "HTTP/1.0 200 OK");'), (88, 1, u'+\t\t\t\tTS_ASSERT(headers.find("content-length") != headers.end());'), (89, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(headers.find("content-length")->second, text::format("%zu", fileSize));'), (90, 1, u'+\t\t\t\tTS_ASSERT_EQUALS(body, std::string(fileContent, fileContent + fileSize));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("@"),    "");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("#"),    "");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("$"),    "");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("^"),    "");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("~"),    "");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("@~"),   "");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("!"),    "!");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("\\\\@"),    "@");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("\\\\#"),    "#");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("\\\\$"),    "$");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("\\\\^"),    "^");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("\\\\~"),    "~");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("@\\\\~"),   "@~");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("~\\\\@"),   "~@");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("\\\\!"),    "!");'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("\\\\\\\\"),   "\\\\");'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(ns::normalize_event_string("^$@~#1"), "#^~$@1");'), (31, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("@"),    "@");'), (32, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("#"),    "#");'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("$"),    "$");'), (34, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("^"),    "^");'), (35, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("~"),    "~");'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("@~"),   "\xe2\x8c\x98~");'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("~@"),   "\xe2\x8c\xa5@");'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("!"),    "!");'), (39, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("\\\\"),   "\\\\");'), (41, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("@1"),    "\xe2\x8c\x981");'), (42, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("#1"),    "1\xe2\x83\xa3");'), (43, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("$1"),    "\xe2\x87\xa71");'), (44, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("^1"),    "\xe2\x8c\x831");'), (45, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("~1"),    "\xe2\x8c\xa51");'), (46, 1, u'+\t\tTS_ASSERT_EQUALS(ns::glyphs_for_event_string("A"),     "\xe2\x87\xa7A");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(102, 1, u'+\t\tASSERT(!escape);')]
===========================================
Class: class AnchorsTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(97, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "xy xy\\nxy xy\\n[xy xy\\nxy xy]\\nxy xy"), "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb xy\\nxy xy\\n[\xc2\xabbom\xc2\xbbxy\xc2\xab/bom\xc2\xbb xy\\nxy xy]\\nxy \xc2\xabeof\xc2\xbbxy\xc2\xab/eof\xc2\xbb\xc2\xab/test\xc2\xbb");'), (98, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "xy xy"),                               "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb \xc2\xabeof\xc2\xbbxy\xc2\xab/eof\xc2\xbb\xc2\xab/test\xc2\xbb");'), (99, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "xy xy\\n"),                             "\xc2\xabtest\xc2\xbb\xc2\xabbof\xc2\xbbxy\xc2\xab/bof\xc2\xbb xy\\n\xc2\xab/test\xc2\xbb");'), (100, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "[xy xy]"),                             "\xc2\xabtest\xc2\xbb[\xc2\xabbom\xc2\xbbxy\xc2\xab/bom\xc2\xbb xy]\xc2\xab/test\xc2\xbb");'), (106, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "foo\\n"),        "\xc2\xabtest\xc2\xbb\xc2\xabhead\xc2\xbb\xc2\xabb-buf\xc2\xbbfoo\xc2\xab/b-buf\xc2\xbb\xc2\xab/head\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (107, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "> foo\\n"),      "\xc2\xabtest\xc2\xbb\xc2\xabgt\xc2\xbb> \xc2\xabb-cap\xc2\xbbfoo\xc2\xab/b-cap\xc2\xbb\xc2\xab/gt\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (108, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "foo <\\n"),      "\xc2\xabtest\xc2\xbb\xc2\xablt\xc2\xbb\xc2\xabb-buf\xc2\xbbfoo\xc2\xab/b-buf\xc2\xbb <\xc2\xab/lt\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (109, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "\\nfoo\\n"),      "\xc2\xabtest\xc2\xbb\\n\xc2\xabline\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb\xc2\xab/line\xc2\xbb\\n\xc2\xab/test\xc2\xbb");'), (110, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "\\nfoo"),        "\xc2\xabtest\xc2\xbb\\n\xc2\xabtail\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb\xc2\xab/tail\xc2\xbb\xc2\xab/test\xc2\xbb");'), (111, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "\\nfoo bar"),    "\xc2\xabtest\xc2\xbb\\n\xc2\xabtail\xc2\xbb\xc2\xabb-line\xc2\xbbfoo\xc2\xab/b-line\xc2\xbb \xc2\xabe-buf\xc2\xbbbar\xc2\xab/e-buf\xc2\xbb\xc2\xab/tail\xc2\xbb\xc2\xab/test\xc2\xbb");')]
===========================================
Class: class BeginWhileTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(146, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, buf), res);'), (147, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "> _first\\n> second_\\n> third\\nfourth"),       "\xc2\xabmdown\xc2\xbb\xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbb\xc2\xabem\xc2\xbb_first\\n> second_\xc2\xab/em\xc2\xbb\xc2\xab/p\xc2\xbb\\n> \xc2\xabp\xc2\xbbthird\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb\xc2\xabp\xc2\xbbfourth\xc2\xab/p\xc2\xbb\xc2\xab/mdown\xc2\xbb");'), (148, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "> > _first\\n> > second_\\n> > third\\nfourth"), "\xc2\xabmdown\xc2\xbb\xc2\xabq\xc2\xbb> \xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbb\xc2\xabem\xc2\xbb_first\\n> > second_\xc2\xab/em\xc2\xbb\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb> \xc2\xabq\xc2\xbb> \xc2\xabp\xc2\xbbthird\xc2\xab/p\xc2\xbb\\n\xc2\xab/q\xc2\xbb\xc2\xab/q\xc2\xbb\xc2\xabp\xc2\xbbfourth\xc2\xab/p\xc2\xbb\xc2\xab/mdown\xc2\xbb");')]
===========================================
Class: class CapturesTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "Lorem ipsum."),                       "\xc2\xabtest\xc2\xbbLorem ipsum.\xc2\xab/test\xc2\xbb");'), (45, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "fixup! Lorem ipsum."),                "\xc2\xabtest\xc2\xbb\xc2\xabfixup\xc2\xbbfixup!\xc2\xab/fixup\xc2\xbb Lorem ipsum.\xc2\xab/test\xc2\xbb");'), (46, 1, u'+\t\tTS_ASSERT_EQUALS(markup(grammar, "Lorem ipsum dolor sit amet."),        "\xc2\xabtest\xc2\xbb\xc2\xabwarn\xc2\xbbLorem ipsum dolor sit amet.\xc2\xab/warn\xc2\xbb\xc2\xab/test\xc2\xbb");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(359, 1, u'+\t\tASSERT(res);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t\tTS_ASSERT_DELTA(now.value(), stillNow.value(), 0.5);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(now.value(), stillNow.value());'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(now.value(), stillNow.value());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(75, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(plist::create_delta(oldPlist, newPlist)), to_s(deltaPlist));'), (80, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(plist::merge_delta(plists)), to_s(newPlist));'), (86, 1, u'+\t\tTS_ASSERT(plist::equal(plist::create_delta(oldPlist, newPlist), deltaPlist));'), (87, 1, u'+\t\tTS_ASSERT(plist::equal(plist::merge_delta(plists), newPlist));'), (88, 1, u'+\t\tTS_ASSERT(!plist::equal(oldPlist, newPlist));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t\tTS_ASSERT_EQUALS(regular("{ foo = \\"bar\\\\\\\\n\\"; }"), "{ foo = \\"bar\\\\\\\\n\\"; }");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(regular("{ \\"\xc3\xa6ble\\" = bar; }"), "{ \\"\xc3\xa6ble\\" = \\"bar\\"; }");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(regular("{ f-o_o. = bar; }"), "{ f-o_o. = \\"bar\\"; }");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(regular("{ _foo = bar; }"), "{ _foo = \\"bar\\"; }");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(regular("{ \\".foo\\" = bar; }"), "{ \\".foo\\" = \\"bar\\"; }");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(regular("{ \\"-foo\\" = bar; }"), "{ \\"-foo\\" = \\"bar\\"; }");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(regular("( 1, 2, 3, )"),           "( \\"1\\", \\"2\\", \\"3\\" )");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(regular("( { a = 1; b = 2; } )"),  "(\\n\\t{\\ta = \\"1\\";\\n\\t\\tb = \\"2\\";\\n\\t},\\n)");'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(enhanced("{ foo = \\"bar\\\\\\\\n\\"; }"), "{ foo = \'bar\\\\n\'; }");'), (28, 1, u'+\t\tTS_ASSERT_EQUALS(enhanced("{ foo = \\"\'\\"; }"),        "{ foo = \\"\'\\"; }");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 1, u'+\t\tTS_ASSERT_EQUALS(boost::get<int32_t>(&empty),     (int32_t*)NULL);'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(boost::get<std::string>(&empty), (std::string*)NULL);'), (61, 1, u'+\t\tTS_ASSERT_EQUALS(plist::is_true(plist::any_t()),                     false);'), (62, 1, u'+\t\tTS_ASSERT_EQUALS(plist::is_true(plist::any_t(false)),                false);'), (63, 1, u'+\t\tTS_ASSERT_EQUALS(plist::is_true(plist::any_t(true)),                 true);'), (64, 1, u'+\t\tTS_ASSERT_EQUALS(plist::is_true(plist::any_t(0)),                    false);'), (65, 1, u'+\t\tTS_ASSERT_EQUALS(plist::is_true(plist::any_t(1)),                    true);'), (66, 1, u'+\t\tTS_ASSERT_EQUALS(plist::is_true(plist::any_t(std::string("0"))),     false);'), (67, 1, u'+\t\tTS_ASSERT_EQUALS(plist::is_true(plist::any_t(std::string("1"))),     true);'), (68, 1, u'+\t\tTS_ASSERT_EQUALS(plist::is_true(plist::any_t(std::string("NO"))),    true);'), (69, 1, u'+\t\tTS_ASSERT_EQUALS(plist::is_true(plist::any_t(std::string("YES"))),   true);'), (70, 1, u'+\t\tTS_ASSERT_EQUALS(plist::is_true(plist::any_t(std::string("false"))), true);'), (71, 1, u'+\t\tTS_ASSERT_EQUALS(plist::is_true(plist::any_t(std::string("true"))),  true);'), (76, 1, u'+\t\tTS_ASSERT_EQUALS(parse_int("1"),            1);'), (77, 1, u'+\t\tTS_ASSERT_EQUALS(parse_int("42"),          42);'), (78, 1, u'+\t\tTS_ASSERT_EQUALS(parse_int("325643"),  325643);'), (79, 1, u'+\t\tTS_ASSERT_EQUALS(parse_int("1.0"),          0);'), (85, 1, u'+\t\tTS_ASSERT(boost::get<bool>(&truePlist));'), (86, 1, u'+\t\tTS_ASSERT_EQUALS(boost::get<bool>(truePlist), true);'), (89, 1, u'+\t\tTS_ASSERT(boost::get<bool>(&falsePlist));'), (90, 1, u'+\t\tTS_ASSERT_EQUALS(boost::get<bool>(falsePlist), false);'), (93, 1, u'+\t\tTS_ASSERT(boost::get< std::vector<plist::any_t> >(&mixedPlist));'), (95, 1, u'+\t\tTS_ASSERT_EQUALS(boost::get<bool>(v[0]), true);'), (96, 1, u'+\t\tTS_ASSERT_EQUALS(boost::get<bool>(v[1]), false);'), (104, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("\\"bar\\""),              "bar");'), (105, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("\\"\\\\\\"bar\\\\\\"\\""),      "\\"bar\\"");'), (106, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("\\"\\\\b\\\\a\\\\r\\""),        "\\\\b\\\\a\\\\r");'), (107, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("\\"\\\\\\\\b\\\\\\\\a\\\\\\\\r\\""),  "\\\\b\\\\a\\\\r");'), (108, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("\\"bar"),                NULL_STR);'), (109, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("\\"bar\\\\\\""),            NULL_STR);'), (114, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("\'bar\'"),              "bar");'), (115, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("\'\'\'bar\'\'\'"),          "\'bar\'");'), (116, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("\'\\\\b\\\\a\\\\r\'"),        "\\\\b\\\\a\\\\r");'), (117, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("\'\\\\\\\\b\\\\\\\\a\\\\\\\\r\'"),  "\\\\\\\\b\\\\\\\\a\\\\\\\\r");'), (118, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("\'bar"),               NULL_STR);'), (119, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("\'bar\\\\\'"),            "bar\\\\");'), (124, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("bar"),       "bar");'), (125, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("bar5"),      "bar5");'), (126, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("bar_"),      "bar_");'), (127, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("bar-"),      "bar-");'), (128, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("bar."),      "bar.");'), (129, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("_bar"),      "_bar");'), (130, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str(".bar"),      NULL_STR);'), (131, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("5bar"),      NULL_STR);'), (132, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("-bar"),      NULL_STR);'), (133, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("-5bar"),     NULL_STR);'), (134, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("bar,"),      NULL_STR);'), (135, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("bar)"),      NULL_STR);'), (136, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("bar="),      NULL_STR);'), (137, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("bar;"),      NULL_STR);'), (142, 1, u'+\t\tTS_ASSERT_EQUALS(is_array("( )"),       true);'), (143, 1, u'+\t\tTS_ASSERT_EQUALS(is_array("( a )"),     true);'), (144, 1, u'+\t\tTS_ASSERT_EQUALS(is_array("( a, )"),    true);'), (145, 1, u'+\t\tTS_ASSERT_EQUALS(is_array("( "),        false);'), (146, 1, u'+\t\tTS_ASSERT_EQUALS(is_array("( , )"),     false);'), (147, 1, u'+\t\tTS_ASSERT_EQUALS(is_array("( a "),      false);'), (148, 1, u'+\t\tTS_ASSERT_EQUALS(is_array("( a b )"),   false);'), (150, 1, u'+\t\tTS_ASSERT_EQUALS(parse_array("( )").size(),       0);'), (151, 1, u'+\t\tTS_ASSERT_EQUALS(parse_array("( a )").size(),     1);'), (152, 1, u'+\t\tTS_ASSERT_EQUALS(parse_array("( a, )").size(),    1);'), (153, 1, u'+\t\tTS_ASSERT_EQUALS(parse_array("( a, b )").size(),  2);'), (154, 1, u'+\t\tTS_ASSERT_EQUALS(parse_array("( a, b, )").size(), 2);'), (159, 1, u'+\t\tTS_ASSERT_EQUALS(is_dict("{ }"),                       true);'), (160, 1, u'+\t\tTS_ASSERT_EQUALS(is_dict("{ key = val; }"),            true);'), (161, 1, u'+\t\tTS_ASSERT_EQUALS(is_dict("{ key = val; key = val; }"), true);'), (162, 1, u'+\t\tTS_ASSERT_EQUALS(is_dict("{ 1 = val; 2 = val; }"),     true);'), (163, 1, u'+\t\tTS_ASSERT_EQUALS(is_dict("{ key = val }"),             false);'), (164, 1, u'+\t\tTS_ASSERT_EQUALS(is_dict("{ key = val; "),             false);'), (165, 1, u'+\t\tTS_ASSERT_EQUALS(is_dict("{ key val; }"),              false);'), (166, 1, u'+\t\tTS_ASSERT_EQUALS(is_dict("{ key = \'val; }"),           false);'), (168, 1, u'+\t\tTS_ASSERT_EQUALS(parse_dict("{ }").size(),                      0);'), (169, 1, u'+\t\tTS_ASSERT_EQUALS(parse_dict("{ key = val; }").size(),           1);'), (170, 1, u'+\t\tTS_ASSERT_EQUALS(parse_dict("{ 1 = val; 2 = val; }").size(),    2);'), (175, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("/* ** */ /* /* */ bar /* ** */ /* /* */"), "bar");'), (176, 1, u'+\t\tTS_ASSERT_EQUALS(parse_array("/* \xe2\x80\xa6 */ ( /* \xe2\x80\xa6 */ element /* \xe2\x80\xa6 */ ) /* \xe2\x80\xa6 */").size(), 1);'), (177, 1, u'+\t\tTS_ASSERT_EQUALS(parse_dict("/* \xe2\x80\xa6 */ { /* \xe2\x80\xa6 */ key /* \xe2\x80\xa6 */ = /* \xe2\x80\xa6 */ value /* \xe2\x80\xa6 */ ; /* \xe2\x80\xa6 */ } /* \xe2\x80\xa6 */").size(), 1);'), (182, 1, u'+\t\tTS_ASSERT_EQUALS(parse_str("// \xe2\x80\xa6\\n bar // \xe2\x80\xa6"), "bar");'), (183, 1, u'+\t\tTS_ASSERT_EQUALS(parse_array("( // \xe2\x80\xa6\\n element, // \xe2\x80\xa6\\n element )").size(), 2);'), (184, 1, u'+\t\tTS_ASSERT_EQUALS(parse_dict("// \xe2\x80\xa6\\n { key = // \xe2\x80\xa6\\n value // \xe2\x80\xa6\\n ; }").size(), 1);'), (207, 1, u'+\t\tTS_ASSERT_EQUALS(plist_type("-2147483648"), "int32_t");'), (208, 1, u'+\t\tTS_ASSERT_EQUALS(plist_type("-1073741824"), "int32_t");'), (209, 1, u'+\t\tTS_ASSERT_EQUALS(plist_type(         "-1"), "int32_t");'), (210, 1, u'+\t\tTS_ASSERT_EQUALS(plist_type(          "0"), "int32_t");'), (211, 1, u'+\t\tTS_ASSERT_EQUALS(plist_type(          "1"), "int32_t");'), (212, 1, u'+\t\tTS_ASSERT_EQUALS(plist_type( "1073741823"), "int32_t");'), (213, 1, u'+\t\tTS_ASSERT_EQUALS(plist_type( "2147483647"), "int32_t");'), (214, 1, u'+\t\tTS_ASSERT_EQUALS(plist_type( "0x7fffffff"), "int32_t");'), (216, 1, u'+\t\tTS_ASSERT_EQUALS(plist_type( "2147483648"), "uint64_t");'), (217, 1, u'+\t\tTS_ASSERT_EQUALS(plist_type( "0x80000000"), "uint64_t");'), (222, 1, u'+\t\tTS_ASSERT_EQUALS(plist::get<int32_t>(plist::parse_ascii(  "+32")),       32);'), (223, 1, u'+\t\tTS_ASSERT_EQUALS(plist::get<int32_t>(plist::parse_ascii(   "32")),       32);'), (224, 1, u'+\t\tTS_ASSERT_EQUALS(plist::get<int32_t>(plist::parse_ascii(  "-32")),      -32);'), (225, 1, u'+\t\tTS_ASSERT_EQUALS(plist::get<int32_t>(plist::parse_ascii("+0x32")),     0x32);'), (226, 1, u'+\t\tTS_ASSERT_EQUALS(plist::get<int32_t>(plist::parse_ascii( "0x32")),     0x32);'), (227, 1, u'+\t\tTS_ASSERT_EQUALS(plist::get<int32_t>(plist::parse_ascii("-0x32")),    -0x32);'), (228, 1, u'+\t\tTS_ASSERT_EQUALS(plist::get<int32_t>(plist::parse_ascii(   "07")),        7);'), (229, 1, u'+\t\tTS_ASSERT_EQUALS(plist::get<int32_t>(plist::parse_ascii( "+010")),        8);'), (230, 1, u'+\t\tTS_ASSERT_EQUALS(plist::get<int32_t>(plist::parse_ascii(  "010")),        8);'), (231, 1, u'+\t\tTS_ASSERT_EQUALS(plist::get<int32_t>(plist::parse_ascii(  "-07")),       -7);'), (232, 1, u'+\t\tTS_ASSERT_EQUALS(plist::get<int32_t>(plist::parse_ascii( "-010")),       -8);'), (237, 1, u'+\t\tTS_ASSERT_EQUALS(plist::get<uint64_t>(plist::parse_ascii("8589934592")),     8589934592ULL);'), (238, 1, u'+\t\tTS_ASSERT_EQUALS(plist::get<uint64_t>(plist::parse_ascii("0x812345678")),   0x812345678ULL);'), (239, 1, u'+\t\tTS_ASSERT_EQUALS(plist::get<uint64_t>(plist::parse_ascii("\'0x812345678\'")), 0x812345678ULL);'), (247, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(plist::parse_ascii("{ 42 = 1; 80 = 2; }")), to_s(plist::to_plist(integerMap)));'), (252, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(plist::parse_ascii("{ :true = true; :false = false; }")), to_s(plist::to_plist(booleanMap)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(230, 1, u'+\t\tASSERT(fields.find(current_field) != fields.end());'), (233, 1, u'+\t\tASSERTF(currentField.contains(range), "%zu (%zu) < %zu (%zu) && %zu (%zu) < %zu (%zu)", currentField.from.offset, currentField.from.rank, range.from.offset, range.from.rank, range.to.offset, range.to.rank, currentField.to.offset, currentField.to.rank);'), (336, 1, u'+\t\t\tASSERT(field != records[i].snippet.fields.end());'), (341, 1, u'+\t\tASSERT(field != records.back().snippet.fields.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\tTS_ASSERT_EQUALS(m, range_t(0, 6));'), (22, 1, u'+\t\tTS_ASSERT_LESS_THAN(m.second, m.first);'), (24, 1, u'+\t\tTS_ASSERT_LESS_THAN(m.second, m.first);'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(range_t(base + m.first, base + m.second), range_t(6, 17));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tTS_ASSERT_EQUALS(replace("\xc3\xa6bleGR\xc3\x98D", ".+", "\xc2\xbb${0:/upcase}\xc2\xab"),             "\xc2\xbb\xc3\x86BLEGR\xc3\x98D\xc2\xab");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(replace("\xc3\xa6bleGR\xc3\x98D", ".+", "\xc2\xbb${0:/downcase}\xc2\xab"),           "\xc2\xbb\xc3\xa6blegr\xc3\xb8d\xc2\xab");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(replace("\xc3\xa6bleGR\xc3\x98D", ".+", "\xc2\xbb${0:/capitalize}\xc2\xab"),         "\xc2\xbb\xc3\x86blegr\xc3\xb8d\xc2\xab");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(replace("\xc3\xa6bleGR\xc3\x98D", ".+", "\xc2\xbb${0:/asciify}\xc2\xab"),            "\xc2\xbbaebleGROD\xc2\xab");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(replace("\xc3\xa6bleGR\xc3\x98D", ".+", "\xc2\xbb${0:/capitalize/asciify}\xc2\xab"), "\xc2\xbbAEblegrod\xc2\xab");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(replace("foo bar", "(foo)? bar", "(?1:baz)"),             "baz");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(replace("fud bar", "(foo)? bar", "(?1:baz)"),             "fud");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(replace("fud bar", "(foo)? bar", "(?1:baz: buz)"),        "fud buz");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(replace("foo bar", "(foo)? bar", "(?1:baz"),              "(?1:baz");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(replace("foo bar", "(foo)? bar", "(?1:baz:"),             "(?1:baz:");'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(replace("foo bar", "(foo)? bar", "(?n:baz)"),             "(?n:baz)");'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(replace("foo bar", "(foo)? bar", "(?n:baz:)"),            "(?n:baz:)");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+\t\tTS_ASSERT( path::glob_t("*.{cc,mm,h}").does_match("test.cc"  ));'), (15, 1, u'+\t\tTS_ASSERT( path::glob_t("*.{cc,mm,h}").does_match("test.mm"  ));'), (16, 1, u'+\t\tTS_ASSERT( path::glob_t("*.{cc,mm,h}").does_match("test.h"   ));'), (17, 1, u'+\t\tTS_ASSERT(!path::glob_t("*.{cc,mm,h}").does_match("test.cch" ));'), (18, 1, u'+\t\tTS_ASSERT(!path::glob_t("*.{cc,mm,h}").does_match("test.hh"  ));'), (19, 1, u'+\t\tTS_ASSERT(!path::glob_t("*.{cc,mm,h}").does_match("test.hcc" ));'), (21, 1, u'+\t\tTS_ASSERT( path::glob_t("*.[ch]").does_match("test.c"   ));'), (22, 1, u'+\t\tTS_ASSERT( path::glob_t("*.[ch]").does_match("test.h"   ));'), (23, 1, u'+\t\tTS_ASSERT(!path::glob_t("*.[ch]").does_match("test.cc"  ));'), (24, 1, u'+\t\tTS_ASSERT(!path::glob_t("*.[ch]").does_match("test.d"   ));'), (26, 1, u'+\t\tTS_ASSERT( path::glob_t("*.[c-h]").does_match("test.d"  ));'), (27, 1, u'+\t\tTS_ASSERT(!path::glob_t("*.[c-h]").does_match("test.i"  ));'), (29, 1, u'+\t\tTS_ASSERT( path::glob_t("test.?").does_match("test.d"   ));'), (30, 1, u'+\t\tTS_ASSERT(!path::glob_t("test.?").does_match("test.cc"  ));'), (32, 1, u'+\t\tTS_ASSERT( path::glob_t("test.\\\\?").does_match("test.?" ));'), (33, 1, u'+\t\tTS_ASSERT(!path::glob_t("test.\\\\?").does_match("test.c" ));'), (35, 1, u'+\t\tTS_ASSERT( path::glob_t("test.").does_match("test."     ));'), (36, 1, u'+\t\tTS_ASSERT(!path::glob_t("test.").does_match("testA"     ));'), (38, 1, u'+\t\tTS_ASSERT( path::glob_t("*.{cc,{c,h}{,pp,xx}}").does_match("test.cc"    ));'), (39, 1, u'+\t\tTS_ASSERT(!path::glob_t("*.{cc,{c,h}{,pp,xx}}").does_match("test.hh"    ));'), (40, 1, u'+\t\tTS_ASSERT( path::glob_t("*.{cc,{c,h}{,pp,xx}}").does_match("test.c"     ));'), (41, 1, u'+\t\tTS_ASSERT( path::glob_t("*.{cc,{c,h}{,pp,xx}}").does_match("test.cpp"   ));'), (42, 1, u'+\t\tTS_ASSERT( path::glob_t("*.{cc,{c,h}{,pp,xx}}").does_match("test.cxx"   ));'), (43, 1, u'+\t\tTS_ASSERT( path::glob_t("*.{cc,{c,h}{,pp,xx}}").does_match("test.h"     ));'), (44, 1, u'+\t\tTS_ASSERT( path::glob_t("*.{cc,{c,h}{,pp,xx}}").does_match("test.hpp"   ));'), (45, 1, u'+\t\tTS_ASSERT( path::glob_t("*.{cc,{c,h}{,pp,xx}}").does_match("test.hxx"   ));'), (47, 1, u'+\t\tTS_ASSERT( path::glob_t("{*.{cc,h},Makefile}").does_match("test.cc"      ));'), (48, 1, u'+\t\tTS_ASSERT( path::glob_t("{*.{cc,h},Makefile}").does_match("test.h"       ));'), (49, 1, u'+\t\tTS_ASSERT( path::glob_t("{*.{cc,h},Makefile}").does_match("Makefile"     ));'), (50, 1, u'+\t\tTS_ASSERT(!path::glob_t("{*.{cc,h},Makefile}").does_match("test.txt"     ));'), (51, 1, u'+\t\tTS_ASSERT(!path::glob_t("{*.{cc,h},Makefile}").does_match("Makefile.txt" ));'), (52, 1, u'+\t\tTS_ASSERT(!path::glob_t("{*.{cc,h},Makefile}").does_match("test.Makefile"));'), (53, 1, u'+\t\tTS_ASSERT(!path::glob_t("{*.{cc,h},Makefile}").does_match(".test.cc"     ));'), (58, 1, u'+\t\tTS_ASSERT( path::glob_t(".*").does_match(".htaccess"));'), (59, 1, u'+\t\tTS_ASSERT(!path::glob_t("*" ).does_match(".htaccess"));'), (60, 1, u'+\t\tTS_ASSERT( path::glob_t("{,.}*").does_match("test"));'), (61, 1, u'+\t\tTS_ASSERT( path::glob_t("{,.}*").does_match(".htaccess"));'), (66, 1, u'+\t\tTS_ASSERT( path::glob_t("foo").does_match("foo"));'), (67, 1, u'+\t\tTS_ASSERT(!path::glob_t("foo").does_match("foo.txt"));'), (68, 1, u'+\t\tTS_ASSERT(!path::glob_t("foo").does_match("me foo"));'), (69, 1, u'+\t\tTS_ASSERT( path::glob_t("foo").does_match("me/foo"));'), (70, 1, u'+\t\tTS_ASSERT(!path::glob_t("foo").does_match("foo/bar"));'), (71, 1, u'+\t\tTS_ASSERT( path::glob_t("foo.*").does_match("foo.txt"));'), (72, 1, u'+\t\tTS_ASSERT(!path::glob_t("foo.*").does_match("me foo.txt"));'), (73, 1, u'+\t\tTS_ASSERT( path::glob_t("foo.*").does_match("me/foo.txt"));'), (78, 1, u'+\t\tTS_ASSERT( path::glob_t("*"       ).does_match("foo/bar.txt"));'), (79, 1, u'+\t\tTS_ASSERT( path::glob_t("f*/*"    ).does_match("foo/bar.txt"));'), (80, 1, u'+\t\tTS_ASSERT( path::glob_t("*.txt"   ).does_match("foo/bar.txt"));'), (81, 1, u'+\t\tTS_ASSERT( path::glob_t("*/*.txt" ).does_match("foo/bar.txt"));'), (82, 1, u'+\t\tTS_ASSERT( path::glob_t("f*/*.txt").does_match("foo/bar.txt"));'), (83, 1, u'+\t\tTS_ASSERT(!path::glob_t("f*.txt"  ).does_match("foo/bar.txt"));'), (84, 1, u'+\t\tTS_ASSERT(!path::glob_t("f*"      ).does_match("foo/bar.txt"));'), (89, 1, u'+\t\tTS_ASSERT( path::glob_t("**"          ).does_match("foo/bar/fud.txt"));'), (90, 1, u'+\t\tTS_ASSERT( path::glob_t("**/*"        ).does_match("foo/bar/fud.txt"));'), (91, 1, u'+\t\tTS_ASSERT( path::glob_t("f**"         ).does_match("foo/bar/fud.txt"));'), (92, 1, u'+\t\tTS_ASSERT( path::glob_t("foo/**"      ).does_match("foo/bar/fud.txt"));'), (93, 1, u'+\t\tTS_ASSERT( path::glob_t("foo/**/*.txt").does_match("foo/fud.txt"));'), (94, 1, u'+\t\tTS_ASSERT( path::glob_t("foo/**/*.txt").does_match("foo/bar/fud.txt"));'), (95, 1, u'+\t\tTS_ASSERT(!path::glob_t("**.txt"      ).does_match("foo/bar/fud.txt"));'), (96, 1, u'+\t\tTS_ASSERT(!path::glob_t("f**.txt"     ).does_match("foo/bar/fud.txt"));'), (103, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("{foo}").size(),             1);'), (104, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("{foo}").at(0),        "{foo}");'), (106, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("{foo,bar}").size(),         2);'), (107, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("{foo,bar}").at(0),      "foo");'), (108, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("{foo,bar}").at(1),      "bar");'), (110, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("base.{cc,h}-suffix").size(), 2);'), (111, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("base.{cc,h}-suffix")[0],     "base.cc-suffix");'), (112, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("base.{cc,h}-suffix")[1],     "base.h-suffix");'), (114, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo{bar")[0],                "foo{bar");'), (115, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo{bar}")[0],               "foo{bar}");'), (116, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo{bar},cc}").size(),       1);'), (117, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo{bar},cc}")[0],           "foo{bar},cc}");'), (118, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo{bar\\\\},cc}").size(),     2);'), (119, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo{bar\\\\},cc}")[0],         "foobar}");'), (120, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo{bar\\\\},cc}")[1],         "foocc");'), (121, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo\\\\{bar}")[0],             "foo{bar}");'), (122, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo{bar\\\\}")[0],             "foo{bar}");'), (123, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo\\\\{bar,cc}")[0],          "foo{bar,cc}");'), (124, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo{bar\\\\,cc}")[0],          "foo{bar,cc}");'), (125, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo{bar,cc\\\\}")[0],          "foo{bar,cc}");'), (126, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo,bar")[0],                "foo,bar");'), (127, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo\\\\,bar")[0],              "foo,bar");'), (128, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo}")[0],                   "foo}");'), (129, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo\\\\}")[0],                 "foo}");'), (131, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo\\\\bar")[0],               "foo\\\\bar");'), (132, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo\\\\\\\\bar")[0],             "foo\\\\bar");'), (134, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo{,bar}").size(),          2);'), (135, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo{,bar}")[0],              "foo");'), (136, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("foo{,bar}")[1],              "foobar");'), (138, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("{a,b{c,d}}").size(),         3);'), (139, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("{a,b{c,d}}")[0],             "a");'), (140, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("{a,b{c,d}}")[1],             "bc");'), (141, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("{a,b{c,d}}")[2],             "bd");'), (143, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("{a,b}{c,d}").size(),         4);'), (144, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("{a,b}{c,d}")[0],             "ac");'), (145, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("{a,b}{c,d}")[1],             "ad");'), (146, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("{a,b}{c,d}")[2],             "bc");'), (147, 1, u'+\t\tTS_ASSERT_EQUALS(expand_braces("{a,b}{c,d}")[3],             "bd");'), (152, 1, u'+\t\tTS_ASSERT_EQUALS(expand("{a,b,{c},d}"),     "a,d}:b,d}:{c,d}");'), (153, 1, u'+\t\tTS_ASSERT_EQUALS(expand("{a,b,\\\\{c\\\\},d}"), "a:b:{c}:d");'), (158, 1, u'+\t\tTS_ASSERT(!path::glob_t("!html"          ).does_match("/path/to/html"));'), (159, 1, u'+\t\tTS_ASSERT( path::glob_t("!html"          ).does_match("/path/to/html/foo"));'), (160, 1, u'+\t\tTS_ASSERT(!path::glob_t("!html/*"        ).does_match("/path/to/html/fud.txt"));'), (161, 1, u'+\t\tTS_ASSERT( path::glob_t("!html/*"        ).does_match("/path/to/html/foo/fud.txt"));'), (162, 1, u'+\t\tTS_ASSERT(!path::glob_t("!html/**"       ).does_match("/path/to/html/foo/fud.txt"));'), (163, 1, u'+\t\tTS_ASSERT(!path::glob_t("!html/**/*"     ).does_match("/path/to/html/foo/fud.txt"));'), (164, 1, u'+\t\tTS_ASSERT(!path::glob_t("!html/**/*.txt" ).does_match("/path/to/html/foo/fud.txt"));'), (165, 1, u'+\t\tTS_ASSERT( path::glob_t("!html/**/*.txt" ).does_match("/path/to/html/foo/fud.php"));'), (166, 1, u'+\t\tTS_ASSERT( path::glob_t("!html"          ).does_match("/path/to/page"));'), (167, 1, u'+\t\tTS_ASSERT( path::glob_t("!html/*"        ).does_match("/path/to/page/fud.txt"));'), (168, 1, u'+\t\tTS_ASSERT( path::glob_t("!html/**"       ).does_match("/path/to/page/foo/fud.txt"));'), (169, 1, u'+\t\tTS_ASSERT( path::glob_t("!html/**/*"     ).does_match("/path/to/page/foo/fud.txt"));'), (170, 1, u'+\t\tTS_ASSERT( path::glob_t("!html/**/*.txt" ).does_match("/path/to/page/foo/fud.txt"));')]
===========================================
Class: class IndentTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(75, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (103, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (131, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (159, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (185, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);'), (203, 1, u'+\t\t\tTSM_ASSERT_EQUALS(text::format("%d: %s", line - beginof(lines), line->content.c_str()), fsm.scan_line(line->content), indentSize * line->indent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t\tTS_ASSERT_EQUALS(s.text, "foo\\n\\nbar\\n");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.size(), 1);'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.begin()->second->range.from.offset, 4);'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.begin()->second->range.to.offset,   4);'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(s.text, "foo\\n\\t\\n\\tbar\\n\\t");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.size(), 1);'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.begin()->second->range.from.offset, 5);'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.begin()->second->range.to.offset,   5);'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(s.text, "{\\n\\t  \\n\\t}\\n\\t");'), (34, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.size(), 1);'), (35, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.begin()->second->range.from.offset, 5);'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.begin()->second->range.to.offset,   5);'), (44, 1, u'+\t\tTS_ASSERT_EQUALS(s.text, "{\\n    \\n  }\\n  ");'), (45, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.size(), 1);'), (46, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.begin()->second->range.from.offset, 6);'), (47, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.begin()->second->range.to.offset,   6);'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(s.text, "- (id)method:(id)anArgument\\n{\\n\\treturn nil;\\n}");'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.size(), 6);'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields[0]->range.from.offset, 29); // $0'), (58, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields[0]->range.to.offset,   29);'), (59, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields[1]->range.from.offset,  3); // $1'), (60, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields[1]->range.to.offset,    5);'), (63, 1, u'+\t\tTS_ASSERT_EQUALS(s.text, "- (void)method:(id)anArgument\\n{\\n}");'), (66, 1, u'+\t\tTS_ASSERT_EQUALS(s.text, "- (int)method:(id)anArgument\\n{\\n\\treturn nil;\\n}");'), (74, 1, u'+\t\tTS_ASSERT_EQUALS(s.text, "- (id)method:(id)anArgument\\n{\\n   return nil;\\n}");'), (75, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.size(), 6);'), (76, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields[0]->range.from.offset, 29); // $0'), (77, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields[0]->range.to.offset,   29);'), (78, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields[1]->range.from.offset,  3); // $1'), (79, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields[1]->range.to.offset,    5);'), (82, 1, u'+\t\tTS_ASSERT_EQUALS(s.text, "- (void)method:(id)anArgument\\n{\\n}");'), (85, 1, u'+\t\tTS_ASSERT_EQUALS(s.text, "- (int)method:(id)anArgument\\n{\\n   return nil;\\n}");'), (93, 1, u'+\t\tTS_ASSERT_EQUALS(s.text, "- (id)method:(id)anArgument\\n   {\\n      return nil;\\n   }");'), (94, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields.size(), 6);'), (95, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields[0]->range.from.offset, 32); // $0'), (96, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields[0]->range.to.offset,   32);'), (97, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields[1]->range.from.offset,  3); // $1'), (98, 1, u'+\t\tTS_ASSERT_EQUALS(s.fields[1]->range.to.offset,    5);'), (101, 1, u'+\t\tTS_ASSERT_EQUALS(s.text, "- (void)method:(id)anArgument\\n   {\\n   }");'), (104, 1, u'+\t\tTS_ASSERT_EQUALS(s.text, "- (int)method:(id)anArgument\\n   {\\n      return nil;\\n   }");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(88, 1, u'+\t\tASSERTF(path::is_directory(_wc_path) || !path::exists(_wc_path) || _wc_path == NULL_STR, "Path: %s\\n", _wc_path.c_str());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t\tTS_ASSERT_EQUALS(fs::snapshot_t(path), fs::snapshot_t(path));'), (14, 1, u'+\t\tTS_ASSERT_DIFFERS(jailSnapshot, fs::snapshot_t(path));'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(jailSnapshot, fs::snapshot_t(jail.path()));'), (17, 1, u'+\t\tTS_ASSERT_DIFFERS(jailSnapshot, fs::snapshot_t(jail.path()));')]
===========================================
Class: class git_tests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"), scm::status::none);'), (52, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::unversioned);'), (53, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);'), (59, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::none);'), (60, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);'), (66, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::unversioned);'), (67, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);'), (68, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/b"), scm::status::none);'), (74, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::unversioned);'), (75, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);'), (76, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/b"), scm::status::none);'), (82, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::added);'), (83, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::added);'), (89, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::added);'), (90, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::added);'), (91, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/b"), scm::status::unversioned);'), (97, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::added);'), (98, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::added);'), (99, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/b"), scm::status::none);'), (105, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (106, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::versioned);'), (112, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (113, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::modified);'), (119, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (120, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::versioned);'), (121, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/b"), scm::status::unversioned);'), (127, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::deleted);'), (128, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::deleted);'), (134, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::deleted);'), (135, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::deleted);'), (141, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::none);'), (142, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::none);'), (148, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::versioned);'), (149, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::versioned);'), (155, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::deleted);'), (156, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::deleted);'), (162, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder"),   scm::status::deleted);'), (163, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("folder/a"), scm::status::deleted);'), (173, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::unversioned);'), (179, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::added);'), (185, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::versioned);'), (191, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::modified);'), (197, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::deleted);'), (207, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::none);'), (213, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::added);'), (219, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::versioned);'), (225, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::modified);'), (231, 1, u'+\t\tTS_ASSERT_EQUALS(wc.status("file"), scm::status::deleted);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\t\tTSM_ASSERT_EQUALS("\\n\\n  Unable to test mercurial driver (hg executable not found).\\n\\n  To skip this test:\\n    ninja scm/coerce\\n\\n  To install required executable (via MacPorts):\\n    sudo port install mercurial\\n", system("which -s hg"), 0);'), (24, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("clean.txt")),     scm::status::versioned);'), (25, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("ignored.txt")),   scm::status::ignored);'), (26, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("modified.txt")),  scm::status::modified);'), (27, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("added.txt")),     scm::status::added);'), (28, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("missing.txt")),   scm::status::deleted);'), (29, 1, u'+\t\t\tTS_ASSERT_EQUALS(info->status(jail.path("untracked.txt")), scm::status::unversioned);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+\t\t\t\tassert(i < lhs.size()); assert(i < rhs.size());'), (47, 1, u'+\t\t\t\tassert(i); assert(j);'), (48, 1, u'+\t\t\t\tassert(i-1 < path.scopes.size());'), (49, 1, u'+\t\t\t\tassert(j-1 < scopes.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("foo fud").does_match("foo bar fud"),   true);'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("^ foo").does_match("foo bar"), true);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(scope::selector_t("bar $").does_match("foo bar"), true);'), (43, 1, u'+\t\t\tTS_ASSERT(matchingSelectors[i].does_match(textScope, &rank));'), (44, 1, u'+\t\t\tTS_ASSERT_LESS_THAN(rank, lastRank);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1017, 1, u'+\t\t\t\tASSERT_NE(m.second, 0); ASSERT_LE(m.second, len - offset);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t\tTS_ASSERT_EQUALS(all_words("foo_bar"), "foo_bar");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(all_words("foo-bar"), "foo, bar");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(all_words(" foo-bar"), "foo, bar");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(all_words(" foo-bar "), "foo, bar");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(all_words("Ac\xcc\x84\xcc\x8ccount\xe2\x80\x94\xc3\xa6blegr\xc3\xb8d"), "Ac\xcc\x84\xcc\x8ccount, \xc3\xa6blegr\xc3\xb8d");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(all_words("\xe5\x8d\x97\xe9\x87\x8e \xe7\xb9\x81\xe5\xbc\x98.\\n"), "\xe5\x8d\x97\xe9\x87\x8e, \xe7\xb9\x81\xe5\xbc\x98");'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(all_words("Surrogate: \xe2\x80\x9c\xf0\xa0\xbb\xb5\xe2\x80\x9d.\\n"), "Surrogate, \xf0\xa0\xbb\xb5");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 0), kSelectionMoveToBeginOfTypingPair)),         "1");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 5), kSelectionMoveToBeginOfTypingPair)),       "1:6");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 6), kSelectionMoveToBeginOfTypingPair)),       "1:7");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 9), kSelectionMoveToBeginOfTypingPair)),       "1:7");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(10), kSelectionMoveToBeginOfTypingPair)),       "1:7");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(16), kSelectionMoveToBeginOfTypingPair)),      "1:11");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(17), kSelectionMoveToBeginOfTypingPair)),      "1:10");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(18), kSelectionMoveToBeginOfTypingPair)),       "1:6");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(19), kSelectionMoveToBeginOfTypingPair)),      "1:20");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 0), kSelectionMoveToEndOfTypingPair)),           "1");'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 5), kSelectionMoveToEndOfTypingPair)),        "1:19");'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 6), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t( 9), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(10), kSelectionMoveToEndOfTypingPair)),        "1:17");'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(16), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (28, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(17), kSelectionMoveToEndOfTypingPair)),        "1:18");'), (29, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::move(buf, ng::range_t(18), kSelectionMoveToEndOfTypingPair)),        "1:19");'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::extend(buf, ng::ranges_t( 0), kSelectionExtendToTypingPair)),         "1");'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::extend(buf, ng::ranges_t( 5), kSelectionExtendToTypingPair)),       "1:6");'), (39, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::extend(buf, ng::ranges_t( 6), kSelectionExtendToTypingPair)),  "1:6-1:19");'), (40, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::extend(buf, ng::ranges_t( 9), kSelectionExtendToTypingPair)),  "1:6-1:19");'), (41, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::extend(buf, ng::ranges_t(10), kSelectionExtendToTypingPair)), "1:10-1:18");'), (42, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::extend(buf, ng::ranges_t(16), kSelectionExtendToTypingPair)), "1:10-1:18");'), (43, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::extend(buf, ng::ranges_t(17), kSelectionExtendToTypingPair)),  "1:6-1:19");'), (44, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::extend(buf, ng::ranges_t(18), kSelectionExtendToTypingPair)),      "1:19");'), (52, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ng::extend(buf, ng::ranges_t( 2), kSelectionExtendToTypingPair)), "1-4");'), (61, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(ng::highlight_ranges_for_movement(buf, caret, ng::move(buf, caret, kSelectionMoveRight))), "[0-1]");'), (62, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(ng::highlight_ranges_for_movement(buf, caret, ng::move(buf, caret, kSelectionMoveLeft))),  "[1-2]");'), (65, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(ng::highlight_ranges_for_movement(buf, caret, ng::move(buf, caret, kSelectionMoveRight))), "(empty)");'), (66, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(ng::highlight_ranges_for_movement(buf, caret, ng::move(buf, caret, kSelectionMoveLeft))),  "(empty)");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t\tTS_ASSERT_EQUALS(ng::to_s(buf, ng::move(buf, ng::ranges_t( 2), kSelectionMoveToEndOfColumn)), "3:3");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(ng::to_s(buf, ng::move(buf, ng::ranges_t( 5), kSelectionMoveToEndOfColumn)), "3:6");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(ng::to_s(buf, ng::move(buf, ng::ranges_t( 7), kSelectionMoveToEndOfColumn)), "3:8");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(ng::to_s(buf, ng::move(buf, ng::ranges_t(21), kSelectionMoveToEndOfColumn)), "5:8");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\tTS_ASSERT_EQUALS(matches("this (is (a test)).", "is", find::none, ng::ranges_t(4)), "1:7-1:9");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(matches("this (is (a test)).", "is", find::backwards, ng::ranges_t(4)), "1:3-1:5");'), (26, 1, u'+\t\tTS_ASSERT_EQUALS(matches("abcdef", "\\\\h+", find::regular_expression,                 ng::ranges_t(0)),   "1-1:7");'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(matches("abcdef", "\\\\h+", find::regular_expression,                 ng::ranges_t(3)), "1:4-1:7");'), (31, 1, u'+\t\tTS_ASSERT_EQUALS(matches("Foo\\nBar", "^.", find::regular_expression, ng::ranges_t(0)), "1-1:2");'), (32, 1, u'+\t\tTS_ASSERT_EQUALS(matches("Foo\\nBar", "^.", find::regular_expression, ng::ranges_t(1)), "2-2:2");'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(matches("this (is (a test)).", "is"), "1:3-1:5&1:7-1:9");'), (44, 1, u'+\t\tTS_ASSERT_EQUALS(matches("test",  ".*", kRegExp),                     "1-1:5&1:5"); // How do we best avoid the EOF match?'), (45, 1, u'+\t\tTS_ASSERT_EQUALS(matches("test",  ".+", kRegExp),                         "1-1:5");'), (46, 1, u'+\t\tTS_ASSERT_EQUALS(matches("test",   ".", kRegExp), "1-1:2&1:2-1:3&1:3-1:4&1:4-1:5");'), (48, 1, u'+\t\tTS_ASSERT_EQUALS(matches("test", "\\\\A", kRegExp),                             "1");'), (49, 1, u'+\t\tTS_ASSERT_EQUALS(matches("test",   "^", kRegExp),                             "1");'), (50, 1, u'+\t\tTS_ASSERT_EQUALS(matches("test",   "$", kRegExp),                           "1:5");'), (51, 1, u'+\t\tTS_ASSERT_EQUALS(matches("test", "\\\\z", kRegExp),                           "1:5");'), (53, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo\\nbar", "\\\\A", kRegExp),       "1");'), (54, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo\\nbar",   "^", kRegExp),     "1&2");'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo\\nbar",   "$", kRegExp), "1:4&2:4");'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(matches("foo\\nbar", "\\\\z", kRegExp),     "2:4");'), (58, 1, u'+\t\tTS_ASSERT_EQUALS(matches("test",    "\\\\b", kRegExp),           "1&1:5");'), (59, 1, u'+\t\tTS_ASSERT_EQUALS(matches("test",  "(?=.)", kRegExp),   "1&1:2&1:3&1:4");'), (60, 1, u'+\t\tTS_ASSERT_EQUALS(matches("test", "(?<=.)", kRegExp), "1:2&1:3&1:4&1:5");')]
===========================================
Class: class StringificationTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ranges_t( 0)),             "1");'), (29, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ranges_t(18)),             "2");'), (30, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ranges_t( 1)),           "1:2");'), (31, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, ranges_t(19)),           "2:2");'), (32, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, range_t(0, 19)),       "1-2:2");'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, range_t(0, 19, true)), "1x2:2");'), (34, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, freehanded( 0, 1)),      "1+1");'), (35, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, freehanded(18, 1)),      "2+1");'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, freehanded( 1, 1)),    "1:2+1");'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(to_s(buf, freehanded(19, 1)),    "2:2+1");'), (39, 1, u'+\t\tTS_ASSERT_EQUALS(round_trip(buf,         "1:1"),         "1");'), (40, 1, u'+\t\tTS_ASSERT_EQUALS(round_trip(buf,         "2:1"),         "2");'), (41, 1, u'+\t\tTS_ASSERT_EQUALS(round_trip(buf,         "1:2"),       "1:2");'), (42, 1, u'+\t\tTS_ASSERT_EQUALS(round_trip(buf,         "2:2"),       "2:2");'), (43, 1, u'+\t\tTS_ASSERT_EQUALS(round_trip(buf,     "1:1-2:2"),     "1-2:2");'), (44, 1, u'+\t\tTS_ASSERT_EQUALS(round_trip(buf,     "1:1x2:2"),     "1x2:2");'), (45, 1, u'+\t\tTS_ASSERT_EQUALS(round_trip(buf,         "1+1"),       "1+1");'), (46, 1, u'+\t\tTS_ASSERT_EQUALS(round_trip(buf, "1:1+1x2:2+1"), "1+1x2:2+1");'), (47, 1, u'+\t\tTS_ASSERT_EQUALS(round_trip(buf,         "1&2"),       "1&2");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("dir/file.cc")).get("testSetting"), "Hello, world!");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("dir/file.h")).get("testSetting"), "Hello");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("file.m")).get("testSetting",  3), 7);'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("file.h")).get("testSetting",  3), 6);'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("file.cc")).get("testSetting", 3), 6);'), (25, 1, u'+\t\tTS_ASSERT_EQUALS(settings_for_path(jail.path("file.mm")).get("testSetting", 3), 5);'), (34, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("bool",        false),      true);'), (35, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("int",             7),        42);'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("float",         1.1),       5.5);'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("string",    "sheen"), "charlie");'), (39, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("Nonbool",     false),     false);'), (40, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("Nonint",          7),         7);'), (41, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("Nonfloat",      1.1),       1.1);'), (42, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("Nonstring", "sheen"),   "sheen");'), (51, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("int",    0),   42);'), (52, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("int",  0.0), 42.0);'), (53, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("int",  "0"), "42");'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("float",    0),     42);'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("float",  0.0),   42.0);'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("float",  "0"), "42.0");'), (59, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("string_1",    0),     42);'), (60, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("string_1",  0.0),   42.0);'), (61, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("string_1",  "0"),   "42");'), (63, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("string_2",    0),     42);'), (64, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("string_2",  0.0),   42.0);'), (65, 1, u'+\t\tTS_ASSERT_EQUALS(s.get("string_2",  "0"), "42.0");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+\t\tTS_ASSERT(test_range(tracker, paths, 50, 50));'), (46, 1, u'+\t\tTS_ASSERT(test_range(tracker, paths,  0, 10));'), (51, 1, u'+\t\tTS_ASSERT(test_range(tracker, paths, 10, 20));'), (56, 1, u'+\t\tTS_ASSERT(test_range(tracker, paths, 30, 40));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t\tASSERT_LT(0, sep.size());')]
===========================================
Class: class CaseTests : public CxxTest::TestSuite { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t\tTS_ASSERT_EQUALS(uppercase("\xc3\xa6bleGR\xc3\x98D"), "\xc3\x86BLEGR\xc3\x98D");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(lowercase("\xc3\xa6bleGR\xc3\x98D"), "\xc3\xa6blegr\xc3\xb8d");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(opposite_case("Den Gr\xc3\xb8nne \xc3\xa6bleGR\xc3\x98D"), "dEN gR\xc3\x98NNE \xc3\x86BLEgr\xc3\xb8d");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tTS_ASSERT_EQUALS(decode::entities("Hello world"),                   "Hello world");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(decode::entities("Hello&nbsp;world"),              "Hello\xc2\xa0world");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(decode::entities("Hello &quot;world&quot;"),       "Hello \\"world\\"");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(decode::entities("Hello &lt;world&gt;"),           "Hello <world>");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(decode::entities("Hello &lt-world&gt;"),           "Hello &lt-world>");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(decode::entities("Hello &lt;world&gt-"),           "Hello <world&gt-");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(decode::entities("&AElig;blegr&oslash;d&hellip;"), "\xc3\x86blegr\xc3\xb8d\xe2\x80\xa6");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(decode::url_part("ActionScript%203%2BR.tbz"), "ActionScript 3+R.tbz");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(decode::url_part("%C3%86blegr%C3%B8d"),       "\xc3\x86blegr\xc3\xb8d");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tTS_ASSERT_EQUALS("http://host/" + encode::url_part("\xc3\xa6blegr\xc3\xb8d.html"), "http://host/%C3%A6blegr%C3%B8d.html");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(encode::url_part("http://example?a=b&c=d"), "http%3A%2F%2Fexample%3Fa%3Db%26c%3Dd");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(encode::url_part("me@example.org"), "me%40example.org");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS("file://localhost" + encode::url_part("/foo/bar/file name.txt", "/"), "file://localhost/foo/bar/file%20name.txt");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tTS_ASSERT_EQUALS(text::format_size(1),                "1 byte");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(text::format_size(2),                "2 bytes");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(text::format_size(600),            "600 bytes");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(text::format_size(1024),           "1.0 KiB");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(text::format_size(5*1024),         "5.0 KiB");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(text::format_size(5*1024+512),     "5.5 KiB");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(text::format_size(1024*1024),      "1.0 MiB");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(text::format_size(5*1024*1024),    "5.0 MiB");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(text::format_size(1024*1024*1024), "1.0 GiB");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tTS_ASSERT_EQUALS(indent.tab_size(),    4);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(indent.indent_size(), 4);'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(indent.tab_size(),    8);'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(indent.indent_size(), 8);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(indent.tab_size(),    3);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(indent.indent_size(), 3);'), (23, 1, u'+\t\tTS_ASSERT_EQUALS(indent.tab_size(),    5);'), (24, 1, u'+\t\tTS_ASSERT_EQUALS(indent.indent_size(), 3);'), (27, 1, u'+\t\tTS_ASSERT_EQUALS(indent.tab_size(),    5);'), (28, 1, u'+\t\tTS_ASSERT_EQUALS(indent.indent_size(), 2);'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(0, 1), "    ");'), (34, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(1, 1),  "   ");'), (35, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(2, 1),   "  ");'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(3, 1),    " ");'), (37, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(4, 1), "    ");'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(5, 1),  "   ");'), (39, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(6, 1),   "  ");'), (40, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(7, 1),    " ");'), (41, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(8, 1), "    ");'), (43, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(0, 2), "        ");'), (44, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(1, 2),  "       ");'), (45, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(2, 2),   "      ");'), (46, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(3, 2),    "     ");'), (47, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 4, true).create(4, 2), "        ");'), (52, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(0, 1), "    ");'), (53, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(1, 1),  "   ");'), (54, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(2, 1),   "  ");'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(3, 1),    " ");'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(4, 1),   "\\t");'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(5, 1),   "\\t");'), (58, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(6, 1),   "\\t");'), (59, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(7, 1),   "\\t");'), (60, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(8, 1), "    ");'), (62, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(0, 2), "\\t");'), (63, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(1, 2), "\\t");'), (64, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(2, 2), "\\t");'), (65, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(3, 2), "\\t");'), (66, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(4, 2), "\\t    ");'), (67, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(5, 2), "\\t    ");'), (68, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(6, 2), "\\t    ");'), (69, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(7, 2), "\\t    ");'), (70, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(8, 2), "\\t");'), (72, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(0, 3), "\\t    ");'), (73, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(1, 3), "\\t    ");'), (74, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(2, 3), "\\t    ");'), (75, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(3, 3), "\\t    ");'), (76, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(4, 3), "\\t\\t");'), (77, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(5, 3), "\\t\\t");'), (78, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(6, 3), "\\t\\t");'), (79, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(7, 3), "\\t\\t");'), (80, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(8, 4, false).create(8, 3), "\\t    ");'), (85, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(0, 1), "\\t\\t");'), (86, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(1, 1), "\\t\\t");'), (87, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(2, 1), "\\t\\t");'), (88, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(3, 1), "\\t\\t");'), (89, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(4, 1), "\\t\\t");'), (90, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(5, 1), "\\t\\t");'), (91, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(6, 1), "\\t\\t");'), (92, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(7, 1), "\\t\\t");'), (93, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(8, 1), "\\t\\t");'), (95, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(0, 2), "\\t\\t\\t\\t");'), (96, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(1, 2), "\\t\\t\\t\\t");'), (97, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(2, 2), "\\t\\t\\t\\t");'), (98, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(3, 2), "\\t\\t\\t\\t");'), (99, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(4, 2), "\\t\\t\\t\\t");'), (100, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(5, 2), "\\t\\t\\t\\t");'), (101, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(6, 2), "\\t\\t\\t\\t");'), (102, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(7, 2), "\\t\\t\\t\\t");'), (103, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(8, 2), "\\t\\t\\t\\t");'), (105, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(0, 3), "\\t\\t\\t\\t\\t\\t");'), (106, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(1, 3), "\\t\\t\\t\\t\\t\\t");'), (107, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(2, 3), "\\t\\t\\t\\t\\t\\t");'), (108, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(3, 3), "\\t\\t\\t\\t\\t\\t");'), (109, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(4, 3), "\\t\\t\\t\\t\\t\\t");'), (110, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(5, 3), "\\t\\t\\t\\t\\t\\t");'), (111, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(6, 3), "\\t\\t\\t\\t\\t\\t");'), (112, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(7, 3), "\\t\\t\\t\\t\\t\\t");'), (113, 1, u'+\t\tTS_ASSERT_EQUALS(text::indent_t(4, 8, false).create(8, 3), "\\t\\t\\t\\t\\t\\t");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tTS_ASSERT_LESS_THAN(oak::rank("otv", "OTVStatusBar.mm"), oak::rank("otv", "OakTextView.mm"));'), (13, 1, u'+\t\tTS_ASSERT_LESS_THAN(oak::rank("doc", "OakDocument.mm"), oak::rank("doc", "document.cc"));'), (18, 1, u'+\t\tTS_ASSERT_LESS_THAN(oak::rank("paste", "Encrypt With Password \xe2\x80\x94 Text"), oak::rank("paste", "Paste Selection Online \xe2\x80\x94 TextMate"));'), (36, 1, u'+\t\tTS_ASSERT_EQUALS(ranked.size(), 2);'), (41, 1, u'+\t\tTS_ASSERT_DIFFERS(oak::rank("oakfilechooser", "OakFileChooser"       ), 0);'), (42, 1, u'+\t\tTS_ASSERT_DIFFERS(oak::rank("oakfilechooser", "OakFinderLabelChooser"), 0);'), (43, 1, u'+\t\tTS_ASSERT_LESS_THAN(oak::rank("oakfilechooser", "OakFinderLabelChooser"), oak::rank("oakfilechooser", "OakFileChooser"));'), (48, 1, u'+\t\tTS_ASSERT_DIFFERS(oak::rank("banne",  "Comments \xc2\xbb Insert Comment Banner \xe2\x80\x94 Source"), 0);'), (49, 1, u'+\t\tTS_ASSERT_DIFFERS(oak::rank("banner", "Comments \xc2\xbb Insert Comment Banner \xe2\x80\x94 Source"), 0);'), (54, 1, u'+\t\tTS_ASSERT_EQUALS(oak::normalize_filter("t d l"), "tdl");'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(oak::normalize_filter("td l"),  "tdl");'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(oak::normalize_filter("TDL"),   "tdl");'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(oak::normalize_filter("TD L"),  "tdl");'), (58, 1, u'+\t\tTS_ASSERT_EQUALS(oak::normalize_filter("TD l"),  "tdl");'), (65, 1, u'+\t\tTS_ASSERT_LESS_THAN(0.0, rank);'), (66, 1, u'+\t\tTS_ASSERT_LESS_THAN(rank, 1.0);'), (67, 1, u'+\t\tTS_ASSERT_EQUALS(ranges.size(), 2);'), (68, 1, u'+\t\tTS_ASSERT_EQUALS(ranges[0].first,  0);'), (69, 1, u'+\t\tTS_ASSERT_EQUALS(ranges[0].second, 2);'), (70, 1, u'+\t\tTS_ASSERT_EQUALS(ranges[1].first,  4);'), (71, 1, u'+\t\tTS_ASSERT_EQUALS(ranges[1].second, 5);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tTS_ASSERT_EQUALS(words.size(), 3);'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(words[0], "this");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(words[1], "is");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(words[2], "nice");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(words.size(), 4);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(words[0], "this");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(words[1], "is");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(words[2], "nice");'), (22, 1, u'+\t\tTS_ASSERT_EQUALS(words[3], "");'), (28, 1, u'+\t\tTS_ASSERT_EQUALS(words.size(), 5);'), (29, 1, u'+\t\tTS_ASSERT_EQUALS(words[0], "this");'), (30, 1, u'+\t\tTS_ASSERT_EQUALS(words[1], "");'), (31, 1, u'+\t\tTS_ASSERT_EQUALS(words[2], "is");'), (32, 1, u'+\t\tTS_ASSERT_EQUALS(words[3], "nice");'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(words[4], "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\tTS_ASSERT_EQUALS(replace_token( "foo/bar",  \'/\', " \xc2\xbb "),    "foo \xc2\xbb bar"   );'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(replace_token("/foo/bar",  \'/\', " \xc2\xbb "), " \xc2\xbb foo \xc2\xbb bar"   );'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(replace_token( "foo/bar/", \'/\', " \xc2\xbb "),    "foo \xc2\xbb bar \xc2\xbb ");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(replace_token("/foo/bar/", \'/\', " \xc2\xbb "), " \xc2\xbb foo \xc2\xbb bar \xc2\xbb ");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tTS_ASSERT_EQUALS(text::trim("Hello",             " \\t\\n"), "Hello");'), (9, 1, u'+\t\tTS_ASSERT_EQUALS(text::trim(" Hello",            " \\t\\n"), "Hello");'), (10, 1, u'+\t\tTS_ASSERT_EQUALS(text::trim("Hello ",            " \\t\\n"), "Hello");'), (11, 1, u'+\t\tTS_ASSERT_EQUALS(text::trim(" Hello ",           " \\t\\n"), "Hello");'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(text::trim("  Hello  ",         " \\t\\n"), "Hello");'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(text::trim("\\tHello",           " \\t\\n"), "Hello");'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(text::trim("Hello\\t",           " \\t\\n"), "Hello");'), (15, 1, u'+\t\tTS_ASSERT_EQUALS(text::trim("\\tHello\\t",         " \\t\\n"), "Hello");'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(text::trim(" \\tHello\\t ",       " \\t\\n"), "Hello");'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(text::trim("\\nHello",           " \\t\\n"), "Hello");'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(text::trim("Hello\\n",           " \\t\\n"), "Hello");'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(text::trim("\\nHello\\n",         " \\t\\n"), "Hello");'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(text::trim(" \\t\\nHello\\n\\t ",   " \\t\\n"), "Hello");'), (21, 1, u'+\t\tTS_ASSERT_EQUALS(text::trim("  \\t\\nHello\\n\\t  ", " \\t\\n"), "Hello");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, first),   first);'), (12, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, first+1), first);'), (13, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, first+2), first+2);'), (14, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, first+3), first+3);'), (16, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, last),    last);'), (17, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, last-1),  last-1);'), (18, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, last-2),  last-3);'), (19, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, last-3),  last-3);'), (20, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::find_safe_end(first, last-4),  last-4);'), (33, 1, u'+\t\tTS_ASSERT_EQUALS(chars, expected);'), (38, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch("\xe2\x99\xa5"),             0x2665);'), (39, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch("\xf0\xa0\xbb\xb5"),            0x20EF5);'), (40, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch("\\U0010FFFF"),  0x10FFFF);'), (42, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00000003)), 0x00000003);'), (43, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00000030)), 0x00000030);'), (44, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00000300)), 0x00000300);'), (45, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00003000)), 0x00003000);'), (46, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00030000)), 0x00030000);'), (47, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00300000)), 0x00300000);'), (48, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x03000000)), 0x03000000);'), (49, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x30000000)), 0x30000000);'), (51, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x20000003)), 0x20000003);'), (52, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x02000030)), 0x02000030);'), (53, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00200300)), 0x00200300);'), (54, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00023000)), 0x00023000);'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00032000)), 0x00032000);'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x00300200)), 0x00300200);'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x03000020)), 0x03000020);'), (58, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x30000002)), 0x30000002);'), (60, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x3FFFFFFF)), 0x3fFFFFFF);'), (61, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_ch(utf8::to_s(0x40000000)), 0x40000000);'), (66, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_s(    0x2665),           "\xe2\x99\xa5");'), (67, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_s(   0x20EF5),           "\xf0\xa0\xbb\xb5");'), (68, 1, u'+\t\tTS_ASSERT_EQUALS(utf8::to_s(  0x10FFFF),  "\\U0010FFFF");'), (74, 1, u'+\t\tTS_ASSERT_EQUALS(str, "\xe2\x80\x9c\xc3\x86blegr\xc3\xb8d\xe2\x80\xa6\xe2\x80\x9d \xe2\x80\x94 \xf0\xa0\xbb\xb5");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks(""),                            ""                           );'), (41, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo"),                         "foo"                        );'), (42, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo bar"),                     "foo bar"                    );'), (43, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo bar xy"),                  "foo bar xy"                 );'), (44, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo bar xyz"),                 "foo bar \xe2\x80\xb8xyz"               );'), (45, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo-bar-xy"),                  "foo-bar-xy"                 );'), (46, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo-bar-xyz"),                 "foo-bar-xy\xe2\x80\xb8z"               );'), (47, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo-bar-xyz fud baz\\n"),       "foo-bar-xy\xe2\x80\xb8z fud baz\\n"     );'), (48, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo-bar-xyz fud baz xyz"),     "foo-bar-xy\xe2\x80\xb8z fud baz \xe2\x80\xb8xyz"  );'), (49, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo bar fud"),                 "foo bar \xe2\x80\xb8fud"               );'), (50, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo bar  fud"),                "foo bar  \xe2\x80\xb8fud"              );'), (51, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo bar   fud"),               "foo bar   \xe2\x80\xb8fud"             );'), (52, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo bar    fud"),              "foo bar   \xe2\x80\xb8 fud"            );'), (53, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo bar x fud"),               "foo bar x \xe2\x80\xb8fud"             );'), (54, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo bar xy fud"),              "foo bar \xe2\x80\xb8xy fud"            );'), (55, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo bar xyz fud"),             "foo bar \xe2\x80\xb8xyz fud"           );'), (56, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo bar x\\nfud"),              "foo bar x\\nfud"             );'), (57, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo bar xy\\nfud"),             "foo bar xy\\nfud"            );'), (58, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("foo bar xyz\\nfud"),            "foo bar \xe2\x80\xb8xyz\\nfud"          );'), (59, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("1234567890\\n1234567890\\n"),    "1234567890\\n1234567890\\n"   );'), (60, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("1234 67890\\n1234 67890\\n"),    "1234 67890\\n1234 67890\\n"   );'), (61, 1, u'+\t\tTS_ASSERT_EQUALS(soft_breaks("12345 67890\\n1234567890\\n"),   "12345 \xe2\x80\xb867890\\n1234567890\\n" );'), (66, 1, u'+\t\tTS_ASSERT_EQUALS(indented_wrap(" \xe2\x80\xa2 This is a paragraph.", 10), " \xe2\x80\xa2 This \\n   is a \\n   paragra\\n   ph.");'), (67, 1, u'+\t\tTS_ASSERT_EQUALS(indented_wrap(" \xe2\x80\xa2 This is a long paragraph.", 10), " \xe2\x80\xa2 This \\n   is a \\n   long \\n   paragra\\n   ph.");'), (68, 1, u'+\t\tTS_ASSERT_EQUALS(indented_wrap("   A 12345678901234567890",      12, 6), "   A \\n      123456\\n      789012\\n      345678\\n      90");'), (69, 1, u'+\t\tTS_ASSERT_EQUALS(indented_wrap("   AB 12345678901234567890",     12, 6), "   AB \\n      123456\\n      789012\\n      345678\\n      90");'), (70, 1, u'+\t\tTS_ASSERT_EQUALS(indented_wrap("   ABC 12345678901234567890",    12, 6), "   ABC \\n      123456\\n      789012\\n      345678\\n      90");'), (71, 1, u'+\t\tTS_ASSERT_EQUALS(indented_wrap("123456789012345678901234567890", 12, 6), "123456789012\\n      345678\\n      901234\\n      567890");'), (72, 1, u'+\t\tTS_ASSERT_EQUALS(indented_wrap("// I\xc2\xa0consectetur\xc2\xa0adipisicing",   20, 7), "// \\n       I\xc2\xa0consectetur\\n       \xc2\xa0adipisicing");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 1, u'+\t\tASSERT(can_undo());'), (63, 1, u'+\t\t\tASSERT(_index != 0);'), (80, 1, u'+\t\tASSERT(can_redo());'), (87, 1, u'+\t\t\tASSERT(_index != _records.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+#import <assert.h>')]
===========================================
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
867
Mismatch count:129247
Normal count:2824871
