projects/top_C/Craft
Going to process projects/top_C/Craft/all_log.txt 
---------- Craft ------------

===========================================
Mock_Function_For_Asserts
0
0
0
0
[(321, 1, u'+  assert( 0==argc );'), (322, 1, u'+  assert( zShellStatic );'), (944, 1, u'+    assert( (zCsr-zIn)==len );'), (1196, 1, u'+            assert(sizeof(int) <= sizeof(char *));'), (2435, 1, u'+      { "assert",                SQLITE_TESTCTRL_ASSERT                 },'), (2505, 1, u'+        case SQLITE_TESTCTRL_ASSERT:'), (2593, 1, u'+    assert( nArg<=ArraySize(azArg) );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(542, 1, u'+# define ALWAYS(X)      ((X)?1:(assert(0),0))'), (543, 1, u'+# define NEVER(X)       ((X)?(assert(0),1):0)'), (6565, 1, u'+#define SQLITE_TESTCTRL_ASSERT                  12'), (9135, 1, u'+SQLITE_PRIVATE   int sqlite3VdbeAssertMayAbort(Vdbe *, int);'), (12895, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (13758, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (13768, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (13780, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (13835, 1, u'+      assert( (op-SQLITE_DBSTATUS_LOOKASIDE_HIT)>=0 );'), (13836, 1, u'+      assert( (op-SQLITE_DBSTATUS_LOOKASIDE_HIT)<3 );'), (13942, 1, u'+      assert( SQLITE_DBSTATUS_CACHE_MISS==SQLITE_DBSTATUS_CACHE_HIT+1 );'), (13943, 1, u'+      assert( SQLITE_DBSTATUS_CACHE_WRITE==SQLITE_DBSTATUS_CACHE_HIT+2 );'), (15276, 1, u'+  assert( rc==SQLITE_OK || pFile->pMethods==0 );'), (15281, 1, u'+  assert( dirSync==0 || dirSync==1 );'), (15363, 1, u'+  assert( pFile );'), (15417, 1, u'+  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) );'), (15454, 1, u'+  assert(vfsList);'), (15742, 1, u'+  assert( nByte>0 );'), (15769, 1, u'+  assert( pPrior!=0 );'), (15813, 1, u'+  assert( pPrior!=0 && nByte>0 );'), (15814, 1, u'+  assert( nByte==ROUND8(nByte) ); /* EV: R-46199-30249 */'), (16045, 1, u'+    assert( mem.nCurrent[i]>=0 );'), (16063, 1, u'+  assert( p->iForeGuard==(int)FOREGUARD );'), (16067, 1, u'+  assert( pInt[nReserve/sizeof(int)]==(int)REARGUARD );'), (16072, 1, u'+  while( nReserve-- > p->iSize ) assert( pU8[nReserve]==0x65 );'), (16093, 1, u'+  assert( (sizeof(struct MemBlockHdr)&7) == 0 );'), (16154, 1, u'+  assert( mem.disallow==0 );'), (16179, 1, u'+      assert(pBt[0]);'), (16208, 1, u'+  assert( sqlite3GlobalConfig.bMemstat || sqlite3GlobalConfig.bCoreMutex==0'), (16215, 1, u'+    assert( pHdr->pPrev->pNext==pHdr );'), (16218, 1, u'+    assert( mem.pFirst==pHdr );'), (16222, 1, u'+    assert( pHdr->pNext->pPrev==pHdr );'), (16225, 1, u'+    assert( mem.pLast==pHdr );'), (16249, 1, u'+  assert( mem.disallow==0 );'), (16250, 1, u'+  assert( (nByte & 7)==0 );     /* EV: R-46199-30249 */'), (16288, 1, u'+    assert( pHdr->iForeGuard==FOREGUARD );'), (16307, 1, u'+    assert( pHdr->iForeGuard==FOREGUARD );         /* Allocation is valid */'), (16329, 1, u'+    assert( pHdr->iForeGuard==FOREGUARD );         /* Allocation is valid */'), (16583, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16602, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16603, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (16604, 1, u'+  assert( i>=1 );'), (16606, 1, u'+  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (16607, 1, u'+  assert( size>=2 );'), (16621, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16636, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16637, 1, u'+  assert( i>=1 );'), (16638, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (16640, 1, u'+  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (16641, 1, u'+  assert( size>=2 );'), (16671, 1, u'+    assert( sqlite3_mutex_held(mem3.mutex) );'), (16687, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16688, 1, u'+  assert( i>=1 );'), (16689, 1, u'+  assert( mem3.aPool[i-1].u.hdr.size4x/4==nBlock );'), (16690, 1, u'+  assert( mem3.aPool[i+nBlock-1].u.hdr.prevSize==nBlock );'), (16704, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16705, 1, u'+  assert( mem3.szMaster>=nBlock );'), (16717, 1, u'+    assert( newi > mem3.iMaster+1 );'), (16751, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16755, 1, u'+    assert( (size&1)==0 );'), (16758, 1, u'+      assert( i > mem3.aPool[i-1].u.hdr.prevSize );'), (16792, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16793, 1, u'+  assert( sizeof(Mem3Block)==8 );'), (16799, 1, u'+  assert( nBlock>=2 );'), (16873, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16874, 1, u'+  assert( p>mem3.aPool && p<&mem3.aPool[mem3.nPool] );'), (16876, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x&1)==1 );'), (16878, 1, u'+  assert( i+size<=mem3.nPool+1 );'), (16914, 1, u'+  assert( (pBlock[-1].u.hdr.size4x&1)!=0 );'), (16934, 1, u'+  assert( nBytes>0 );          /* malloc.c filters out 0 byte requests */'), (16945, 1, u'+  assert( pPrior );'), (16992, 1, u'+  assert( sizeof(Mem3Block)==8 );'), (17043, 1, u'+      assert( 0 );'), (17048, 1, u'+      assert( 0 );'), (17053, 1, u'+      assert( 0 );'), (17271, 1, u'+  assert( i>=0 && i<mem5.nBlock );'), (17272, 1, u'+  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (17273, 1, u'+  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (17293, 1, u'+  assert( sqlite3_mutex_held(mem5.mutex) );'), (17294, 1, u'+  assert( i>=0 && i<mem5.nBlock );'), (17295, 1, u'+  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (17296, 1, u'+  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (17301, 1, u'+    assert( x<mem5.nBlock );'), (17328, 1, u'+    assert( i>=0 && i<mem5.nBlock );'), (17342, 1, u'+  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (17344, 1, u'+  assert( iFirst>=0 );'), (17370, 1, u'+  assert( nByte>0 );'), (17435, 1, u'+  assert( iBlock>=0 && iBlock<mem5.nBlock );'), (17436, 1, u'+  assert( ((u8 *)pOld-mem5.zPool)%mem5.szAtom==0 );'), (17437, 1, u'+  assert( (mem5.aCtrl[iBlock] & CTRL_FREE)==0 );'), (17441, 1, u'+  assert( iBlock+size-1<(u32)mem5.nBlock );'), (17445, 1, u'+  assert( mem5.currentCount>0 );'), (17446, 1, u'+  assert( mem5.currentOut>=(size*mem5.szAtom) );'), (17449, 1, u'+  assert( mem5.currentOut>0 || mem5.currentCount==0 );'), (17450, 1, u'+  assert( mem5.currentCount>0 || mem5.currentOut==0 );'), (17460, 1, u'+    assert( iBuddy>=0 );'), (17498, 1, u'+  assert( pPrior!=0 );'), (17519, 1, u'+  assert( pPrior!=0 );'), (17520, 1, u'+  assert( (nBytes&(nBytes-1))==0 );  /* EV: R-46199-30249 */'), (17521, 1, u'+  assert( nBytes>=0 );'), (17592, 1, u'+  assert( (sizeof(Mem5Link)&(sizeof(Mem5Link)-1))==0 );'), (17596, 1, u'+  assert( zByte!=0 );  /* sqlite3_config() does not allow otherwise */'), (17621, 1, u'+    assert((iOffset+nAlloc)>mem5.nBlock);'), (17798, 1, u'+  assert( GLOBAL(int, mutexIsInit) );'), (17983, 1, u'+      assert( id-2 >= 0 );'), (17984, 1, u'+      assert( id-2 < (int)(sizeof(aStatic)/sizeof(aStatic[0])) );'), (17998, 1, u'+  assert( p->cnt==0 );'), (17999, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (18016, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) );'), (18021, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) );'), (18034, 1, u'+  assert( debugMutexHeld(pX) );'), (18036, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) );'), (18240, 1, u'+      assert( iType-2 >= 0 );'), (18241, 1, u'+      assert( iType-2 < ArraySize(staticMutexes) );'), (18259, 1, u'+  assert( p->nRef==0 );'), (18260, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (18277, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (18296, 1, u'+      assert( p->nRef==0 );'), (18306, 1, u'+  assert( p->nRef>0 || p->owner==0 );'), (18320, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (18339, 1, u'+      assert( p->nRef==0 );'), (18376, 1, u'+  assert( pthreadMutexHeld(p) );'), (18381, 1, u'+  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (18633, 1, u'+      assert( winMutex_isInit==1 );'), (18634, 1, u'+      assert( iType-2 >= 0 );'), (18635, 1, u'+      assert( iType-2 < ArraySize(winMutex_staticMutexes) );'), (18653, 1, u'+  assert( p );'), (18654, 1, u'+  assert( p->nRef==0 && p->owner==0 );'), (18655, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (18674, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld2(p, tid) );'), (18678, 1, u'+  assert( p->nRef>0 || p->owner==0 );'), (18691, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld2(p, tid) );'), (18729, 1, u'+  assert( p->nRef>0 );'), (18730, 1, u'+  assert( p->owner==tid );'), (18733, 1, u'+  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (19030, 1, u'+  assert( sqlite3_mutex_held(mem0.mutex) );'), (19080, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(p) );  /* IMP: R-04675-44850 */'), (19117, 1, u'+  assert( n>0 );'), (19139, 1, u'+  assert( sqlite3_mutex_notheld(mem0.mutex) );'), (19147, 1, u'+  assert( scratchAllocOut<=1 );'), (19161, 1, u'+    assert( scratchAllocOut>=1 && scratchAllocOut<=2 );'), (19173, 1, u'+      assert( mem0.nScratchFree <= (u32)sqlite3GlobalConfig.nScratch );'), (19178, 1, u'+      assert( sqlite3MemdebugHasType(p, MEMTYPE_SCRATCH) );'), (19179, 1, u'+      assert( sqlite3MemdebugNoType(p, ~MEMTYPE_SCRATCH) );'), (19212, 1, u'+  assert( sqlite3MemdebugHasType(p, MEMTYPE_HEAP) );'), (19213, 1, u'+  assert( sqlite3MemdebugNoType(p, MEMTYPE_DB) );'), (19217, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (19221, 1, u'+    assert( sqlite3MemdebugHasType(p, MEMTYPE_DB) );'), (19222, 1, u'+    assert( sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) );'), (19223, 1, u'+    assert( db!=0 || sqlite3MemdebugNoType(p, MEMTYPE_LOOKASIDE) );'), (19233, 1, u'+  assert( sqlite3MemdebugNoType(p, MEMTYPE_DB) );'), (19234, 1, u'+  assert( sqlite3MemdebugHasType(p, MEMTYPE_HEAP) );'), (19251, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (19269, 1, u'+  assert( sqlite3MemdebugHasType(p, MEMTYPE_DB) );'), (19270, 1, u'+  assert( sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) );'), (19271, 1, u'+  assert( db!=0 || sqlite3MemdebugNoType(p, MEMTYPE_LOOKASIDE) );'), (19308, 1, u'+    assert( sqlite3MemdebugHasType(pOld, MEMTYPE_HEAP) );'), (19309, 1, u'+    assert( sqlite3MemdebugNoType(pOld, ~MEMTYPE_HEAP) );'), (19323, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pNew) ); /* IMP: R-04675-44850 */'), (19382, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (19383, 1, u'+  assert( db==0 || db->pnBytesFreed==0 );'), (19426, 1, u'+  assert( db!=0 );'), (19427, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (19442, 1, u'+      assert( sqlite3MemdebugHasType(p, MEMTYPE_DB) );'), (19443, 1, u'+      assert( sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) );'), (19484, 1, u'+  assert( (n&0x7fffffff)==n );'), (19496, 1, u'+  assert( (n&0x7fffffff)==n );'), (19540, 1, u'+  assert( !db || sqlite3_mutex_held(db->mutex) );'), (20055, 1, u'+          assert( precision>0 );'), (20065, 1, u'+          assert( bufpt>zOut );'), (20197, 1, u'+        assert( k>=0 && k<pSrc->nSrc );'), (20207, 1, u'+        assert( xtype==etINVALID );'), (20241, 1, u'+  assert( z!=0 || N==0 );'), (20247, 1, u'+  assert( p->zText!=0 || p->nChar==0 );'), (20288, 1, u'+  assert( p->zText );'), (20353, 1, u'+  assert( db!=0 );'), (20881, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (20882, 1, u'+  assert( pMem->flags&MEM_Str );'), (20883, 1, u'+  assert( pMem->enc!=desiredEnc );'), (20884, 1, u'+  assert( pMem->enc!=0 );'), (20885, 1, u'+  assert( pMem->n>=0 );'), (20904, 1, u'+      assert( rc==SQLITE_NOMEM );'), (20959, 1, u'+      assert( desiredEnc==SQLITE_UTF16BE );'), (20969, 1, u'+    assert( desiredEnc==SQLITE_UTF8 );'), (20986, 1, u'+  assert( (pMem->n+(desiredEnc==SQLITE_UTF8?1:2))<=len );'), (21019, 1, u'+  assert( pMem->n>=0 );'), (21062, 1, u'+  assert( z<=zTerm );'), (21117, 1, u'+  assert( (m.flags & MEM_Term)!=0 || db->mallocFailed );'), (21118, 1, u'+  assert( (m.flags & MEM_Str)!=0 || db->mallocFailed );'), (21119, 1, u'+  assert( (m.flags & MEM_Dyn)!=0 || db->mallocFailed );'), (21120, 1, u'+  assert( m.z || db->mallocFailed );'), (21141, 1, u'+    assert( db->mallocFailed );'), (21144, 1, u'+  assert( m.z==m.zMalloc );'), (21191, 1, u'+    assert( n>0 && n<=4 );'), (21198, 1, u'+    assert( c==t );'), (21199, 1, u'+    assert( (z-zBuf)==n );'), (21206, 1, u'+    assert( n>0 && n<=4 );'), (21210, 1, u'+    assert( c==i );'), (21211, 1, u'+    assert( (z-zBuf)==n );'), (21218, 1, u'+    assert( n>0 && n<=4 );'), (21222, 1, u'+    assert( c==i );'), (21223, 1, u'+    assert( (z-zBuf)==n );'), (21506, 1, u'+  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (21514, 1, u'+    assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (21717, 1, u'+  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (21722, 1, u'+    assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (21758, 1, u'+    assert( u<=LARGEST_INT64 );'), (21765, 1, u'+      assert( u<=LARGEST_INT64 );'), (21773, 1, u'+      assert( u-1==LARGEST_INT64 );'), (21774, 1, u'+      assert( (*pNum)==SMALLEST_INT64 );'), (21880, 1, u'+  assert( n<=9 );'), (21951, 1, u'+  assert( SLOT_2_0 == ((0x7f<<14) | (0x7f)) );'), (21952, 1, u'+  assert( SLOT_4_2_0 == ((0xfU<<28) | (0x7f<<14) | (0x7f)) );'), (22157, 1, u'+    assert( n>3 && n<=9 );'), (22209, 1, u'+    assert( n>5 && n<=9 );'), (22251, 1, u"+  assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );"), (22386, 1, u'+  assert( iA1*iB0==0 || iA0*iB1==0 );'), (22464, 1, u'+  assert( pNew!=0 );'), (22478, 1, u'+  assert( pH!=0 );'), (22497, 1, u'+  assert( nKey>=0 );'), (22632, 1, u'+    assert( pEntry->count>=0 );'), (22637, 1, u'+    assert( pH->first==0 );'), (22638, 1, u'+    assert( pH->count==0 );'), (22651, 1, u'+  assert( pH!=0 );'), (22652, 1, u'+  assert( pKey!=0 );'), (22653, 1, u'+  assert( nKey>=0 );'), (22682, 1, u'+  assert( pH!=0 );'), (22683, 1, u'+  assert( pKey!=0 );'), (22684, 1, u'+  assert( nKey>=0 );'), (22698, 1, u'+      assert(nKey==elem->nKey);'), (22711, 1, u'+      assert( pH->htsize>0 );'), (23768, 1, u'+    assert( 0 );'), (23770, 1, u'+  assert( p->l_whence==SEEK_SET );'), (23787, 1, u'+      assert( 0 );'), (23979, 1, u"+  assert( zAbsoluteName[0]=='/' );"), (24018, 1, u'+  assert( pId->nRef>0 );'), (24023, 1, u'+    assert( *pp==pId );'), (24283, 1, u'+  assert( unixMutexHeld() );'), (24287, 1, u'+      assert( pInode->pShmNode==0 );'), (24290, 1, u'+        assert( pInode->pPrev->pNext==pInode );'), (24293, 1, u'+        assert( inodeList==pInode );'), (24297, 1, u'+        assert( pInode->pNext->pPrev==pInode );'), (24325, 1, u'+  assert( unixMutexHeld() );'), (24453, 1, u'+  assert( pFile );'), (24508, 1, u'+  assert( unixMutexHeld() );'), (24509, 1, u'+  assert( pInode!=0 );'), (24515, 1, u'+      assert( pInode->nLock==0 );'), (24602, 1, u'+  assert( pFile );'), (24622, 1, u'+  assert( pFile->eFileLock!=NO_LOCK || eFileLock==SHARED_LOCK );'), (24623, 1, u'+  assert( eFileLock!=PENDING_LOCK );'), (24624, 1, u'+  assert( eFileLock!=RESERVED_LOCK || pFile->eFileLock==SHARED_LOCK );'), (24647, 1, u'+    assert( eFileLock==SHARED_LOCK );'), (24648, 1, u'+    assert( pFile->eFileLock==0 );'), (24649, 1, u'+    assert( pInode->nShared>0 );'), (24683, 1, u'+    assert( pInode->nShared==0 );'), (24684, 1, u'+    assert( pInode->eFileLock==0 );'), (24685, 1, u'+    assert( rc==SQLITE_OK );'), (24724, 1, u'+    assert( 0!=pFile->eFileLock );'), (24727, 1, u'+    assert( eFileLock==RESERVED_LOCK || eFileLock==EXCLUSIVE_LOCK );'), (24810, 1, u'+  assert( pFile );'), (24815, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (24821, 1, u'+  assert( pInode->nShared!=0 );'), (24823, 1, u'+    assert( pInode->eFileLock==pFile->eFileLock );'), (24850, 1, u'+      assert( handleNFSUnlock==0 );'), (24916, 1, u'+    lock.l_len = 2L;  assert( PENDING_BYTE+1==RESERVED_BYTE );'), (24950, 1, u'+    assert( pInode->nLock>=0 );'), (24970, 1, u'+  assert( eFileLock==SHARED_LOCK || ((unixFile *)id)->nFetchOut==0 );'), (25023, 1, u'+  assert( pFile->pInode->nLock>0 || pFile->pInode->bProcessLock==0 );'), (25127, 1, u'+  assert( pFile );'), (25226, 1, u'+  assert( pFile );'), (25229, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (25245, 1, u'+  assert( eFileLock==NO_LOCK );'), (25323, 1, u'+  assert( pFile );'), (25402, 1, u'+  assert( pFile );'), (25445, 1, u'+  assert( pFile );'), (25448, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (25515, 1, u'+  assert( pFile );'), (25614, 1, u'+  assert( pFile );'), (25615, 1, u'+  assert( pSem );'), (25618, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (25651, 1, u'+    assert( pFile );'), (25760, 1, u'+  assert( pFile );'), (25828, 1, u'+  assert( pFile );'), (25848, 1, u'+  assert( pFile->eFileLock!=NO_LOCK || eFileLock==SHARED_LOCK );'), (25849, 1, u'+  assert( eFileLock!=PENDING_LOCK );'), (25850, 1, u'+  assert( eFileLock!=RESERVED_LOCK || pFile->eFileLock==SHARED_LOCK );'), (25873, 1, u'+    assert( eFileLock==SHARED_LOCK );'), (25874, 1, u'+    assert( pFile->eFileLock==0 );'), (25875, 1, u'+    assert( pInode->nShared>0 );'), (25904, 1, u'+    assert( pInode->nShared==0 );'), (25905, 1, u'+    assert( pInode->eFileLock==0 );'), (25944, 1, u'+    assert( 0!=pFile->eFileLock );'), (26014, 1, u'+  assert( pFile );'), (26019, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (26025, 1, u'+  assert( pInode->nShared!=0 );'), (26027, 1, u'+    assert( pInode->eFileLock==pFile->eFileLock );'), (26041, 1, u'+    assert( pFile->inNormalWrite==0'), (26092, 1, u'+      assert( pInode->nLock>=0 );'), (26193, 1, u'+  assert( cnt==(cnt&0x1ffff) );'), (26247, 1, u'+  assert( id );'), (26248, 1, u'+  assert( offset>=0 );'), (26249, 1, u'+  assert( amt>0 );'), (26254, 1, u'+  assert( pFile->pUnused==0'), (26307, 1, u'+  assert( nBuf==(nBuf&0x1ffff) );'), (26360, 1, u'+  assert( id );'), (26361, 1, u'+  assert( amt>0 );'), (26366, 1, u'+  assert( pFile->pUnused==0'), (26619, 1, u'+  assert((flags&0x0F)==SQLITE_SYNC_NORMAL'), (26628, 1, u'+  assert( pFile );'), (26663, 1, u'+  assert( pFile );'), (26711, 1, u'+  assert( id );'), (27119, 1, u'+  assert( sqlite3_mutex_held(pShmNode->mutex) || pShmNode->nRef==0 );'), (27122, 1, u'+  assert( n==1 || lockType!=F_RDLCK );'), (27125, 1, u'+  assert( n>=1 && n<SQLITE_SHM_NLOCK );'), (27154, 1, u'+      assert( lockType==F_WRLCK );'), (27165, 1, u'+      assert( lockType==F_WRLCK );'), (27186, 1, u'+  assert( unixMutexHeld() );'), (27189, 1, u'+    assert( p->pInode==pFd->pInode );'), (27255, 1, u'+  assert( pDbFd->pShm==0 );'), (27408, 1, u'+  assert( szRegion==pShmNode->szRegion || pShmNode->nRegion==0 );'), (27409, 1, u'+  assert( pShmNode->pInode==pDbFd->pInode );'), (27410, 1, u'+  assert( pShmNode->h>=0 || pDbFd->pInode->bProcessLock==1 );'), (27411, 1, u'+  assert( pShmNode->h<0 || pDbFd->pInode->bProcessLock==0 );'), (27450, 1, u'+          assert( (nByte % pgsz)==0 );'), (27527, 1, u'+  assert( pShmNode==pDbFd->pInode->pShmNode );'), (27528, 1, u'+  assert( pShmNode->pInode==pDbFd->pInode );'), (27529, 1, u'+  assert( ofst>=0 && ofst+n<=SQLITE_SHM_NLOCK );'), (27530, 1, u'+  assert( n>=1 );'), (27531, 1, u'+  assert( flags==(SQLITE_SHM_LOCK | SQLITE_SHM_SHARED)'), (27535, 1, u'+  assert( n==1 || (flags & SQLITE_SHM_EXCLUSIVE)!=0 );'), (27536, 1, u'+  assert( pShmNode->h>=0 || pDbFd->pInode->bProcessLock==1 );'), (27537, 1, u'+  assert( pShmNode->h<0 || pDbFd->pInode->bProcessLock==0 );'), (27540, 1, u'+  assert( n>1 || mask==(1<<ofst) );'), (27548, 1, u'+      assert( (pX->exclMask & (p->exclMask|p->sharedMask))==0 );'), (27609, 1, u'+        assert( (p->sharedMask & mask)==0 );'), (27655, 1, u'+  assert( pShmNode==pDbFd->pInode->pShmNode );'), (27656, 1, u'+  assert( pShmNode->pInode==pDbFd->pInode );'), (27672, 1, u'+  assert( pShmNode->nRef>0 );'), (27695, 1, u'+  assert( pFd->nFetchOut==0 );'), (27748, 1, u'+  assert( pFd->nFetchOut==0 );'), (27749, 1, u'+  assert( nNew>pFd->mmapSize );'), (27750, 1, u'+  assert( nNew<=pFd->mmapSizeMax );'), (27751, 1, u'+  assert( nNew>0 );'), (27752, 1, u'+  assert( pFd->mmapSizeActual>=pFd->mmapSize );'), (27753, 1, u'+  assert( MAP_FAILED!=0 );'), (27829, 1, u'+  assert( nMap>=0 || pFd->nFetchOut==0 );'), (27906, 1, u'+  assert( (p==0)==(pFd->nFetchOut==0) );'), (27909, 1, u'+  assert( p==0 || p==&((u8 *)pFd->pMapRegion)[iOff] );'), (27917, 1, u'+  assert( pFd->nFetchOut>=0 );'), (28228, 1, u'+  assert( pNew->pInode==NULL );'), (28235, 1, u"+  assert( zFilename==0 || zFilename[0]=='/'"), (28238, 1, u"+  assert( zFilename==0 || zFilename[0]=='/' );"), (28242, 1, u'+  assert( zFilename!=0 || (ctrlFlags & UNIXFILE_NOLOCK)!=0 );'), (28344, 1, u'+    assert( zFilename!=0 );'), (28591, 1, u'+      assert( nDb>0 );'), (28592, 1, u"+      assert( zPath[nDb]!='\\n' );"), (28684, 1, u'+  assert((isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly));'), (28685, 1, u'+  assert(isCreate==0 || isReadWrite);'), (28686, 1, u'+  assert(isExclusive==0 || isCreate);'), (28687, 1, u'+  assert(isDelete==0 || isCreate);'), (28691, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_DB );'), (28692, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_JOURNAL );'), (28693, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MASTER_JOURNAL );'), (28694, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_WAL );'), (28697, 1, u'+  assert( eType==SQLITE_OPEN_MAIN_DB      || eType==SQLITE_OPEN_TEMP_DB'), (28721, 1, u'+    assert( (flags & SQLITE_OPEN_URI) || zName[strlen(zName)+1]==0 );'), (28725, 1, u'+    assert(isDelete && !syncDir);'), (28734, 1, u'+    assert( zName[strlen(zName)+1]==0 );'), (28753, 1, u'+      assert( !p->pUnused );'), (28754, 1, u'+      assert( eType==SQLITE_OPEN_WAL || eType==SQLITE_OPEN_MAIN_JOURNAL );'), (28781, 1, u'+  assert( fd>=0 );'), (28954, 1, u'+      assert(!"Invalid flags argument");'), (28990, 1, u'+  assert( pVfs->mxPathname==MAX_PATHNAME );'), (29075, 1, u'+  assert((size_t)nBuf>=(sizeof(time_t)+sizeof(int)));'), (29100, 1, u'+      assert( sizeof(t)+sizeof(pid)<=(size_t)nBuf );'), (29443, 1, u'+  assert(lockPath!=NULL);'), (29574, 1, u'+  assert(PROXY_HOSTIDLEN == sizeof(uuid_t));'), (29704, 1, u'+      assert( nTries>1 );'), (29730, 1, u'+      assert( nTries==3 );'), (30030, 1, u'+  assert( (int)strlen(conchPath) == len+7 );'), (30080, 1, u'+    assert( (int)strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (30091, 1, u'+    assert( strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (30242, 1, u'+      assert( 0 );  /* The call assures that only valid opcodes are sent */'), (30487, 1, u'+  assert( ArraySize(aSyscall)==24 );'), (30982, 1, u'+#define winMemAssertMagic() assert( win_mem_data.magic==WINMEM_MAGIC )'), (30984, 1, u'+#define winMemAssertMagic()'), (31721, 1, u'+  assert( nMin==-1 || nMin==0 || nMin<SQLITE_WIN32_DBG_BUF_SIZE );'), (31763, 1, u'+  assert( sleepObj!=NULL );'), (31805, 1, u'+  winMemAssertMagic();'), (31807, 1, u'+  assert( hHeap!=0 );'), (31808, 1, u'+  assert( hHeap!=INVALID_HANDLE_VALUE );'), (31810, 1, u'+  assert ( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (31812, 1, u'+  assert( nBytes>=0 );'), (31827, 1, u'+  winMemAssertMagic();'), (31829, 1, u'+  assert( hHeap!=0 );'), (31830, 1, u'+  assert( hHeap!=INVALID_HANDLE_VALUE );'), (31832, 1, u'+  assert ( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, pPrior) );'), (31848, 1, u'+  winMemAssertMagic();'), (31850, 1, u'+  assert( hHeap!=0 );'), (31851, 1, u'+  assert( hHeap!=INVALID_HANDLE_VALUE );'), (31853, 1, u'+  assert ( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, pPrior) );'), (31855, 1, u'+  assert( nBytes>=0 );'), (31876, 1, u'+  winMemAssertMagic();'), (31878, 1, u'+  assert( hHeap!=0 );'), (31879, 1, u'+  assert( hHeap!=INVALID_HANDLE_VALUE );'), (31881, 1, u'+  assert ( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (31907, 1, u'+  assert( pWinMemData->magic==WINMEM_MAGIC );'), (31922, 1, u'+    assert( pWinMemData->bOwned );'), (31932, 1, u'+  assert( !pWinMemData->bOwned );'), (31934, 1, u'+  assert( pWinMemData->hHeap!=0 );'), (31935, 1, u'+  assert( pWinMemData->hHeap!=INVALID_HANDLE_VALUE );'), (31937, 1, u'+  assert( osHeapValidate(pWinMemData->hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (31950, 1, u'+    assert( pWinMemData->hHeap!=INVALID_HANDLE_VALUE );'), (31952, 1, u'+    assert( osHeapValidate(pWinMemData->hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (32154, 1, u'+  assert( !ppDirectory || type==SQLITE_WIN32_DATA_DIRECTORY_TYPE'), (32157, 1, u'+  assert( !ppDirectory || sqlite3MemdebugHasType(*ppDirectory, MEMTYPE_HEAP) );'), (32281, 1, u'+  assert( errcode!=SQLITE_OK );'), (32614, 1, u'+      assert(nNumberOfBytesToUnlockLow == (DWORD)SHARED_SIZE);'), (32622, 1, u'+      assert(nNumberOfBytesToUnlockLow == (DWORD)SHARED_SIZE'), (32816, 1, u'+  assert( id!=0 );'), (32818, 1, u'+  assert( pFile->pShm==0 );'), (32820, 1, u'+  assert( pFile->h!=NULL && pFile->h!=INVALID_HANDLE_VALUE );'), (32875, 1, u'+  assert( id!=0 );'), (32876, 1, u'+  assert( amt>0 );'), (32877, 1, u'+  assert( offset>=0 );'), (32946, 1, u'+  assert( amt>0 );'), (32947, 1, u'+  assert( pFile );'), (33001, 1, u'+      assert( nWrite==0 || nWrite<=(DWORD)nRem );'), (33044, 1, u'+  assert( pFile );'), (33113, 1, u'+  assert( pFile );'), (33115, 1, u'+  assert((flags&0x0F)==SQLITE_SYNC_NORMAL'), (33163, 1, u'+  assert( id!=0 );'), (33164, 1, u'+  assert( pSize!=0 );'), (33327, 1, u'+  assert( id!=0 );'), (33342, 1, u'+  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (33343, 1, u'+  assert( locktype!=PENDING_LOCK );'), (33344, 1, u'+  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (33377, 1, u'+    assert( pFile->locktype==NO_LOCK );'), (33389, 1, u'+    assert( pFile->locktype==SHARED_LOCK );'), (33408, 1, u'+    assert( pFile->locktype>=SHARED_LOCK );'), (33456, 1, u'+  assert( id!=0 );'), (33489, 1, u'+  assert( pFile!=0 );'), (33490, 1, u'+  assert( locktype<=SHARED_LOCK );'), (33788, 1, u'+  assert( sqlite3_mutex_held(pFile->mutex) || pFile->nRef==0 );'), (33831, 1, u'+  assert( winShmMutexHeld() );'), (33882, 1, u'+  assert( pDbFd->pShm==0 );    /* Not previously opened */'), (34014, 1, u'+  assert( pShmNode->nRef>0 );'), (34040, 1, u'+  assert( ofst>=0 && ofst+n<=SQLITE_SHM_NLOCK );'), (34041, 1, u'+  assert( n>=1 );'), (34042, 1, u'+  assert( flags==(SQLITE_SHM_LOCK | SQLITE_SHM_SHARED)'), (34046, 1, u'+  assert( n==1 || (flags & SQLITE_SHM_EXCLUSIVE)!=0 );'), (34049, 1, u'+  assert( n>1 || mask==(1<<ofst) );'), (34057, 1, u'+      assert( (pX->exclMask & (p->exclMask|p->sharedMask))==0 );'), (34118, 1, u'+        assert( (p->sharedMask & mask)==0 );'), (34184, 1, u'+  assert( szRegion==pShmNode->szRegion || pShmNode->nRegion==0 );'), (34305, 1, u'+  assert( pFile!=0 );'), (34358, 1, u'+  assert( nMap>=0 || pFd->nFetchOut==0 );'), (34410, 1, u'+    assert( (nMap % winSysInfo.dwPageSize)==0 );'), (34414, 1, u'+    assert( sizeof(SIZE_T)==sizeof(sqlite3_int64) || nMap<=0xffffffff );'), (34498, 1, u'+  assert( (p==0)==(pFd->nFetchOut==0) );'), (34501, 1, u'+  assert( p==0 || p==&((u8 *)pFd->pMapRegion)[iOff] );'), (34516, 1, u'+  assert( pFd->nFetchOut>=0 );'), (34753, 1, u'+  assert((isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly));'), (34754, 1, u'+  assert(isCreate==0 || isReadWrite);'), (34755, 1, u'+  assert(isExclusive==0 || isCreate);'), (34756, 1, u'+  assert(isDelete==0 || isCreate);'), (34760, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_DB );'), (34761, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_JOURNAL );'), (34762, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MASTER_JOURNAL );'), (34763, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_WAL );'), (34766, 1, u'+  assert( eType==SQLITE_OPEN_MAIN_DB      || eType==SQLITE_OPEN_TEMP_DB'), (34772, 1, u'+  assert( pFile!=0 );'), (34787, 1, u'+    assert(isDelete && !isOpenJournal);'), (34801, 1, u'+  assert( (eType!=SQLITE_OPEN_MAIN_DB) || (flags & SQLITE_OPEN_URI) ||'), (35159, 1, u'+      assert(!"Invalid flags argument");'), (35220, 1, u'+  assert( pVfs->mxPathname>=MAX_PATH );'), (35221, 1, u'+  assert( nFull>=pVfs->mxPathname );'), (35602, 1, u'+  assert( ArraySize(aSyscall)==74 );'), (35611, 1, u'+  assert( winSysInfo.dwAllocationGranularity>0 );'), (35612, 1, u'+  assert( winSysInfo.dwPageSize>0 );'), (35746, 1, u'+  assert( sizeof(*p)==BITVEC_SZ );'), (35798, 1, u'+  assert( i>0 );'), (35799, 1, u'+  assert( i<=p->iSize );'), (35868, 1, u'+  assert( i>0 );'), (36078, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (36079, 1, u'+# define expensive_assert(X)  assert(X)'), (36081, 1, u'+# define expensive_assert(X)'), (36086, 1, u'+#if !defined(NDEBUG) && defined(SQLITE_ENABLE_EXPENSIVE_ASSERT)'), (36097, 1, u'+    assert( p->nRef || (p->flags&PGHDR_NEED_SYNC) );'), (36109, 1, u'+  assert( pPage->pDirtyNext || pPage==p->pDirtyTail );'), (36110, 1, u'+  assert( pPage->pDirtyPrev || pPage==p->pDirty );'), (36124, 1, u'+    assert( pPage==p->pDirtyTail );'), (36130, 1, u'+    assert( pPage==p->pDirty );'), (36136, 1, u'+  expensive_assert( pcacheCheckSynced(p) );'), (36146, 1, u'+  assert( pPage->pDirtyNext==0 && pPage->pDirtyPrev==0 && p->pDirty!=pPage );'), (36150, 1, u'+    assert( pPage->pDirtyNext->pDirtyPrev==0 );'), (36160, 1, u'+  expensive_assert( pcacheCheckSynced(p) );'), (36231, 1, u'+  assert( pCache->nRef==0 && pCache->pDirty==0 );'), (36264, 1, u'+  assert( pCache!=0 );'), (36265, 1, u'+  assert( createFlag==1 || createFlag==0 );'), (36266, 1, u'+  assert( pgno>0 );'), (36296, 1, u'+    expensive_assert( pcacheCheckSynced(pCache) );'), (36335, 1, u'+    assert( pPgHdr->pCache==pCache );'), (36336, 1, u'+    assert( pPgHdr->pgno==pgno );'), (36337, 1, u'+    assert( pPgHdr->pData==pPage->pBuf );'), (36338, 1, u'+    assert( pPgHdr->pExtra==(void *)&pPgHdr[1] );'), (36357, 1, u'+  assert( p->nRef>0 );'), (36376, 1, u'+  assert(p->nRef>0);'), (36387, 1, u'+  assert( p->nRef==1 );'), (36405, 1, u'+  assert( p->nRef>0 );'), (36452, 1, u'+  assert( p->nRef>0 );'), (36453, 1, u'+  assert( newPgno>0 );'), (36481, 1, u'+      assert( p->pgno>0 );'), (36483, 1, u'+        assert( p->flags&PGHDR_DIRTY );'), (36856, 1, u'+  assert( sqlite3_mutex_notheld(pcache1.grp.mutex) );'), (36865, 1, u'+      assert( pcache1.nFreeSlot>=0 );'), (36903, 1, u'+    assert( pcache1.nFreeSlot<=pcache1.nSlot );'), (36906, 1, u'+    assert( sqlite3MemdebugHasType(p, MEMTYPE_PCACHE) );'), (36928, 1, u'+    assert( sqlite3MemdebugHasType(p, MEMTYPE_PCACHE) );'), (36947, 1, u'+  assert( sqlite3_mutex_held(pCache->pGroup->mutex) );'), (36984, 1, u'+    assert( sqlite3_mutex_held(p->pCache->pGroup->mutex) );'), (37050, 1, u'+  assert( sqlite3_mutex_held(p->pGroup->mutex) );'), (37097, 1, u'+  assert( sqlite3_mutex_held(pGroup->mutex) );'), (37129, 1, u'+  assert( sqlite3_mutex_held(pCache->pGroup->mutex) );'), (37142, 1, u'+  assert( sqlite3_mutex_held(pGroup->mutex) );'), (37145, 1, u'+    assert( p->pCache->pGroup==pGroup );'), (37165, 1, u'+  assert( sqlite3_mutex_held(pCache->pGroup->mutex) );'), (37181, 1, u'+  assert( pCache->nPage==nPage );'), (37192, 1, u'+  assert( pcache1.isInit==0 );'), (37210, 1, u'+  assert( pcache1.isInit!=0 );'), (37242, 1, u'+  assert( (szPage & (szPage-1))==0 && szPage>=512 && szPage<=65536 );'), (37243, 1, u'+  assert( szExtra < 300 );'), (37383, 1, u'+  assert( pCache->bPurgeable || createFlag!=1 );'), (37384, 1, u'+  assert( pCache->bPurgeable || pCache->nMin==0 );'), (37385, 1, u'+  assert( pCache->bPurgeable==0 || pCache->nMin==10 );'), (37386, 1, u'+  assert( pCache->nMin==0 || pCache->bPurgeable );'), (37413, 1, u'+  assert( pCache->nPage >= pCache->nRecyclable );'), (37415, 1, u'+  assert( pGroup->mxPinned == pGroup->nMaxPage + 10 - pGroup->nMinPage );'), (37416, 1, u'+  assert( pCache->n90pct == pCache->nMax*9/10 );'), (37443, 1, u'+    assert( (pCache->szPage & (pCache->szPage-1))==0 && pCache->szPage>=512 );'), (37444, 1, u'+    assert( pCache->szExtra<512 );'), (37445, 1, u'+    assert( (pOther->szPage & (pOther->szPage-1))==0 && pOther->szPage>=512 );'), (37446, 1, u'+    assert( pOther->szExtra<512 );'), (37500, 1, u'+  assert( pPage->pCache==pCache );'), (37506, 1, u'+  assert( pPage->pLruPrev==0 && pPage->pLruNext==0 );'), (37507, 1, u'+  assert( pGroup->pLruHead!=pPage && pGroup->pLruTail!=pPage );'), (37541, 1, u'+  assert( pPage->iKey==iOld );'), (37542, 1, u'+  assert( pPage->pCache==pCache );'), (37589, 1, u'+  assert( pCache->bPurgeable || (pCache->nMax==0 && pCache->nMin==0) );'), (37592, 1, u'+  assert( pGroup->nMaxPage >= pCache->nMax );'), (37594, 1, u'+  assert( pGroup->nMinPage >= pCache->nMin );'), (37639, 1, u'+  assert( sqlite3_mutex_notheld(pcache1.grp.mutex) );'), (37640, 1, u'+  assert( sqlite3_mutex_notheld(pcache1.mutex) );'), (37821, 1, u'+  assert( N >= ROUND8(sizeof(*p)) );'), (37863, 1, u'+  assert( p!=0 );'), (37890, 1, u'+  assert( p!=0 && (p->rsFlags & ROWSET_NEXT)==0 );'), (37923, 1, u'+    assert( pA->pRight==0 || pA->v<=pA->pRight->v );'), (37924, 1, u'+    assert( pB->pRight==0 || pB->v<=pB->pRight->v );'), (37938, 1, u'+    assert( pA->pRight==0 || pA->v<=pA->pRight->v );'), (37941, 1, u'+    assert( pB==0 || pB->pRight==0 || pB->v<=pB->pRight->v );'), (37984, 1, u'+  assert( pIn!=0 );'), (37997, 1, u'+  assert( (*ppLast)->pRight==0 );'), (38049, 1, u'+  assert( pList!=0 );'), (38072, 1, u'+  assert( p!=0 && (p->rsFlags & ROWSET_NEXT)==0 );'), (38082, 1, u'+  assert( p->pForest==0 );'), (38106, 1, u'+  assert( p!=0 );'), (38136, 1, u'+  assert( pRowSet!=0 && (pRowSet->rsFlags & ROWSET_NEXT)==0 );'), (39159, 1, u'+static int assert_pager_state(Pager *p){'), (39163, 1, u'+  assert( p->eState==PAGER_OPEN'), (39176, 1, u'+  assert( p->tempFile==0 || p->eLock==EXCLUSIVE_LOCK );'), (39177, 1, u'+  assert( p->tempFile==0 || pPager->changeCountDone );'), (39182, 1, u'+  assert( p->journalMode==PAGER_JOURNALMODE_OFF || p->useJournal );'), (39183, 1, u'+  assert( p->journalMode!=PAGER_JOURNALMODE_OFF || !isOpen(p->jfd) );'), (39194, 1, u'+    assert( p->noSync );'), (39195, 1, u'+    assert( p->journalMode==PAGER_JOURNALMODE_OFF'), (39198, 1, u'+    assert( p->eState!=PAGER_ERROR && p->eState!=PAGER_OPEN );'), (39199, 1, u'+    assert( pagerUseWal(p)==0 );'), (39205, 1, u'+  assert( pPager->changeCountDone==0 || pPager->eLock>=RESERVED_LOCK );'), (39206, 1, u'+  assert( p->eLock!=PENDING_LOCK );'), (39210, 1, u'+      assert( !MEMDB );'), (39211, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (39212, 1, u'+      assert( sqlite3PcacheRefCount(pPager->pPCache)==0 || pPager->tempFile );'), (39216, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (39217, 1, u'+      assert( p->eLock!=UNKNOWN_LOCK );'), (39218, 1, u'+      assert( p->eLock>=SHARED_LOCK );'), (39222, 1, u'+      assert( p->eLock!=UNKNOWN_LOCK );'), (39223, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (39225, 1, u'+        assert( p->eLock>=RESERVED_LOCK );'), (39227, 1, u'+      assert( pPager->dbSize==pPager->dbOrigSize );'), (39228, 1, u'+      assert( pPager->dbOrigSize==pPager->dbFileSize );'), (39229, 1, u'+      assert( pPager->dbOrigSize==pPager->dbHintSize );'), (39230, 1, u'+      assert( pPager->setMaster==0 );'), (39234, 1, u'+      assert( p->eLock!=UNKNOWN_LOCK );'), (39235, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (39242, 1, u'+        assert( p->eLock>=RESERVED_LOCK );'), (39243, 1, u'+        assert( isOpen(p->jfd)'), (39248, 1, u'+      assert( pPager->dbOrigSize==pPager->dbFileSize );'), (39249, 1, u'+      assert( pPager->dbOrigSize==pPager->dbHintSize );'), (39253, 1, u'+      assert( p->eLock==EXCLUSIVE_LOCK );'), (39254, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (39255, 1, u'+      assert( !pagerUseWal(pPager) );'), (39256, 1, u'+      assert( p->eLock>=EXCLUSIVE_LOCK );'), (39257, 1, u'+      assert( isOpen(p->jfd)'), (39261, 1, u'+      assert( pPager->dbOrigSize<=pPager->dbHintSize );'), (39265, 1, u'+      assert( p->eLock==EXCLUSIVE_LOCK );'), (39266, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (39267, 1, u'+      assert( !pagerUseWal(pPager) );'), (39268, 1, u'+      assert( isOpen(p->jfd)'), (39279, 1, u'+      assert( pPager->errCode!=SQLITE_OK );'), (39280, 1, u'+      assert( sqlite3PcacheRefCount(pPager->pPCache)>0 );'), (39412, 1, u'+  assert( !pPager->exclusiveMode || pPager->eLock==eLock );'), (39413, 1, u'+  assert( eLock==NO_LOCK || eLock==SHARED_LOCK );'), (39414, 1, u'+  assert( eLock!=NO_LOCK || pagerUseWal(pPager)==0 );'), (39416, 1, u'+    assert( pPager->eLock>=eLock );'), (39439, 1, u'+  assert( eLock==SHARED_LOCK || eLock==RESERVED_LOCK || eLock==EXCLUSIVE_LOCK );'), (39469, 1, u'+  assert( !MEMDB );'), (39475, 1, u'+    assert( isOpen(pPager->fd) );'), (39480, 1, u'+    assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (39481, 1, u'+    assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (39523, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (39524, 1, u'+  assert( (pPg->flags&PGHDR_DIRTY) || pPg->pageHash==pager_pagehash(pPg) );'), (39618, 1, u'+  assert( offset%JOURNAL_HDR_SZ(pPager)==0 );'), (39619, 1, u'+  assert( offset>=c );'), (39620, 1, u'+  assert( (offset-c)<JOURNAL_HDR_SZ(pPager) );'), (39647, 1, u'+  assert( isOpen(pPager->jfd) );'), (39701, 1, u'+  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (39739, 1, u'+  assert( isOpen(pPager->fd) || pPager->noSync );'), (39788, 1, u'+    assert( pPager->journalHdr <= pPager->journalOff );'), (39823, 1, u'+  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (39944, 1, u'+  assert( pPager->setMaster==0 );'), (39945, 1, u'+  assert( !pagerUseWal(pPager) );'), (39954, 1, u'+  assert( isOpen(pPager->jfd) );'), (39955, 1, u'+  assert( pPager->journalHdr <= pPager->journalOff );'), (40058, 1, u'+      assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (40083, 1, u'+  assert( pPager->eState==PAGER_READER'), (40093, 1, u'+    assert( !isOpen(pPager->jfd) );'), (40105, 1, u'+    assert( (PAGER_JOURNALMODE_MEMORY   & 5)!=1 );'), (40106, 1, u'+    assert( (PAGER_JOURNALMODE_OFF      & 5)!=1 );'), (40107, 1, u'+    assert( (PAGER_JOURNALMODE_WAL      & 5)!=1 );'), (40108, 1, u'+    assert( (PAGER_JOURNALMODE_DELETE   & 5)!=1 );'), (40109, 1, u'+    assert( (PAGER_JOURNALMODE_TRUNCATE & 5)==1 );'), (40110, 1, u'+    assert( (PAGER_JOURNALMODE_PERSIST  & 5)==1 );'), (40131, 1, u'+    assert( pPager->errCode || pPager->eState!=PAGER_ERROR );'), (40142, 1, u'+    assert( !MEMDB );'), (40175, 1, u'+  assert( rc==SQLITE_OK || !MEMDB );'), (40176, 1, u'+  assert('), (40260, 1, u'+  assert( assert_pager_state(pPager) );'), (40261, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (40267, 1, u'+  assert( isOpen(pPager->jfd) || pPager->pInJournal==0 );'), (40269, 1, u'+    assert( !pagerUseWal(pPager) );'), (40273, 1, u'+      assert( pPager->journalMode==PAGER_JOURNALMODE_MEMORY );'), (40294, 1, u'+      assert( pPager->journalMode==PAGER_JOURNALMODE_DELETE'), (40328, 1, u'+    assert( rc2==SQLITE_OK );'), (40336, 1, u'+    assert( pPager->eLock==EXCLUSIVE_LOCK );'), (40371, 1, u'+    assert( assert_pager_state(pPager) );'), (40377, 1, u'+      assert( pPager->eState==PAGER_READER );'), (40480, 1, u'+  assert( (isMainJrnl&~1)==0 );      /* isMainJrnl is 0 or 1 */'), (40481, 1, u'+  assert( (isSavepnt&~1)==0 );       /* isSavepnt is 0 or 1 */'), (40482, 1, u'+  assert( isMainJrnl || pDone );     /* pDone always used on sub-journals */'), (40483, 1, u'+  assert( isSavepnt || pDone==0 );   /* pDone never used on non-savepoint */'), (40486, 1, u'+  assert( aData );         /* Temp storage must have already been allocated */'), (40487, 1, u'+  assert( pagerUseWal(pPager)==0 || (!isMainJrnl && isSavepnt) );'), (40495, 1, u'+  assert( pPager->eState>=PAGER_WRITER_CACHEMOD'), (40498, 1, u'+  assert( pPager->eState>=PAGER_WRITER_CACHEMOD || isMainJrnl );'), (40516, 1, u'+    assert( !isSavepnt );'), (40584, 1, u'+  assert( pPg || !MEMDB );'), (40585, 1, u'+  assert( pPager->eState!=PAGER_OPEN || pPg==0 );'), (40601, 1, u'+    assert( !pagerUseWal(pPager) );'), (40628, 1, u'+    assert( isSavepnt );'), (40629, 1, u'+    assert( pPager->doNotSpill==0 );'), (40632, 1, u'+    assert( pPager->doNotSpill==1 );'), (40669, 1, u'+      assert( !pagerUseWal(pPager) );'), (40813, 1, u'+    assert( !isOpen(pJournal) );'), (40842, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (40843, 1, u'+  assert( pPager->eState!=PAGER_READER );'), (40850, 1, u'+    assert( pPager->eLock==EXCLUSIVE_LOCK );'), (40881, 1, u'+    assert( MAX_SECTOR_SIZE>=512 );'), (40911, 1, u'+  assert( isOpen(pPager->fd) || pPager->tempFile );'), (40998, 1, u'+  assert( isOpen(pPager->jfd) );'), (41051, 1, u'+      assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) );'), (41120, 1, u'+  assert( 0 );'), (41197, 1, u'+  assert( pPager->eState>=PAGER_READER && !MEMDB );'), (41198, 1, u'+  assert( isOpen(pPager->fd) );'), (41201, 1, u'+    assert( pPager->tempFile );'), (41291, 1, u'+  assert( pagerUseWal(pPager) );'), (41369, 1, u'+  assert( pPager->pWal );'), (41370, 1, u'+  assert( pList );'), (41374, 1, u'+    assert( p->pgno < p->pDirty->pgno );'), (41378, 1, u'+  assert( pList->pDirty==0 || isCommit );'), (41393, 1, u'+    assert( pList );'), (41432, 1, u'+  assert( pagerUseWal(pPager) );'), (41433, 1, u'+  assert( pPager->eState==PAGER_OPEN || pPager->eState==PAGER_READER );'), (41470, 1, u'+  assert( pPager->eState==PAGER_OPEN );'), (41471, 1, u'+  assert( pPager->eLock>=SHARED_LOCK );'), (41482, 1, u'+    assert( isOpen(pPager->fd) || pPager->tempFile );'), (41525, 1, u'+  assert( pPager->eState==PAGER_OPEN );'), (41526, 1, u'+  assert( pPager->eLock>=SHARED_LOCK );'), (41598, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (41599, 1, u'+  assert( pPager->eState>=PAGER_WRITER_LOCKED );'), (41625, 1, u'+  assert( pagerUseWal(pPager)==0 || szJ==0 );'), (41640, 1, u'+    assert( rc!=SQLITE_DONE );'), (41655, 1, u'+    assert( rc!=SQLITE_DONE );'), (41670, 1, u'+    assert( rc!=SQLITE_DONE );'), (41672, 1, u'+  assert( rc!=SQLITE_OK || pPager->journalOff>=szJ );'), (41686, 1, u'+      assert( offset==(i64)ii*(4+pPager->pageSize) );'), (41689, 1, u'+    assert( rc!=SQLITE_DONE );'), (41787, 1, u'+  assert( level>=1 && level<=3 );'), (41848, 1, u'+  assert( rc!=SQLITE_OK || isOpen(pFile) );'), (41883, 1, u'+    assert( ((int(*)(void *))(ap[0]))==xBusyHandler );'), (41884, 1, u'+    assert( ap[1]==pBusyHandlerArg );'), (41933, 1, u'+  assert( pageSize==0 || (pageSize>=512 && pageSize<=SQLITE_MAX_PAGE_SIZE) );'), (41962, 1, u'+    assert( nReserve>=0 && nReserve<1000 );'), (41993, 1, u'+  assert( pPager->eState!=PAGER_OPEN );      /* Called only by OP_MaxPgcnt */'), (41994, 1, u'+  assert( pPager->mxPgno>=pPager->dbSize );  /* OP_MaxPgcnt enforces this */'), (42039, 1, u'+  assert( isOpen(pPager->fd) || pPager->tempFile );'), (42045, 1, u'+  assert( !pagerUseWal(pPager) );'), (42065, 1, u'+  assert( pPager->eState>=PAGER_READER );'), (42066, 1, u'+  assert( pPager->eState!=PAGER_WRITER_FINISHED );'), (42093, 1, u'+  assert( (pPager->eLock>=locktype)'), (42127, 1, u'+static void assertTruncateConstraintCb(PgHdr *pPg){'), (42128, 1, u'+  assert( pPg->flags&PGHDR_DIRTY );'), (42129, 1, u'+  assert( !subjRequiresPage(pPg) || pPg->pgno<=pPg->pPager->dbSize );'), (42131, 1, u'+static void assertTruncateConstraint(Pager *pPager){'), (42132, 1, u'+  sqlite3PcacheIterateDirty(pPager->pPCache, assertTruncateConstraintCb);'), (42135, 1, u'+# define assertTruncateConstraint(pPager)'), (42150, 1, u'+  assert( pPager->dbSize>=nPage );'), (42151, 1, u'+  assert( pPager->eState>=PAGER_WRITER_CACHEMOD );'), (42226, 1, u'+  assert( p->pExtra==(void *)&p[1] );'), (42227, 1, u'+  assert( p->pPage==0 );'), (42228, 1, u'+  assert( p->flags==PGHDR_MMAP );'), (42229, 1, u'+  assert( p->pPager==pPager );'), (42230, 1, u'+  assert( p->nRef==1 );'), (42249, 1, u'+  assert( pPager->fd->pMethods->iVersion>=3 );'), (42283, 1, u'+  assert( assert_pager_state(pPager) );'), (42326, 1, u'+  assert( !pPager->aSavepoint && !pPager->pInJournal );'), (42327, 1, u'+  assert( !isOpen(pPager->jfd) && !isOpen(pPager->sjfd) );'), (42387, 1, u'+  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (42390, 1, u'+  assert( assert_pager_state(pPager) );'), (42391, 1, u'+  assert( !pagerUseWal(pPager) );'), (42397, 1, u'+    assert( !pPager->tempFile );'), (42400, 1, u'+      assert( isOpen(pPager->jfd) );'), (42491, 1, u'+  assert( assert_pager_state(pPager) );'), (42531, 1, u'+  assert( !pagerUseWal(pPager) );'), (42532, 1, u'+  assert( pPager->eState==PAGER_WRITER_DBMOD );'), (42533, 1, u'+  assert( pPager->eLock==EXCLUSIVE_LOCK );'), (42540, 1, u'+    assert( pPager->tempFile && rc==SQLITE_OK );'), (42547, 1, u'+  assert( rc!=SQLITE_OK || isOpen(pPager->fd) );'), (42571, 1, u'+      assert( (pList->flags&PGHDR_NEED_SYNC)==0 );'), (42648, 1, u'+    assert( pPager->useJournal );'), (42649, 1, u'+    assert( isOpen(pPager->jfd) || pagerUseWal(pPager) );'), (42650, 1, u'+    assert( isOpen(pPager->sjfd) || pPager->nSubRec==0 );'), (42651, 1, u'+    assert( pagerUseWal(pPager)'), (42674, 1, u'+    assert( pPager->nSavepoint>0 );'), (42703, 1, u'+  assert( pPg->pPager==pPager );'), (42704, 1, u'+  assert( pPg->flags&PGHDR_DIRTY );'), (42780, 1, u'+      assert( (pPg->flags&PGHDR_NEED_SYNC)==0 );'), (42898, 1, u'+    assert( nUri>=0 );'), (42937, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(SQLITE_INT_TO_PTR(journalFileSize)) );'), (42948, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );'), (42952, 1, u'+    assert( nPathname>0 );'), (42975, 1, u'+    assert( !memDb );'), (42988, 1, u'+      assert(SQLITE_DEFAULT_PAGE_SIZE<=SQLITE_MAX_DEFAULT_PAGE_SIZE);'), (43000, 1, u'+        assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (43001, 1, u'+        assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (43002, 1, u'+        assert(SQLITE_MAX_DEFAULT_PAGE_SIZE<=65536);'), (43030, 1, u'+    assert( pPager->memDb==0 );'), (43039, 1, u'+    assert( !pPager->pTmpSpace );'), (43046, 1, u'+  assert( nExtra<1000 );'), (43064, 1, u'+  assert( pPager->state == (tempFile ? PAGER_EXCLUSIVE : PAGER_UNLOCK) );'), (43068, 1, u'+  assert( tempFile==PAGER_LOCKINGMODE_NORMAL'), (43070, 1, u'+  assert( PAGER_LOCKINGMODE_EXCLUSIVE==1 );'), (43075, 1, u'+  assert( useJournal || pPager->tempFile );'), (43078, 1, u'+    assert( pPager->fullSync==0 );'), (43079, 1, u'+    assert( pPager->syncFlags==0 );'), (43080, 1, u'+    assert( pPager->walSyncFlags==0 );'), (43081, 1, u'+    assert( pPager->ckptSyncFlags==0 );'), (43093, 1, u'+  assert( isOpen(pPager->fd) || tempFile );'), (43149, 1, u'+  assert( pPager->useJournal );'), (43150, 1, u'+  assert( isOpen(pPager->fd) );'), (43151, 1, u'+  assert( pPager->eState==PAGER_OPEN );'), (43153, 1, u'+  assert( jrnlOpen==0 || ( sqlite3OsDeviceCharacteristics(pPager->jfd) &'), (43268, 1, u'+  assert( sqlite3PcacheRefCount(pPager->pPCache)==0 );'), (43269, 1, u'+  assert( assert_pager_state(pPager) );'), (43270, 1, u'+  assert( pPager->eState==PAGER_OPEN || pPager->eState==PAGER_READER );'), (43276, 1, u'+    assert( !MEMDB );'), (43280, 1, u'+      assert( pPager->eLock==NO_LOCK || pPager->eLock==UNKNOWN_LOCK );'), (43340, 1, u'+          assert( !pPager->tempFile );'), (43342, 1, u'+          assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (43359, 1, u'+        assert( rc==SQLITE_OK );'), (43390, 1, u'+      assert( pPager->eState==PAGER_OPEN );'), (43391, 1, u'+      assert( (pPager->eLock==SHARED_LOCK)'), (43453, 1, u'+    assert( pPager->pWal==0 || rc==SQLITE_OK );'), (43458, 1, u'+    assert( rc==SQLITE_OK );'), (43468, 1, u'+    assert( !MEMDB );'), (43470, 1, u'+    assert( pPager->eState==PAGER_OPEN );'), (43563, 1, u'+  assert( pPager->eState>=PAGER_READER );'), (43564, 1, u'+  assert( assert_pager_state(pPager) );'), (43565, 1, u'+  assert( noContent==0 || bMmapOk==0 );'), (43599, 1, u'+          assert( rc==SQLITE_OK );'), (43619, 1, u'+  assert( (*ppPage)->pgno==pgno );'), (43620, 1, u'+  assert( (*ppPage)->pPager==pPager || (*ppPage)->pPager==0 );'), (43625, 1, u'+    assert( pgno<=PAGER_MAX_PGNO && pgno!=PAGER_MJ_PGNO(pPager) );'), (43671, 1, u'+      assert( pPg->pPager==pPager );'), (43684, 1, u'+  assert( rc!=SQLITE_OK );'), (43707, 1, u'+  assert( pPager!=0 );'), (43708, 1, u'+  assert( pgno!=0 );'), (43709, 1, u'+  assert( pPager->pPCache!=0 );'), (43710, 1, u'+  assert( pPager->eState>=PAGER_READER && pPager->eState!=PAGER_ERROR );'), (43761, 1, u'+  assert( pPager->eState==PAGER_WRITER_LOCKED );'), (43762, 1, u'+  assert( assert_pager_state(pPager) );'), (43763, 1, u'+  assert( pPager->pInJournal==0 );'), (43795, 1, u'+      assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (43816, 1, u'+    assert( pPager->eState==PAGER_WRITER_LOCKED );'), (43844, 1, u'+  assert( pPager->eState>=PAGER_READER && pPager->eState<PAGER_ERROR );'), (43848, 1, u'+    assert( pPager->pInJournal==0 );'), (43897, 1, u'+    assert( rc==SQLITE_OK || pPager->eState==PAGER_READER );'), (43898, 1, u'+    assert( rc!=SQLITE_OK || pPager->eState==PAGER_WRITER_LOCKED );'), (43899, 1, u'+    assert( assert_pager_state(pPager) );'), (43922, 1, u'+  assert( pPager->eState==PAGER_WRITER_LOCKED'), (43926, 1, u'+  assert( assert_pager_state(pPager) );'), (43951, 1, u'+  assert( pPager->eState>=PAGER_WRITER_CACHEMOD );'), (43952, 1, u'+  assert( assert_pager_state(pPager) );'), (43959, 1, u'+    assert( !pagerUseWal(pPager) );'), (43967, 1, u'+      assert( pagerUseWal(pPager)==0 );'), (43976, 1, u'+        assert( pPg->pgno!=PAGER_MJ_PGNO(pPager) );'), (43978, 1, u'+        assert( pPager->journalHdr<=pPager->journalOff );'), (44007, 1, u'+        assert( pPager->pInJournal!=0 );'), (44010, 1, u'+        assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (44013, 1, u'+          assert( rc==SQLITE_NOMEM );'), (44065, 1, u'+  assert( (pPg->flags & PGHDR_MMAP)==0 );'), (44066, 1, u'+  assert( pPager->eState>=PAGER_WRITER_LOCKED );'), (44067, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (44068, 1, u'+  assert( assert_pager_state(pPager) );'), (44081, 1, u'+    assert( !MEMDB );'), (44082, 1, u'+    assert( pPager->doNotSyncSpill==0 );'), (44099, 1, u'+    assert(nPage>0);'), (44100, 1, u'+    assert(pg1<=pPg->pgno);'), (44101, 1, u'+    assert((pg1+nPage)>pPg->pgno);'), (44132, 1, u'+      assert( !MEMDB );'), (44142, 1, u'+    assert( pPager->doNotSyncSpill==1 );'), (44210, 1, u'+  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (44213, 1, u'+  assert( assert_pager_state(pPager) );'), (44227, 1, u'+  assert( isDirectMode==0 );'), (44236, 1, u'+    assert( !pPager->tempFile && isOpen(pPager->fd) );'), (44240, 1, u'+    assert( pPgHdr==0 || rc==SQLITE_OK );'), (44258, 1, u'+        assert( pPager->dbFileSize>0 );'), (44293, 1, u'+    assert( !MEMDB );'), (44296, 1, u'+    assert( !MEMDB );'), (44318, 1, u'+  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (44322, 1, u'+  assert( assert_pager_state(pPager) );'), (44362, 1, u'+  assert( pPager->eState==PAGER_WRITER_LOCKED'), (44367, 1, u'+  assert( assert_pager_state(pPager) );'), (44395, 1, u'+      assert( rc==SQLITE_OK );'), (44429, 1, u'+      assert( isOpen(pPager->jfd)'), (44479, 1, u'+        assert( rc!=SQLITE_IOERR_BLOCKED );'), (44492, 1, u'+        assert( pPager->eState==PAGER_WRITER_DBMOD );'), (44536, 1, u'+  assert( pPager->eState==PAGER_WRITER_LOCKED'), (44540, 1, u'+  assert( assert_pager_state(pPager) );'), (44557, 1, u'+    assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) || !pPager->journalOff );'), (44601, 1, u'+  assert( assert_pager_state(pPager) );'), (44626, 1, u'+  assert( pPager->eState==PAGER_READER || rc!=SQLITE_OK );'), (44627, 1, u'+  assert( rc==SQLITE_OK || rc==SQLITE_FULL || rc==SQLITE_CORRUPT'), (44700, 1, u'+  assert( eStat==SQLITE_DBSTATUS_CACHE_HIT'), (44705, 1, u'+  assert( SQLITE_DBSTATUS_CACHE_HIT+1==SQLITE_DBSTATUS_CACHE_MISS );'), (44706, 1, u'+  assert( SQLITE_DBSTATUS_CACHE_HIT+2==SQLITE_DBSTATUS_CACHE_WRITE );'), (44707, 1, u'+  assert( PAGER_STAT_HIT==0 && PAGER_STAT_MISS==1 && PAGER_STAT_WRITE==2 );'), (44736, 1, u'+  assert( pPager->eState>=PAGER_WRITER_LOCKED );'), (44737, 1, u'+  assert( assert_pager_state(pPager) );'), (44774, 1, u'+    assert( pPager->nSavepoint==nSavepoint );'), (44775, 1, u'+    assertTruncateConstraint(pPager);'), (44814, 1, u'+  assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (44815, 1, u'+  assert( iSavepoint>=0 || op==SAVEPOINT_ROLLBACK );'), (44838, 1, u'+          assert( rc==SQLITE_OK );'), (44851, 1, u'+      assert(rc!=SQLITE_DONE);'), (44958, 1, u'+  assert( pPg->nRef>0 );'), (44959, 1, u'+  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (44962, 1, u'+  assert( assert_pager_state(pPager) );'), (45010, 1, u'+    assert( pPager->journalMode==PAGER_JOURNALMODE_OFF ||'), (45012, 1, u'+    assert( pPg->flags&PGHDR_DIRTY );'), (45022, 1, u'+  assert( !pPgOld || pPgOld->nRef==1 );'), (45043, 1, u'+    assert( pPgOld );'), (45067, 1, u'+        assert( pPager->pTmpSpace!=0 );'), (45085, 1, u'+  assert( pPg->nRef>0 || pPg->pPager->memDb );'), (45108, 1, u'+  assert( eMode==PAGER_LOCKINGMODE_QUERY'), (45111, 1, u'+  assert( PAGER_LOCKINGMODE_QUERY<0 );'), (45112, 1, u'+  assert( PAGER_LOCKINGMODE_NORMAL>=0 && PAGER_LOCKINGMODE_EXCLUSIVE>=0 );'), (45113, 1, u'+  assert( pPager->exclusiveMode || 0==sqlite3WalHeapMemory(pPager->pWal) );'), (45151, 1, u'+  assert(      eMode==PAGER_JOURNALMODE_DELETE'), (45162, 1, u'+  assert( pPager->tempFile==0 || eMode!=PAGER_JOURNALMODE_WAL );'), (45168, 1, u'+    assert( eOld==PAGER_JOURNALMODE_MEMORY || eOld==PAGER_JOURNALMODE_OFF );'), (45177, 1, u'+    assert( pPager->eState!=PAGER_ERROR );'), (45184, 1, u'+    assert( (PAGER_JOURNALMODE_TRUNCATE & 5)==1 );'), (45185, 1, u'+    assert( (PAGER_JOURNALMODE_PERSIST & 5)==1 );'), (45186, 1, u'+    assert( (PAGER_JOURNALMODE_DELETE & 5)==0 );'), (45187, 1, u'+    assert( (PAGER_JOURNALMODE_MEMORY & 5)==4 );'), (45188, 1, u'+    assert( (PAGER_JOURNALMODE_OFF & 5)==0 );'), (45189, 1, u'+    assert( (PAGER_JOURNALMODE_WAL & 5)==5 );'), (45191, 1, u'+    assert( isOpen(pPager->fd) || pPager->exclusiveMode );'), (45208, 1, u'+        assert( state==PAGER_OPEN || state==PAGER_READER );'), (45213, 1, u'+          assert( rc==SQLITE_OK );'), (45224, 1, u'+        assert( state==pPager->eState );'), (45246, 1, u'+  assert( assert_pager_state(pPager) );'), (45325, 1, u'+  assert( pPager->eLock==SHARED_LOCK || pPager->eLock==EXCLUSIVE_LOCK );'), (45345, 1, u'+  assert( pPager->pWal==0 && pPager->tempFile==0 );'), (45346, 1, u'+  assert( pPager->eLock==SHARED_LOCK || pPager->eLock==EXCLUSIVE_LOCK );'), (45393, 1, u'+  assert( assert_pager_state(pPager) );'), (45394, 1, u'+  assert( pPager->eState==PAGER_OPEN   || pbOpen );'), (45395, 1, u'+  assert( pPager->eState==PAGER_READER || !pbOpen );'), (45396, 1, u'+  assert( pbOpen==0 || *pbOpen==0 );'), (45397, 1, u'+  assert( pbOpen!=0 || (!pPager->tempFile && !pPager->pWal) );'), (45429, 1, u'+  assert( pPager->journalMode==PAGER_JOURNALMODE_WAL );'), (45474, 1, u'+  assert( pPager->eState==PAGER_READER );'), (46049, 1, u'+  assert( iPage==0 || *ppPage || rc!=SQLITE_OK );'), (46057, 1, u'+  assert( pWal->nWiData>0 && pWal->apWiData[0] );'), (46065, 1, u'+  assert( pWal->nWiData>0 && pWal->apWiData[0] );'), (46108, 1, u'+  assert( nByte>=8 );'), (46109, 1, u'+  assert( (nByte&0x00000007)==0 );'), (46143, 1, u'+  assert( pWal->writeLock );'), (46174, 1, u'+  assert( WAL_FRAME_HDRSIZE==24 );'), (46202, 1, u'+  assert( WAL_FRAME_HDRSIZE==24 );'), (46311, 1, u'+  assert( iPage>0 );'), (46312, 1, u'+  assert( (HASHTABLE_NSLOT & (HASHTABLE_NSLOT-1))==0 );'), (46344, 1, u'+  assert( rc==SQLITE_OK || iHash>0 );'), (46373, 1, u'+  assert( (iHash==0 || iFrame>HASHTABLE_NPAGE_ONE)'), (46413, 1, u'+  assert( pWal->writeLock );'), (46424, 1, u'+  assert( pWal->nWiData>walFramePage(pWal->hdr.mxFrame) );'), (46425, 1, u'+  assert( pWal->apWiData[walFramePage(pWal->hdr.mxFrame)] );'), (46432, 1, u'+  assert( iLimit>0 );'), (46445, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (46456, 1, u'+      assert( aHash[iKey]==i );'), (46484, 1, u'+    assert( idx <= HASHTABLE_NSLOT/2 + 1 );'), (46502, 1, u'+      assert( !aPgno[idx] );'), (46513, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (46521, 1, u'+      assert( nEntry==idx );'), (46535, 1, u'+        assert( aHash[iKey]==i );'), (46569, 1, u'+  assert( pWal->ckptLock==1 || pWal->ckptLock==0 );'), (46570, 1, u'+  assert( WAL_ALL_BUT_WRITE==WAL_WRITE_LOCK+1 );'), (46571, 1, u'+  assert( WAL_CKPT_LOCK==WAL_ALL_BUT_WRITE );'), (46572, 1, u'+  assert( pWal->writeLock );'), (46761, 1, u'+  assert( zWalName && zWalName[0] );'), (46762, 1, u'+  assert( pDbFd );'), (46769, 1, u'+  assert( WIN_SHM_BASE==WALINDEX_LOCK_OFFSET );'), (46772, 1, u'+  assert( UNIX_SHM_BASE==WALINDEX_LOCK_OFFSET );'), (46843, 1, u'+  assert( iMin<0xffffffff );'), (46900, 1, u'+  assert( nLeft>0 && nRight>0 );'), (46917, 1, u'+    assert( iLeft>=nLeft || aContent[aLeft[iLeft]]>dbpage );'), (46918, 1, u'+    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );'), (46962, 1, u'+  assert( nList<=HASHTABLE_NPAGE && nList>0 );'), (46963, 1, u'+  assert( HASHTABLE_NPAGE==(1<<(ArraySize(aSub)-1)) );'), (46970, 1, u'+      assert( p->aList && p->nList<=(1<<iSub) );'), (46971, 1, u'+      assert( p->aList==&aList[iList&~((2<<iSub)-1)] );'), (46981, 1, u'+      assert( p->nList<=(1<<iSub) );'), (46982, 1, u'+      assert( p->aList==&aList[nList&~((2<<iSub)-1)] );'), (46986, 1, u'+  assert( aMerge==aList );'), (46993, 1, u'+      assert( aContent[aList[i]] > aContent[aList[i-1]] );'), (47030, 1, u'+  assert( pWal->ckptLock && pWal->hdr.mxFrame>0 );'), (47183, 1, u'+  assert( pIter );'), (47197, 1, u'+      assert( y<=pWal->hdr.mxFrame );'), (47237, 1, u'+      assert( walFramePgno(pWal, iFrame)==iDbpage );'), (47280, 1, u'+    assert( pWal->writeLock );'), (47284, 1, u'+      assert( mxSafeFrame==pWal->hdr.mxFrame );'), (47403, 1, u'+  assert( pWal->nWiData>0 && pWal->apWiData[0] );'), (47463, 1, u'+  assert( pChanged );'), (47468, 1, u'+  assert( page0 || pWal->writeLock==0 );'), (47480, 1, u'+  assert( badHdr==0 || pWal->writeLock==0 );'), (47579, 1, u'+  assert( pWal->readLock<0 );     /* Not currently locked */'), (47682, 1, u'+      assert( thisMark!=READMARK_NOT_USED );'), (47705, 1, u'+      assert( rc==SQLITE_BUSY || (pWal->readOnly & WAL_SHM_RDONLY)!=0 );'), (47740, 1, u'+      assert( mxReadMark<=pWal->hdr.mxFrame );'), (47805, 1, u'+  assert( pWal->readLock>=0 || pWal->lockError );'), (47868, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (47881, 1, u'+    assert( iRead==iRead2 );'), (47940, 1, u'+  assert( pWal->readLock>=0 );'), (48019, 1, u'+      assert( walFramePgno(pWal, iFrame)!=1 );'), (48024, 1, u'+  assert( rc==SQLITE_OK );'), (48035, 1, u'+  assert( pWal->writeLock );'), (48051, 1, u'+  assert( pWal->writeLock );'), (48052, 1, u'+  assert( aWalData[3]!=pWal->nCkpt || aWalData[0]<=pWal->hdr.mxFrame );'), (48092, 1, u'+    assert( pInfo->nBackfill==pWal->hdr.mxFrame );'), (48119, 1, u'+        assert( pInfo->aReadMark[0]==0 );'), (48132, 1, u'+    assert( (rc&0xff)!=SQLITE_BUSY ); /* BUSY not possible when useWal==1 */'), (48175, 1, u'+    assert( p->syncFlags & (SQLITE_SYNC_NORMAL|SQLITE_SYNC_FULL) );'), (48229, 1, u'+  assert( pList );'), (48230, 1, u'+  assert( pWal->writeLock );'), (48234, 1, u'+  assert( (isCommit!=0)==(nTruncate!=0) );'), (48293, 1, u'+  assert( (int)pWal->szPage==szPage );'), (48308, 1, u'+    assert( iOffset==walFrameOffset(iFrame, szPage) );'), (48420, 1, u'+  assert( pWal->ckptLock==0 );'), (48421, 1, u'+  assert( pWal->writeLock==0 );'), (48534, 1, u'+  assert( pWal->writeLock==0 );'), (48535, 1, u'+  assert( pWal->exclusiveMode!=WAL_HEAPMEMORY_MODE || op==-1 );'), (48543, 1, u'+  assert( pWal->readLock>=0 || pWal->lockError );'), (48544, 1, u'+  assert( pWal->readLock>=0 || (op<=0 && pWal->exclusiveMode==0) );'), (48558, 1, u'+    assert( pWal->exclusiveMode==0 );'), (48559, 1, u'+    assert( pWal->readLock>=0 );'), (48585, 1, u'+  assert( pWal==0 || pWal->readLock>=0 );'), (49226, 1, u'+  assert( p->pBt->inTransaction!=TRANS_NONE || p->pBt->nTransaction==0 ); \\'), (49227, 1, u'+  assert( p->pBt->inTransaction>=p->inTrans );'), (49285, 1, u'+  assert( p->locked==0 );'), (49286, 1, u'+  assert( sqlite3_mutex_notheld(p->pBt->mutex) );'), (49287, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (49300, 1, u'+  assert( p->locked==1 );'), (49301, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (49302, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (49303, 1, u'+  assert( p->db==pBt->db );'), (49332, 1, u'+  assert( p->pNext==0 || p->pNext->pBt>p->pBt );'), (49333, 1, u'+  assert( p->pPrev==0 || p->pPrev->pBt<p->pBt );'), (49334, 1, u'+  assert( p->pNext==0 || p->pNext->db==p->db );'), (49335, 1, u'+  assert( p->pPrev==0 || p->pPrev->db==p->db );'), (49336, 1, u'+  assert( p->sharable || (p->pNext==0 && p->pPrev==0) );'), (49339, 1, u'+  assert( !p->locked || p->wantToLock>0 );'), (49340, 1, u'+  assert( p->sharable || p->wantToLock==0 );'), (49343, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (49347, 1, u'+  assert( (p->locked==0 && p->sharable) || p->pBt->db==p->db );'), (49369, 1, u'+    assert( pLater->sharable );'), (49370, 1, u'+    assert( pLater->pNext==0 || pLater->pNext->pBt>pLater->pBt );'), (49371, 1, u'+    assert( !pLater->locked || pLater->wantToLock>0 );'), (49389, 1, u'+    assert( p->wantToLock>0 );'), (49405, 1, u'+  assert( p->sharable==0 || p->locked==0 || p->wantToLock>0 );'), (49406, 1, u'+  assert( p->sharable==0 || p->locked==0 || p->db==p->pBt->db );'), (49407, 1, u'+  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->pBt->mutex) );'), (49408, 1, u'+  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->db->mutex) );'), (49447, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (49456, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (49509, 1, u'+  assert( db!=0 );'), (49511, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (49515, 1, u'+  assert( p!=0 );'), (49791, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (49792, 1, u'+  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (49793, 1, u'+  assert( p->db!=0 );'), (49794, 1, u'+  assert( !(p->db->flags&SQLITE_ReadUncommitted)||eLock==WRITE_LOCK||iTab==1 );'), (49800, 1, u'+  assert( eLock==READ_LOCK || (p==pBt->pWriter && p->inTrans==TRANS_WRITE) );'), (49801, 1, u'+  assert( eLock==READ_LOCK || pBt->inTransaction==TRANS_WRITE );'), (49826, 1, u'+    assert( pIter->eLock==READ_LOCK || pIter->eLock==WRITE_LOCK );'), (49827, 1, u'+    assert( eLock==READ_LOCK || pIter->pBtree==p || pIter->eLock==READ_LOCK);'), (49831, 1, u'+        assert( p==pBt->pWriter );'), (49864, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (49865, 1, u'+  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (49866, 1, u'+  assert( p->db!=0 );'), (49872, 1, u'+  assert( 0==(p->db->flags&SQLITE_ReadUncommitted) || eLock==WRITE_LOCK );'), (49876, 1, u'+  assert( p->sharable );'), (49877, 1, u'+  assert( SQLITE_OK==querySharedCacheTableLock(p, iTable, eLock) );'), (49905, 1, u'+  assert( WRITE_LOCK>READ_LOCK );'), (49927, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (49928, 1, u'+  assert( p->sharable || 0==*ppIter );'), (49929, 1, u'+  assert( p->inTrans>0 );'), (49933, 1, u'+    assert( (pBt->btsFlags & BTS_EXCLUSIVE)==0 || pBt->pWriter==pLock->pBtree );'), (49934, 1, u'+    assert( pLock->pBtree->inTrans>=pLock->eLock );'), (49937, 1, u'+      assert( pLock->iTable!=1 || pLock==&p->lock );'), (49946, 1, u'+  assert( (pBt->btsFlags & BTS_PENDING)==0 || pBt->pWriter );'), (49974, 1, u'+      assert( pLock->eLock==READ_LOCK || pLock->pBtree==p );'), (50001, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (50012, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (50038, 1, u'+  assert( sqlite3BtreeHoldsMutex(pBtree) );'), (50091, 1, u'+    assert( pgno<=pBt->nPage );'), (50147, 1, u'+  assert( CURSOR_VALID==pCur->eState );'), (50148, 1, u'+  assert( 0==pCur->pKey );'), (50149, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (50152, 1, u'+  assert( rc==SQLITE_OK );  /* KeySize() cannot fail */'), (50173, 1, u'+  assert( !pCur->apPage[0]->intKey || !pCur->pKey );'), (50191, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (50192, 1, u'+  assert( pExcept==0 || pExcept->pBt==pBt );'), (50213, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (50237, 1, u'+    assert( nKey==(i64)(int)nKey );'), (50262, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (50263, 1, u'+  assert( pCur->eState>=CURSOR_REQUIRESEEK );'), (50272, 1, u'+    assert( pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_INVALID );'), (50319, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (50349, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (50351, 1, u'+  assert( 0==PTRMAP_ISPAGE(pBt, PENDING_BYTE_PAGE(pBt)) );'), (50353, 1, u'+  assert( pBt->autoVacuum );'), (50369, 1, u'+  assert( offset <= (int)pBt->usableSize-5 );'), (50399, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (50413, 1, u'+  assert( offset <= (int)pBt->usableSize-5 );'), (50414, 1, u'+  assert( pEType!=0 );'), (50447, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50478, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50481, 1, u'+  assert( pPage->leaf==0 || pPage->leaf==1 );'), (50483, 1, u'+  assert( n==4-4*pPage->leaf );'), (50601, 1, u'+  assert( nSize==debuginfo.nSize );'), (50622, 1, u'+  assert( pCell!=0 );'), (50624, 1, u'+  assert( (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload );'), (50654, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50655, 1, u'+  assert( pPage->pBt!=0 );'), (50656, 1, u'+  assert( pPage->pBt->usableSize <= SQLITE_MAX_PAGE_SIZE );'), (50657, 1, u'+  assert( pPage->nOverflow==0 );'), (50658, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50664, 1, u'+  assert( nCell==get2byte(&data[hdr+3]) );'), (50685, 1, u'+    assert( pc>=iCellFirst && pc<=iCellLast );'), (50697, 1, u'+    assert( cbrk+size<=usableSize && cbrk>=iCellFirst );'), (50703, 1, u'+  assert( cbrk>=iCellFirst );'), (50709, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50738, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50739, 1, u'+  assert( pPage->pBt );'), (50740, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50741, 1, u'+  assert( nByte>=0 );  /* Minimum cell size is 4 */'), (50742, 1, u'+  assert( pPage->nFree>=nByte );'), (50743, 1, u'+  assert( pPage->nOverflow==0 );'), (50745, 1, u'+  assert( nByte < usableSize-8 );'), (50748, 1, u'+  assert( pPage->cellOffset == hdr + 12 - 4*pPage->leaf );'), (50803, 1, u'+    assert( gap+nByte<=top );'), (50815, 1, u'+  assert( top+nByte <= (int)pPage->pBt->usableSize );'), (50833, 1, u'+  assert( pPage->pBt!=0 );'), (50834, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50835, 1, u'+  assert( start>=pPage->hdrOffset+6+pPage->childPtrSize );'), (50836, 1, u'+  assert( (start + size) <= (int)pPage->pBt->usableSize );'), (50837, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50838, 1, u'+  assert( size>=0 );   /* Minimum cell size is 4 */'), (50858, 1, u'+  assert( start<=iLast );'), (50868, 1, u'+  assert( pbegin>addr || pbegin==0 );'), (50878, 1, u'+    assert( pbegin>addr );'), (50879, 1, u'+    assert( pbegin <= (int)pPage->pBt->usableSize-4 );'), (50905, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50924, 1, u'+  assert( pPage->hdrOffset==(pPage->pgno==1 ? 100 : 0) );'), (50925, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50926, 1, u'+  pPage->leaf = (u8)(flagByte>>3);  assert( PTF_LEAF == 1<<3 );'), (50958, 1, u'+  assert( pPage->pBt!=0 );'), (50959, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50960, 1, u'+  assert( pPage->pgno==sqlite3PagerPagenumber(pPage->pDbPage) );'), (50961, 1, u'+  assert( pPage == sqlite3PagerGetExtra(pPage->pDbPage) );'), (50962, 1, u'+  assert( pPage->aData == sqlite3PagerGetData(pPage->pDbPage) );'), (50981, 1, u'+    assert( pBt->pageSize>=512 && pBt->pageSize<=65536 );'), (51074, 1, u'+  assert( sqlite3PagerPagenumber(pPage->pDbPage)==pPage->pgno );'), (51075, 1, u'+  assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (51076, 1, u'+  assert( sqlite3PagerGetData(pPage->pDbPage) == data );'), (51077, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (51078, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51094, 1, u'+  assert( pBt->pageSize>=512 && pBt->pageSize<=65536 );'), (51138, 1, u'+  assert( noContent==0 || bReadonly==0 );'), (51139, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51153, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51169, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (51170, 1, u'+  assert( ((p->pBt->nPage)&0x8000000)==0 );'), (51189, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51204, 1, u'+  assert( pgno!=0 || rc==SQLITE_CORRUPT );'), (51214, 1, u'+    assert( pPage->aData );'), (51215, 1, u'+    assert( pPage->pBt );'), (51216, 1, u'+    assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (51217, 1, u'+    assert( sqlite3PagerGetData(pPage->pDbPage)==pPage->aData );'), (51218, 1, u'+    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (51234, 1, u'+  assert( sqlite3PagerPageRefcount(pData)>0 );'), (51236, 1, u'+    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (51255, 1, u'+  assert( pBt->db );'), (51256, 1, u'+  assert( sqlite3_mutex_held(pBt->db->mutex) );'), (51310, 1, u'+  assert( db!=0 );'), (51311, 1, u'+  assert( pVfs!=0 );'), (51312, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (51313, 1, u'+  assert( (flags&0xff)==flags );   /* flags fit in 8 bits */'), (51316, 1, u'+  assert( (flags & BTREE_UNORDERED)==0 || (flags & BTREE_SINGLE)!=0 );'), (51319, 1, u'+  assert( (flags & BTREE_SINGLE)==0 || isTempDb );'), (51371, 1, u'+        assert( pBt->nRef>0 );'), (51411, 1, u'+    assert( sizeof(i64)==8 || sizeof(i64)==4 );'), (51412, 1, u'+    assert( sizeof(u64)==8 || sizeof(u64)==4 );'), (51413, 1, u'+    assert( sizeof(u32)==4 );'), (51414, 1, u'+    assert( sizeof(u16)==2 );'), (51415, 1, u'+    assert( sizeof(Pgno)==4 );'), (51470, 1, u'+    assert( (pBt->pageSize & 7)==0 );  /* 8-byte alignment of pageSize */'), (51546, 1, u'+    assert( sqlite3_mutex_held(mutexOpen) );'), (51564, 1, u'+  assert( sqlite3_mutex_notheld(pBt->mutex) );'), (51618, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (51640, 1, u'+  assert( p->wantToLock==0 && p->locked==0 );'), (51647, 1, u'+    assert( !pBt->pCursor );'), (51658, 1, u'+  assert( p->wantToLock==0 );'), (51659, 1, u'+  assert( p->locked==0 );'), (51685, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (51698, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (51721, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (51722, 1, u'+  assert( level>=1 && level<=3 );'), (51737, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (51739, 1, u'+  assert( pBt && pBt->pPager );'), (51768, 1, u'+  assert( nReserve>=-1 && nReserve<=255 );'), (51777, 1, u'+  assert( nReserve>=0 && nReserve<=255 );'), (51780, 1, u'+    assert( (pageSize & 7)==0 );'), (51781, 1, u'+    assert( !pBt->pPage1 && !pBt->pCursor );'), (51812, 1, u'+  assert( sqlite3_mutex_held(p->pBt->mutex) );'), (51926, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51927, 1, u'+  assert( pBt->pPage1==0 );'), (52001, 1, u'+    assert( (pageSize & 7)==0 );'), (52055, 1, u'+  assert( pBt->maxLeaf + 23 <= MX_CELL_SIZE(pBt) );'), (52098, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (52099, 1, u'+  assert( countValidCursors(pBt,0)==0 || pBt->inTransaction>TRANS_NONE );'), (52101, 1, u'+    assert( pBt->pPage1->aData );'), (52102, 1, u'+    assert( sqlite3PagerRefcount(pBt->pPager)==1 );'), (52103, 1, u'+    assert( pBt->pPage1->aData );'), (52119, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (52124, 1, u'+  assert( pP1!=0 );'), (52129, 1, u'+  assert( sizeof(zMagicHeader)==16 );'), (52134, 1, u'+  assert( pBt->usableSize<=pBt->pageSize && pBt->usableSize+255>=pBt->pageSize);'), (52143, 1, u'+  assert( pBt->autoVacuum==1 || pBt->autoVacuum==0 );'), (52144, 1, u'+  assert( pBt->incrVacuum==1 || pBt->incrVacuum==0 );'), (52217, 1, u'+  assert( IfNotOmitAV(pBt->bDoTruncate)==0 );'), (52290, 1, u'+        assert( p->lock.pBtree==p && p->lock.iTable==1 );'), (52304, 1, u'+      assert( !pBt->pWriter );'), (52355, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (52398, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (52399, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (52470, 1, u'+  assert( eType==PTRMAP_OVERFLOW2 || eType==PTRMAP_OVERFLOW1 ||'), (52472, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (52473, 1, u'+  assert( pDbPage->pBt==pBt );'), (52554, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (52555, 1, u'+  assert( iLastPg>nFin );'), (52587, 1, u'+        assert( iFreePg==iLastPg );'), (52621, 1, u'+      assert( iFreePg<iLastPg );'), (52677, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE && p->inTrans==TRANS_WRITE );'), (52719, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (52721, 1, u'+  assert(pBt->autoVacuum);'), (52759, 1, u'+  assert( nRef>=sqlite3PagerRefcount(pPager) );'), (52822, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (52893, 1, u'+    assert( pBt->inTransaction==TRANS_WRITE );'), (52894, 1, u'+    assert( pBt->nTransaction>0 );'), (52985, 1, u'+    assert( TRANS_WRITE==pBt->inTransaction );'), (53002, 1, u'+    assert( countValidCursors(pBt, 1)==0 );'), (53034, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (53035, 1, u'+  assert( (pBt->btsFlags & BTS_READ_ONLY)==0 );'), (53036, 1, u'+  assert( iStatement>0 );'), (53037, 1, u'+  assert( iStatement>p->db->nSavepoint );'), (53038, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (53065, 1, u'+    assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (53066, 1, u'+    assert( iSavepoint>=0 || (iSavepoint==-1 && op==SAVEPOINT_ROLLBACK) );'), (53079, 1, u'+      assert( pBt->nPage>0 );'), (53127, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (53128, 1, u'+  assert( wrFlag==0 || wrFlag==1 );'), (53134, 1, u'+  assert( hasSharedCacheTableLock(p, iTable, pKeyInfo!=0, wrFlag+1) );'), (53135, 1, u'+  assert( wrFlag==0 || !hasReadConflicts(p, iTable) );'), (53138, 1, u'+  assert( p->inTrans>TRANS_NONE );'), (53139, 1, u'+  assert( wrFlag==0 || p->inTrans==TRANS_WRITE );'), (53140, 1, u'+  assert( pBt->pPage1 && pBt->pPage1->aData );'), (53146, 1, u'+    assert( wrFlag==0 );'), (53222, 1, u'+  assert( pCur->cachedRowid==iRowid );'), (53281, 1, u'+  static void assertCellInfo(BtCursor *pCur){'), (53286, 1, u'+    assert( memcmp(&info, &pCur->info, sizeof(info))==0 );'), (53289, 1, u'+  #define assertCellInfo(x)'), (53299, 1, u'+      assertCellInfo(pCur);'), (53310, 1, u'+    assertCellInfo(pCur);                                                      \\'), (53338, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53339, 1, u'+  assert( pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID );'), (53362, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53363, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (53398, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (53399, 1, u'+  assert(pPgnoNext);'), (53427, 1, u'+  assert( next==0 || rc==SQLITE_DONE );'), (53430, 1, u'+    assert( rc==SQLITE_OK || pPage==0 );'), (53519, 1, u'+  assert( pPage );'), (53520, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (53521, 1, u'+  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (53522, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53589, 1, u'+        assert(!pCur->aOverflow[iIdx] || pCur->aOverflow[iIdx]==nextPage);'), (53686, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53687, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (53688, 1, u'+  assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (53689, 1, u'+  assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (53711, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53714, 1, u'+    assert( pCur->eState==CURSOR_VALID );'), (53715, 1, u'+    assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (53716, 1, u'+    assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (53751, 1, u'+  assert( pCur!=0 && pCur->iPage>=0 && pCur->apPage[pCur->iPage]);'), (53752, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (53753, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53755, 1, u'+  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (53772, 1, u'+    assert( nLocal<=nKey );'), (53795, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (53796, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53804, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (53805, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53828, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53829, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (53830, 1, u'+  assert( pCur->iPage<BTCURSOR_MAX_DEPTH );'), (53831, 1, u'+  assert( pCur->iPage>=0 );'), (53857, 1, u'+static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){'), (53858, 1, u'+  assert( iIdx<=pParent->nCell );'), (53860, 1, u'+    assert( get4byte(&pParent->aData[pParent->hdrOffset+8])==iChild );'), (53862, 1, u'+    assert( get4byte(findCell(pParent, iIdx))==iChild );'), (53866, 1, u'+#  define assertParentIndex(x,y,z)'), (53878, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53879, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (53880, 1, u'+  assert( pCur->iPage>0 );'), (53881, 1, u'+  assert( pCur->apPage[pCur->iPage] );'), (53889, 1, u'+  assertParentIndex('), (53930, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53931, 1, u'+  assert( CURSOR_INVALID < CURSOR_REQUIRESEEK );'), (53932, 1, u'+  assert( CURSOR_VALID   < CURSOR_REQUIRESEEK );'), (53933, 1, u'+  assert( CURSOR_FAULT   > CURSOR_REQUIRESEEK );'), (53936, 1, u'+      assert( pCur->skipNext!=SQLITE_OK );'), (53963, 1, u'+    assert( pCur->apPage[0]->intKey==1 || pCur->apPage[0]->intKey==0 );'), (53976, 1, u'+  assert( pRoot->pgno==pCur->pgnoRoot );'), (53977, 1, u'+  assert( pRoot->isInit && (pCur->pKeyInfo==0)==pRoot->intKey );'), (54008, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54009, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (54011, 1, u'+    assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (54033, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54034, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (54055, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54056, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (54060, 1, u'+      assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 );'), (54063, 1, u'+      assert( pCur->apPage[pCur->iPage]->nCell>0 );'), (54078, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54079, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (54088, 1, u'+      assert( pCur->aiIdx[ii]==pCur->apPage[ii]->nCell );'), (54090, 1, u'+    assert( pCur->aiIdx[pCur->iPage]==pCur->apPage[pCur->iPage]->nCell-1 );'), (54091, 1, u'+    assert( pCur->apPage[pCur->iPage]->leaf );'), (54099, 1, u'+      assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 );'), (54102, 1, u'+      assert( pCur->eState==CURSOR_VALID );'), (54148, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54149, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (54150, 1, u'+  assert( pRes );'), (54151, 1, u'+  assert( (pIdxKey==0)==(pCur->pKeyInfo==0) );'), (54172, 1, u'+  assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage] );'), (54173, 1, u'+  assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->isInit );'), (54174, 1, u'+  assert( pCur->eState==CURSOR_INVALID || pCur->apPage[pCur->iPage]->nCell>0 );'), (54177, 1, u'+    assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 );'), (54180, 1, u'+  assert( pCur->apPage[0]->intKey || pIdxKey );'), (54193, 1, u'+    assert( pPage->nCell>0 );'), (54194, 1, u'+    assert( pPage->intKey==(pIdxKey==0) );'), (54205, 1, u'+      assert( idx==pCur->aiIdx[pCur->iPage] );'), (54220, 1, u'+          assert( nCellKey>intKey );'), (54294, 1, u'+    assert( lwr==upr+1 || (pPage->intKey && !pPage->leaf) );'), (54295, 1, u'+    assert( pPage->isInit );'), (54304, 1, u'+      assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (54346, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54351, 1, u'+  assert( pRes!=0 );'), (54365, 1, u'+  assert( pPage->isInit );'), (54420, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54438, 1, u'+  assert( pPage->isInit );'), (54508, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (54509, 1, u'+  assert( eMode==BTALLOC_ANY || (nearby>0 && IfNotOmitAV(pBt->autoVacuum)) );'), (54530, 1, u'+        assert( nearby>0 );'), (54531, 1, u'+        assert( pBt->autoVacuum );'), (54572, 1, u'+      assert( pTrunk!=0 );'), (54573, 1, u'+      assert( pTrunk->aData!=0 );'), (54580, 1, u'+        assert( pPrevTrunk==0 );'), (54644, 1, u'+            assert( sqlite3PagerIswriteable(pPage1->pDbPage) );'), (54757, 1, u'+      assert( pBt->nPage!=PENDING_BYTE_PAGE(pBt) );'), (54771, 1, u'+    assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (54781, 1, u'+  assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (54795, 1, u'+  assert( rc!=SQLITE_OK || sqlite3PagerIswriteable((*ppPage)->pDbPage) );'), (54819, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (54820, 1, u'+  assert( iPage>1 );'), (54821, 1, u'+  assert( !pMemPage || pMemPage->pgno==iPage );'), (54873, 1, u'+    assert( pBt->usableSize>32 );'), (54950, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (54959, 1, u'+  assert( pBt->usableSize > 4 );'), (54962, 1, u'+  assert( ovflPgno==0 || nOvfl>0 );'), (55037, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55041, 1, u'+  assert( pCell<pPage->aData || pCell>=&pPage->aData[pBt->pageSize]'), (55056, 1, u'+  assert( info.nHeader==nHeader );'), (55057, 1, u'+  assert( info.nKey==nKey );'), (55058, 1, u'+  assert( info.nData==(u32)(nData+nZero) );'), (55118, 1, u'+      assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (55122, 1, u'+      assert( pPrior<pPage->aData || pPrior>=&pPage->aData[pBt->pageSize]'), (55138, 1, u'+    assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (55142, 1, u'+    assert( pPayload<pPage->aData || pPayload>=&pPage->aData[pBt->pageSize]'), (55147, 1, u'+      assert( pSrc );'), (55184, 1, u'+  assert( idx>=0 && idx<pPage->nCell );'), (55185, 1, u'+  assert( sz==cellSize(pPage, idx) );'), (55186, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (55187, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55204, 1, u'+  assert( (SQLITE_PTR_TO_INT(ptr)&1)==0 );  /* ptr is always 2-byte aligned */'), (55253, 1, u'+  assert( i>=0 && i<=pPage->nCell+pPage->nOverflow );'), (55254, 1, u'+  assert( pPage->nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=10921 );'), (55255, 1, u'+  assert( pPage->nOverflow<=ArraySize(pPage->apOvfl) );'), (55256, 1, u'+  assert( ArraySize(pPage->apOvfl)==ArraySize(pPage->aiOvfl) );'), (55257, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55263, 1, u'+  assert( sz==cellSizePtr(pPage, pCell) || (sz==8 && iChild>0) );'), (55273, 1, u'+    assert( j<(int)(sizeof(pPage->apOvfl)/sizeof(pPage->apOvfl[0])) );'), (55282, 1, u'+    assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (55291, 1, u'+    assert( idx >= end+2 );'), (55292, 1, u'+    assert( idx+sz <= (int)pPage->pBt->usableSize );'), (55301, 1, u'+    assert( (SQLITE_PTR_TO_INT(ptr)&1)==0 );  /* ptr is always 2-byte aligned */'), (55336, 1, u'+  assert( pPage->nOverflow==0 );'), (55337, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55338, 1, u'+  assert( nCell>=0 && nCell<=(int)MX_CELL(pPage->pBt)'), (55340, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (55343, 1, u'+  assert( pPage->nCell==0 );'), (55344, 1, u'+  assert( get2byteNotZero(&data[hdr+5])==nUsable );'), (55407, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55408, 1, u'+  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (55409, 1, u'+  assert( pPage->nOverflow==1 );'), (55427, 1, u'+    assert( sqlite3PagerIswriteable(pNew->pDbPage) );'), (55428, 1, u'+    assert( pPage->aData[0]==(PTF_INTKEY|PTF_LEAFDATA|PTF_LEAF) );'), (55495, 1, u'+    assert( pPage->isInit );'), (55506, 1, u'+        assert( n==pPage->pgno && e==PTRMAP_OVERFLOW1 );'), (55511, 1, u'+        assert( n==pPage->pgno && e==PTRMAP_BTREE );'), (55517, 1, u'+      assert( n==pPage->pgno && e==PTRMAP_BTREE );'), (55552, 1, u'+    assert( pFrom->isInit );'), (55553, 1, u'+    assert( pFrom->nFree>=iToHdr );'), (55554, 1, u'+    assert( get2byte(&aFrom[iFromHdr+5]) <= (int)pBt->usableSize );'), (55661, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (55662, 1, u'+  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (55673, 1, u'+  assert( pParent->nOverflow==0 || pParent->nOverflow==1 );'), (55674, 1, u'+  assert( pParent->nOverflow==0 || pParent->aiOvfl[0]==iParentIdx );'), (55695, 1, u'+    assert( bBulk==0 || bBulk==1 );'), (55701, 1, u'+      assert( bBulk==0 );'), (55781, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(aSpace1) );'), (55816, 1, u'+        assert( nCell<nMaxCells );'), (55826, 1, u'+        assert( nCell<nMaxCells );'), (55835, 1, u'+      assert( nCell<nMaxCells );'), (55839, 1, u'+      assert( sz<=pBt->maxLocal+23 );'), (55840, 1, u'+      assert( iSpace1 <= (int)pBt->pageSize );'), (55843, 1, u'+      assert( leafCorrection==0 || leafCorrection==4 );'), (55846, 1, u'+        assert( leafCorrection==0 );'), (55847, 1, u'+        assert( pOld->hdrOffset==0 );'), (55852, 1, u'+        assert( leafCorrection==4 );'), (55880, 1, u'+    assert( i<nMaxCells );'), (55913, 1, u'+    assert( d<nMaxCells );'), (55914, 1, u'+    assert( r<nMaxCells );'), (55937, 1, u'+  assert( cntNew[0]>0 || (pParent->pgno==1 && pParent->nCell==0) );'), (55963, 1, u'+      assert( i>0 );'), (56026, 1, u'+  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (56037, 1, u'+    assert( j<nMaxCells );'), (56040, 1, u'+    assert( pNew->nCell>0 || (nNew==1 && cntNew[0]==0) );'), (56041, 1, u'+    assert( pNew->nOverflow==0 );'), (56048, 1, u'+    assert( i<nNew-1 || j==nCell );'), (56054, 1, u'+      assert( j<nMaxCells );'), (56086, 1, u'+          assert(leafCorrection==4);'), (56091, 1, u'+      assert( sz<=pBt->maxLocal+23 );'), (56092, 1, u'+      assert( iOvflSpace <= (int)pBt->pageSize );'), (56095, 1, u'+      assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (56101, 1, u'+  assert( j==nCell );'), (56102, 1, u'+  assert( nOld>0 );'), (56103, 1, u'+  assert( nNew>0 );'), (56124, 1, u'+    assert( nNew==1 );'), (56125, 1, u'+    assert( apNew[0]->nFree =='), (56175, 1, u'+        assert( j+1 < ArraySize(apCopy) );'), (56176, 1, u'+        assert( j+1 < nOld );'), (56186, 1, u'+      assert(nOverflow>0 || iOverflow<i );'), (56187, 1, u'+      assert(nOverflow<2 || pOld->aiOvfl[0]==pOld->aiOvfl[1]-1);'), (56188, 1, u'+      assert(nOverflow<3 || pOld->aiOvfl[1]==pOld->aiOvfl[2]-1);'), (56203, 1, u'+      assert( j<nOld );'), (56204, 1, u'+      assert( k<nNew );'), (56237, 1, u'+  assert( pParent->isInit );'), (56285, 1, u'+  assert( pRoot->nOverflow>0 );'), (56286, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (56305, 1, u'+  assert( sqlite3PagerIswriteable(pChild->pDbPage) );'), (56306, 1, u'+  assert( sqlite3PagerIswriteable(pRoot->pDbPage) );'), (56307, 1, u'+  assert( pChild->nCell==pRoot->nCell );'), (56356, 1, u'+        assert( (balance_deeper_called++)==0 );'), (56362, 1, u'+          assert( pCur->apPage[1]->nOverflow );'), (56395, 1, u'+          assert( (balance_quick_called++)==0 );'), (56490, 1, u'+    assert( pCur->skipNext!=SQLITE_OK );'), (56494, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (56495, 1, u'+  assert( pCur->wrFlag && pBt->inTransaction==TRANS_WRITE'), (56497, 1, u'+  assert( hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) );'), (56504, 1, u'+  assert( (pKey==0)==(pCur->pKeyInfo==0) );'), (56531, 1, u'+  assert( pCur->eState==CURSOR_VALID || (pCur->eState==CURSOR_INVALID && loc) );'), (56534, 1, u'+  assert( pPage->intKey || nKey>=0 );'), (56535, 1, u'+  assert( pPage->leaf || !pPage->intKey );'), (56540, 1, u'+  assert( pPage->isInit );'), (56546, 1, u'+  assert( szNew==cellSizePtr(pPage, newCell) );'), (56547, 1, u'+  assert( szNew <= MX_CELL_SIZE(pBt) );'), (56551, 1, u'+    assert( idx<pPage->nCell );'), (56565, 1, u'+    assert( pPage->leaf );'), (56568, 1, u'+    assert( pPage->leaf );'), (56571, 1, u'+  assert( rc!=SQLITE_OK || pPage->nCell>0 || pPage->nOverflow>0 );'), (56605, 1, u'+  assert( pCur->apPage[pCur->iPage]->nOverflow==0 );'), (56624, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (56625, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (56626, 1, u'+  assert( (pBt->btsFlags & BTS_READ_ONLY)==0 );'), (56627, 1, u'+  assert( pCur->wrFlag );'), (56628, 1, u'+  assert( hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) );'), (56629, 1, u'+  assert( !hasReadConflicts(p, pCur->pgnoRoot) );'), (56688, 1, u'+    assert( MX_CELL_SIZE(pBt) >= nCell );'), (56746, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (56747, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (56748, 1, u'+  assert( (pBt->btsFlags & BTS_READ_ONLY)==0 );'), (56781, 1, u'+    assert( pgnoRoot>=3 );'), (56824, 1, u'+      assert( eType!=PTRMAP_ROOTPAGE );'), (56825, 1, u'+      assert( eType!=PTRMAP_FREEPAGE );'), (56857, 1, u'+    assert( sqlite3PagerIswriteable(pBt->pPage1->pDbPage) );'), (56869, 1, u'+  assert( sqlite3PagerIswriteable(pRoot->pDbPage) );'), (56877, 1, u'+  assert( (pBt->openFlags & BTREE_SINGLE)==0 || pgnoRoot==2 );'), (56904, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (56924, 1, u'+    assert( pPage->intKey );'), (56955, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (56995, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (56996, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (57075, 1, u'+      assert( maxRootPgno!=PENDING_BYTE_PAGE(pBt) );'), (57119, 1, u'+  assert( p->inTrans>TRANS_NONE );'), (57120, 1, u'+  assert( SQLITE_OK==querySharedCacheTableLock(p, MASTER_ROOT, READ_LOCK) );'), (57121, 1, u'+  assert( pBt->pPage1 );'), (57122, 1, u'+  assert( idx>=0 && idx<=15 );'), (57145, 1, u'+  assert( idx>=1 && idx<=15 );'), (57147, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (57148, 1, u'+  assert( pBt->pPage1!=0 );'), (57155, 1, u'+      assert( pBt->autoVacuum || iMeta==0 );'), (57156, 1, u'+      assert( iMeta==0 || iMeta==1 );'), (57284, 1, u'+  assert( iPg<=pCheck->nPage && sizeof(pCheck->aPgRef[0])==1 );'), (57292, 1, u'+  assert( iPg<=pCheck->nPage && sizeof(pCheck->aPgRef[0])==1 );'), (57478, 1, u'+    assert( rc==SQLITE_CORRUPT );  /* The only possible error from InitPage */'), (57511, 1, u'+    assert( sz==info.nPayload );'), (57599, 1, u'+    assert( contentOffset<=usableSize );  /* Enforced by btreeInitPage() */'), (57621, 1, u'+      assert( i<=usableSize-4 );     /* Enforced by btreeInitPage() */'), (57623, 1, u'+      assert( i+size<=usableSize );  /* Enforced by btreeInitPage() */'), (57626, 1, u'+      assert( j==0 || j>i+size );  /* Enforced by btreeInitPage() */'), (57627, 1, u'+      assert( j<=usableSize-4 );   /* Enforced by btreeInitPage() */'), (57679, 1, u'+  assert( p->inTrans>TRANS_NONE && pBt->inTransaction>TRANS_NONE );'), (57777, 1, u'+  assert( p->pBt->pPager!=0 );'), (57790, 1, u'+  assert( p->pBt->pPager!=0 );'), (57798, 1, u'+  assert( p==0 || sqlite3_mutex_held(p->db->mutex) );'), (57831, 1, u'+  assert( p );'), (57832, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (57837, 1, u'+  assert( p );'), (57838, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (57880, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (57883, 1, u'+  assert( rc==SQLITE_OK || rc==SQLITE_LOCKED_SHAREDCACHE );'), (57897, 1, u'+  assert( p->inTrans!=TRANS_NONE );'), (57900, 1, u'+    assert( READ_LOCK+1==WRITE_LOCK );'), (57901, 1, u'+    assert( isWriteLock==0 || isWriteLock==1 );'), (57927, 1, u'+  assert( cursorHoldsMutex(pCsr) );'), (57928, 1, u'+  assert( sqlite3_mutex_held(pCsr->pBtree->db->mutex) );'), (57929, 1, u'+  assert( pCsr->isIncrblobHandle );'), (57935, 1, u'+  assert( pCsr->eState!=CURSOR_REQUIRESEEK );'), (57949, 1, u'+  assert( rc==SQLITE_OK );'), (57961, 1, u'+  assert( (pCsr->pBt->btsFlags & BTS_READ_ONLY)==0'), (57963, 1, u'+  assert( hasSharedCacheTableLock(pCsr->pBtree, pCsr->pgnoRoot, 0, 2) );'), (57964, 1, u'+  assert( !hasReadConflicts(pCsr->pBtree, pCsr->pgnoRoot) );'), (57965, 1, u'+  assert( pCsr->apPage[pCsr->iPage]->intKey );'), (57981, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (57982, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (57997, 1, u'+  assert( iVersion==1 || iVersion==2 );'), (58029, 1, u'+  assert( mask==BTREE_BULKLOAD || mask==0 );'), (58268, 1, u'+  assert( sqlite3BtreeGetReserveNoMutex(p->pSrc)>=0 );'), (58269, 1, u'+  assert( p->bDestLocked );'), (58270, 1, u'+  assert( !isFatalError(p->rc) );'), (58271, 1, u'+  assert( iSrcPg!=PENDING_BYTE_PAGE(p->pSrc->pBt) );'), (58272, 1, u'+  assert( zSrcData );'), (58358, 1, u'+  assert( sqlite3BtreeHoldsMutex(p->pSrc) );'), (58427, 1, u'+    assert( nSrcPage>=0 );'), (58486, 1, u'+        assert( pgszSrc==sqlite3BtreeGetPageSize(p->pSrc) );'), (58487, 1, u'+        assert( pgszDest==sqlite3BtreeGetPageSize(p->pDest) );'), (58497, 1, u'+        assert( nDestTruncate>0 );'), (58516, 1, u'+          assert( pFile );'), (58517, 1, u'+          assert( nDestTruncate==0'), (58591, 1, u'+      assert( rc2==SQLITE_OK );'), (58689, 1, u'+    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (58696, 1, u'+      assert( p->pDestDb );'), (58700, 1, u'+      assert( rc!=SQLITE_BUSY && rc!=SQLITE_LOCKED );'), (58722, 1, u'+    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (58743, 1, u'+  assert( sqlite3BtreeIsInTrans(pTo) );'), (58771, 1, u'+  assert( b.rc!=SQLITE_OK );'), (58779, 1, u'+  assert( sqlite3BtreeIsInTrans(pTo)==0 );'), (58824, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (58825, 1, u'+  assert( desiredEnc==SQLITE_UTF8 || desiredEnc==SQLITE_UTF16LE'), (58830, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58839, 1, u'+  assert(rc==SQLITE_OK    || rc==SQLITE_NOMEM);'), (58840, 1, u'+  assert(rc==SQLITE_OK    || pMem->enc!=desiredEnc);'), (58841, 1, u'+  assert(rc==SQLITE_NOMEM || pMem->enc==desiredEnc);'), (58860, 1, u'+  assert( 1 >='), (58866, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (58870, 1, u'+  assert( preserve==0 || pMem->flags&(MEM_Blob|MEM_Str) );'), (58887, 1, u'+    assert( pMem->xDel!=SQLITE_DYNAMIC );'), (58911, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58912, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (58938, 1, u'+    assert( pMem->flags&MEM_Blob );'), (58939, 1, u'+    assert( (pMem->flags&MEM_RowSet)==0 );'), (58940, 1, u'+    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58964, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58995, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58996, 1, u'+  assert( !(fg&MEM_Zero) );'), (58997, 1, u'+  assert( !(fg&(MEM_Str|MEM_Blob)) );'), (58998, 1, u'+  assert( fg&(MEM_Int|MEM_Real) );'), (58999, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (59000, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59016, 1, u'+    assert( fg & MEM_Real );'), (59038, 1, u'+    assert( (pMem->flags & MEM_Null)!=0 || pFunc==pMem->u.pDef );'), (59039, 1, u'+    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59046, 1, u'+    assert( 0==(pMem->flags&MEM_Dyn) && !pMem->xDel );'), (59060, 1, u'+  assert( p->db==0 || sqlite3_mutex_held(p->db->mutex) );'), (59063, 1, u'+    assert( (p->flags & MEM_Agg)==0 );'), (59066, 1, u'+    assert( (p->flags&MEM_RowSet)==0 );'), (59067, 1, u'+    assert( p->xDel!=SQLITE_DYNAMIC );'), (59144, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59145, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59153, 1, u'+    assert( pMem->z || pMem->n==0 );'), (59169, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59170, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59191, 1, u'+  assert( pMem->flags & MEM_Real );'), (59192, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (59193, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59194, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59226, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59227, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (59228, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59240, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59241, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59258, 1, u'+    assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );'), (59259, 1, u'+    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59268, 1, u'+  assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))!=0 );'), (59345, 1, u'+  assert( db!=0 );'), (59346, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (59352, 1, u'+    assert( pMem->zMalloc );'), (59355, 1, u'+    assert( pMem->u.pRowSet!=0 );'), (59365, 1, u'+  assert( p->db!=0 );'), (59410, 1, u'+  assert( (pFrom->flags & MEM_RowSet)==0 );'), (59416, 1, u'+    assert( srcType==MEM_Ephem || srcType==MEM_Static );'), (59428, 1, u'+  assert( (pFrom->flags & MEM_RowSet)==0 );'), (59450, 1, u'+  assert( pFrom->db==0 || sqlite3_mutex_held(pFrom->db->mutex) );'), (59451, 1, u'+  assert( pTo->db==0 || sqlite3_mutex_held(pTo->db->mutex) );'), (59452, 1, u'+  assert( pFrom->db==0 || pTo->db==0 || pFrom->db==pTo->db );'), (59487, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59488, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (59503, 1, u'+    assert( enc!=0 );'), (59574, 1, u'+  assert( (combined_flags & MEM_RowSet)==0 );'), (59610, 1, u'+      assert( f1&MEM_Int );'), (59611, 1, u'+      assert( f2&MEM_Int );'), (59629, 1, u'+    assert( pMem1->enc==pMem2->enc );'), (59630, 1, u'+    assert( pMem1->enc==SQLITE_UTF8 ||'), (59637, 1, u'+    assert( !pColl || pColl->xCmp );'), (59699, 1, u'+  assert( sqlite3BtreeCursorIsValid(pCur) );'), (59703, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (59709, 1, u'+  assert( zData!=0 );'), (59748, 1, u'+  assert( pVal->db==0 || sqlite3_mutex_held(pVal->db->mutex) );'), (59749, 1, u'+  assert( (enc&3)==(enc&~SQLITE_UTF16_ALIGNED) );'), (59750, 1, u'+  assert( (pVal->flags & MEM_RowSet)==0 );'), (59755, 1, u'+  assert( (MEM_Blob>>3) == MEM_Str );'), (59761, 1, u'+      assert( (pVal->flags & (MEM_Ephem|MEM_Static))!=0 );'), (59768, 1, u'+    assert( (pVal->flags&MEM_Blob)==0 );'), (59770, 1, u'+    assert( 0==(1&SQLITE_PTR_TO_INT(pVal->z)) );'), (59772, 1, u'+  assert(pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) || pVal->db==0'), (59885, 1, u"+    assert( pExpr->u.zToken[0]=='x' || pExpr->u.zToken[0]=='X' );"), (59886, 1, u"+    assert( pExpr->u.zToken[1]=='\\'' );"), (59891, 1, u"+    assert( zVal[nVal]=='\\'' );"), (59990, 1, u'+  assert( isPrepareV2==1 || isPrepareV2==0 );'), (59995, 1, u'+  assert( p->zSql==0 );'), (60079, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (60080, 1, u'+  assert( op>0 && op<0xff );'), (60182, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (60200, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (60201, 1, u'+  assert( j>=0 && j<p->nLabel );'), (60255, 1, u'+    assert( p->iAddr<nOp );'), (60304, 1, u'+SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){'), (60367, 1, u'+      assert( p->nOp - i >= 3 );'), (60368, 1, u'+      assert( pOp[-1].opcode==OP_Integer );'), (60381, 1, u'+      assert( -1-pOp->p2<p->nLabel );'), (60395, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (60412, 1, u'+  assert( aOp && !p->db->mallocFailed );'), (60415, 1, u'+  assert( p->btreeMask==0 );'), (60429, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (60470, 1, u'+  assert( p!=0 );'), (60481, 1, u'+  assert( p!=0 );'), (60491, 1, u'+  assert( p!=0 );'), (60502, 1, u'+  assert( p!=0 );'), (60504, 1, u'+    assert( p->nOp>0 );'), (60514, 1, u'+  assert( addr>=0 || p->db->mallocFailed );'), (60536, 1, u'+    assert( db );'), (60649, 1, u'+  assert( p!=0 );'), (60651, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (60658, 1, u'+  assert( p->nOp>0 );'), (60659, 1, u'+  assert( addr<p->nOp );'), (60664, 1, u'+  assert( pOp->p4type==P4_NOTUSED || pOp->p4type==P4_INT32 );'), (60687, 1, u'+      assert( aSortOrder!=0 );'), (60702, 1, u'+    assert( ((VTable *)zP4)->db==p->db );'), (60721, 1, u'+  assert( p->nOp>0 || p->aOp==0 );'), (60722, 1, u'+  assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );'), (60724, 1, u'+    assert( p->aOp );'), (60773, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (60780, 1, u'+  assert( (addr>=0 && addr<p->nOp) || p->db->mallocFailed );'), (60796, 1, u'+  assert( nTemp>=20 );'), (60802, 1, u'+      assert( pKeyInfo->aSortOrder!=0 );'), (60822, 1, u'+      assert( i<nTemp );'), (60858, 1, u'+        assert( pMem->flags & MEM_Blob );'), (60890, 1, u'+  assert( zP4!=0 );'), (60904, 1, u'+  assert( i>=0 && i<p->db->nDb && i<(int)sizeof(yDbMask)*8 );'), (60905, 1, u'+  assert( i<(int)sizeof(p->btreeMask)*8 );'), (61011, 1, u'+      assert( (&p[1])==pEnd || p[0].db==p[1].db );'), (61081, 1, u'+  assert( p->explain );'), (61082, 1, u'+  assert( p->magic==VDBE_MAGIC_RUN );'), (61083, 1, u'+  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY || p->rc==SQLITE_NOMEM );'), (61112, 1, u'+    assert( p->nMem>9 );'), (61160, 1, u'+      assert( pMem->z!=0 );'), (61202, 1, u'+      assert( p->db->mallocFailed );'), (61210, 1, u'+      assert( pMem->z!=0 );'), (61219, 1, u'+        assert( p->db->mallocFailed );'), (61328, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(*ppFrom) );'), (61348, 1, u'+  assert( p!=0 );'), (61349, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (61353, 1, u'+  assert( p->nOp>0 );'), (61360, 1, u'+    assert( p->aMem[i].db==p->db );'), (61413, 1, u'+  assert( p!=0 );'), (61414, 1, u'+  assert( p->nOp>0 );'), (61415, 1, u'+  assert( pParse!=0 );'), (61416, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (61418, 1, u'+  assert( db->mallocFailed==0 );'), (61450, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(zCsr) );'), (61603, 1, u'+  if( p->apCsr ) for(i=0; i<p->nCursor; i++) assert( p->apCsr[i]==0 );'), (61605, 1, u'+    for(i=1; i<=p->nMem; i++) assert( p->aMem[i].flags==MEM_Invalid );'), (61657, 1, u'+  assert( idx<p->nResColumn );'), (61658, 1, u'+  assert( var<COLNAME_N );'), (61660, 1, u'+    assert( !zName || xDel!=SQLITE_DYNAMIC );'), (61663, 1, u'+  assert( p->aColName!=0 );'), (61666, 1, u'+  assert( rc!=0 || !zName || (pColName->flags&MEM_Term)!=0 );'), (61797, 1, u"+      assert( zMaster[sqlite3Strlen30(zMaster)-3]=='9' );"), (61826, 1, u'+        assert( zFile[0]!=0 );'), (61871, 1, u'+    assert( rc!=SQLITE_BUSY );'), (61935, 1, u'+  assert( cnt==db->activeVdbeCnt );'), (61936, 1, u'+  assert( nWrite==db->writeVdbeCnt );'), (61965, 1, u'+    assert( eOp==SAVEPOINT_ROLLBACK || eOp==SAVEPOINT_RELEASE);'), (61966, 1, u'+    assert( db->nStatement>0 );'), (61967, 1, u'+    assert( p->iStatement==(db->nStatement+db->nSavepoint) );'), (62083, 1, u'+    assert( p->rc!=SQLITE_IOERR_BLOCKED );  /* This error no longer exists */'), (62211, 1, u'+    assert( db->activeVdbeCnt>=db->writeVdbeCnt );'), (62227, 1, u'+  assert( db->activeVdbeCnt>0 || db->autoCommit==0 || db->nStatement==0 );'), (62272, 1, u'+    assert( v->db->init.busy==0 );'), (62368, 1, u'+    assert( (rc & p->db->errMask)==rc );'), (62404, 1, u'+  assert( p->db==0 || p->db==db );'), (62432, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (62437, 1, u'+    assert( db->pVdbe==p );'), (62467, 1, u'+    assert( p->isTable );'), (62566, 1, u'+  assert( pMem->db->mallocFailed || flags&(MEM_Str|MEM_Blob) );'), (62571, 1, u'+  assert( n>=0 );'), (62667, 1, u'+      assert( sizeof(v)==sizeof(pMem->r) );'), (62674, 1, u'+    assert( len<=(u32)nBuf );'), (62684, 1, u'+    assert( pMem->n + ((pMem->flags & MEM_Zero)?pMem->u.nZero:0)'), (62686, 1, u'+    assert( pMem->n<=nBuf );'), (62691, 1, u'+      assert( nBuf>=0 );'), (62762, 1, u'+      assert( sizeof(r1)==sizeof(t2) && memcmp(&r1, &t2, sizeof(r1))==0 );'), (62772, 1, u'+        assert( sizeof(x)==8 && sizeof(pMem->r)==8 );'), (62841, 1, u'+  assert( pKeyInfo->aSortOrder!=0 );'), (62866, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (62882, 1, u'+  assert( u<=pKeyInfo->nField + 1 );'), (62935, 1, u'+  assert( pKeyInfo->aSortOrder!=0 );'), (62952, 1, u'+      assert( mem1.zMalloc==0 );  /* See comment below */'), (62965, 1, u'+        assert( idx1==szHdr1 && rc );'), (62966, 1, u'+        assert( mem1.flags & MEM_Int );'), (62980, 1, u'+  assert( mem1.zMalloc==0 );'), (62990, 1, u'+  assert( rc==0 );'), (63025, 1, u'+  assert( sqlite3BtreeCursorIsValid(pCur) );'), (63027, 1, u'+  assert( rc==SQLITE_OK );     /* pCur is always valid so KeySize cannot fail */'), (63028, 1, u'+  assert( (nCellKey & SQLITE_MAX_U32)==(u64)nCellKey );'), (63100, 1, u'+  assert( sqlite3BtreeCursorIsValid(pCur) );'), (63102, 1, u'+  assert( rc==SQLITE_OK );    /* pCur is always valid so KeySize cannot fail */'), (63114, 1, u'+  assert( pUnpacked->flags & UNPACKED_PREFIX_MATCH );'), (63125, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (63171, 1, u'+  assert( iVar>0 );'), (63193, 1, u'+  assert( iVar>0 );'), (63300, 1, u'+    assert( (rc & (v->db->errMask))==rc );'), (63403, 1, u'+  assert( n>=0 );'), (63404, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63408, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63412, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63418, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63424, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63428, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63432, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63441, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63451, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63460, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63469, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63474, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63478, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63491, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63499, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63539, 1, u'+  assert(p);'), (63589, 1, u'+    assert( db->writeVdbeCnt>0 || db->autoCommit==0 || db->nDeferredCons==0 );'), (63623, 1, u'+    assert( p->rc==SQLITE_OK );'), (63642, 1, u'+  assert( rc==SQLITE_ROW  || rc==SQLITE_DONE   || rc==SQLITE_ERROR'), (63645, 1, u'+  assert( p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE );'), (63679, 1, u'+    assert( v->expired==0 );'), (63710, 1, u'+  assert( p && p->pFunc );'), (63725, 1, u'+  assert( p && p->pFunc );'), (63758, 1, u'+  assert( p && p->pFunc && p->pFunc->xStep );'), (63759, 1, u'+  assert( sqlite3_mutex_held(p->s.db->mutex) );'), (63786, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63809, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63849, 1, u'+  assert( p && p->pMem && p->pFunc && p->pFunc->xStep );'), (64050, 1, u'+  assert( db!=0 );'), (64055, 1, u'+    assert( db->mallocFailed==0 );'), (64411, 1, u'+  assert( pTo->db==pFrom->db );'), (64412, 1, u'+  assert( pTo->nVar==pFrom->nVar );'), (64540, 1, u'+    assert( n>0 && tokenType!=TK_ILLEGAL );'), (64603, 1, u'+      assert( n>0 );'), (64606, 1, u'+      assert( zRawSql[0] || nToken==0 );'), (64610, 1, u'+          assert( sqlite3Isdigit(zRawSql[1]) );'), (64616, 1, u"+        assert( zRawSql[0]==':' || zRawSql[0]=='$' || zRawSql[0]=='@' );"), (64621, 1, u'+        assert( idx>0 );'), (64625, 1, u'+      assert( idx>0 && idx<=p->nVar );'), (64664, 1, u'+        assert( pVar->flags & MEM_Blob );'), (65018, 1, u'+  assert( iCur<p->nCursor );'), (65096, 1, u'+    assert( affinity==SQLITE_AFF_INTEGER || affinity==SQLITE_AFF_REAL'), (65148, 1, u'+      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (65151, 1, u'+      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (65154, 1, u'+      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (65185, 1, u'+      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (65188, 1, u'+      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (65191, 1, u'+      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (65383, 1, u'+  assert( n==(db->nSavepoint + db->isTransactionSavepoint) );'), (65890, 1, u'+  assert( p->magic==VDBE_MAGIC_RUN );  /* sqlite3_step() verifies this */'), (65897, 1, u'+  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY );'), (65899, 1, u'+  assert( p->explain==0 );'), (65920, 1, u'+    assert( pc>=0 && pc<p->nOp );'), (65979, 1, u'+    assert( pOp->opflags==sqlite3OpcodeProperty[pOp->opcode] );'), (65981, 1, u'+      assert( pOp->p2>0 );'), (65982, 1, u'+      assert( pOp->p2<=p->nMem );'), (65992, 1, u'+      assert( pOp->p1>0 );'), (65993, 1, u'+      assert( pOp->p1<=p->nMem );'), (65994, 1, u'+      assert( memIsValid(&aMem[pOp->p1]) );'), (65998, 1, u'+      assert( pOp->p2>0 );'), (65999, 1, u'+      assert( pOp->p2<=p->nMem );'), (66000, 1, u'+      assert( memIsValid(&aMem[pOp->p2]) );'), (66004, 1, u'+      assert( pOp->p3>0 );'), (66005, 1, u'+      assert( pOp->p3<=p->nMem );'), (66006, 1, u'+      assert( memIsValid(&aMem[pOp->p3]) );'), (66010, 1, u'+      assert( pOp->p2>0 );'), (66011, 1, u'+      assert( pOp->p2<=p->nMem );'), (66015, 1, u'+      assert( pOp->p3>0 );'), (66016, 1, u'+      assert( pOp->p3<=p->nMem );'), (66077, 1, u'+  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (66079, 1, u'+  assert( (pIn1->flags & MEM_Dyn)==0 );'), (66094, 1, u'+  assert( pIn1->flags & MEM_Int );'), (66108, 1, u'+  assert( (pIn1->flags & MEM_Dyn)==0 );'), (66174, 1, u'+    assert( p->rc!=SQLITE_OK );'), (66183, 1, u'+  assert( rc==SQLITE_BUSY || rc==SQLITE_OK || rc==SQLITE_ERROR );'), (66187, 1, u'+    assert( rc==SQLITE_OK || (p->rc&0xff)==SQLITE_CONSTRAINT );'), (66188, 1, u'+    assert( rc==SQLITE_OK || db->nDeferredCons>0 );'), (66209, 1, u'+  assert( pOp->p4.pI64!=0 );'), (66222, 1, u'+  assert( !sqlite3IsNaN(*pOp->p4.pReal) );'), (66234, 1, u'+  assert( pOp->p4.z!=0 );'), (66243, 1, u'+    assert( pOut->zMalloc==pOut->z );'), (66244, 1, u'+    assert( pOut->flags & MEM_Dyn );'), (66267, 1, u'+  assert( pOp->p4.z!=0 );'), (66293, 1, u'+  assert( pOp->p3<=p->nMem );'), (66312, 1, u'+  assert( pOp->p1 <= SQLITE_MAX_LENGTH );'), (66331, 1, u'+  assert( pOp->p1>0 && pOp->p1<=p->nVar );'), (66332, 1, u'+  assert( pOp->p4.z==0 || pOp->p4.z==p->azVar[pOp->p1-1] );'), (66360, 1, u'+  assert( u.ad.n>0 && u.ad.p1>0 && u.ad.p2>0 );'), (66361, 1, u'+  assert( u.ad.p1+u.ad.n<=u.ad.p2 || u.ad.p2+u.ad.n<=u.ad.p1 );'), (66366, 1, u'+    assert( pOut<=&aMem[p->nMem] );'), (66367, 1, u'+    assert( pIn1<=&aMem[p->nMem] );'), (66368, 1, u'+    assert( memIsValid(pIn1) );'), (66401, 1, u'+  assert( pOut!=pIn1 );'), (66431, 1, u'+  assert( pOut!=pIn1 );'), (66453, 1, u'+  assert( p->nResColumn==pOp->p2 );'), (66454, 1, u'+  assert( pOp->p1>0 );'), (66455, 1, u'+  assert( pOp->p1+pOp->p2<=p->nMem+1 );'), (66461, 1, u'+    assert( db->flags&SQLITE_CountRows );'), (66462, 1, u'+    assert( p->usesStmtJournal );'), (66481, 1, u'+  assert( p->iStatement==0 || db->flags&SQLITE_CountRows );'), (66496, 1, u'+    assert( memIsValid(&u.af.pMem[u.af.i]) );'), (66498, 1, u'+    assert( (u.af.pMem[u.af.i].flags & MEM_Ephem)==0'), (66533, 1, u'+  assert( pIn1!=pOut );'), (66700, 1, u'+  assert( pOp->p4type==P4_COLLSEQ );'), (66734, 1, u'+  assert( u.ai.apVal || u.ai.n==0 );'), (66735, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (66739, 1, u'+  assert( u.ai.n==0 || (pOp->p2>0 && pOp->p2+u.ai.n<=p->nMem+1) );'), (66740, 1, u'+  assert( pOp->p3<pOp->p2 || pOp->p3>=pOp->p2+u.ai.n );'), (66743, 1, u'+    assert( memIsValid(u.ai.pArg) );'), (66750, 1, u'+  assert( pOp->p4type==P4_FUNCDEF || pOp->p4type==P4_VDBEFUNC );'), (66773, 1, u'+    assert( pOp>aOp );'), (66774, 1, u'+    assert( pOp[-1].p4type==P4_COLLSEQ );'), (66775, 1, u'+    assert( pOp[-1].opcode==OP_CollSeq );'), (66879, 1, u'+    assert( u.aj.op==OP_ShiftRight || u.aj.op==OP_ShiftLeft );'), (66883, 1, u'+      assert( OP_ShiftRight==OP_ShiftLeft+1 );'), (66978, 1, u'+  assert( MEM_Str==(MEM_Blob>>3) );'), (66982, 1, u'+  assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (67002, 1, u'+    assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (67165, 1, u'+      assert( pOp->opcode==OP_Eq || pOp->opcode==OP_Ne );'), (67166, 1, u'+      assert( (u.ak.flags1 & MEM_Cleared)==0 );'), (67198, 1, u'+    assert( pOp->p4type==P4_COLLSEQ || pOp->p4.pColl==0 );'), (67238, 1, u'+  assert( pOp->p4type==P4_INTARRAY );'), (67239, 1, u'+  assert( pOp->p4.ai );'), (67278, 1, u'+  assert( u.al.n>0 );'), (67279, 1, u'+  assert( u.al.pKeyInfo!=0 );'), (67286, 1, u'+    assert( u.al.p1>0 && u.al.p1+mx<=p->nMem+1 );'), (67287, 1, u'+    assert( u.al.p2>0 && u.al.p2+mx<=p->nMem+1 );'), (67289, 1, u'+    assert( u.al.p1>0 && u.al.p1+u.al.n<=p->nMem+1 );'), (67290, 1, u'+    assert( u.al.p2>0 && u.al.p2+u.al.n<=p->nMem+1 );'), (67295, 1, u'+    assert( memIsValid(&aMem[u.al.p1+u.al.idx]) );'), (67296, 1, u'+    assert( memIsValid(&aMem[u.al.p2+u.al.idx]) );'), (67299, 1, u'+    assert( u.al.i<u.al.pKeyInfo->nField );'), (67423, 1, u'+  assert( pOp->p1<p->nOnceFlag );'), (67546, 1, u'+  assert( u.ao.p1<p->nCursor );'), (67547, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (67565, 1, u'+  assert( u.ao.pC!=0 );'), (67567, 1, u'+  assert( u.ao.pC->pVtabCursor==0 );'), (67580, 1, u'+      assert( sqlite3BtreeCursorIsValid(u.ao.pCrsr) );'), (67582, 1, u'+      assert( rc==SQLITE_OK );   /* True because of CursorMoveto() call above */'), (67586, 1, u'+      assert( (u.ao.payloadSize64 & SQLITE_MAX_U32)==(u64)u.ao.payloadSize64 );'), (67589, 1, u'+      assert( sqlite3BtreeCursorIsValid(u.ao.pCrsr) );'), (67591, 1, u'+      assert( rc==SQLITE_OK );   /* DataSize() cannot fail */'), (67600, 1, u'+    assert( u.ao.pReg->flags & MEM_Blob );'), (67601, 1, u'+    assert( memIsValid(u.ao.pReg) );'), (67605, 1, u'+    assert( u.ao.payloadSize==0 || u.ao.zRec!=0 );'), (67617, 1, u'+  assert( db->aLimit[SQLITE_LIMIT_LENGTH]>=0 );'), (67623, 1, u'+  assert( u.ao.p2<u.ao.nField );'), (67632, 1, u'+    assert(u.ao.aType);'), (67652, 1, u'+      assert( u.ao.avail>=0 );'), (67767, 1, u'+    assert( rc==SQLITE_OK );'), (67811, 1, u'+    assert( u.ao.sMem.z==u.ao.sMem.zMalloc );'), (67812, 1, u'+    assert( !(u.ao.pDest->flags & MEM_Dyn) );'), (67813, 1, u'+    assert( !(u.ao.pDest->flags & (MEM_Blob|MEM_Str)) || u.ao.pDest->z==u.ao.sMem.z );'), (67843, 1, u'+  assert( u.ap.zAffinity!=0 );'), (67844, 1, u'+  assert( u.ap.zAffinity[pOp->p2]==0 );'), (67847, 1, u'+    assert( pIn1 <= &p->aMem[p->nMem] );'), (67848, 1, u'+    assert( memIsValid(pIn1) );'), (67910, 1, u'+  assert( u.aq.nField>0 && pOp->p2>0 && pOp->p2+u.aq.nField<=p->nMem+1 );'), (67917, 1, u'+  assert( pOp->p3<pOp->p1 || pOp->p3>=pOp->p1+pOp->p2 );'), (67925, 1, u'+    assert( memIsValid(u.aq.pRec) );'), (67974, 1, u'+  assert( u.aq.i==u.aq.nByte );'), (67976, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (68037, 1, u'+  assert( db->pSavepoint==0 || db->autoCommit==0 );'), (68038, 1, u'+  assert( u.as.p1==SAVEPOINT_BEGIN||u.as.p1==SAVEPOINT_RELEASE||u.as.p1==SAVEPOINT_ROLLBACK );'), (68039, 1, u'+  assert( db->pSavepoint || db->isTransactionSavepoint==0 );'), (68040, 1, u'+  assert( checkSavepointCount(db) );'), (68058, 1, u'+      assert( db->autoCommit==0 || db->nVTrans==0 );'), (68162, 1, u'+        assert( u.as.pSavepoint==db->pSavepoint );'), (68201, 1, u'+  assert( u.at.desiredAutoCommit==1 || u.at.desiredAutoCommit==0 );'), (68202, 1, u'+  assert( u.at.desiredAutoCommit==1 || u.at.iRollback==0 );'), (68203, 1, u'+  assert( db->activeVdbeCnt>0 );  /* At least this one VM is active */'), (68225, 1, u'+      assert( u.at.desiredAutoCommit==1 );'), (68239, 1, u'+    assert( db->nStatement==0 );'), (68294, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (68295, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (68312, 1, u'+      assert( sqlite3BtreeIsInTrans(u.au.pBt) );'), (68314, 1, u'+        assert( db->nStatement>=0 && db->nSavepoint>=0 );'), (68354, 1, u'+  assert( pOp->p3<SQLITE_N_BTREE_META );'), (68355, 1, u'+  assert( u.av.iDb>=0 && u.av.iDb<db->nDb );'), (68356, 1, u'+  assert( db->aDb[u.av.iDb].pBt!=0 );'), (68357, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<u.av.iDb))!=0 );'), (68378, 1, u'+  assert( pOp->p2<SQLITE_N_BTREE_META );'), (68379, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (68380, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (68382, 1, u'+  assert( u.aw.pDb->pBt!=0 );'), (68383, 1, u'+  assert( sqlite3SchemaMutexHeld(db, pOp->p1, 0) );'), (68430, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (68431, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (68432, 1, u'+  assert( sqlite3SchemaMutexHeld(db, pOp->p1, 0) );'), (68528, 1, u'+  assert( (pOp->p5&(OPFLAG_P2ISREG|OPFLAG_BULKCSR))==pOp->p5 );'), (68529, 1, u'+  assert( pOp->opcode==OP_OpenWrite || pOp->p5==0 );'), (68540, 1, u'+  assert( u.ay.iDb>=0 && u.ay.iDb<db->nDb );'), (68541, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<u.ay.iDb))!=0 );'), (68544, 1, u'+  assert( u.ay.pX!=0 );'), (68547, 1, u'+    assert( sqlite3SchemaMutexHeld(db, u.ay.iDb, 0) );'), (68555, 1, u'+    assert( u.ay.p2>0 );'), (68556, 1, u'+    assert( u.ay.p2<=p->nMem );'), (68558, 1, u'+    assert( memIsValid(pIn2) );'), (68559, 1, u'+    assert( (pIn2->flags & MEM_Int)!=0 );'), (68578, 1, u'+  assert( pOp->p1>=0 );'), (68585, 1, u'+  assert( OPFLAG_BULKCSR==BTREE_BULKLOAD );'), (68590, 1, u'+  assert( rc==SQLITE_OK );'), (68643, 1, u'+  assert( pOp->p1>=0 );'), (68660, 1, u'+      assert( pOp->p4type==P4_KEYINFO );'), (68663, 1, u'+        assert( pgno==MASTER_ROOT+1 );'), (68721, 1, u'+  assert( pOp->p1>=0 );'), (68738, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (68809, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (68810, 1, u'+  assert( pOp->p2!=0 );'), (68812, 1, u'+  assert( u.bc.pC!=0 );'), (68813, 1, u'+  assert( u.bc.pC->pseudoTableReg==0 );'), (68814, 1, u'+  assert( OP_SeekLe == OP_SeekLt+1 );'), (68815, 1, u'+  assert( OP_SeekGe == OP_SeekLt+2 );'), (68816, 1, u'+  assert( OP_SeekGt == OP_SeekLt+3 );'), (68817, 1, u'+  assert( u.bc.pC->isOrdered );'), (68841, 1, u'+        assert( (pIn3->flags & MEM_Real)!=0 );'), (68848, 1, u'+            if( u.bc.oc>=OP_SeekGe ){  assert( u.bc.oc==OP_SeekGe || u.bc.oc==OP_SeekGt );'), (68853, 1, u'+            if( u.bc.oc<=OP_SeekLe ){  assert( u.bc.oc==OP_SeekLt || u.bc.oc==OP_SeekLe );'), (68867, 1, u'+          assert( u.bc.oc==OP_SeekLe || u.bc.oc==OP_SeekGt );'), (68881, 1, u'+      assert( pOp->p4type==P4_INT32 );'), (68882, 1, u'+      assert( u.bc.nField>0 );'), (68894, 1, u'+      assert( u.bc.oc!=OP_SeekGt || u.bc.r.flags==UNPACKED_INCRKEY );'), (68895, 1, u'+      assert( u.bc.oc!=OP_SeekLe || u.bc.r.flags==UNPACKED_INCRKEY );'), (68896, 1, u'+      assert( u.bc.oc!=OP_SeekGe || u.bc.r.flags==0 );'), (68897, 1, u'+      assert( u.bc.oc!=OP_SeekLt || u.bc.r.flags==0 );'), (68901, 1, u'+      { int i; for(i=0; i<u.bc.r.nField; i++) assert( memIsValid(&u.bc.r.aMem[i]) ); }'), (68915, 1, u'+    if( u.bc.oc>=OP_SeekGe ){  assert( u.bc.oc==OP_SeekGe || u.bc.oc==OP_SeekGt );'), (68924, 1, u'+      assert( u.bc.oc==OP_SeekLt || u.bc.oc==OP_SeekLe );'), (68936, 1, u'+    assert( pOp->p2>0 );'), (68964, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (68966, 1, u'+  assert( u.bd.pC!=0 );'), (68968, 1, u'+    assert( u.bd.pC->isTable );'), (69020, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69021, 1, u'+  assert( pOp->p4type==P4_INT32 );'), (69023, 1, u'+  assert( u.be.pC!=0 );'), (69027, 1, u'+    assert( u.be.pC->isTable==0 );'), (69033, 1, u'+      { int i; for(i=0; i<u.be.r.nField; i++) assert( memIsValid(&u.be.r.aMem[i]) ); }'), (69042, 1, u'+      assert( pIn3->flags & MEM_Blob );'), (69043, 1, u'+      assert( (pIn3->flags & MEM_Zero)==0 );  /* zeroblobs already expanded */'), (69106, 1, u'+  assert( pOp->p4type==P4_INT32 );'), (69107, 1, u'+  assert( pOp->p4.i>0 && pOp->p4.i<=p->nMem );'), (69108, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69112, 1, u'+  assert( u.bf.pCx->deferredMoveto==0 );'), (69126, 1, u'+  assert( (u.bf.aMx[u.bf.nField].flags & MEM_Null)==0 );'), (69135, 1, u'+    { int i; for(i=0; i<u.bf.r.nField; i++) assert( memIsValid(&u.bf.r.aMem[i]) ); }'), (69178, 1, u'+  assert( pIn3->flags & MEM_Int );'), (69179, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69181, 1, u'+  assert( u.bg.pC!=0 );'), (69182, 1, u'+  assert( u.bg.pC->isTable );'), (69183, 1, u'+  assert( u.bg.pC->pseudoTableReg==0 );'), (69196, 1, u'+      assert( u.bg.pC->rowidIsValid==0 );'), (69204, 1, u'+    assert( u.bg.pC->rowidIsValid==0 );'), (69218, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69219, 1, u'+  assert( p->apCsr[pOp->p1]!=0 );'), (69251, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69253, 1, u'+  assert( u.bh.pC!=0 );'), (69270, 1, u'+    assert( u.bh.pC->isTable );'), (69292, 1, u'+          assert( sqlite3BtreeCursorIsValid(u.bh.pC->pCursor) );'), (69294, 1, u'+          assert( rc==SQLITE_OK );   /* Cannot fail following BtreeLast() */'), (69306, 1, u'+        assert( pOp->p3>0 );'), (69310, 1, u'+          assert( pOp->p3<=u.bh.pFrame->nMem );'), (69314, 1, u'+          assert( pOp->p3<=p->nMem );'), (69318, 1, u'+        assert( memIsValid(u.bh.pMem) );'), (69322, 1, u'+        assert( (u.bh.pMem->flags & MEM_Int)!=0 );  /* mem(P3) holds an integer */'), (69366, 1, u'+      assert( u.bh.v>0 );  /* EV: R-40812-03570 */'), (69435, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69436, 1, u'+  assert( memIsValid(u.bi.pData) );'), (69438, 1, u'+  assert( u.bi.pC!=0 );'), (69439, 1, u'+  assert( u.bi.pC->pCursor!=0 );'), (69440, 1, u'+  assert( u.bi.pC->pseudoTableReg==0 );'), (69441, 1, u'+  assert( u.bi.pC->isTable );'), (69446, 1, u'+    assert( u.bi.pKey->flags & MEM_Int );'), (69447, 1, u'+    assert( memIsValid(u.bi.pKey) );'), (69451, 1, u'+    assert( pOp->opcode==OP_InsertInt );'), (69461, 1, u'+    assert( u.bi.pData->flags & (MEM_Blob|MEM_Str) );'), (69483, 1, u'+    assert( u.bi.pC->isTable );'), (69485, 1, u'+    assert( u.bi.pC->iDb>=0 );'), (69517, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69519, 1, u'+  assert( u.bj.pC!=0 );'), (69520, 1, u'+  assert( u.bj.pC->pCursor!=0 );  /* Only valid for real tables, no pseudotables */'), (69526, 1, u'+    assert( u.bj.pC->isTable );'), (69527, 1, u'+    assert( u.bj.pC->rowidIsValid );  /* lastRowid set by previous OP_NotFound */'), (69538, 1, u'+  assert( u.bj.pC->deferredMoveto==0 );'), (69551, 1, u'+    assert( u.bj.pC->iDb>=0 );'), (69583, 1, u'+  assert( isSorter(u.bk.pC) );'), (69603, 1, u'+  assert( u.bl.pC->isSorter );'), (69641, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69643, 1, u'+  assert( u.bm.pC->isSorter==0 );'), (69644, 1, u'+  assert( u.bm.pC->isTable || pOp->opcode!=OP_RowData );'), (69645, 1, u'+  assert( u.bm.pC->isIndex || pOp->opcode==OP_RowData );'), (69646, 1, u'+  assert( u.bm.pC!=0 );'), (69647, 1, u'+  assert( u.bm.pC->nullRow==0 );'), (69648, 1, u'+  assert( u.bm.pC->pseudoTableReg==0 );'), (69649, 1, u'+  assert( u.bm.pC->pCursor!=0 );'), (69651, 1, u'+  assert( sqlite3BtreeCursorIsValid(u.bm.pCrsr) );'), (69658, 1, u'+  assert( u.bm.pC->deferredMoveto==0 );'), (69663, 1, u'+    assert( !u.bm.pC->isTable );'), (69665, 1, u'+    assert( rc==SQLITE_OK );    /* True because of CursorMoveto() call above */'), (69672, 1, u'+    assert( rc==SQLITE_OK );    /* DataSize() cannot fail */'), (69709, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69711, 1, u'+  assert( u.bn.pC!=0 );'), (69712, 1, u'+  assert( u.bn.pC->pseudoTableReg==0 || u.bn.pC->nullRow );'), (69722, 1, u'+    assert( u.bn.pModule->xRowid );'), (69727, 1, u'+    assert( u.bn.pC->pCursor!=0 );'), (69734, 1, u'+      assert( rc==SQLITE_OK );  /* Always so because of CursorMoveto() above */'), (69752, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69754, 1, u'+  assert( u.bo.pC!=0 );'), (69757, 1, u'+  assert( u.bo.pC->pCursor || u.bo.pC->pVtabCursor );'), (69779, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69781, 1, u'+  assert( u.bp.pC!=0 );'), (69834, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69836, 1, u'+  assert( u.bq.pC!=0 );'), (69837, 1, u'+  assert( u.bq.pC->isSorter==(pOp->opcode==OP_SorterSort) );'), (69843, 1, u'+    assert( u.bq.pCrsr );'), (69851, 1, u'+  assert( pOp->p2>0 && pOp->p2<p->nOp );'), (69899, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69900, 1, u'+  assert( pOp->p5<=ArraySize(p->aCounter) );'), (69905, 1, u'+  assert( u.br.pC->isSorter==(pOp->opcode==OP_SorterNext) );'), (69907, 1, u'+    assert( pOp->opcode==OP_SorterNext );'), (69911, 1, u'+    assert( u.br.pC->deferredMoveto==0 );'), (69912, 1, u'+    assert( u.br.pC->pCursor );'), (69913, 1, u'+    assert( pOp->opcode!=OP_Next || pOp->p4.xAdvance==sqlite3BtreeNext );'), (69914, 1, u'+    assert( pOp->opcode!=OP_Prev || pOp->p4.xAdvance==sqlite3BtreePrevious );'), (69951, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69953, 1, u'+  assert( u.bs.pC!=0 );'), (69954, 1, u'+  assert( u.bs.pC->isSorter==(pOp->opcode==OP_SorterInsert) );'), (69956, 1, u'+  assert( pIn2->flags & MEM_Blob );'), (69959, 1, u'+    assert( u.bs.pC->isTable==0 );'), (69970, 1, u'+        assert( u.bs.pC->deferredMoveto==0 );'), (69992, 1, u'+  assert( pOp->p3>0 );'), (69993, 1, u'+  assert( pOp->p2>0 && pOp->p2+pOp->p3<=p->nMem+1 );'), (69994, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69996, 1, u'+  assert( u.bt.pC!=0 );'), (70004, 1, u'+    { int i; for(i=0; i<u.bt.r.nField; i++) assert( memIsValid(&u.bt.r.aMem[i]) ); }'), (70010, 1, u'+    assert( u.bt.pC->deferredMoveto==0 );'), (70031, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70033, 1, u'+  assert( u.bu.pC!=0 );'), (70039, 1, u'+    assert( u.bu.pC->deferredMoveto==0 );'), (70040, 1, u'+    assert( u.bu.pC->isTable==0 );'), (70087, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70089, 1, u'+  assert( u.bv.pC!=0 );'), (70090, 1, u'+  assert( u.bv.pC->isOrdered );'), (70092, 1, u'+    assert( u.bv.pC->deferredMoveto==0 );'), (70093, 1, u'+    assert( pOp->p5==0 || pOp->p5==1 );'), (70094, 1, u'+    assert( pOp->p4type==P4_INT32 );'), (70104, 1, u'+    { int i; for(i=0; i<u.bv.r.nField; i++) assert( memIsValid(&u.bv.r.aMem[i]) ); }'), (70110, 1, u'+      assert( pOp->opcode==OP_IdxGE );'), (70164, 1, u'+    assert( u.bw.iCnt==1 );'), (70165, 1, u'+    assert( (p->btreeMask & (((yDbMask)1)<<u.bw.iDb))!=0 );'), (70173, 1, u'+      assert( resetSchemaOnFault==0 || resetSchemaOnFault==u.bw.iDb+1 );'), (70205, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p2))!=0 );'), (70212, 1, u'+      assert( memIsValid(&aMem[pOp->p3]) );'), (70251, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (70252, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (70254, 1, u'+  assert( u.by.pDb->pBt!=0 );'), (70288, 1, u'+    assert( u.bz.iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[u.bz.iDb].pBt) );'), (70293, 1, u'+  assert( u.bz.iDb>=0 && u.bz.iDb<db->nDb );'), (70294, 1, u'+  assert( DbHasProperty(db, u.bz.iDb, DB_SchemaLoaded) );'), (70306, 1, u'+      assert( db->init.busy==0 );'), (70309, 1, u'+      assert( !db->mallocFailed );'), (70331, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (70406, 1, u'+  assert( u.ca.nRoot>0 );'), (70409, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (70411, 1, u'+  assert( (u.ca.pnErr->flags & MEM_Int)!=0 );'), (70412, 1, u'+  assert( (u.ca.pnErr->flags & (MEM_Str|MEM_Blob))==0 );'), (70418, 1, u'+  assert( pOp->p5<db->nDb );'), (70419, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p5))!=0 );'), (70426, 1, u'+    assert( u.ca.z==0 );'), (70448, 1, u'+  assert( (pIn2->flags & MEM_Int)!=0 );'), (70514, 1, u'+  assert( pIn3->flags&MEM_Int );'), (70524, 1, u'+  assert( pOp->p4type==P4_INT32 );'), (70525, 1, u'+  assert( u.cc.iSet==-1 || u.cc.iSet>=0 );'), (70571, 1, u'+  assert( u.cd.pProgram->nOp>0 );'), (70640, 1, u'+    assert( u.cd.pProgram->nMem+u.cd.pProgram->nCsr==u.cd.pFrame->nChildMem );'), (70641, 1, u'+    assert( u.cd.pProgram->nCsr==u.cd.pFrame->nChildCsr );'), (70642, 1, u'+    assert( pc==u.cd.pFrame->pc );'), (70750, 1, u'+  assert( memIsValid(u.cf.pIn1) );'), (70770, 1, u'+  assert( pIn1->flags&MEM_Int );'), (70786, 1, u'+  assert( pIn1->flags&MEM_Int );'), (70803, 1, u'+  assert( pIn1->flags&MEM_Int );'), (70832, 1, u'+  assert( u.cg.n>=0 );'), (70835, 1, u'+  assert( u.cg.apVal || u.cg.n==0 );'), (70837, 1, u'+    assert( memIsValid(u.cg.pRec) );'), (70843, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (70855, 1, u'+    assert( pOp>p->aOp );'), (70856, 1, u'+    assert( pOp[-1].p4type==P4_COLLSEQ );'), (70857, 1, u'+    assert( pOp[-1].opcode==OP_CollSeq );'), (70866, 1, u'+    assert( pOp[-1].opcode==OP_CollSeq );'), (70892, 1, u'+  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (70894, 1, u'+  assert( (u.ch.pMem->flags & ~(MEM_Null|MEM_Agg))==0 );'), (70928, 1, u'+  assert( pOp->p2==SQLITE_CHECKPOINT_PASSIVE'), (70968, 1, u'+  assert( u.cj.eNew==PAGER_JOURNALMODE_DELETE'), (70976, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (71028, 1, u'+      assert( sqlite3BtreeIsInTrans(u.cj.pBt)==0 );'), (71076, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (71077, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (71125, 1, u'+    assert( p1>=0 && p1<db->nDb );'), (71126, 1, u'+    assert( (p->btreeMask & (((yDbMask)1)<<p1))!=0 );'), (71127, 1, u'+    assert( isWriteLock==0 || isWriteLock==1 );'), (71204, 1, u'+  assert(u.cm.pVtab && u.cm.pModule);'), (71262, 1, u'+  assert( memIsValid(u.cn.pQuery) );'), (71264, 1, u'+  assert( u.cn.pCur->pVtabCursor );'), (71270, 1, u'+  assert( (u.cn.pQuery->flags&MEM_Int)!=0 && u.cn.pArgc->flags==MEM_Int );'), (71317, 1, u'+  assert( pCur->pVtabCursor );'), (71318, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (71327, 1, u'+  assert( u.co.pModule->xColumn );'), (71377, 1, u'+  assert( u.cp.pCur->pVtabCursor );'), (71383, 1, u'+  assert( u.cp.pModule->xNext );'), (71422, 1, u'+  assert( u.cq.pVtab->pModule->xRename );'), (71423, 1, u'+  assert( memIsValid(u.cq.pName) );'), (71425, 1, u'+  assert( u.cq.pName->flags & MEM_Str );'), (71474, 1, u'+  assert( pOp->p2==1        || pOp->p5==OE_Fail   || pOp->p5==OE_Rollback'), (71480, 1, u'+  assert( pOp->p4type==P4_VTAB );'), (71486, 1, u'+      assert( memIsValid(u.cr.pX) );'), (71497, 1, u'+      assert( u.cr.nArg>1 && u.cr.apArg[0] && (u.cr.apArg[0]->flags&MEM_Null) );'), (71595, 1, u'+  assert( pOp->opcode==OP_Noop || pOp->opcode==OP_Explain );'), (71625, 1, u'+    assert( pc>=-1 && pc<p->nOp );'), (71645, 1, u'+  assert( rc );'), (71685, 1, u'+  assert( p->zErrMsg==0 );'), (71696, 1, u'+  assert( db->u1.isInterrupted );'), (71764, 1, u'+  assert( v->aVar[0].flags&MEM_Int );'), (71800, 1, u'+  assert( rc!=SQLITE_OK || zErr==0 );'), (71801, 1, u'+  assert( rc!=SQLITE_ROW && rc!=SQLITE_DONE );'), (71956, 1, u'+    assert( pBlob->pStmt || db->mallocFailed );'), (72089, 1, u'+    assert( db == v->db );'), (72162, 1, u'+    assert( rc!=SQLITE_SCHEMA );'), (72166, 1, u'+  assert( rc==SQLITE_OK || p->pStmt==0 );'), (72358, 1, u'+  assert( p->aBuffer );'), (72374, 1, u'+    assert( nRead>0 );'), (72378, 1, u'+    assert( rc!=SQLITE_IOERR_SHORT_READ );'), (72421, 1, u'+      assert( aNext!=p->aAlloc );'), (72501, 1, u'+  assert( pSorter->iWriteOff>iStart );'), (72502, 1, u'+  assert( pIter->aAlloc==0 );'), (72503, 1, u'+  assert( pIter->aBuffer==0 );'), (72525, 1, u'+      assert( rc!=SQLITE_IOERR_SHORT_READ );'), (72577, 1, u'+    assert( r2->nField>0 );'), (72603, 1, u'+  assert( iOut<pSorter->nTree && iOut>0 );'), (72622, 1, u'+    assert( pCsr->pSorter->pUnpacked!=0 );  /* allocated in vdbeSorterMerge() */'), (72646, 1, u'+  assert( pCsr->pKeyInfo && pCsr->pBt==0 );'), (72654, 1, u'+  assert( pSorter->pUnpacked==(UnpackedRecord *)d );'), (72833, 1, u'+    assert( p->iBufEnd<p->nBuffer );'), (72895, 1, u'+    assert( pSorter->pRecord==0 );'), (72904, 1, u'+    assert( rc!=SQLITE_OK || pSorter->pTemp1 );'), (72905, 1, u'+    assert( pSorter->iWriteOff==0 );'), (72906, 1, u'+    assert( pSorter->nPMA==0 );'), (72941, 1, u'+  assert( pSorter );'), (72975, 1, u'+    assert( rc!=SQLITE_OK || (nExpect==pSorter->iWriteOff) );'), (72999, 1, u'+    assert( rc!=SQLITE_OK || pSorter->iReadOff<=pSorter->iWriteOff );'), (73025, 1, u'+  assert( pSorter );'), (73032, 1, u'+    assert( pSorter->aTree==0 );'), (73043, 1, u'+  assert( nIter>0 );'), (73074, 1, u'+      assert( rc!=SQLITE_OK || pSorter->aIter[ pSorter->aTree[1] ].pFile );'), (73081, 1, u'+        assert( iWrite2==0 );'), (73091, 1, u'+          assert( pIter->pFile );'), (73271, 1, u'+        assert(p->iSize<=p->nBuf);'), (73555, 1, u'+  assert( iOfst+iAmt<=p->endpoint.iOffset );'), (73600, 1, u'+  assert( iOfst==p->endpoint.iOffset );'), (73616, 1, u'+        assert( p->pFirst );'), (73619, 1, u'+        assert( !p->pFirst );'), (73640, 1, u'+  assert(size==0);'), (73713, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(p) );'), (73986, 1, u'+  assert( iCol>=0 && iCol<pEList->nExpr );'), (73988, 1, u'+  assert( pOrig!=0 );'), (73989, 1, u'+  assert( pOrig->flags & EP_Resolved );'), (74017, 1, u'+    assert( (pExpr->flags & (EP_Reduced|EP_TokenOnly))==0 );'), (74117, 1, u'+  assert( pNC );     /* the name context cannot be NULL. */'), (74118, 1, u'+  assert( zCol );    /* The Z in X.Y.Z cannot be NULL */'), (74119, 1, u'+  assert( !ExprHasAnyProperty(pExpr, EP_TokenOnly|EP_Reduced) );'), (74132, 1, u'+      assert( db->aDb[i].zName );'), (74151, 1, u'+        assert( pTab!=0 && pTab->zName!=0 );'), (74152, 1, u'+        assert( pTab->nCol>0 );'), (74172, 1, u'+          assert( zTabName!=0 );'), (74212, 1, u'+      assert( op==TK_DELETE || op==TK_UPDATE || op==TK_INSERT );'), (74287, 1, u'+          assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (74288, 1, u'+          assert( pExpr->x.pList==0 );'), (74289, 1, u'+          assert( pExpr->x.pSelect==0 );'), (74298, 1, u'+          assert( zTab==0 && zDb==0 );'), (74359, 1, u'+    assert( pMatch->iCursor==pExpr->iTable );'), (74372, 1, u'+    assert( pNC!=0 );'), (74379, 1, u'+      assert( pTopNC!=0 );'), (74429, 1, u'+  assert( pNC!=0 );'), (74431, 1, u'+  assert( pParse==pWalker->pParse );'), (74440, 1, u'+      assert( pSrcList->a[i].iCursor>=0 && pSrcList->a[i].iCursor<pParse->nTab);'), (74454, 1, u'+      assert( pSrcList && pSrcList->nSrc==1 );'), (74487, 1, u'+        assert( pRight->op==TK_DOT );'), (74511, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (74583, 1, u'+        assert( pNC->nRef>=nRef );'), (74665, 1, u'+  assert( sqlite3ExprIsInteger(pE, &i)==0 );'), (74757, 1, u'+    assert( pEList!=0 );'), (74773, 1, u'+            assert(pDup);'), (74789, 1, u'+          assert( pItem->pExpr->op==TK_COLLATE );'), (74790, 1, u'+          assert( pItem->pExpr->pLeft==pE );'), (74841, 1, u'+  assert( pEList!=0 );  /* sqlite3SelectNew() guarantees this */'), (74940, 1, u'+  assert( p!=0 );'), (74965, 1, u'+    assert( (p->selFlags & SF_Expanded)!=0 );'), (74966, 1, u'+    assert( (p->selFlags & SF_Resolved)==0 );'), (75001, 1, u'+        assert( pItem->isCorrelated==0 && nRef<=0 );'), (75015, 1, u'+    assert( pEList!=0 );'), (75026, 1, u'+    assert( (p->selFlags & SF_Aggregate)==0 );'), (75214, 1, u'+  assert( p!=0 );'), (75261, 1, u'+    assert( pExpr->flags&EP_xIsSelect );'), (75266, 1, u'+    assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (75277, 1, u'+    assert( pExpr->pTab && j<pExpr->pTab->nCol );'), (75304, 1, u'+  assert( zC!=0 );'), (75340, 1, u'+    assert( op!=TK_REGISTER || p->op2!=TK_COLLATE );'), (75397, 1, u'+    assert( aff1==0 || aff2==0 );'), (75408, 1, u'+  assert( pExpr->op==TK_EQ || pExpr->op==TK_IN || pExpr->op==TK_LT ||'), (75411, 1, u'+  assert( pExpr->pLeft );'), (75469, 1, u'+  assert( pLeft );'), (75638, 1, u'+      assert( iValue>=0 );'), (75652, 1, u'+        assert( pToken->z!=0 || pToken->n==0 );'), (75697, 1, u'+    assert( db->mallocFailed );'), (75790, 1, u'+  assert( pToken );'), (75797, 1, u'+  assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (75823, 1, u'+  assert( !ExprHasAnyProperty(pExpr, EP_IntValue|EP_Reduced|EP_TokenOnly) );'), (75825, 1, u'+  assert( z!=0 );'), (75826, 1, u'+  assert( z[0]!=0 );'), (75829, 1, u"+    assert( z[0]=='?' );"), (75892, 1, u'+  assert( !ExprHasProperty(p, EP_IntValue) || p->u.iValue>=0 );'), (75957, 1, u'+  assert( flags==EXPRDUP_REDUCE || flags==0 ); /* Only one flag value allowed */'), (75961, 1, u'+    assert( !ExprHasAnyProperty(p, EP_TokenOnly|EP_Reduced) );'), (75962, 1, u'+    assert( !ExprHasProperty(p, EP_FromJoin) );'), (75963, 1, u'+    assert( (p->flags2 & EP2_MallocedToken)==0 );'), (75964, 1, u'+    assert( (p->flags2 & EP2_Irreducible)==0 );'), (76026, 1, u'+    assert( pzBuffer==0 || isReduced );'), (76052, 1, u'+        assert( ExprHasProperty(p, EP_Reduced)==0 );'), (76248, 1, u'+  assert( p==0 );'), (76277, 1, u'+    assert( pList->nExpr>0 );'), (76284, 1, u'+  assert( pList->a!=0 );'), (76313, 1, u'+  assert( pList!=0 || pParse->db->mallocFailed!=0 );'), (76316, 1, u'+    assert( pList->nExpr>0 );'), (76318, 1, u'+    assert( pItem->zName==0 );'), (76338, 1, u'+  assert( pList!=0 || db->mallocFailed!=0 );'), (76341, 1, u'+    assert( pList->nExpr>0 );'), (76342, 1, u'+    assert( db->mallocFailed || pItem->pExpr==pSpan->pExpr );'), (76373, 1, u'+  assert( pList->a!=0 || pList->nExpr==0 );'), (76489, 1, u'+  assert( p->op!=TK_INTEGER || (p->flags & EP_IntValue)!=0'), (76592, 1, u'+      assert( p->iTable>=0 );  /* p cannot be part of a CHECK constraint */'), (76636, 1, u'+  assert( p->pGroupBy==0 );              /* Has no GROUP BY clause */'), (76638, 1, u'+  assert( p->pOffset==0 );               /* No LIMIT means no OFFSET */'), (76641, 1, u'+  assert( pSrc!=0 );'), (76646, 1, u'+  assert( pTab->pSelect==0 );            /* FROM clause is not a view */'), (76736, 1, u'+  assert( pX->op==TK_IN );'), (76750, 1, u'+    assert( p );                        /* Because of isCandidateForInOpt(p) */'), (76751, 1, u'+    assert( p->pEList!=0 );             /* Because of isCandidateForInOpt(p) */'), (76752, 1, u'+    assert( p->pEList->a[0].pExpr!=0 ); /* Because of isCandidateForInOpt(p) */'), (76753, 1, u'+    assert( p->pSrc!=0 );               /* Because of isCandidateForInOpt(p) */'), (76767, 1, u'+    assert(v);'), (76805, 1, u'+          assert( IN_INDEX_INDEX_DESC == IN_INDEX_INDEX_ASC+1 );'), (76957, 1, u'+        assert( !isRowid );'), (76960, 1, u'+        assert( (pExpr->iTable&0x0000FFFF)==pExpr->iTable );'), (77046, 1, u'+      assert( pExpr->op==TK_EXISTS || pExpr->op==TK_SELECT );'), (77048, 1, u'+      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (77116, 1, u'+  assert( v!=0 );       /* OOM detected prior to this routine */'), (77241, 1, u'+    assert( !sqlite3IsNaN(value) ); /* The new AtoF never returns NaN */'), (77260, 1, u'+    assert( i>=0 );'), (77267, 1, u'+    assert( z!=0 );'), (77307, 1, u'+  assert( iReg>0 );  /* Register numbers are always positive */'), (77308, 1, u'+  assert( iCol>=-1 && iCol<32768 );  /* Finite column numbers */'), (77323, 1, u'+    assert( p->iReg==0 || p->iTable!=iTab || p->iColumn!=iCol );'), (77395, 1, u'+  assert( N>0 );'), (77396, 1, u'+  assert( pParse->iCacheLevel>=N );'), (77471, 1, u'+  assert( v!=0 );'), (77511, 1, u'+  assert( iFrom>=iTo+nReg || iFrom+nReg<=iTo );'), (77560, 1, u'+  assert( target>0 && target<=pParse->nMem );'), (77562, 1, u'+    assert( pParse->db->mallocFailed );'), (77576, 1, u'+        assert( pCol->iMem>0 );'), (77589, 1, u'+        assert( pParse->ckBase>0 );'), (77604, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77610, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77623, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77624, 1, u"+      assert( pExpr->u.zToken[0]=='x' || pExpr->u.zToken[0]=='X' );"), (77625, 1, u"+      assert( pExpr->u.zToken[1]=='\\'' );"), (77628, 1, u"+      assert( z[n]=='\\'' );"), (77635, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77636, 1, u'+      assert( pExpr->u.zToken!=0 );'), (77637, 1, u'+      assert( pExpr->u.zToken[0]!=0 );'), (77640, 1, u"+        assert( pExpr->u.zToken[0]=='?'"), (77659, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77662, 1, u'+      assert( to_op==OP_ToText    || aff!=SQLITE_AFF_TEXT    );'), (77663, 1, u'+      assert( to_op==OP_ToBlob    || aff!=SQLITE_AFF_NONE    );'), (77664, 1, u'+      assert( to_op==OP_ToNumeric || aff!=SQLITE_AFF_NUMERIC );'), (77665, 1, u'+      assert( to_op==OP_ToInt     || aff!=SQLITE_AFF_INTEGER );'), (77666, 1, u'+      assert( to_op==OP_ToReal    || aff!=SQLITE_AFF_REAL    );'), (77688, 1, u'+      assert( TK_LT==OP_Lt );'), (77689, 1, u'+      assert( TK_LE==OP_Le );'), (77690, 1, u'+      assert( TK_GT==OP_Gt );'), (77691, 1, u'+      assert( TK_GE==OP_Ge );'), (77692, 1, u'+      assert( TK_EQ==OP_Eq );'), (77693, 1, u'+      assert( TK_NE==OP_Ne );'), (77733, 1, u'+      assert( TK_AND==OP_And );'), (77734, 1, u'+      assert( TK_OR==OP_Or );'), (77735, 1, u'+      assert( TK_PLUS==OP_Add );'), (77736, 1, u'+      assert( TK_MINUS==OP_Subtract );'), (77737, 1, u'+      assert( TK_REM==OP_Remainder );'), (77738, 1, u'+      assert( TK_BITAND==OP_BitAnd );'), (77739, 1, u'+      assert( TK_BITOR==OP_BitOr );'), (77740, 1, u'+      assert( TK_SLASH==OP_Divide );'), (77741, 1, u'+      assert( TK_LSHIFT==OP_ShiftLeft );'), (77742, 1, u'+      assert( TK_RSHIFT==OP_ShiftRight );'), (77743, 1, u'+      assert( TK_CONCAT==OP_Concat );'), (77764, 1, u'+      assert( pLeft );'), (77769, 1, u'+        assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77784, 1, u'+      assert( TK_BITNOT==OP_BitNot );'), (77785, 1, u'+      assert( TK_NOT==OP_Not );'), (77797, 1, u'+      assert( TK_ISNULL==OP_IsNull );'), (77798, 1, u'+      assert( TK_NOTNULL==OP_NotNull );'), (77812, 1, u'+        assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77831, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (77840, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77855, 1, u'+        assert( nFarg>=2 );'), (77879, 1, u'+          assert( nFarg==1 );'), (77880, 1, u'+          assert( pFarg->a[0].pExpr!=0 );'), (77883, 1, u'+            assert( SQLITE_FUNC_LENGTH==OPFLAG_LENGTHARG );'), (77884, 1, u'+            assert( SQLITE_FUNC_TYPEOF==OPFLAG_TYPEOFARG );'), (78027, 1, u'+      assert( pExpr->iTable==0 || pExpr->iTable==1 );'), (78028, 1, u'+      assert( pExpr->iColumn>=-1 && pExpr->iColumn<pTab->nCol );'), (78029, 1, u'+      assert( pTab->iPKey<0 || pExpr->iColumn!=pTab->iPKey );'), (78030, 1, u'+      assert( p1>=0 && p1<(pTab->nCol*2+2) );'), (78073, 1, u'+    default: assert( op==TK_CASE ); {'), (78086, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList );'), (78087, 1, u'+      assert((pExpr->x.pList->nExpr % 2) == 0);'), (78088, 1, u'+      assert(pExpr->x.pList->nExpr > 0);'), (78112, 1, u'+          assert( pTest!=0 );'), (78134, 1, u'+      assert( db->mallocFailed || pParse->nErr>0'), (78141, 1, u'+      assert( pExpr->affinity==OE_Rollback'), (78154, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (78201, 1, u'+  assert( target>0 && target<=pParse->nMem );'), (78206, 1, u'+    assert( pParse->pVdbe || pParse->db->mallocFailed );'), (78230, 1, u'+  assert( target>0 );'), (78604, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (78621, 1, u'+    assert( r2==r1 );'), (78671, 1, u'+  assert( pList!=0 );'), (78672, 1, u'+  assert( target>0 );'), (78673, 1, u'+  assert( pParse->pVdbe!=0 );  /* Never gets this far otherwise */'), (78711, 1, u'+  assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (78763, 1, u'+  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (78795, 1, u'+      assert( TK_LT==OP_Lt );'), (78796, 1, u'+      assert( TK_LE==OP_Le );'), (78797, 1, u'+      assert( TK_GT==OP_Gt );'), (78798, 1, u'+      assert( TK_GE==OP_Ge );'), (78799, 1, u'+      assert( TK_EQ==OP_Eq );'), (78800, 1, u'+      assert( TK_NE==OP_Ne );'), (78831, 1, u'+      assert( TK_ISNULL==OP_IsNull );'), (78832, 1, u'+      assert( TK_NOTNULL==OP_NotNull );'), (78883, 1, u'+  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (78909, 1, u'+  assert( pExpr->op!=TK_ISNULL || op==OP_NotNull );'), (78910, 1, u'+  assert( pExpr->op!=TK_NOTNULL || op==OP_IsNull );'), (78911, 1, u'+  assert( pExpr->op!=TK_NE || op==OP_Eq );'), (78912, 1, u'+  assert( pExpr->op!=TK_EQ || op==OP_Ne );'), (78913, 1, u'+  assert( pExpr->op!=TK_LT || op==OP_Ge );'), (78914, 1, u'+  assert( pExpr->op!=TK_LE || op==OP_Gt );'), (78915, 1, u'+  assert( pExpr->op!=TK_GT || op==OP_Le );'), (78916, 1, u'+  assert( pExpr->op!=TK_GE || op==OP_Lt );'), (79032, 1, u'+  assert( !ExprHasAnyProperty(pA, EP_TokenOnly|EP_Reduced) );'), (79033, 1, u'+  assert( !ExprHasAnyProperty(pB, EP_TokenOnly|EP_Reduced) );'), (79136, 1, u'+  assert( pExpr->op==TK_AGG_FUNCTION );'), (79202, 1, u'+          assert( !ExprHasAnyProperty(pExpr, EP_TokenOnly|EP_Reduced) );'), (79280, 1, u'+            assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (79284, 1, u'+            assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (79297, 1, u'+        assert( !ExprHasAnyProperty(pExpr, EP_TokenOnly|EP_Reduced) );'), (79330, 1, u'+  assert( pNC->pSrcList!=0 );'), (79390, 1, u'+    assert( !usedAsColumnCache(pParse, i, i+n-1) );'), (79492, 1, u'+      assert( len>0 );'), (79614, 1, u'+      assert( len>0 );'), (79757, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (79759, 1, u'+  assert( iDb>=0 );'), (79765, 1, u'+    assert( iTrigDb==iDb || iTrigDb==1 );'), (79829, 1, u'+  assert( pSrc->nSrc==1 );'), (79830, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (80052, 1, u'+  assert( pNew );'), (80054, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (80061, 1, u'+  assert( pTab );'), (80172, 1, u'+  assert( pParse->pNewTable==0 );'), (80173, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (80194, 1, u'+  assert( pTab->addColOffset>0 );'), (80209, 1, u'+  assert( pNew->nCol>0 );'), (80211, 1, u'+  assert( nAlloc>=pNew->nCol && nAlloc%8==0 && nAlloc-pNew->nCol<8 );'), (80403, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (80404, 1, u'+  assert( sqlite3VdbeDb(v)==db );'), (80569, 1, u'+    assert( p->nSample - iMin - 1 >= 0 );'), (80589, 1, u'+      assert( i<p->nSample );'), (80640, 1, u'+  assert( p!=0 );'), (80723, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (80725, 1, u'+  assert( iDb>=0 );'), (80726, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (80756, 1, u'+    assert( iDb==sqlite3SchemaToIndex(db, pIdx->pSchema) );'), (80817, 1, u'+      assert( pIdx->azColl!=0 );'), (80818, 1, u'+      assert( pIdx->azColl[i]!=0 );'), (80972, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (80989, 1, u'+  assert( pTab!=0 );'), (80990, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (81027, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (81032, 1, u'+  assert( pName2!=0 || pName1==0 );'), (81102, 1, u'+  assert( argc==3 );'), (81177, 1, u'+  assert( db->lookaside.bEnabled==0 );'), (81202, 1, u'+    assert( pIdx->nSample==0 );'), (81240, 1, u'+    assert( idx<pIdx->nSample );'), (81266, 1, u'+      default: assert( eType==SQLITE_TEXT || eType==SQLITE_BLOB ); {'), (81318, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (81319, 1, u'+  assert( db->aDb[iDb].pBt!=0 );'), (81322, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (81474, 1, u'+    assert( z && zName );'), (81508, 1, u'+  assert( pVfs );'), (81582, 1, u'+    assert( iDb>=2 );'), (81720, 1, u'+  assert( v || db->mallocFailed );'), (81723, 1, u'+    assert( pFunc->nArg==-1 || (pFunc->nArg&0xff)==pFunc->nArg );'), (81803, 1, u'+  assert( db->nDb>iDb );'), (82085, 1, u'+  assert( pExpr->op==TK_COLUMN || pExpr->op==TK_TRIGGER );'), (82089, 1, u'+    assert( pTabList );'), (82101, 1, u'+    assert( iCol<pTab->nCol );'), (82104, 1, u'+    assert( pTab->iPKey<pTab->nCol );'), (82109, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (82162, 1, u'+  assert( pParse );'), (82250, 1, u'+  assert( iDb>=0 );'), (82284, 1, u'+  assert( pVdbe!=0 ); /* sqlite3GetVdbe cannot fail: VDBE already allocated */'), (82311, 1, u'+  assert( pParse->pToplevel==0 );'), (82321, 1, u'+  assert( !pParse->isMultiWrite'), (82322, 1, u'+       || sqlite3VdbeAssertMayAbort(v, pParse->mayAbort));'), (82341, 1, u'+          assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (82381, 1, u'+    assert( pParse->iCacheLevel==0 );  /* Disables and re-enables match */'), (82420, 1, u'+  assert( pParse->nested<10 );  /* Nesting should only be of limited depth */'), (82453, 1, u'+  assert( zName!=0 );'), (82456, 1, u'+  assert( zDatabase!=0 || sqlite3BtreeHoldsAllMutexes(db) );'), (82460, 1, u'+    assert( sqlite3SchemaMutexHeld(db, j, 0) );'), (82519, 1, u'+  assert( p->pSchema==0 || p->zDatabase==0 );'), (82546, 1, u'+  assert( zDb!=0 || sqlite3BtreeHoldsAllMutexes(db) );'), (82550, 1, u'+    assert( pSchema );'), (82552, 1, u'+    assert( sqlite3SchemaMutexHeld(db, j, 0) );'), (82581, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (82640, 1, u'+  assert( iDb<db->nDb );'), (82644, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (82645, 1, u'+  assert( pDb->pSchema!=0 );'), (82654, 1, u'+    assert( pDb->pSchema!=0 );'), (82693, 1, u'+  assert( pTable!=0 );'), (82725, 1, u'+  assert( !pTable || pTable->nRef>0 );'), (82740, 1, u'+    assert( pIndex->pSchema==pTable->pSchema );'), (82746, 1, u'+      assert( db==0 || sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) );'), (82747, 1, u'+      assert( pOld==pIndex || pOld==0 );'), (82770, 1, u'+  assert( nLookaside==0 || nLookaside==db->lookaside.nOut );'), (82781, 1, u'+  assert( db!=0 );'), (82782, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (82783, 1, u'+  assert( zTabName );'), (82784, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (82906, 1, u'+    assert( db->init.iDb==0 || db->init.busy );'), (82997, 1, u'+  assert( (isTemp & 1)==isTemp );'), (83040, 1, u'+        assert( !db->init.busy );'), (83063, 1, u'+  assert( pParse->pNewTable==0 );'), (83072, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (83302, 1, u'+  assert( pCol->zType==0 );'), (83400, 1, u'+    assert( autoInc==0 || autoInc==1 );'), (83467, 1, u'+      assert( pIdx->nColumn==1 );'), (83532, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (83639, 1, u'+    assert( pCol->affinity-SQLITE_AFF_TEXT >= 0 );'), (83640, 1, u'+    assert( pCol->affinity-SQLITE_AFF_TEXT < ArraySize(azType) );'), (83649, 1, u'+    assert( pCol->affinity==SQLITE_AFF_NONE'), (83653, 1, u'+    assert( k<=n );'), (83695, 1, u'+  assert( !db->init.busy || !pSelect );'), (83786, 1, u'+      assert(pParse->nTab==1);'), (83796, 1, u'+        assert( p->aCol==0 );'), (83840, 1, u'+      assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (83861, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (83865, 1, u'+      assert( p==pOld );  /* Malloc must have failed inside HashInsert() */'), (83876, 1, u'+      assert( !pSelect && pCons && pEnd );'), (83977, 1, u'+  assert( pTable );'), (84011, 1, u'+  assert( pTable->nCol>=0 );'), (84020, 1, u'+  assert( pTable->pSelect );'), (84039, 1, u'+      assert( pTable->aCol==0 );'), (84045, 1, u'+      assert( sqlite3SchemaMutexHeld(db, 0, pTable->pSchema) );'), (84066, 1, u'+  assert( sqlite3SchemaMutexHeld(db, idx, 0) );'), (84105, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (84195, 1, u'+      assert( pIdx->pSchema==pTab->pSchema );'), (84204, 1, u'+      assert( iDb>=0 && iDb<pParse->db->nDb );'), (84246, 1, u'+  assert( v!=0 );'), (84261, 1, u'+    assert( pTrigger->pSchema==pTab->pSchema ||'), (84319, 1, u'+  assert( pParse->nErr==0 );'), (84320, 1, u'+  assert( pName->nSrc==1 );'), (84330, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (84441, 1, u'+  assert( pTo!=0 );'), (84512, 1, u'+  assert( sqlite3SchemaMutexHeld(db, 0, p->pSchema) );'), (84521, 1, u'+    assert( pNextTo->pPrevTo==0 );'), (84550, 1, u'+  assert( isDeferred==0 || isDeferred==1 ); /* EV: R-30323-21917 */'), (84687, 1, u'+  assert( pStart==0 || pEnd!=0 ); /* pEnd must be non-NULL if pStart is */'), (84688, 1, u'+  assert( pParse->nErr==0 );      /* Never called with prior errors */'), (84705, 1, u'+    assert( pName1 && pName2 );'), (84708, 1, u'+    assert( pName && pName->z );'), (84728, 1, u'+      assert(0);'), (84731, 1, u'+    assert( db->mallocFailed==0 || pTab==0 );'), (84733, 1, u'+    assert( db->aDb[iDb].pSchema==pTab->pSchema );'), (84735, 1, u'+    assert( pName==0 );'), (84736, 1, u'+    assert( pStart==0 );'), (84743, 1, u'+  assert( pTab!=0 );'), (84744, 1, u'+  assert( pParse->nErr==0 );'), (84779, 1, u'+    assert( pName->z!=0 );'), (84793, 1, u'+        assert( !db->init.busy );'), (84843, 1, u'+      assert( pExpr->op==TK_COLLATE );'), (84869, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pIndex->aiRowEst) );'), (84870, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pIndex->azColl) );'), (84881, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (84919, 1, u'+      assert( pListItem->pExpr->op==TK_COLLATE );'), (84922, 1, u'+      assert( nExtra>=nColl );'), (84965, 1, u'+      assert( pIdx->onError!=OE_None );'), (84966, 1, u'+      assert( pIdx->autoIndex );'), (84967, 1, u'+      assert( pIndex->onError!=OE_None );'), (85005, 1, u'+    assert( sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) );'), (85010, 1, u'+      assert( p==pIndex );  /* Malloc must have failed */'), (85053, 1, u'+      assert( pEnd!=0 );'), (85146, 1, u'+  assert( a!=0 );'), (85169, 1, u'+  assert( pParse->nErr==0 );   /* Never called with prior errors */'), (85173, 1, u'+  assert( pName->nSrc==1 );'), (85350, 1, u'+  assert( iStart>=0 );'), (85351, 1, u'+  assert( nExtra>=1 );'), (85352, 1, u'+  assert( pSrc!=0 );'), (85353, 1, u'+  assert( iStart<=pSrc->nSrc );'), (85363, 1, u'+      assert( db->mallocFailed );'), (85430, 1, u'+  assert( pDatabase==0 || pTable!=0 );  /* Cannot have C without B */'), (85461, 1, u'+  assert(pList || pParse->db->mallocFailed );'), (85532, 1, u'+  assert( pAlias!=0 );'), (85542, 1, u'+  assert( p==0 );'), (85554, 1, u'+  assert( pIndexedBy!=0 );'), (85557, 1, u'+    assert( pItem->notIndexed==0 && pItem->zIndex==0 );'), (85586, 1, u'+    assert( p->a || p->nSrc==0 );'), (85602, 1, u'+  assert( pParse!=0 );'), (85604, 1, u'+  assert( db!=0 );'), (85626, 1, u'+  assert( pParse!=0 );'), (85627, 1, u'+  assert( pParse->db!=0 );'), (85643, 1, u'+  assert( pParse!=0 );'), (85644, 1, u'+  assert( pParse->db!=0 );'), (85664, 1, u'+    assert( !SAVEPOINT_BEGIN && SAVEPOINT_RELEASE==1 && SAVEPOINT_ROLLBACK==2 );'), (85698, 1, u'+    assert( db->aDb[1].pSchema );'), (85750, 1, u'+    assert( iDb<db->nDb );'), (85751, 1, u'+    assert( db->aDb[iDb].pBt!=0 || iDb==1 );'), (85752, 1, u'+    assert( iDb<SQLITE_MAX_ATTACHED+2 );'), (85753, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (85846, 1, u'+  assert( (errCode&0xff)==SQLITE_CONSTRAINT );'), (85860, 1, u'+  assert( zColl!=0 );'), (85863, 1, u'+    assert( z!=0 );'), (85903, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );  /* Needed for schema access */'), (85905, 1, u'+    assert( pDb!=0 );'), (85949, 1, u'+    assert( pName1->z );'), (86002, 1, u'+    assert( &pKey->aSortOrder[nCol]==&(((u8 *)pKey)[nBytes]) );'), (86005, 1, u'+      assert( zColl );'), (86043, 1, u'+  assert( !db->xCollNeeded || !db->xCollNeeded16 );'), (86124, 1, u'+  assert( !p || p->xCmp );'), (86150, 1, u'+    assert( p==pColl );'), (86197, 1, u'+      assert( pDel==0 || pDel==pColl );'), (86235, 1, u'+  assert( SQLITE_UTF8==1 && SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (86236, 1, u'+  assert( enc>=SQLITE_UTF8 && enc<=SQLITE_UTF16BE );'), (86333, 1, u'+    assert( pOther!=pDef && pOther->pNext!=pDef );'), (86377, 1, u'+  assert( nArg>=(-2) );'), (86378, 1, u'+  assert( nArg>=(-1) || createFlag==0 );'), (86379, 1, u'+  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (86533, 1, u'+  assert( pItem && pSrc->nSrc==1 );'), (86604, 1, u'+    assert( pFrom->nSrc==1 );'), (86607, 1, u'+    assert( pFrom->a[0].pOn==0 );'), (86608, 1, u'+    assert( pFrom->a[0].pUsing==0 );'), (86657, 1, u'+    assert( pOffset == 0 );'), (86750, 1, u'+  assert( pTabList->nSrc==1 );'), (86785, 1, u'+  assert( iDb<db->nDb );'), (86788, 1, u'+  assert( rcauth==SQLITE_OK || rcauth==SQLITE_DENY || rcauth==SQLITE_IGNORE );'), (86792, 1, u'+  assert(!isView || pTrigger);'), (86796, 1, u'+  assert( pTabList->nSrc==1 );'), (86851, 1, u'+    assert( !isView );'), (86855, 1, u'+      assert( pIdx->pSchema==pTab->pSchema );'), (86992, 1, u'+  assert( v );'), (87204, 1, u'+  assert( argc>1 );'), (87207, 1, u'+  assert( pColl );'), (87208, 1, u'+  assert( mask==-1 || mask==0 );'), (87252, 1, u'+  assert( argc==1 );'), (87286, 1, u'+  assert( argc==1 );'), (87397, 1, u'+  assert( argc==3 || argc==2 );'), (87409, 1, u'+    assert( len==sqlite3_value_bytes(argv[0]) );'), (87448, 1, u'+  assert( p1>=0 && p2>=0 );'), (87475, 1, u'+  assert( argc==1 || argc==2 );'), (87515, 1, u'+  assert( nByte>0 );'), (87541, 1, u'+  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (87560, 1, u'+  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (87618, 1, u'+  assert( argc==1 );'), (87771, 1, u'+        assert( esc==0 );         /* This is GLOB, not LIKE */'), (87772, 1, u"+        assert( matchSet<0x80 );  /* '[' is a single-byte character */"), (87801, 1, u'+      assert( esc==0 );    /* This only occurs for GLOB, not LIKE */'), (87900, 1, u'+  assert( zB==sqlite3_value_text(argv[0]) );  /* Encoding did not change */'), (88000, 1, u'+  assert( argc==1 );'), (88024, 1, u'+  assert( argc==1 );'), (88053, 1, u'+  assert( argc==1 );'), (88076, 1, u'+      assert( zBlob==sqlite3_value_blob(argv[0]) ); /* No encoding change */'), (88117, 1, u'+      assert( sqlite3_value_type(argv[0])==SQLITE_NULL );'), (88192, 1, u'+  assert( argc==1 );'), (88196, 1, u'+  assert( pBlob==sqlite3_value_blob(argv[0]) );  /* No encoding change */'), (88219, 1, u'+  assert( argc==1 );'), (88253, 1, u'+  assert( argc==3 );'), (88258, 1, u'+  assert( zStr==sqlite3_value_text(argv[0]) );  /* No encoding change */'), (88261, 1, u'+    assert( sqlite3_value_type(argv[1])==SQLITE_NULL'), (88266, 1, u'+    assert( sqlite3_value_type(argv[1])!=SQLITE_NULL );'), (88271, 1, u'+  assert( zPattern==sqlite3_value_text(argv[1]) );  /* No encoding change */'), (88275, 1, u'+  assert( zRep==sqlite3_value_text(argv[2]) );'), (88277, 1, u'+  assert( nOut<SQLITE_MAX_LENGTH );'), (88309, 1, u'+  assert( j+nStr-i+1==nOut );'), (88312, 1, u'+  assert( j<=nOut );'), (88341, 1, u'+  assert( zIn==sqlite3_value_text(argv[0]) );'), (88431, 1, u'+  assert( argc==1 );'), (88511, 1, u'+  assert( argc==1 );'), (88580, 1, u'+  assert( argc==1 || p==0 || p->n>0x7fffffff'), (88653, 1, u'+  assert( argc==1 || argc==2 );'), (88699, 1, u'+  assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (88753, 1, u'+  assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (88766, 1, u'+  assert( (char*)&likeInfoAlt == (char*)&likeInfoAlt.matchAll );'), (88767, 1, u'+  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );'), (88768, 1, u'+  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );'), (89072, 1, u'+  assert( ppIdx && *ppIdx==0 );'), (89073, 1, u'+  assert( !paiCol || *paiCol==0 );'), (89074, 1, u'+  assert( pParse );'), (89097, 1, u'+    assert( nCol>1 );'), (89281, 1, u'+          assert( aiCol[i]!=pTab->iPKey );'), (89306, 1, u'+    assert( nIncr==1 );'), (89367, 1, u'+  assert( !pIdx || pIdx->pTable==pTab );'), (89409, 1, u'+    assert( iCol>=0 );'), (89523, 1, u'+    assert( v );                  /* VDBE has already been allocated */'), (89591, 1, u'+  assert( (regOld==0)!=(regNew==0) );'), (89620, 1, u'+      assert( isIgnoreErrors==0 || (regOld!=0 && regNew==0) );'), (89640, 1, u'+    assert( pFKey->nCol==1 || (aiFree && pIdx) );'), (89693, 1, u'+      assert( regOld==0 && regNew!=0 );'), (89703, 1, u'+    assert( aiCol || pFKey->nCol==1 );'), (89881, 1, u'+    assert( aiCol || pFKey->nCol==1 );'), (89892, 1, u'+      assert( iFromCol>=0 );'), (90011, 1, u'+    assert( pStep!=0 );'), (90071, 1, u'+  assert( db==0 || sqlite3SchemaMutexHeld(db, 0, pTab->pSchema) );'), (90091, 1, u'+    assert( pFKey->isDeferred==0 || pFKey->isDeferred==1 );'), (90133, 1, u'+  assert( !IsVirtual(pTab) );'), (90135, 1, u'+  assert( opcode==OP_OpenWrite || opcode==OP_OpenRead );'), (90251, 1, u'+    assert( pOp!=0 );'), (90266, 1, u'+      assert( pOp->p4.pVtab!=0 );'), (90267, 1, u'+      assert( pOp->p4type==P4_VTAB );'), (90338, 1, u'+  assert( pParse->pTriggerTab==0 );'), (90339, 1, u'+  assert( pParse==sqlite3ParseToplevel(pParse) );'), (90341, 1, u'+  assert( v );   /* We failed long ago if this is not so */'), (90345, 1, u'+    assert( sqlite3SchemaMutexHeld(db, 0, pDb->pSchema) );'), (90389, 1, u'+  assert( v );'), (90397, 1, u'+    assert( sqlite3SchemaMutexHeld(db, 0, pDb->pSchema) );'), (90506, 1, u'+  assert( pParse->nErr==0 || rc );'), (90684, 1, u'+  assert( pTabList->nSrc==1 );'), (90692, 1, u'+  assert( iDb<db->nDb );'), (90714, 1, u'+  assert( (pTrigger && tmask) || (pTrigger==0 && tmask==0) );'), (90750, 1, u'+    assert( !pTrigger );'), (90751, 1, u'+    assert( pList==0 );'), (90774, 1, u'+    assert( pSelect->pEList );'), (90776, 1, u'+    assert( dest.nSdst==nColumn );'), (90830, 1, u'+    assert( useTempTable==0 );'), (90983, 1, u'+        assert( pSelect==0 );  /* Otherwise useTempTable is true */'), (90995, 1, u'+    assert( !IsVirtual(pTab) );'), (91012, 1, u'+        assert( pSelect==0 ); /* Otherwise useTempTable is true */'), (91100, 1, u'+          assert( IsVirtual(pTab) );'), (91323, 1, u'+  assert( v!=0 );'), (91324, 1, u'+  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (91344, 1, u'+    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (91364, 1, u'+        assert( onError==OE_Replace );'), (91469, 1, u'+        assert( seenReplace==0 );'), (91530, 1, u'+    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (91559, 1, u'+        assert( seenReplace==0 );'), (91565, 1, u'+        assert( onError==OE_Replace );'), (91614, 1, u'+  assert( v!=0 );'), (91615, 1, u'+  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (91669, 1, u'+  assert( v!=0 );'), (91673, 1, u'+    assert( pIdx->pSchema==pTab->pSchema );'), (91723, 1, u'+  assert( pDest && pSrc );'), (91724, 1, u'+  assert( pDest->pTable!=pSrc->pTable );'), (91810, 1, u'+  assert(pSelect->pSrc);   /* allocated even if there is no FROM clause */'), (91831, 1, u'+  assert( pSelect->pOffset==0 );  /* Must be so if pLimit==0 */'), (91839, 1, u'+  assert( pEList!=0 );'), (91843, 1, u'+  assert( pEList->a[0].pExpr );'), (91970, 1, u'+    assert( (pDest->tabFlags & TF_Autoincrement)==0 );'), (91981, 1, u'+    assert( pSrcIdx );'), (92068, 1, u'+    assert( rc==SQLITE_OK || pStmt==0 );'), (92098, 1, u'+            assert( azCols[i]!=0 );'), (92152, 1, u'+  assert( (rc&db->errMask)==rc );'), (93211, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (93310, 1, u'+    assert( (rc&0xff)==rc );'), (93590, 1, u'+      assert( v!=0 );  /* Already allocated by sqlite3Pragma() */'), (93635, 1, u'+                      assert( action==OE_None ); break;'), (93654, 1, u'+  assert( PAGER_JOURNALMODE_DELETE==0 );'), (93655, 1, u'+  assert( PAGER_JOURNALMODE_PERSIST==1 );'), (93656, 1, u'+  assert( PAGER_JOURNALMODE_OFF==2 );'), (93657, 1, u'+  assert( PAGER_JOURNALMODE_TRUNCATE==3 );'), (93658, 1, u'+  assert( PAGER_JOURNALMODE_MEMORY==4 );'), (93659, 1, u'+  assert( PAGER_JOURNALMODE_WAL==5 );'), (93660, 1, u'+  assert( eMode>=0 && eMode<=ArraySize(azModeName) );'), (93724, 1, u'+  assert( pId2 );'), (93804, 1, u'+      assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (93823, 1, u'+    assert( pBt!=0 );'), (93849, 1, u'+    assert( pBt!=0 );'), (93924, 1, u'+        assert(pDb==&db->aDb[0]);'), (93935, 1, u'+    assert(eMode==PAGER_LOCKINGMODE_NORMAL||eMode==PAGER_LOCKINGMODE_EXCLUSIVE);'), (94024, 1, u'+    assert( pBt!=0 );'), (94038, 1, u'+      assert( eAuto>=0 && eAuto<=2 );'), (94113, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (94139, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (94428, 1, u'+        assert( pTab->nCol>cnum );'), (94473, 1, u'+      assert( db->aDb[i].zName!=0 );'), (94614, 1, u'+        assert( pParent!=0 );'), (94618, 1, u'+        assert( x==0 );'), (94622, 1, u'+          assert( iKey>=0 && iKey<pTab->nCol );'), (94718, 1, u'+    assert( iDb>=0 );'), (94719, 1, u'+    assert( iDb==0 || pId2->z );'), (94757, 1, u'+      assert( sqlite3SchemaMutexHeld(db, i, 0) );'), (94908, 1, u'+      assert( encnames[SQLITE_UTF8].enc==SQLITE_UTF8 );'), (94909, 1, u'+      assert( encnames[SQLITE_UTF16LE].enc==SQLITE_UTF16LE );'), (94910, 1, u'+      assert( encnames[SQLITE_UTF16BE].enc==SQLITE_UTF16BE );'), (95259, 1, u'+  assert( argc==3 );'), (95261, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95268, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (95282, 1, u'+    assert( db->init.busy );'), (95288, 1, u'+    assert( (rc&0xFF)==(rcp&0xFF) );'), (95292, 1, u'+        assert( iDb==1 );'), (95377, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (95378, 1, u'+  assert( db->aDb[iDb].pSchema );'), (95379, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95380, 1, u'+  assert( iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (95525, 1, u'+  assert( db->init.busy );'), (95598, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95638, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95661, 1, u'+  assert( pParse->checkSchema );'), (95662, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95684, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (95717, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95724, 1, u'+    assert( i>=0 && i<db->nDb );'), (95753, 1, u'+  assert( ppStmt && *ppStmt==0 );'), (95754, 1, u'+  assert( !db->mallocFailed );'), (95755, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95783, 1, u'+      assert( sqlite3BtreeHoldsMutex(pBt) );'), (95819, 1, u'+  assert( 1==(int)pParse->nQueryLoop );'), (95865, 1, u'+    assert(!(*ppStmt));'), (95888, 1, u'+  assert( (rc&db->errMask)==rc );'), (95901, 1, u'+  assert( ppStmt!=0 );'), (95915, 1, u'+  assert( rc==SQLITE_OK || *ppStmt==0 );'), (95933, 1, u'+  assert( sqlite3_mutex_held(sqlite3VdbeDb(p)->mutex) );'), (95935, 1, u'+  assert( zSql!=0 );  /* Reprepare only called for prepare_v2() statements */'), (95937, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95943, 1, u'+    assert( pNew==0 );'), (95946, 1, u'+    assert( pNew!=0 );'), (95973, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (95985, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (96010, 1, u'+  assert( ppStmt );'), (96053, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (96065, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (96137, 1, u'+  assert( db->mallocFailed || !pOffset || pLimit ); /* OFFSET implies LIMIT */'), (96139, 1, u'+    assert( db->mallocFailed );'), (96157, 1, u'+  assert( pOffset==0 || pLimit!=0 );'), (96166, 1, u'+    assert( pNew->pSrc!=0 || pParse->nErr>0 );'), (96168, 1, u'+  assert( pNew!=&standin );'), (96242, 1, u'+    assert( pB!=0 );'), (96287, 1, u'+  assert( (piTab==0)==(piCol==0) );  /* Both or neither are NULL */'), (96327, 1, u'+  assert( iLeft<iRight );'), (96328, 1, u'+  assert( pSrc->nSrc>iRight );'), (96329, 1, u'+  assert( pSrc->a[iLeft].pTab );'), (96330, 1, u'+  assert( pSrc->a[iRight].pTab );'), (96338, 1, u'+    assert( !ExprHasAnyProperty(pEq, EP_TokenOnly|EP_Reduced) );'), (96374, 1, u'+    assert( !ExprHasAnyProperty(p, EP_TokenOnly|EP_Reduced) );'), (96641, 1, u'+  assert( v );'), (96643, 1, u'+  assert( pEList!=0 );'), (96661, 1, u'+    assert( pDest->nSdst==nResultCol );'), (96682, 1, u'+    assert( pEList!=0 );'), (96683, 1, u'+    assert( pEList->nExpr==nColumn );'), (96717, 1, u'+        assert( sqlite3VdbeCurrentAddr(v)==iJump );'), (96728, 1, u'+        assert( pDistinct->eTnctType==WHERE_DISTINCT_UNORDERED );'), (96789, 1, u'+      assert( nColumn==1 );'), (96821, 1, u'+      assert( nColumn==1 );'), (96861, 1, u'+      assert( eDest==SRT_Discard );'), (96990, 1, u'+  assert( op==TK_UNION || op==TK_EXCEPT || op==TK_INTERSECT || op==TK_ALL );'), (97066, 1, u'+      assert( nColumn==1 );'), (97074, 1, u'+      assert( nColumn==1 );'), (97082, 1, u'+      assert( eDest==SRT_Output || eDest==SRT_Coroutine );'), (97086, 1, u'+        assert( regRow!=pDest->iSdst+i );'), (97194, 1, u'+      assert( pTab && pExpr->pTab==pTab );'), (97214, 1, u'+        assert( !pS );'), (97216, 1, u'+        assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (97241, 1, u'+      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (97252, 1, u'+    assert( pzOriginTab && pzOriginCol );'), (97340, 1, u'+      assert( j<pTabList->nSrc );'), (97343, 1, u'+      assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (97418, 1, u'+        assert( pColExpr!=0 );'), (97428, 1, u'+        assert( !ExprHasProperty(pColExpr, EP_IntValue) );'), (97497, 1, u'+  assert( pSelect!=0 );'), (97498, 1, u'+  assert( (pSelect->selFlags & SF_Resolved)!=0 );'), (97499, 1, u'+  assert( nCol==pSelect->pEList->nExpr || db->mallocFailed );'), (97538, 1, u'+  assert( db->lookaside.bEnabled==0 );'), (97602, 1, u'+  assert( p->pOffset==0 || p->pLimit!=0 );'), (97655, 1, u'+  assert( iCol>=0 );'), (97722, 1, u'+  assert( p && p->pPrior );  /* Calling function guarantees this much */'), (97725, 1, u'+  assert( pPrior->pRightmost!=pPrior );'), (97726, 1, u'+  assert( pPrior->pRightmost==p->pRightmost );'), (97742, 1, u'+  assert( v!=0 );  /* The VDBE already created by calling function */'), (97747, 1, u'+    assert( p->pEList );'), (97756, 1, u'+  assert( p->pEList && pPrior->pEList );'), (97780, 1, u'+      assert( !pPrior->pLimit );'), (97834, 1, u'+        assert( p->pLimit==0 );      /* Not allowed on leftward elements */'), (97835, 1, u'+        assert( p->pOffset==0 );     /* Not allowed on leftward elements */'), (97842, 1, u'+        assert( p->pOrderBy==0 );'), (97844, 1, u'+        assert( p->addrOpenEphm[0] == -1 );'), (97847, 1, u'+        assert( p->pEList );'), (97852, 1, u'+      assert( !pPrior->pOrderBy );'), (97865, 1, u'+        assert( p->op==TK_UNION );'), (97893, 1, u'+      assert( unionTab==dest.iSDParm || dest.eDest!=priorOp );'), (97896, 1, u'+        assert( p->pEList );'), (97916, 1, u'+    default: assert( p->op==TK_INTERSECT ); {'), (97930, 1, u'+      assert( p->pOrderBy==0 );'), (97933, 1, u'+      assert( p->addrOpenEphm[0] == -1 );'), (97936, 1, u'+      assert( p->pEList );'), (97950, 1, u'+      assert( p->addrOpenEphm[1] == -1 );'), (97971, 1, u'+      assert( p->pEList );'), (98014, 1, u'+    assert( p->pRightmost==p );'), (98040, 1, u'+          assert( pLoop->addrOpenEphm[1]<0 );'), (98140, 1, u'+      assert( pIn->nSdst==1 );'), (98166, 1, u'+      assert( pIn->nSdst==1 );'), (98195, 1, u'+      assert( pDest->eDest==SRT_Output );'), (98347, 1, u'+  assert( p->pOrderBy!=0 );'), (98348, 1, u'+  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */'), (98351, 1, u'+  assert( v!=0 );       /* Already thrown the error if VDBE alloc failed */'), (98360, 1, u'+  assert( pPrior->pOrderBy==0 );'), (98362, 1, u'+  assert( pOrderBy );'), (98373, 1, u'+        assert( pItem->iOrderByCol>0 );'), (98398, 1, u'+      assert( pItem->iOrderByCol>0  && pItem->iOrderByCol<=p->pEList->nExpr );'), (98439, 1, u'+    assert( nOrderBy>=nExpr || db->mallocFailed );'), (98679, 1, u'+      assert( pEList!=0 && pExpr->iColumn<pEList->nExpr );'), (98680, 1, u'+      assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (98725, 1, u'+  assert( pSrc );  /* Even for (SELECT 1) we have: pSrc!=0 but pSrc->nSrc==0 */'), (98878, 1, u'+  assert( p!=0 );'), (98879, 1, u'+  assert( p->pPrior==0 );  /* Unable to flatten compound queries */'), (98882, 1, u'+  assert( pSrc && iFrom>=0 && iFrom<pSrc->nSrc );'), (98886, 1, u'+  assert( pSub!=0 );'), (98890, 1, u'+  assert( pSubSrc );'), (98969, 1, u'+      assert( pSub->pSrc!=0 );'), (99114, 1, u'+      assert( pParent==p );  /* First time through the loop */'), (99117, 1, u'+      assert( pParent!=p );  /* 2nd and subsequent times through the loop */'), (99120, 1, u'+        assert( db->mallocFailed );'), (99183, 1, u'+      assert( pParent->pOrderBy==0 );'), (99195, 1, u'+      assert( pParent->pHaving==0 );'), (99201, 1, u'+      assert( pParent->pGroupBy==0 );'), (99257, 1, u'+    assert( pExpr->op==TK_AGG_FUNCTION );'), (99270, 1, u'+  assert( *ppMinMax==0 || (*ppMinMax)->nExpr==1 );'), (99289, 1, u'+  assert( !p->pGroupBy );'), (99298, 1, u'+  assert( pTab && !pTab->pSelect && pExpr );'), (99456, 1, u'+      assert( i==0 );'), (99463, 1, u'+      assert( pSel!=0 );'), (99464, 1, u'+      assert( pFrom->pTab==0 );'), (99478, 1, u'+      assert( pFrom->pTab==0 );'), (99492, 1, u'+        assert( pFrom->pSelect==0 );'), (99524, 1, u'+    assert( pE->op!=TK_DOT || pE->pRight!=0 );'), (99525, 1, u'+    assert( pE->op!=TK_DOT || (pE->pLeft!=0 && pE->pLeft->op==TK_ID) );'), (99543, 1, u'+    assert( (p->selFlags & SF_NestedFrom)==0'), (99550, 1, u'+      assert( pE->op!=TK_DOT || pRight!=0 );'), (99568, 1, u'+          assert( pE->pLeft!=0 );'), (99569, 1, u'+          assert( !ExprHasProperty(pE->pLeft, EP_IntValue) );'), (99596, 1, u'+            assert( zName );'), (99608, 1, u'+              assert(IsVirtual(pTab));'), (99743, 1, u'+  assert( p->selFlags & SF_Resolved );'), (99753, 1, u'+        assert( pSel );'), (99835, 1, u'+      assert( !ExprHasProperty(pE, EP_xIsSelect) );'), (99859, 1, u'+    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (99884, 1, u'+    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (99895, 1, u'+      assert( nArg==1 );'), (99902, 1, u'+      assert( pList!=0 );  /* pList!=0 if pF->pFunc has NEEDCOLL */'), (100063, 1, u'+    assert(pDest->eDest==SRT_Exists || pDest->eDest==SRT_Union ||'), (100079, 1, u'+  assert( pEList!=0 );'), (100183, 1, u'+      assert( pItem->addrFillSub==0 );'), (100282, 1, u'+    assert( sDistinct.isTnct );'), (100415, 1, u'+      assert( !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) );'), (100726, 1, u'+        assert( p->pGroupBy==0 );'), (100727, 1, u'+        assert( flag==0 );'), (100731, 1, u'+        assert( flag==0 || (pMinMax!=0 && pMinMax->nExpr==1) );'), (100753, 1, u'+        assert( pMinMax==0 || pMinMax->nExpr==1 );'), (101056, 1, u'+  assert( sizeof(res.azResult[0])>= sizeof(res.nData) );'), (101100, 1, u'+    assert( azResult!=0 );'), (101166, 1, u'+    assert( sqlite3SchemaMutexHeld(pParse->db, 0, pTmpSchema) );'), (101210, 1, u'+  assert( pName1!=0 );   /* pName1->z might be NULL, but not pName1 itself */'), (101211, 1, u'+  assert( pName2!=0 );'), (101212, 1, u'+  assert( op==TK_INSERT || op==TK_UPDATE || op==TK_DELETE );'), (101213, 1, u'+  assert( op>0 && op<0xff );'), (101259, 1, u'+  assert( pTableName->nSrc==1 );'), (101291, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (101297, 1, u'+      assert( !db->init.busy );'), (101361, 1, u'+  assert( pParse->pNewTrigger==0 );'), (101372, 1, u'+    assert( pParse->pNewTrigger==pTrigger );'), (101433, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (101441, 1, u'+      assert( pTab!=0 );'), (101449, 1, u'+  assert( !pParse->pNewTrigger );'), (101513, 1, u'+  assert(pEList == 0 || pSelect == 0);'), (101514, 1, u'+  assert(pEList != 0 || pSelect != 0 || db->mallocFailed);'), (101611, 1, u'+  assert( pName->nSrc==1 );'), (101615, 1, u'+  assert( zDb!=0 || sqlite3BtreeHoldsAllMutexes(db) );'), (101619, 1, u'+    assert( sqlite3SchemaMutexHeld(db, j, 0) );'), (101658, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (101660, 1, u'+  assert( pTable );'), (101661, 1, u'+  assert( pTable->pSchema==pTrigger->pSchema || iDb==1 );'), (101677, 1, u'+  assert( pTable!=0 );'), (101713, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (101766, 1, u'+  assert( pList==0 || IsVirtual(pTab)==0 );'), (101797, 1, u'+    assert( pSrc->nSrc>0 );'), (101798, 1, u'+    assert( pSrc->a!=0 );'), (101802, 1, u'+      assert( iDb<pParse->db->nDb );'), (101822, 1, u'+  assert( pParse->pTriggerTab && pParse->pToplevel );'), (101823, 1, u'+  assert( pStepList );'), (101824, 1, u'+  assert( v!=0 );'), (101847, 1, u'+    assert( pParse->cookieGoto==0 || pParse->cookieGoto==-1 );'), (101877, 1, u'+      default: assert( pStep->op==TK_SELECT ); {'), (101918, 1, u'+  assert( pFrom->zErrMsg==0 || pFrom->nErr );'), (101919, 1, u'+  assert( pTo->zErrMsg==0 || pTo->nErr );'), (101948, 1, u'+  assert( pTrigger->zName==0 || pTab==tableOfTrigger(pTrigger) );'), (101949, 1, u'+  assert( pTop->pVdbe );'), (102032, 1, u'+  assert( !pSubParse->pAinc       && !pSubParse->pZombieTab );'), (102033, 1, u'+  assert( !pSubParse->pTriggerPrg && !pSubParse->nMaxArg );'), (102054, 1, u'+  assert( pTrigger->zName==0 || pTab==tableOfTrigger(pTrigger) );'), (102090, 1, u'+  assert( pPrg || pParse->nErr || pParse->db->mallocFailed );'), (102164, 1, u'+  assert( op==TK_UPDATE || op==TK_INSERT || op==TK_DELETE );'), (102165, 1, u'+  assert( tr_tm==TRIGGER_BEFORE || tr_tm==TRIGGER_AFTER );'), (102166, 1, u'+  assert( (op==TK_UPDATE)==(pChanges!=0) );'), (102173, 1, u'+    assert( p->pSchema!=0 );'), (102174, 1, u'+    assert( p->pTabSchema!=0 );'), (102175, 1, u'+    assert( p->pSchema==p->pTabSchema'), (102226, 1, u'+  assert( isNew==1 || isNew==0 );'), (102306, 1, u'+  assert( pTab!=0 );'), (102312, 1, u'+    assert( i<pTab->nCol );'), (102382, 1, u'+  assert( pTabList->nSrc==1 );'), (102396, 1, u'+  assert( pTrigger || tmask==0 );'), (102605, 1, u'+      assert( aRegIdx );'), (102610, 1, u'+        assert( pParse->nTab>iCur+i+1 );'), (102633, 1, u'+  assert( chngRowid || pTrigger || hasFK || regOldRowid==regNewRowid );'), (102780, 1, u'+    assert( aRegIdx );'), (102875, 1, u'+  assert( pTab->iPKey<0 );'), (102889, 1, u'+  assert( v );'), (102968, 1, u'+  assert( rc!=SQLITE_ROW || (db->flags&SQLITE_CountRows) );'), (103076, 1, u'+    assert( strcmp(pDb->zName,"vacuum_db")==0 );'), (103215, 1, u'+    assert( 1==sqlite3BtreeIsInTrans(pTemp) );'), (103216, 1, u'+    assert( 1==sqlite3BtreeIsInTrans(pMain) );'), (103236, 1, u'+  assert( rc==SQLITE_OK );'), (103331, 1, u'+      assert( pDel==0 || pDel==pMod );'), (103391, 1, u'+  assert( IsVirtual(pTab) );'), (103403, 1, u'+  assert( db );'), (103404, 1, u'+  assert( pVTab->nRef>0 );'), (103405, 1, u'+  assert( db->magic==SQLITE_MAGIC_OPEN || db->magic==SQLITE_MAGIC_ZOMBIE );'), (103435, 1, u'+  assert( db==0 || sqlite3SchemaMutexHeld(db, 0, p->pSchema) );'), (103440, 1, u'+    assert( db2 );'), (103452, 1, u'+  assert( !db || pRet );'), (103467, 1, u'+  assert( IsVirtual(p) );'), (103468, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (103469, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (103506, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (103507, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (103589, 1, u'+  assert( 0==pTable->pIndex );'), (103593, 1, u'+  assert( iDb>=0 );'), (103700, 1, u'+    assert( sqlite3SchemaMutexHeld(db, 0, pSchema) );'), (103704, 1, u'+      assert( pTab==pOld );  /* Malloc must have failed inside HashInsert() */'), (103731, 1, u'+    assert(pArg->z < p->z);'), (103773, 1, u'+  assert( &db->pVtabCtx );'), (103774, 1, u'+  assert( xConstruct );'), (103834, 1, u"+            assert(zType[i-1]==' ');"), (103860, 1, u'+  assert( pTab );'), (103931, 1, u'+  assert( pTab && (pTab->tabFlags & TF_Virtual)!=0 && !pTab->pVTable );'), (103978, 1, u'+  assert( (pTab->tabFlags & TF_Virtual)!=0 );'), (104015, 1, u'+  assert( (rc&0xff)==rc );'), (104036, 1, u'+    assert( rc==SQLITE_OK );'), (104041, 1, u'+      assert( pTab->pVTable==p && p->pNext==0 );'), (104191, 1, u'+  assert( op==SAVEPOINT_RELEASE||op==SAVEPOINT_ROLLBACK||op==SAVEPOINT_BEGIN );'), (104192, 1, u'+  assert( iSavepoint>=0 );'), (104258, 1, u'+  assert( pVtab!=0 );'), (104259, 1, u'+  assert( pVtab->pModule!=0 );'), (104305, 1, u'+  assert( IsVirtual(pTab) );'), (104330, 1, u'+  assert( OE_Rollback==1 && OE_Abort==2 && OE_Fail==3 );'), (104331, 1, u'+  assert( OE_Ignore==4 && OE_Replace==5 );'), (104332, 1, u'+  assert( db->vtabOnConflict>=1 && db->vtabOnConflict<=5 );'), (104354, 1, u'+        assert( p->pTab==0 || (p->pTab->tabFlags & TF_Virtual)!=0 );'), (104825, 1, u'+  assert( pMaskSet->n<=(int)sizeof(Bitmask)*8 );'), (104843, 1, u'+  assert( pMaskSet->n < ArraySize(pMaskSet->ix) );'), (104923, 1, u'+  assert( TK_GT>TK_EQ && TK_GT<TK_GE );'), (104924, 1, u'+  assert( TK_LT>TK_EQ && TK_LT<TK_GE );'), (104925, 1, u'+  assert( TK_LE>TK_EQ && TK_LE<TK_GE );'), (104926, 1, u'+  assert( TK_GE==TK_EQ+4 );'), (104951, 1, u'+  assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );'), (104967, 1, u'+    assert( TK_LT==TK_GT+2 );'), (104968, 1, u'+    assert( TK_GE==TK_LE+2 );'), (104969, 1, u'+    assert( TK_GT>TK_EQ );'), (104970, 1, u'+    assert( TK_GT<TK_LE );'), (104971, 1, u'+    assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );'), (104981, 1, u'+  assert( allowedOp(op) );'), (104987, 1, u'+    assert( (WO_EQ<<(op-TK_EQ)) < 0x7fff );'), (104990, 1, u'+  assert( op!=TK_ISNULL || c==WO_ISNULL );'), (104991, 1, u'+  assert( op!=TK_IN || c==WO_IN );'), (104992, 1, u'+  assert( op!=TK_EQ || c==WO_EQ );'), (104993, 1, u'+  assert( op!=TK_LT || c==WO_LT );'), (104994, 1, u'+  assert( op!=TK_LE || c==WO_LE );'), (104995, 1, u'+  assert( op!=TK_GT || c==WO_GT );'), (104996, 1, u'+  assert( op!=TK_GE || c==WO_GE );'), (105042, 1, u'+  assert( iCur>=0 );'), (105069, 1, u'+              assert(pX->pLeft);'), (105091, 1, u'+            assert( pX->op==TK_COLUMN );'), (105172, 1, u'+  assert( pLeft->iColumn!=(-1) ); /* Because IPK never has AFF_TEXT */'), (105187, 1, u'+    assert( pRight->op==TK_VARIABLE || pRight->op==TK_REGISTER );'), (105367, 1, u'+  assert( (pTerm->wtFlags & (TERM_DYNAMIC|TERM_ORINFO|TERM_ANDINFO))==0 );'), (105368, 1, u'+  assert( pExpr->op==TK_OR );'), (105377, 1, u'+  assert( pOrWc->nTerm>=2 );'), (105387, 1, u'+      assert( (pOrTerm->wtFlags & (TERM_ANDINFO|TERM_ORINFO))==0 );'), (105406, 1, u'+            assert( pAndTerm->pExpr );'), (105476, 1, u'+        assert( pOrTerm->eOperator & WO_EQ );'), (105481, 1, u'+          assert( j==1 );'), (105491, 1, u'+          assert( pOrTerm->wtFlags & (TERM_COPIED|TERM_VIRTUAL) );'), (105501, 1, u'+        assert( j==1 );'), (105502, 1, u'+        assert( IsPowerOfTwo(chngToIN) );'), (105503, 1, u'+        assert( chngToIN==getMask(pMaskSet, iCursor) );'), (105512, 1, u'+        assert( pOrTerm->eOperator & WO_EQ );'), (105548, 1, u'+        assert( pOrTerm->eOperator & WO_EQ );'), (105549, 1, u'+        assert( pOrTerm->leftCursor==iCursor );'), (105550, 1, u'+        assert( pOrTerm->u.leftColumn==iColumn );'), (105555, 1, u'+      assert( pLeft!=0 );'), (105561, 1, u'+        assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (105620, 1, u'+  assert( pExpr->op!=TK_AS && pExpr->op!=TK_COLLATE );'), (105624, 1, u'+    assert( pExpr->pRight==0 );'), (105715, 1, u'+    assert( pList!=0 );'), (105716, 1, u'+    assert( pList->nExpr==2 );'), (105738, 1, u'+    assert( pWC->op==TK_AND );'), (105954, 1, u'+  assert( pDistinct!=0 );'), (106287, 1, u'+  assert( pParse->nQueryLoop >= (double)1 );'), (106351, 1, u'+  assert( v!=0 );'), (106372, 1, u'+  assert( nColumn>0 );'), (106425, 1, u'+  assert( (u32)n==pLevel->plan.nEq );'), (106443, 1, u'+  assert( n==nColumn );'), (106447, 1, u'+  assert( pLevel->iIdxCur>=0 );'), (106494, 1, u'+    assert( IsPowerOfTwo(pTerm->eOperator & ~WO_EQUIV) );'), (106547, 1, u'+    assert( IsPowerOfTwo(pTerm->eOperator & ~WO_EQUIV) );'), (106560, 1, u'+    assert( WO_EQ==SQLITE_INDEX_CONSTRAINT_EQ );'), (106561, 1, u'+    assert( WO_LT==SQLITE_INDEX_CONSTRAINT_LT );'), (106562, 1, u'+    assert( WO_LE==SQLITE_INDEX_CONSTRAINT_LE );'), (106563, 1, u'+    assert( WO_GT==SQLITE_INDEX_CONSTRAINT_GT );'), (106564, 1, u'+    assert( WO_GE==SQLITE_INDEX_CONSTRAINT_GE );'), (106565, 1, u'+    assert( WO_MATCH==SQLITE_INDEX_CONSTRAINT_MATCH );'), (106566, 1, u'+    assert( pTerm->eOperator & (WO_IN|WO_EQ|WO_LT|WO_LE|WO_GT|WO_GE|WO_MATCH) );'), (106684, 1, u'+  assert( pTab->azModuleArg && pTab->azModuleArg[0] );'), (106685, 1, u'+  assert( sqlite3GetVTable(pParse->db, pTab) );'), (106696, 1, u'+    assert( bAllowIN==0 || bAllowIN==1 );'), (106849, 1, u'+  assert( roundUp==0 || roundUp==1 );'), (106850, 1, u'+  assert( pIdx->nSample>0 );'), (106868, 1, u'+        assert( aSample[i].eType==SQLITE_FLOAT );'), (106894, 1, u'+    assert( eType==SQLITE_TEXT || eType==SQLITE_BLOB );'), (106907, 1, u'+        assert( pColl->enc==SQLITE_UTF8 );'), (106917, 1, u'+        assert( z && pColl && pColl->xCmp );'), (106933, 1, u'+            assert( db->mallocFailed );'), (106956, 1, u'+    assert( i<pIdx->nSample );'), (107081, 1, u'+      assert( (pLower->eOperator & (WO_GT|WO_GE))!=0 );'), (107093, 1, u'+      assert( (pUpper->eOperator & (WO_LT|WO_LE))!=0 );'), (107118, 1, u'+  assert( pLower || pUpper );'), (107154, 1, u'+  assert( p->aSample!=0 );'), (107155, 1, u'+  assert( p->nSample>0 );'), (107203, 1, u'+  assert( p->aSample!=0 );'), (107243, 1, u'+    assert( (pLevel->plan.wsFlags & WHERE_ORDERED)!=0 );'), (107263, 1, u'+      assert( sortOrder==0 || sortOrder==1 );'), (107327, 1, u'+  assert( pOrderBy!=0 );'), (107335, 1, u'+  assert( nTerm>0 );'), (107340, 1, u'+  assert( pIdx->zName || (pIdx->nColumn==1 && pIdx->aiColumn[0]==-1) );'), (107379, 1, u'+      assert( zColl!=0 );'), (107404, 1, u'+    assert( pOBItem->sortOrder==0 || pOBItem->sortOrder==1 );'), (107405, 1, u'+    assert( iSortOrder==0 || iSortOrder==1 );'), (107844, 1, u'+      assert( (pFirstTerm->eOperator & (WO_EQ|WO_ISNULL|WO_IN))!=0 );'), (107852, 1, u'+        assert( pFirstTerm->eOperator & WO_IN );'), (108045, 1, u'+  assert( p->pOrderBy || (p->cost.plan.wsFlags&WHERE_ORDERED)==0 );'), (108046, 1, u'+  assert( p->cost.plan.u.pIdx==0 || (p->cost.plan.wsFlags&WHERE_ROWID_EQ)==0 );'), (108047, 1, u'+  assert( pSrc->pIndex==0'), (108079, 1, u'+    assert( pIdxInfo!=0 || p->pParse->db->mallocFailed );'), (108146, 1, u'+    assert( pParse->db->mallocFailed );'), (108149, 1, u'+  assert( v!=0 );'), (108194, 1, u'+  assert( iTarget>0 );'), (108216, 1, u'+    assert( pX->op==TK_IN );'), (108225, 1, u'+    assert( pLevel->plan.wsFlags & WHERE_IN_ABLE );'), (108311, 1, u'+  assert( pLevel->plan.wsFlags & WHERE_INDEXED );'), (108327, 1, u'+  assert( pIdx->nColumn>=nEq );'), (108653, 1, u'+    assert( pTerm!=0 );'), (108654, 1, u'+    assert( pTerm->pExpr!=0 );'), (108655, 1, u'+    assert( omitTable==0 );'), (108673, 1, u'+    assert( omitTable==0 );'), (108694, 1, u'+      assert( TK_LE==TK_GT+1 );      /* Make sure the ordering.. */'), (108695, 1, u'+      assert( TK_LT==TK_GT+2 );      /*  ... of the TK_xx values... */'), (108696, 1, u'+      assert( TK_GE==TK_GT+3 );      /*  ... is correcct. */'), (108700, 1, u'+      assert( pX!=0 );'), (108701, 1, u'+      assert( pStart->leftCursor==iCur );'), (108714, 1, u'+      assert( pX!=0 );'), (108715, 1, u'+      assert( pEnd->leftCursor==iCur );'), (108733, 1, u'+      assert( pLevel->p5==0 );'), (108897, 1, u'+    assert( op!=0 );'), (108985, 1, u'+      assert( pLevel->p5==0 );'), (109045, 1, u'+    assert( pTerm!=0 );'), (109046, 1, u'+    assert( pTerm->eOperator & WO_OR );'), (109047, 1, u'+    assert( (pTerm->wtFlags & TERM_ORINFO)!=0 );'), (109134, 1, u'+        assert( pSubWInfo || pParse->nErr || pParse->db->mallocFailed );'), (109174, 1, u'+            assert( pLvl->iIdxCur==iCovCur );'), (109206, 1, u'+    assert( bRev==0 || bRev==1 );'), (109207, 1, u'+    assert( omitTable==0 );'), (109234, 1, u'+    assert( pE!=0 );'), (109258, 1, u'+    assert( !ExprHasProperty(pE, EP_FromJoin) );'), (109259, 1, u'+    assert( (pTerm->prereqRight & newNotReady)!=0 );'), (109282, 1, u'+        assert( pWInfo->untestedTerms );'), (109285, 1, u'+      assert( pTerm->pExpr );'), (109541, 1, u'+      assert( (m-1)==toTheLeft );'), (109663, 1, u'+    assert( ckOptimal==0 || ckOptimal==1 );'), (109677, 1, u'+          assert( j>iFrom );'), (109685, 1, u'+        assert( sWBI.pSrc->pTab );'), (109695, 1, u'+        assert( isOptimal || (sWBI.cost.used&sWBI.notValid)==0 );'), (109699, 1, u'+        assert( sWBI.pSrc->pIndex==0'), (109761, 1, u'+    assert( bestJ>=0 );'), (109762, 1, u'+    assert( sWBI.notValid & getMask(pMaskSet, pTabList->a[bestJ].iCursor) );'), (109763, 1, u'+    assert( bestJ==iFrom || (pTabList->a[iFrom].jointype & JT_LEFT)==0 );'), (109773, 1, u'+      assert( pWInfo->eDistinct==0 );'), (109812, 1, u'+        assert( bestPlan.plan.u.pIdx==pIdx );'), (109831, 1, u'+    assert( nTabList==0 || (pLevel->plan.wsFlags & WHERE_ALL_UNIQUE)!=0 );'), (109840, 1, u'+  assert( (wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || pWInfo->nLevel==1 );'), (109885, 1, u'+        assert( n<=pTab->nCol );'), (109899, 1, u'+      assert( pIx->pSchema==pTab->pSchema );'), (109900, 1, u'+      assert( iIndexCur>=0 );'), (110027, 1, u'+      assert( (pLevel->plan.wsFlags & WHERE_IDX_ONLY)==0'), (110051, 1, u'+  assert( pWInfo->nLevel==1 || pWInfo->nLevel==pTabList->nSrc );'), (110056, 1, u'+    assert( pTab!=0 );'), (110104, 1, u'+          assert( (pLevel->plan.wsFlags & WHERE_IDX_ONLY)==0'), (111676, 1, u'+  assert( iLookAhead!=YYNOCODE );'), (111740, 1, u'+  assert( stateno<=YY_REDUCE_COUNT );'), (111743, 1, u'+  assert( i!=YY_REDUCE_USE_DFLT );'), (111744, 1, u'+  assert( iLookAhead!=YYNOCODE );'), (111751, 1, u'+  assert( i>=0 && i<YY_ACTTAB_COUNT );'), (111752, 1, u'+  assert( yy_lookahead[i]==iLookAhead );'), (113174, 1, u'+  assert( yymsp[-2].minor.yy327!=0 );'), (113182, 1, u'+  assert( yymsp[-1].minor.yy327!=0 );'), (113350, 1, u'+  assert( yyruleno>=0 && yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) );'), (113373, 1, u'+    assert( yyact == YYNSTATE + YYNRULE + 1 );'), (113410, 1, u'+  assert( TOKEN.z[0] );  /* The tokenizer always gives us a token */'), (113505, 1, u'+      assert( yyact == YY_ERROR_ACTION );'), (114285, 1, u'+  assert( pzErrMsg!=0 );'), (114291, 1, u'+  assert( pParse->pNewTable==0 );'), (114292, 1, u'+  assert( pParse->pNewTrigger==0 );'), (114293, 1, u'+  assert( pParse->nVar==0 );'), (114294, 1, u'+  assert( pParse->nzVar==0 );'), (114295, 1, u'+  assert( pParse->azVar==0 );'), (114299, 1, u'+    assert( i>=0 );'), (114358, 1, u'+  assert( pzErrMsg!=0 );'), (115009, 1, u'+    assert( sqlite3GlobalConfig.nRefInitMutex==0 );'), (115026, 1, u'+    assert(sizeof(x)==8);'), (115027, 1, u'+    assert(sizeof(x)==sizeof(y));'), (115029, 1, u'+    assert( sqlite3IsNaN(y) );'), (115348, 1, u'+    assert( sz > (int)sizeof(LookasideSlot*) );'), (115589, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (115714, 1, u'+  assert( db->nDb<=2 );'), (115715, 1, u'+  assert( db->aDb==db->aDbStatic );'), (115774, 1, u'+  assert( db->lookaside.nOut==0 );  /* Fails on a lookaside memory leak */'), (115790, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (116004, 1, u'+  assert( count>=0 );'), (116135, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (116182, 1, u'+      assert( !db->mallocFailed );'), (116190, 1, u'+  assert(p || db->mallocFailed);'), (116254, 1, u'+    assert( rc!=SQLITE_OK );'), (116279, 1, u'+  assert( !db->mallocFailed );'), (116504, 1, u'+  assert( SQLITE_CHECKPOINT_FULL>SQLITE_CHECKPOINT_PASSIVE );'), (116505, 1, u'+  assert( SQLITE_CHECKPOINT_FULL<SQLITE_CHECKPOINT_RESTART );'), (116506, 1, u'+  assert( SQLITE_CHECKPOINT_PASSIVE+2==SQLITE_CHECKPOINT_RESTART );'), (116563, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (116564, 1, u'+  assert( !pnLog || *pnLog==-1 );'), (116565, 1, u'+  assert( !pnCkpt || *pnCkpt==-1 );'), (116634, 1, u'+    assert( !db->mallocFailed );'), (116738, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (116872, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_LENGTH]==SQLITE_MAX_LENGTH );'), (116873, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_SQL_LENGTH]==SQLITE_MAX_SQL_LENGTH );'), (116874, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_COLUMN]==SQLITE_MAX_COLUMN );'), (116875, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_EXPR_DEPTH]==SQLITE_MAX_EXPR_DEPTH );'), (116876, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_COMPOUND_SELECT]==SQLITE_MAX_COMPOUND_SELECT);'), (116877, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_VDBE_OP]==SQLITE_MAX_VDBE_OP );'), (116878, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_FUNCTION_ARG]==SQLITE_MAX_FUNCTION_ARG );'), (116879, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_ATTACHED]==SQLITE_MAX_ATTACHED );'), (116880, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_LIKE_PATTERN_LENGTH]=='), (116882, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_VARIABLE_NUMBER]==SQLITE_MAX_VARIABLE_NUMBER);'), (116883, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_TRIGGER_DEPTH]==SQLITE_MAX_TRIGGER_DEPTH );'), (116884, 1, u'+  assert( SQLITE_LIMIT_TRIGGER_DEPTH==(SQLITE_N_LIMIT-1) );'), (116939, 1, u'+  assert( *pzErrMsg==0 );'), (116993, 1, u'+        assert( octet>=0 && octet<256 );'), (117166, 1, u'+  assert( SQLITE_OPEN_READONLY  == 0x01 );'), (117167, 1, u'+  assert( SQLITE_OPEN_READWRITE == 0x02 );'), (117168, 1, u'+  assert( SQLITE_OPEN_CREATE    == 0x04 );'), (117229, 1, u'+  assert( sizeof(db->aLimit)==sizeof(aHardLimit) );'), (117266, 1, u'+  assert( db->pDfltColl!=0 );'), (117380, 1, u'+    assert( db->mutex!=0 || isThreadsafe==0 || sqlite3GlobalConfig.bFullMutex==0 );'), (117384, 1, u'+  assert( db!=0 || rc==SQLITE_NOMEM );'), (117433, 1, u'+  assert( zFilename );'), (117434, 1, u'+  assert( ppDb );'), (117446, 1, u'+    assert( *ppDb || rc==SQLITE_NOMEM );'), (117471, 1, u'+  assert( !db->mallocFailed );'), (117491, 1, u'+  assert( !db->mallocFailed );'), (117512, 1, u'+  assert( !db->mallocFailed );'), (117781, 1, u'+    assert( pPager!=0 );'), (117783, 1, u'+    assert( fd!=0 );'), (117901, 1, u'+    case SQLITE_TESTCTRL_ASSERT: {'), (117903, 1, u'+      assert( (x = va_arg(ap,int))!=0 );'), (118149, 1, u'+#define assertMutexHeld() \\'), (118150, 1, u'+  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) )'), (118182, 1, u'+    assert( p->pUnlockConnection || p->pBlockingConnection );'), (118187, 1, u'+      assert( p2->xUnlockNotify==p->xUnlockNotify || !seen );'), (118188, 1, u'+      assert( db==0 || p->pUnlockConnection!=db );'), (118189, 1, u'+      assert( db==0 || p->pBlockingConnection!=db );'), (118203, 1, u'+  assertMutexHeld();'), (118218, 1, u'+  assertMutexHeld();'), (118240, 1, u'+  assertMutexHeld();'), (118304, 1, u'+  assert( !db->mallocFailed );'), (118366, 1, u'+      assert( p->xUnlockNotify );'), (118373, 1, u'+      assert( aArg==aDyn || (aDyn==0 && aArg==aStatic) );'), (118374, 1, u'+      assert( nArg<=(int)ArraySize(aStatic) || aArg==aDyn );'), (119625, 1, u'+  assert( q - (unsigned char *)p <= FTS3_VARINT_MAX );'), (119753, 1, u'+  assert( p->nPendingData==0 );'), (119754, 1, u'+  assert( p->pSegments==0 );'), (119941, 1, u'+  assert( p->bHasStat==p->bFts4 );'), (119975, 1, u'+    assert( p->nPgsz>0 || rc!=SQLITE_OK );'), (120381, 1, u'+  assert( strlen(argv[0])==4 );'), (120382, 1, u'+  assert( (sqlite3_strnicmp(argv[0], "fts4", 4)==0 && isFts4)'), (120491, 1, u'+              assert( iOpt==6 );'), (120544, 1, u'+    assert( nString==0 );'), (120554, 1, u'+  assert( pTokenizer );'), (120558, 1, u'+    assert( zPrefix );'), (120620, 1, u'+    assert( zCsr <= &((char *)p)[nByte] );'), (120672, 1, u'+    assert( p->pSegments==0 );'), (120785, 1, u'+  assert( p->pSegments==0 );'), (120815, 1, u'+  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (120821, 1, u'+  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (120964, 1, u'+    assert( zBuffer );'), (121034, 1, u'+  assert( piLeaf || piLeaf2 );'), (121038, 1, u'+  assert( !piLeaf2 || !piLeaf || rc!=SQLITE_OK || (*piLeaf<=*piLeaf2) );'), (121075, 1, u'+  assert( iVal-*piPrev > 0 || (*piPrev==0 && iVal==0) );'), (121330, 1, u'+  assert( isSaveLeft==0 || isExact==0 );'), (121332, 1, u'+  assert( p!=0 && *p1!=0 && *p2!=0 );'), (121354, 1, u'+      assert( *p1!=POS_END && *p1!=POS_COLUMN );'), (121355, 1, u'+      assert( *p2!=POS_END && *p2!=POS_COLUMN );'), (121367, 1, u'+          assert( p );'), (121379, 1, u'+        assert( pp && p );'), (121385, 1, u'+      assert( (*p1&0xFE)==0 && (*p2&0xFE)==0 );'), (121544, 1, u'+  assert( *pbFirst || *piPrev==0 );'), (121545, 1, u'+  assert( *pbFirst==0 || iWrite>0 );'), (121653, 1, u'+  assert( *pnOut<=n1+n2+FTS3_VARINT_MAX-1 );'), (121686, 1, u'+  assert( nDist>0 );'), (121856, 1, u'+        assert( iOut>0 );'), (122001, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (122002, 1, u'+  assert( iLevel==FTS3_SEGCURSOR_ALL'), (122006, 1, u'+  assert( iLevel<FTS3_SEGDIR_MAXLEVEL );'), (122007, 1, u'+  assert( FTS3_SEGCURSOR_ALL<0 && FTS3_SEGCURSOR_PENDING<0 );'), (122008, 1, u'+  assert( isPrefix==0 || isScan==0 );'), (122210, 1, u'+  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (122245, 1, u'+  assert( idxNum>=0 && idxNum<=(FTS3_FULLTEXT_SEARCH+p->nColumn) );'), (122246, 1, u'+  assert( nVal==0 || nVal==1 || nVal==2 );'), (122247, 1, u'+  assert( (nVal==0)==(idxNum==FTS3_FULLSCAN_SEARCH) );'), (122248, 1, u'+  assert( p->pSegments==0 );'), (122274, 1, u'+    assert( p->base.zErrMsg==0 );'), (122362, 1, u'+  assert( iCol>=0 && iCol<=p->nColumn+2 );'), (122393, 1, u'+  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (122446, 1, u'+    assert( rc==SQLITE_OK || mxLevel==0 );'), (122461, 1, u'+  assert( p->pSegments==0 );'), (122462, 1, u'+  assert( p->nPendingData==0 );'), (122463, 1, u'+  assert( p->inTransaction!=1 );'), (122478, 1, u'+  assert( p->nPendingData==0 );'), (122479, 1, u'+  assert( p->inTransaction!=0 );'), (122480, 1, u'+  assert( p->pSegments==0 );'), (122493, 1, u'+  assert( p->inTransaction!=0 );'), (122566, 1, u'+  assert( nVal>=1 );'), (122601, 1, u'+  assert( nVal==1 );'), (122603, 1, u'+  assert( pCsr );'), (122629, 1, u'+  assert( nVal==1 );'), (122632, 1, u'+  assert( p );'), (122658, 1, u'+  assert( nVal==1 || nVal==2 );'), (122722, 1, u'+  assert( p->nPendingData==0 );'), (122763, 1, u'+  assert( ((Fts3Table *)pVtab)->inTransaction );'), (122764, 1, u'+  assert( ((Fts3Table *)pVtab)->mxSavepoint < iSavepoint );'), (122781, 1, u'+  assert( p->inTransaction );'), (122782, 1, u'+  assert( p->mxSavepoint >= iSavepoint );'), (122795, 1, u'+  assert( p->inTransaction );'), (122796, 1, u'+  assert( p->mxSavepoint >= iSavepoint );'), (122951, 1, u'+  assert( rc!=SQLITE_OK );'), (122996, 1, u'+      assert( pExpr->pPhrase->iDoclistToken==0 );'), (123021, 1, u'+  assert( iToken!=p->iDoclistToken );'), (123084, 1, u'+    assert( pToken->pDeferred==0 || pToken->pSegcsr==0 );'), (123094, 1, u'+    assert( pToken->pSegcsr==0 );'), (123116, 1, u'+  assert( pPhrase->doclist.bFreeList==0 );'), (123143, 1, u'+        assert( iPrev>=0 );'), (123240, 1, u'+  assert( rc!=SQLITE_OK || p->nToken<1 || p->aToken[0].pSegcsr==0 || p->bIncr );'), (123265, 1, u'+  assert( nDoclist>0 );'), (123266, 1, u'+  assert( *pbEof==0 );'), (123267, 1, u'+  assert( p || *piDocid==0 );'), (123268, 1, u'+  assert( !p || (p>aDoclist && p<&aDoclist[nDoclist]) );'), (123320, 1, u'+  assert( nDoclist>0 );'), (123321, 1, u'+  assert( *pbEof==0 );'), (123322, 1, u'+  assert( p || *piDocid==0 );'), (123323, 1, u'+  assert( !p || (p>=aDoclist && p<=&aDoclist[nDoclist]) );'), (123361, 1, u'+    assert( p->nToken==1 );'), (123362, 1, u'+    assert( pDL->pNextDocid==0 );'), (123407, 1, u'+      assert( pIter>=&pDL->aAll[pDL->nAll] || *pIter );'), (123505, 1, u'+      assert( pExpr->eType==FTSQUERY_OR'), (123509, 1, u'+      assert( pExpr->pLeft && pExpr->pRight );'), (123561, 1, u'+    assert( a );'), (123575, 1, u'+    assert( pCsr->nRowAvg>0 );'), (123636, 1, u'+  assert( rc!=SQLITE_OK || nDocSize>0 );'), (123673, 1, u'+    assert( pTC );'), (123698, 1, u'+        assert( rc==SQLITE_OK || pList==0 );'), (123822, 1, u'+  assert( pPhrase->doclist.pList );'), (123830, 1, u"+    assert( pPhrase->doclist.pList[nNew]=='\\0' );"), (123831, 1, u'+    assert( nNew<=pPhrase->doclist.nList && nNew>0 );'), (123889, 1, u'+    assert( pExpr->bEof==0 );'), (123897, 1, u'+        assert( !pLeft->bDeferred || !pRight->bDeferred );'), (123935, 1, u'+        assert( pLeft->bStart || pLeft->iDocid==pRight->iDocid );'), (123936, 1, u'+        assert( pRight->bStart || pLeft->iDocid==pRight->iDocid );'), (123964, 1, u'+          assert( *pRc!=SQLITE_OK || pRight->bStart );'), (124066, 1, u'+          assert( p->pParent && p->pParent->pLeft==p );'), (124161, 1, u'+          assert( pExpr->bDeferred || pPhrase->doclist.bFreeList==0 );'), (124237, 1, u'+  assert( pCsr->isEof==0 );'), (124245, 1, u'+      assert( sqlite3_data_count(pCsr->pStmt)==0 );'), (124276, 1, u'+        assert( pPhrase->nToken==1 );'), (124277, 1, u'+        assert( pPhrase->aToken[0].pSegcsr );'), (124310, 1, u'+      assert( *p );'), (124352, 1, u'+  assert( pExpr->eType==FTSQUERY_PHRASE );'), (124369, 1, u'+    assert( pRoot->bStart );'), (124374, 1, u'+      assert( pE->aMI==0 );'), (124387, 1, u'+        assert( sqlite3_data_count(pCsr->pStmt)==0 );'), (124420, 1, u'+        assert( pRoot->bEof==0 );'), (124468, 1, u'+    assert( pCsr->nDoc>0 );'), (124476, 1, u'+      assert( pExpr->aMI );'), (124521, 1, u'+  assert( iCol>=0 && iCol<pTab->nColumn );'), (124554, 1, u'+      assert( rc!=SQLITE_OK || pPhrase->bIncr==0 );'), (124563, 1, u'+    assert( bDescDoclist==0 || bDescDoclist==1 );'), (124564, 1, u'+    assert( pCsr->bDesc==0 || pCsr->bDesc==1 );'), (124956, 1, u'+          assert( iCol==0 );'), (124975, 1, u'+        default: assert( eState==3 );'), (125010, 1, u'+  assert( idxStr==0 );'), (125011, 1, u'+  assert( idxNum==FTS4AUX_EQ_CONSTRAINT || idxNum==0'), (125071, 1, u'+  assert( p->isEof==0 );'), (125282, 1, u'+  assert( rc==SQLITE_OK || pCsr==0 );'), (125453, 1, u'+        assert( nToken==ii );'), (125488, 1, u'+      assert( nTemp==0 );'), (125579, 1, u'+        assert( nKey==4 );'), (125698, 1, u'+  assert( p->eType!=FTSQUERY_PHRASE );'), (125706, 1, u'+  assert( p->eType==FTSQUERY_AND );'), (125729, 1, u'+    assert( pSplit->pParent->pRight==pSplit );'), (125807, 1, u'+          assert( pRet && pPrev );'), (125839, 1, u'+            assert( pPrev && pPrev->pLeft && pPrev->pRight==0 );'), (125850, 1, u'+      assert( nByte>0 );'), (125852, 1, u'+    assert( rc!=SQLITE_OK || (nByte>0 && nByte<=nIn) );'), (125945, 1, u'+        assert( p->pParent==0 || p->pParent->pLeft==p );'), (125946, 1, u'+        assert( p->pLeft && p->pRight );'), (125954, 1, u'+        assert( pParent==0 || pParent->pLeft==p );'), (125969, 1, u'+            assert( pFree );'), (125994, 1, u'+        assert( pParent->pParent==0 || pParent->pParent->pLeft==pParent );'), (125999, 1, u'+          assert( pParent==pRoot );'), (126017, 1, u'+              assert( pFree!=0 );'), (126044, 1, u'+      assert( pFree==0 );'), (126097, 1, u'+  assert( rc==SQLITE_OK || *ppExpr==0 );'), (126176, 1, u'+  assert( p->eType==FTSQUERY_PHRASE || p->pPhrase==0 );'), (126191, 1, u'+  assert( pDel==0 || pDel->pParent==0 );'), (126193, 1, u'+    assert( p->pParent==0 || p==p->pParent->pRight || p==p->pParent->pLeft );'), (126201, 1, u'+        assert( p==p->pParent->pRight || p==p->pParent->pLeft );'), (126349, 1, u'+  assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (126373, 1, u'+    assert( rc==SQLITE_OK || pExpr==0 );'), (126478, 1, u'+  assert( pNew!=0 );'), (126479, 1, u'+  assert( keyClass>=FTS3_HASH_STRING && keyClass<=FTS3_HASH_BINARY );'), (126495, 1, u'+  assert( pH!=0 );'), (126562, 1, u'+    assert( keyClass==FTS3_HASH_BINARY );'), (126577, 1, u'+    assert( keyClass==FTS3_HASH_BINARY );'), (126619, 1, u'+  assert( (new_size & (new_size-1))==0 );'), (126694, 1, u'+    assert( pH->first==0 );'), (126695, 1, u'+    assert( pH->count==0 );'), (126710, 1, u'+  assert( xHash!=0 );'), (126712, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (126755, 1, u'+  assert( pH!=0 );'), (126757, 1, u'+  assert( xHash!=0 );'), (126759, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (126778, 1, u'+  assert( pH->htsize>0 );'), (126793, 1, u'+  assert( pH->htsize>0 );'), (126794, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (126956, 1, u"+  assert( x>='a' && x<='z' );"), (126965, 1, u"+  assert( x>='a' && x<='z' );"), (127512, 1, u'+  assert( argc==1 || argc==2 );'), (127640, 1, u'+    assert( rc!=SQLITE_OK || *ppTok );'), (127859, 1, u'+  assert( rc==SQLITE_OK );'), (127860, 1, u'+  assert( p1==p2 );'), (127862, 1, u'+  assert( rc==SQLITE_ERROR );'), (127863, 1, u'+  assert( p2==0 );'), (127864, 1, u'+  assert( 0==strcmp(sqlite3_errmsg(db), "unknown tokenizer: nosuchtokenizer") );'), (127868, 1, u'+  assert( rc==SQLITE_OK );'), (127870, 1, u'+  assert( rc==SQLITE_OK );'), (127871, 1, u'+  assert( p2==p1 );'), (128364, 1, u'+  assert( (rc==SQLITE_OK)==(pMod!=0) );'), (128429, 1, u'+  assert( pInfo->estimatedCost>1000000.0 );'), (128574, 1, u'+      assert( iCol==4 );'), (129008, 1, u'+  assert( SizeofArray(azSql)==SizeofArray(p->aStmt) );'), (129009, 1, u'+  assert( eStmt<SizeofArray(azSql) && eStmt>=0 );'), (129026, 1, u'+      assert( rc==SQLITE_OK || pStmt==0 );'), (129189, 1, u'+  assert( iLangid>=0 );'), (129190, 1, u'+  assert( p->nIndex>0 );'), (129191, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (129224, 1, u'+  assert( iLevel==FTS3_SEGCURSOR_ALL || iLevel>=0 );'), (129225, 1, u'+  assert( iLevel<FTS3_SEGDIR_MAXLEVEL );'), (129226, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (129315, 1, u'+  assert( !p || p->iLastDocid<=iDocid );'), (129320, 1, u'+      assert( p->nData<p->nSpace );'), (129321, 1, u'+      assert( p->aData[p->nData]==0 );'), (129341, 1, u'+    assert( iPos>p->iLastPos || (iPos==0 && p->iLastPos==0) );'), (129387, 1, u'+      assert( 0==fts3HashFind(pHash, zToken, nToken) );'), (129427, 1, u'+  assert( pTokenizer && pModule );'), (129488, 1, u'+  assert( iLangid>=0 );'), (129647, 1, u'+  assert( p->zContentTbl==0 || bContent==0 );'), (129684, 1, u'+  assert( *pbFound==0 );'), (129743, 1, u'+  assert( iLangid>=0 );'), (129744, 1, u'+  assert( p->nIndex>=1 );'), (129813, 1, u'+  assert( pnBlob );'), (129888, 1, u'+  assert( !pReader->pBlob'), (129945, 1, u'+        assert( pReader->aNode );'), (129954, 1, u'+    assert( pReader->iCurrentBlock<=pReader->iLeafEndBlock );'), (129964, 1, u'+    assert( pReader->pBlob==0 );'), (129972, 1, u'+  assert( !fts3SegReaderIsPending(pReader) );'), (130025, 1, u'+  assert( pReader->aDoclist );'), (130026, 1, u'+  assert( !pReader->pOffsetList );'), (130065, 1, u'+  assert( p );'), (130100, 1, u'+      assert( *p==0 );'), (130155, 1, u'+  assert( p->bFts4 );'), (130156, 1, u'+  assert( pgsz>0 );'), (130209, 1, u'+  assert( iStartLeaf<=iEndLeaf );'), (130391, 1, u'+  assert( rc!=0 );'), (130415, 1, u'+  assert( pLhs->aNode && pRhs->aNode );'), (130427, 1, u'+  assert( pLhs->aNode && pRhs->aNode );'), (130472, 1, u'+  assert( nSuspect<=nSegment );'), (130489, 1, u'+    assert( xCmp(apSegment[i], apSegment[i+1])<0 );'), (130621, 1, u'+        assert( pTree->aData==(char *)&pTree[1] );'), (130704, 1, u'+  assert( iHeight>=1 && iHeight<128 );'), (130755, 1, u'+      assert( iNextLeaf==iFree );'), (130777, 1, u'+      assert( pRight==0 || p->zMalloc==0 );'), (130865, 1, u'+    assert( nPrefix<nTerm );'), (130890, 1, u'+  assert( nData+nReq<=pWriter->nSize );'), (130916, 1, u'+    assert( pWriter->zTerm==pWriter->zMalloc );'), (131022, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (131098, 1, u'+  assert( iLevel>=0 || iLevel==FTS3_SEGCURSOR_ALL );'), (131148, 1, u'+  assert( iCol>=0 );'), (131246, 1, u'+        assert( (pMsr->aBuffer[nList] & 0xFE)==0x00 );'), (131321, 1, u'+  assert( pCsr->pFilter==0 );'), (131322, 1, u'+  assert( zTerm && nTerm>0 );'), (131344, 1, u'+  assert( iCol<0 || iCol<p->nColumn );'), (131365, 1, u'+  assert( pCsr->zTerm==0 );'), (131366, 1, u'+  assert( pCsr->nTerm==0 );'), (131367, 1, u'+  assert( pCsr->aDoclist==0 );'), (131368, 1, u'+  assert( pCsr->nDoclist==0 );'), (131424, 1, u'+    assert( rc==SQLITE_OK );'), (131455, 1, u'+    assert( isIgnoreEmpty || (isRequirePos && !isColFilter) );'), (131511, 1, u'+          assert( iDelta>0 || (nDoclist==0 && iDelta==iDocid) );'), (131512, 1, u'+          assert( nDoclist>0 || iDelta==iDocid );'), (131602, 1, u'+  assert( iLevel==FTS3_SEGCURSOR_ALL'), (131606, 1, u'+  assert( iLevel<FTS3_SEGDIR_MAXLEVEL );'), (131607, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (131636, 1, u'+  assert( csr.nSegment>0 );'), (131637, 1, u'+  assert( iNewLevel>=getAbsoluteLevel(p, iLangid, iIndex, 0) );'), (131638, 1, u'+  assert( iNewLevel<getAbsoluteLevel(p, iLangid, iIndex,FTS3_SEGDIR_MAXLEVEL) );'), (131652, 1, u'+  assert( pWriter );'), (131730, 1, u'+    assert(j<=nBuf);'), (132002, 1, u'+    assert( pCsr->nSegment==0 );'), (132120, 1, u'+  assert( p->aNode );'), (132144, 1, u'+  assert( p->iOff<=p->nNode );'), (132198, 1, u'+  assert( nTerm>0 );'), (132249, 1, u'+      assert( pNode->block.nAlloc>=p->nNodeSize );'), (132262, 1, u'+  assert( 0 );'), (132305, 1, u'+  assert( pNode->n>0 );'), (132306, 1, u"+  assert( (pNode->a[0]=='\\0')==(aDoclist!=0) );"), (132329, 1, u'+  assert( pNode->n<=pNode->nAlloc );'), (132442, 1, u'+    assert( *pRc || pNode->block.nAlloc==0 );'), (132443, 1, u'+    assert( *pRc || pNode->key.nAlloc==0 );'), (132620, 1, u'+          assert( reader.aNode );'), (132873, 1, u'+  assert( p->bIgnoreSavepoint==0 );'), (132892, 1, u'+    assert( pNode->nAlloc>=1+sqlite3Fts3VarintLen(iChild) );'), (132895, 1, u'+    assert( pNode->nAlloc>=1 );'), (132947, 1, u'+  assert( pNew->n<=pNew->nAlloc );'), (133068, 1, u'+    assert( j<pCsr->nSegment && pSeg->iIdx==i );'), (133381, 1, u'+      assert( p->bFts4==0 );'), (133408, 1, u'+    assert( p->bFts4==0 );'), (133466, 1, u'+  assert( *pRc==SQLITE_OK );'), (133738, 1, u'+    assert( pCsr->isRequireSeek==0 );'), (133824, 1, u'+  assert( pToken->pDeferred==0 );'), (133899, 1, u'+  assert( p->pSegments==0 );'), (133900, 1, u'+  assert('), (133982, 1, u'+    assert( sqlite3_value_type(apVal[0])==SQLITE_INTEGER );'), (134000, 1, u'+      assert( p->iPrevDocid==*pRowid );'), (134191, 1, u'+    assert( pExpr->pLeft && pExpr->pRight );'), (134373, 1, u'+        assert( iCsr>=iStart );'), (134410, 1, u'+  assert( rc==SQLITE_OK || pCsr==0 );'), (134415, 1, u'+    assert( iFirst>=0 );'), (134421, 1, u'+    assert( rc!=SQLITE_OK || ('), (134507, 1, u'+    assert( iScore>=0 );'), (134629, 1, u'+      assert( nShift<=nDesired );'), (134884, 1, u'+      assert( cArg==FTS3_MATCHINFO_HITS );'), (134907, 1, u'+  assert( sqlite3_data_count(pStmt)==1 );'), (135139, 1, u'+        assert( zArg[i]==FTS3_MATCHINFO_HITS );'), (135185, 1, u'+    assert( pCsr->aMatchinfo );'), (135312, 1, u'+    assert( (mCovered&mSeen)==mCovered );'), (135316, 1, u'+  assert( nFToken>0 );'), (135368, 1, u'+    assert( iPos>=0 );'), (135402, 1, u'+  assert( pCsr->isRequireSeek==0 );'), (135478, 1, u'+        assert( iCurrent<=iMinPos );'), (135508, 1, u'+  assert( rc!=SQLITE_DONE );'), (135706, 1, u'+  assert( bAlnum==0 || bAlnum==1 );'), (135710, 1, u'+    assert( (sqlite3FtsUnicodeIsalnum(iCode) & 0xFFFFFFFE)==0 );'), (135775, 1, u'+  assert( (sqlite3FtsUnicodeIsalnum(iCode) & 0xFFFFFFFE)==0 );'), (136107, 1, u'+    assert( aEntry[0]<key );'), (136108, 1, u'+    assert( key>=aEntry[iRes] );'), (136164, 1, u'+  assert( key>=aDia[iRes] );'), (136286, 1, u'+  assert( c>=0 );'), (136287, 1, u'+  assert( sizeof(unsigned short)==2 && sizeof(unsigned char)==1 );'), (136306, 1, u'+    assert( iRes<0 || c>=aEntry[iRes].iCode );'), (136312, 1, u'+        assert( ret>0 );'), (136702, 1, u'+  assert( sizeof(RtreeCoord)==4 );'), (136703, 1, u'+  assert( sizeof(u32)==4 );'), (136766, 1, u'+  assert( pNode->pNext==0 );'), (136779, 1, u'+    for( ; (*pp)!=pNode; pp = &(*pp)->pNext){ assert(*pp); }'), (136823, 1, u'+    assert( !pParent || !pNode->pParent || pNode->pParent==pParent );'), (136942, 1, u'+  assert( nCell<=nMaxCell );'), (136985, 1, u'+    assert( pNode->nRef>0 );'), (137014, 1, u'+  assert( iCell<NCELL(pNode) );'), (137219, 1, u'+  assert( pConstraint->op==RTREE_MATCH );'), (137220, 1, u'+  assert( pConstraint->pGeom );'), (137249, 1, u'+    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (137267, 1, u'+        assert( p->op==RTREE_MATCH );'), (137301, 1, u'+    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (137312, 1, u'+        assert( p->op==RTREE_MATCH );'), (137351, 1, u'+  assert( iHeight>=0 );'), (137380, 1, u'+    assert( pCursor->pNode==pChild );'), (137438, 1, u'+  assert( pCsr->pNode );'), (137478, 1, u'+  assert(pCsr->pNode);'), (137503, 1, u'+      assert( pRtree->eCoordType==RTREE_COORD_INT32 );'), (137605, 1, u'+      assert( rc==SQLITE_OK );'), (137619, 1, u'+        assert( (idxStr==0 && argc==0)'), (137654, 1, u'+        assert( pCsr->pNode==pRoot );'), (137661, 1, u'+        assert( pCsr->pNode==pRoot );'), (137665, 1, u'+      assert( rc!=SQLITE_OK || !pCsr->pNode || pCsr->iCell<NCELL(pCsr->pNode) );'), (137716, 1, u'+  assert( pIdxInfo->idxStr==0 );'), (137749, 1, u'+          assert( p->op==SQLITE_INDEX_CONSTRAINT_MATCH );'), (137765, 1, u'+  assert( iIdx>=0 );'), (137858, 1, u'+    assert( iExclude==-1 );'), (138266, 1, u'+        assert( left<=right );'), (138333, 1, u'+        assert( xleft1<=xright1 && (xleft1<xright1 || xleft2<=xright2) );'), (138701, 1, u'+  assert( pNode->nRef==1 );'), (138790, 1, u'+  assert( pParent || pNode->iNode==1 );'), (139114, 1, u'+  assert(nData>=1);'), (139131, 1, u'+    assert( nData==(pRtree->nDim*2 + 3) );'), (139777, 1, u'+    assert(uPattern!=0);'), (139961, 1, u'+      assert(!pExpr);'), (140027, 1, u'+  assert(nArg==1 || nArg==2);'), (140086, 1, u'+  assert(!"Unexpected return value from ucol_strcoll()");'), (140115, 1, u'+  assert(nArg==2);'), (140128, 1, u'+  assert(p);'), (140402, 1, u'+    assert(iStart<=iEnd);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(321, 2, u'-  assert( 0==argc );'), (322, 2, u'-  assert( zShellStatic );'), (944, 2, u'-    assert( (zCsr-zIn)==len );'), (1196, 2, u'-            assert(sizeof(int) <= sizeof(char *));'), (2435, 2, u'-      { "assert",                SQLITE_TESTCTRL_ASSERT                 },'), (2505, 2, u'-        case SQLITE_TESTCTRL_ASSERT:'), (2593, 2, u'-    assert( nArg<=ArraySize(azArg) );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(542, 2, u'-# define ALWAYS(X)      ((X)?1:(assert(0),0))'), (543, 2, u'-# define NEVER(X)       ((X)?(assert(0),1):0)'), (6565, 2, u'-#define SQLITE_TESTCTRL_ASSERT                  12'), (9135, 2, u'-SQLITE_PRIVATE   int sqlite3VdbeAssertMayAbort(Vdbe *, int);'), (12895, 2, u'-#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (13758, 2, u'-  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (13768, 2, u'-  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (13780, 2, u'-  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (13835, 2, u'-      assert( (op-SQLITE_DBSTATUS_LOOKASIDE_HIT)>=0 );'), (13836, 2, u'-      assert( (op-SQLITE_DBSTATUS_LOOKASIDE_HIT)<3 );'), (13942, 2, u'-      assert( SQLITE_DBSTATUS_CACHE_MISS==SQLITE_DBSTATUS_CACHE_HIT+1 );'), (13943, 2, u'-      assert( SQLITE_DBSTATUS_CACHE_WRITE==SQLITE_DBSTATUS_CACHE_HIT+2 );'), (15276, 2, u'-  assert( rc==SQLITE_OK || pFile->pMethods==0 );'), (15281, 2, u'-  assert( dirSync==0 || dirSync==1 );'), (15363, 2, u'-  assert( pFile );'), (15417, 2, u'-  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) );'), (15454, 2, u'-  assert(vfsList);'), (15742, 2, u'-  assert( nByte>0 );'), (15769, 2, u'-  assert( pPrior!=0 );'), (15813, 2, u'-  assert( pPrior!=0 && nByte>0 );'), (15814, 2, u'-  assert( nByte==ROUND8(nByte) ); /* EV: R-46199-30249 */'), (16045, 2, u'-    assert( mem.nCurrent[i]>=0 );'), (16063, 2, u'-  assert( p->iForeGuard==(int)FOREGUARD );'), (16067, 2, u'-  assert( pInt[nReserve/sizeof(int)]==(int)REARGUARD );'), (16072, 2, u'-  while( nReserve-- > p->iSize ) assert( pU8[nReserve]==0x65 );'), (16093, 2, u'-  assert( (sizeof(struct MemBlockHdr)&7) == 0 );'), (16154, 2, u'-  assert( mem.disallow==0 );'), (16179, 2, u'-      assert(pBt[0]);'), (16208, 2, u'-  assert( sqlite3GlobalConfig.bMemstat || sqlite3GlobalConfig.bCoreMutex==0'), (16215, 2, u'-    assert( pHdr->pPrev->pNext==pHdr );'), (16218, 2, u'-    assert( mem.pFirst==pHdr );'), (16222, 2, u'-    assert( pHdr->pNext->pPrev==pHdr );'), (16225, 2, u'-    assert( mem.pLast==pHdr );'), (16249, 2, u'-  assert( mem.disallow==0 );'), (16250, 2, u'-  assert( (nByte & 7)==0 );     /* EV: R-46199-30249 */'), (16288, 2, u'-    assert( pHdr->iForeGuard==FOREGUARD );'), (16307, 2, u'-    assert( pHdr->iForeGuard==FOREGUARD );         /* Allocation is valid */'), (16329, 2, u'-    assert( pHdr->iForeGuard==FOREGUARD );         /* Allocation is valid */'), (16583, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (16602, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (16603, 2, u'-  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (16604, 2, u'-  assert( i>=1 );'), (16606, 2, u'-  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (16607, 2, u'-  assert( size>=2 );'), (16621, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (16636, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (16637, 2, u'-  assert( i>=1 );'), (16638, 2, u'-  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (16640, 2, u'-  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (16641, 2, u'-  assert( size>=2 );'), (16671, 2, u'-    assert( sqlite3_mutex_held(mem3.mutex) );'), (16687, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (16688, 2, u'-  assert( i>=1 );'), (16689, 2, u'-  assert( mem3.aPool[i-1].u.hdr.size4x/4==nBlock );'), (16690, 2, u'-  assert( mem3.aPool[i+nBlock-1].u.hdr.prevSize==nBlock );'), (16704, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (16705, 2, u'-  assert( mem3.szMaster>=nBlock );'), (16717, 2, u'-    assert( newi > mem3.iMaster+1 );'), (16751, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (16755, 2, u'-    assert( (size&1)==0 );'), (16758, 2, u'-      assert( i > mem3.aPool[i-1].u.hdr.prevSize );'), (16792, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (16793, 2, u'-  assert( sizeof(Mem3Block)==8 );'), (16799, 2, u'-  assert( nBlock>=2 );'), (16873, 2, u'-  assert( sqlite3_mutex_held(mem3.mutex) );'), (16874, 2, u'-  assert( p>mem3.aPool && p<&mem3.aPool[mem3.nPool] );'), (16876, 2, u'-  assert( (mem3.aPool[i-1].u.hdr.size4x&1)==1 );'), (16878, 2, u'-  assert( i+size<=mem3.nPool+1 );'), (16914, 2, u'-  assert( (pBlock[-1].u.hdr.size4x&1)!=0 );'), (16934, 2, u'-  assert( nBytes>0 );          /* malloc.c filters out 0 byte requests */'), (16945, 2, u'-  assert( pPrior );'), (16992, 2, u'-  assert( sizeof(Mem3Block)==8 );'), (17043, 2, u'-      assert( 0 );'), (17048, 2, u'-      assert( 0 );'), (17053, 2, u'-      assert( 0 );'), (17271, 2, u'-  assert( i>=0 && i<mem5.nBlock );'), (17272, 2, u'-  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (17273, 2, u'-  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (17293, 2, u'-  assert( sqlite3_mutex_held(mem5.mutex) );'), (17294, 2, u'-  assert( i>=0 && i<mem5.nBlock );'), (17295, 2, u'-  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (17296, 2, u'-  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (17301, 2, u'-    assert( x<mem5.nBlock );'), (17328, 2, u'-    assert( i>=0 && i<mem5.nBlock );'), (17342, 2, u'-  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (17344, 2, u'-  assert( iFirst>=0 );'), (17370, 2, u'-  assert( nByte>0 );'), (17435, 2, u'-  assert( iBlock>=0 && iBlock<mem5.nBlock );'), (17436, 2, u'-  assert( ((u8 *)pOld-mem5.zPool)%mem5.szAtom==0 );'), (17437, 2, u'-  assert( (mem5.aCtrl[iBlock] & CTRL_FREE)==0 );'), (17441, 2, u'-  assert( iBlock+size-1<(u32)mem5.nBlock );'), (17445, 2, u'-  assert( mem5.currentCount>0 );'), (17446, 2, u'-  assert( mem5.currentOut>=(size*mem5.szAtom) );'), (17449, 2, u'-  assert( mem5.currentOut>0 || mem5.currentCount==0 );'), (17450, 2, u'-  assert( mem5.currentCount>0 || mem5.currentOut==0 );'), (17460, 2, u'-    assert( iBuddy>=0 );'), (17498, 2, u'-  assert( pPrior!=0 );'), (17519, 2, u'-  assert( pPrior!=0 );'), (17520, 2, u'-  assert( (nBytes&(nBytes-1))==0 );  /* EV: R-46199-30249 */'), (17521, 2, u'-  assert( nBytes>=0 );'), (17592, 2, u'-  assert( (sizeof(Mem5Link)&(sizeof(Mem5Link)-1))==0 );'), (17596, 2, u'-  assert( zByte!=0 );  /* sqlite3_config() does not allow otherwise */'), (17621, 2, u'-    assert((iOffset+nAlloc)>mem5.nBlock);'), (17798, 2, u'-  assert( GLOBAL(int, mutexIsInit) );'), (17983, 2, u'-      assert( id-2 >= 0 );'), (17984, 2, u'-      assert( id-2 < (int)(sizeof(aStatic)/sizeof(aStatic[0])) );'), (17998, 2, u'-  assert( p->cnt==0 );'), (17999, 2, u'-  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (18016, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) );'), (18021, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) );'), (18034, 2, u'-  assert( debugMutexHeld(pX) );'), (18036, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) );'), (18240, 2, u'-      assert( iType-2 >= 0 );'), (18241, 2, u'-      assert( iType-2 < ArraySize(staticMutexes) );'), (18259, 2, u'-  assert( p->nRef==0 );'), (18260, 2, u'-  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (18277, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (18296, 2, u'-      assert( p->nRef==0 );'), (18306, 2, u'-  assert( p->nRef>0 || p->owner==0 );'), (18320, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (18339, 2, u'-      assert( p->nRef==0 );'), (18376, 2, u'-  assert( pthreadMutexHeld(p) );'), (18381, 2, u'-  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (18633, 2, u'-      assert( winMutex_isInit==1 );'), (18634, 2, u'-      assert( iType-2 >= 0 );'), (18635, 2, u'-      assert( iType-2 < ArraySize(winMutex_staticMutexes) );'), (18653, 2, u'-  assert( p );'), (18654, 2, u'-  assert( p->nRef==0 && p->owner==0 );'), (18655, 2, u'-  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (18674, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld2(p, tid) );'), (18678, 2, u'-  assert( p->nRef>0 || p->owner==0 );'), (18691, 2, u'-  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld2(p, tid) );'), (18729, 2, u'-  assert( p->nRef>0 );'), (18730, 2, u'-  assert( p->owner==tid );'), (18733, 2, u'-  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (19030, 2, u'-  assert( sqlite3_mutex_held(mem0.mutex) );'), (19080, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(p) );  /* IMP: R-04675-44850 */'), (19117, 2, u'-  assert( n>0 );'), (19139, 2, u'-  assert( sqlite3_mutex_notheld(mem0.mutex) );'), (19147, 2, u'-  assert( scratchAllocOut<=1 );'), (19161, 2, u'-    assert( scratchAllocOut>=1 && scratchAllocOut<=2 );'), (19173, 2, u'-      assert( mem0.nScratchFree <= (u32)sqlite3GlobalConfig.nScratch );'), (19178, 2, u'-      assert( sqlite3MemdebugHasType(p, MEMTYPE_SCRATCH) );'), (19179, 2, u'-      assert( sqlite3MemdebugNoType(p, ~MEMTYPE_SCRATCH) );'), (19212, 2, u'-  assert( sqlite3MemdebugHasType(p, MEMTYPE_HEAP) );'), (19213, 2, u'-  assert( sqlite3MemdebugNoType(p, MEMTYPE_DB) );'), (19217, 2, u'-  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (19221, 2, u'-    assert( sqlite3MemdebugHasType(p, MEMTYPE_DB) );'), (19222, 2, u'-    assert( sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) );'), (19223, 2, u'-    assert( db!=0 || sqlite3MemdebugNoType(p, MEMTYPE_LOOKASIDE) );'), (19233, 2, u'-  assert( sqlite3MemdebugNoType(p, MEMTYPE_DB) );'), (19234, 2, u'-  assert( sqlite3MemdebugHasType(p, MEMTYPE_HEAP) );'), (19251, 2, u'-  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (19269, 2, u'-  assert( sqlite3MemdebugHasType(p, MEMTYPE_DB) );'), (19270, 2, u'-  assert( sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) );'), (19271, 2, u'-  assert( db!=0 || sqlite3MemdebugNoType(p, MEMTYPE_LOOKASIDE) );'), (19308, 2, u'-    assert( sqlite3MemdebugHasType(pOld, MEMTYPE_HEAP) );'), (19309, 2, u'-    assert( sqlite3MemdebugNoType(pOld, ~MEMTYPE_HEAP) );'), (19323, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pNew) ); /* IMP: R-04675-44850 */'), (19382, 2, u'-  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (19383, 2, u'-  assert( db==0 || db->pnBytesFreed==0 );'), (19426, 2, u'-  assert( db!=0 );'), (19427, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (19442, 2, u'-      assert( sqlite3MemdebugHasType(p, MEMTYPE_DB) );'), (19443, 2, u'-      assert( sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) );'), (19484, 2, u'-  assert( (n&0x7fffffff)==n );'), (19496, 2, u'-  assert( (n&0x7fffffff)==n );'), (19540, 2, u'-  assert( !db || sqlite3_mutex_held(db->mutex) );'), (20055, 2, u'-          assert( precision>0 );'), (20065, 2, u'-          assert( bufpt>zOut );'), (20197, 2, u'-        assert( k>=0 && k<pSrc->nSrc );'), (20207, 2, u'-        assert( xtype==etINVALID );'), (20241, 2, u'-  assert( z!=0 || N==0 );'), (20247, 2, u'-  assert( p->zText!=0 || p->nChar==0 );'), (20288, 2, u'-  assert( p->zText );'), (20353, 2, u'-  assert( db!=0 );'), (20881, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (20882, 2, u'-  assert( pMem->flags&MEM_Str );'), (20883, 2, u'-  assert( pMem->enc!=desiredEnc );'), (20884, 2, u'-  assert( pMem->enc!=0 );'), (20885, 2, u'-  assert( pMem->n>=0 );'), (20904, 2, u'-      assert( rc==SQLITE_NOMEM );'), (20959, 2, u'-      assert( desiredEnc==SQLITE_UTF16BE );'), (20969, 2, u'-    assert( desiredEnc==SQLITE_UTF8 );'), (20986, 2, u'-  assert( (pMem->n+(desiredEnc==SQLITE_UTF8?1:2))<=len );'), (21019, 2, u'-  assert( pMem->n>=0 );'), (21062, 2, u'-  assert( z<=zTerm );'), (21117, 2, u'-  assert( (m.flags & MEM_Term)!=0 || db->mallocFailed );'), (21118, 2, u'-  assert( (m.flags & MEM_Str)!=0 || db->mallocFailed );'), (21119, 2, u'-  assert( (m.flags & MEM_Dyn)!=0 || db->mallocFailed );'), (21120, 2, u'-  assert( m.z || db->mallocFailed );'), (21141, 2, u'-    assert( db->mallocFailed );'), (21144, 2, u'-  assert( m.z==m.zMalloc );'), (21191, 2, u'-    assert( n>0 && n<=4 );'), (21198, 2, u'-    assert( c==t );'), (21199, 2, u'-    assert( (z-zBuf)==n );'), (21206, 2, u'-    assert( n>0 && n<=4 );'), (21210, 2, u'-    assert( c==i );'), (21211, 2, u'-    assert( (z-zBuf)==n );'), (21218, 2, u'-    assert( n>0 && n<=4 );'), (21222, 2, u'-    assert( c==i );'), (21223, 2, u'-    assert( (z-zBuf)==n );'), (21506, 2, u'-  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (21514, 2, u'-    assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (21717, 2, u'-  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (21722, 2, u'-    assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (21758, 2, u'-    assert( u<=LARGEST_INT64 );'), (21765, 2, u'-      assert( u<=LARGEST_INT64 );'), (21773, 2, u'-      assert( u-1==LARGEST_INT64 );'), (21774, 2, u'-      assert( (*pNum)==SMALLEST_INT64 );'), (21880, 2, u'-  assert( n<=9 );'), (21951, 2, u'-  assert( SLOT_2_0 == ((0x7f<<14) | (0x7f)) );'), (21952, 2, u'-  assert( SLOT_4_2_0 == ((0xfU<<28) | (0x7f<<14) | (0x7f)) );'), (22157, 2, u'-    assert( n>3 && n<=9 );'), (22209, 2, u'-    assert( n>5 && n<=9 );'), (22251, 2, u"-  assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );"), (22386, 2, u'-  assert( iA1*iB0==0 || iA0*iB1==0 );'), (22464, 2, u'-  assert( pNew!=0 );'), (22478, 2, u'-  assert( pH!=0 );'), (22497, 2, u'-  assert( nKey>=0 );'), (22632, 2, u'-    assert( pEntry->count>=0 );'), (22637, 2, u'-    assert( pH->first==0 );'), (22638, 2, u'-    assert( pH->count==0 );'), (22651, 2, u'-  assert( pH!=0 );'), (22652, 2, u'-  assert( pKey!=0 );'), (22653, 2, u'-  assert( nKey>=0 );'), (22682, 2, u'-  assert( pH!=0 );'), (22683, 2, u'-  assert( pKey!=0 );'), (22684, 2, u'-  assert( nKey>=0 );'), (22698, 2, u'-      assert(nKey==elem->nKey);'), (22711, 2, u'-      assert( pH->htsize>0 );'), (23768, 2, u'-    assert( 0 );'), (23770, 2, u'-  assert( p->l_whence==SEEK_SET );'), (23787, 2, u'-      assert( 0 );'), (23979, 2, u"-  assert( zAbsoluteName[0]=='/' );"), (24018, 2, u'-  assert( pId->nRef>0 );'), (24023, 2, u'-    assert( *pp==pId );'), (24283, 2, u'-  assert( unixMutexHeld() );'), (24287, 2, u'-      assert( pInode->pShmNode==0 );'), (24290, 2, u'-        assert( pInode->pPrev->pNext==pInode );'), (24293, 2, u'-        assert( inodeList==pInode );'), (24297, 2, u'-        assert( pInode->pNext->pPrev==pInode );'), (24325, 2, u'-  assert( unixMutexHeld() );'), (24453, 2, u'-  assert( pFile );'), (24508, 2, u'-  assert( unixMutexHeld() );'), (24509, 2, u'-  assert( pInode!=0 );'), (24515, 2, u'-      assert( pInode->nLock==0 );'), (24602, 2, u'-  assert( pFile );'), (24622, 2, u'-  assert( pFile->eFileLock!=NO_LOCK || eFileLock==SHARED_LOCK );'), (24623, 2, u'-  assert( eFileLock!=PENDING_LOCK );'), (24624, 2, u'-  assert( eFileLock!=RESERVED_LOCK || pFile->eFileLock==SHARED_LOCK );'), (24647, 2, u'-    assert( eFileLock==SHARED_LOCK );'), (24648, 2, u'-    assert( pFile->eFileLock==0 );'), (24649, 2, u'-    assert( pInode->nShared>0 );'), (24683, 2, u'-    assert( pInode->nShared==0 );'), (24684, 2, u'-    assert( pInode->eFileLock==0 );'), (24685, 2, u'-    assert( rc==SQLITE_OK );'), (24724, 2, u'-    assert( 0!=pFile->eFileLock );'), (24727, 2, u'-    assert( eFileLock==RESERVED_LOCK || eFileLock==EXCLUSIVE_LOCK );'), (24810, 2, u'-  assert( pFile );'), (24815, 2, u'-  assert( eFileLock<=SHARED_LOCK );'), (24821, 2, u'-  assert( pInode->nShared!=0 );'), (24823, 2, u'-    assert( pInode->eFileLock==pFile->eFileLock );'), (24850, 2, u'-      assert( handleNFSUnlock==0 );'), (24916, 2, u'-    lock.l_len = 2L;  assert( PENDING_BYTE+1==RESERVED_BYTE );'), (24950, 2, u'-    assert( pInode->nLock>=0 );'), (24970, 2, u'-  assert( eFileLock==SHARED_LOCK || ((unixFile *)id)->nFetchOut==0 );'), (25023, 2, u'-  assert( pFile->pInode->nLock>0 || pFile->pInode->bProcessLock==0 );'), (25127, 2, u'-  assert( pFile );'), (25226, 2, u'-  assert( pFile );'), (25229, 2, u'-  assert( eFileLock<=SHARED_LOCK );'), (25245, 2, u'-  assert( eFileLock==NO_LOCK );'), (25323, 2, u'-  assert( pFile );'), (25402, 2, u'-  assert( pFile );'), (25445, 2, u'-  assert( pFile );'), (25448, 2, u'-  assert( eFileLock<=SHARED_LOCK );'), (25515, 2, u'-  assert( pFile );'), (25614, 2, u'-  assert( pFile );'), (25615, 2, u'-  assert( pSem );'), (25618, 2, u'-  assert( eFileLock<=SHARED_LOCK );'), (25651, 2, u'-    assert( pFile );'), (25760, 2, u'-  assert( pFile );'), (25828, 2, u'-  assert( pFile );'), (25848, 2, u'-  assert( pFile->eFileLock!=NO_LOCK || eFileLock==SHARED_LOCK );'), (25849, 2, u'-  assert( eFileLock!=PENDING_LOCK );'), (25850, 2, u'-  assert( eFileLock!=RESERVED_LOCK || pFile->eFileLock==SHARED_LOCK );'), (25873, 2, u'-    assert( eFileLock==SHARED_LOCK );'), (25874, 2, u'-    assert( pFile->eFileLock==0 );'), (25875, 2, u'-    assert( pInode->nShared>0 );'), (25904, 2, u'-    assert( pInode->nShared==0 );'), (25905, 2, u'-    assert( pInode->eFileLock==0 );'), (25944, 2, u'-    assert( 0!=pFile->eFileLock );'), (26014, 2, u'-  assert( pFile );'), (26019, 2, u'-  assert( eFileLock<=SHARED_LOCK );'), (26025, 2, u'-  assert( pInode->nShared!=0 );'), (26027, 2, u'-    assert( pInode->eFileLock==pFile->eFileLock );'), (26041, 2, u'-    assert( pFile->inNormalWrite==0'), (26092, 2, u'-      assert( pInode->nLock>=0 );'), (26193, 2, u'-  assert( cnt==(cnt&0x1ffff) );'), (26247, 2, u'-  assert( id );'), (26248, 2, u'-  assert( offset>=0 );'), (26249, 2, u'-  assert( amt>0 );'), (26254, 2, u'-  assert( pFile->pUnused==0'), (26307, 2, u'-  assert( nBuf==(nBuf&0x1ffff) );'), (26360, 2, u'-  assert( id );'), (26361, 2, u'-  assert( amt>0 );'), (26366, 2, u'-  assert( pFile->pUnused==0'), (26619, 2, u'-  assert((flags&0x0F)==SQLITE_SYNC_NORMAL'), (26628, 2, u'-  assert( pFile );'), (26663, 2, u'-  assert( pFile );'), (26711, 2, u'-  assert( id );'), (27119, 2, u'-  assert( sqlite3_mutex_held(pShmNode->mutex) || pShmNode->nRef==0 );'), (27122, 2, u'-  assert( n==1 || lockType!=F_RDLCK );'), (27125, 2, u'-  assert( n>=1 && n<SQLITE_SHM_NLOCK );'), (27154, 2, u'-      assert( lockType==F_WRLCK );'), (27165, 2, u'-      assert( lockType==F_WRLCK );'), (27186, 2, u'-  assert( unixMutexHeld() );'), (27189, 2, u'-    assert( p->pInode==pFd->pInode );'), (27255, 2, u'-  assert( pDbFd->pShm==0 );'), (27408, 2, u'-  assert( szRegion==pShmNode->szRegion || pShmNode->nRegion==0 );'), (27409, 2, u'-  assert( pShmNode->pInode==pDbFd->pInode );'), (27410, 2, u'-  assert( pShmNode->h>=0 || pDbFd->pInode->bProcessLock==1 );'), (27411, 2, u'-  assert( pShmNode->h<0 || pDbFd->pInode->bProcessLock==0 );'), (27450, 2, u'-          assert( (nByte % pgsz)==0 );'), (27527, 2, u'-  assert( pShmNode==pDbFd->pInode->pShmNode );'), (27528, 2, u'-  assert( pShmNode->pInode==pDbFd->pInode );'), (27529, 2, u'-  assert( ofst>=0 && ofst+n<=SQLITE_SHM_NLOCK );'), (27530, 2, u'-  assert( n>=1 );'), (27531, 2, u'-  assert( flags==(SQLITE_SHM_LOCK | SQLITE_SHM_SHARED)'), (27535, 2, u'-  assert( n==1 || (flags & SQLITE_SHM_EXCLUSIVE)!=0 );'), (27536, 2, u'-  assert( pShmNode->h>=0 || pDbFd->pInode->bProcessLock==1 );'), (27537, 2, u'-  assert( pShmNode->h<0 || pDbFd->pInode->bProcessLock==0 );'), (27540, 2, u'-  assert( n>1 || mask==(1<<ofst) );'), (27548, 2, u'-      assert( (pX->exclMask & (p->exclMask|p->sharedMask))==0 );'), (27609, 2, u'-        assert( (p->sharedMask & mask)==0 );'), (27655, 2, u'-  assert( pShmNode==pDbFd->pInode->pShmNode );'), (27656, 2, u'-  assert( pShmNode->pInode==pDbFd->pInode );'), (27672, 2, u'-  assert( pShmNode->nRef>0 );'), (27695, 2, u'-  assert( pFd->nFetchOut==0 );'), (27748, 2, u'-  assert( pFd->nFetchOut==0 );'), (27749, 2, u'-  assert( nNew>pFd->mmapSize );'), (27750, 2, u'-  assert( nNew<=pFd->mmapSizeMax );'), (27751, 2, u'-  assert( nNew>0 );'), (27752, 2, u'-  assert( pFd->mmapSizeActual>=pFd->mmapSize );'), (27753, 2, u'-  assert( MAP_FAILED!=0 );'), (27829, 2, u'-  assert( nMap>=0 || pFd->nFetchOut==0 );'), (27906, 2, u'-  assert( (p==0)==(pFd->nFetchOut==0) );'), (27909, 2, u'-  assert( p==0 || p==&((u8 *)pFd->pMapRegion)[iOff] );'), (27917, 2, u'-  assert( pFd->nFetchOut>=0 );'), (28228, 2, u'-  assert( pNew->pInode==NULL );'), (28235, 2, u"-  assert( zFilename==0 || zFilename[0]=='/'"), (28238, 2, u"-  assert( zFilename==0 || zFilename[0]=='/' );"), (28242, 2, u'-  assert( zFilename!=0 || (ctrlFlags & UNIXFILE_NOLOCK)!=0 );'), (28344, 2, u'-    assert( zFilename!=0 );'), (28591, 2, u'-      assert( nDb>0 );'), (28592, 2, u"-      assert( zPath[nDb]!='\\n' );"), (28684, 2, u'-  assert((isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly));'), (28685, 2, u'-  assert(isCreate==0 || isReadWrite);'), (28686, 2, u'-  assert(isExclusive==0 || isCreate);'), (28687, 2, u'-  assert(isDelete==0 || isCreate);'), (28691, 2, u'-  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_DB );'), (28692, 2, u'-  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_JOURNAL );'), (28693, 2, u'-  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MASTER_JOURNAL );'), (28694, 2, u'-  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_WAL );'), (28697, 2, u'-  assert( eType==SQLITE_OPEN_MAIN_DB      || eType==SQLITE_OPEN_TEMP_DB'), (28721, 2, u'-    assert( (flags & SQLITE_OPEN_URI) || zName[strlen(zName)+1]==0 );'), (28725, 2, u'-    assert(isDelete && !syncDir);'), (28734, 2, u'-    assert( zName[strlen(zName)+1]==0 );'), (28753, 2, u'-      assert( !p->pUnused );'), (28754, 2, u'-      assert( eType==SQLITE_OPEN_WAL || eType==SQLITE_OPEN_MAIN_JOURNAL );'), (28781, 2, u'-  assert( fd>=0 );'), (28954, 2, u'-      assert(!"Invalid flags argument");'), (28990, 2, u'-  assert( pVfs->mxPathname==MAX_PATHNAME );'), (29075, 2, u'-  assert((size_t)nBuf>=(sizeof(time_t)+sizeof(int)));'), (29100, 2, u'-      assert( sizeof(t)+sizeof(pid)<=(size_t)nBuf );'), (29443, 2, u'-  assert(lockPath!=NULL);'), (29574, 2, u'-  assert(PROXY_HOSTIDLEN == sizeof(uuid_t));'), (29704, 2, u'-      assert( nTries>1 );'), (29730, 2, u'-      assert( nTries==3 );'), (30030, 2, u'-  assert( (int)strlen(conchPath) == len+7 );'), (30080, 2, u'-    assert( (int)strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (30091, 2, u'-    assert( strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (30242, 2, u'-      assert( 0 );  /* The call assures that only valid opcodes are sent */'), (30487, 2, u'-  assert( ArraySize(aSyscall)==24 );'), (30982, 2, u'-#define winMemAssertMagic() assert( win_mem_data.magic==WINMEM_MAGIC )'), (30984, 2, u'-#define winMemAssertMagic()'), (31721, 2, u'-  assert( nMin==-1 || nMin==0 || nMin<SQLITE_WIN32_DBG_BUF_SIZE );'), (31763, 2, u'-  assert( sleepObj!=NULL );'), (31805, 2, u'-  winMemAssertMagic();'), (31807, 2, u'-  assert( hHeap!=0 );'), (31808, 2, u'-  assert( hHeap!=INVALID_HANDLE_VALUE );'), (31810, 2, u'-  assert ( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (31812, 2, u'-  assert( nBytes>=0 );'), (31827, 2, u'-  winMemAssertMagic();'), (31829, 2, u'-  assert( hHeap!=0 );'), (31830, 2, u'-  assert( hHeap!=INVALID_HANDLE_VALUE );'), (31832, 2, u'-  assert ( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, pPrior) );'), (31848, 2, u'-  winMemAssertMagic();'), (31850, 2, u'-  assert( hHeap!=0 );'), (31851, 2, u'-  assert( hHeap!=INVALID_HANDLE_VALUE );'), (31853, 2, u'-  assert ( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, pPrior) );'), (31855, 2, u'-  assert( nBytes>=0 );'), (31876, 2, u'-  winMemAssertMagic();'), (31878, 2, u'-  assert( hHeap!=0 );'), (31879, 2, u'-  assert( hHeap!=INVALID_HANDLE_VALUE );'), (31881, 2, u'-  assert ( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (31907, 2, u'-  assert( pWinMemData->magic==WINMEM_MAGIC );'), (31922, 2, u'-    assert( pWinMemData->bOwned );'), (31932, 2, u'-  assert( !pWinMemData->bOwned );'), (31934, 2, u'-  assert( pWinMemData->hHeap!=0 );'), (31935, 2, u'-  assert( pWinMemData->hHeap!=INVALID_HANDLE_VALUE );'), (31937, 2, u'-  assert( osHeapValidate(pWinMemData->hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (31950, 2, u'-    assert( pWinMemData->hHeap!=INVALID_HANDLE_VALUE );'), (31952, 2, u'-    assert( osHeapValidate(pWinMemData->hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (32154, 2, u'-  assert( !ppDirectory || type==SQLITE_WIN32_DATA_DIRECTORY_TYPE'), (32157, 2, u'-  assert( !ppDirectory || sqlite3MemdebugHasType(*ppDirectory, MEMTYPE_HEAP) );'), (32281, 2, u'-  assert( errcode!=SQLITE_OK );'), (32614, 2, u'-      assert(nNumberOfBytesToUnlockLow == (DWORD)SHARED_SIZE);'), (32622, 2, u'-      assert(nNumberOfBytesToUnlockLow == (DWORD)SHARED_SIZE'), (32816, 2, u'-  assert( id!=0 );'), (32818, 2, u'-  assert( pFile->pShm==0 );'), (32820, 2, u'-  assert( pFile->h!=NULL && pFile->h!=INVALID_HANDLE_VALUE );'), (32875, 2, u'-  assert( id!=0 );'), (32876, 2, u'-  assert( amt>0 );'), (32877, 2, u'-  assert( offset>=0 );'), (32946, 2, u'-  assert( amt>0 );'), (32947, 2, u'-  assert( pFile );'), (33001, 2, u'-      assert( nWrite==0 || nWrite<=(DWORD)nRem );'), (33044, 2, u'-  assert( pFile );'), (33113, 2, u'-  assert( pFile );'), (33115, 2, u'-  assert((flags&0x0F)==SQLITE_SYNC_NORMAL'), (33163, 2, u'-  assert( id!=0 );'), (33164, 2, u'-  assert( pSize!=0 );'), (33327, 2, u'-  assert( id!=0 );'), (33342, 2, u'-  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (33343, 2, u'-  assert( locktype!=PENDING_LOCK );'), (33344, 2, u'-  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (33377, 2, u'-    assert( pFile->locktype==NO_LOCK );'), (33389, 2, u'-    assert( pFile->locktype==SHARED_LOCK );'), (33408, 2, u'-    assert( pFile->locktype>=SHARED_LOCK );'), (33456, 2, u'-  assert( id!=0 );'), (33489, 2, u'-  assert( pFile!=0 );'), (33490, 2, u'-  assert( locktype<=SHARED_LOCK );'), (33788, 2, u'-  assert( sqlite3_mutex_held(pFile->mutex) || pFile->nRef==0 );'), (33831, 2, u'-  assert( winShmMutexHeld() );'), (33882, 2, u'-  assert( pDbFd->pShm==0 );    /* Not previously opened */'), (34014, 2, u'-  assert( pShmNode->nRef>0 );'), (34040, 2, u'-  assert( ofst>=0 && ofst+n<=SQLITE_SHM_NLOCK );'), (34041, 2, u'-  assert( n>=1 );'), (34042, 2, u'-  assert( flags==(SQLITE_SHM_LOCK | SQLITE_SHM_SHARED)'), (34046, 2, u'-  assert( n==1 || (flags & SQLITE_SHM_EXCLUSIVE)!=0 );'), (34049, 2, u'-  assert( n>1 || mask==(1<<ofst) );'), (34057, 2, u'-      assert( (pX->exclMask & (p->exclMask|p->sharedMask))==0 );'), (34118, 2, u'-        assert( (p->sharedMask & mask)==0 );'), (34184, 2, u'-  assert( szRegion==pShmNode->szRegion || pShmNode->nRegion==0 );'), (34305, 2, u'-  assert( pFile!=0 );'), (34358, 2, u'-  assert( nMap>=0 || pFd->nFetchOut==0 );'), (34410, 2, u'-    assert( (nMap % winSysInfo.dwPageSize)==0 );'), (34414, 2, u'-    assert( sizeof(SIZE_T)==sizeof(sqlite3_int64) || nMap<=0xffffffff );'), (34498, 2, u'-  assert( (p==0)==(pFd->nFetchOut==0) );'), (34501, 2, u'-  assert( p==0 || p==&((u8 *)pFd->pMapRegion)[iOff] );'), (34516, 2, u'-  assert( pFd->nFetchOut>=0 );'), (34753, 2, u'-  assert((isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly));'), (34754, 2, u'-  assert(isCreate==0 || isReadWrite);'), (34755, 2, u'-  assert(isExclusive==0 || isCreate);'), (34756, 2, u'-  assert(isDelete==0 || isCreate);'), (34760, 2, u'-  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_DB );'), (34761, 2, u'-  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_JOURNAL );'), (34762, 2, u'-  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MASTER_JOURNAL );'), (34763, 2, u'-  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_WAL );'), (34766, 2, u'-  assert( eType==SQLITE_OPEN_MAIN_DB      || eType==SQLITE_OPEN_TEMP_DB'), (34772, 2, u'-  assert( pFile!=0 );'), (34787, 2, u'-    assert(isDelete && !isOpenJournal);'), (34801, 2, u'-  assert( (eType!=SQLITE_OPEN_MAIN_DB) || (flags & SQLITE_OPEN_URI) ||'), (35159, 2, u'-      assert(!"Invalid flags argument");'), (35220, 2, u'-  assert( pVfs->mxPathname>=MAX_PATH );'), (35221, 2, u'-  assert( nFull>=pVfs->mxPathname );'), (35602, 2, u'-  assert( ArraySize(aSyscall)==74 );'), (35611, 2, u'-  assert( winSysInfo.dwAllocationGranularity>0 );'), (35612, 2, u'-  assert( winSysInfo.dwPageSize>0 );'), (35746, 2, u'-  assert( sizeof(*p)==BITVEC_SZ );'), (35798, 2, u'-  assert( i>0 );'), (35799, 2, u'-  assert( i<=p->iSize );'), (35868, 2, u'-  assert( i>0 );'), (36078, 2, u'-#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (36079, 2, u'-# define expensive_assert(X)  assert(X)'), (36081, 2, u'-# define expensive_assert(X)'), (36086, 2, u'-#if !defined(NDEBUG) && defined(SQLITE_ENABLE_EXPENSIVE_ASSERT)'), (36097, 2, u'-    assert( p->nRef || (p->flags&PGHDR_NEED_SYNC) );'), (36109, 2, u'-  assert( pPage->pDirtyNext || pPage==p->pDirtyTail );'), (36110, 2, u'-  assert( pPage->pDirtyPrev || pPage==p->pDirty );'), (36124, 2, u'-    assert( pPage==p->pDirtyTail );'), (36130, 2, u'-    assert( pPage==p->pDirty );'), (36136, 2, u'-  expensive_assert( pcacheCheckSynced(p) );'), (36146, 2, u'-  assert( pPage->pDirtyNext==0 && pPage->pDirtyPrev==0 && p->pDirty!=pPage );'), (36150, 2, u'-    assert( pPage->pDirtyNext->pDirtyPrev==0 );'), (36160, 2, u'-  expensive_assert( pcacheCheckSynced(p) );'), (36231, 2, u'-  assert( pCache->nRef==0 && pCache->pDirty==0 );'), (36264, 2, u'-  assert( pCache!=0 );'), (36265, 2, u'-  assert( createFlag==1 || createFlag==0 );'), (36266, 2, u'-  assert( pgno>0 );'), (36296, 2, u'-    expensive_assert( pcacheCheckSynced(pCache) );'), (36335, 2, u'-    assert( pPgHdr->pCache==pCache );'), (36336, 2, u'-    assert( pPgHdr->pgno==pgno );'), (36337, 2, u'-    assert( pPgHdr->pData==pPage->pBuf );'), (36338, 2, u'-    assert( pPgHdr->pExtra==(void *)&pPgHdr[1] );'), (36357, 2, u'-  assert( p->nRef>0 );'), (36376, 2, u'-  assert(p->nRef>0);'), (36387, 2, u'-  assert( p->nRef==1 );'), (36405, 2, u'-  assert( p->nRef>0 );'), (36452, 2, u'-  assert( p->nRef>0 );'), (36453, 2, u'-  assert( newPgno>0 );'), (36481, 2, u'-      assert( p->pgno>0 );'), (36483, 2, u'-        assert( p->flags&PGHDR_DIRTY );'), (36856, 2, u'-  assert( sqlite3_mutex_notheld(pcache1.grp.mutex) );'), (36865, 2, u'-      assert( pcache1.nFreeSlot>=0 );'), (36903, 2, u'-    assert( pcache1.nFreeSlot<=pcache1.nSlot );'), (36906, 2, u'-    assert( sqlite3MemdebugHasType(p, MEMTYPE_PCACHE) );'), (36928, 2, u'-    assert( sqlite3MemdebugHasType(p, MEMTYPE_PCACHE) );'), (36947, 2, u'-  assert( sqlite3_mutex_held(pCache->pGroup->mutex) );'), (36984, 2, u'-    assert( sqlite3_mutex_held(p->pCache->pGroup->mutex) );'), (37050, 2, u'-  assert( sqlite3_mutex_held(p->pGroup->mutex) );'), (37097, 2, u'-  assert( sqlite3_mutex_held(pGroup->mutex) );'), (37129, 2, u'-  assert( sqlite3_mutex_held(pCache->pGroup->mutex) );'), (37142, 2, u'-  assert( sqlite3_mutex_held(pGroup->mutex) );'), (37145, 2, u'-    assert( p->pCache->pGroup==pGroup );'), (37165, 2, u'-  assert( sqlite3_mutex_held(pCache->pGroup->mutex) );'), (37181, 2, u'-  assert( pCache->nPage==nPage );'), (37192, 2, u'-  assert( pcache1.isInit==0 );'), (37210, 2, u'-  assert( pcache1.isInit!=0 );'), (37242, 2, u'-  assert( (szPage & (szPage-1))==0 && szPage>=512 && szPage<=65536 );'), (37243, 2, u'-  assert( szExtra < 300 );'), (37383, 2, u'-  assert( pCache->bPurgeable || createFlag!=1 );'), (37384, 2, u'-  assert( pCache->bPurgeable || pCache->nMin==0 );'), (37385, 2, u'-  assert( pCache->bPurgeable==0 || pCache->nMin==10 );'), (37386, 2, u'-  assert( pCache->nMin==0 || pCache->bPurgeable );'), (37413, 2, u'-  assert( pCache->nPage >= pCache->nRecyclable );'), (37415, 2, u'-  assert( pGroup->mxPinned == pGroup->nMaxPage + 10 - pGroup->nMinPage );'), (37416, 2, u'-  assert( pCache->n90pct == pCache->nMax*9/10 );'), (37443, 2, u'-    assert( (pCache->szPage & (pCache->szPage-1))==0 && pCache->szPage>=512 );'), (37444, 2, u'-    assert( pCache->szExtra<512 );'), (37445, 2, u'-    assert( (pOther->szPage & (pOther->szPage-1))==0 && pOther->szPage>=512 );'), (37446, 2, u'-    assert( pOther->szExtra<512 );'), (37500, 2, u'-  assert( pPage->pCache==pCache );'), (37506, 2, u'-  assert( pPage->pLruPrev==0 && pPage->pLruNext==0 );'), (37507, 2, u'-  assert( pGroup->pLruHead!=pPage && pGroup->pLruTail!=pPage );'), (37541, 2, u'-  assert( pPage->iKey==iOld );'), (37542, 2, u'-  assert( pPage->pCache==pCache );'), (37589, 2, u'-  assert( pCache->bPurgeable || (pCache->nMax==0 && pCache->nMin==0) );'), (37592, 2, u'-  assert( pGroup->nMaxPage >= pCache->nMax );'), (37594, 2, u'-  assert( pGroup->nMinPage >= pCache->nMin );'), (37639, 2, u'-  assert( sqlite3_mutex_notheld(pcache1.grp.mutex) );'), (37640, 2, u'-  assert( sqlite3_mutex_notheld(pcache1.mutex) );'), (37821, 2, u'-  assert( N >= ROUND8(sizeof(*p)) );'), (37863, 2, u'-  assert( p!=0 );'), (37890, 2, u'-  assert( p!=0 && (p->rsFlags & ROWSET_NEXT)==0 );'), (37923, 2, u'-    assert( pA->pRight==0 || pA->v<=pA->pRight->v );'), (37924, 2, u'-    assert( pB->pRight==0 || pB->v<=pB->pRight->v );'), (37938, 2, u'-    assert( pA->pRight==0 || pA->v<=pA->pRight->v );'), (37941, 2, u'-    assert( pB==0 || pB->pRight==0 || pB->v<=pB->pRight->v );'), (37984, 2, u'-  assert( pIn!=0 );'), (37997, 2, u'-  assert( (*ppLast)->pRight==0 );'), (38049, 2, u'-  assert( pList!=0 );'), (38072, 2, u'-  assert( p!=0 && (p->rsFlags & ROWSET_NEXT)==0 );'), (38082, 2, u'-  assert( p->pForest==0 );'), (38106, 2, u'-  assert( p!=0 );'), (38136, 2, u'-  assert( pRowSet!=0 && (pRowSet->rsFlags & ROWSET_NEXT)==0 );'), (39159, 2, u'-static int assert_pager_state(Pager *p){'), (39163, 2, u'-  assert( p->eState==PAGER_OPEN'), (39176, 2, u'-  assert( p->tempFile==0 || p->eLock==EXCLUSIVE_LOCK );'), (39177, 2, u'-  assert( p->tempFile==0 || pPager->changeCountDone );'), (39182, 2, u'-  assert( p->journalMode==PAGER_JOURNALMODE_OFF || p->useJournal );'), (39183, 2, u'-  assert( p->journalMode!=PAGER_JOURNALMODE_OFF || !isOpen(p->jfd) );'), (39194, 2, u'-    assert( p->noSync );'), (39195, 2, u'-    assert( p->journalMode==PAGER_JOURNALMODE_OFF'), (39198, 2, u'-    assert( p->eState!=PAGER_ERROR && p->eState!=PAGER_OPEN );'), (39199, 2, u'-    assert( pagerUseWal(p)==0 );'), (39205, 2, u'-  assert( pPager->changeCountDone==0 || pPager->eLock>=RESERVED_LOCK );'), (39206, 2, u'-  assert( p->eLock!=PENDING_LOCK );'), (39210, 2, u'-      assert( !MEMDB );'), (39211, 2, u'-      assert( pPager->errCode==SQLITE_OK );'), (39212, 2, u'-      assert( sqlite3PcacheRefCount(pPager->pPCache)==0 || pPager->tempFile );'), (39216, 2, u'-      assert( pPager->errCode==SQLITE_OK );'), (39217, 2, u'-      assert( p->eLock!=UNKNOWN_LOCK );'), (39218, 2, u'-      assert( p->eLock>=SHARED_LOCK );'), (39222, 2, u'-      assert( p->eLock!=UNKNOWN_LOCK );'), (39223, 2, u'-      assert( pPager->errCode==SQLITE_OK );'), (39225, 2, u'-        assert( p->eLock>=RESERVED_LOCK );'), (39227, 2, u'-      assert( pPager->dbSize==pPager->dbOrigSize );'), (39228, 2, u'-      assert( pPager->dbOrigSize==pPager->dbFileSize );'), (39229, 2, u'-      assert( pPager->dbOrigSize==pPager->dbHintSize );'), (39230, 2, u'-      assert( pPager->setMaster==0 );'), (39234, 2, u'-      assert( p->eLock!=UNKNOWN_LOCK );'), (39235, 2, u'-      assert( pPager->errCode==SQLITE_OK );'), (39242, 2, u'-        assert( p->eLock>=RESERVED_LOCK );'), (39243, 2, u'-        assert( isOpen(p->jfd)'), (39248, 2, u'-      assert( pPager->dbOrigSize==pPager->dbFileSize );'), (39249, 2, u'-      assert( pPager->dbOrigSize==pPager->dbHintSize );'), (39253, 2, u'-      assert( p->eLock==EXCLUSIVE_LOCK );'), (39254, 2, u'-      assert( pPager->errCode==SQLITE_OK );'), (39255, 2, u'-      assert( !pagerUseWal(pPager) );'), (39256, 2, u'-      assert( p->eLock>=EXCLUSIVE_LOCK );'), (39257, 2, u'-      assert( isOpen(p->jfd)'), (39261, 2, u'-      assert( pPager->dbOrigSize<=pPager->dbHintSize );'), (39265, 2, u'-      assert( p->eLock==EXCLUSIVE_LOCK );'), (39266, 2, u'-      assert( pPager->errCode==SQLITE_OK );'), (39267, 2, u'-      assert( !pagerUseWal(pPager) );'), (39268, 2, u'-      assert( isOpen(p->jfd)'), (39279, 2, u'-      assert( pPager->errCode!=SQLITE_OK );'), (39280, 2, u'-      assert( sqlite3PcacheRefCount(pPager->pPCache)>0 );'), (39412, 2, u'-  assert( !pPager->exclusiveMode || pPager->eLock==eLock );'), (39413, 2, u'-  assert( eLock==NO_LOCK || eLock==SHARED_LOCK );'), (39414, 2, u'-  assert( eLock!=NO_LOCK || pagerUseWal(pPager)==0 );'), (39416, 2, u'-    assert( pPager->eLock>=eLock );'), (39439, 2, u'-  assert( eLock==SHARED_LOCK || eLock==RESERVED_LOCK || eLock==EXCLUSIVE_LOCK );'), (39469, 2, u'-  assert( !MEMDB );'), (39475, 2, u'-    assert( isOpen(pPager->fd) );'), (39480, 2, u'-    assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (39481, 2, u'-    assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (39523, 2, u'-  assert( pPager->eState!=PAGER_ERROR );'), (39524, 2, u'-  assert( (pPg->flags&PGHDR_DIRTY) || pPg->pageHash==pager_pagehash(pPg) );'), (39618, 2, u'-  assert( offset%JOURNAL_HDR_SZ(pPager)==0 );'), (39619, 2, u'-  assert( offset>=c );'), (39620, 2, u'-  assert( (offset-c)<JOURNAL_HDR_SZ(pPager) );'), (39647, 2, u'-  assert( isOpen(pPager->jfd) );'), (39701, 2, u'-  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (39739, 2, u'-  assert( isOpen(pPager->fd) || pPager->noSync );'), (39788, 2, u'-    assert( pPager->journalHdr <= pPager->journalOff );'), (39823, 2, u'-  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (39944, 2, u'-  assert( pPager->setMaster==0 );'), (39945, 2, u'-  assert( !pagerUseWal(pPager) );'), (39954, 2, u'-  assert( isOpen(pPager->jfd) );'), (39955, 2, u'-  assert( pPager->journalHdr <= pPager->journalOff );'), (40058, 2, u'-      assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (40083, 2, u'-  assert( pPager->eState==PAGER_READER'), (40093, 2, u'-    assert( !isOpen(pPager->jfd) );'), (40105, 2, u'-    assert( (PAGER_JOURNALMODE_MEMORY   & 5)!=1 );'), (40106, 2, u'-    assert( (PAGER_JOURNALMODE_OFF      & 5)!=1 );'), (40107, 2, u'-    assert( (PAGER_JOURNALMODE_WAL      & 5)!=1 );'), (40108, 2, u'-    assert( (PAGER_JOURNALMODE_DELETE   & 5)!=1 );'), (40109, 2, u'-    assert( (PAGER_JOURNALMODE_TRUNCATE & 5)==1 );'), (40110, 2, u'-    assert( (PAGER_JOURNALMODE_PERSIST  & 5)==1 );'), (40131, 2, u'-    assert( pPager->errCode || pPager->eState!=PAGER_ERROR );'), (40142, 2, u'-    assert( !MEMDB );'), (40175, 2, u'-  assert( rc==SQLITE_OK || !MEMDB );'), (40176, 2, u'-  assert('), (40260, 2, u'-  assert( assert_pager_state(pPager) );'), (40261, 2, u'-  assert( pPager->eState!=PAGER_ERROR );'), (40267, 2, u'-  assert( isOpen(pPager->jfd) || pPager->pInJournal==0 );'), (40269, 2, u'-    assert( !pagerUseWal(pPager) );'), (40273, 2, u'-      assert( pPager->journalMode==PAGER_JOURNALMODE_MEMORY );'), (40294, 2, u'-      assert( pPager->journalMode==PAGER_JOURNALMODE_DELETE'), (40328, 2, u'-    assert( rc2==SQLITE_OK );'), (40336, 2, u'-    assert( pPager->eLock==EXCLUSIVE_LOCK );'), (40371, 2, u'-    assert( assert_pager_state(pPager) );'), (40377, 2, u'-      assert( pPager->eState==PAGER_READER );'), (40480, 2, u'-  assert( (isMainJrnl&~1)==0 );      /* isMainJrnl is 0 or 1 */'), (40481, 2, u'-  assert( (isSavepnt&~1)==0 );       /* isSavepnt is 0 or 1 */'), (40482, 2, u'-  assert( isMainJrnl || pDone );     /* pDone always used on sub-journals */'), (40483, 2, u'-  assert( isSavepnt || pDone==0 );   /* pDone never used on non-savepoint */'), (40486, 2, u'-  assert( aData );         /* Temp storage must have already been allocated */'), (40487, 2, u'-  assert( pagerUseWal(pPager)==0 || (!isMainJrnl && isSavepnt) );'), (40495, 2, u'-  assert( pPager->eState>=PAGER_WRITER_CACHEMOD'), (40498, 2, u'-  assert( pPager->eState>=PAGER_WRITER_CACHEMOD || isMainJrnl );'), (40516, 2, u'-    assert( !isSavepnt );'), (40584, 2, u'-  assert( pPg || !MEMDB );'), (40585, 2, u'-  assert( pPager->eState!=PAGER_OPEN || pPg==0 );'), (40601, 2, u'-    assert( !pagerUseWal(pPager) );'), (40628, 2, u'-    assert( isSavepnt );'), (40629, 2, u'-    assert( pPager->doNotSpill==0 );'), (40632, 2, u'-    assert( pPager->doNotSpill==1 );'), (40669, 2, u'-      assert( !pagerUseWal(pPager) );'), (40813, 2, u'-    assert( !isOpen(pJournal) );'), (40842, 2, u'-  assert( pPager->eState!=PAGER_ERROR );'), (40843, 2, u'-  assert( pPager->eState!=PAGER_READER );'), (40850, 2, u'-    assert( pPager->eLock==EXCLUSIVE_LOCK );'), (40881, 2, u'-    assert( MAX_SECTOR_SIZE>=512 );'), (40911, 2, u'-  assert( isOpen(pPager->fd) || pPager->tempFile );'), (40998, 2, u'-  assert( isOpen(pPager->jfd) );'), (41051, 2, u'-      assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) );'), (41120, 2, u'-  assert( 0 );'), (41197, 2, u'-  assert( pPager->eState>=PAGER_READER && !MEMDB );'), (41198, 2, u'-  assert( isOpen(pPager->fd) );'), (41201, 2, u'-    assert( pPager->tempFile );'), (41291, 2, u'-  assert( pagerUseWal(pPager) );'), (41369, 2, u'-  assert( pPager->pWal );'), (41370, 2, u'-  assert( pList );'), (41374, 2, u'-    assert( p->pgno < p->pDirty->pgno );'), (41378, 2, u'-  assert( pList->pDirty==0 || isCommit );'), (41393, 2, u'-    assert( pList );'), (41432, 2, u'-  assert( pagerUseWal(pPager) );'), (41433, 2, u'-  assert( pPager->eState==PAGER_OPEN || pPager->eState==PAGER_READER );'), (41470, 2, u'-  assert( pPager->eState==PAGER_OPEN );'), (41471, 2, u'-  assert( pPager->eLock>=SHARED_LOCK );'), (41482, 2, u'-    assert( isOpen(pPager->fd) || pPager->tempFile );'), (41525, 2, u'-  assert( pPager->eState==PAGER_OPEN );'), (41526, 2, u'-  assert( pPager->eLock>=SHARED_LOCK );'), (41598, 2, u'-  assert( pPager->eState!=PAGER_ERROR );'), (41599, 2, u'-  assert( pPager->eState>=PAGER_WRITER_LOCKED );'), (41625, 2, u'-  assert( pagerUseWal(pPager)==0 || szJ==0 );'), (41640, 2, u'-    assert( rc!=SQLITE_DONE );'), (41655, 2, u'-    assert( rc!=SQLITE_DONE );'), (41670, 2, u'-    assert( rc!=SQLITE_DONE );'), (41672, 2, u'-  assert( rc!=SQLITE_OK || pPager->journalOff>=szJ );'), (41686, 2, u'-      assert( offset==(i64)ii*(4+pPager->pageSize) );'), (41689, 2, u'-    assert( rc!=SQLITE_DONE );'), (41787, 2, u'-  assert( level>=1 && level<=3 );'), (41848, 2, u'-  assert( rc!=SQLITE_OK || isOpen(pFile) );'), (41883, 2, u'-    assert( ((int(*)(void *))(ap[0]))==xBusyHandler );'), (41884, 2, u'-    assert( ap[1]==pBusyHandlerArg );'), (41933, 2, u'-  assert( pageSize==0 || (pageSize>=512 && pageSize<=SQLITE_MAX_PAGE_SIZE) );'), (41962, 2, u'-    assert( nReserve>=0 && nReserve<1000 );'), (41993, 2, u'-  assert( pPager->eState!=PAGER_OPEN );      /* Called only by OP_MaxPgcnt */'), (41994, 2, u'-  assert( pPager->mxPgno>=pPager->dbSize );  /* OP_MaxPgcnt enforces this */'), (42039, 2, u'-  assert( isOpen(pPager->fd) || pPager->tempFile );'), (42045, 2, u'-  assert( !pagerUseWal(pPager) );'), (42065, 2, u'-  assert( pPager->eState>=PAGER_READER );'), (42066, 2, u'-  assert( pPager->eState!=PAGER_WRITER_FINISHED );'), (42093, 2, u'-  assert( (pPager->eLock>=locktype)'), (42127, 2, u'-static void assertTruncateConstraintCb(PgHdr *pPg){'), (42128, 2, u'-  assert( pPg->flags&PGHDR_DIRTY );'), (42129, 2, u'-  assert( !subjRequiresPage(pPg) || pPg->pgno<=pPg->pPager->dbSize );'), (42131, 2, u'-static void assertTruncateConstraint(Pager *pPager){'), (42132, 2, u'-  sqlite3PcacheIterateDirty(pPager->pPCache, assertTruncateConstraintCb);'), (42135, 2, u'-# define assertTruncateConstraint(pPager)'), (42150, 2, u'-  assert( pPager->dbSize>=nPage );'), (42151, 2, u'-  assert( pPager->eState>=PAGER_WRITER_CACHEMOD );'), (42226, 2, u'-  assert( p->pExtra==(void *)&p[1] );'), (42227, 2, u'-  assert( p->pPage==0 );'), (42228, 2, u'-  assert( p->flags==PGHDR_MMAP );'), (42229, 2, u'-  assert( p->pPager==pPager );'), (42230, 2, u'-  assert( p->nRef==1 );'), (42249, 2, u'-  assert( pPager->fd->pMethods->iVersion>=3 );'), (42283, 2, u'-  assert( assert_pager_state(pPager) );'), (42326, 2, u'-  assert( !pPager->aSavepoint && !pPager->pInJournal );'), (42327, 2, u'-  assert( !isOpen(pPager->jfd) && !isOpen(pPager->sjfd) );'), (42387, 2, u'-  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (42390, 2, u'-  assert( assert_pager_state(pPager) );'), (42391, 2, u'-  assert( !pagerUseWal(pPager) );'), (42397, 2, u'-    assert( !pPager->tempFile );'), (42400, 2, u'-      assert( isOpen(pPager->jfd) );'), (42491, 2, u'-  assert( assert_pager_state(pPager) );'), (42531, 2, u'-  assert( !pagerUseWal(pPager) );'), (42532, 2, u'-  assert( pPager->eState==PAGER_WRITER_DBMOD );'), (42533, 2, u'-  assert( pPager->eLock==EXCLUSIVE_LOCK );'), (42540, 2, u'-    assert( pPager->tempFile && rc==SQLITE_OK );'), (42547, 2, u'-  assert( rc!=SQLITE_OK || isOpen(pPager->fd) );'), (42571, 2, u'-      assert( (pList->flags&PGHDR_NEED_SYNC)==0 );'), (42648, 2, u'-    assert( pPager->useJournal );'), (42649, 2, u'-    assert( isOpen(pPager->jfd) || pagerUseWal(pPager) );'), (42650, 2, u'-    assert( isOpen(pPager->sjfd) || pPager->nSubRec==0 );'), (42651, 2, u'-    assert( pagerUseWal(pPager)'), (42674, 2, u'-    assert( pPager->nSavepoint>0 );'), (42703, 2, u'-  assert( pPg->pPager==pPager );'), (42704, 2, u'-  assert( pPg->flags&PGHDR_DIRTY );'), (42780, 2, u'-      assert( (pPg->flags&PGHDR_NEED_SYNC)==0 );'), (42898, 2, u'-    assert( nUri>=0 );'), (42937, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(SQLITE_INT_TO_PTR(journalFileSize)) );'), (42948, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );'), (42952, 2, u'-    assert( nPathname>0 );'), (42975, 2, u'-    assert( !memDb );'), (42988, 2, u'-      assert(SQLITE_DEFAULT_PAGE_SIZE<=SQLITE_MAX_DEFAULT_PAGE_SIZE);'), (43000, 2, u'-        assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (43001, 2, u'-        assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (43002, 2, u'-        assert(SQLITE_MAX_DEFAULT_PAGE_SIZE<=65536);'), (43030, 2, u'-    assert( pPager->memDb==0 );'), (43039, 2, u'-    assert( !pPager->pTmpSpace );'), (43046, 2, u'-  assert( nExtra<1000 );'), (43064, 2, u'-  assert( pPager->state == (tempFile ? PAGER_EXCLUSIVE : PAGER_UNLOCK) );'), (43068, 2, u'-  assert( tempFile==PAGER_LOCKINGMODE_NORMAL'), (43070, 2, u'-  assert( PAGER_LOCKINGMODE_EXCLUSIVE==1 );'), (43075, 2, u'-  assert( useJournal || pPager->tempFile );'), (43078, 2, u'-    assert( pPager->fullSync==0 );'), (43079, 2, u'-    assert( pPager->syncFlags==0 );'), (43080, 2, u'-    assert( pPager->walSyncFlags==0 );'), (43081, 2, u'-    assert( pPager->ckptSyncFlags==0 );'), (43093, 2, u'-  assert( isOpen(pPager->fd) || tempFile );'), (43149, 2, u'-  assert( pPager->useJournal );'), (43150, 2, u'-  assert( isOpen(pPager->fd) );'), (43151, 2, u'-  assert( pPager->eState==PAGER_OPEN );'), (43153, 2, u'-  assert( jrnlOpen==0 || ( sqlite3OsDeviceCharacteristics(pPager->jfd) &'), (43268, 2, u'-  assert( sqlite3PcacheRefCount(pPager->pPCache)==0 );'), (43269, 2, u'-  assert( assert_pager_state(pPager) );'), (43270, 2, u'-  assert( pPager->eState==PAGER_OPEN || pPager->eState==PAGER_READER );'), (43276, 2, u'-    assert( !MEMDB );'), (43280, 2, u'-      assert( pPager->eLock==NO_LOCK || pPager->eLock==UNKNOWN_LOCK );'), (43340, 2, u'-          assert( !pPager->tempFile );'), (43342, 2, u'-          assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (43359, 2, u'-        assert( rc==SQLITE_OK );'), (43390, 2, u'-      assert( pPager->eState==PAGER_OPEN );'), (43391, 2, u'-      assert( (pPager->eLock==SHARED_LOCK)'), (43453, 2, u'-    assert( pPager->pWal==0 || rc==SQLITE_OK );'), (43458, 2, u'-    assert( rc==SQLITE_OK );'), (43468, 2, u'-    assert( !MEMDB );'), (43470, 2, u'-    assert( pPager->eState==PAGER_OPEN );'), (43563, 2, u'-  assert( pPager->eState>=PAGER_READER );'), (43564, 2, u'-  assert( assert_pager_state(pPager) );'), (43565, 2, u'-  assert( noContent==0 || bMmapOk==0 );'), (43599, 2, u'-          assert( rc==SQLITE_OK );'), (43619, 2, u'-  assert( (*ppPage)->pgno==pgno );'), (43620, 2, u'-  assert( (*ppPage)->pPager==pPager || (*ppPage)->pPager==0 );'), (43625, 2, u'-    assert( pgno<=PAGER_MAX_PGNO && pgno!=PAGER_MJ_PGNO(pPager) );'), (43671, 2, u'-      assert( pPg->pPager==pPager );'), (43684, 2, u'-  assert( rc!=SQLITE_OK );'), (43707, 2, u'-  assert( pPager!=0 );'), (43708, 2, u'-  assert( pgno!=0 );'), (43709, 2, u'-  assert( pPager->pPCache!=0 );'), (43710, 2, u'-  assert( pPager->eState>=PAGER_READER && pPager->eState!=PAGER_ERROR );'), (43761, 2, u'-  assert( pPager->eState==PAGER_WRITER_LOCKED );'), (43762, 2, u'-  assert( assert_pager_state(pPager) );'), (43763, 2, u'-  assert( pPager->pInJournal==0 );'), (43795, 2, u'-      assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (43816, 2, u'-    assert( pPager->eState==PAGER_WRITER_LOCKED );'), (43844, 2, u'-  assert( pPager->eState>=PAGER_READER && pPager->eState<PAGER_ERROR );'), (43848, 2, u'-    assert( pPager->pInJournal==0 );'), (43897, 2, u'-    assert( rc==SQLITE_OK || pPager->eState==PAGER_READER );'), (43898, 2, u'-    assert( rc!=SQLITE_OK || pPager->eState==PAGER_WRITER_LOCKED );'), (43899, 2, u'-    assert( assert_pager_state(pPager) );'), (43922, 2, u'-  assert( pPager->eState==PAGER_WRITER_LOCKED'), (43926, 2, u'-  assert( assert_pager_state(pPager) );'), (43951, 2, u'-  assert( pPager->eState>=PAGER_WRITER_CACHEMOD );'), (43952, 2, u'-  assert( assert_pager_state(pPager) );'), (43959, 2, u'-    assert( !pagerUseWal(pPager) );'), (43967, 2, u'-      assert( pagerUseWal(pPager)==0 );'), (43976, 2, u'-        assert( pPg->pgno!=PAGER_MJ_PGNO(pPager) );'), (43978, 2, u'-        assert( pPager->journalHdr<=pPager->journalOff );'), (44007, 2, u'-        assert( pPager->pInJournal!=0 );'), (44010, 2, u'-        assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (44013, 2, u'-          assert( rc==SQLITE_NOMEM );'), (44065, 2, u'-  assert( (pPg->flags & PGHDR_MMAP)==0 );'), (44066, 2, u'-  assert( pPager->eState>=PAGER_WRITER_LOCKED );'), (44067, 2, u'-  assert( pPager->eState!=PAGER_ERROR );'), (44068, 2, u'-  assert( assert_pager_state(pPager) );'), (44081, 2, u'-    assert( !MEMDB );'), (44082, 2, u'-    assert( pPager->doNotSyncSpill==0 );'), (44099, 2, u'-    assert(nPage>0);'), (44100, 2, u'-    assert(pg1<=pPg->pgno);'), (44101, 2, u'-    assert((pg1+nPage)>pPg->pgno);'), (44132, 2, u'-      assert( !MEMDB );'), (44142, 2, u'-    assert( pPager->doNotSyncSpill==1 );'), (44210, 2, u'-  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (44213, 2, u'-  assert( assert_pager_state(pPager) );'), (44227, 2, u'-  assert( isDirectMode==0 );'), (44236, 2, u'-    assert( !pPager->tempFile && isOpen(pPager->fd) );'), (44240, 2, u'-    assert( pPgHdr==0 || rc==SQLITE_OK );'), (44258, 2, u'-        assert( pPager->dbFileSize>0 );'), (44293, 2, u'-    assert( !MEMDB );'), (44296, 2, u'-    assert( !MEMDB );'), (44318, 2, u'-  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (44322, 2, u'-  assert( assert_pager_state(pPager) );'), (44362, 2, u'-  assert( pPager->eState==PAGER_WRITER_LOCKED'), (44367, 2, u'-  assert( assert_pager_state(pPager) );'), (44395, 2, u'-      assert( rc==SQLITE_OK );'), (44429, 2, u'-      assert( isOpen(pPager->jfd)'), (44479, 2, u'-        assert( rc!=SQLITE_IOERR_BLOCKED );'), (44492, 2, u'-        assert( pPager->eState==PAGER_WRITER_DBMOD );'), (44536, 2, u'-  assert( pPager->eState==PAGER_WRITER_LOCKED'), (44540, 2, u'-  assert( assert_pager_state(pPager) );'), (44557, 2, u'-    assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) || !pPager->journalOff );'), (44601, 2, u'-  assert( assert_pager_state(pPager) );'), (44626, 2, u'-  assert( pPager->eState==PAGER_READER || rc!=SQLITE_OK );'), (44627, 2, u'-  assert( rc==SQLITE_OK || rc==SQLITE_FULL || rc==SQLITE_CORRUPT'), (44700, 2, u'-  assert( eStat==SQLITE_DBSTATUS_CACHE_HIT'), (44705, 2, u'-  assert( SQLITE_DBSTATUS_CACHE_HIT+1==SQLITE_DBSTATUS_CACHE_MISS );'), (44706, 2, u'-  assert( SQLITE_DBSTATUS_CACHE_HIT+2==SQLITE_DBSTATUS_CACHE_WRITE );'), (44707, 2, u'-  assert( PAGER_STAT_HIT==0 && PAGER_STAT_MISS==1 && PAGER_STAT_WRITE==2 );'), (44736, 2, u'-  assert( pPager->eState>=PAGER_WRITER_LOCKED );'), (44737, 2, u'-  assert( assert_pager_state(pPager) );'), (44774, 2, u'-    assert( pPager->nSavepoint==nSavepoint );'), (44775, 2, u'-    assertTruncateConstraint(pPager);'), (44814, 2, u'-  assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (44815, 2, u'-  assert( iSavepoint>=0 || op==SAVEPOINT_ROLLBACK );'), (44838, 2, u'-          assert( rc==SQLITE_OK );'), (44851, 2, u'-      assert(rc!=SQLITE_DONE);'), (44958, 2, u'-  assert( pPg->nRef>0 );'), (44959, 2, u'-  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (44962, 2, u'-  assert( assert_pager_state(pPager) );'), (45010, 2, u'-    assert( pPager->journalMode==PAGER_JOURNALMODE_OFF ||'), (45012, 2, u'-    assert( pPg->flags&PGHDR_DIRTY );'), (45022, 2, u'-  assert( !pPgOld || pPgOld->nRef==1 );'), (45043, 2, u'-    assert( pPgOld );'), (45067, 2, u'-        assert( pPager->pTmpSpace!=0 );'), (45085, 2, u'-  assert( pPg->nRef>0 || pPg->pPager->memDb );'), (45108, 2, u'-  assert( eMode==PAGER_LOCKINGMODE_QUERY'), (45111, 2, u'-  assert( PAGER_LOCKINGMODE_QUERY<0 );'), (45112, 2, u'-  assert( PAGER_LOCKINGMODE_NORMAL>=0 && PAGER_LOCKINGMODE_EXCLUSIVE>=0 );'), (45113, 2, u'-  assert( pPager->exclusiveMode || 0==sqlite3WalHeapMemory(pPager->pWal) );'), (45151, 2, u'-  assert(      eMode==PAGER_JOURNALMODE_DELETE'), (45162, 2, u'-  assert( pPager->tempFile==0 || eMode!=PAGER_JOURNALMODE_WAL );'), (45168, 2, u'-    assert( eOld==PAGER_JOURNALMODE_MEMORY || eOld==PAGER_JOURNALMODE_OFF );'), (45177, 2, u'-    assert( pPager->eState!=PAGER_ERROR );'), (45184, 2, u'-    assert( (PAGER_JOURNALMODE_TRUNCATE & 5)==1 );'), (45185, 2, u'-    assert( (PAGER_JOURNALMODE_PERSIST & 5)==1 );'), (45186, 2, u'-    assert( (PAGER_JOURNALMODE_DELETE & 5)==0 );'), (45187, 2, u'-    assert( (PAGER_JOURNALMODE_MEMORY & 5)==4 );'), (45188, 2, u'-    assert( (PAGER_JOURNALMODE_OFF & 5)==0 );'), (45189, 2, u'-    assert( (PAGER_JOURNALMODE_WAL & 5)==5 );'), (45191, 2, u'-    assert( isOpen(pPager->fd) || pPager->exclusiveMode );'), (45208, 2, u'-        assert( state==PAGER_OPEN || state==PAGER_READER );'), (45213, 2, u'-          assert( rc==SQLITE_OK );'), (45224, 2, u'-        assert( state==pPager->eState );'), (45246, 2, u'-  assert( assert_pager_state(pPager) );'), (45325, 2, u'-  assert( pPager->eLock==SHARED_LOCK || pPager->eLock==EXCLUSIVE_LOCK );'), (45345, 2, u'-  assert( pPager->pWal==0 && pPager->tempFile==0 );'), (45346, 2, u'-  assert( pPager->eLock==SHARED_LOCK || pPager->eLock==EXCLUSIVE_LOCK );'), (45393, 2, u'-  assert( assert_pager_state(pPager) );'), (45394, 2, u'-  assert( pPager->eState==PAGER_OPEN   || pbOpen );'), (45395, 2, u'-  assert( pPager->eState==PAGER_READER || !pbOpen );'), (45396, 2, u'-  assert( pbOpen==0 || *pbOpen==0 );'), (45397, 2, u'-  assert( pbOpen!=0 || (!pPager->tempFile && !pPager->pWal) );'), (45429, 2, u'-  assert( pPager->journalMode==PAGER_JOURNALMODE_WAL );'), (45474, 2, u'-  assert( pPager->eState==PAGER_READER );'), (46049, 2, u'-  assert( iPage==0 || *ppPage || rc!=SQLITE_OK );'), (46057, 2, u'-  assert( pWal->nWiData>0 && pWal->apWiData[0] );'), (46065, 2, u'-  assert( pWal->nWiData>0 && pWal->apWiData[0] );'), (46108, 2, u'-  assert( nByte>=8 );'), (46109, 2, u'-  assert( (nByte&0x00000007)==0 );'), (46143, 2, u'-  assert( pWal->writeLock );'), (46174, 2, u'-  assert( WAL_FRAME_HDRSIZE==24 );'), (46202, 2, u'-  assert( WAL_FRAME_HDRSIZE==24 );'), (46311, 2, u'-  assert( iPage>0 );'), (46312, 2, u'-  assert( (HASHTABLE_NSLOT & (HASHTABLE_NSLOT-1))==0 );'), (46344, 2, u'-  assert( rc==SQLITE_OK || iHash>0 );'), (46373, 2, u'-  assert( (iHash==0 || iFrame>HASHTABLE_NPAGE_ONE)'), (46413, 2, u'-  assert( pWal->writeLock );'), (46424, 2, u'-  assert( pWal->nWiData>walFramePage(pWal->hdr.mxFrame) );'), (46425, 2, u'-  assert( pWal->apWiData[walFramePage(pWal->hdr.mxFrame)] );'), (46432, 2, u'-  assert( iLimit>0 );'), (46445, 2, u'-#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (46456, 2, u'-      assert( aHash[iKey]==i );'), (46484, 2, u'-    assert( idx <= HASHTABLE_NSLOT/2 + 1 );'), (46502, 2, u'-      assert( !aPgno[idx] );'), (46513, 2, u'-#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (46521, 2, u'-      assert( nEntry==idx );'), (46535, 2, u'-        assert( aHash[iKey]==i );'), (46569, 2, u'-  assert( pWal->ckptLock==1 || pWal->ckptLock==0 );'), (46570, 2, u'-  assert( WAL_ALL_BUT_WRITE==WAL_WRITE_LOCK+1 );'), (46571, 2, u'-  assert( WAL_CKPT_LOCK==WAL_ALL_BUT_WRITE );'), (46572, 2, u'-  assert( pWal->writeLock );'), (46761, 2, u'-  assert( zWalName && zWalName[0] );'), (46762, 2, u'-  assert( pDbFd );'), (46769, 2, u'-  assert( WIN_SHM_BASE==WALINDEX_LOCK_OFFSET );'), (46772, 2, u'-  assert( UNIX_SHM_BASE==WALINDEX_LOCK_OFFSET );'), (46843, 2, u'-  assert( iMin<0xffffffff );'), (46900, 2, u'-  assert( nLeft>0 && nRight>0 );'), (46917, 2, u'-    assert( iLeft>=nLeft || aContent[aLeft[iLeft]]>dbpage );'), (46918, 2, u'-    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );'), (46962, 2, u'-  assert( nList<=HASHTABLE_NPAGE && nList>0 );'), (46963, 2, u'-  assert( HASHTABLE_NPAGE==(1<<(ArraySize(aSub)-1)) );'), (46970, 2, u'-      assert( p->aList && p->nList<=(1<<iSub) );'), (46971, 2, u'-      assert( p->aList==&aList[iList&~((2<<iSub)-1)] );'), (46981, 2, u'-      assert( p->nList<=(1<<iSub) );'), (46982, 2, u'-      assert( p->aList==&aList[nList&~((2<<iSub)-1)] );'), (46986, 2, u'-  assert( aMerge==aList );'), (46993, 2, u'-      assert( aContent[aList[i]] > aContent[aList[i-1]] );'), (47030, 2, u'-  assert( pWal->ckptLock && pWal->hdr.mxFrame>0 );'), (47183, 2, u'-  assert( pIter );'), (47197, 2, u'-      assert( y<=pWal->hdr.mxFrame );'), (47237, 2, u'-      assert( walFramePgno(pWal, iFrame)==iDbpage );'), (47280, 2, u'-    assert( pWal->writeLock );'), (47284, 2, u'-      assert( mxSafeFrame==pWal->hdr.mxFrame );'), (47403, 2, u'-  assert( pWal->nWiData>0 && pWal->apWiData[0] );'), (47463, 2, u'-  assert( pChanged );'), (47468, 2, u'-  assert( page0 || pWal->writeLock==0 );'), (47480, 2, u'-  assert( badHdr==0 || pWal->writeLock==0 );'), (47579, 2, u'-  assert( pWal->readLock<0 );     /* Not currently locked */'), (47682, 2, u'-      assert( thisMark!=READMARK_NOT_USED );'), (47705, 2, u'-      assert( rc==SQLITE_BUSY || (pWal->readOnly & WAL_SHM_RDONLY)!=0 );'), (47740, 2, u'-      assert( mxReadMark<=pWal->hdr.mxFrame );'), (47805, 2, u'-  assert( pWal->readLock>=0 || pWal->lockError );'), (47868, 2, u'-#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (47881, 2, u'-    assert( iRead==iRead2 );'), (47940, 2, u'-  assert( pWal->readLock>=0 );'), (48019, 2, u'-      assert( walFramePgno(pWal, iFrame)!=1 );'), (48024, 2, u'-  assert( rc==SQLITE_OK );'), (48035, 2, u'-  assert( pWal->writeLock );'), (48051, 2, u'-  assert( pWal->writeLock );'), (48052, 2, u'-  assert( aWalData[3]!=pWal->nCkpt || aWalData[0]<=pWal->hdr.mxFrame );'), (48092, 2, u'-    assert( pInfo->nBackfill==pWal->hdr.mxFrame );'), (48119, 2, u'-        assert( pInfo->aReadMark[0]==0 );'), (48132, 2, u'-    assert( (rc&0xff)!=SQLITE_BUSY ); /* BUSY not possible when useWal==1 */'), (48175, 2, u'-    assert( p->syncFlags & (SQLITE_SYNC_NORMAL|SQLITE_SYNC_FULL) );'), (48229, 2, u'-  assert( pList );'), (48230, 2, u'-  assert( pWal->writeLock );'), (48234, 2, u'-  assert( (isCommit!=0)==(nTruncate!=0) );'), (48293, 2, u'-  assert( (int)pWal->szPage==szPage );'), (48308, 2, u'-    assert( iOffset==walFrameOffset(iFrame, szPage) );'), (48420, 2, u'-  assert( pWal->ckptLock==0 );'), (48421, 2, u'-  assert( pWal->writeLock==0 );'), (48534, 2, u'-  assert( pWal->writeLock==0 );'), (48535, 2, u'-  assert( pWal->exclusiveMode!=WAL_HEAPMEMORY_MODE || op==-1 );'), (48543, 2, u'-  assert( pWal->readLock>=0 || pWal->lockError );'), (48544, 2, u'-  assert( pWal->readLock>=0 || (op<=0 && pWal->exclusiveMode==0) );'), (48558, 2, u'-    assert( pWal->exclusiveMode==0 );'), (48559, 2, u'-    assert( pWal->readLock>=0 );'), (48585, 2, u'-  assert( pWal==0 || pWal->readLock>=0 );'), (49226, 2, u'-  assert( p->pBt->inTransaction!=TRANS_NONE || p->pBt->nTransaction==0 ); \\'), (49227, 2, u'-  assert( p->pBt->inTransaction>=p->inTrans );'), (49285, 2, u'-  assert( p->locked==0 );'), (49286, 2, u'-  assert( sqlite3_mutex_notheld(p->pBt->mutex) );'), (49287, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (49300, 2, u'-  assert( p->locked==1 );'), (49301, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (49302, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (49303, 2, u'-  assert( p->db==pBt->db );'), (49332, 2, u'-  assert( p->pNext==0 || p->pNext->pBt>p->pBt );'), (49333, 2, u'-  assert( p->pPrev==0 || p->pPrev->pBt<p->pBt );'), (49334, 2, u'-  assert( p->pNext==0 || p->pNext->db==p->db );'), (49335, 2, u'-  assert( p->pPrev==0 || p->pPrev->db==p->db );'), (49336, 2, u'-  assert( p->sharable || (p->pNext==0 && p->pPrev==0) );'), (49339, 2, u'-  assert( !p->locked || p->wantToLock>0 );'), (49340, 2, u'-  assert( p->sharable || p->wantToLock==0 );'), (49343, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (49347, 2, u'-  assert( (p->locked==0 && p->sharable) || p->pBt->db==p->db );'), (49369, 2, u'-    assert( pLater->sharable );'), (49370, 2, u'-    assert( pLater->pNext==0 || pLater->pNext->pBt>pLater->pBt );'), (49371, 2, u'-    assert( !pLater->locked || pLater->wantToLock>0 );'), (49389, 2, u'-    assert( p->wantToLock>0 );'), (49405, 2, u'-  assert( p->sharable==0 || p->locked==0 || p->wantToLock>0 );'), (49406, 2, u'-  assert( p->sharable==0 || p->locked==0 || p->db==p->pBt->db );'), (49407, 2, u'-  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->pBt->mutex) );'), (49408, 2, u'-  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->db->mutex) );'), (49447, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (49456, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (49509, 2, u'-  assert( db!=0 );'), (49511, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (49515, 2, u'-  assert( p!=0 );'), (49791, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (49792, 2, u'-  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (49793, 2, u'-  assert( p->db!=0 );'), (49794, 2, u'-  assert( !(p->db->flags&SQLITE_ReadUncommitted)||eLock==WRITE_LOCK||iTab==1 );'), (49800, 2, u'-  assert( eLock==READ_LOCK || (p==pBt->pWriter && p->inTrans==TRANS_WRITE) );'), (49801, 2, u'-  assert( eLock==READ_LOCK || pBt->inTransaction==TRANS_WRITE );'), (49826, 2, u'-    assert( pIter->eLock==READ_LOCK || pIter->eLock==WRITE_LOCK );'), (49827, 2, u'-    assert( eLock==READ_LOCK || pIter->pBtree==p || pIter->eLock==READ_LOCK);'), (49831, 2, u'-        assert( p==pBt->pWriter );'), (49864, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (49865, 2, u'-  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (49866, 2, u'-  assert( p->db!=0 );'), (49872, 2, u'-  assert( 0==(p->db->flags&SQLITE_ReadUncommitted) || eLock==WRITE_LOCK );'), (49876, 2, u'-  assert( p->sharable );'), (49877, 2, u'-  assert( SQLITE_OK==querySharedCacheTableLock(p, iTable, eLock) );'), (49905, 2, u'-  assert( WRITE_LOCK>READ_LOCK );'), (49927, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (49928, 2, u'-  assert( p->sharable || 0==*ppIter );'), (49929, 2, u'-  assert( p->inTrans>0 );'), (49933, 2, u'-    assert( (pBt->btsFlags & BTS_EXCLUSIVE)==0 || pBt->pWriter==pLock->pBtree );'), (49934, 2, u'-    assert( pLock->pBtree->inTrans>=pLock->eLock );'), (49937, 2, u'-      assert( pLock->iTable!=1 || pLock==&p->lock );'), (49946, 2, u'-  assert( (pBt->btsFlags & BTS_PENDING)==0 || pBt->pWriter );'), (49974, 2, u'-      assert( pLock->eLock==READ_LOCK || pLock->pBtree==p );'), (50001, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (50012, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (50038, 2, u'-  assert( sqlite3BtreeHoldsMutex(pBtree) );'), (50091, 2, u'-    assert( pgno<=pBt->nPage );'), (50147, 2, u'-  assert( CURSOR_VALID==pCur->eState );'), (50148, 2, u'-  assert( 0==pCur->pKey );'), (50149, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (50152, 2, u'-  assert( rc==SQLITE_OK );  /* KeySize() cannot fail */'), (50173, 2, u'-  assert( !pCur->apPage[0]->intKey || !pCur->pKey );'), (50191, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (50192, 2, u'-  assert( pExcept==0 || pExcept->pBt==pBt );'), (50213, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (50237, 2, u'-    assert( nKey==(i64)(int)nKey );'), (50262, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (50263, 2, u'-  assert( pCur->eState>=CURSOR_REQUIRESEEK );'), (50272, 2, u'-    assert( pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_INVALID );'), (50319, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (50349, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (50351, 2, u'-  assert( 0==PTRMAP_ISPAGE(pBt, PENDING_BYTE_PAGE(pBt)) );'), (50353, 2, u'-  assert( pBt->autoVacuum );'), (50369, 2, u'-  assert( offset <= (int)pBt->usableSize-5 );'), (50399, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (50413, 2, u'-  assert( offset <= (int)pBt->usableSize-5 );'), (50414, 2, u'-  assert( pEType!=0 );'), (50447, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50478, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50481, 2, u'-  assert( pPage->leaf==0 || pPage->leaf==1 );'), (50483, 2, u'-  assert( n==4-4*pPage->leaf );'), (50601, 2, u'-  assert( nSize==debuginfo.nSize );'), (50622, 2, u'-  assert( pCell!=0 );'), (50624, 2, u'-  assert( (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload );'), (50654, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50655, 2, u'-  assert( pPage->pBt!=0 );'), (50656, 2, u'-  assert( pPage->pBt->usableSize <= SQLITE_MAX_PAGE_SIZE );'), (50657, 2, u'-  assert( pPage->nOverflow==0 );'), (50658, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50664, 2, u'-  assert( nCell==get2byte(&data[hdr+3]) );'), (50685, 2, u'-    assert( pc>=iCellFirst && pc<=iCellLast );'), (50697, 2, u'-    assert( cbrk+size<=usableSize && cbrk>=iCellFirst );'), (50703, 2, u'-  assert( cbrk>=iCellFirst );'), (50709, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50738, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50739, 2, u'-  assert( pPage->pBt );'), (50740, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50741, 2, u'-  assert( nByte>=0 );  /* Minimum cell size is 4 */'), (50742, 2, u'-  assert( pPage->nFree>=nByte );'), (50743, 2, u'-  assert( pPage->nOverflow==0 );'), (50745, 2, u'-  assert( nByte < usableSize-8 );'), (50748, 2, u'-  assert( pPage->cellOffset == hdr + 12 - 4*pPage->leaf );'), (50803, 2, u'-    assert( gap+nByte<=top );'), (50815, 2, u'-  assert( top+nByte <= (int)pPage->pBt->usableSize );'), (50833, 2, u'-  assert( pPage->pBt!=0 );'), (50834, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50835, 2, u'-  assert( start>=pPage->hdrOffset+6+pPage->childPtrSize );'), (50836, 2, u'-  assert( (start + size) <= (int)pPage->pBt->usableSize );'), (50837, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50838, 2, u'-  assert( size>=0 );   /* Minimum cell size is 4 */'), (50858, 2, u'-  assert( start<=iLast );'), (50868, 2, u'-  assert( pbegin>addr || pbegin==0 );'), (50878, 2, u'-    assert( pbegin>addr );'), (50879, 2, u'-    assert( pbegin <= (int)pPage->pBt->usableSize-4 );'), (50905, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50924, 2, u'-  assert( pPage->hdrOffset==(pPage->pgno==1 ? 100 : 0) );'), (50925, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50926, 2, u'-  pPage->leaf = (u8)(flagByte>>3);  assert( PTF_LEAF == 1<<3 );'), (50958, 2, u'-  assert( pPage->pBt!=0 );'), (50959, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50960, 2, u'-  assert( pPage->pgno==sqlite3PagerPagenumber(pPage->pDbPage) );'), (50961, 2, u'-  assert( pPage == sqlite3PagerGetExtra(pPage->pDbPage) );'), (50962, 2, u'-  assert( pPage->aData == sqlite3PagerGetData(pPage->pDbPage) );'), (50981, 2, u'-    assert( pBt->pageSize>=512 && pBt->pageSize<=65536 );'), (51074, 2, u'-  assert( sqlite3PagerPagenumber(pPage->pDbPage)==pPage->pgno );'), (51075, 2, u'-  assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (51076, 2, u'-  assert( sqlite3PagerGetData(pPage->pDbPage) == data );'), (51077, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (51078, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (51094, 2, u'-  assert( pBt->pageSize>=512 && pBt->pageSize<=65536 );'), (51138, 2, u'-  assert( noContent==0 || bReadonly==0 );'), (51139, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (51153, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (51169, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (51170, 2, u'-  assert( ((p->pBt->nPage)&0x8000000)==0 );'), (51189, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (51204, 2, u'-  assert( pgno!=0 || rc==SQLITE_CORRUPT );'), (51214, 2, u'-    assert( pPage->aData );'), (51215, 2, u'-    assert( pPage->pBt );'), (51216, 2, u'-    assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (51217, 2, u'-    assert( sqlite3PagerGetData(pPage->pDbPage)==pPage->aData );'), (51218, 2, u'-    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (51234, 2, u'-  assert( sqlite3PagerPageRefcount(pData)>0 );'), (51236, 2, u'-    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (51255, 2, u'-  assert( pBt->db );'), (51256, 2, u'-  assert( sqlite3_mutex_held(pBt->db->mutex) );'), (51310, 2, u'-  assert( db!=0 );'), (51311, 2, u'-  assert( pVfs!=0 );'), (51312, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (51313, 2, u'-  assert( (flags&0xff)==flags );   /* flags fit in 8 bits */'), (51316, 2, u'-  assert( (flags & BTREE_UNORDERED)==0 || (flags & BTREE_SINGLE)!=0 );'), (51319, 2, u'-  assert( (flags & BTREE_SINGLE)==0 || isTempDb );'), (51371, 2, u'-        assert( pBt->nRef>0 );'), (51411, 2, u'-    assert( sizeof(i64)==8 || sizeof(i64)==4 );'), (51412, 2, u'-    assert( sizeof(u64)==8 || sizeof(u64)==4 );'), (51413, 2, u'-    assert( sizeof(u32)==4 );'), (51414, 2, u'-    assert( sizeof(u16)==2 );'), (51415, 2, u'-    assert( sizeof(Pgno)==4 );'), (51470, 2, u'-    assert( (pBt->pageSize & 7)==0 );  /* 8-byte alignment of pageSize */'), (51546, 2, u'-    assert( sqlite3_mutex_held(mutexOpen) );'), (51564, 2, u'-  assert( sqlite3_mutex_notheld(pBt->mutex) );'), (51618, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (51640, 2, u'-  assert( p->wantToLock==0 && p->locked==0 );'), (51647, 2, u'-    assert( !pBt->pCursor );'), (51658, 2, u'-  assert( p->wantToLock==0 );'), (51659, 2, u'-  assert( p->locked==0 );'), (51685, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (51698, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (51721, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (51722, 2, u'-  assert( level>=1 && level<=3 );'), (51737, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (51739, 2, u'-  assert( pBt && pBt->pPager );'), (51768, 2, u'-  assert( nReserve>=-1 && nReserve<=255 );'), (51777, 2, u'-  assert( nReserve>=0 && nReserve<=255 );'), (51780, 2, u'-    assert( (pageSize & 7)==0 );'), (51781, 2, u'-    assert( !pBt->pPage1 && !pBt->pCursor );'), (51812, 2, u'-  assert( sqlite3_mutex_held(p->pBt->mutex) );'), (51926, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (51927, 2, u'-  assert( pBt->pPage1==0 );'), (52001, 2, u'-    assert( (pageSize & 7)==0 );'), (52055, 2, u'-  assert( pBt->maxLeaf + 23 <= MX_CELL_SIZE(pBt) );'), (52098, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (52099, 2, u'-  assert( countValidCursors(pBt,0)==0 || pBt->inTransaction>TRANS_NONE );'), (52101, 2, u'-    assert( pBt->pPage1->aData );'), (52102, 2, u'-    assert( sqlite3PagerRefcount(pBt->pPager)==1 );'), (52103, 2, u'-    assert( pBt->pPage1->aData );'), (52119, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (52124, 2, u'-  assert( pP1!=0 );'), (52129, 2, u'-  assert( sizeof(zMagicHeader)==16 );'), (52134, 2, u'-  assert( pBt->usableSize<=pBt->pageSize && pBt->usableSize+255>=pBt->pageSize);'), (52143, 2, u'-  assert( pBt->autoVacuum==1 || pBt->autoVacuum==0 );'), (52144, 2, u'-  assert( pBt->incrVacuum==1 || pBt->incrVacuum==0 );'), (52217, 2, u'-  assert( IfNotOmitAV(pBt->bDoTruncate)==0 );'), (52290, 2, u'-        assert( p->lock.pBtree==p && p->lock.iTable==1 );'), (52304, 2, u'-      assert( !pBt->pWriter );'), (52355, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (52398, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (52399, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (52470, 2, u'-  assert( eType==PTRMAP_OVERFLOW2 || eType==PTRMAP_OVERFLOW1 ||'), (52472, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (52473, 2, u'-  assert( pDbPage->pBt==pBt );'), (52554, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (52555, 2, u'-  assert( iLastPg>nFin );'), (52587, 2, u'-        assert( iFreePg==iLastPg );'), (52621, 2, u'-      assert( iFreePg<iLastPg );'), (52677, 2, u'-  assert( pBt->inTransaction==TRANS_WRITE && p->inTrans==TRANS_WRITE );'), (52719, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (52721, 2, u'-  assert(pBt->autoVacuum);'), (52759, 2, u'-  assert( nRef>=sqlite3PagerRefcount(pPager) );'), (52822, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (52893, 2, u'-    assert( pBt->inTransaction==TRANS_WRITE );'), (52894, 2, u'-    assert( pBt->nTransaction>0 );'), (52985, 2, u'-    assert( TRANS_WRITE==pBt->inTransaction );'), (53002, 2, u'-    assert( countValidCursors(pBt, 1)==0 );'), (53034, 2, u'-  assert( p->inTrans==TRANS_WRITE );'), (53035, 2, u'-  assert( (pBt->btsFlags & BTS_READ_ONLY)==0 );'), (53036, 2, u'-  assert( iStatement>0 );'), (53037, 2, u'-  assert( iStatement>p->db->nSavepoint );'), (53038, 2, u'-  assert( pBt->inTransaction==TRANS_WRITE );'), (53065, 2, u'-    assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (53066, 2, u'-    assert( iSavepoint>=0 || (iSavepoint==-1 && op==SAVEPOINT_ROLLBACK) );'), (53079, 2, u'-      assert( pBt->nPage>0 );'), (53127, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (53128, 2, u'-  assert( wrFlag==0 || wrFlag==1 );'), (53134, 2, u'-  assert( hasSharedCacheTableLock(p, iTable, pKeyInfo!=0, wrFlag+1) );'), (53135, 2, u'-  assert( wrFlag==0 || !hasReadConflicts(p, iTable) );'), (53138, 2, u'-  assert( p->inTrans>TRANS_NONE );'), (53139, 2, u'-  assert( wrFlag==0 || p->inTrans==TRANS_WRITE );'), (53140, 2, u'-  assert( pBt->pPage1 && pBt->pPage1->aData );'), (53146, 2, u'-    assert( wrFlag==0 );'), (53222, 2, u'-  assert( pCur->cachedRowid==iRowid );'), (53281, 2, u'-  static void assertCellInfo(BtCursor *pCur){'), (53286, 2, u'-    assert( memcmp(&info, &pCur->info, sizeof(info))==0 );'), (53289, 2, u'-  #define assertCellInfo(x)'), (53299, 2, u'-      assertCellInfo(pCur);'), (53310, 2, u'-    assertCellInfo(pCur);                                                      \\'), (53338, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (53339, 2, u'-  assert( pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID );'), (53362, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (53363, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (53398, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (53399, 2, u'-  assert(pPgnoNext);'), (53427, 2, u'-  assert( next==0 || rc==SQLITE_DONE );'), (53430, 2, u'-    assert( rc==SQLITE_OK || pPage==0 );'), (53519, 2, u'-  assert( pPage );'), (53520, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (53521, 2, u'-  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (53522, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (53589, 2, u'-        assert(!pCur->aOverflow[iIdx] || pCur->aOverflow[iIdx]==nextPage);'), (53686, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (53687, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (53688, 2, u'-  assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (53689, 2, u'-  assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (53711, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (53714, 2, u'-    assert( pCur->eState==CURSOR_VALID );'), (53715, 2, u'-    assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (53716, 2, u'-    assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (53751, 2, u'-  assert( pCur!=0 && pCur->iPage>=0 && pCur->apPage[pCur->iPage]);'), (53752, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (53753, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (53755, 2, u'-  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (53772, 2, u'-    assert( nLocal<=nKey );'), (53795, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (53796, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (53804, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (53805, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (53828, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (53829, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (53830, 2, u'-  assert( pCur->iPage<BTCURSOR_MAX_DEPTH );'), (53831, 2, u'-  assert( pCur->iPage>=0 );'), (53857, 2, u'-static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){'), (53858, 2, u'-  assert( iIdx<=pParent->nCell );'), (53860, 2, u'-    assert( get4byte(&pParent->aData[pParent->hdrOffset+8])==iChild );'), (53862, 2, u'-    assert( get4byte(findCell(pParent, iIdx))==iChild );'), (53866, 2, u'-#  define assertParentIndex(x,y,z)'), (53878, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (53879, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (53880, 2, u'-  assert( pCur->iPage>0 );'), (53881, 2, u'-  assert( pCur->apPage[pCur->iPage] );'), (53889, 2, u'-  assertParentIndex('), (53930, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (53931, 2, u'-  assert( CURSOR_INVALID < CURSOR_REQUIRESEEK );'), (53932, 2, u'-  assert( CURSOR_VALID   < CURSOR_REQUIRESEEK );'), (53933, 2, u'-  assert( CURSOR_FAULT   > CURSOR_REQUIRESEEK );'), (53936, 2, u'-      assert( pCur->skipNext!=SQLITE_OK );'), (53963, 2, u'-    assert( pCur->apPage[0]->intKey==1 || pCur->apPage[0]->intKey==0 );'), (53976, 2, u'-  assert( pRoot->pgno==pCur->pgnoRoot );'), (53977, 2, u'-  assert( pRoot->isInit && (pCur->pKeyInfo==0)==pRoot->intKey );'), (54008, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (54009, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (54011, 2, u'-    assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (54033, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (54034, 2, u'-  assert( pCur->eState==CURSOR_VALID );'), (54055, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (54056, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (54060, 2, u'-      assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 );'), (54063, 2, u'-      assert( pCur->apPage[pCur->iPage]->nCell>0 );'), (54078, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (54079, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (54088, 2, u'-      assert( pCur->aiIdx[ii]==pCur->apPage[ii]->nCell );'), (54090, 2, u'-    assert( pCur->aiIdx[pCur->iPage]==pCur->apPage[pCur->iPage]->nCell-1 );'), (54091, 2, u'-    assert( pCur->apPage[pCur->iPage]->leaf );'), (54099, 2, u'-      assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 );'), (54102, 2, u'-      assert( pCur->eState==CURSOR_VALID );'), (54148, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (54149, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (54150, 2, u'-  assert( pRes );'), (54151, 2, u'-  assert( (pIdxKey==0)==(pCur->pKeyInfo==0) );'), (54172, 2, u'-  assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage] );'), (54173, 2, u'-  assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->isInit );'), (54174, 2, u'-  assert( pCur->eState==CURSOR_INVALID || pCur->apPage[pCur->iPage]->nCell>0 );'), (54177, 2, u'-    assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 );'), (54180, 2, u'-  assert( pCur->apPage[0]->intKey || pIdxKey );'), (54193, 2, u'-    assert( pPage->nCell>0 );'), (54194, 2, u'-    assert( pPage->intKey==(pIdxKey==0) );'), (54205, 2, u'-      assert( idx==pCur->aiIdx[pCur->iPage] );'), (54220, 2, u'-          assert( nCellKey>intKey );'), (54294, 2, u'-    assert( lwr==upr+1 || (pPage->intKey && !pPage->leaf) );'), (54295, 2, u'-    assert( pPage->isInit );'), (54304, 2, u'-      assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (54346, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (54351, 2, u'-  assert( pRes!=0 );'), (54365, 2, u'-  assert( pPage->isInit );'), (54420, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (54438, 2, u'-  assert( pPage->isInit );'), (54508, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (54509, 2, u'-  assert( eMode==BTALLOC_ANY || (nearby>0 && IfNotOmitAV(pBt->autoVacuum)) );'), (54530, 2, u'-        assert( nearby>0 );'), (54531, 2, u'-        assert( pBt->autoVacuum );'), (54572, 2, u'-      assert( pTrunk!=0 );'), (54573, 2, u'-      assert( pTrunk->aData!=0 );'), (54580, 2, u'-        assert( pPrevTrunk==0 );'), (54644, 2, u'-            assert( sqlite3PagerIswriteable(pPage1->pDbPage) );'), (54757, 2, u'-      assert( pBt->nPage!=PENDING_BYTE_PAGE(pBt) );'), (54771, 2, u'-    assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (54781, 2, u'-  assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (54795, 2, u'-  assert( rc!=SQLITE_OK || sqlite3PagerIswriteable((*ppPage)->pDbPage) );'), (54819, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (54820, 2, u'-  assert( iPage>1 );'), (54821, 2, u'-  assert( !pMemPage || pMemPage->pgno==iPage );'), (54873, 2, u'-    assert( pBt->usableSize>32 );'), (54950, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (54959, 2, u'-  assert( pBt->usableSize > 4 );'), (54962, 2, u'-  assert( ovflPgno==0 || nOvfl>0 );'), (55037, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55041, 2, u'-  assert( pCell<pPage->aData || pCell>=&pPage->aData[pBt->pageSize]'), (55056, 2, u'-  assert( info.nHeader==nHeader );'), (55057, 2, u'-  assert( info.nKey==nKey );'), (55058, 2, u'-  assert( info.nData==(u32)(nData+nZero) );'), (55118, 2, u'-      assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (55122, 2, u'-      assert( pPrior<pPage->aData || pPrior>=&pPage->aData[pBt->pageSize]'), (55138, 2, u'-    assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (55142, 2, u'-    assert( pPayload<pPage->aData || pPayload>=&pPage->aData[pBt->pageSize]'), (55147, 2, u'-      assert( pSrc );'), (55184, 2, u'-  assert( idx>=0 && idx<pPage->nCell );'), (55185, 2, u'-  assert( sz==cellSize(pPage, idx) );'), (55186, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (55187, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55204, 2, u'-  assert( (SQLITE_PTR_TO_INT(ptr)&1)==0 );  /* ptr is always 2-byte aligned */'), (55253, 2, u'-  assert( i>=0 && i<=pPage->nCell+pPage->nOverflow );'), (55254, 2, u'-  assert( pPage->nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=10921 );'), (55255, 2, u'-  assert( pPage->nOverflow<=ArraySize(pPage->apOvfl) );'), (55256, 2, u'-  assert( ArraySize(pPage->apOvfl)==ArraySize(pPage->aiOvfl) );'), (55257, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55263, 2, u'-  assert( sz==cellSizePtr(pPage, pCell) || (sz==8 && iChild>0) );'), (55273, 2, u'-    assert( j<(int)(sizeof(pPage->apOvfl)/sizeof(pPage->apOvfl[0])) );'), (55282, 2, u'-    assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (55291, 2, u'-    assert( idx >= end+2 );'), (55292, 2, u'-    assert( idx+sz <= (int)pPage->pBt->usableSize );'), (55301, 2, u'-    assert( (SQLITE_PTR_TO_INT(ptr)&1)==0 );  /* ptr is always 2-byte aligned */'), (55336, 2, u'-  assert( pPage->nOverflow==0 );'), (55337, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55338, 2, u'-  assert( nCell>=0 && nCell<=(int)MX_CELL(pPage->pBt)'), (55340, 2, u'-  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (55343, 2, u'-  assert( pPage->nCell==0 );'), (55344, 2, u'-  assert( get2byteNotZero(&data[hdr+5])==nUsable );'), (55407, 2, u'-  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55408, 2, u'-  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (55409, 2, u'-  assert( pPage->nOverflow==1 );'), (55427, 2, u'-    assert( sqlite3PagerIswriteable(pNew->pDbPage) );'), (55428, 2, u'-    assert( pPage->aData[0]==(PTF_INTKEY|PTF_LEAFDATA|PTF_LEAF) );'), (55495, 2, u'-    assert( pPage->isInit );'), (55506, 2, u'-        assert( n==pPage->pgno && e==PTRMAP_OVERFLOW1 );'), (55511, 2, u'-        assert( n==pPage->pgno && e==PTRMAP_BTREE );'), (55517, 2, u'-      assert( n==pPage->pgno && e==PTRMAP_BTREE );'), (55552, 2, u'-    assert( pFrom->isInit );'), (55553, 2, u'-    assert( pFrom->nFree>=iToHdr );'), (55554, 2, u'-    assert( get2byte(&aFrom[iFromHdr+5]) <= (int)pBt->usableSize );'), (55661, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (55662, 2, u'-  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (55673, 2, u'-  assert( pParent->nOverflow==0 || pParent->nOverflow==1 );'), (55674, 2, u'-  assert( pParent->nOverflow==0 || pParent->aiOvfl[0]==iParentIdx );'), (55695, 2, u'-    assert( bBulk==0 || bBulk==1 );'), (55701, 2, u'-      assert( bBulk==0 );'), (55781, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(aSpace1) );'), (55816, 2, u'-        assert( nCell<nMaxCells );'), (55826, 2, u'-        assert( nCell<nMaxCells );'), (55835, 2, u'-      assert( nCell<nMaxCells );'), (55839, 2, u'-      assert( sz<=pBt->maxLocal+23 );'), (55840, 2, u'-      assert( iSpace1 <= (int)pBt->pageSize );'), (55843, 2, u'-      assert( leafCorrection==0 || leafCorrection==4 );'), (55846, 2, u'-        assert( leafCorrection==0 );'), (55847, 2, u'-        assert( pOld->hdrOffset==0 );'), (55852, 2, u'-        assert( leafCorrection==4 );'), (55880, 2, u'-    assert( i<nMaxCells );'), (55913, 2, u'-    assert( d<nMaxCells );'), (55914, 2, u'-    assert( r<nMaxCells );'), (55937, 2, u'-  assert( cntNew[0]>0 || (pParent->pgno==1 && pParent->nCell==0) );'), (55963, 2, u'-      assert( i>0 );'), (56026, 2, u'-  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (56037, 2, u'-    assert( j<nMaxCells );'), (56040, 2, u'-    assert( pNew->nCell>0 || (nNew==1 && cntNew[0]==0) );'), (56041, 2, u'-    assert( pNew->nOverflow==0 );'), (56048, 2, u'-    assert( i<nNew-1 || j==nCell );'), (56054, 2, u'-      assert( j<nMaxCells );'), (56086, 2, u'-          assert(leafCorrection==4);'), (56091, 2, u'-      assert( sz<=pBt->maxLocal+23 );'), (56092, 2, u'-      assert( iOvflSpace <= (int)pBt->pageSize );'), (56095, 2, u'-      assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (56101, 2, u'-  assert( j==nCell );'), (56102, 2, u'-  assert( nOld>0 );'), (56103, 2, u'-  assert( nNew>0 );'), (56124, 2, u'-    assert( nNew==1 );'), (56125, 2, u'-    assert( apNew[0]->nFree =='), (56175, 2, u'-        assert( j+1 < ArraySize(apCopy) );'), (56176, 2, u'-        assert( j+1 < nOld );'), (56186, 2, u'-      assert(nOverflow>0 || iOverflow<i );'), (56187, 2, u'-      assert(nOverflow<2 || pOld->aiOvfl[0]==pOld->aiOvfl[1]-1);'), (56188, 2, u'-      assert(nOverflow<3 || pOld->aiOvfl[1]==pOld->aiOvfl[2]-1);'), (56203, 2, u'-      assert( j<nOld );'), (56204, 2, u'-      assert( k<nNew );'), (56237, 2, u'-  assert( pParent->isInit );'), (56285, 2, u'-  assert( pRoot->nOverflow>0 );'), (56286, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (56305, 2, u'-  assert( sqlite3PagerIswriteable(pChild->pDbPage) );'), (56306, 2, u'-  assert( sqlite3PagerIswriteable(pRoot->pDbPage) );'), (56307, 2, u'-  assert( pChild->nCell==pRoot->nCell );'), (56356, 2, u'-        assert( (balance_deeper_called++)==0 );'), (56362, 2, u'-          assert( pCur->apPage[1]->nOverflow );'), (56395, 2, u'-          assert( (balance_quick_called++)==0 );'), (56490, 2, u'-    assert( pCur->skipNext!=SQLITE_OK );'), (56494, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (56495, 2, u'-  assert( pCur->wrFlag && pBt->inTransaction==TRANS_WRITE'), (56497, 2, u'-  assert( hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) );'), (56504, 2, u'-  assert( (pKey==0)==(pCur->pKeyInfo==0) );'), (56531, 2, u'-  assert( pCur->eState==CURSOR_VALID || (pCur->eState==CURSOR_INVALID && loc) );'), (56534, 2, u'-  assert( pPage->intKey || nKey>=0 );'), (56535, 2, u'-  assert( pPage->leaf || !pPage->intKey );'), (56540, 2, u'-  assert( pPage->isInit );'), (56546, 2, u'-  assert( szNew==cellSizePtr(pPage, newCell) );'), (56547, 2, u'-  assert( szNew <= MX_CELL_SIZE(pBt) );'), (56551, 2, u'-    assert( idx<pPage->nCell );'), (56565, 2, u'-    assert( pPage->leaf );'), (56568, 2, u'-    assert( pPage->leaf );'), (56571, 2, u'-  assert( rc!=SQLITE_OK || pPage->nCell>0 || pPage->nOverflow>0 );'), (56605, 2, u'-  assert( pCur->apPage[pCur->iPage]->nOverflow==0 );'), (56624, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (56625, 2, u'-  assert( pBt->inTransaction==TRANS_WRITE );'), (56626, 2, u'-  assert( (pBt->btsFlags & BTS_READ_ONLY)==0 );'), (56627, 2, u'-  assert( pCur->wrFlag );'), (56628, 2, u'-  assert( hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) );'), (56629, 2, u'-  assert( !hasReadConflicts(p, pCur->pgnoRoot) );'), (56688, 2, u'-    assert( MX_CELL_SIZE(pBt) >= nCell );'), (56746, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (56747, 2, u'-  assert( pBt->inTransaction==TRANS_WRITE );'), (56748, 2, u'-  assert( (pBt->btsFlags & BTS_READ_ONLY)==0 );'), (56781, 2, u'-    assert( pgnoRoot>=3 );'), (56824, 2, u'-      assert( eType!=PTRMAP_ROOTPAGE );'), (56825, 2, u'-      assert( eType!=PTRMAP_FREEPAGE );'), (56857, 2, u'-    assert( sqlite3PagerIswriteable(pBt->pPage1->pDbPage) );'), (56869, 2, u'-  assert( sqlite3PagerIswriteable(pRoot->pDbPage) );'), (56877, 2, u'-  assert( (pBt->openFlags & BTREE_SINGLE)==0 || pgnoRoot==2 );'), (56904, 2, u'-  assert( sqlite3_mutex_held(pBt->mutex) );'), (56924, 2, u'-    assert( pPage->intKey );'), (56955, 2, u'-  assert( p->inTrans==TRANS_WRITE );'), (56995, 2, u'-  assert( sqlite3BtreeHoldsMutex(p) );'), (56996, 2, u'-  assert( p->inTrans==TRANS_WRITE );'), (57075, 2, u'-      assert( maxRootPgno!=PENDING_BYTE_PAGE(pBt) );'), (57119, 2, u'-  assert( p->inTrans>TRANS_NONE );'), (57120, 2, u'-  assert( SQLITE_OK==querySharedCacheTableLock(p, MASTER_ROOT, READ_LOCK) );'), (57121, 2, u'-  assert( pBt->pPage1 );'), (57122, 2, u'-  assert( idx>=0 && idx<=15 );'), (57145, 2, u'-  assert( idx>=1 && idx<=15 );'), (57147, 2, u'-  assert( p->inTrans==TRANS_WRITE );'), (57148, 2, u'-  assert( pBt->pPage1!=0 );'), (57155, 2, u'-      assert( pBt->autoVacuum || iMeta==0 );'), (57156, 2, u'-      assert( iMeta==0 || iMeta==1 );'), (57284, 2, u'-  assert( iPg<=pCheck->nPage && sizeof(pCheck->aPgRef[0])==1 );'), (57292, 2, u'-  assert( iPg<=pCheck->nPage && sizeof(pCheck->aPgRef[0])==1 );'), (57478, 2, u'-    assert( rc==SQLITE_CORRUPT );  /* The only possible error from InitPage */'), (57511, 2, u'-    assert( sz==info.nPayload );'), (57599, 2, u'-    assert( contentOffset<=usableSize );  /* Enforced by btreeInitPage() */'), (57621, 2, u'-      assert( i<=usableSize-4 );     /* Enforced by btreeInitPage() */'), (57623, 2, u'-      assert( i+size<=usableSize );  /* Enforced by btreeInitPage() */'), (57626, 2, u'-      assert( j==0 || j>i+size );  /* Enforced by btreeInitPage() */'), (57627, 2, u'-      assert( j<=usableSize-4 );   /* Enforced by btreeInitPage() */'), (57679, 2, u'-  assert( p->inTrans>TRANS_NONE && pBt->inTransaction>TRANS_NONE );'), (57777, 2, u'-  assert( p->pBt->pPager!=0 );'), (57790, 2, u'-  assert( p->pBt->pPager!=0 );'), (57798, 2, u'-  assert( p==0 || sqlite3_mutex_held(p->db->mutex) );'), (57831, 2, u'-  assert( p );'), (57832, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (57837, 2, u'-  assert( p );'), (57838, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (57880, 2, u'-  assert( sqlite3_mutex_held(p->db->mutex) );'), (57883, 2, u'-  assert( rc==SQLITE_OK || rc==SQLITE_LOCKED_SHAREDCACHE );'), (57897, 2, u'-  assert( p->inTrans!=TRANS_NONE );'), (57900, 2, u'-    assert( READ_LOCK+1==WRITE_LOCK );'), (57901, 2, u'-    assert( isWriteLock==0 || isWriteLock==1 );'), (57927, 2, u'-  assert( cursorHoldsMutex(pCsr) );'), (57928, 2, u'-  assert( sqlite3_mutex_held(pCsr->pBtree->db->mutex) );'), (57929, 2, u'-  assert( pCsr->isIncrblobHandle );'), (57935, 2, u'-  assert( pCsr->eState!=CURSOR_REQUIRESEEK );'), (57949, 2, u'-  assert( rc==SQLITE_OK );'), (57961, 2, u'-  assert( (pCsr->pBt->btsFlags & BTS_READ_ONLY)==0'), (57963, 2, u'-  assert( hasSharedCacheTableLock(pCsr->pBtree, pCsr->pgnoRoot, 0, 2) );'), (57964, 2, u'-  assert( !hasReadConflicts(pCsr->pBtree, pCsr->pgnoRoot) );'), (57965, 2, u'-  assert( pCsr->apPage[pCsr->iPage]->intKey );'), (57981, 2, u'-  assert( cursorHoldsMutex(pCur) );'), (57982, 2, u'-  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (57997, 2, u'-  assert( iVersion==1 || iVersion==2 );'), (58029, 2, u'-  assert( mask==BTREE_BULKLOAD || mask==0 );'), (58268, 2, u'-  assert( sqlite3BtreeGetReserveNoMutex(p->pSrc)>=0 );'), (58269, 2, u'-  assert( p->bDestLocked );'), (58270, 2, u'-  assert( !isFatalError(p->rc) );'), (58271, 2, u'-  assert( iSrcPg!=PENDING_BYTE_PAGE(p->pSrc->pBt) );'), (58272, 2, u'-  assert( zSrcData );'), (58358, 2, u'-  assert( sqlite3BtreeHoldsMutex(p->pSrc) );'), (58427, 2, u'-    assert( nSrcPage>=0 );'), (58486, 2, u'-        assert( pgszSrc==sqlite3BtreeGetPageSize(p->pSrc) );'), (58487, 2, u'-        assert( pgszDest==sqlite3BtreeGetPageSize(p->pDest) );'), (58497, 2, u'-        assert( nDestTruncate>0 );'), (58516, 2, u'-          assert( pFile );'), (58517, 2, u'-          assert( nDestTruncate==0'), (58591, 2, u'-      assert( rc2==SQLITE_OK );'), (58689, 2, u'-    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (58696, 2, u'-      assert( p->pDestDb );'), (58700, 2, u'-      assert( rc!=SQLITE_BUSY && rc!=SQLITE_LOCKED );'), (58722, 2, u'-    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (58743, 2, u'-  assert( sqlite3BtreeIsInTrans(pTo) );'), (58771, 2, u'-  assert( b.rc!=SQLITE_OK );'), (58779, 2, u'-  assert( sqlite3BtreeIsInTrans(pTo)==0 );'), (58824, 2, u'-  assert( (pMem->flags&MEM_RowSet)==0 );'), (58825, 2, u'-  assert( desiredEnc==SQLITE_UTF8 || desiredEnc==SQLITE_UTF16LE'), (58830, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58839, 2, u'-  assert(rc==SQLITE_OK    || rc==SQLITE_NOMEM);'), (58840, 2, u'-  assert(rc==SQLITE_OK    || pMem->enc!=desiredEnc);'), (58841, 2, u'-  assert(rc==SQLITE_NOMEM || pMem->enc==desiredEnc);'), (58860, 2, u'-  assert( 1 >='), (58866, 2, u'-  assert( (pMem->flags&MEM_RowSet)==0 );'), (58870, 2, u'-  assert( preserve==0 || pMem->flags&(MEM_Blob|MEM_Str) );'), (58887, 2, u'-    assert( pMem->xDel!=SQLITE_DYNAMIC );'), (58911, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58912, 2, u'-  assert( (pMem->flags&MEM_RowSet)==0 );'), (58938, 2, u'-    assert( pMem->flags&MEM_Blob );'), (58939, 2, u'-    assert( (pMem->flags&MEM_RowSet)==0 );'), (58940, 2, u'-    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58964, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58995, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58996, 2, u'-  assert( !(fg&MEM_Zero) );'), (58997, 2, u'-  assert( !(fg&(MEM_Str|MEM_Blob)) );'), (58998, 2, u'-  assert( fg&(MEM_Int|MEM_Real) );'), (58999, 2, u'-  assert( (pMem->flags&MEM_RowSet)==0 );'), (59000, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59016, 2, u'-    assert( fg & MEM_Real );'), (59038, 2, u'-    assert( (pMem->flags & MEM_Null)!=0 || pFunc==pMem->u.pDef );'), (59039, 2, u'-    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59046, 2, u'-    assert( 0==(pMem->flags&MEM_Dyn) && !pMem->xDel );'), (59060, 2, u'-  assert( p->db==0 || sqlite3_mutex_held(p->db->mutex) );'), (59063, 2, u'-    assert( (p->flags & MEM_Agg)==0 );'), (59066, 2, u'-    assert( (p->flags&MEM_RowSet)==0 );'), (59067, 2, u'-    assert( p->xDel!=SQLITE_DYNAMIC );'), (59144, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59145, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59153, 2, u'-    assert( pMem->z || pMem->n==0 );'), (59169, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59170, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59191, 2, u'-  assert( pMem->flags & MEM_Real );'), (59192, 2, u'-  assert( (pMem->flags & MEM_RowSet)==0 );'), (59193, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59194, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59226, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59227, 2, u'-  assert( (pMem->flags & MEM_RowSet)==0 );'), (59228, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59240, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59241, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59258, 2, u'-    assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );'), (59259, 2, u'-    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59268, 2, u'-  assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))!=0 );'), (59345, 2, u'-  assert( db!=0 );'), (59346, 2, u'-  assert( (pMem->flags & MEM_RowSet)==0 );'), (59352, 2, u'-    assert( pMem->zMalloc );'), (59355, 2, u'-    assert( pMem->u.pRowSet!=0 );'), (59365, 2, u'-  assert( p->db!=0 );'), (59410, 2, u'-  assert( (pFrom->flags & MEM_RowSet)==0 );'), (59416, 2, u'-    assert( srcType==MEM_Ephem || srcType==MEM_Static );'), (59428, 2, u'-  assert( (pFrom->flags & MEM_RowSet)==0 );'), (59450, 2, u'-  assert( pFrom->db==0 || sqlite3_mutex_held(pFrom->db->mutex) );'), (59451, 2, u'-  assert( pTo->db==0 || sqlite3_mutex_held(pTo->db->mutex) );'), (59452, 2, u'-  assert( pFrom->db==0 || pTo->db==0 || pFrom->db==pTo->db );'), (59487, 2, u'-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59488, 2, u'-  assert( (pMem->flags & MEM_RowSet)==0 );'), (59503, 2, u'-    assert( enc!=0 );'), (59574, 2, u'-  assert( (combined_flags & MEM_RowSet)==0 );'), (59610, 2, u'-      assert( f1&MEM_Int );'), (59611, 2, u'-      assert( f2&MEM_Int );'), (59629, 2, u'-    assert( pMem1->enc==pMem2->enc );'), (59630, 2, u'-    assert( pMem1->enc==SQLITE_UTF8 ||'), (59637, 2, u'-    assert( !pColl || pColl->xCmp );'), (59699, 2, u'-  assert( sqlite3BtreeCursorIsValid(pCur) );'), (59703, 2, u'-  assert( (pMem->flags & MEM_RowSet)==0 );'), (59709, 2, u'-  assert( zData!=0 );'), (59748, 2, u'-  assert( pVal->db==0 || sqlite3_mutex_held(pVal->db->mutex) );'), (59749, 2, u'-  assert( (enc&3)==(enc&~SQLITE_UTF16_ALIGNED) );'), (59750, 2, u'-  assert( (pVal->flags & MEM_RowSet)==0 );'), (59755, 2, u'-  assert( (MEM_Blob>>3) == MEM_Str );'), (59761, 2, u'-      assert( (pVal->flags & (MEM_Ephem|MEM_Static))!=0 );'), (59768, 2, u'-    assert( (pVal->flags&MEM_Blob)==0 );'), (59770, 2, u'-    assert( 0==(1&SQLITE_PTR_TO_INT(pVal->z)) );'), (59772, 2, u'-  assert(pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) || pVal->db==0'), (59885, 2, u"-    assert( pExpr->u.zToken[0]=='x' || pExpr->u.zToken[0]=='X' );"), (59886, 2, u"-    assert( pExpr->u.zToken[1]=='\\'' );"), (59891, 2, u"-    assert( zVal[nVal]=='\\'' );"), (59990, 2, u'-  assert( isPrepareV2==1 || isPrepareV2==0 );'), (59995, 2, u'-  assert( p->zSql==0 );'), (60079, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (60080, 2, u'-  assert( op>0 && op<0xff );'), (60182, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (60200, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (60201, 2, u'-  assert( j>=0 && j<p->nLabel );'), (60255, 2, u'-    assert( p->iAddr<nOp );'), (60304, 2, u'-SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){'), (60367, 2, u'-      assert( p->nOp - i >= 3 );'), (60368, 2, u'-      assert( pOp[-1].opcode==OP_Integer );'), (60381, 2, u'-      assert( -1-pOp->p2<p->nLabel );'), (60395, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (60412, 2, u'-  assert( aOp && !p->db->mallocFailed );'), (60415, 2, u'-  assert( p->btreeMask==0 );'), (60429, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (60470, 2, u'-  assert( p!=0 );'), (60481, 2, u'-  assert( p!=0 );'), (60491, 2, u'-  assert( p!=0 );'), (60502, 2, u'-  assert( p!=0 );'), (60504, 2, u'-    assert( p->nOp>0 );'), (60514, 2, u'-  assert( addr>=0 || p->db->mallocFailed );'), (60536, 2, u'-    assert( db );'), (60649, 2, u'-  assert( p!=0 );'), (60651, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (60658, 2, u'-  assert( p->nOp>0 );'), (60659, 2, u'-  assert( addr<p->nOp );'), (60664, 2, u'-  assert( pOp->p4type==P4_NOTUSED || pOp->p4type==P4_INT32 );'), (60687, 2, u'-      assert( aSortOrder!=0 );'), (60702, 2, u'-    assert( ((VTable *)zP4)->db==p->db );'), (60721, 2, u'-  assert( p->nOp>0 || p->aOp==0 );'), (60722, 2, u'-  assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );'), (60724, 2, u'-    assert( p->aOp );'), (60773, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (60780, 2, u'-  assert( (addr>=0 && addr<p->nOp) || p->db->mallocFailed );'), (60796, 2, u'-  assert( nTemp>=20 );'), (60802, 2, u'-      assert( pKeyInfo->aSortOrder!=0 );'), (60822, 2, u'-      assert( i<nTemp );'), (60858, 2, u'-        assert( pMem->flags & MEM_Blob );'), (60890, 2, u'-  assert( zP4!=0 );'), (60904, 2, u'-  assert( i>=0 && i<p->db->nDb && i<(int)sizeof(yDbMask)*8 );'), (60905, 2, u'-  assert( i<(int)sizeof(p->btreeMask)*8 );'), (61011, 2, u'-      assert( (&p[1])==pEnd || p[0].db==p[1].db );'), (61081, 2, u'-  assert( p->explain );'), (61082, 2, u'-  assert( p->magic==VDBE_MAGIC_RUN );'), (61083, 2, u'-  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY || p->rc==SQLITE_NOMEM );'), (61112, 2, u'-    assert( p->nMem>9 );'), (61160, 2, u'-      assert( pMem->z!=0 );'), (61202, 2, u'-      assert( p->db->mallocFailed );'), (61210, 2, u'-      assert( pMem->z!=0 );'), (61219, 2, u'-        assert( p->db->mallocFailed );'), (61328, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(*ppFrom) );'), (61348, 2, u'-  assert( p!=0 );'), (61349, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (61353, 2, u'-  assert( p->nOp>0 );'), (61360, 2, u'-    assert( p->aMem[i].db==p->db );'), (61413, 2, u'-  assert( p!=0 );'), (61414, 2, u'-  assert( p->nOp>0 );'), (61415, 2, u'-  assert( pParse!=0 );'), (61416, 2, u'-  assert( p->magic==VDBE_MAGIC_INIT );'), (61418, 2, u'-  assert( db->mallocFailed==0 );'), (61450, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(zCsr) );'), (61603, 2, u'-  if( p->apCsr ) for(i=0; i<p->nCursor; i++) assert( p->apCsr[i]==0 );'), (61605, 2, u'-    for(i=1; i<=p->nMem; i++) assert( p->aMem[i].flags==MEM_Invalid );'), (61657, 2, u'-  assert( idx<p->nResColumn );'), (61658, 2, u'-  assert( var<COLNAME_N );'), (61660, 2, u'-    assert( !zName || xDel!=SQLITE_DYNAMIC );'), (61663, 2, u'-  assert( p->aColName!=0 );'), (61666, 2, u'-  assert( rc!=0 || !zName || (pColName->flags&MEM_Term)!=0 );'), (61797, 2, u"-      assert( zMaster[sqlite3Strlen30(zMaster)-3]=='9' );"), (61826, 2, u'-        assert( zFile[0]!=0 );'), (61871, 2, u'-    assert( rc!=SQLITE_BUSY );'), (61935, 2, u'-  assert( cnt==db->activeVdbeCnt );'), (61936, 2, u'-  assert( nWrite==db->writeVdbeCnt );'), (61965, 2, u'-    assert( eOp==SAVEPOINT_ROLLBACK || eOp==SAVEPOINT_RELEASE);'), (61966, 2, u'-    assert( db->nStatement>0 );'), (61967, 2, u'-    assert( p->iStatement==(db->nStatement+db->nSavepoint) );'), (62083, 2, u'-    assert( p->rc!=SQLITE_IOERR_BLOCKED );  /* This error no longer exists */'), (62211, 2, u'-    assert( db->activeVdbeCnt>=db->writeVdbeCnt );'), (62227, 2, u'-  assert( db->activeVdbeCnt>0 || db->autoCommit==0 || db->nStatement==0 );'), (62272, 2, u'-    assert( v->db->init.busy==0 );'), (62368, 2, u'-    assert( (rc & p->db->errMask)==rc );'), (62404, 2, u'-  assert( p->db==0 || p->db==db );'), (62432, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (62437, 2, u'-    assert( db->pVdbe==p );'), (62467, 2, u'-    assert( p->isTable );'), (62566, 2, u'-  assert( pMem->db->mallocFailed || flags&(MEM_Str|MEM_Blob) );'), (62571, 2, u'-  assert( n>=0 );'), (62667, 2, u'-      assert( sizeof(v)==sizeof(pMem->r) );'), (62674, 2, u'-    assert( len<=(u32)nBuf );'), (62684, 2, u'-    assert( pMem->n + ((pMem->flags & MEM_Zero)?pMem->u.nZero:0)'), (62686, 2, u'-    assert( pMem->n<=nBuf );'), (62691, 2, u'-      assert( nBuf>=0 );'), (62762, 2, u'-      assert( sizeof(r1)==sizeof(t2) && memcmp(&r1, &t2, sizeof(r1))==0 );'), (62772, 2, u'-        assert( sizeof(x)==8 && sizeof(pMem->r)==8 );'), (62841, 2, u'-  assert( pKeyInfo->aSortOrder!=0 );'), (62866, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (62882, 2, u'-  assert( u<=pKeyInfo->nField + 1 );'), (62935, 2, u'-  assert( pKeyInfo->aSortOrder!=0 );'), (62952, 2, u'-      assert( mem1.zMalloc==0 );  /* See comment below */'), (62965, 2, u'-        assert( idx1==szHdr1 && rc );'), (62966, 2, u'-        assert( mem1.flags & MEM_Int );'), (62980, 2, u'-  assert( mem1.zMalloc==0 );'), (62990, 2, u'-  assert( rc==0 );'), (63025, 2, u'-  assert( sqlite3BtreeCursorIsValid(pCur) );'), (63027, 2, u'-  assert( rc==SQLITE_OK );     /* pCur is always valid so KeySize cannot fail */'), (63028, 2, u'-  assert( (nCellKey & SQLITE_MAX_U32)==(u64)nCellKey );'), (63100, 2, u'-  assert( sqlite3BtreeCursorIsValid(pCur) );'), (63102, 2, u'-  assert( rc==SQLITE_OK );    /* pCur is always valid so KeySize cannot fail */'), (63114, 2, u'-  assert( pUnpacked->flags & UNPACKED_PREFIX_MATCH );'), (63125, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (63171, 2, u'-  assert( iVar>0 );'), (63193, 2, u'-  assert( iVar>0 );'), (63300, 2, u'-    assert( (rc & (v->db->errMask))==rc );'), (63403, 2, u'-  assert( n>=0 );'), (63404, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63408, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63412, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63418, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63424, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63428, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63432, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63441, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63451, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63460, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63469, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63474, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63478, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63491, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63499, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63539, 2, u'-  assert(p);'), (63589, 2, u'-    assert( db->writeVdbeCnt>0 || db->autoCommit==0 || db->nDeferredCons==0 );'), (63623, 2, u'-    assert( p->rc==SQLITE_OK );'), (63642, 2, u'-  assert( rc==SQLITE_ROW  || rc==SQLITE_DONE   || rc==SQLITE_ERROR'), (63645, 2, u'-  assert( p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE );'), (63679, 2, u'-    assert( v->expired==0 );'), (63710, 2, u'-  assert( p && p->pFunc );'), (63725, 2, u'-  assert( p && p->pFunc );'), (63758, 2, u'-  assert( p && p->pFunc && p->pFunc->xStep );'), (63759, 2, u'-  assert( sqlite3_mutex_held(p->s.db->mutex) );'), (63786, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63809, 2, u'-  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63849, 2, u'-  assert( p && p->pMem && p->pFunc && p->pFunc->xStep );'), (64050, 2, u'-  assert( db!=0 );'), (64055, 2, u'-    assert( db->mallocFailed==0 );'), (64411, 2, u'-  assert( pTo->db==pFrom->db );'), (64412, 2, u'-  assert( pTo->nVar==pFrom->nVar );'), (64540, 2, u'-    assert( n>0 && tokenType!=TK_ILLEGAL );'), (64603, 2, u'-      assert( n>0 );'), (64606, 2, u'-      assert( zRawSql[0] || nToken==0 );'), (64610, 2, u'-          assert( sqlite3Isdigit(zRawSql[1]) );'), (64616, 2, u"-        assert( zRawSql[0]==':' || zRawSql[0]=='$' || zRawSql[0]=='@' );"), (64621, 2, u'-        assert( idx>0 );'), (64625, 2, u'-      assert( idx>0 && idx<=p->nVar );'), (64664, 2, u'-        assert( pVar->flags & MEM_Blob );'), (65018, 2, u'-  assert( iCur<p->nCursor );'), (65096, 2, u'-    assert( affinity==SQLITE_AFF_INTEGER || affinity==SQLITE_AFF_REAL'), (65148, 2, u'-      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (65151, 2, u'-      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (65154, 2, u'-      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (65185, 2, u'-      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (65188, 2, u'-      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (65191, 2, u'-      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (65383, 2, u'-  assert( n==(db->nSavepoint + db->isTransactionSavepoint) );'), (65890, 2, u'-  assert( p->magic==VDBE_MAGIC_RUN );  /* sqlite3_step() verifies this */'), (65897, 2, u'-  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY );'), (65899, 2, u'-  assert( p->explain==0 );'), (65920, 2, u'-    assert( pc>=0 && pc<p->nOp );'), (65979, 2, u'-    assert( pOp->opflags==sqlite3OpcodeProperty[pOp->opcode] );'), (65981, 2, u'-      assert( pOp->p2>0 );'), (65982, 2, u'-      assert( pOp->p2<=p->nMem );'), (65992, 2, u'-      assert( pOp->p1>0 );'), (65993, 2, u'-      assert( pOp->p1<=p->nMem );'), (65994, 2, u'-      assert( memIsValid(&aMem[pOp->p1]) );'), (65998, 2, u'-      assert( pOp->p2>0 );'), (65999, 2, u'-      assert( pOp->p2<=p->nMem );'), (66000, 2, u'-      assert( memIsValid(&aMem[pOp->p2]) );'), (66004, 2, u'-      assert( pOp->p3>0 );'), (66005, 2, u'-      assert( pOp->p3<=p->nMem );'), (66006, 2, u'-      assert( memIsValid(&aMem[pOp->p3]) );'), (66010, 2, u'-      assert( pOp->p2>0 );'), (66011, 2, u'-      assert( pOp->p2<=p->nMem );'), (66015, 2, u'-      assert( pOp->p3>0 );'), (66016, 2, u'-      assert( pOp->p3<=p->nMem );'), (66077, 2, u'-  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (66079, 2, u'-  assert( (pIn1->flags & MEM_Dyn)==0 );'), (66094, 2, u'-  assert( pIn1->flags & MEM_Int );'), (66108, 2, u'-  assert( (pIn1->flags & MEM_Dyn)==0 );'), (66174, 2, u'-    assert( p->rc!=SQLITE_OK );'), (66183, 2, u'-  assert( rc==SQLITE_BUSY || rc==SQLITE_OK || rc==SQLITE_ERROR );'), (66187, 2, u'-    assert( rc==SQLITE_OK || (p->rc&0xff)==SQLITE_CONSTRAINT );'), (66188, 2, u'-    assert( rc==SQLITE_OK || db->nDeferredCons>0 );'), (66209, 2, u'-  assert( pOp->p4.pI64!=0 );'), (66222, 2, u'-  assert( !sqlite3IsNaN(*pOp->p4.pReal) );'), (66234, 2, u'-  assert( pOp->p4.z!=0 );'), (66243, 2, u'-    assert( pOut->zMalloc==pOut->z );'), (66244, 2, u'-    assert( pOut->flags & MEM_Dyn );'), (66267, 2, u'-  assert( pOp->p4.z!=0 );'), (66293, 2, u'-  assert( pOp->p3<=p->nMem );'), (66312, 2, u'-  assert( pOp->p1 <= SQLITE_MAX_LENGTH );'), (66331, 2, u'-  assert( pOp->p1>0 && pOp->p1<=p->nVar );'), (66332, 2, u'-  assert( pOp->p4.z==0 || pOp->p4.z==p->azVar[pOp->p1-1] );'), (66360, 2, u'-  assert( u.ad.n>0 && u.ad.p1>0 && u.ad.p2>0 );'), (66361, 2, u'-  assert( u.ad.p1+u.ad.n<=u.ad.p2 || u.ad.p2+u.ad.n<=u.ad.p1 );'), (66366, 2, u'-    assert( pOut<=&aMem[p->nMem] );'), (66367, 2, u'-    assert( pIn1<=&aMem[p->nMem] );'), (66368, 2, u'-    assert( memIsValid(pIn1) );'), (66401, 2, u'-  assert( pOut!=pIn1 );'), (66431, 2, u'-  assert( pOut!=pIn1 );'), (66453, 2, u'-  assert( p->nResColumn==pOp->p2 );'), (66454, 2, u'-  assert( pOp->p1>0 );'), (66455, 2, u'-  assert( pOp->p1+pOp->p2<=p->nMem+1 );'), (66461, 2, u'-    assert( db->flags&SQLITE_CountRows );'), (66462, 2, u'-    assert( p->usesStmtJournal );'), (66481, 2, u'-  assert( p->iStatement==0 || db->flags&SQLITE_CountRows );'), (66496, 2, u'-    assert( memIsValid(&u.af.pMem[u.af.i]) );'), (66498, 2, u'-    assert( (u.af.pMem[u.af.i].flags & MEM_Ephem)==0'), (66533, 2, u'-  assert( pIn1!=pOut );'), (66700, 2, u'-  assert( pOp->p4type==P4_COLLSEQ );'), (66734, 2, u'-  assert( u.ai.apVal || u.ai.n==0 );'), (66735, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (66739, 2, u'-  assert( u.ai.n==0 || (pOp->p2>0 && pOp->p2+u.ai.n<=p->nMem+1) );'), (66740, 2, u'-  assert( pOp->p3<pOp->p2 || pOp->p3>=pOp->p2+u.ai.n );'), (66743, 2, u'-    assert( memIsValid(u.ai.pArg) );'), (66750, 2, u'-  assert( pOp->p4type==P4_FUNCDEF || pOp->p4type==P4_VDBEFUNC );'), (66773, 2, u'-    assert( pOp>aOp );'), (66774, 2, u'-    assert( pOp[-1].p4type==P4_COLLSEQ );'), (66775, 2, u'-    assert( pOp[-1].opcode==OP_CollSeq );'), (66879, 2, u'-    assert( u.aj.op==OP_ShiftRight || u.aj.op==OP_ShiftLeft );'), (66883, 2, u'-      assert( OP_ShiftRight==OP_ShiftLeft+1 );'), (66978, 2, u'-  assert( MEM_Str==(MEM_Blob>>3) );'), (66982, 2, u'-  assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (67002, 2, u'-    assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (67165, 2, u'-      assert( pOp->opcode==OP_Eq || pOp->opcode==OP_Ne );'), (67166, 2, u'-      assert( (u.ak.flags1 & MEM_Cleared)==0 );'), (67198, 2, u'-    assert( pOp->p4type==P4_COLLSEQ || pOp->p4.pColl==0 );'), (67238, 2, u'-  assert( pOp->p4type==P4_INTARRAY );'), (67239, 2, u'-  assert( pOp->p4.ai );'), (67278, 2, u'-  assert( u.al.n>0 );'), (67279, 2, u'-  assert( u.al.pKeyInfo!=0 );'), (67286, 2, u'-    assert( u.al.p1>0 && u.al.p1+mx<=p->nMem+1 );'), (67287, 2, u'-    assert( u.al.p2>0 && u.al.p2+mx<=p->nMem+1 );'), (67289, 2, u'-    assert( u.al.p1>0 && u.al.p1+u.al.n<=p->nMem+1 );'), (67290, 2, u'-    assert( u.al.p2>0 && u.al.p2+u.al.n<=p->nMem+1 );'), (67295, 2, u'-    assert( memIsValid(&aMem[u.al.p1+u.al.idx]) );'), (67296, 2, u'-    assert( memIsValid(&aMem[u.al.p2+u.al.idx]) );'), (67299, 2, u'-    assert( u.al.i<u.al.pKeyInfo->nField );'), (67423, 2, u'-  assert( pOp->p1<p->nOnceFlag );'), (67546, 2, u'-  assert( u.ao.p1<p->nCursor );'), (67547, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (67565, 2, u'-  assert( u.ao.pC!=0 );'), (67567, 2, u'-  assert( u.ao.pC->pVtabCursor==0 );'), (67580, 2, u'-      assert( sqlite3BtreeCursorIsValid(u.ao.pCrsr) );'), (67582, 2, u'-      assert( rc==SQLITE_OK );   /* True because of CursorMoveto() call above */'), (67586, 2, u'-      assert( (u.ao.payloadSize64 & SQLITE_MAX_U32)==(u64)u.ao.payloadSize64 );'), (67589, 2, u'-      assert( sqlite3BtreeCursorIsValid(u.ao.pCrsr) );'), (67591, 2, u'-      assert( rc==SQLITE_OK );   /* DataSize() cannot fail */'), (67600, 2, u'-    assert( u.ao.pReg->flags & MEM_Blob );'), (67601, 2, u'-    assert( memIsValid(u.ao.pReg) );'), (67605, 2, u'-    assert( u.ao.payloadSize==0 || u.ao.zRec!=0 );'), (67617, 2, u'-  assert( db->aLimit[SQLITE_LIMIT_LENGTH]>=0 );'), (67623, 2, u'-  assert( u.ao.p2<u.ao.nField );'), (67632, 2, u'-    assert(u.ao.aType);'), (67652, 2, u'-      assert( u.ao.avail>=0 );'), (67767, 2, u'-    assert( rc==SQLITE_OK );'), (67811, 2, u'-    assert( u.ao.sMem.z==u.ao.sMem.zMalloc );'), (67812, 2, u'-    assert( !(u.ao.pDest->flags & MEM_Dyn) );'), (67813, 2, u'-    assert( !(u.ao.pDest->flags & (MEM_Blob|MEM_Str)) || u.ao.pDest->z==u.ao.sMem.z );'), (67843, 2, u'-  assert( u.ap.zAffinity!=0 );'), (67844, 2, u'-  assert( u.ap.zAffinity[pOp->p2]==0 );'), (67847, 2, u'-    assert( pIn1 <= &p->aMem[p->nMem] );'), (67848, 2, u'-    assert( memIsValid(pIn1) );'), (67910, 2, u'-  assert( u.aq.nField>0 && pOp->p2>0 && pOp->p2+u.aq.nField<=p->nMem+1 );'), (67917, 2, u'-  assert( pOp->p3<pOp->p1 || pOp->p3>=pOp->p1+pOp->p2 );'), (67925, 2, u'-    assert( memIsValid(u.aq.pRec) );'), (67974, 2, u'-  assert( u.aq.i==u.aq.nByte );'), (67976, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (68037, 2, u'-  assert( db->pSavepoint==0 || db->autoCommit==0 );'), (68038, 2, u'-  assert( u.as.p1==SAVEPOINT_BEGIN||u.as.p1==SAVEPOINT_RELEASE||u.as.p1==SAVEPOINT_ROLLBACK );'), (68039, 2, u'-  assert( db->pSavepoint || db->isTransactionSavepoint==0 );'), (68040, 2, u'-  assert( checkSavepointCount(db) );'), (68058, 2, u'-      assert( db->autoCommit==0 || db->nVTrans==0 );'), (68162, 2, u'-        assert( u.as.pSavepoint==db->pSavepoint );'), (68201, 2, u'-  assert( u.at.desiredAutoCommit==1 || u.at.desiredAutoCommit==0 );'), (68202, 2, u'-  assert( u.at.desiredAutoCommit==1 || u.at.iRollback==0 );'), (68203, 2, u'-  assert( db->activeVdbeCnt>0 );  /* At least this one VM is active */'), (68225, 2, u'-      assert( u.at.desiredAutoCommit==1 );'), (68239, 2, u'-    assert( db->nStatement==0 );'), (68294, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (68295, 2, u'-  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (68312, 2, u'-      assert( sqlite3BtreeIsInTrans(u.au.pBt) );'), (68314, 2, u'-        assert( db->nStatement>=0 && db->nSavepoint>=0 );'), (68354, 2, u'-  assert( pOp->p3<SQLITE_N_BTREE_META );'), (68355, 2, u'-  assert( u.av.iDb>=0 && u.av.iDb<db->nDb );'), (68356, 2, u'-  assert( db->aDb[u.av.iDb].pBt!=0 );'), (68357, 2, u'-  assert( (p->btreeMask & (((yDbMask)1)<<u.av.iDb))!=0 );'), (68378, 2, u'-  assert( pOp->p2<SQLITE_N_BTREE_META );'), (68379, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (68380, 2, u'-  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (68382, 2, u'-  assert( u.aw.pDb->pBt!=0 );'), (68383, 2, u'-  assert( sqlite3SchemaMutexHeld(db, pOp->p1, 0) );'), (68430, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (68431, 2, u'-  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (68432, 2, u'-  assert( sqlite3SchemaMutexHeld(db, pOp->p1, 0) );'), (68528, 2, u'-  assert( (pOp->p5&(OPFLAG_P2ISREG|OPFLAG_BULKCSR))==pOp->p5 );'), (68529, 2, u'-  assert( pOp->opcode==OP_OpenWrite || pOp->p5==0 );'), (68540, 2, u'-  assert( u.ay.iDb>=0 && u.ay.iDb<db->nDb );'), (68541, 2, u'-  assert( (p->btreeMask & (((yDbMask)1)<<u.ay.iDb))!=0 );'), (68544, 2, u'-  assert( u.ay.pX!=0 );'), (68547, 2, u'-    assert( sqlite3SchemaMutexHeld(db, u.ay.iDb, 0) );'), (68555, 2, u'-    assert( u.ay.p2>0 );'), (68556, 2, u'-    assert( u.ay.p2<=p->nMem );'), (68558, 2, u'-    assert( memIsValid(pIn2) );'), (68559, 2, u'-    assert( (pIn2->flags & MEM_Int)!=0 );'), (68578, 2, u'-  assert( pOp->p1>=0 );'), (68585, 2, u'-  assert( OPFLAG_BULKCSR==BTREE_BULKLOAD );'), (68590, 2, u'-  assert( rc==SQLITE_OK );'), (68643, 2, u'-  assert( pOp->p1>=0 );'), (68660, 2, u'-      assert( pOp->p4type==P4_KEYINFO );'), (68663, 2, u'-        assert( pgno==MASTER_ROOT+1 );'), (68721, 2, u'-  assert( pOp->p1>=0 );'), (68738, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (68809, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (68810, 2, u'-  assert( pOp->p2!=0 );'), (68812, 2, u'-  assert( u.bc.pC!=0 );'), (68813, 2, u'-  assert( u.bc.pC->pseudoTableReg==0 );'), (68814, 2, u'-  assert( OP_SeekLe == OP_SeekLt+1 );'), (68815, 2, u'-  assert( OP_SeekGe == OP_SeekLt+2 );'), (68816, 2, u'-  assert( OP_SeekGt == OP_SeekLt+3 );'), (68817, 2, u'-  assert( u.bc.pC->isOrdered );'), (68841, 2, u'-        assert( (pIn3->flags & MEM_Real)!=0 );'), (68848, 2, u'-            if( u.bc.oc>=OP_SeekGe ){  assert( u.bc.oc==OP_SeekGe || u.bc.oc==OP_SeekGt );'), (68853, 2, u'-            if( u.bc.oc<=OP_SeekLe ){  assert( u.bc.oc==OP_SeekLt || u.bc.oc==OP_SeekLe );'), (68867, 2, u'-          assert( u.bc.oc==OP_SeekLe || u.bc.oc==OP_SeekGt );'), (68881, 2, u'-      assert( pOp->p4type==P4_INT32 );'), (68882, 2, u'-      assert( u.bc.nField>0 );'), (68894, 2, u'-      assert( u.bc.oc!=OP_SeekGt || u.bc.r.flags==UNPACKED_INCRKEY );'), (68895, 2, u'-      assert( u.bc.oc!=OP_SeekLe || u.bc.r.flags==UNPACKED_INCRKEY );'), (68896, 2, u'-      assert( u.bc.oc!=OP_SeekGe || u.bc.r.flags==0 );'), (68897, 2, u'-      assert( u.bc.oc!=OP_SeekLt || u.bc.r.flags==0 );'), (68901, 2, u'-      { int i; for(i=0; i<u.bc.r.nField; i++) assert( memIsValid(&u.bc.r.aMem[i]) ); }'), (68915, 2, u'-    if( u.bc.oc>=OP_SeekGe ){  assert( u.bc.oc==OP_SeekGe || u.bc.oc==OP_SeekGt );'), (68924, 2, u'-      assert( u.bc.oc==OP_SeekLt || u.bc.oc==OP_SeekLe );'), (68936, 2, u'-    assert( pOp->p2>0 );'), (68964, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (68966, 2, u'-  assert( u.bd.pC!=0 );'), (68968, 2, u'-    assert( u.bd.pC->isTable );'), (69020, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69021, 2, u'-  assert( pOp->p4type==P4_INT32 );'), (69023, 2, u'-  assert( u.be.pC!=0 );'), (69027, 2, u'-    assert( u.be.pC->isTable==0 );'), (69033, 2, u'-      { int i; for(i=0; i<u.be.r.nField; i++) assert( memIsValid(&u.be.r.aMem[i]) ); }'), (69042, 2, u'-      assert( pIn3->flags & MEM_Blob );'), (69043, 2, u'-      assert( (pIn3->flags & MEM_Zero)==0 );  /* zeroblobs already expanded */'), (69106, 2, u'-  assert( pOp->p4type==P4_INT32 );'), (69107, 2, u'-  assert( pOp->p4.i>0 && pOp->p4.i<=p->nMem );'), (69108, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69112, 2, u'-  assert( u.bf.pCx->deferredMoveto==0 );'), (69126, 2, u'-  assert( (u.bf.aMx[u.bf.nField].flags & MEM_Null)==0 );'), (69135, 2, u'-    { int i; for(i=0; i<u.bf.r.nField; i++) assert( memIsValid(&u.bf.r.aMem[i]) ); }'), (69178, 2, u'-  assert( pIn3->flags & MEM_Int );'), (69179, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69181, 2, u'-  assert( u.bg.pC!=0 );'), (69182, 2, u'-  assert( u.bg.pC->isTable );'), (69183, 2, u'-  assert( u.bg.pC->pseudoTableReg==0 );'), (69196, 2, u'-      assert( u.bg.pC->rowidIsValid==0 );'), (69204, 2, u'-    assert( u.bg.pC->rowidIsValid==0 );'), (69218, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69219, 2, u'-  assert( p->apCsr[pOp->p1]!=0 );'), (69251, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69253, 2, u'-  assert( u.bh.pC!=0 );'), (69270, 2, u'-    assert( u.bh.pC->isTable );'), (69292, 2, u'-          assert( sqlite3BtreeCursorIsValid(u.bh.pC->pCursor) );'), (69294, 2, u'-          assert( rc==SQLITE_OK );   /* Cannot fail following BtreeLast() */'), (69306, 2, u'-        assert( pOp->p3>0 );'), (69310, 2, u'-          assert( pOp->p3<=u.bh.pFrame->nMem );'), (69314, 2, u'-          assert( pOp->p3<=p->nMem );'), (69318, 2, u'-        assert( memIsValid(u.bh.pMem) );'), (69322, 2, u'-        assert( (u.bh.pMem->flags & MEM_Int)!=0 );  /* mem(P3) holds an integer */'), (69366, 2, u'-      assert( u.bh.v>0 );  /* EV: R-40812-03570 */'), (69435, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69436, 2, u'-  assert( memIsValid(u.bi.pData) );'), (69438, 2, u'-  assert( u.bi.pC!=0 );'), (69439, 2, u'-  assert( u.bi.pC->pCursor!=0 );'), (69440, 2, u'-  assert( u.bi.pC->pseudoTableReg==0 );'), (69441, 2, u'-  assert( u.bi.pC->isTable );'), (69446, 2, u'-    assert( u.bi.pKey->flags & MEM_Int );'), (69447, 2, u'-    assert( memIsValid(u.bi.pKey) );'), (69451, 2, u'-    assert( pOp->opcode==OP_InsertInt );'), (69461, 2, u'-    assert( u.bi.pData->flags & (MEM_Blob|MEM_Str) );'), (69483, 2, u'-    assert( u.bi.pC->isTable );'), (69485, 2, u'-    assert( u.bi.pC->iDb>=0 );'), (69517, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69519, 2, u'-  assert( u.bj.pC!=0 );'), (69520, 2, u'-  assert( u.bj.pC->pCursor!=0 );  /* Only valid for real tables, no pseudotables */'), (69526, 2, u'-    assert( u.bj.pC->isTable );'), (69527, 2, u'-    assert( u.bj.pC->rowidIsValid );  /* lastRowid set by previous OP_NotFound */'), (69538, 2, u'-  assert( u.bj.pC->deferredMoveto==0 );'), (69551, 2, u'-    assert( u.bj.pC->iDb>=0 );'), (69583, 2, u'-  assert( isSorter(u.bk.pC) );'), (69603, 2, u'-  assert( u.bl.pC->isSorter );'), (69641, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69643, 2, u'-  assert( u.bm.pC->isSorter==0 );'), (69644, 2, u'-  assert( u.bm.pC->isTable || pOp->opcode!=OP_RowData );'), (69645, 2, u'-  assert( u.bm.pC->isIndex || pOp->opcode==OP_RowData );'), (69646, 2, u'-  assert( u.bm.pC!=0 );'), (69647, 2, u'-  assert( u.bm.pC->nullRow==0 );'), (69648, 2, u'-  assert( u.bm.pC->pseudoTableReg==0 );'), (69649, 2, u'-  assert( u.bm.pC->pCursor!=0 );'), (69651, 2, u'-  assert( sqlite3BtreeCursorIsValid(u.bm.pCrsr) );'), (69658, 2, u'-  assert( u.bm.pC->deferredMoveto==0 );'), (69663, 2, u'-    assert( !u.bm.pC->isTable );'), (69665, 2, u'-    assert( rc==SQLITE_OK );    /* True because of CursorMoveto() call above */'), (69672, 2, u'-    assert( rc==SQLITE_OK );    /* DataSize() cannot fail */'), (69709, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69711, 2, u'-  assert( u.bn.pC!=0 );'), (69712, 2, u'-  assert( u.bn.pC->pseudoTableReg==0 || u.bn.pC->nullRow );'), (69722, 2, u'-    assert( u.bn.pModule->xRowid );'), (69727, 2, u'-    assert( u.bn.pC->pCursor!=0 );'), (69734, 2, u'-      assert( rc==SQLITE_OK );  /* Always so because of CursorMoveto() above */'), (69752, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69754, 2, u'-  assert( u.bo.pC!=0 );'), (69757, 2, u'-  assert( u.bo.pC->pCursor || u.bo.pC->pVtabCursor );'), (69779, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69781, 2, u'-  assert( u.bp.pC!=0 );'), (69834, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69836, 2, u'-  assert( u.bq.pC!=0 );'), (69837, 2, u'-  assert( u.bq.pC->isSorter==(pOp->opcode==OP_SorterSort) );'), (69843, 2, u'-    assert( u.bq.pCrsr );'), (69851, 2, u'-  assert( pOp->p2>0 && pOp->p2<p->nOp );'), (69899, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69900, 2, u'-  assert( pOp->p5<=ArraySize(p->aCounter) );'), (69905, 2, u'-  assert( u.br.pC->isSorter==(pOp->opcode==OP_SorterNext) );'), (69907, 2, u'-    assert( pOp->opcode==OP_SorterNext );'), (69911, 2, u'-    assert( u.br.pC->deferredMoveto==0 );'), (69912, 2, u'-    assert( u.br.pC->pCursor );'), (69913, 2, u'-    assert( pOp->opcode!=OP_Next || pOp->p4.xAdvance==sqlite3BtreeNext );'), (69914, 2, u'-    assert( pOp->opcode!=OP_Prev || pOp->p4.xAdvance==sqlite3BtreePrevious );'), (69951, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69953, 2, u'-  assert( u.bs.pC!=0 );'), (69954, 2, u'-  assert( u.bs.pC->isSorter==(pOp->opcode==OP_SorterInsert) );'), (69956, 2, u'-  assert( pIn2->flags & MEM_Blob );'), (69959, 2, u'-    assert( u.bs.pC->isTable==0 );'), (69970, 2, u'-        assert( u.bs.pC->deferredMoveto==0 );'), (69992, 2, u'-  assert( pOp->p3>0 );'), (69993, 2, u'-  assert( pOp->p2>0 && pOp->p2+pOp->p3<=p->nMem+1 );'), (69994, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69996, 2, u'-  assert( u.bt.pC!=0 );'), (70004, 2, u'-    { int i; for(i=0; i<u.bt.r.nField; i++) assert( memIsValid(&u.bt.r.aMem[i]) ); }'), (70010, 2, u'-    assert( u.bt.pC->deferredMoveto==0 );'), (70031, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70033, 2, u'-  assert( u.bu.pC!=0 );'), (70039, 2, u'-    assert( u.bu.pC->deferredMoveto==0 );'), (70040, 2, u'-    assert( u.bu.pC->isTable==0 );'), (70087, 2, u'-  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70089, 2, u'-  assert( u.bv.pC!=0 );'), (70090, 2, u'-  assert( u.bv.pC->isOrdered );'), (70092, 2, u'-    assert( u.bv.pC->deferredMoveto==0 );'), (70093, 2, u'-    assert( pOp->p5==0 || pOp->p5==1 );'), (70094, 2, u'-    assert( pOp->p4type==P4_INT32 );'), (70104, 2, u'-    { int i; for(i=0; i<u.bv.r.nField; i++) assert( memIsValid(&u.bv.r.aMem[i]) ); }'), (70110, 2, u'-      assert( pOp->opcode==OP_IdxGE );'), (70164, 2, u'-    assert( u.bw.iCnt==1 );'), (70165, 2, u'-    assert( (p->btreeMask & (((yDbMask)1)<<u.bw.iDb))!=0 );'), (70173, 2, u'-      assert( resetSchemaOnFault==0 || resetSchemaOnFault==u.bw.iDb+1 );'), (70205, 2, u'-  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p2))!=0 );'), (70212, 2, u'-      assert( memIsValid(&aMem[pOp->p3]) );'), (70251, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (70252, 2, u'-  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (70254, 2, u'-  assert( u.by.pDb->pBt!=0 );'), (70288, 2, u'-    assert( u.bz.iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[u.bz.iDb].pBt) );'), (70293, 2, u'-  assert( u.bz.iDb>=0 && u.bz.iDb<db->nDb );'), (70294, 2, u'-  assert( DbHasProperty(db, u.bz.iDb, DB_SchemaLoaded) );'), (70306, 2, u'-      assert( db->init.busy==0 );'), (70309, 2, u'-      assert( !db->mallocFailed );'), (70331, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (70406, 2, u'-  assert( u.ca.nRoot>0 );'), (70409, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (70411, 2, u'-  assert( (u.ca.pnErr->flags & MEM_Int)!=0 );'), (70412, 2, u'-  assert( (u.ca.pnErr->flags & (MEM_Str|MEM_Blob))==0 );'), (70418, 2, u'-  assert( pOp->p5<db->nDb );'), (70419, 2, u'-  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p5))!=0 );'), (70426, 2, u'-    assert( u.ca.z==0 );'), (70448, 2, u'-  assert( (pIn2->flags & MEM_Int)!=0 );'), (70514, 2, u'-  assert( pIn3->flags&MEM_Int );'), (70524, 2, u'-  assert( pOp->p4type==P4_INT32 );'), (70525, 2, u'-  assert( u.cc.iSet==-1 || u.cc.iSet>=0 );'), (70571, 2, u'-  assert( u.cd.pProgram->nOp>0 );'), (70640, 2, u'-    assert( u.cd.pProgram->nMem+u.cd.pProgram->nCsr==u.cd.pFrame->nChildMem );'), (70641, 2, u'-    assert( u.cd.pProgram->nCsr==u.cd.pFrame->nChildCsr );'), (70642, 2, u'-    assert( pc==u.cd.pFrame->pc );'), (70750, 2, u'-  assert( memIsValid(u.cf.pIn1) );'), (70770, 2, u'-  assert( pIn1->flags&MEM_Int );'), (70786, 2, u'-  assert( pIn1->flags&MEM_Int );'), (70803, 2, u'-  assert( pIn1->flags&MEM_Int );'), (70832, 2, u'-  assert( u.cg.n>=0 );'), (70835, 2, u'-  assert( u.cg.apVal || u.cg.n==0 );'), (70837, 2, u'-    assert( memIsValid(u.cg.pRec) );'), (70843, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (70855, 2, u'-    assert( pOp>p->aOp );'), (70856, 2, u'-    assert( pOp[-1].p4type==P4_COLLSEQ );'), (70857, 2, u'-    assert( pOp[-1].opcode==OP_CollSeq );'), (70866, 2, u'-    assert( pOp[-1].opcode==OP_CollSeq );'), (70892, 2, u'-  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (70894, 2, u'-  assert( (u.ch.pMem->flags & ~(MEM_Null|MEM_Agg))==0 );'), (70928, 2, u'-  assert( pOp->p2==SQLITE_CHECKPOINT_PASSIVE'), (70968, 2, u'-  assert( u.cj.eNew==PAGER_JOURNALMODE_DELETE'), (70976, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (71028, 2, u'-      assert( sqlite3BtreeIsInTrans(u.cj.pBt)==0 );'), (71076, 2, u'-  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (71077, 2, u'-  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (71125, 2, u'-    assert( p1>=0 && p1<db->nDb );'), (71126, 2, u'-    assert( (p->btreeMask & (((yDbMask)1)<<p1))!=0 );'), (71127, 2, u'-    assert( isWriteLock==0 || isWriteLock==1 );'), (71204, 2, u'-  assert(u.cm.pVtab && u.cm.pModule);'), (71262, 2, u'-  assert( memIsValid(u.cn.pQuery) );'), (71264, 2, u'-  assert( u.cn.pCur->pVtabCursor );'), (71270, 2, u'-  assert( (u.cn.pQuery->flags&MEM_Int)!=0 && u.cn.pArgc->flags==MEM_Int );'), (71317, 2, u'-  assert( pCur->pVtabCursor );'), (71318, 2, u'-  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (71327, 2, u'-  assert( u.co.pModule->xColumn );'), (71377, 2, u'-  assert( u.cp.pCur->pVtabCursor );'), (71383, 2, u'-  assert( u.cp.pModule->xNext );'), (71422, 2, u'-  assert( u.cq.pVtab->pModule->xRename );'), (71423, 2, u'-  assert( memIsValid(u.cq.pName) );'), (71425, 2, u'-  assert( u.cq.pName->flags & MEM_Str );'), (71474, 2, u'-  assert( pOp->p2==1        || pOp->p5==OE_Fail   || pOp->p5==OE_Rollback'), (71480, 2, u'-  assert( pOp->p4type==P4_VTAB );'), (71486, 2, u'-      assert( memIsValid(u.cr.pX) );'), (71497, 2, u'-      assert( u.cr.nArg>1 && u.cr.apArg[0] && (u.cr.apArg[0]->flags&MEM_Null) );'), (71595, 2, u'-  assert( pOp->opcode==OP_Noop || pOp->opcode==OP_Explain );'), (71625, 2, u'-    assert( pc>=-1 && pc<p->nOp );'), (71645, 2, u'-  assert( rc );'), (71685, 2, u'-  assert( p->zErrMsg==0 );'), (71696, 2, u'-  assert( db->u1.isInterrupted );'), (71764, 2, u'-  assert( v->aVar[0].flags&MEM_Int );'), (71800, 2, u'-  assert( rc!=SQLITE_OK || zErr==0 );'), (71801, 2, u'-  assert( rc!=SQLITE_ROW && rc!=SQLITE_DONE );'), (71956, 2, u'-    assert( pBlob->pStmt || db->mallocFailed );'), (72089, 2, u'-    assert( db == v->db );'), (72162, 2, u'-    assert( rc!=SQLITE_SCHEMA );'), (72166, 2, u'-  assert( rc==SQLITE_OK || p->pStmt==0 );'), (72358, 2, u'-  assert( p->aBuffer );'), (72374, 2, u'-    assert( nRead>0 );'), (72378, 2, u'-    assert( rc!=SQLITE_IOERR_SHORT_READ );'), (72421, 2, u'-      assert( aNext!=p->aAlloc );'), (72501, 2, u'-  assert( pSorter->iWriteOff>iStart );'), (72502, 2, u'-  assert( pIter->aAlloc==0 );'), (72503, 2, u'-  assert( pIter->aBuffer==0 );'), (72525, 2, u'-      assert( rc!=SQLITE_IOERR_SHORT_READ );'), (72577, 2, u'-    assert( r2->nField>0 );'), (72603, 2, u'-  assert( iOut<pSorter->nTree && iOut>0 );'), (72622, 2, u'-    assert( pCsr->pSorter->pUnpacked!=0 );  /* allocated in vdbeSorterMerge() */'), (72646, 2, u'-  assert( pCsr->pKeyInfo && pCsr->pBt==0 );'), (72654, 2, u'-  assert( pSorter->pUnpacked==(UnpackedRecord *)d );'), (72833, 2, u'-    assert( p->iBufEnd<p->nBuffer );'), (72895, 2, u'-    assert( pSorter->pRecord==0 );'), (72904, 2, u'-    assert( rc!=SQLITE_OK || pSorter->pTemp1 );'), (72905, 2, u'-    assert( pSorter->iWriteOff==0 );'), (72906, 2, u'-    assert( pSorter->nPMA==0 );'), (72941, 2, u'-  assert( pSorter );'), (72975, 2, u'-    assert( rc!=SQLITE_OK || (nExpect==pSorter->iWriteOff) );'), (72999, 2, u'-    assert( rc!=SQLITE_OK || pSorter->iReadOff<=pSorter->iWriteOff );'), (73025, 2, u'-  assert( pSorter );'), (73032, 2, u'-    assert( pSorter->aTree==0 );'), (73043, 2, u'-  assert( nIter>0 );'), (73074, 2, u'-      assert( rc!=SQLITE_OK || pSorter->aIter[ pSorter->aTree[1] ].pFile );'), (73081, 2, u'-        assert( iWrite2==0 );'), (73091, 2, u'-          assert( pIter->pFile );'), (73271, 2, u'-        assert(p->iSize<=p->nBuf);'), (73555, 2, u'-  assert( iOfst+iAmt<=p->endpoint.iOffset );'), (73600, 2, u'-  assert( iOfst==p->endpoint.iOffset );'), (73616, 2, u'-        assert( p->pFirst );'), (73619, 2, u'-        assert( !p->pFirst );'), (73640, 2, u'-  assert(size==0);'), (73713, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(p) );'), (73986, 2, u'-  assert( iCol>=0 && iCol<pEList->nExpr );'), (73988, 2, u'-  assert( pOrig!=0 );'), (73989, 2, u'-  assert( pOrig->flags & EP_Resolved );'), (74017, 2, u'-    assert( (pExpr->flags & (EP_Reduced|EP_TokenOnly))==0 );'), (74117, 2, u'-  assert( pNC );     /* the name context cannot be NULL. */'), (74118, 2, u'-  assert( zCol );    /* The Z in X.Y.Z cannot be NULL */'), (74119, 2, u'-  assert( !ExprHasAnyProperty(pExpr, EP_TokenOnly|EP_Reduced) );'), (74132, 2, u'-      assert( db->aDb[i].zName );'), (74151, 2, u'-        assert( pTab!=0 && pTab->zName!=0 );'), (74152, 2, u'-        assert( pTab->nCol>0 );'), (74172, 2, u'-          assert( zTabName!=0 );'), (74212, 2, u'-      assert( op==TK_DELETE || op==TK_UPDATE || op==TK_INSERT );'), (74287, 2, u'-          assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (74288, 2, u'-          assert( pExpr->x.pList==0 );'), (74289, 2, u'-          assert( pExpr->x.pSelect==0 );'), (74298, 2, u'-          assert( zTab==0 && zDb==0 );'), (74359, 2, u'-    assert( pMatch->iCursor==pExpr->iTable );'), (74372, 2, u'-    assert( pNC!=0 );'), (74379, 2, u'-      assert( pTopNC!=0 );'), (74429, 2, u'-  assert( pNC!=0 );'), (74431, 2, u'-  assert( pParse==pWalker->pParse );'), (74440, 2, u'-      assert( pSrcList->a[i].iCursor>=0 && pSrcList->a[i].iCursor<pParse->nTab);'), (74454, 2, u'-      assert( pSrcList && pSrcList->nSrc==1 );'), (74487, 2, u'-        assert( pRight->op==TK_DOT );'), (74511, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (74583, 2, u'-        assert( pNC->nRef>=nRef );'), (74665, 2, u'-  assert( sqlite3ExprIsInteger(pE, &i)==0 );'), (74757, 2, u'-    assert( pEList!=0 );'), (74773, 2, u'-            assert(pDup);'), (74789, 2, u'-          assert( pItem->pExpr->op==TK_COLLATE );'), (74790, 2, u'-          assert( pItem->pExpr->pLeft==pE );'), (74841, 2, u'-  assert( pEList!=0 );  /* sqlite3SelectNew() guarantees this */'), (74940, 2, u'-  assert( p!=0 );'), (74965, 2, u'-    assert( (p->selFlags & SF_Expanded)!=0 );'), (74966, 2, u'-    assert( (p->selFlags & SF_Resolved)==0 );'), (75001, 2, u'-        assert( pItem->isCorrelated==0 && nRef<=0 );'), (75015, 2, u'-    assert( pEList!=0 );'), (75026, 2, u'-    assert( (p->selFlags & SF_Aggregate)==0 );'), (75214, 2, u'-  assert( p!=0 );'), (75261, 2, u'-    assert( pExpr->flags&EP_xIsSelect );'), (75266, 2, u'-    assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (75277, 2, u'-    assert( pExpr->pTab && j<pExpr->pTab->nCol );'), (75304, 2, u'-  assert( zC!=0 );'), (75340, 2, u'-    assert( op!=TK_REGISTER || p->op2!=TK_COLLATE );'), (75397, 2, u'-    assert( aff1==0 || aff2==0 );'), (75408, 2, u'-  assert( pExpr->op==TK_EQ || pExpr->op==TK_IN || pExpr->op==TK_LT ||'), (75411, 2, u'-  assert( pExpr->pLeft );'), (75469, 2, u'-  assert( pLeft );'), (75638, 2, u'-      assert( iValue>=0 );'), (75652, 2, u'-        assert( pToken->z!=0 || pToken->n==0 );'), (75697, 2, u'-    assert( db->mallocFailed );'), (75790, 2, u'-  assert( pToken );'), (75797, 2, u'-  assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (75823, 2, u'-  assert( !ExprHasAnyProperty(pExpr, EP_IntValue|EP_Reduced|EP_TokenOnly) );'), (75825, 2, u'-  assert( z!=0 );'), (75826, 2, u'-  assert( z[0]!=0 );'), (75829, 2, u"-    assert( z[0]=='?' );"), (75892, 2, u'-  assert( !ExprHasProperty(p, EP_IntValue) || p->u.iValue>=0 );'), (75957, 2, u'-  assert( flags==EXPRDUP_REDUCE || flags==0 ); /* Only one flag value allowed */'), (75961, 2, u'-    assert( !ExprHasAnyProperty(p, EP_TokenOnly|EP_Reduced) );'), (75962, 2, u'-    assert( !ExprHasProperty(p, EP_FromJoin) );'), (75963, 2, u'-    assert( (p->flags2 & EP2_MallocedToken)==0 );'), (75964, 2, u'-    assert( (p->flags2 & EP2_Irreducible)==0 );'), (76026, 2, u'-    assert( pzBuffer==0 || isReduced );'), (76052, 2, u'-        assert( ExprHasProperty(p, EP_Reduced)==0 );'), (76248, 2, u'-  assert( p==0 );'), (76277, 2, u'-    assert( pList->nExpr>0 );'), (76284, 2, u'-  assert( pList->a!=0 );'), (76313, 2, u'-  assert( pList!=0 || pParse->db->mallocFailed!=0 );'), (76316, 2, u'-    assert( pList->nExpr>0 );'), (76318, 2, u'-    assert( pItem->zName==0 );'), (76338, 2, u'-  assert( pList!=0 || db->mallocFailed!=0 );'), (76341, 2, u'-    assert( pList->nExpr>0 );'), (76342, 2, u'-    assert( db->mallocFailed || pItem->pExpr==pSpan->pExpr );'), (76373, 2, u'-  assert( pList->a!=0 || pList->nExpr==0 );'), (76489, 2, u'-  assert( p->op!=TK_INTEGER || (p->flags & EP_IntValue)!=0'), (76592, 2, u'-      assert( p->iTable>=0 );  /* p cannot be part of a CHECK constraint */'), (76636, 2, u'-  assert( p->pGroupBy==0 );              /* Has no GROUP BY clause */'), (76638, 2, u'-  assert( p->pOffset==0 );               /* No LIMIT means no OFFSET */'), (76641, 2, u'-  assert( pSrc!=0 );'), (76646, 2, u'-  assert( pTab->pSelect==0 );            /* FROM clause is not a view */'), (76736, 2, u'-  assert( pX->op==TK_IN );'), (76750, 2, u'-    assert( p );                        /* Because of isCandidateForInOpt(p) */'), (76751, 2, u'-    assert( p->pEList!=0 );             /* Because of isCandidateForInOpt(p) */'), (76752, 2, u'-    assert( p->pEList->a[0].pExpr!=0 ); /* Because of isCandidateForInOpt(p) */'), (76753, 2, u'-    assert( p->pSrc!=0 );               /* Because of isCandidateForInOpt(p) */'), (76767, 2, u'-    assert(v);'), (76805, 2, u'-          assert( IN_INDEX_INDEX_DESC == IN_INDEX_INDEX_ASC+1 );'), (76957, 2, u'-        assert( !isRowid );'), (76960, 2, u'-        assert( (pExpr->iTable&0x0000FFFF)==pExpr->iTable );'), (77046, 2, u'-      assert( pExpr->op==TK_EXISTS || pExpr->op==TK_SELECT );'), (77048, 2, u'-      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (77116, 2, u'-  assert( v!=0 );       /* OOM detected prior to this routine */'), (77241, 2, u'-    assert( !sqlite3IsNaN(value) ); /* The new AtoF never returns NaN */'), (77260, 2, u'-    assert( i>=0 );'), (77267, 2, u'-    assert( z!=0 );'), (77307, 2, u'-  assert( iReg>0 );  /* Register numbers are always positive */'), (77308, 2, u'-  assert( iCol>=-1 && iCol<32768 );  /* Finite column numbers */'), (77323, 2, u'-    assert( p->iReg==0 || p->iTable!=iTab || p->iColumn!=iCol );'), (77395, 2, u'-  assert( N>0 );'), (77396, 2, u'-  assert( pParse->iCacheLevel>=N );'), (77471, 2, u'-  assert( v!=0 );'), (77511, 2, u'-  assert( iFrom>=iTo+nReg || iFrom+nReg<=iTo );'), (77560, 2, u'-  assert( target>0 && target<=pParse->nMem );'), (77562, 2, u'-    assert( pParse->db->mallocFailed );'), (77576, 2, u'-        assert( pCol->iMem>0 );'), (77589, 2, u'-        assert( pParse->ckBase>0 );'), (77604, 2, u'-      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77610, 2, u'-      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77623, 2, u'-      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77624, 2, u"-      assert( pExpr->u.zToken[0]=='x' || pExpr->u.zToken[0]=='X' );"), (77625, 2, u"-      assert( pExpr->u.zToken[1]=='\\'' );"), (77628, 2, u"-      assert( z[n]=='\\'' );"), (77635, 2, u'-      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77636, 2, u'-      assert( pExpr->u.zToken!=0 );'), (77637, 2, u'-      assert( pExpr->u.zToken[0]!=0 );'), (77640, 2, u"-        assert( pExpr->u.zToken[0]=='?'"), (77659, 2, u'-      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77662, 2, u'-      assert( to_op==OP_ToText    || aff!=SQLITE_AFF_TEXT    );'), (77663, 2, u'-      assert( to_op==OP_ToBlob    || aff!=SQLITE_AFF_NONE    );'), (77664, 2, u'-      assert( to_op==OP_ToNumeric || aff!=SQLITE_AFF_NUMERIC );'), (77665, 2, u'-      assert( to_op==OP_ToInt     || aff!=SQLITE_AFF_INTEGER );'), (77666, 2, u'-      assert( to_op==OP_ToReal    || aff!=SQLITE_AFF_REAL    );'), (77688, 2, u'-      assert( TK_LT==OP_Lt );'), (77689, 2, u'-      assert( TK_LE==OP_Le );'), (77690, 2, u'-      assert( TK_GT==OP_Gt );'), (77691, 2, u'-      assert( TK_GE==OP_Ge );'), (77692, 2, u'-      assert( TK_EQ==OP_Eq );'), (77693, 2, u'-      assert( TK_NE==OP_Ne );'), (77733, 2, u'-      assert( TK_AND==OP_And );'), (77734, 2, u'-      assert( TK_OR==OP_Or );'), (77735, 2, u'-      assert( TK_PLUS==OP_Add );'), (77736, 2, u'-      assert( TK_MINUS==OP_Subtract );'), (77737, 2, u'-      assert( TK_REM==OP_Remainder );'), (77738, 2, u'-      assert( TK_BITAND==OP_BitAnd );'), (77739, 2, u'-      assert( TK_BITOR==OP_BitOr );'), (77740, 2, u'-      assert( TK_SLASH==OP_Divide );'), (77741, 2, u'-      assert( TK_LSHIFT==OP_ShiftLeft );'), (77742, 2, u'-      assert( TK_RSHIFT==OP_ShiftRight );'), (77743, 2, u'-      assert( TK_CONCAT==OP_Concat );'), (77764, 2, u'-      assert( pLeft );'), (77769, 2, u'-        assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77784, 2, u'-      assert( TK_BITNOT==OP_BitNot );'), (77785, 2, u'-      assert( TK_NOT==OP_Not );'), (77797, 2, u'-      assert( TK_ISNULL==OP_IsNull );'), (77798, 2, u'-      assert( TK_NOTNULL==OP_NotNull );'), (77812, 2, u'-        assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77831, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (77840, 2, u'-      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77855, 2, u'-        assert( nFarg>=2 );'), (77879, 2, u'-          assert( nFarg==1 );'), (77880, 2, u'-          assert( pFarg->a[0].pExpr!=0 );'), (77883, 2, u'-            assert( SQLITE_FUNC_LENGTH==OPFLAG_LENGTHARG );'), (77884, 2, u'-            assert( SQLITE_FUNC_TYPEOF==OPFLAG_TYPEOFARG );'), (78027, 2, u'-      assert( pExpr->iTable==0 || pExpr->iTable==1 );'), (78028, 2, u'-      assert( pExpr->iColumn>=-1 && pExpr->iColumn<pTab->nCol );'), (78029, 2, u'-      assert( pTab->iPKey<0 || pExpr->iColumn!=pTab->iPKey );'), (78030, 2, u'-      assert( p1>=0 && p1<(pTab->nCol*2+2) );'), (78073, 2, u'-    default: assert( op==TK_CASE ); {'), (78086, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList );'), (78087, 2, u'-      assert((pExpr->x.pList->nExpr % 2) == 0);'), (78088, 2, u'-      assert(pExpr->x.pList->nExpr > 0);'), (78112, 2, u'-          assert( pTest!=0 );'), (78134, 2, u'-      assert( db->mallocFailed || pParse->nErr>0'), (78141, 2, u'-      assert( pExpr->affinity==OE_Rollback'), (78154, 2, u'-      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (78201, 2, u'-  assert( target>0 && target<=pParse->nMem );'), (78206, 2, u'-    assert( pParse->pVdbe || pParse->db->mallocFailed );'), (78230, 2, u'-  assert( target>0 );'), (78604, 2, u'-      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (78621, 2, u'-    assert( r2==r1 );'), (78671, 2, u'-  assert( pList!=0 );'), (78672, 2, u'-  assert( target>0 );'), (78673, 2, u'-  assert( pParse->pVdbe!=0 );  /* Never gets this far otherwise */'), (78711, 2, u'-  assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (78763, 2, u'-  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (78795, 2, u'-      assert( TK_LT==OP_Lt );'), (78796, 2, u'-      assert( TK_LE==OP_Le );'), (78797, 2, u'-      assert( TK_GT==OP_Gt );'), (78798, 2, u'-      assert( TK_GE==OP_Ge );'), (78799, 2, u'-      assert( TK_EQ==OP_Eq );'), (78800, 2, u'-      assert( TK_NE==OP_Ne );'), (78831, 2, u'-      assert( TK_ISNULL==OP_IsNull );'), (78832, 2, u'-      assert( TK_NOTNULL==OP_NotNull );'), (78883, 2, u'-  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (78909, 2, u'-  assert( pExpr->op!=TK_ISNULL || op==OP_NotNull );'), (78910, 2, u'-  assert( pExpr->op!=TK_NOTNULL || op==OP_IsNull );'), (78911, 2, u'-  assert( pExpr->op!=TK_NE || op==OP_Eq );'), (78912, 2, u'-  assert( pExpr->op!=TK_EQ || op==OP_Ne );'), (78913, 2, u'-  assert( pExpr->op!=TK_LT || op==OP_Ge );'), (78914, 2, u'-  assert( pExpr->op!=TK_LE || op==OP_Gt );'), (78915, 2, u'-  assert( pExpr->op!=TK_GT || op==OP_Le );'), (78916, 2, u'-  assert( pExpr->op!=TK_GE || op==OP_Lt );'), (79032, 2, u'-  assert( !ExprHasAnyProperty(pA, EP_TokenOnly|EP_Reduced) );'), (79033, 2, u'-  assert( !ExprHasAnyProperty(pB, EP_TokenOnly|EP_Reduced) );'), (79136, 2, u'-  assert( pExpr->op==TK_AGG_FUNCTION );'), (79202, 2, u'-          assert( !ExprHasAnyProperty(pExpr, EP_TokenOnly|EP_Reduced) );'), (79280, 2, u'-            assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (79284, 2, u'-            assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (79297, 2, u'-        assert( !ExprHasAnyProperty(pExpr, EP_TokenOnly|EP_Reduced) );'), (79330, 2, u'-  assert( pNC->pSrcList!=0 );'), (79390, 2, u'-    assert( !usedAsColumnCache(pParse, i, i+n-1) );'), (79492, 2, u'-      assert( len>0 );'), (79614, 2, u'-      assert( len>0 );'), (79757, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (79759, 2, u'-  assert( iDb>=0 );'), (79765, 2, u'-    assert( iTrigDb==iDb || iTrigDb==1 );'), (79829, 2, u'-  assert( pSrc->nSrc==1 );'), (79830, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (80052, 2, u'-  assert( pNew );'), (80054, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (80061, 2, u'-  assert( pTab );'), (80172, 2, u'-  assert( pParse->pNewTable==0 );'), (80173, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (80194, 2, u'-  assert( pTab->addColOffset>0 );'), (80209, 2, u'-  assert( pNew->nCol>0 );'), (80211, 2, u'-  assert( nAlloc>=pNew->nCol && nAlloc%8==0 && nAlloc-pNew->nCol<8 );'), (80403, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (80404, 2, u'-  assert( sqlite3VdbeDb(v)==db );'), (80569, 2, u'-    assert( p->nSample - iMin - 1 >= 0 );'), (80589, 2, u'-      assert( i<p->nSample );'), (80640, 2, u'-  assert( p!=0 );'), (80723, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (80725, 2, u'-  assert( iDb>=0 );'), (80726, 2, u'-  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (80756, 2, u'-    assert( iDb==sqlite3SchemaToIndex(db, pIdx->pSchema) );'), (80817, 2, u'-      assert( pIdx->azColl!=0 );'), (80818, 2, u'-      assert( pIdx->azColl[i]!=0 );'), (80972, 2, u'-  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (80989, 2, u'-  assert( pTab!=0 );'), (80990, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (81027, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (81032, 2, u'-  assert( pName2!=0 || pName1==0 );'), (81102, 2, u'-  assert( argc==3 );'), (81177, 2, u'-  assert( db->lookaside.bEnabled==0 );'), (81202, 2, u'-    assert( pIdx->nSample==0 );'), (81240, 2, u'-    assert( idx<pIdx->nSample );'), (81266, 2, u'-      default: assert( eType==SQLITE_TEXT || eType==SQLITE_BLOB ); {'), (81318, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (81319, 2, u'-  assert( db->aDb[iDb].pBt!=0 );'), (81322, 2, u'-  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (81474, 2, u'-    assert( z && zName );'), (81508, 2, u'-  assert( pVfs );'), (81582, 2, u'-    assert( iDb>=2 );'), (81720, 2, u'-  assert( v || db->mallocFailed );'), (81723, 2, u'-    assert( pFunc->nArg==-1 || (pFunc->nArg&0xff)==pFunc->nArg );'), (81803, 2, u'-  assert( db->nDb>iDb );'), (82085, 2, u'-  assert( pExpr->op==TK_COLUMN || pExpr->op==TK_TRIGGER );'), (82089, 2, u'-    assert( pTabList );'), (82101, 2, u'-    assert( iCol<pTab->nCol );'), (82104, 2, u'-    assert( pTab->iPKey<pTab->nCol );'), (82109, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (82162, 2, u'-  assert( pParse );'), (82250, 2, u'-  assert( iDb>=0 );'), (82284, 2, u'-  assert( pVdbe!=0 ); /* sqlite3GetVdbe cannot fail: VDBE already allocated */'), (82311, 2, u'-  assert( pParse->pToplevel==0 );'), (82321, 2, u'-  assert( !pParse->isMultiWrite'), (82322, 2, u'-       || sqlite3VdbeAssertMayAbort(v, pParse->mayAbort));'), (82341, 2, u'-          assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (82381, 2, u'-    assert( pParse->iCacheLevel==0 );  /* Disables and re-enables match */'), (82420, 2, u'-  assert( pParse->nested<10 );  /* Nesting should only be of limited depth */'), (82453, 2, u'-  assert( zName!=0 );'), (82456, 2, u'-  assert( zDatabase!=0 || sqlite3BtreeHoldsAllMutexes(db) );'), (82460, 2, u'-    assert( sqlite3SchemaMutexHeld(db, j, 0) );'), (82519, 2, u'-  assert( p->pSchema==0 || p->zDatabase==0 );'), (82546, 2, u'-  assert( zDb!=0 || sqlite3BtreeHoldsAllMutexes(db) );'), (82550, 2, u'-    assert( pSchema );'), (82552, 2, u'-    assert( sqlite3SchemaMutexHeld(db, j, 0) );'), (82581, 2, u'-  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (82640, 2, u'-  assert( iDb<db->nDb );'), (82644, 2, u'-  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (82645, 2, u'-  assert( pDb->pSchema!=0 );'), (82654, 2, u'-    assert( pDb->pSchema!=0 );'), (82693, 2, u'-  assert( pTable!=0 );'), (82725, 2, u'-  assert( !pTable || pTable->nRef>0 );'), (82740, 2, u'-    assert( pIndex->pSchema==pTable->pSchema );'), (82746, 2, u'-      assert( db==0 || sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) );'), (82747, 2, u'-      assert( pOld==pIndex || pOld==0 );'), (82770, 2, u'-  assert( nLookaside==0 || nLookaside==db->lookaside.nOut );'), (82781, 2, u'-  assert( db!=0 );'), (82782, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (82783, 2, u'-  assert( zTabName );'), (82784, 2, u'-  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (82906, 2, u'-    assert( db->init.iDb==0 || db->init.busy );'), (82997, 2, u'-  assert( (isTemp & 1)==isTemp );'), (83040, 2, u'-        assert( !db->init.busy );'), (83063, 2, u'-  assert( pParse->pNewTable==0 );'), (83072, 2, u'-    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (83302, 2, u'-  assert( pCol->zType==0 );'), (83400, 2, u'-    assert( autoInc==0 || autoInc==1 );'), (83467, 2, u'-      assert( pIdx->nColumn==1 );'), (83532, 2, u'-  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (83639, 2, u'-    assert( pCol->affinity-SQLITE_AFF_TEXT >= 0 );'), (83640, 2, u'-    assert( pCol->affinity-SQLITE_AFF_TEXT < ArraySize(azType) );'), (83649, 2, u'-    assert( pCol->affinity==SQLITE_AFF_NONE'), (83653, 2, u'-    assert( k<=n );'), (83695, 2, u'-  assert( !db->init.busy || !pSelect );'), (83786, 2, u'-      assert(pParse->nTab==1);'), (83796, 2, u'-        assert( p->aCol==0 );'), (83840, 2, u'-      assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (83861, 2, u'-    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (83865, 2, u'-      assert( p==pOld );  /* Malloc must have failed inside HashInsert() */'), (83876, 2, u'-      assert( !pSelect && pCons && pEnd );'), (83977, 2, u'-  assert( pTable );'), (84011, 2, u'-  assert( pTable->nCol>=0 );'), (84020, 2, u'-  assert( pTable->pSelect );'), (84039, 2, u'-      assert( pTable->aCol==0 );'), (84045, 2, u'-      assert( sqlite3SchemaMutexHeld(db, 0, pTable->pSchema) );'), (84066, 2, u'-  assert( sqlite3SchemaMutexHeld(db, idx, 0) );'), (84105, 2, u'-  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (84195, 2, u'-      assert( pIdx->pSchema==pTab->pSchema );'), (84204, 2, u'-      assert( iDb>=0 && iDb<pParse->db->nDb );'), (84246, 2, u'-  assert( v!=0 );'), (84261, 2, u'-    assert( pTrigger->pSchema==pTab->pSchema ||'), (84319, 2, u'-  assert( pParse->nErr==0 );'), (84320, 2, u'-  assert( pName->nSrc==1 );'), (84330, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (84441, 2, u'-  assert( pTo!=0 );'), (84512, 2, u'-  assert( sqlite3SchemaMutexHeld(db, 0, p->pSchema) );'), (84521, 2, u'-    assert( pNextTo->pPrevTo==0 );'), (84550, 2, u'-  assert( isDeferred==0 || isDeferred==1 ); /* EV: R-30323-21917 */'), (84687, 2, u'-  assert( pStart==0 || pEnd!=0 ); /* pEnd must be non-NULL if pStart is */'), (84688, 2, u'-  assert( pParse->nErr==0 );      /* Never called with prior errors */'), (84705, 2, u'-    assert( pName1 && pName2 );'), (84708, 2, u'-    assert( pName && pName->z );'), (84728, 2, u'-      assert(0);'), (84731, 2, u'-    assert( db->mallocFailed==0 || pTab==0 );'), (84733, 2, u'-    assert( db->aDb[iDb].pSchema==pTab->pSchema );'), (84735, 2, u'-    assert( pName==0 );'), (84736, 2, u'-    assert( pStart==0 );'), (84743, 2, u'-  assert( pTab!=0 );'), (84744, 2, u'-  assert( pParse->nErr==0 );'), (84779, 2, u'-    assert( pName->z!=0 );'), (84793, 2, u'-        assert( !db->init.busy );'), (84843, 2, u'-      assert( pExpr->op==TK_COLLATE );'), (84869, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pIndex->aiRowEst) );'), (84870, 2, u'-  assert( EIGHT_BYTE_ALIGNMENT(pIndex->azColl) );'), (84881, 2, u'-  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (84919, 2, u'-      assert( pListItem->pExpr->op==TK_COLLATE );'), (84922, 2, u'-      assert( nExtra>=nColl );'), (84965, 2, u'-      assert( pIdx->onError!=OE_None );'), (84966, 2, u'-      assert( pIdx->autoIndex );'), (84967, 2, u'-      assert( pIndex->onError!=OE_None );'), (85005, 2, u'-    assert( sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) );'), (85010, 2, u'-      assert( p==pIndex );  /* Malloc must have failed */'), (85053, 2, u'-      assert( pEnd!=0 );'), (85146, 2, u'-  assert( a!=0 );'), (85169, 2, u'-  assert( pParse->nErr==0 );   /* Never called with prior errors */'), (85173, 2, u'-  assert( pName->nSrc==1 );'), (85350, 2, u'-  assert( iStart>=0 );'), (85351, 2, u'-  assert( nExtra>=1 );'), (85352, 2, u'-  assert( pSrc!=0 );'), (85353, 2, u'-  assert( iStart<=pSrc->nSrc );'), (85363, 2, u'-      assert( db->mallocFailed );'), (85430, 2, u'-  assert( pDatabase==0 || pTable!=0 );  /* Cannot have C without B */'), (85461, 2, u'-  assert(pList || pParse->db->mallocFailed );'), (85532, 2, u'-  assert( pAlias!=0 );'), (85542, 2, u'-  assert( p==0 );'), (85554, 2, u'-  assert( pIndexedBy!=0 );'), (85557, 2, u'-    assert( pItem->notIndexed==0 && pItem->zIndex==0 );'), (85586, 2, u'-    assert( p->a || p->nSrc==0 );'), (85602, 2, u'-  assert( pParse!=0 );'), (85604, 2, u'-  assert( db!=0 );'), (85626, 2, u'-  assert( pParse!=0 );'), (85627, 2, u'-  assert( pParse->db!=0 );'), (85643, 2, u'-  assert( pParse!=0 );'), (85644, 2, u'-  assert( pParse->db!=0 );'), (85664, 2, u'-    assert( !SAVEPOINT_BEGIN && SAVEPOINT_RELEASE==1 && SAVEPOINT_ROLLBACK==2 );'), (85698, 2, u'-    assert( db->aDb[1].pSchema );'), (85750, 2, u'-    assert( iDb<db->nDb );'), (85751, 2, u'-    assert( db->aDb[iDb].pBt!=0 || iDb==1 );'), (85752, 2, u'-    assert( iDb<SQLITE_MAX_ATTACHED+2 );'), (85753, 2, u'-    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (85846, 2, u'-  assert( (errCode&0xff)==SQLITE_CONSTRAINT );'), (85860, 2, u'-  assert( zColl!=0 );'), (85863, 2, u'-    assert( z!=0 );'), (85903, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(db) );  /* Needed for schema access */'), (85905, 2, u'-    assert( pDb!=0 );'), (85949, 2, u'-    assert( pName1->z );'), (86002, 2, u'-    assert( &pKey->aSortOrder[nCol]==&(((u8 *)pKey)[nBytes]) );'), (86005, 2, u'-      assert( zColl );'), (86043, 2, u'-  assert( !db->xCollNeeded || !db->xCollNeeded16 );'), (86124, 2, u'-  assert( !p || p->xCmp );'), (86150, 2, u'-    assert( p==pColl );'), (86197, 2, u'-      assert( pDel==0 || pDel==pColl );'), (86235, 2, u'-  assert( SQLITE_UTF8==1 && SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (86236, 2, u'-  assert( enc>=SQLITE_UTF8 && enc<=SQLITE_UTF16BE );'), (86333, 2, u'-    assert( pOther!=pDef && pOther->pNext!=pDef );'), (86377, 2, u'-  assert( nArg>=(-2) );'), (86378, 2, u'-  assert( nArg>=(-1) || createFlag==0 );'), (86379, 2, u'-  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (86533, 2, u'-  assert( pItem && pSrc->nSrc==1 );'), (86604, 2, u'-    assert( pFrom->nSrc==1 );'), (86607, 2, u'-    assert( pFrom->a[0].pOn==0 );'), (86608, 2, u'-    assert( pFrom->a[0].pUsing==0 );'), (86657, 2, u'-    assert( pOffset == 0 );'), (86750, 2, u'-  assert( pTabList->nSrc==1 );'), (86785, 2, u'-  assert( iDb<db->nDb );'), (86788, 2, u'-  assert( rcauth==SQLITE_OK || rcauth==SQLITE_DENY || rcauth==SQLITE_IGNORE );'), (86792, 2, u'-  assert(!isView || pTrigger);'), (86796, 2, u'-  assert( pTabList->nSrc==1 );'), (86851, 2, u'-    assert( !isView );'), (86855, 2, u'-      assert( pIdx->pSchema==pTab->pSchema );'), (86992, 2, u'-  assert( v );'), (87204, 2, u'-  assert( argc>1 );'), (87207, 2, u'-  assert( pColl );'), (87208, 2, u'-  assert( mask==-1 || mask==0 );'), (87252, 2, u'-  assert( argc==1 );'), (87286, 2, u'-  assert( argc==1 );'), (87397, 2, u'-  assert( argc==3 || argc==2 );'), (87409, 2, u'-    assert( len==sqlite3_value_bytes(argv[0]) );'), (87448, 2, u'-  assert( p1>=0 && p2>=0 );'), (87475, 2, u'-  assert( argc==1 || argc==2 );'), (87515, 2, u'-  assert( nByte>0 );'), (87541, 2, u'-  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (87560, 2, u'-  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (87618, 2, u'-  assert( argc==1 );'), (87771, 2, u'-        assert( esc==0 );         /* This is GLOB, not LIKE */'), (87772, 2, u"-        assert( matchSet<0x80 );  /* '[' is a single-byte character */"), (87801, 2, u'-      assert( esc==0 );    /* This only occurs for GLOB, not LIKE */'), (87900, 2, u'-  assert( zB==sqlite3_value_text(argv[0]) );  /* Encoding did not change */'), (88000, 2, u'-  assert( argc==1 );'), (88024, 2, u'-  assert( argc==1 );'), (88053, 2, u'-  assert( argc==1 );'), (88076, 2, u'-      assert( zBlob==sqlite3_value_blob(argv[0]) ); /* No encoding change */'), (88117, 2, u'-      assert( sqlite3_value_type(argv[0])==SQLITE_NULL );'), (88192, 2, u'-  assert( argc==1 );'), (88196, 2, u'-  assert( pBlob==sqlite3_value_blob(argv[0]) );  /* No encoding change */'), (88219, 2, u'-  assert( argc==1 );'), (88253, 2, u'-  assert( argc==3 );'), (88258, 2, u'-  assert( zStr==sqlite3_value_text(argv[0]) );  /* No encoding change */'), (88261, 2, u'-    assert( sqlite3_value_type(argv[1])==SQLITE_NULL'), (88266, 2, u'-    assert( sqlite3_value_type(argv[1])!=SQLITE_NULL );'), (88271, 2, u'-  assert( zPattern==sqlite3_value_text(argv[1]) );  /* No encoding change */'), (88275, 2, u'-  assert( zRep==sqlite3_value_text(argv[2]) );'), (88277, 2, u'-  assert( nOut<SQLITE_MAX_LENGTH );'), (88309, 2, u'-  assert( j+nStr-i+1==nOut );'), (88312, 2, u'-  assert( j<=nOut );'), (88341, 2, u'-  assert( zIn==sqlite3_value_text(argv[0]) );'), (88431, 2, u'-  assert( argc==1 );'), (88511, 2, u'-  assert( argc==1 );'), (88580, 2, u'-  assert( argc==1 || p==0 || p->n>0x7fffffff'), (88653, 2, u'-  assert( argc==1 || argc==2 );'), (88699, 2, u'-  assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (88753, 2, u'-  assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (88766, 2, u'-  assert( (char*)&likeInfoAlt == (char*)&likeInfoAlt.matchAll );'), (88767, 2, u'-  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );'), (88768, 2, u'-  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );'), (89072, 2, u'-  assert( ppIdx && *ppIdx==0 );'), (89073, 2, u'-  assert( !paiCol || *paiCol==0 );'), (89074, 2, u'-  assert( pParse );'), (89097, 2, u'-    assert( nCol>1 );'), (89281, 2, u'-          assert( aiCol[i]!=pTab->iPKey );'), (89306, 2, u'-    assert( nIncr==1 );'), (89367, 2, u'-  assert( !pIdx || pIdx->pTable==pTab );'), (89409, 2, u'-    assert( iCol>=0 );'), (89523, 2, u'-    assert( v );                  /* VDBE has already been allocated */'), (89591, 2, u'-  assert( (regOld==0)!=(regNew==0) );'), (89620, 2, u'-      assert( isIgnoreErrors==0 || (regOld!=0 && regNew==0) );'), (89640, 2, u'-    assert( pFKey->nCol==1 || (aiFree && pIdx) );'), (89693, 2, u'-      assert( regOld==0 && regNew!=0 );'), (89703, 2, u'-    assert( aiCol || pFKey->nCol==1 );'), (89881, 2, u'-    assert( aiCol || pFKey->nCol==1 );'), (89892, 2, u'-      assert( iFromCol>=0 );'), (90011, 2, u'-    assert( pStep!=0 );'), (90071, 2, u'-  assert( db==0 || sqlite3SchemaMutexHeld(db, 0, pTab->pSchema) );'), (90091, 2, u'-    assert( pFKey->isDeferred==0 || pFKey->isDeferred==1 );'), (90133, 2, u'-  assert( !IsVirtual(pTab) );'), (90135, 2, u'-  assert( opcode==OP_OpenWrite || opcode==OP_OpenRead );'), (90251, 2, u'-    assert( pOp!=0 );'), (90266, 2, u'-      assert( pOp->p4.pVtab!=0 );'), (90267, 2, u'-      assert( pOp->p4type==P4_VTAB );'), (90338, 2, u'-  assert( pParse->pTriggerTab==0 );'), (90339, 2, u'-  assert( pParse==sqlite3ParseToplevel(pParse) );'), (90341, 2, u'-  assert( v );   /* We failed long ago if this is not so */'), (90345, 2, u'-    assert( sqlite3SchemaMutexHeld(db, 0, pDb->pSchema) );'), (90389, 2, u'-  assert( v );'), (90397, 2, u'-    assert( sqlite3SchemaMutexHeld(db, 0, pDb->pSchema) );'), (90506, 2, u'-  assert( pParse->nErr==0 || rc );'), (90684, 2, u'-  assert( pTabList->nSrc==1 );'), (90692, 2, u'-  assert( iDb<db->nDb );'), (90714, 2, u'-  assert( (pTrigger && tmask) || (pTrigger==0 && tmask==0) );'), (90750, 2, u'-    assert( !pTrigger );'), (90751, 2, u'-    assert( pList==0 );'), (90774, 2, u'-    assert( pSelect->pEList );'), (90776, 2, u'-    assert( dest.nSdst==nColumn );'), (90830, 2, u'-    assert( useTempTable==0 );'), (90983, 2, u'-        assert( pSelect==0 );  /* Otherwise useTempTable is true */'), (90995, 2, u'-    assert( !IsVirtual(pTab) );'), (91012, 2, u'-        assert( pSelect==0 ); /* Otherwise useTempTable is true */'), (91100, 2, u'-          assert( IsVirtual(pTab) );'), (91323, 2, u'-  assert( v!=0 );'), (91324, 2, u'-  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (91344, 2, u'-    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (91364, 2, u'-        assert( onError==OE_Replace );'), (91469, 2, u'-        assert( seenReplace==0 );'), (91530, 2, u'-    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (91559, 2, u'-        assert( seenReplace==0 );'), (91565, 2, u'-        assert( onError==OE_Replace );'), (91614, 2, u'-  assert( v!=0 );'), (91615, 2, u'-  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (91669, 2, u'-  assert( v!=0 );'), (91673, 2, u'-    assert( pIdx->pSchema==pTab->pSchema );'), (91723, 2, u'-  assert( pDest && pSrc );'), (91724, 2, u'-  assert( pDest->pTable!=pSrc->pTable );'), (91810, 2, u'-  assert(pSelect->pSrc);   /* allocated even if there is no FROM clause */'), (91831, 2, u'-  assert( pSelect->pOffset==0 );  /* Must be so if pLimit==0 */'), (91839, 2, u'-  assert( pEList!=0 );'), (91843, 2, u'-  assert( pEList->a[0].pExpr );'), (91970, 2, u'-    assert( (pDest->tabFlags & TF_Autoincrement)==0 );'), (91981, 2, u'-    assert( pSrcIdx );'), (92068, 2, u'-    assert( rc==SQLITE_OK || pStmt==0 );'), (92098, 2, u'-            assert( azCols[i]!=0 );'), (92152, 2, u'-  assert( (rc&db->errMask)==rc );'), (93211, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (93310, 2, u'-    assert( (rc&0xff)==rc );'), (93590, 2, u'-      assert( v!=0 );  /* Already allocated by sqlite3Pragma() */'), (93635, 2, u'-                      assert( action==OE_None ); break;'), (93654, 2, u'-  assert( PAGER_JOURNALMODE_DELETE==0 );'), (93655, 2, u'-  assert( PAGER_JOURNALMODE_PERSIST==1 );'), (93656, 2, u'-  assert( PAGER_JOURNALMODE_OFF==2 );'), (93657, 2, u'-  assert( PAGER_JOURNALMODE_TRUNCATE==3 );'), (93658, 2, u'-  assert( PAGER_JOURNALMODE_MEMORY==4 );'), (93659, 2, u'-  assert( PAGER_JOURNALMODE_WAL==5 );'), (93660, 2, u'-  assert( eMode>=0 && eMode<=ArraySize(azModeName) );'), (93724, 2, u'-  assert( pId2 );'), (93804, 2, u'-      assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (93823, 2, u'-    assert( pBt!=0 );'), (93849, 2, u'-    assert( pBt!=0 );'), (93924, 2, u'-        assert(pDb==&db->aDb[0]);'), (93935, 2, u'-    assert(eMode==PAGER_LOCKINGMODE_NORMAL||eMode==PAGER_LOCKINGMODE_EXCLUSIVE);'), (94024, 2, u'-    assert( pBt!=0 );'), (94038, 2, u'-      assert( eAuto>=0 && eAuto<=2 );'), (94113, 2, u'-    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (94139, 2, u'-    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (94428, 2, u'-        assert( pTab->nCol>cnum );'), (94473, 2, u'-      assert( db->aDb[i].zName!=0 );'), (94614, 2, u'-        assert( pParent!=0 );'), (94618, 2, u'-        assert( x==0 );'), (94622, 2, u'-          assert( iKey>=0 && iKey<pTab->nCol );'), (94718, 2, u'-    assert( iDb>=0 );'), (94719, 2, u'-    assert( iDb==0 || pId2->z );'), (94757, 2, u'-      assert( sqlite3SchemaMutexHeld(db, i, 0) );'), (94908, 2, u'-      assert( encnames[SQLITE_UTF8].enc==SQLITE_UTF8 );'), (94909, 2, u'-      assert( encnames[SQLITE_UTF16LE].enc==SQLITE_UTF16LE );'), (94910, 2, u'-      assert( encnames[SQLITE_UTF16BE].enc==SQLITE_UTF16BE );'), (95259, 2, u'-  assert( argc==3 );'), (95261, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (95268, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (95282, 2, u'-    assert( db->init.busy );'), (95288, 2, u'-    assert( (rc&0xFF)==(rcp&0xFF) );'), (95292, 2, u'-        assert( iDb==1 );'), (95377, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (95378, 2, u'-  assert( db->aDb[iDb].pSchema );'), (95379, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (95380, 2, u'-  assert( iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (95525, 2, u'-  assert( db->init.busy );'), (95598, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (95638, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (95661, 2, u'-  assert( pParse->checkSchema );'), (95662, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (95684, 2, u'-    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (95717, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (95724, 2, u'-    assert( i>=0 && i<db->nDb );'), (95753, 2, u'-  assert( ppStmt && *ppStmt==0 );'), (95754, 2, u'-  assert( !db->mallocFailed );'), (95755, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (95783, 2, u'-      assert( sqlite3BtreeHoldsMutex(pBt) );'), (95819, 2, u'-  assert( 1==(int)pParse->nQueryLoop );'), (95865, 2, u'-    assert(!(*ppStmt));'), (95888, 2, u'-  assert( (rc&db->errMask)==rc );'), (95901, 2, u'-  assert( ppStmt!=0 );'), (95915, 2, u'-  assert( rc==SQLITE_OK || *ppStmt==0 );'), (95933, 2, u'-  assert( sqlite3_mutex_held(sqlite3VdbeDb(p)->mutex) );'), (95935, 2, u'-  assert( zSql!=0 );  /* Reprepare only called for prepare_v2() statements */'), (95937, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (95943, 2, u'-    assert( pNew==0 );'), (95946, 2, u'-    assert( pNew!=0 );'), (95973, 2, u'-  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (95985, 2, u'-  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (96010, 2, u'-  assert( ppStmt );'), (96053, 2, u'-  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (96065, 2, u'-  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (96137, 2, u'-  assert( db->mallocFailed || !pOffset || pLimit ); /* OFFSET implies LIMIT */'), (96139, 2, u'-    assert( db->mallocFailed );'), (96157, 2, u'-  assert( pOffset==0 || pLimit!=0 );'), (96166, 2, u'-    assert( pNew->pSrc!=0 || pParse->nErr>0 );'), (96168, 2, u'-  assert( pNew!=&standin );'), (96242, 2, u'-    assert( pB!=0 );'), (96287, 2, u'-  assert( (piTab==0)==(piCol==0) );  /* Both or neither are NULL */'), (96327, 2, u'-  assert( iLeft<iRight );'), (96328, 2, u'-  assert( pSrc->nSrc>iRight );'), (96329, 2, u'-  assert( pSrc->a[iLeft].pTab );'), (96330, 2, u'-  assert( pSrc->a[iRight].pTab );'), (96338, 2, u'-    assert( !ExprHasAnyProperty(pEq, EP_TokenOnly|EP_Reduced) );'), (96374, 2, u'-    assert( !ExprHasAnyProperty(p, EP_TokenOnly|EP_Reduced) );'), (96641, 2, u'-  assert( v );'), (96643, 2, u'-  assert( pEList!=0 );'), (96661, 2, u'-    assert( pDest->nSdst==nResultCol );'), (96682, 2, u'-    assert( pEList!=0 );'), (96683, 2, u'-    assert( pEList->nExpr==nColumn );'), (96717, 2, u'-        assert( sqlite3VdbeCurrentAddr(v)==iJump );'), (96728, 2, u'-        assert( pDistinct->eTnctType==WHERE_DISTINCT_UNORDERED );'), (96789, 2, u'-      assert( nColumn==1 );'), (96821, 2, u'-      assert( nColumn==1 );'), (96861, 2, u'-      assert( eDest==SRT_Discard );'), (96990, 2, u'-  assert( op==TK_UNION || op==TK_EXCEPT || op==TK_INTERSECT || op==TK_ALL );'), (97066, 2, u'-      assert( nColumn==1 );'), (97074, 2, u'-      assert( nColumn==1 );'), (97082, 2, u'-      assert( eDest==SRT_Output || eDest==SRT_Coroutine );'), (97086, 2, u'-        assert( regRow!=pDest->iSdst+i );'), (97194, 2, u'-      assert( pTab && pExpr->pTab==pTab );'), (97214, 2, u'-        assert( !pS );'), (97216, 2, u'-        assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (97241, 2, u'-      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (97252, 2, u'-    assert( pzOriginTab && pzOriginCol );'), (97340, 2, u'-      assert( j<pTabList->nSrc );'), (97343, 2, u'-      assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (97418, 2, u'-        assert( pColExpr!=0 );'), (97428, 2, u'-        assert( !ExprHasProperty(pColExpr, EP_IntValue) );'), (97497, 2, u'-  assert( pSelect!=0 );'), (97498, 2, u'-  assert( (pSelect->selFlags & SF_Resolved)!=0 );'), (97499, 2, u'-  assert( nCol==pSelect->pEList->nExpr || db->mallocFailed );'), (97538, 2, u'-  assert( db->lookaside.bEnabled==0 );'), (97602, 2, u'-  assert( p->pOffset==0 || p->pLimit!=0 );'), (97655, 2, u'-  assert( iCol>=0 );'), (97722, 2, u'-  assert( p && p->pPrior );  /* Calling function guarantees this much */'), (97725, 2, u'-  assert( pPrior->pRightmost!=pPrior );'), (97726, 2, u'-  assert( pPrior->pRightmost==p->pRightmost );'), (97742, 2, u'-  assert( v!=0 );  /* The VDBE already created by calling function */'), (97747, 2, u'-    assert( p->pEList );'), (97756, 2, u'-  assert( p->pEList && pPrior->pEList );'), (97780, 2, u'-      assert( !pPrior->pLimit );'), (97834, 2, u'-        assert( p->pLimit==0 );      /* Not allowed on leftward elements */'), (97835, 2, u'-        assert( p->pOffset==0 );     /* Not allowed on leftward elements */'), (97842, 2, u'-        assert( p->pOrderBy==0 );'), (97844, 2, u'-        assert( p->addrOpenEphm[0] == -1 );'), (97847, 2, u'-        assert( p->pEList );'), (97852, 2, u'-      assert( !pPrior->pOrderBy );'), (97865, 2, u'-        assert( p->op==TK_UNION );'), (97893, 2, u'-      assert( unionTab==dest.iSDParm || dest.eDest!=priorOp );'), (97896, 2, u'-        assert( p->pEList );'), (97916, 2, u'-    default: assert( p->op==TK_INTERSECT ); {'), (97930, 2, u'-      assert( p->pOrderBy==0 );'), (97933, 2, u'-      assert( p->addrOpenEphm[0] == -1 );'), (97936, 2, u'-      assert( p->pEList );'), (97950, 2, u'-      assert( p->addrOpenEphm[1] == -1 );'), (97971, 2, u'-      assert( p->pEList );'), (98014, 2, u'-    assert( p->pRightmost==p );'), (98040, 2, u'-          assert( pLoop->addrOpenEphm[1]<0 );'), (98140, 2, u'-      assert( pIn->nSdst==1 );'), (98166, 2, u'-      assert( pIn->nSdst==1 );'), (98195, 2, u'-      assert( pDest->eDest==SRT_Output );'), (98347, 2, u'-  assert( p->pOrderBy!=0 );'), (98348, 2, u'-  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */'), (98351, 2, u'-  assert( v!=0 );       /* Already thrown the error if VDBE alloc failed */'), (98360, 2, u'-  assert( pPrior->pOrderBy==0 );'), (98362, 2, u'-  assert( pOrderBy );'), (98373, 2, u'-        assert( pItem->iOrderByCol>0 );'), (98398, 2, u'-      assert( pItem->iOrderByCol>0  && pItem->iOrderByCol<=p->pEList->nExpr );'), (98439, 2, u'-    assert( nOrderBy>=nExpr || db->mallocFailed );'), (98679, 2, u'-      assert( pEList!=0 && pExpr->iColumn<pEList->nExpr );'), (98680, 2, u'-      assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (98725, 2, u'-  assert( pSrc );  /* Even for (SELECT 1) we have: pSrc!=0 but pSrc->nSrc==0 */'), (98878, 2, u'-  assert( p!=0 );'), (98879, 2, u'-  assert( p->pPrior==0 );  /* Unable to flatten compound queries */'), (98882, 2, u'-  assert( pSrc && iFrom>=0 && iFrom<pSrc->nSrc );'), (98886, 2, u'-  assert( pSub!=0 );'), (98890, 2, u'-  assert( pSubSrc );'), (98969, 2, u'-      assert( pSub->pSrc!=0 );'), (99114, 2, u'-      assert( pParent==p );  /* First time through the loop */'), (99117, 2, u'-      assert( pParent!=p );  /* 2nd and subsequent times through the loop */'), (99120, 2, u'-        assert( db->mallocFailed );'), (99183, 2, u'-      assert( pParent->pOrderBy==0 );'), (99195, 2, u'-      assert( pParent->pHaving==0 );'), (99201, 2, u'-      assert( pParent->pGroupBy==0 );'), (99257, 2, u'-    assert( pExpr->op==TK_AGG_FUNCTION );'), (99270, 2, u'-  assert( *ppMinMax==0 || (*ppMinMax)->nExpr==1 );'), (99289, 2, u'-  assert( !p->pGroupBy );'), (99298, 2, u'-  assert( pTab && !pTab->pSelect && pExpr );'), (99456, 2, u'-      assert( i==0 );'), (99463, 2, u'-      assert( pSel!=0 );'), (99464, 2, u'-      assert( pFrom->pTab==0 );'), (99478, 2, u'-      assert( pFrom->pTab==0 );'), (99492, 2, u'-        assert( pFrom->pSelect==0 );'), (99524, 2, u'-    assert( pE->op!=TK_DOT || pE->pRight!=0 );'), (99525, 2, u'-    assert( pE->op!=TK_DOT || (pE->pLeft!=0 && pE->pLeft->op==TK_ID) );'), (99543, 2, u'-    assert( (p->selFlags & SF_NestedFrom)==0'), (99550, 2, u'-      assert( pE->op!=TK_DOT || pRight!=0 );'), (99568, 2, u'-          assert( pE->pLeft!=0 );'), (99569, 2, u'-          assert( !ExprHasProperty(pE->pLeft, EP_IntValue) );'), (99596, 2, u'-            assert( zName );'), (99608, 2, u'-              assert(IsVirtual(pTab));'), (99743, 2, u'-  assert( p->selFlags & SF_Resolved );'), (99753, 2, u'-        assert( pSel );'), (99835, 2, u'-      assert( !ExprHasProperty(pE, EP_xIsSelect) );'), (99859, 2, u'-    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (99884, 2, u'-    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (99895, 2, u'-      assert( nArg==1 );'), (99902, 2, u'-      assert( pList!=0 );  /* pList!=0 if pF->pFunc has NEEDCOLL */'), (100063, 2, u'-    assert(pDest->eDest==SRT_Exists || pDest->eDest==SRT_Union ||'), (100079, 2, u'-  assert( pEList!=0 );'), (100183, 2, u'-      assert( pItem->addrFillSub==0 );'), (100282, 2, u'-    assert( sDistinct.isTnct );'), (100415, 2, u'-      assert( !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) );'), (100726, 2, u'-        assert( p->pGroupBy==0 );'), (100727, 2, u'-        assert( flag==0 );'), (100731, 2, u'-        assert( flag==0 || (pMinMax!=0 && pMinMax->nExpr==1) );'), (100753, 2, u'-        assert( pMinMax==0 || pMinMax->nExpr==1 );'), (101056, 2, u'-  assert( sizeof(res.azResult[0])>= sizeof(res.nData) );'), (101100, 2, u'-    assert( azResult!=0 );'), (101166, 2, u'-    assert( sqlite3SchemaMutexHeld(pParse->db, 0, pTmpSchema) );'), (101210, 2, u'-  assert( pName1!=0 );   /* pName1->z might be NULL, but not pName1 itself */'), (101211, 2, u'-  assert( pName2!=0 );'), (101212, 2, u'-  assert( op==TK_INSERT || op==TK_UPDATE || op==TK_DELETE );'), (101213, 2, u'-  assert( op>0 && op<0xff );'), (101259, 2, u'-  assert( pTableName->nSrc==1 );'), (101291, 2, u'-  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (101297, 2, u'-      assert( !db->init.busy );'), (101361, 2, u'-  assert( pParse->pNewTrigger==0 );'), (101372, 2, u'-    assert( pParse->pNewTrigger==pTrigger );'), (101433, 2, u'-    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (101441, 2, u'-      assert( pTab!=0 );'), (101449, 2, u'-  assert( !pParse->pNewTrigger );'), (101513, 2, u'-  assert(pEList == 0 || pSelect == 0);'), (101514, 2, u'-  assert(pEList != 0 || pSelect != 0 || db->mallocFailed);'), (101611, 2, u'-  assert( pName->nSrc==1 );'), (101615, 2, u'-  assert( zDb!=0 || sqlite3BtreeHoldsAllMutexes(db) );'), (101619, 2, u'-    assert( sqlite3SchemaMutexHeld(db, j, 0) );'), (101658, 2, u'-  assert( iDb>=0 && iDb<db->nDb );'), (101660, 2, u'-  assert( pTable );'), (101661, 2, u'-  assert( pTable->pSchema==pTrigger->pSchema || iDb==1 );'), (101677, 2, u'-  assert( pTable!=0 );'), (101713, 2, u'-  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (101766, 2, u'-  assert( pList==0 || IsVirtual(pTab)==0 );'), (101797, 2, u'-    assert( pSrc->nSrc>0 );'), (101798, 2, u'-    assert( pSrc->a!=0 );'), (101802, 2, u'-      assert( iDb<pParse->db->nDb );'), (101822, 2, u'-  assert( pParse->pTriggerTab && pParse->pToplevel );'), (101823, 2, u'-  assert( pStepList );'), (101824, 2, u'-  assert( v!=0 );'), (101847, 2, u'-    assert( pParse->cookieGoto==0 || pParse->cookieGoto==-1 );'), (101877, 2, u'-      default: assert( pStep->op==TK_SELECT ); {'), (101918, 2, u'-  assert( pFrom->zErrMsg==0 || pFrom->nErr );'), (101919, 2, u'-  assert( pTo->zErrMsg==0 || pTo->nErr );'), (101948, 2, u'-  assert( pTrigger->zName==0 || pTab==tableOfTrigger(pTrigger) );'), (101949, 2, u'-  assert( pTop->pVdbe );'), (102032, 2, u'-  assert( !pSubParse->pAinc       && !pSubParse->pZombieTab );'), (102033, 2, u'-  assert( !pSubParse->pTriggerPrg && !pSubParse->nMaxArg );'), (102054, 2, u'-  assert( pTrigger->zName==0 || pTab==tableOfTrigger(pTrigger) );'), (102090, 2, u'-  assert( pPrg || pParse->nErr || pParse->db->mallocFailed );'), (102164, 2, u'-  assert( op==TK_UPDATE || op==TK_INSERT || op==TK_DELETE );'), (102165, 2, u'-  assert( tr_tm==TRIGGER_BEFORE || tr_tm==TRIGGER_AFTER );'), (102166, 2, u'-  assert( (op==TK_UPDATE)==(pChanges!=0) );'), (102173, 2, u'-    assert( p->pSchema!=0 );'), (102174, 2, u'-    assert( p->pTabSchema!=0 );'), (102175, 2, u'-    assert( p->pSchema==p->pTabSchema'), (102226, 2, u'-  assert( isNew==1 || isNew==0 );'), (102306, 2, u'-  assert( pTab!=0 );'), (102312, 2, u'-    assert( i<pTab->nCol );'), (102382, 2, u'-  assert( pTabList->nSrc==1 );'), (102396, 2, u'-  assert( pTrigger || tmask==0 );'), (102605, 2, u'-      assert( aRegIdx );'), (102610, 2, u'-        assert( pParse->nTab>iCur+i+1 );'), (102633, 2, u'-  assert( chngRowid || pTrigger || hasFK || regOldRowid==regNewRowid );'), (102780, 2, u'-    assert( aRegIdx );'), (102875, 2, u'-  assert( pTab->iPKey<0 );'), (102889, 2, u'-  assert( v );'), (102968, 2, u'-  assert( rc!=SQLITE_ROW || (db->flags&SQLITE_CountRows) );'), (103076, 2, u'-    assert( strcmp(pDb->zName,"vacuum_db")==0 );'), (103215, 2, u'-    assert( 1==sqlite3BtreeIsInTrans(pTemp) );'), (103216, 2, u'-    assert( 1==sqlite3BtreeIsInTrans(pMain) );'), (103236, 2, u'-  assert( rc==SQLITE_OK );'), (103331, 2, u'-      assert( pDel==0 || pDel==pMod );'), (103391, 2, u'-  assert( IsVirtual(pTab) );'), (103403, 2, u'-  assert( db );'), (103404, 2, u'-  assert( pVTab->nRef>0 );'), (103405, 2, u'-  assert( db->magic==SQLITE_MAGIC_OPEN || db->magic==SQLITE_MAGIC_ZOMBIE );'), (103435, 2, u'-  assert( db==0 || sqlite3SchemaMutexHeld(db, 0, p->pSchema) );'), (103440, 2, u'-    assert( db2 );'), (103452, 2, u'-  assert( !db || pRet );'), (103467, 2, u'-  assert( IsVirtual(p) );'), (103468, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (103469, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (103506, 2, u'-  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (103507, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (103589, 2, u'-  assert( 0==pTable->pIndex );'), (103593, 2, u'-  assert( iDb>=0 );'), (103700, 2, u'-    assert( sqlite3SchemaMutexHeld(db, 0, pSchema) );'), (103704, 2, u'-      assert( pTab==pOld );  /* Malloc must have failed inside HashInsert() */'), (103731, 2, u'-    assert(pArg->z < p->z);'), (103773, 2, u'-  assert( &db->pVtabCtx );'), (103774, 2, u'-  assert( xConstruct );'), (103834, 2, u"-            assert(zType[i-1]==' ');"), (103860, 2, u'-  assert( pTab );'), (103931, 2, u'-  assert( pTab && (pTab->tabFlags & TF_Virtual)!=0 && !pTab->pVTable );'), (103978, 2, u'-  assert( (pTab->tabFlags & TF_Virtual)!=0 );'), (104015, 2, u'-  assert( (rc&0xff)==rc );'), (104036, 2, u'-    assert( rc==SQLITE_OK );'), (104041, 2, u'-      assert( pTab->pVTable==p && p->pNext==0 );'), (104191, 2, u'-  assert( op==SAVEPOINT_RELEASE||op==SAVEPOINT_ROLLBACK||op==SAVEPOINT_BEGIN );'), (104192, 2, u'-  assert( iSavepoint>=0 );'), (104258, 2, u'-  assert( pVtab!=0 );'), (104259, 2, u'-  assert( pVtab->pModule!=0 );'), (104305, 2, u'-  assert( IsVirtual(pTab) );'), (104330, 2, u'-  assert( OE_Rollback==1 && OE_Abort==2 && OE_Fail==3 );'), (104331, 2, u'-  assert( OE_Ignore==4 && OE_Replace==5 );'), (104332, 2, u'-  assert( db->vtabOnConflict>=1 && db->vtabOnConflict<=5 );'), (104354, 2, u'-        assert( p->pTab==0 || (p->pTab->tabFlags & TF_Virtual)!=0 );'), (104825, 2, u'-  assert( pMaskSet->n<=(int)sizeof(Bitmask)*8 );'), (104843, 2, u'-  assert( pMaskSet->n < ArraySize(pMaskSet->ix) );'), (104923, 2, u'-  assert( TK_GT>TK_EQ && TK_GT<TK_GE );'), (104924, 2, u'-  assert( TK_LT>TK_EQ && TK_LT<TK_GE );'), (104925, 2, u'-  assert( TK_LE>TK_EQ && TK_LE<TK_GE );'), (104926, 2, u'-  assert( TK_GE==TK_EQ+4 );'), (104951, 2, u'-  assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );'), (104967, 2, u'-    assert( TK_LT==TK_GT+2 );'), (104968, 2, u'-    assert( TK_GE==TK_LE+2 );'), (104969, 2, u'-    assert( TK_GT>TK_EQ );'), (104970, 2, u'-    assert( TK_GT<TK_LE );'), (104971, 2, u'-    assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );'), (104981, 2, u'-  assert( allowedOp(op) );'), (104987, 2, u'-    assert( (WO_EQ<<(op-TK_EQ)) < 0x7fff );'), (104990, 2, u'-  assert( op!=TK_ISNULL || c==WO_ISNULL );'), (104991, 2, u'-  assert( op!=TK_IN || c==WO_IN );'), (104992, 2, u'-  assert( op!=TK_EQ || c==WO_EQ );'), (104993, 2, u'-  assert( op!=TK_LT || c==WO_LT );'), (104994, 2, u'-  assert( op!=TK_LE || c==WO_LE );'), (104995, 2, u'-  assert( op!=TK_GT || c==WO_GT );'), (104996, 2, u'-  assert( op!=TK_GE || c==WO_GE );'), (105042, 2, u'-  assert( iCur>=0 );'), (105069, 2, u'-              assert(pX->pLeft);'), (105091, 2, u'-            assert( pX->op==TK_COLUMN );'), (105172, 2, u'-  assert( pLeft->iColumn!=(-1) ); /* Because IPK never has AFF_TEXT */'), (105187, 2, u'-    assert( pRight->op==TK_VARIABLE || pRight->op==TK_REGISTER );'), (105367, 2, u'-  assert( (pTerm->wtFlags & (TERM_DYNAMIC|TERM_ORINFO|TERM_ANDINFO))==0 );'), (105368, 2, u'-  assert( pExpr->op==TK_OR );'), (105377, 2, u'-  assert( pOrWc->nTerm>=2 );'), (105387, 2, u'-      assert( (pOrTerm->wtFlags & (TERM_ANDINFO|TERM_ORINFO))==0 );'), (105406, 2, u'-            assert( pAndTerm->pExpr );'), (105476, 2, u'-        assert( pOrTerm->eOperator & WO_EQ );'), (105481, 2, u'-          assert( j==1 );'), (105491, 2, u'-          assert( pOrTerm->wtFlags & (TERM_COPIED|TERM_VIRTUAL) );'), (105501, 2, u'-        assert( j==1 );'), (105502, 2, u'-        assert( IsPowerOfTwo(chngToIN) );'), (105503, 2, u'-        assert( chngToIN==getMask(pMaskSet, iCursor) );'), (105512, 2, u'-        assert( pOrTerm->eOperator & WO_EQ );'), (105548, 2, u'-        assert( pOrTerm->eOperator & WO_EQ );'), (105549, 2, u'-        assert( pOrTerm->leftCursor==iCursor );'), (105550, 2, u'-        assert( pOrTerm->u.leftColumn==iColumn );'), (105555, 2, u'-      assert( pLeft!=0 );'), (105561, 2, u'-        assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (105620, 2, u'-  assert( pExpr->op!=TK_AS && pExpr->op!=TK_COLLATE );'), (105624, 2, u'-    assert( pExpr->pRight==0 );'), (105715, 2, u'-    assert( pList!=0 );'), (105716, 2, u'-    assert( pList->nExpr==2 );'), (105738, 2, u'-    assert( pWC->op==TK_AND );'), (105954, 2, u'-  assert( pDistinct!=0 );'), (106287, 2, u'-  assert( pParse->nQueryLoop >= (double)1 );'), (106351, 2, u'-  assert( v!=0 );'), (106372, 2, u'-  assert( nColumn>0 );'), (106425, 2, u'-  assert( (u32)n==pLevel->plan.nEq );'), (106443, 2, u'-  assert( n==nColumn );'), (106447, 2, u'-  assert( pLevel->iIdxCur>=0 );'), (106494, 2, u'-    assert( IsPowerOfTwo(pTerm->eOperator & ~WO_EQUIV) );'), (106547, 2, u'-    assert( IsPowerOfTwo(pTerm->eOperator & ~WO_EQUIV) );'), (106560, 2, u'-    assert( WO_EQ==SQLITE_INDEX_CONSTRAINT_EQ );'), (106561, 2, u'-    assert( WO_LT==SQLITE_INDEX_CONSTRAINT_LT );'), (106562, 2, u'-    assert( WO_LE==SQLITE_INDEX_CONSTRAINT_LE );'), (106563, 2, u'-    assert( WO_GT==SQLITE_INDEX_CONSTRAINT_GT );'), (106564, 2, u'-    assert( WO_GE==SQLITE_INDEX_CONSTRAINT_GE );'), (106565, 2, u'-    assert( WO_MATCH==SQLITE_INDEX_CONSTRAINT_MATCH );'), (106566, 2, u'-    assert( pTerm->eOperator & (WO_IN|WO_EQ|WO_LT|WO_LE|WO_GT|WO_GE|WO_MATCH) );'), (106684, 2, u'-  assert( pTab->azModuleArg && pTab->azModuleArg[0] );'), (106685, 2, u'-  assert( sqlite3GetVTable(pParse->db, pTab) );'), (106696, 2, u'-    assert( bAllowIN==0 || bAllowIN==1 );'), (106849, 2, u'-  assert( roundUp==0 || roundUp==1 );'), (106850, 2, u'-  assert( pIdx->nSample>0 );'), (106868, 2, u'-        assert( aSample[i].eType==SQLITE_FLOAT );'), (106894, 2, u'-    assert( eType==SQLITE_TEXT || eType==SQLITE_BLOB );'), (106907, 2, u'-        assert( pColl->enc==SQLITE_UTF8 );'), (106917, 2, u'-        assert( z && pColl && pColl->xCmp );'), (106933, 2, u'-            assert( db->mallocFailed );'), (106956, 2, u'-    assert( i<pIdx->nSample );'), (107081, 2, u'-      assert( (pLower->eOperator & (WO_GT|WO_GE))!=0 );'), (107093, 2, u'-      assert( (pUpper->eOperator & (WO_LT|WO_LE))!=0 );'), (107118, 2, u'-  assert( pLower || pUpper );'), (107154, 2, u'-  assert( p->aSample!=0 );'), (107155, 2, u'-  assert( p->nSample>0 );'), (107203, 2, u'-  assert( p->aSample!=0 );'), (107243, 2, u'-    assert( (pLevel->plan.wsFlags & WHERE_ORDERED)!=0 );'), (107263, 2, u'-      assert( sortOrder==0 || sortOrder==1 );'), (107327, 2, u'-  assert( pOrderBy!=0 );'), (107335, 2, u'-  assert( nTerm>0 );'), (107340, 2, u'-  assert( pIdx->zName || (pIdx->nColumn==1 && pIdx->aiColumn[0]==-1) );'), (107379, 2, u'-      assert( zColl!=0 );'), (107404, 2, u'-    assert( pOBItem->sortOrder==0 || pOBItem->sortOrder==1 );'), (107405, 2, u'-    assert( iSortOrder==0 || iSortOrder==1 );'), (107844, 2, u'-      assert( (pFirstTerm->eOperator & (WO_EQ|WO_ISNULL|WO_IN))!=0 );'), (107852, 2, u'-        assert( pFirstTerm->eOperator & WO_IN );'), (108045, 2, u'-  assert( p->pOrderBy || (p->cost.plan.wsFlags&WHERE_ORDERED)==0 );'), (108046, 2, u'-  assert( p->cost.plan.u.pIdx==0 || (p->cost.plan.wsFlags&WHERE_ROWID_EQ)==0 );'), (108047, 2, u'-  assert( pSrc->pIndex==0'), (108079, 2, u'-    assert( pIdxInfo!=0 || p->pParse->db->mallocFailed );'), (108146, 2, u'-    assert( pParse->db->mallocFailed );'), (108149, 2, u'-  assert( v!=0 );'), (108194, 2, u'-  assert( iTarget>0 );'), (108216, 2, u'-    assert( pX->op==TK_IN );'), (108225, 2, u'-    assert( pLevel->plan.wsFlags & WHERE_IN_ABLE );'), (108311, 2, u'-  assert( pLevel->plan.wsFlags & WHERE_INDEXED );'), (108327, 2, u'-  assert( pIdx->nColumn>=nEq );'), (108653, 2, u'-    assert( pTerm!=0 );'), (108654, 2, u'-    assert( pTerm->pExpr!=0 );'), (108655, 2, u'-    assert( omitTable==0 );'), (108673, 2, u'-    assert( omitTable==0 );'), (108694, 2, u'-      assert( TK_LE==TK_GT+1 );      /* Make sure the ordering.. */'), (108695, 2, u'-      assert( TK_LT==TK_GT+2 );      /*  ... of the TK_xx values... */'), (108696, 2, u'-      assert( TK_GE==TK_GT+3 );      /*  ... is correcct. */'), (108700, 2, u'-      assert( pX!=0 );'), (108701, 2, u'-      assert( pStart->leftCursor==iCur );'), (108714, 2, u'-      assert( pX!=0 );'), (108715, 2, u'-      assert( pEnd->leftCursor==iCur );'), (108733, 2, u'-      assert( pLevel->p5==0 );'), (108897, 2, u'-    assert( op!=0 );'), (108985, 2, u'-      assert( pLevel->p5==0 );'), (109045, 2, u'-    assert( pTerm!=0 );'), (109046, 2, u'-    assert( pTerm->eOperator & WO_OR );'), (109047, 2, u'-    assert( (pTerm->wtFlags & TERM_ORINFO)!=0 );'), (109134, 2, u'-        assert( pSubWInfo || pParse->nErr || pParse->db->mallocFailed );'), (109174, 2, u'-            assert( pLvl->iIdxCur==iCovCur );'), (109206, 2, u'-    assert( bRev==0 || bRev==1 );'), (109207, 2, u'-    assert( omitTable==0 );'), (109234, 2, u'-    assert( pE!=0 );'), (109258, 2, u'-    assert( !ExprHasProperty(pE, EP_FromJoin) );'), (109259, 2, u'-    assert( (pTerm->prereqRight & newNotReady)!=0 );'), (109282, 2, u'-        assert( pWInfo->untestedTerms );'), (109285, 2, u'-      assert( pTerm->pExpr );'), (109541, 2, u'-      assert( (m-1)==toTheLeft );'), (109663, 2, u'-    assert( ckOptimal==0 || ckOptimal==1 );'), (109677, 2, u'-          assert( j>iFrom );'), (109685, 2, u'-        assert( sWBI.pSrc->pTab );'), (109695, 2, u'-        assert( isOptimal || (sWBI.cost.used&sWBI.notValid)==0 );'), (109699, 2, u'-        assert( sWBI.pSrc->pIndex==0'), (109761, 2, u'-    assert( bestJ>=0 );'), (109762, 2, u'-    assert( sWBI.notValid & getMask(pMaskSet, pTabList->a[bestJ].iCursor) );'), (109763, 2, u'-    assert( bestJ==iFrom || (pTabList->a[iFrom].jointype & JT_LEFT)==0 );'), (109773, 2, u'-      assert( pWInfo->eDistinct==0 );'), (109812, 2, u'-        assert( bestPlan.plan.u.pIdx==pIdx );'), (109831, 2, u'-    assert( nTabList==0 || (pLevel->plan.wsFlags & WHERE_ALL_UNIQUE)!=0 );'), (109840, 2, u'-  assert( (wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || pWInfo->nLevel==1 );'), (109885, 2, u'-        assert( n<=pTab->nCol );'), (109899, 2, u'-      assert( pIx->pSchema==pTab->pSchema );'), (109900, 2, u'-      assert( iIndexCur>=0 );'), (110027, 2, u'-      assert( (pLevel->plan.wsFlags & WHERE_IDX_ONLY)==0'), (110051, 2, u'-  assert( pWInfo->nLevel==1 || pWInfo->nLevel==pTabList->nSrc );'), (110056, 2, u'-    assert( pTab!=0 );'), (110104, 2, u'-          assert( (pLevel->plan.wsFlags & WHERE_IDX_ONLY)==0'), (111676, 2, u'-  assert( iLookAhead!=YYNOCODE );'), (111740, 2, u'-  assert( stateno<=YY_REDUCE_COUNT );'), (111743, 2, u'-  assert( i!=YY_REDUCE_USE_DFLT );'), (111744, 2, u'-  assert( iLookAhead!=YYNOCODE );'), (111751, 2, u'-  assert( i>=0 && i<YY_ACTTAB_COUNT );'), (111752, 2, u'-  assert( yy_lookahead[i]==iLookAhead );'), (113174, 2, u'-  assert( yymsp[-2].minor.yy327!=0 );'), (113182, 2, u'-  assert( yymsp[-1].minor.yy327!=0 );'), (113350, 2, u'-  assert( yyruleno>=0 && yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) );'), (113373, 2, u'-    assert( yyact == YYNSTATE + YYNRULE + 1 );'), (113410, 2, u'-  assert( TOKEN.z[0] );  /* The tokenizer always gives us a token */'), (113505, 2, u'-      assert( yyact == YY_ERROR_ACTION );'), (114285, 2, u'-  assert( pzErrMsg!=0 );'), (114291, 2, u'-  assert( pParse->pNewTable==0 );'), (114292, 2, u'-  assert( pParse->pNewTrigger==0 );'), (114293, 2, u'-  assert( pParse->nVar==0 );'), (114294, 2, u'-  assert( pParse->nzVar==0 );'), (114295, 2, u'-  assert( pParse->azVar==0 );'), (114299, 2, u'-    assert( i>=0 );'), (114358, 2, u'-  assert( pzErrMsg!=0 );'), (115009, 2, u'-    assert( sqlite3GlobalConfig.nRefInitMutex==0 );'), (115026, 2, u'-    assert(sizeof(x)==8);'), (115027, 2, u'-    assert(sizeof(x)==sizeof(y));'), (115029, 2, u'-    assert( sqlite3IsNaN(y) );'), (115348, 2, u'-    assert( sz > (int)sizeof(LookasideSlot*) );'), (115589, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (115714, 2, u'-  assert( db->nDb<=2 );'), (115715, 2, u'-  assert( db->aDb==db->aDbStatic );'), (115774, 2, u'-  assert( db->lookaside.nOut==0 );  /* Fails on a lookaside memory leak */'), (115790, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (116004, 2, u'-  assert( count>=0 );'), (116135, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (116182, 2, u'-      assert( !db->mallocFailed );'), (116190, 2, u'-  assert(p || db->mallocFailed);'), (116254, 2, u'-    assert( rc!=SQLITE_OK );'), (116279, 2, u'-  assert( !db->mallocFailed );'), (116504, 2, u'-  assert( SQLITE_CHECKPOINT_FULL>SQLITE_CHECKPOINT_PASSIVE );'), (116505, 2, u'-  assert( SQLITE_CHECKPOINT_FULL<SQLITE_CHECKPOINT_RESTART );'), (116506, 2, u'-  assert( SQLITE_CHECKPOINT_PASSIVE+2==SQLITE_CHECKPOINT_RESTART );'), (116563, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (116564, 2, u'-  assert( !pnLog || *pnLog==-1 );'), (116565, 2, u'-  assert( !pnCkpt || *pnCkpt==-1 );'), (116634, 2, u'-    assert( !db->mallocFailed );'), (116738, 2, u'-  assert( sqlite3_mutex_held(db->mutex) );'), (116872, 2, u'-  assert( aHardLimit[SQLITE_LIMIT_LENGTH]==SQLITE_MAX_LENGTH );'), (116873, 2, u'-  assert( aHardLimit[SQLITE_LIMIT_SQL_LENGTH]==SQLITE_MAX_SQL_LENGTH );'), (116874, 2, u'-  assert( aHardLimit[SQLITE_LIMIT_COLUMN]==SQLITE_MAX_COLUMN );'), (116875, 2, u'-  assert( aHardLimit[SQLITE_LIMIT_EXPR_DEPTH]==SQLITE_MAX_EXPR_DEPTH );'), (116876, 2, u'-  assert( aHardLimit[SQLITE_LIMIT_COMPOUND_SELECT]==SQLITE_MAX_COMPOUND_SELECT);'), (116877, 2, u'-  assert( aHardLimit[SQLITE_LIMIT_VDBE_OP]==SQLITE_MAX_VDBE_OP );'), (116878, 2, u'-  assert( aHardLimit[SQLITE_LIMIT_FUNCTION_ARG]==SQLITE_MAX_FUNCTION_ARG );'), (116879, 2, u'-  assert( aHardLimit[SQLITE_LIMIT_ATTACHED]==SQLITE_MAX_ATTACHED );'), (116880, 2, u'-  assert( aHardLimit[SQLITE_LIMIT_LIKE_PATTERN_LENGTH]=='), (116882, 2, u'-  assert( aHardLimit[SQLITE_LIMIT_VARIABLE_NUMBER]==SQLITE_MAX_VARIABLE_NUMBER);'), (116883, 2, u'-  assert( aHardLimit[SQLITE_LIMIT_TRIGGER_DEPTH]==SQLITE_MAX_TRIGGER_DEPTH );'), (116884, 2, u'-  assert( SQLITE_LIMIT_TRIGGER_DEPTH==(SQLITE_N_LIMIT-1) );'), (116939, 2, u'-  assert( *pzErrMsg==0 );'), (116993, 2, u'-        assert( octet>=0 && octet<256 );'), (117166, 2, u'-  assert( SQLITE_OPEN_READONLY  == 0x01 );'), (117167, 2, u'-  assert( SQLITE_OPEN_READWRITE == 0x02 );'), (117168, 2, u'-  assert( SQLITE_OPEN_CREATE    == 0x04 );'), (117229, 2, u'-  assert( sizeof(db->aLimit)==sizeof(aHardLimit) );'), (117266, 2, u'-  assert( db->pDfltColl!=0 );'), (117380, 2, u'-    assert( db->mutex!=0 || isThreadsafe==0 || sqlite3GlobalConfig.bFullMutex==0 );'), (117384, 2, u'-  assert( db!=0 || rc==SQLITE_NOMEM );'), (117433, 2, u'-  assert( zFilename );'), (117434, 2, u'-  assert( ppDb );'), (117446, 2, u'-    assert( *ppDb || rc==SQLITE_NOMEM );'), (117471, 2, u'-  assert( !db->mallocFailed );'), (117491, 2, u'-  assert( !db->mallocFailed );'), (117512, 2, u'-  assert( !db->mallocFailed );'), (117781, 2, u'-    assert( pPager!=0 );'), (117783, 2, u'-    assert( fd!=0 );'), (117901, 2, u'-    case SQLITE_TESTCTRL_ASSERT: {'), (117903, 2, u'-      assert( (x = va_arg(ap,int))!=0 );'), (118149, 2, u'-#define assertMutexHeld() \\'), (118150, 2, u'-  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) )'), (118182, 2, u'-    assert( p->pUnlockConnection || p->pBlockingConnection );'), (118187, 2, u'-      assert( p2->xUnlockNotify==p->xUnlockNotify || !seen );'), (118188, 2, u'-      assert( db==0 || p->pUnlockConnection!=db );'), (118189, 2, u'-      assert( db==0 || p->pBlockingConnection!=db );'), (118203, 2, u'-  assertMutexHeld();'), (118218, 2, u'-  assertMutexHeld();'), (118240, 2, u'-  assertMutexHeld();'), (118304, 2, u'-  assert( !db->mallocFailed );'), (118366, 2, u'-      assert( p->xUnlockNotify );'), (118373, 2, u'-      assert( aArg==aDyn || (aDyn==0 && aArg==aStatic) );'), (118374, 2, u'-      assert( nArg<=(int)ArraySize(aStatic) || aArg==aDyn );'), (119625, 2, u'-  assert( q - (unsigned char *)p <= FTS3_VARINT_MAX );'), (119753, 2, u'-  assert( p->nPendingData==0 );'), (119754, 2, u'-  assert( p->pSegments==0 );'), (119941, 2, u'-  assert( p->bHasStat==p->bFts4 );'), (119975, 2, u'-    assert( p->nPgsz>0 || rc!=SQLITE_OK );'), (120381, 2, u'-  assert( strlen(argv[0])==4 );'), (120382, 2, u'-  assert( (sqlite3_strnicmp(argv[0], "fts4", 4)==0 && isFts4)'), (120491, 2, u'-              assert( iOpt==6 );'), (120544, 2, u'-    assert( nString==0 );'), (120554, 2, u'-  assert( pTokenizer );'), (120558, 2, u'-    assert( zPrefix );'), (120620, 2, u'-    assert( zCsr <= &((char *)p)[nByte] );'), (120672, 2, u'-    assert( p->pSegments==0 );'), (120785, 2, u'-  assert( p->pSegments==0 );'), (120815, 2, u'-  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (120821, 2, u'-  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (120964, 2, u'-    assert( zBuffer );'), (121034, 2, u'-  assert( piLeaf || piLeaf2 );'), (121038, 2, u'-  assert( !piLeaf2 || !piLeaf || rc!=SQLITE_OK || (*piLeaf<=*piLeaf2) );'), (121075, 2, u'-  assert( iVal-*piPrev > 0 || (*piPrev==0 && iVal==0) );'), (121330, 2, u'-  assert( isSaveLeft==0 || isExact==0 );'), (121332, 2, u'-  assert( p!=0 && *p1!=0 && *p2!=0 );'), (121354, 2, u'-      assert( *p1!=POS_END && *p1!=POS_COLUMN );'), (121355, 2, u'-      assert( *p2!=POS_END && *p2!=POS_COLUMN );'), (121367, 2, u'-          assert( p );'), (121379, 2, u'-        assert( pp && p );'), (121385, 2, u'-      assert( (*p1&0xFE)==0 && (*p2&0xFE)==0 );'), (121544, 2, u'-  assert( *pbFirst || *piPrev==0 );'), (121545, 2, u'-  assert( *pbFirst==0 || iWrite>0 );'), (121653, 2, u'-  assert( *pnOut<=n1+n2+FTS3_VARINT_MAX-1 );'), (121686, 2, u'-  assert( nDist>0 );'), (121856, 2, u'-        assert( iOut>0 );'), (122001, 2, u'-  assert( iIndex>=0 && iIndex<p->nIndex );'), (122002, 2, u'-  assert( iLevel==FTS3_SEGCURSOR_ALL'), (122006, 2, u'-  assert( iLevel<FTS3_SEGDIR_MAXLEVEL );'), (122007, 2, u'-  assert( FTS3_SEGCURSOR_ALL<0 && FTS3_SEGCURSOR_PENDING<0 );'), (122008, 2, u'-  assert( isPrefix==0 || isScan==0 );'), (122210, 2, u'-  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (122245, 2, u'-  assert( idxNum>=0 && idxNum<=(FTS3_FULLTEXT_SEARCH+p->nColumn) );'), (122246, 2, u'-  assert( nVal==0 || nVal==1 || nVal==2 );'), (122247, 2, u'-  assert( (nVal==0)==(idxNum==FTS3_FULLSCAN_SEARCH) );'), (122248, 2, u'-  assert( p->pSegments==0 );'), (122274, 2, u'-    assert( p->base.zErrMsg==0 );'), (122362, 2, u'-  assert( iCol>=0 && iCol<=p->nColumn+2 );'), (122393, 2, u'-  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (122446, 2, u'-    assert( rc==SQLITE_OK || mxLevel==0 );'), (122461, 2, u'-  assert( p->pSegments==0 );'), (122462, 2, u'-  assert( p->nPendingData==0 );'), (122463, 2, u'-  assert( p->inTransaction!=1 );'), (122478, 2, u'-  assert( p->nPendingData==0 );'), (122479, 2, u'-  assert( p->inTransaction!=0 );'), (122480, 2, u'-  assert( p->pSegments==0 );'), (122493, 2, u'-  assert( p->inTransaction!=0 );'), (122566, 2, u'-  assert( nVal>=1 );'), (122601, 2, u'-  assert( nVal==1 );'), (122603, 2, u'-  assert( pCsr );'), (122629, 2, u'-  assert( nVal==1 );'), (122632, 2, u'-  assert( p );'), (122658, 2, u'-  assert( nVal==1 || nVal==2 );'), (122722, 2, u'-  assert( p->nPendingData==0 );'), (122763, 2, u'-  assert( ((Fts3Table *)pVtab)->inTransaction );'), (122764, 2, u'-  assert( ((Fts3Table *)pVtab)->mxSavepoint < iSavepoint );'), (122781, 2, u'-  assert( p->inTransaction );'), (122782, 2, u'-  assert( p->mxSavepoint >= iSavepoint );'), (122795, 2, u'-  assert( p->inTransaction );'), (122796, 2, u'-  assert( p->mxSavepoint >= iSavepoint );'), (122951, 2, u'-  assert( rc!=SQLITE_OK );'), (122996, 2, u'-      assert( pExpr->pPhrase->iDoclistToken==0 );'), (123021, 2, u'-  assert( iToken!=p->iDoclistToken );'), (123084, 2, u'-    assert( pToken->pDeferred==0 || pToken->pSegcsr==0 );'), (123094, 2, u'-    assert( pToken->pSegcsr==0 );'), (123116, 2, u'-  assert( pPhrase->doclist.bFreeList==0 );'), (123143, 2, u'-        assert( iPrev>=0 );'), (123240, 2, u'-  assert( rc!=SQLITE_OK || p->nToken<1 || p->aToken[0].pSegcsr==0 || p->bIncr );'), (123265, 2, u'-  assert( nDoclist>0 );'), (123266, 2, u'-  assert( *pbEof==0 );'), (123267, 2, u'-  assert( p || *piDocid==0 );'), (123268, 2, u'-  assert( !p || (p>aDoclist && p<&aDoclist[nDoclist]) );'), (123320, 2, u'-  assert( nDoclist>0 );'), (123321, 2, u'-  assert( *pbEof==0 );'), (123322, 2, u'-  assert( p || *piDocid==0 );'), (123323, 2, u'-  assert( !p || (p>=aDoclist && p<=&aDoclist[nDoclist]) );'), (123361, 2, u'-    assert( p->nToken==1 );'), (123362, 2, u'-    assert( pDL->pNextDocid==0 );'), (123407, 2, u'-      assert( pIter>=&pDL->aAll[pDL->nAll] || *pIter );'), (123505, 2, u'-      assert( pExpr->eType==FTSQUERY_OR'), (123509, 2, u'-      assert( pExpr->pLeft && pExpr->pRight );'), (123561, 2, u'-    assert( a );'), (123575, 2, u'-    assert( pCsr->nRowAvg>0 );'), (123636, 2, u'-  assert( rc!=SQLITE_OK || nDocSize>0 );'), (123673, 2, u'-    assert( pTC );'), (123698, 2, u'-        assert( rc==SQLITE_OK || pList==0 );'), (123822, 2, u'-  assert( pPhrase->doclist.pList );'), (123830, 2, u"-    assert( pPhrase->doclist.pList[nNew]=='\\0' );"), (123831, 2, u'-    assert( nNew<=pPhrase->doclist.nList && nNew>0 );'), (123889, 2, u'-    assert( pExpr->bEof==0 );'), (123897, 2, u'-        assert( !pLeft->bDeferred || !pRight->bDeferred );'), (123935, 2, u'-        assert( pLeft->bStart || pLeft->iDocid==pRight->iDocid );'), (123936, 2, u'-        assert( pRight->bStart || pLeft->iDocid==pRight->iDocid );'), (123964, 2, u'-          assert( *pRc!=SQLITE_OK || pRight->bStart );'), (124066, 2, u'-          assert( p->pParent && p->pParent->pLeft==p );'), (124161, 2, u'-          assert( pExpr->bDeferred || pPhrase->doclist.bFreeList==0 );'), (124237, 2, u'-  assert( pCsr->isEof==0 );'), (124245, 2, u'-      assert( sqlite3_data_count(pCsr->pStmt)==0 );'), (124276, 2, u'-        assert( pPhrase->nToken==1 );'), (124277, 2, u'-        assert( pPhrase->aToken[0].pSegcsr );'), (124310, 2, u'-      assert( *p );'), (124352, 2, u'-  assert( pExpr->eType==FTSQUERY_PHRASE );'), (124369, 2, u'-    assert( pRoot->bStart );'), (124374, 2, u'-      assert( pE->aMI==0 );'), (124387, 2, u'-        assert( sqlite3_data_count(pCsr->pStmt)==0 );'), (124420, 2, u'-        assert( pRoot->bEof==0 );'), (124468, 2, u'-    assert( pCsr->nDoc>0 );'), (124476, 2, u'-      assert( pExpr->aMI );'), (124521, 2, u'-  assert( iCol>=0 && iCol<pTab->nColumn );'), (124554, 2, u'-      assert( rc!=SQLITE_OK || pPhrase->bIncr==0 );'), (124563, 2, u'-    assert( bDescDoclist==0 || bDescDoclist==1 );'), (124564, 2, u'-    assert( pCsr->bDesc==0 || pCsr->bDesc==1 );'), (124956, 2, u'-          assert( iCol==0 );'), (124975, 2, u'-        default: assert( eState==3 );'), (125010, 2, u'-  assert( idxStr==0 );'), (125011, 2, u'-  assert( idxNum==FTS4AUX_EQ_CONSTRAINT || idxNum==0'), (125071, 2, u'-  assert( p->isEof==0 );'), (125282, 2, u'-  assert( rc==SQLITE_OK || pCsr==0 );'), (125453, 2, u'-        assert( nToken==ii );'), (125488, 2, u'-      assert( nTemp==0 );'), (125579, 2, u'-        assert( nKey==4 );'), (125698, 2, u'-  assert( p->eType!=FTSQUERY_PHRASE );'), (125706, 2, u'-  assert( p->eType==FTSQUERY_AND );'), (125729, 2, u'-    assert( pSplit->pParent->pRight==pSplit );'), (125807, 2, u'-          assert( pRet && pPrev );'), (125839, 2, u'-            assert( pPrev && pPrev->pLeft && pPrev->pRight==0 );'), (125850, 2, u'-      assert( nByte>0 );'), (125852, 2, u'-    assert( rc!=SQLITE_OK || (nByte>0 && nByte<=nIn) );'), (125945, 2, u'-        assert( p->pParent==0 || p->pParent->pLeft==p );'), (125946, 2, u'-        assert( p->pLeft && p->pRight );'), (125954, 2, u'-        assert( pParent==0 || pParent->pLeft==p );'), (125969, 2, u'-            assert( pFree );'), (125994, 2, u'-        assert( pParent->pParent==0 || pParent->pParent->pLeft==pParent );'), (125999, 2, u'-          assert( pParent==pRoot );'), (126017, 2, u'-              assert( pFree!=0 );'), (126044, 2, u'-      assert( pFree==0 );'), (126097, 2, u'-  assert( rc==SQLITE_OK || *ppExpr==0 );'), (126176, 2, u'-  assert( p->eType==FTSQUERY_PHRASE || p->pPhrase==0 );'), (126191, 2, u'-  assert( pDel==0 || pDel->pParent==0 );'), (126193, 2, u'-    assert( p->pParent==0 || p==p->pParent->pRight || p==p->pParent->pLeft );'), (126201, 2, u'-        assert( p==p->pParent->pRight || p==p->pParent->pLeft );'), (126349, 2, u'-  assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (126373, 2, u'-    assert( rc==SQLITE_OK || pExpr==0 );'), (126478, 2, u'-  assert( pNew!=0 );'), (126479, 2, u'-  assert( keyClass>=FTS3_HASH_STRING && keyClass<=FTS3_HASH_BINARY );'), (126495, 2, u'-  assert( pH!=0 );'), (126562, 2, u'-    assert( keyClass==FTS3_HASH_BINARY );'), (126577, 2, u'-    assert( keyClass==FTS3_HASH_BINARY );'), (126619, 2, u'-  assert( (new_size & (new_size-1))==0 );'), (126694, 2, u'-    assert( pH->first==0 );'), (126695, 2, u'-    assert( pH->count==0 );'), (126710, 2, u'-  assert( xHash!=0 );'), (126712, 2, u'-  assert( (pH->htsize & (pH->htsize-1))==0 );'), (126755, 2, u'-  assert( pH!=0 );'), (126757, 2, u'-  assert( xHash!=0 );'), (126759, 2, u'-  assert( (pH->htsize & (pH->htsize-1))==0 );'), (126778, 2, u'-  assert( pH->htsize>0 );'), (126793, 2, u'-  assert( pH->htsize>0 );'), (126794, 2, u'-  assert( (pH->htsize & (pH->htsize-1))==0 );'), (126956, 2, u"-  assert( x>='a' && x<='z' );"), (126965, 2, u"-  assert( x>='a' && x<='z' );"), (127512, 2, u'-  assert( argc==1 || argc==2 );'), (127640, 2, u'-    assert( rc!=SQLITE_OK || *ppTok );'), (127859, 2, u'-  assert( rc==SQLITE_OK );'), (127860, 2, u'-  assert( p1==p2 );'), (127862, 2, u'-  assert( rc==SQLITE_ERROR );'), (127863, 2, u'-  assert( p2==0 );'), (127864, 2, u'-  assert( 0==strcmp(sqlite3_errmsg(db), "unknown tokenizer: nosuchtokenizer") );'), (127868, 2, u'-  assert( rc==SQLITE_OK );'), (127870, 2, u'-  assert( rc==SQLITE_OK );'), (127871, 2, u'-  assert( p2==p1 );'), (128364, 2, u'-  assert( (rc==SQLITE_OK)==(pMod!=0) );'), (128429, 2, u'-  assert( pInfo->estimatedCost>1000000.0 );'), (128574, 2, u'-      assert( iCol==4 );'), (129008, 2, u'-  assert( SizeofArray(azSql)==SizeofArray(p->aStmt) );'), (129009, 2, u'-  assert( eStmt<SizeofArray(azSql) && eStmt>=0 );'), (129026, 2, u'-      assert( rc==SQLITE_OK || pStmt==0 );'), (129189, 2, u'-  assert( iLangid>=0 );'), (129190, 2, u'-  assert( p->nIndex>0 );'), (129191, 2, u'-  assert( iIndex>=0 && iIndex<p->nIndex );'), (129224, 2, u'-  assert( iLevel==FTS3_SEGCURSOR_ALL || iLevel>=0 );'), (129225, 2, u'-  assert( iLevel<FTS3_SEGDIR_MAXLEVEL );'), (129226, 2, u'-  assert( iIndex>=0 && iIndex<p->nIndex );'), (129315, 2, u'-  assert( !p || p->iLastDocid<=iDocid );'), (129320, 2, u'-      assert( p->nData<p->nSpace );'), (129321, 2, u'-      assert( p->aData[p->nData]==0 );'), (129341, 2, u'-    assert( iPos>p->iLastPos || (iPos==0 && p->iLastPos==0) );'), (129387, 2, u'-      assert( 0==fts3HashFind(pHash, zToken, nToken) );'), (129427, 2, u'-  assert( pTokenizer && pModule );'), (129488, 2, u'-  assert( iLangid>=0 );'), (129647, 2, u'-  assert( p->zContentTbl==0 || bContent==0 );'), (129684, 2, u'-  assert( *pbFound==0 );'), (129743, 2, u'-  assert( iLangid>=0 );'), (129744, 2, u'-  assert( p->nIndex>=1 );'), (129813, 2, u'-  assert( pnBlob );'), (129888, 2, u'-  assert( !pReader->pBlob'), (129945, 2, u'-        assert( pReader->aNode );'), (129954, 2, u'-    assert( pReader->iCurrentBlock<=pReader->iLeafEndBlock );'), (129964, 2, u'-    assert( pReader->pBlob==0 );'), (129972, 2, u'-  assert( !fts3SegReaderIsPending(pReader) );'), (130025, 2, u'-  assert( pReader->aDoclist );'), (130026, 2, u'-  assert( !pReader->pOffsetList );'), (130065, 2, u'-  assert( p );'), (130100, 2, u'-      assert( *p==0 );'), (130155, 2, u'-  assert( p->bFts4 );'), (130156, 2, u'-  assert( pgsz>0 );'), (130209, 2, u'-  assert( iStartLeaf<=iEndLeaf );'), (130391, 2, u'-  assert( rc!=0 );'), (130415, 2, u'-  assert( pLhs->aNode && pRhs->aNode );'), (130427, 2, u'-  assert( pLhs->aNode && pRhs->aNode );'), (130472, 2, u'-  assert( nSuspect<=nSegment );'), (130489, 2, u'-    assert( xCmp(apSegment[i], apSegment[i+1])<0 );'), (130621, 2, u'-        assert( pTree->aData==(char *)&pTree[1] );'), (130704, 2, u'-  assert( iHeight>=1 && iHeight<128 );'), (130755, 2, u'-      assert( iNextLeaf==iFree );'), (130777, 2, u'-      assert( pRight==0 || p->zMalloc==0 );'), (130865, 2, u'-    assert( nPrefix<nTerm );'), (130890, 2, u'-  assert( nData+nReq<=pWriter->nSize );'), (130916, 2, u'-    assert( pWriter->zTerm==pWriter->zMalloc );'), (131022, 2, u'-  assert( iIndex>=0 && iIndex<p->nIndex );'), (131098, 2, u'-  assert( iLevel>=0 || iLevel==FTS3_SEGCURSOR_ALL );'), (131148, 2, u'-  assert( iCol>=0 );'), (131246, 2, u'-        assert( (pMsr->aBuffer[nList] & 0xFE)==0x00 );'), (131321, 2, u'-  assert( pCsr->pFilter==0 );'), (131322, 2, u'-  assert( zTerm && nTerm>0 );'), (131344, 2, u'-  assert( iCol<0 || iCol<p->nColumn );'), (131365, 2, u'-  assert( pCsr->zTerm==0 );'), (131366, 2, u'-  assert( pCsr->nTerm==0 );'), (131367, 2, u'-  assert( pCsr->aDoclist==0 );'), (131368, 2, u'-  assert( pCsr->nDoclist==0 );'), (131424, 2, u'-    assert( rc==SQLITE_OK );'), (131455, 2, u'-    assert( isIgnoreEmpty || (isRequirePos && !isColFilter) );'), (131511, 2, u'-          assert( iDelta>0 || (nDoclist==0 && iDelta==iDocid) );'), (131512, 2, u'-          assert( nDoclist>0 || iDelta==iDocid );'), (131602, 2, u'-  assert( iLevel==FTS3_SEGCURSOR_ALL'), (131606, 2, u'-  assert( iLevel<FTS3_SEGDIR_MAXLEVEL );'), (131607, 2, u'-  assert( iIndex>=0 && iIndex<p->nIndex );'), (131636, 2, u'-  assert( csr.nSegment>0 );'), (131637, 2, u'-  assert( iNewLevel>=getAbsoluteLevel(p, iLangid, iIndex, 0) );'), (131638, 2, u'-  assert( iNewLevel<getAbsoluteLevel(p, iLangid, iIndex,FTS3_SEGDIR_MAXLEVEL) );'), (131652, 2, u'-  assert( pWriter );'), (131730, 2, u'-    assert(j<=nBuf);'), (132002, 2, u'-    assert( pCsr->nSegment==0 );'), (132120, 2, u'-  assert( p->aNode );'), (132144, 2, u'-  assert( p->iOff<=p->nNode );'), (132198, 2, u'-  assert( nTerm>0 );'), (132249, 2, u'-      assert( pNode->block.nAlloc>=p->nNodeSize );'), (132262, 2, u'-  assert( 0 );'), (132305, 2, u'-  assert( pNode->n>0 );'), (132306, 2, u"-  assert( (pNode->a[0]=='\\0')==(aDoclist!=0) );"), (132329, 2, u'-  assert( pNode->n<=pNode->nAlloc );'), (132442, 2, u'-    assert( *pRc || pNode->block.nAlloc==0 );'), (132443, 2, u'-    assert( *pRc || pNode->key.nAlloc==0 );'), (132620, 2, u'-          assert( reader.aNode );'), (132873, 2, u'-  assert( p->bIgnoreSavepoint==0 );'), (132892, 2, u'-    assert( pNode->nAlloc>=1+sqlite3Fts3VarintLen(iChild) );'), (132895, 2, u'-    assert( pNode->nAlloc>=1 );'), (132947, 2, u'-  assert( pNew->n<=pNew->nAlloc );'), (133068, 2, u'-    assert( j<pCsr->nSegment && pSeg->iIdx==i );'), (133381, 2, u'-      assert( p->bFts4==0 );'), (133408, 2, u'-    assert( p->bFts4==0 );'), (133466, 2, u'-  assert( *pRc==SQLITE_OK );'), (133738, 2, u'-    assert( pCsr->isRequireSeek==0 );'), (133824, 2, u'-  assert( pToken->pDeferred==0 );'), (133899, 2, u'-  assert( p->pSegments==0 );'), (133900, 2, u'-  assert('), (133982, 2, u'-    assert( sqlite3_value_type(apVal[0])==SQLITE_INTEGER );'), (134000, 2, u'-      assert( p->iPrevDocid==*pRowid );'), (134191, 2, u'-    assert( pExpr->pLeft && pExpr->pRight );'), (134373, 2, u'-        assert( iCsr>=iStart );'), (134410, 2, u'-  assert( rc==SQLITE_OK || pCsr==0 );'), (134415, 2, u'-    assert( iFirst>=0 );'), (134421, 2, u'-    assert( rc!=SQLITE_OK || ('), (134507, 2, u'-    assert( iScore>=0 );'), (134629, 2, u'-      assert( nShift<=nDesired );'), (134884, 2, u'-      assert( cArg==FTS3_MATCHINFO_HITS );'), (134907, 2, u'-  assert( sqlite3_data_count(pStmt)==1 );'), (135139, 2, u'-        assert( zArg[i]==FTS3_MATCHINFO_HITS );'), (135185, 2, u'-    assert( pCsr->aMatchinfo );'), (135312, 2, u'-    assert( (mCovered&mSeen)==mCovered );'), (135316, 2, u'-  assert( nFToken>0 );'), (135368, 2, u'-    assert( iPos>=0 );'), (135402, 2, u'-  assert( pCsr->isRequireSeek==0 );'), (135478, 2, u'-        assert( iCurrent<=iMinPos );'), (135508, 2, u'-  assert( rc!=SQLITE_DONE );'), (135706, 2, u'-  assert( bAlnum==0 || bAlnum==1 );'), (135710, 2, u'-    assert( (sqlite3FtsUnicodeIsalnum(iCode) & 0xFFFFFFFE)==0 );'), (135775, 2, u'-  assert( (sqlite3FtsUnicodeIsalnum(iCode) & 0xFFFFFFFE)==0 );'), (136107, 2, u'-    assert( aEntry[0]<key );'), (136108, 2, u'-    assert( key>=aEntry[iRes] );'), (136164, 2, u'-  assert( key>=aDia[iRes] );'), (136286, 2, u'-  assert( c>=0 );'), (136287, 2, u'-  assert( sizeof(unsigned short)==2 && sizeof(unsigned char)==1 );'), (136306, 2, u'-    assert( iRes<0 || c>=aEntry[iRes].iCode );'), (136312, 2, u'-        assert( ret>0 );'), (136702, 2, u'-  assert( sizeof(RtreeCoord)==4 );'), (136703, 2, u'-  assert( sizeof(u32)==4 );'), (136766, 2, u'-  assert( pNode->pNext==0 );'), (136779, 2, u'-    for( ; (*pp)!=pNode; pp = &(*pp)->pNext){ assert(*pp); }'), (136823, 2, u'-    assert( !pParent || !pNode->pParent || pNode->pParent==pParent );'), (136942, 2, u'-  assert( nCell<=nMaxCell );'), (136985, 2, u'-    assert( pNode->nRef>0 );'), (137014, 2, u'-  assert( iCell<NCELL(pNode) );'), (137219, 2, u'-  assert( pConstraint->op==RTREE_MATCH );'), (137220, 2, u'-  assert( pConstraint->pGeom );'), (137249, 2, u'-    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (137267, 2, u'-        assert( p->op==RTREE_MATCH );'), (137301, 2, u'-    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (137312, 2, u'-        assert( p->op==RTREE_MATCH );'), (137351, 2, u'-  assert( iHeight>=0 );'), (137380, 2, u'-    assert( pCursor->pNode==pChild );'), (137438, 2, u'-  assert( pCsr->pNode );'), (137478, 2, u'-  assert(pCsr->pNode);'), (137503, 2, u'-      assert( pRtree->eCoordType==RTREE_COORD_INT32 );'), (137605, 2, u'-      assert( rc==SQLITE_OK );'), (137619, 2, u'-        assert( (idxStr==0 && argc==0)'), (137654, 2, u'-        assert( pCsr->pNode==pRoot );'), (137661, 2, u'-        assert( pCsr->pNode==pRoot );'), (137665, 2, u'-      assert( rc!=SQLITE_OK || !pCsr->pNode || pCsr->iCell<NCELL(pCsr->pNode) );'), (137716, 2, u'-  assert( pIdxInfo->idxStr==0 );'), (137749, 2, u'-          assert( p->op==SQLITE_INDEX_CONSTRAINT_MATCH );'), (137765, 2, u'-  assert( iIdx>=0 );'), (137858, 2, u'-    assert( iExclude==-1 );'), (138266, 2, u'-        assert( left<=right );'), (138333, 2, u'-        assert( xleft1<=xright1 && (xleft1<xright1 || xleft2<=xright2) );'), (138701, 2, u'-  assert( pNode->nRef==1 );'), (138790, 2, u'-  assert( pParent || pNode->iNode==1 );'), (139114, 2, u'-  assert(nData>=1);'), (139131, 2, u'-    assert( nData==(pRtree->nDim*2 + 3) );'), (139777, 2, u'-    assert(uPattern!=0);'), (139961, 2, u'-      assert(!pExpr);'), (140027, 2, u'-  assert(nArg==1 || nArg==2);'), (140086, 2, u'-  assert(!"Unexpected return value from ucol_strcoll()");'), (140115, 2, u'-  assert(nArg==2);'), (140128, 2, u'-  assert(p);'), (140402, 2, u'-    assert(iStart<=iEnd);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(321, 1, u'+  assert( 0==argc );'), (322, 1, u'+  assert( zShellStatic );'), (944, 1, u'+    assert( (zCsr-zIn)==len );'), (1196, 1, u'+            assert(sizeof(int) <= sizeof(char *));'), (2435, 1, u'+      { "assert",                SQLITE_TESTCTRL_ASSERT                 },'), (2505, 1, u'+        case SQLITE_TESTCTRL_ASSERT:'), (2593, 1, u'+    assert( nArg<=ArraySize(azArg) );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(542, 1, u'+# define ALWAYS(X)      ((X)?1:(assert(0),0))'), (543, 1, u'+# define NEVER(X)       ((X)?(assert(0),1):0)'), (6565, 1, u'+#define SQLITE_TESTCTRL_ASSERT                  12'), (9135, 1, u'+SQLITE_PRIVATE   int sqlite3VdbeAssertMayAbort(Vdbe *, int);'), (12895, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (13758, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (13768, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (13780, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (13835, 1, u'+      assert( (op-SQLITE_DBSTATUS_LOOKASIDE_HIT)>=0 );'), (13836, 1, u'+      assert( (op-SQLITE_DBSTATUS_LOOKASIDE_HIT)<3 );'), (13942, 1, u'+      assert( SQLITE_DBSTATUS_CACHE_MISS==SQLITE_DBSTATUS_CACHE_HIT+1 );'), (13943, 1, u'+      assert( SQLITE_DBSTATUS_CACHE_WRITE==SQLITE_DBSTATUS_CACHE_HIT+2 );'), (15276, 1, u'+  assert( rc==SQLITE_OK || pFile->pMethods==0 );'), (15281, 1, u'+  assert( dirSync==0 || dirSync==1 );'), (15363, 1, u'+  assert( pFile );'), (15417, 1, u'+  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) );'), (15454, 1, u'+  assert(vfsList);'), (15742, 1, u'+  assert( nByte>0 );'), (15769, 1, u'+  assert( pPrior!=0 );'), (15813, 1, u'+  assert( pPrior!=0 && nByte>0 );'), (15814, 1, u'+  assert( nByte==ROUND8(nByte) ); /* EV: R-46199-30249 */'), (16045, 1, u'+    assert( mem.nCurrent[i]>=0 );'), (16063, 1, u'+  assert( p->iForeGuard==(int)FOREGUARD );'), (16067, 1, u'+  assert( pInt[nReserve/sizeof(int)]==(int)REARGUARD );'), (16072, 1, u'+  while( nReserve-- > p->iSize ) assert( pU8[nReserve]==0x65 );'), (16093, 1, u'+  assert( (sizeof(struct MemBlockHdr)&7) == 0 );'), (16154, 1, u'+  assert( mem.disallow==0 );'), (16179, 1, u'+      assert(pBt[0]);'), (16208, 1, u'+  assert( sqlite3GlobalConfig.bMemstat || sqlite3GlobalConfig.bCoreMutex==0'), (16215, 1, u'+    assert( pHdr->pPrev->pNext==pHdr );'), (16218, 1, u'+    assert( mem.pFirst==pHdr );'), (16222, 1, u'+    assert( pHdr->pNext->pPrev==pHdr );'), (16225, 1, u'+    assert( mem.pLast==pHdr );'), (16249, 1, u'+  assert( mem.disallow==0 );'), (16250, 1, u'+  assert( (nByte & 7)==0 );     /* EV: R-46199-30249 */'), (16288, 1, u'+    assert( pHdr->iForeGuard==FOREGUARD );'), (16307, 1, u'+    assert( pHdr->iForeGuard==FOREGUARD );         /* Allocation is valid */'), (16329, 1, u'+    assert( pHdr->iForeGuard==FOREGUARD );         /* Allocation is valid */'), (16583, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16602, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16603, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (16604, 1, u'+  assert( i>=1 );'), (16606, 1, u'+  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (16607, 1, u'+  assert( size>=2 );'), (16621, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16636, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16637, 1, u'+  assert( i>=1 );'), (16638, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (16640, 1, u'+  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (16641, 1, u'+  assert( size>=2 );'), (16671, 1, u'+    assert( sqlite3_mutex_held(mem3.mutex) );'), (16687, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16688, 1, u'+  assert( i>=1 );'), (16689, 1, u'+  assert( mem3.aPool[i-1].u.hdr.size4x/4==nBlock );'), (16690, 1, u'+  assert( mem3.aPool[i+nBlock-1].u.hdr.prevSize==nBlock );'), (16704, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16705, 1, u'+  assert( mem3.szMaster>=nBlock );'), (16717, 1, u'+    assert( newi > mem3.iMaster+1 );'), (16751, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16755, 1, u'+    assert( (size&1)==0 );'), (16758, 1, u'+      assert( i > mem3.aPool[i-1].u.hdr.prevSize );'), (16792, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16793, 1, u'+  assert( sizeof(Mem3Block)==8 );'), (16799, 1, u'+  assert( nBlock>=2 );'), (16873, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16874, 1, u'+  assert( p>mem3.aPool && p<&mem3.aPool[mem3.nPool] );'), (16876, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x&1)==1 );'), (16878, 1, u'+  assert( i+size<=mem3.nPool+1 );'), (16914, 1, u'+  assert( (pBlock[-1].u.hdr.size4x&1)!=0 );'), (16934, 1, u'+  assert( nBytes>0 );          /* malloc.c filters out 0 byte requests */'), (16945, 1, u'+  assert( pPrior );'), (16992, 1, u'+  assert( sizeof(Mem3Block)==8 );'), (17043, 1, u'+      assert( 0 );'), (17048, 1, u'+      assert( 0 );'), (17053, 1, u'+      assert( 0 );'), (17271, 1, u'+  assert( i>=0 && i<mem5.nBlock );'), (17272, 1, u'+  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (17273, 1, u'+  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (17293, 1, u'+  assert( sqlite3_mutex_held(mem5.mutex) );'), (17294, 1, u'+  assert( i>=0 && i<mem5.nBlock );'), (17295, 1, u'+  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (17296, 1, u'+  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (17301, 1, u'+    assert( x<mem5.nBlock );'), (17328, 1, u'+    assert( i>=0 && i<mem5.nBlock );'), (17342, 1, u'+  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (17344, 1, u'+  assert( iFirst>=0 );'), (17370, 1, u'+  assert( nByte>0 );'), (17435, 1, u'+  assert( iBlock>=0 && iBlock<mem5.nBlock );'), (17436, 1, u'+  assert( ((u8 *)pOld-mem5.zPool)%mem5.szAtom==0 );'), (17437, 1, u'+  assert( (mem5.aCtrl[iBlock] & CTRL_FREE)==0 );'), (17441, 1, u'+  assert( iBlock+size-1<(u32)mem5.nBlock );'), (17445, 1, u'+  assert( mem5.currentCount>0 );'), (17446, 1, u'+  assert( mem5.currentOut>=(size*mem5.szAtom) );'), (17449, 1, u'+  assert( mem5.currentOut>0 || mem5.currentCount==0 );'), (17450, 1, u'+  assert( mem5.currentCount>0 || mem5.currentOut==0 );'), (17460, 1, u'+    assert( iBuddy>=0 );'), (17498, 1, u'+  assert( pPrior!=0 );'), (17519, 1, u'+  assert( pPrior!=0 );'), (17520, 1, u'+  assert( (nBytes&(nBytes-1))==0 );  /* EV: R-46199-30249 */'), (17521, 1, u'+  assert( nBytes>=0 );'), (17592, 1, u'+  assert( (sizeof(Mem5Link)&(sizeof(Mem5Link)-1))==0 );'), (17596, 1, u'+  assert( zByte!=0 );  /* sqlite3_config() does not allow otherwise */'), (17621, 1, u'+    assert((iOffset+nAlloc)>mem5.nBlock);'), (17798, 1, u'+  assert( GLOBAL(int, mutexIsInit) );'), (17983, 1, u'+      assert( id-2 >= 0 );'), (17984, 1, u'+      assert( id-2 < (int)(sizeof(aStatic)/sizeof(aStatic[0])) );'), (17998, 1, u'+  assert( p->cnt==0 );'), (17999, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (18016, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) );'), (18021, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) );'), (18034, 1, u'+  assert( debugMutexHeld(pX) );'), (18036, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) );'), (18240, 1, u'+      assert( iType-2 >= 0 );'), (18241, 1, u'+      assert( iType-2 < ArraySize(staticMutexes) );'), (18259, 1, u'+  assert( p->nRef==0 );'), (18260, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (18277, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (18296, 1, u'+      assert( p->nRef==0 );'), (18306, 1, u'+  assert( p->nRef>0 || p->owner==0 );'), (18320, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (18339, 1, u'+      assert( p->nRef==0 );'), (18376, 1, u'+  assert( pthreadMutexHeld(p) );'), (18381, 1, u'+  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (18633, 1, u'+      assert( winMutex_isInit==1 );'), (18634, 1, u'+      assert( iType-2 >= 0 );'), (18635, 1, u'+      assert( iType-2 < ArraySize(winMutex_staticMutexes) );'), (18653, 1, u'+  assert( p );'), (18654, 1, u'+  assert( p->nRef==0 && p->owner==0 );'), (18655, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (18674, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld2(p, tid) );'), (18678, 1, u'+  assert( p->nRef>0 || p->owner==0 );'), (18691, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld2(p, tid) );'), (18729, 1, u'+  assert( p->nRef>0 );'), (18730, 1, u'+  assert( p->owner==tid );'), (18733, 1, u'+  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (19030, 1, u'+  assert( sqlite3_mutex_held(mem0.mutex) );'), (19080, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(p) );  /* IMP: R-04675-44850 */'), (19117, 1, u'+  assert( n>0 );'), (19139, 1, u'+  assert( sqlite3_mutex_notheld(mem0.mutex) );'), (19147, 1, u'+  assert( scratchAllocOut<=1 );'), (19161, 1, u'+    assert( scratchAllocOut>=1 && scratchAllocOut<=2 );'), (19173, 1, u'+      assert( mem0.nScratchFree <= (u32)sqlite3GlobalConfig.nScratch );'), (19178, 1, u'+      assert( sqlite3MemdebugHasType(p, MEMTYPE_SCRATCH) );'), (19179, 1, u'+      assert( sqlite3MemdebugNoType(p, ~MEMTYPE_SCRATCH) );'), (19212, 1, u'+  assert( sqlite3MemdebugHasType(p, MEMTYPE_HEAP) );'), (19213, 1, u'+  assert( sqlite3MemdebugNoType(p, MEMTYPE_DB) );'), (19217, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (19221, 1, u'+    assert( sqlite3MemdebugHasType(p, MEMTYPE_DB) );'), (19222, 1, u'+    assert( sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) );'), (19223, 1, u'+    assert( db!=0 || sqlite3MemdebugNoType(p, MEMTYPE_LOOKASIDE) );'), (19233, 1, u'+  assert( sqlite3MemdebugNoType(p, MEMTYPE_DB) );'), (19234, 1, u'+  assert( sqlite3MemdebugHasType(p, MEMTYPE_HEAP) );'), (19251, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (19269, 1, u'+  assert( sqlite3MemdebugHasType(p, MEMTYPE_DB) );'), (19270, 1, u'+  assert( sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) );'), (19271, 1, u'+  assert( db!=0 || sqlite3MemdebugNoType(p, MEMTYPE_LOOKASIDE) );'), (19308, 1, u'+    assert( sqlite3MemdebugHasType(pOld, MEMTYPE_HEAP) );'), (19309, 1, u'+    assert( sqlite3MemdebugNoType(pOld, ~MEMTYPE_HEAP) );'), (19323, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pNew) ); /* IMP: R-04675-44850 */'), (19382, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (19383, 1, u'+  assert( db==0 || db->pnBytesFreed==0 );'), (19426, 1, u'+  assert( db!=0 );'), (19427, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (19442, 1, u'+      assert( sqlite3MemdebugHasType(p, MEMTYPE_DB) );'), (19443, 1, u'+      assert( sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) );'), (19484, 1, u'+  assert( (n&0x7fffffff)==n );'), (19496, 1, u'+  assert( (n&0x7fffffff)==n );'), (19540, 1, u'+  assert( !db || sqlite3_mutex_held(db->mutex) );'), (20055, 1, u'+          assert( precision>0 );'), (20065, 1, u'+          assert( bufpt>zOut );'), (20197, 1, u'+        assert( k>=0 && k<pSrc->nSrc );'), (20207, 1, u'+        assert( xtype==etINVALID );'), (20241, 1, u'+  assert( z!=0 || N==0 );'), (20247, 1, u'+  assert( p->zText!=0 || p->nChar==0 );'), (20288, 1, u'+  assert( p->zText );'), (20353, 1, u'+  assert( db!=0 );'), (20881, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (20882, 1, u'+  assert( pMem->flags&MEM_Str );'), (20883, 1, u'+  assert( pMem->enc!=desiredEnc );'), (20884, 1, u'+  assert( pMem->enc!=0 );'), (20885, 1, u'+  assert( pMem->n>=0 );'), (20904, 1, u'+      assert( rc==SQLITE_NOMEM );'), (20959, 1, u'+      assert( desiredEnc==SQLITE_UTF16BE );'), (20969, 1, u'+    assert( desiredEnc==SQLITE_UTF8 );'), (20986, 1, u'+  assert( (pMem->n+(desiredEnc==SQLITE_UTF8?1:2))<=len );'), (21019, 1, u'+  assert( pMem->n>=0 );'), (21062, 1, u'+  assert( z<=zTerm );'), (21117, 1, u'+  assert( (m.flags & MEM_Term)!=0 || db->mallocFailed );'), (21118, 1, u'+  assert( (m.flags & MEM_Str)!=0 || db->mallocFailed );'), (21119, 1, u'+  assert( (m.flags & MEM_Dyn)!=0 || db->mallocFailed );'), (21120, 1, u'+  assert( m.z || db->mallocFailed );'), (21141, 1, u'+    assert( db->mallocFailed );'), (21144, 1, u'+  assert( m.z==m.zMalloc );'), (21191, 1, u'+    assert( n>0 && n<=4 );'), (21198, 1, u'+    assert( c==t );'), (21199, 1, u'+    assert( (z-zBuf)==n );'), (21206, 1, u'+    assert( n>0 && n<=4 );'), (21210, 1, u'+    assert( c==i );'), (21211, 1, u'+    assert( (z-zBuf)==n );'), (21218, 1, u'+    assert( n>0 && n<=4 );'), (21222, 1, u'+    assert( c==i );'), (21223, 1, u'+    assert( (z-zBuf)==n );'), (21506, 1, u'+  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (21514, 1, u'+    assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (21717, 1, u'+  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (21722, 1, u'+    assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (21758, 1, u'+    assert( u<=LARGEST_INT64 );'), (21765, 1, u'+      assert( u<=LARGEST_INT64 );'), (21773, 1, u'+      assert( u-1==LARGEST_INT64 );'), (21774, 1, u'+      assert( (*pNum)==SMALLEST_INT64 );'), (21880, 1, u'+  assert( n<=9 );'), (21951, 1, u'+  assert( SLOT_2_0 == ((0x7f<<14) | (0x7f)) );'), (21952, 1, u'+  assert( SLOT_4_2_0 == ((0xfU<<28) | (0x7f<<14) | (0x7f)) );'), (22157, 1, u'+    assert( n>3 && n<=9 );'), (22209, 1, u'+    assert( n>5 && n<=9 );'), (22251, 1, u"+  assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );"), (22386, 1, u'+  assert( iA1*iB0==0 || iA0*iB1==0 );'), (22464, 1, u'+  assert( pNew!=0 );'), (22478, 1, u'+  assert( pH!=0 );'), (22497, 1, u'+  assert( nKey>=0 );'), (22632, 1, u'+    assert( pEntry->count>=0 );'), (22637, 1, u'+    assert( pH->first==0 );'), (22638, 1, u'+    assert( pH->count==0 );'), (22651, 1, u'+  assert( pH!=0 );'), (22652, 1, u'+  assert( pKey!=0 );'), (22653, 1, u'+  assert( nKey>=0 );'), (22682, 1, u'+  assert( pH!=0 );'), (22683, 1, u'+  assert( pKey!=0 );'), (22684, 1, u'+  assert( nKey>=0 );'), (22698, 1, u'+      assert(nKey==elem->nKey);'), (22711, 1, u'+      assert( pH->htsize>0 );'), (23768, 1, u'+    assert( 0 );'), (23770, 1, u'+  assert( p->l_whence==SEEK_SET );'), (23787, 1, u'+      assert( 0 );'), (23979, 1, u"+  assert( zAbsoluteName[0]=='/' );"), (24018, 1, u'+  assert( pId->nRef>0 );'), (24023, 1, u'+    assert( *pp==pId );'), (24283, 1, u'+  assert( unixMutexHeld() );'), (24287, 1, u'+      assert( pInode->pShmNode==0 );'), (24290, 1, u'+        assert( pInode->pPrev->pNext==pInode );'), (24293, 1, u'+        assert( inodeList==pInode );'), (24297, 1, u'+        assert( pInode->pNext->pPrev==pInode );'), (24325, 1, u'+  assert( unixMutexHeld() );'), (24453, 1, u'+  assert( pFile );'), (24508, 1, u'+  assert( unixMutexHeld() );'), (24509, 1, u'+  assert( pInode!=0 );'), (24515, 1, u'+      assert( pInode->nLock==0 );'), (24602, 1, u'+  assert( pFile );'), (24622, 1, u'+  assert( pFile->eFileLock!=NO_LOCK || eFileLock==SHARED_LOCK );'), (24623, 1, u'+  assert( eFileLock!=PENDING_LOCK );'), (24624, 1, u'+  assert( eFileLock!=RESERVED_LOCK || pFile->eFileLock==SHARED_LOCK );'), (24647, 1, u'+    assert( eFileLock==SHARED_LOCK );'), (24648, 1, u'+    assert( pFile->eFileLock==0 );'), (24649, 1, u'+    assert( pInode->nShared>0 );'), (24683, 1, u'+    assert( pInode->nShared==0 );'), (24684, 1, u'+    assert( pInode->eFileLock==0 );'), (24685, 1, u'+    assert( rc==SQLITE_OK );'), (24724, 1, u'+    assert( 0!=pFile->eFileLock );'), (24727, 1, u'+    assert( eFileLock==RESERVED_LOCK || eFileLock==EXCLUSIVE_LOCK );'), (24810, 1, u'+  assert( pFile );'), (24815, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (24821, 1, u'+  assert( pInode->nShared!=0 );'), (24823, 1, u'+    assert( pInode->eFileLock==pFile->eFileLock );'), (24850, 1, u'+      assert( handleNFSUnlock==0 );'), (24916, 1, u'+    lock.l_len = 2L;  assert( PENDING_BYTE+1==RESERVED_BYTE );'), (24950, 1, u'+    assert( pInode->nLock>=0 );'), (24970, 1, u'+  assert( eFileLock==SHARED_LOCK || ((unixFile *)id)->nFetchOut==0 );'), (25023, 1, u'+  assert( pFile->pInode->nLock>0 || pFile->pInode->bProcessLock==0 );'), (25127, 1, u'+  assert( pFile );'), (25226, 1, u'+  assert( pFile );'), (25229, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (25245, 1, u'+  assert( eFileLock==NO_LOCK );'), (25323, 1, u'+  assert( pFile );'), (25402, 1, u'+  assert( pFile );'), (25445, 1, u'+  assert( pFile );'), (25448, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (25515, 1, u'+  assert( pFile );'), (25614, 1, u'+  assert( pFile );'), (25615, 1, u'+  assert( pSem );'), (25618, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (25651, 1, u'+    assert( pFile );'), (25760, 1, u'+  assert( pFile );'), (25828, 1, u'+  assert( pFile );'), (25848, 1, u'+  assert( pFile->eFileLock!=NO_LOCK || eFileLock==SHARED_LOCK );'), (25849, 1, u'+  assert( eFileLock!=PENDING_LOCK );'), (25850, 1, u'+  assert( eFileLock!=RESERVED_LOCK || pFile->eFileLock==SHARED_LOCK );'), (25873, 1, u'+    assert( eFileLock==SHARED_LOCK );'), (25874, 1, u'+    assert( pFile->eFileLock==0 );'), (25875, 1, u'+    assert( pInode->nShared>0 );'), (25904, 1, u'+    assert( pInode->nShared==0 );'), (25905, 1, u'+    assert( pInode->eFileLock==0 );'), (25944, 1, u'+    assert( 0!=pFile->eFileLock );'), (26014, 1, u'+  assert( pFile );'), (26019, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (26025, 1, u'+  assert( pInode->nShared!=0 );'), (26027, 1, u'+    assert( pInode->eFileLock==pFile->eFileLock );'), (26041, 1, u'+    assert( pFile->inNormalWrite==0'), (26092, 1, u'+      assert( pInode->nLock>=0 );'), (26193, 1, u'+  assert( cnt==(cnt&0x1ffff) );'), (26247, 1, u'+  assert( id );'), (26248, 1, u'+  assert( offset>=0 );'), (26249, 1, u'+  assert( amt>0 );'), (26254, 1, u'+  assert( pFile->pUnused==0'), (26307, 1, u'+  assert( nBuf==(nBuf&0x1ffff) );'), (26360, 1, u'+  assert( id );'), (26361, 1, u'+  assert( amt>0 );'), (26366, 1, u'+  assert( pFile->pUnused==0'), (26619, 1, u'+  assert((flags&0x0F)==SQLITE_SYNC_NORMAL'), (26628, 1, u'+  assert( pFile );'), (26663, 1, u'+  assert( pFile );'), (26711, 1, u'+  assert( id );'), (27119, 1, u'+  assert( sqlite3_mutex_held(pShmNode->mutex) || pShmNode->nRef==0 );'), (27122, 1, u'+  assert( n==1 || lockType!=F_RDLCK );'), (27125, 1, u'+  assert( n>=1 && n<SQLITE_SHM_NLOCK );'), (27154, 1, u'+      assert( lockType==F_WRLCK );'), (27165, 1, u'+      assert( lockType==F_WRLCK );'), (27186, 1, u'+  assert( unixMutexHeld() );'), (27189, 1, u'+    assert( p->pInode==pFd->pInode );'), (27255, 1, u'+  assert( pDbFd->pShm==0 );'), (27408, 1, u'+  assert( szRegion==pShmNode->szRegion || pShmNode->nRegion==0 );'), (27409, 1, u'+  assert( pShmNode->pInode==pDbFd->pInode );'), (27410, 1, u'+  assert( pShmNode->h>=0 || pDbFd->pInode->bProcessLock==1 );'), (27411, 1, u'+  assert( pShmNode->h<0 || pDbFd->pInode->bProcessLock==0 );'), (27450, 1, u'+          assert( (nByte % pgsz)==0 );'), (27527, 1, u'+  assert( pShmNode==pDbFd->pInode->pShmNode );'), (27528, 1, u'+  assert( pShmNode->pInode==pDbFd->pInode );'), (27529, 1, u'+  assert( ofst>=0 && ofst+n<=SQLITE_SHM_NLOCK );'), (27530, 1, u'+  assert( n>=1 );'), (27531, 1, u'+  assert( flags==(SQLITE_SHM_LOCK | SQLITE_SHM_SHARED)'), (27535, 1, u'+  assert( n==1 || (flags & SQLITE_SHM_EXCLUSIVE)!=0 );'), (27536, 1, u'+  assert( pShmNode->h>=0 || pDbFd->pInode->bProcessLock==1 );'), (27537, 1, u'+  assert( pShmNode->h<0 || pDbFd->pInode->bProcessLock==0 );'), (27540, 1, u'+  assert( n>1 || mask==(1<<ofst) );'), (27548, 1, u'+      assert( (pX->exclMask & (p->exclMask|p->sharedMask))==0 );'), (27609, 1, u'+        assert( (p->sharedMask & mask)==0 );'), (27655, 1, u'+  assert( pShmNode==pDbFd->pInode->pShmNode );'), (27656, 1, u'+  assert( pShmNode->pInode==pDbFd->pInode );'), (27672, 1, u'+  assert( pShmNode->nRef>0 );'), (27695, 1, u'+  assert( pFd->nFetchOut==0 );'), (27748, 1, u'+  assert( pFd->nFetchOut==0 );'), (27749, 1, u'+  assert( nNew>pFd->mmapSize );'), (27750, 1, u'+  assert( nNew<=pFd->mmapSizeMax );'), (27751, 1, u'+  assert( nNew>0 );'), (27752, 1, u'+  assert( pFd->mmapSizeActual>=pFd->mmapSize );'), (27753, 1, u'+  assert( MAP_FAILED!=0 );'), (27829, 1, u'+  assert( nMap>=0 || pFd->nFetchOut==0 );'), (27906, 1, u'+  assert( (p==0)==(pFd->nFetchOut==0) );'), (27909, 1, u'+  assert( p==0 || p==&((u8 *)pFd->pMapRegion)[iOff] );'), (27917, 1, u'+  assert( pFd->nFetchOut>=0 );'), (28228, 1, u'+  assert( pNew->pInode==NULL );'), (28235, 1, u"+  assert( zFilename==0 || zFilename[0]=='/'"), (28238, 1, u"+  assert( zFilename==0 || zFilename[0]=='/' );"), (28242, 1, u'+  assert( zFilename!=0 || (ctrlFlags & UNIXFILE_NOLOCK)!=0 );'), (28344, 1, u'+    assert( zFilename!=0 );'), (28591, 1, u'+      assert( nDb>0 );'), (28592, 1, u"+      assert( zPath[nDb]!='\\n' );"), (28684, 1, u'+  assert((isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly));'), (28685, 1, u'+  assert(isCreate==0 || isReadWrite);'), (28686, 1, u'+  assert(isExclusive==0 || isCreate);'), (28687, 1, u'+  assert(isDelete==0 || isCreate);'), (28691, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_DB );'), (28692, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_JOURNAL );'), (28693, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MASTER_JOURNAL );'), (28694, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_WAL );'), (28697, 1, u'+  assert( eType==SQLITE_OPEN_MAIN_DB      || eType==SQLITE_OPEN_TEMP_DB'), (28721, 1, u'+    assert( (flags & SQLITE_OPEN_URI) || zName[strlen(zName)+1]==0 );'), (28725, 1, u'+    assert(isDelete && !syncDir);'), (28734, 1, u'+    assert( zName[strlen(zName)+1]==0 );'), (28753, 1, u'+      assert( !p->pUnused );'), (28754, 1, u'+      assert( eType==SQLITE_OPEN_WAL || eType==SQLITE_OPEN_MAIN_JOURNAL );'), (28781, 1, u'+  assert( fd>=0 );'), (28954, 1, u'+      assert(!"Invalid flags argument");'), (28990, 1, u'+  assert( pVfs->mxPathname==MAX_PATHNAME );'), (29075, 1, u'+  assert((size_t)nBuf>=(sizeof(time_t)+sizeof(int)));'), (29100, 1, u'+      assert( sizeof(t)+sizeof(pid)<=(size_t)nBuf );'), (29443, 1, u'+  assert(lockPath!=NULL);'), (29574, 1, u'+  assert(PROXY_HOSTIDLEN == sizeof(uuid_t));'), (29704, 1, u'+      assert( nTries>1 );'), (29730, 1, u'+      assert( nTries==3 );'), (30030, 1, u'+  assert( (int)strlen(conchPath) == len+7 );'), (30080, 1, u'+    assert( (int)strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (30091, 1, u'+    assert( strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (30242, 1, u'+      assert( 0 );  /* The call assures that only valid opcodes are sent */'), (30487, 1, u'+  assert( ArraySize(aSyscall)==24 );'), (30982, 1, u'+#define winMemAssertMagic() assert( win_mem_data.magic==WINMEM_MAGIC )'), (30984, 1, u'+#define winMemAssertMagic()'), (31721, 1, u'+  assert( nMin==-1 || nMin==0 || nMin<SQLITE_WIN32_DBG_BUF_SIZE );'), (31763, 1, u'+  assert( sleepObj!=NULL );'), (31805, 1, u'+  winMemAssertMagic();'), (31807, 1, u'+  assert( hHeap!=0 );'), (31808, 1, u'+  assert( hHeap!=INVALID_HANDLE_VALUE );'), (31810, 1, u'+  assert ( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (31812, 1, u'+  assert( nBytes>=0 );'), (31827, 1, u'+  winMemAssertMagic();'), (31829, 1, u'+  assert( hHeap!=0 );'), (31830, 1, u'+  assert( hHeap!=INVALID_HANDLE_VALUE );'), (31832, 1, u'+  assert ( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, pPrior) );'), (31848, 1, u'+  winMemAssertMagic();'), (31850, 1, u'+  assert( hHeap!=0 );'), (31851, 1, u'+  assert( hHeap!=INVALID_HANDLE_VALUE );'), (31853, 1, u'+  assert ( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, pPrior) );'), (31855, 1, u'+  assert( nBytes>=0 );'), (31876, 1, u'+  winMemAssertMagic();'), (31878, 1, u'+  assert( hHeap!=0 );'), (31879, 1, u'+  assert( hHeap!=INVALID_HANDLE_VALUE );'), (31881, 1, u'+  assert ( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (31907, 1, u'+  assert( pWinMemData->magic==WINMEM_MAGIC );'), (31922, 1, u'+    assert( pWinMemData->bOwned );'), (31932, 1, u'+  assert( !pWinMemData->bOwned );'), (31934, 1, u'+  assert( pWinMemData->hHeap!=0 );'), (31935, 1, u'+  assert( pWinMemData->hHeap!=INVALID_HANDLE_VALUE );'), (31937, 1, u'+  assert( osHeapValidate(pWinMemData->hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (31950, 1, u'+    assert( pWinMemData->hHeap!=INVALID_HANDLE_VALUE );'), (31952, 1, u'+    assert( osHeapValidate(pWinMemData->hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (32154, 1, u'+  assert( !ppDirectory || type==SQLITE_WIN32_DATA_DIRECTORY_TYPE'), (32157, 1, u'+  assert( !ppDirectory || sqlite3MemdebugHasType(*ppDirectory, MEMTYPE_HEAP) );'), (32281, 1, u'+  assert( errcode!=SQLITE_OK );'), (32614, 1, u'+      assert(nNumberOfBytesToUnlockLow == (DWORD)SHARED_SIZE);'), (32622, 1, u'+      assert(nNumberOfBytesToUnlockLow == (DWORD)SHARED_SIZE'), (32816, 1, u'+  assert( id!=0 );'), (32818, 1, u'+  assert( pFile->pShm==0 );'), (32820, 1, u'+  assert( pFile->h!=NULL && pFile->h!=INVALID_HANDLE_VALUE );'), (32875, 1, u'+  assert( id!=0 );'), (32876, 1, u'+  assert( amt>0 );'), (32877, 1, u'+  assert( offset>=0 );'), (32946, 1, u'+  assert( amt>0 );'), (32947, 1, u'+  assert( pFile );'), (33001, 1, u'+      assert( nWrite==0 || nWrite<=(DWORD)nRem );'), (33044, 1, u'+  assert( pFile );'), (33113, 1, u'+  assert( pFile );'), (33115, 1, u'+  assert((flags&0x0F)==SQLITE_SYNC_NORMAL'), (33163, 1, u'+  assert( id!=0 );'), (33164, 1, u'+  assert( pSize!=0 );'), (33327, 1, u'+  assert( id!=0 );'), (33342, 1, u'+  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (33343, 1, u'+  assert( locktype!=PENDING_LOCK );'), (33344, 1, u'+  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (33377, 1, u'+    assert( pFile->locktype==NO_LOCK );'), (33389, 1, u'+    assert( pFile->locktype==SHARED_LOCK );'), (33408, 1, u'+    assert( pFile->locktype>=SHARED_LOCK );'), (33456, 1, u'+  assert( id!=0 );'), (33489, 1, u'+  assert( pFile!=0 );'), (33490, 1, u'+  assert( locktype<=SHARED_LOCK );'), (33788, 1, u'+  assert( sqlite3_mutex_held(pFile->mutex) || pFile->nRef==0 );'), (33831, 1, u'+  assert( winShmMutexHeld() );'), (33882, 1, u'+  assert( pDbFd->pShm==0 );    /* Not previously opened */'), (34014, 1, u'+  assert( pShmNode->nRef>0 );'), (34040, 1, u'+  assert( ofst>=0 && ofst+n<=SQLITE_SHM_NLOCK );'), (34041, 1, u'+  assert( n>=1 );'), (34042, 1, u'+  assert( flags==(SQLITE_SHM_LOCK | SQLITE_SHM_SHARED)'), (34046, 1, u'+  assert( n==1 || (flags & SQLITE_SHM_EXCLUSIVE)!=0 );'), (34049, 1, u'+  assert( n>1 || mask==(1<<ofst) );'), (34057, 1, u'+      assert( (pX->exclMask & (p->exclMask|p->sharedMask))==0 );'), (34118, 1, u'+        assert( (p->sharedMask & mask)==0 );'), (34184, 1, u'+  assert( szRegion==pShmNode->szRegion || pShmNode->nRegion==0 );'), (34305, 1, u'+  assert( pFile!=0 );'), (34358, 1, u'+  assert( nMap>=0 || pFd->nFetchOut==0 );'), (34410, 1, u'+    assert( (nMap % winSysInfo.dwPageSize)==0 );'), (34414, 1, u'+    assert( sizeof(SIZE_T)==sizeof(sqlite3_int64) || nMap<=0xffffffff );'), (34498, 1, u'+  assert( (p==0)==(pFd->nFetchOut==0) );'), (34501, 1, u'+  assert( p==0 || p==&((u8 *)pFd->pMapRegion)[iOff] );'), (34516, 1, u'+  assert( pFd->nFetchOut>=0 );'), (34753, 1, u'+  assert((isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly));'), (34754, 1, u'+  assert(isCreate==0 || isReadWrite);'), (34755, 1, u'+  assert(isExclusive==0 || isCreate);'), (34756, 1, u'+  assert(isDelete==0 || isCreate);'), (34760, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_DB );'), (34761, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_JOURNAL );'), (34762, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MASTER_JOURNAL );'), (34763, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_WAL );'), (34766, 1, u'+  assert( eType==SQLITE_OPEN_MAIN_DB      || eType==SQLITE_OPEN_TEMP_DB'), (34772, 1, u'+  assert( pFile!=0 );'), (34787, 1, u'+    assert(isDelete && !isOpenJournal);'), (34801, 1, u'+  assert( (eType!=SQLITE_OPEN_MAIN_DB) || (flags & SQLITE_OPEN_URI) ||'), (35159, 1, u'+      assert(!"Invalid flags argument");'), (35220, 1, u'+  assert( pVfs->mxPathname>=MAX_PATH );'), (35221, 1, u'+  assert( nFull>=pVfs->mxPathname );'), (35602, 1, u'+  assert( ArraySize(aSyscall)==74 );'), (35611, 1, u'+  assert( winSysInfo.dwAllocationGranularity>0 );'), (35612, 1, u'+  assert( winSysInfo.dwPageSize>0 );'), (35746, 1, u'+  assert( sizeof(*p)==BITVEC_SZ );'), (35798, 1, u'+  assert( i>0 );'), (35799, 1, u'+  assert( i<=p->iSize );'), (35868, 1, u'+  assert( i>0 );'), (36078, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (36079, 1, u'+# define expensive_assert(X)  assert(X)'), (36081, 1, u'+# define expensive_assert(X)'), (36086, 1, u'+#if !defined(NDEBUG) && defined(SQLITE_ENABLE_EXPENSIVE_ASSERT)'), (36097, 1, u'+    assert( p->nRef || (p->flags&PGHDR_NEED_SYNC) );'), (36109, 1, u'+  assert( pPage->pDirtyNext || pPage==p->pDirtyTail );'), (36110, 1, u'+  assert( pPage->pDirtyPrev || pPage==p->pDirty );'), (36124, 1, u'+    assert( pPage==p->pDirtyTail );'), (36130, 1, u'+    assert( pPage==p->pDirty );'), (36136, 1, u'+  expensive_assert( pcacheCheckSynced(p) );'), (36146, 1, u'+  assert( pPage->pDirtyNext==0 && pPage->pDirtyPrev==0 && p->pDirty!=pPage );'), (36150, 1, u'+    assert( pPage->pDirtyNext->pDirtyPrev==0 );'), (36160, 1, u'+  expensive_assert( pcacheCheckSynced(p) );'), (36231, 1, u'+  assert( pCache->nRef==0 && pCache->pDirty==0 );'), (36264, 1, u'+  assert( pCache!=0 );'), (36265, 1, u'+  assert( createFlag==1 || createFlag==0 );'), (36266, 1, u'+  assert( pgno>0 );'), (36296, 1, u'+    expensive_assert( pcacheCheckSynced(pCache) );'), (36335, 1, u'+    assert( pPgHdr->pCache==pCache );'), (36336, 1, u'+    assert( pPgHdr->pgno==pgno );'), (36337, 1, u'+    assert( pPgHdr->pData==pPage->pBuf );'), (36338, 1, u'+    assert( pPgHdr->pExtra==(void *)&pPgHdr[1] );'), (36357, 1, u'+  assert( p->nRef>0 );'), (36376, 1, u'+  assert(p->nRef>0);'), (36387, 1, u'+  assert( p->nRef==1 );'), (36405, 1, u'+  assert( p->nRef>0 );'), (36452, 1, u'+  assert( p->nRef>0 );'), (36453, 1, u'+  assert( newPgno>0 );'), (36481, 1, u'+      assert( p->pgno>0 );'), (36483, 1, u'+        assert( p->flags&PGHDR_DIRTY );'), (36856, 1, u'+  assert( sqlite3_mutex_notheld(pcache1.grp.mutex) );'), (36865, 1, u'+      assert( pcache1.nFreeSlot>=0 );'), (36903, 1, u'+    assert( pcache1.nFreeSlot<=pcache1.nSlot );'), (36906, 1, u'+    assert( sqlite3MemdebugHasType(p, MEMTYPE_PCACHE) );'), (36928, 1, u'+    assert( sqlite3MemdebugHasType(p, MEMTYPE_PCACHE) );'), (36947, 1, u'+  assert( sqlite3_mutex_held(pCache->pGroup->mutex) );'), (36984, 1, u'+    assert( sqlite3_mutex_held(p->pCache->pGroup->mutex) );'), (37050, 1, u'+  assert( sqlite3_mutex_held(p->pGroup->mutex) );'), (37097, 1, u'+  assert( sqlite3_mutex_held(pGroup->mutex) );'), (37129, 1, u'+  assert( sqlite3_mutex_held(pCache->pGroup->mutex) );'), (37142, 1, u'+  assert( sqlite3_mutex_held(pGroup->mutex) );'), (37145, 1, u'+    assert( p->pCache->pGroup==pGroup );'), (37165, 1, u'+  assert( sqlite3_mutex_held(pCache->pGroup->mutex) );'), (37181, 1, u'+  assert( pCache->nPage==nPage );'), (37192, 1, u'+  assert( pcache1.isInit==0 );'), (37210, 1, u'+  assert( pcache1.isInit!=0 );'), (37242, 1, u'+  assert( (szPage & (szPage-1))==0 && szPage>=512 && szPage<=65536 );'), (37243, 1, u'+  assert( szExtra < 300 );'), (37383, 1, u'+  assert( pCache->bPurgeable || createFlag!=1 );'), (37384, 1, u'+  assert( pCache->bPurgeable || pCache->nMin==0 );'), (37385, 1, u'+  assert( pCache->bPurgeable==0 || pCache->nMin==10 );'), (37386, 1, u'+  assert( pCache->nMin==0 || pCache->bPurgeable );'), (37413, 1, u'+  assert( pCache->nPage >= pCache->nRecyclable );'), (37415, 1, u'+  assert( pGroup->mxPinned == pGroup->nMaxPage + 10 - pGroup->nMinPage );'), (37416, 1, u'+  assert( pCache->n90pct == pCache->nMax*9/10 );'), (37443, 1, u'+    assert( (pCache->szPage & (pCache->szPage-1))==0 && pCache->szPage>=512 );'), (37444, 1, u'+    assert( pCache->szExtra<512 );'), (37445, 1, u'+    assert( (pOther->szPage & (pOther->szPage-1))==0 && pOther->szPage>=512 );'), (37446, 1, u'+    assert( pOther->szExtra<512 );'), (37500, 1, u'+  assert( pPage->pCache==pCache );'), (37506, 1, u'+  assert( pPage->pLruPrev==0 && pPage->pLruNext==0 );'), (37507, 1, u'+  assert( pGroup->pLruHead!=pPage && pGroup->pLruTail!=pPage );'), (37541, 1, u'+  assert( pPage->iKey==iOld );'), (37542, 1, u'+  assert( pPage->pCache==pCache );'), (37589, 1, u'+  assert( pCache->bPurgeable || (pCache->nMax==0 && pCache->nMin==0) );'), (37592, 1, u'+  assert( pGroup->nMaxPage >= pCache->nMax );'), (37594, 1, u'+  assert( pGroup->nMinPage >= pCache->nMin );'), (37639, 1, u'+  assert( sqlite3_mutex_notheld(pcache1.grp.mutex) );'), (37640, 1, u'+  assert( sqlite3_mutex_notheld(pcache1.mutex) );'), (37821, 1, u'+  assert( N >= ROUND8(sizeof(*p)) );'), (37863, 1, u'+  assert( p!=0 );'), (37890, 1, u'+  assert( p!=0 && (p->rsFlags & ROWSET_NEXT)==0 );'), (37923, 1, u'+    assert( pA->pRight==0 || pA->v<=pA->pRight->v );'), (37924, 1, u'+    assert( pB->pRight==0 || pB->v<=pB->pRight->v );'), (37938, 1, u'+    assert( pA->pRight==0 || pA->v<=pA->pRight->v );'), (37941, 1, u'+    assert( pB==0 || pB->pRight==0 || pB->v<=pB->pRight->v );'), (37984, 1, u'+  assert( pIn!=0 );'), (37997, 1, u'+  assert( (*ppLast)->pRight==0 );'), (38049, 1, u'+  assert( pList!=0 );'), (38072, 1, u'+  assert( p!=0 && (p->rsFlags & ROWSET_NEXT)==0 );'), (38082, 1, u'+  assert( p->pForest==0 );'), (38106, 1, u'+  assert( p!=0 );'), (38136, 1, u'+  assert( pRowSet!=0 && (pRowSet->rsFlags & ROWSET_NEXT)==0 );'), (39159, 1, u'+static int assert_pager_state(Pager *p){'), (39163, 1, u'+  assert( p->eState==PAGER_OPEN'), (39176, 1, u'+  assert( p->tempFile==0 || p->eLock==EXCLUSIVE_LOCK );'), (39177, 1, u'+  assert( p->tempFile==0 || pPager->changeCountDone );'), (39182, 1, u'+  assert( p->journalMode==PAGER_JOURNALMODE_OFF || p->useJournal );'), (39183, 1, u'+  assert( p->journalMode!=PAGER_JOURNALMODE_OFF || !isOpen(p->jfd) );'), (39194, 1, u'+    assert( p->noSync );'), (39195, 1, u'+    assert( p->journalMode==PAGER_JOURNALMODE_OFF'), (39198, 1, u'+    assert( p->eState!=PAGER_ERROR && p->eState!=PAGER_OPEN );'), (39199, 1, u'+    assert( pagerUseWal(p)==0 );'), (39205, 1, u'+  assert( pPager->changeCountDone==0 || pPager->eLock>=RESERVED_LOCK );'), (39206, 1, u'+  assert( p->eLock!=PENDING_LOCK );'), (39210, 1, u'+      assert( !MEMDB );'), (39211, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (39212, 1, u'+      assert( sqlite3PcacheRefCount(pPager->pPCache)==0 || pPager->tempFile );'), (39216, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (39217, 1, u'+      assert( p->eLock!=UNKNOWN_LOCK );'), (39218, 1, u'+      assert( p->eLock>=SHARED_LOCK );'), (39222, 1, u'+      assert( p->eLock!=UNKNOWN_LOCK );'), (39223, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (39225, 1, u'+        assert( p->eLock>=RESERVED_LOCK );'), (39227, 1, u'+      assert( pPager->dbSize==pPager->dbOrigSize );'), (39228, 1, u'+      assert( pPager->dbOrigSize==pPager->dbFileSize );'), (39229, 1, u'+      assert( pPager->dbOrigSize==pPager->dbHintSize );'), (39230, 1, u'+      assert( pPager->setMaster==0 );'), (39234, 1, u'+      assert( p->eLock!=UNKNOWN_LOCK );'), (39235, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (39242, 1, u'+        assert( p->eLock>=RESERVED_LOCK );'), (39243, 1, u'+        assert( isOpen(p->jfd)'), (39248, 1, u'+      assert( pPager->dbOrigSize==pPager->dbFileSize );'), (39249, 1, u'+      assert( pPager->dbOrigSize==pPager->dbHintSize );'), (39253, 1, u'+      assert( p->eLock==EXCLUSIVE_LOCK );'), (39254, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (39255, 1, u'+      assert( !pagerUseWal(pPager) );'), (39256, 1, u'+      assert( p->eLock>=EXCLUSIVE_LOCK );'), (39257, 1, u'+      assert( isOpen(p->jfd)'), (39261, 1, u'+      assert( pPager->dbOrigSize<=pPager->dbHintSize );'), (39265, 1, u'+      assert( p->eLock==EXCLUSIVE_LOCK );'), (39266, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (39267, 1, u'+      assert( !pagerUseWal(pPager) );'), (39268, 1, u'+      assert( isOpen(p->jfd)'), (39279, 1, u'+      assert( pPager->errCode!=SQLITE_OK );'), (39280, 1, u'+      assert( sqlite3PcacheRefCount(pPager->pPCache)>0 );'), (39412, 1, u'+  assert( !pPager->exclusiveMode || pPager->eLock==eLock );'), (39413, 1, u'+  assert( eLock==NO_LOCK || eLock==SHARED_LOCK );'), (39414, 1, u'+  assert( eLock!=NO_LOCK || pagerUseWal(pPager)==0 );'), (39416, 1, u'+    assert( pPager->eLock>=eLock );'), (39439, 1, u'+  assert( eLock==SHARED_LOCK || eLock==RESERVED_LOCK || eLock==EXCLUSIVE_LOCK );'), (39469, 1, u'+  assert( !MEMDB );'), (39475, 1, u'+    assert( isOpen(pPager->fd) );'), (39480, 1, u'+    assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (39481, 1, u'+    assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (39523, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (39524, 1, u'+  assert( (pPg->flags&PGHDR_DIRTY) || pPg->pageHash==pager_pagehash(pPg) );'), (39618, 1, u'+  assert( offset%JOURNAL_HDR_SZ(pPager)==0 );'), (39619, 1, u'+  assert( offset>=c );'), (39620, 1, u'+  assert( (offset-c)<JOURNAL_HDR_SZ(pPager) );'), (39647, 1, u'+  assert( isOpen(pPager->jfd) );'), (39701, 1, u'+  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (39739, 1, u'+  assert( isOpen(pPager->fd) || pPager->noSync );'), (39788, 1, u'+    assert( pPager->journalHdr <= pPager->journalOff );'), (39823, 1, u'+  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (39944, 1, u'+  assert( pPager->setMaster==0 );'), (39945, 1, u'+  assert( !pagerUseWal(pPager) );'), (39954, 1, u'+  assert( isOpen(pPager->jfd) );'), (39955, 1, u'+  assert( pPager->journalHdr <= pPager->journalOff );'), (40058, 1, u'+      assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (40083, 1, u'+  assert( pPager->eState==PAGER_READER'), (40093, 1, u'+    assert( !isOpen(pPager->jfd) );'), (40105, 1, u'+    assert( (PAGER_JOURNALMODE_MEMORY   & 5)!=1 );'), (40106, 1, u'+    assert( (PAGER_JOURNALMODE_OFF      & 5)!=1 );'), (40107, 1, u'+    assert( (PAGER_JOURNALMODE_WAL      & 5)!=1 );'), (40108, 1, u'+    assert( (PAGER_JOURNALMODE_DELETE   & 5)!=1 );'), (40109, 1, u'+    assert( (PAGER_JOURNALMODE_TRUNCATE & 5)==1 );'), (40110, 1, u'+    assert( (PAGER_JOURNALMODE_PERSIST  & 5)==1 );'), (40131, 1, u'+    assert( pPager->errCode || pPager->eState!=PAGER_ERROR );'), (40142, 1, u'+    assert( !MEMDB );'), (40175, 1, u'+  assert( rc==SQLITE_OK || !MEMDB );'), (40176, 1, u'+  assert('), (40260, 1, u'+  assert( assert_pager_state(pPager) );'), (40261, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (40267, 1, u'+  assert( isOpen(pPager->jfd) || pPager->pInJournal==0 );'), (40269, 1, u'+    assert( !pagerUseWal(pPager) );'), (40273, 1, u'+      assert( pPager->journalMode==PAGER_JOURNALMODE_MEMORY );'), (40294, 1, u'+      assert( pPager->journalMode==PAGER_JOURNALMODE_DELETE'), (40328, 1, u'+    assert( rc2==SQLITE_OK );'), (40336, 1, u'+    assert( pPager->eLock==EXCLUSIVE_LOCK );'), (40371, 1, u'+    assert( assert_pager_state(pPager) );'), (40377, 1, u'+      assert( pPager->eState==PAGER_READER );'), (40480, 1, u'+  assert( (isMainJrnl&~1)==0 );      /* isMainJrnl is 0 or 1 */'), (40481, 1, u'+  assert( (isSavepnt&~1)==0 );       /* isSavepnt is 0 or 1 */'), (40482, 1, u'+  assert( isMainJrnl || pDone );     /* pDone always used on sub-journals */'), (40483, 1, u'+  assert( isSavepnt || pDone==0 );   /* pDone never used on non-savepoint */'), (40486, 1, u'+  assert( aData );         /* Temp storage must have already been allocated */'), (40487, 1, u'+  assert( pagerUseWal(pPager)==0 || (!isMainJrnl && isSavepnt) );'), (40495, 1, u'+  assert( pPager->eState>=PAGER_WRITER_CACHEMOD'), (40498, 1, u'+  assert( pPager->eState>=PAGER_WRITER_CACHEMOD || isMainJrnl );'), (40516, 1, u'+    assert( !isSavepnt );'), (40584, 1, u'+  assert( pPg || !MEMDB );'), (40585, 1, u'+  assert( pPager->eState!=PAGER_OPEN || pPg==0 );'), (40601, 1, u'+    assert( !pagerUseWal(pPager) );'), (40628, 1, u'+    assert( isSavepnt );'), (40629, 1, u'+    assert( pPager->doNotSpill==0 );'), (40632, 1, u'+    assert( pPager->doNotSpill==1 );'), (40669, 1, u'+      assert( !pagerUseWal(pPager) );'), (40813, 1, u'+    assert( !isOpen(pJournal) );'), (40842, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (40843, 1, u'+  assert( pPager->eState!=PAGER_READER );'), (40850, 1, u'+    assert( pPager->eLock==EXCLUSIVE_LOCK );'), (40881, 1, u'+    assert( MAX_SECTOR_SIZE>=512 );'), (40911, 1, u'+  assert( isOpen(pPager->fd) || pPager->tempFile );'), (40998, 1, u'+  assert( isOpen(pPager->jfd) );'), (41051, 1, u'+      assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) );'), (41120, 1, u'+  assert( 0 );'), (41197, 1, u'+  assert( pPager->eState>=PAGER_READER && !MEMDB );'), (41198, 1, u'+  assert( isOpen(pPager->fd) );'), (41201, 1, u'+    assert( pPager->tempFile );'), (41291, 1, u'+  assert( pagerUseWal(pPager) );'), (41369, 1, u'+  assert( pPager->pWal );'), (41370, 1, u'+  assert( pList );'), (41374, 1, u'+    assert( p->pgno < p->pDirty->pgno );'), (41378, 1, u'+  assert( pList->pDirty==0 || isCommit );'), (41393, 1, u'+    assert( pList );'), (41432, 1, u'+  assert( pagerUseWal(pPager) );'), (41433, 1, u'+  assert( pPager->eState==PAGER_OPEN || pPager->eState==PAGER_READER );'), (41470, 1, u'+  assert( pPager->eState==PAGER_OPEN );'), (41471, 1, u'+  assert( pPager->eLock>=SHARED_LOCK );'), (41482, 1, u'+    assert( isOpen(pPager->fd) || pPager->tempFile );'), (41525, 1, u'+  assert( pPager->eState==PAGER_OPEN );'), (41526, 1, u'+  assert( pPager->eLock>=SHARED_LOCK );'), (41598, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (41599, 1, u'+  assert( pPager->eState>=PAGER_WRITER_LOCKED );'), (41625, 1, u'+  assert( pagerUseWal(pPager)==0 || szJ==0 );'), (41640, 1, u'+    assert( rc!=SQLITE_DONE );'), (41655, 1, u'+    assert( rc!=SQLITE_DONE );'), (41670, 1, u'+    assert( rc!=SQLITE_DONE );'), (41672, 1, u'+  assert( rc!=SQLITE_OK || pPager->journalOff>=szJ );'), (41686, 1, u'+      assert( offset==(i64)ii*(4+pPager->pageSize) );'), (41689, 1, u'+    assert( rc!=SQLITE_DONE );'), (41787, 1, u'+  assert( level>=1 && level<=3 );'), (41848, 1, u'+  assert( rc!=SQLITE_OK || isOpen(pFile) );'), (41883, 1, u'+    assert( ((int(*)(void *))(ap[0]))==xBusyHandler );'), (41884, 1, u'+    assert( ap[1]==pBusyHandlerArg );'), (41933, 1, u'+  assert( pageSize==0 || (pageSize>=512 && pageSize<=SQLITE_MAX_PAGE_SIZE) );'), (41962, 1, u'+    assert( nReserve>=0 && nReserve<1000 );'), (41993, 1, u'+  assert( pPager->eState!=PAGER_OPEN );      /* Called only by OP_MaxPgcnt */'), (41994, 1, u'+  assert( pPager->mxPgno>=pPager->dbSize );  /* OP_MaxPgcnt enforces this */'), (42039, 1, u'+  assert( isOpen(pPager->fd) || pPager->tempFile );'), (42045, 1, u'+  assert( !pagerUseWal(pPager) );'), (42065, 1, u'+  assert( pPager->eState>=PAGER_READER );'), (42066, 1, u'+  assert( pPager->eState!=PAGER_WRITER_FINISHED );'), (42093, 1, u'+  assert( (pPager->eLock>=locktype)'), (42127, 1, u'+static void assertTruncateConstraintCb(PgHdr *pPg){'), (42128, 1, u'+  assert( pPg->flags&PGHDR_DIRTY );'), (42129, 1, u'+  assert( !subjRequiresPage(pPg) || pPg->pgno<=pPg->pPager->dbSize );'), (42131, 1, u'+static void assertTruncateConstraint(Pager *pPager){'), (42132, 1, u'+  sqlite3PcacheIterateDirty(pPager->pPCache, assertTruncateConstraintCb);'), (42135, 1, u'+# define assertTruncateConstraint(pPager)'), (42150, 1, u'+  assert( pPager->dbSize>=nPage );'), (42151, 1, u'+  assert( pPager->eState>=PAGER_WRITER_CACHEMOD );'), (42226, 1, u'+  assert( p->pExtra==(void *)&p[1] );'), (42227, 1, u'+  assert( p->pPage==0 );'), (42228, 1, u'+  assert( p->flags==PGHDR_MMAP );'), (42229, 1, u'+  assert( p->pPager==pPager );'), (42230, 1, u'+  assert( p->nRef==1 );'), (42249, 1, u'+  assert( pPager->fd->pMethods->iVersion>=3 );'), (42283, 1, u'+  assert( assert_pager_state(pPager) );'), (42326, 1, u'+  assert( !pPager->aSavepoint && !pPager->pInJournal );'), (42327, 1, u'+  assert( !isOpen(pPager->jfd) && !isOpen(pPager->sjfd) );'), (42387, 1, u'+  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (42390, 1, u'+  assert( assert_pager_state(pPager) );'), (42391, 1, u'+  assert( !pagerUseWal(pPager) );'), (42397, 1, u'+    assert( !pPager->tempFile );'), (42400, 1, u'+      assert( isOpen(pPager->jfd) );'), (42491, 1, u'+  assert( assert_pager_state(pPager) );'), (42531, 1, u'+  assert( !pagerUseWal(pPager) );'), (42532, 1, u'+  assert( pPager->eState==PAGER_WRITER_DBMOD );'), (42533, 1, u'+  assert( pPager->eLock==EXCLUSIVE_LOCK );'), (42540, 1, u'+    assert( pPager->tempFile && rc==SQLITE_OK );'), (42547, 1, u'+  assert( rc!=SQLITE_OK || isOpen(pPager->fd) );'), (42571, 1, u'+      assert( (pList->flags&PGHDR_NEED_SYNC)==0 );'), (42648, 1, u'+    assert( pPager->useJournal );'), (42649, 1, u'+    assert( isOpen(pPager->jfd) || pagerUseWal(pPager) );'), (42650, 1, u'+    assert( isOpen(pPager->sjfd) || pPager->nSubRec==0 );'), (42651, 1, u'+    assert( pagerUseWal(pPager)'), (42674, 1, u'+    assert( pPager->nSavepoint>0 );'), (42703, 1, u'+  assert( pPg->pPager==pPager );'), (42704, 1, u'+  assert( pPg->flags&PGHDR_DIRTY );'), (42780, 1, u'+      assert( (pPg->flags&PGHDR_NEED_SYNC)==0 );'), (42898, 1, u'+    assert( nUri>=0 );'), (42937, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(SQLITE_INT_TO_PTR(journalFileSize)) );'), (42948, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );'), (42952, 1, u'+    assert( nPathname>0 );'), (42975, 1, u'+    assert( !memDb );'), (42988, 1, u'+      assert(SQLITE_DEFAULT_PAGE_SIZE<=SQLITE_MAX_DEFAULT_PAGE_SIZE);'), (43000, 1, u'+        assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (43001, 1, u'+        assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (43002, 1, u'+        assert(SQLITE_MAX_DEFAULT_PAGE_SIZE<=65536);'), (43030, 1, u'+    assert( pPager->memDb==0 );'), (43039, 1, u'+    assert( !pPager->pTmpSpace );'), (43046, 1, u'+  assert( nExtra<1000 );'), (43064, 1, u'+  assert( pPager->state == (tempFile ? PAGER_EXCLUSIVE : PAGER_UNLOCK) );'), (43068, 1, u'+  assert( tempFile==PAGER_LOCKINGMODE_NORMAL'), (43070, 1, u'+  assert( PAGER_LOCKINGMODE_EXCLUSIVE==1 );'), (43075, 1, u'+  assert( useJournal || pPager->tempFile );'), (43078, 1, u'+    assert( pPager->fullSync==0 );'), (43079, 1, u'+    assert( pPager->syncFlags==0 );'), (43080, 1, u'+    assert( pPager->walSyncFlags==0 );'), (43081, 1, u'+    assert( pPager->ckptSyncFlags==0 );'), (43093, 1, u'+  assert( isOpen(pPager->fd) || tempFile );'), (43149, 1, u'+  assert( pPager->useJournal );'), (43150, 1, u'+  assert( isOpen(pPager->fd) );'), (43151, 1, u'+  assert( pPager->eState==PAGER_OPEN );'), (43153, 1, u'+  assert( jrnlOpen==0 || ( sqlite3OsDeviceCharacteristics(pPager->jfd) &'), (43268, 1, u'+  assert( sqlite3PcacheRefCount(pPager->pPCache)==0 );'), (43269, 1, u'+  assert( assert_pager_state(pPager) );'), (43270, 1, u'+  assert( pPager->eState==PAGER_OPEN || pPager->eState==PAGER_READER );'), (43276, 1, u'+    assert( !MEMDB );'), (43280, 1, u'+      assert( pPager->eLock==NO_LOCK || pPager->eLock==UNKNOWN_LOCK );'), (43340, 1, u'+          assert( !pPager->tempFile );'), (43342, 1, u'+          assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (43359, 1, u'+        assert( rc==SQLITE_OK );'), (43390, 1, u'+      assert( pPager->eState==PAGER_OPEN );'), (43391, 1, u'+      assert( (pPager->eLock==SHARED_LOCK)'), (43453, 1, u'+    assert( pPager->pWal==0 || rc==SQLITE_OK );'), (43458, 1, u'+    assert( rc==SQLITE_OK );'), (43468, 1, u'+    assert( !MEMDB );'), (43470, 1, u'+    assert( pPager->eState==PAGER_OPEN );'), (43563, 1, u'+  assert( pPager->eState>=PAGER_READER );'), (43564, 1, u'+  assert( assert_pager_state(pPager) );'), (43565, 1, u'+  assert( noContent==0 || bMmapOk==0 );'), (43599, 1, u'+          assert( rc==SQLITE_OK );'), (43619, 1, u'+  assert( (*ppPage)->pgno==pgno );'), (43620, 1, u'+  assert( (*ppPage)->pPager==pPager || (*ppPage)->pPager==0 );'), (43625, 1, u'+    assert( pgno<=PAGER_MAX_PGNO && pgno!=PAGER_MJ_PGNO(pPager) );'), (43671, 1, u'+      assert( pPg->pPager==pPager );'), (43684, 1, u'+  assert( rc!=SQLITE_OK );'), (43707, 1, u'+  assert( pPager!=0 );'), (43708, 1, u'+  assert( pgno!=0 );'), (43709, 1, u'+  assert( pPager->pPCache!=0 );'), (43710, 1, u'+  assert( pPager->eState>=PAGER_READER && pPager->eState!=PAGER_ERROR );'), (43761, 1, u'+  assert( pPager->eState==PAGER_WRITER_LOCKED );'), (43762, 1, u'+  assert( assert_pager_state(pPager) );'), (43763, 1, u'+  assert( pPager->pInJournal==0 );'), (43795, 1, u'+      assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (43816, 1, u'+    assert( pPager->eState==PAGER_WRITER_LOCKED );'), (43844, 1, u'+  assert( pPager->eState>=PAGER_READER && pPager->eState<PAGER_ERROR );'), (43848, 1, u'+    assert( pPager->pInJournal==0 );'), (43897, 1, u'+    assert( rc==SQLITE_OK || pPager->eState==PAGER_READER );'), (43898, 1, u'+    assert( rc!=SQLITE_OK || pPager->eState==PAGER_WRITER_LOCKED );'), (43899, 1, u'+    assert( assert_pager_state(pPager) );'), (43922, 1, u'+  assert( pPager->eState==PAGER_WRITER_LOCKED'), (43926, 1, u'+  assert( assert_pager_state(pPager) );'), (43951, 1, u'+  assert( pPager->eState>=PAGER_WRITER_CACHEMOD );'), (43952, 1, u'+  assert( assert_pager_state(pPager) );'), (43959, 1, u'+    assert( !pagerUseWal(pPager) );'), (43967, 1, u'+      assert( pagerUseWal(pPager)==0 );'), (43976, 1, u'+        assert( pPg->pgno!=PAGER_MJ_PGNO(pPager) );'), (43978, 1, u'+        assert( pPager->journalHdr<=pPager->journalOff );'), (44007, 1, u'+        assert( pPager->pInJournal!=0 );'), (44010, 1, u'+        assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (44013, 1, u'+          assert( rc==SQLITE_NOMEM );'), (44065, 1, u'+  assert( (pPg->flags & PGHDR_MMAP)==0 );'), (44066, 1, u'+  assert( pPager->eState>=PAGER_WRITER_LOCKED );'), (44067, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (44068, 1, u'+  assert( assert_pager_state(pPager) );'), (44081, 1, u'+    assert( !MEMDB );'), (44082, 1, u'+    assert( pPager->doNotSyncSpill==0 );'), (44099, 1, u'+    assert(nPage>0);'), (44100, 1, u'+    assert(pg1<=pPg->pgno);'), (44101, 1, u'+    assert((pg1+nPage)>pPg->pgno);'), (44132, 1, u'+      assert( !MEMDB );'), (44142, 1, u'+    assert( pPager->doNotSyncSpill==1 );'), (44210, 1, u'+  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (44213, 1, u'+  assert( assert_pager_state(pPager) );'), (44227, 1, u'+  assert( isDirectMode==0 );'), (44236, 1, u'+    assert( !pPager->tempFile && isOpen(pPager->fd) );'), (44240, 1, u'+    assert( pPgHdr==0 || rc==SQLITE_OK );'), (44258, 1, u'+        assert( pPager->dbFileSize>0 );'), (44293, 1, u'+    assert( !MEMDB );'), (44296, 1, u'+    assert( !MEMDB );'), (44318, 1, u'+  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (44322, 1, u'+  assert( assert_pager_state(pPager) );'), (44362, 1, u'+  assert( pPager->eState==PAGER_WRITER_LOCKED'), (44367, 1, u'+  assert( assert_pager_state(pPager) );'), (44395, 1, u'+      assert( rc==SQLITE_OK );'), (44429, 1, u'+      assert( isOpen(pPager->jfd)'), (44479, 1, u'+        assert( rc!=SQLITE_IOERR_BLOCKED );'), (44492, 1, u'+        assert( pPager->eState==PAGER_WRITER_DBMOD );'), (44536, 1, u'+  assert( pPager->eState==PAGER_WRITER_LOCKED'), (44540, 1, u'+  assert( assert_pager_state(pPager) );'), (44557, 1, u'+    assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) || !pPager->journalOff );'), (44601, 1, u'+  assert( assert_pager_state(pPager) );'), (44626, 1, u'+  assert( pPager->eState==PAGER_READER || rc!=SQLITE_OK );'), (44627, 1, u'+  assert( rc==SQLITE_OK || rc==SQLITE_FULL || rc==SQLITE_CORRUPT'), (44700, 1, u'+  assert( eStat==SQLITE_DBSTATUS_CACHE_HIT'), (44705, 1, u'+  assert( SQLITE_DBSTATUS_CACHE_HIT+1==SQLITE_DBSTATUS_CACHE_MISS );'), (44706, 1, u'+  assert( SQLITE_DBSTATUS_CACHE_HIT+2==SQLITE_DBSTATUS_CACHE_WRITE );'), (44707, 1, u'+  assert( PAGER_STAT_HIT==0 && PAGER_STAT_MISS==1 && PAGER_STAT_WRITE==2 );'), (44736, 1, u'+  assert( pPager->eState>=PAGER_WRITER_LOCKED );'), (44737, 1, u'+  assert( assert_pager_state(pPager) );'), (44774, 1, u'+    assert( pPager->nSavepoint==nSavepoint );'), (44775, 1, u'+    assertTruncateConstraint(pPager);'), (44814, 1, u'+  assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (44815, 1, u'+  assert( iSavepoint>=0 || op==SAVEPOINT_ROLLBACK );'), (44838, 1, u'+          assert( rc==SQLITE_OK );'), (44851, 1, u'+      assert(rc!=SQLITE_DONE);'), (44958, 1, u'+  assert( pPg->nRef>0 );'), (44959, 1, u'+  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (44962, 1, u'+  assert( assert_pager_state(pPager) );'), (45010, 1, u'+    assert( pPager->journalMode==PAGER_JOURNALMODE_OFF ||'), (45012, 1, u'+    assert( pPg->flags&PGHDR_DIRTY );'), (45022, 1, u'+  assert( !pPgOld || pPgOld->nRef==1 );'), (45043, 1, u'+    assert( pPgOld );'), (45067, 1, u'+        assert( pPager->pTmpSpace!=0 );'), (45085, 1, u'+  assert( pPg->nRef>0 || pPg->pPager->memDb );'), (45108, 1, u'+  assert( eMode==PAGER_LOCKINGMODE_QUERY'), (45111, 1, u'+  assert( PAGER_LOCKINGMODE_QUERY<0 );'), (45112, 1, u'+  assert( PAGER_LOCKINGMODE_NORMAL>=0 && PAGER_LOCKINGMODE_EXCLUSIVE>=0 );'), (45113, 1, u'+  assert( pPager->exclusiveMode || 0==sqlite3WalHeapMemory(pPager->pWal) );'), (45151, 1, u'+  assert(      eMode==PAGER_JOURNALMODE_DELETE'), (45162, 1, u'+  assert( pPager->tempFile==0 || eMode!=PAGER_JOURNALMODE_WAL );'), (45168, 1, u'+    assert( eOld==PAGER_JOURNALMODE_MEMORY || eOld==PAGER_JOURNALMODE_OFF );'), (45177, 1, u'+    assert( pPager->eState!=PAGER_ERROR );'), (45184, 1, u'+    assert( (PAGER_JOURNALMODE_TRUNCATE & 5)==1 );'), (45185, 1, u'+    assert( (PAGER_JOURNALMODE_PERSIST & 5)==1 );'), (45186, 1, u'+    assert( (PAGER_JOURNALMODE_DELETE & 5)==0 );'), (45187, 1, u'+    assert( (PAGER_JOURNALMODE_MEMORY & 5)==4 );'), (45188, 1, u'+    assert( (PAGER_JOURNALMODE_OFF & 5)==0 );'), (45189, 1, u'+    assert( (PAGER_JOURNALMODE_WAL & 5)==5 );'), (45191, 1, u'+    assert( isOpen(pPager->fd) || pPager->exclusiveMode );'), (45208, 1, u'+        assert( state==PAGER_OPEN || state==PAGER_READER );'), (45213, 1, u'+          assert( rc==SQLITE_OK );'), (45224, 1, u'+        assert( state==pPager->eState );'), (45246, 1, u'+  assert( assert_pager_state(pPager) );'), (45325, 1, u'+  assert( pPager->eLock==SHARED_LOCK || pPager->eLock==EXCLUSIVE_LOCK );'), (45345, 1, u'+  assert( pPager->pWal==0 && pPager->tempFile==0 );'), (45346, 1, u'+  assert( pPager->eLock==SHARED_LOCK || pPager->eLock==EXCLUSIVE_LOCK );'), (45393, 1, u'+  assert( assert_pager_state(pPager) );'), (45394, 1, u'+  assert( pPager->eState==PAGER_OPEN   || pbOpen );'), (45395, 1, u'+  assert( pPager->eState==PAGER_READER || !pbOpen );'), (45396, 1, u'+  assert( pbOpen==0 || *pbOpen==0 );'), (45397, 1, u'+  assert( pbOpen!=0 || (!pPager->tempFile && !pPager->pWal) );'), (45429, 1, u'+  assert( pPager->journalMode==PAGER_JOURNALMODE_WAL );'), (45474, 1, u'+  assert( pPager->eState==PAGER_READER );'), (46049, 1, u'+  assert( iPage==0 || *ppPage || rc!=SQLITE_OK );'), (46057, 1, u'+  assert( pWal->nWiData>0 && pWal->apWiData[0] );'), (46065, 1, u'+  assert( pWal->nWiData>0 && pWal->apWiData[0] );'), (46108, 1, u'+  assert( nByte>=8 );'), (46109, 1, u'+  assert( (nByte&0x00000007)==0 );'), (46143, 1, u'+  assert( pWal->writeLock );'), (46174, 1, u'+  assert( WAL_FRAME_HDRSIZE==24 );'), (46202, 1, u'+  assert( WAL_FRAME_HDRSIZE==24 );'), (46311, 1, u'+  assert( iPage>0 );'), (46312, 1, u'+  assert( (HASHTABLE_NSLOT & (HASHTABLE_NSLOT-1))==0 );'), (46344, 1, u'+  assert( rc==SQLITE_OK || iHash>0 );'), (46373, 1, u'+  assert( (iHash==0 || iFrame>HASHTABLE_NPAGE_ONE)'), (46413, 1, u'+  assert( pWal->writeLock );'), (46424, 1, u'+  assert( pWal->nWiData>walFramePage(pWal->hdr.mxFrame) );'), (46425, 1, u'+  assert( pWal->apWiData[walFramePage(pWal->hdr.mxFrame)] );'), (46432, 1, u'+  assert( iLimit>0 );'), (46445, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (46456, 1, u'+      assert( aHash[iKey]==i );'), (46484, 1, u'+    assert( idx <= HASHTABLE_NSLOT/2 + 1 );'), (46502, 1, u'+      assert( !aPgno[idx] );'), (46513, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (46521, 1, u'+      assert( nEntry==idx );'), (46535, 1, u'+        assert( aHash[iKey]==i );'), (46569, 1, u'+  assert( pWal->ckptLock==1 || pWal->ckptLock==0 );'), (46570, 1, u'+  assert( WAL_ALL_BUT_WRITE==WAL_WRITE_LOCK+1 );'), (46571, 1, u'+  assert( WAL_CKPT_LOCK==WAL_ALL_BUT_WRITE );'), (46572, 1, u'+  assert( pWal->writeLock );'), (46761, 1, u'+  assert( zWalName && zWalName[0] );'), (46762, 1, u'+  assert( pDbFd );'), (46769, 1, u'+  assert( WIN_SHM_BASE==WALINDEX_LOCK_OFFSET );'), (46772, 1, u'+  assert( UNIX_SHM_BASE==WALINDEX_LOCK_OFFSET );'), (46843, 1, u'+  assert( iMin<0xffffffff );'), (46900, 1, u'+  assert( nLeft>0 && nRight>0 );'), (46917, 1, u'+    assert( iLeft>=nLeft || aContent[aLeft[iLeft]]>dbpage );'), (46918, 1, u'+    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );'), (46962, 1, u'+  assert( nList<=HASHTABLE_NPAGE && nList>0 );'), (46963, 1, u'+  assert( HASHTABLE_NPAGE==(1<<(ArraySize(aSub)-1)) );'), (46970, 1, u'+      assert( p->aList && p->nList<=(1<<iSub) );'), (46971, 1, u'+      assert( p->aList==&aList[iList&~((2<<iSub)-1)] );'), (46981, 1, u'+      assert( p->nList<=(1<<iSub) );'), (46982, 1, u'+      assert( p->aList==&aList[nList&~((2<<iSub)-1)] );'), (46986, 1, u'+  assert( aMerge==aList );'), (46993, 1, u'+      assert( aContent[aList[i]] > aContent[aList[i-1]] );'), (47030, 1, u'+  assert( pWal->ckptLock && pWal->hdr.mxFrame>0 );'), (47183, 1, u'+  assert( pIter );'), (47197, 1, u'+      assert( y<=pWal->hdr.mxFrame );'), (47237, 1, u'+      assert( walFramePgno(pWal, iFrame)==iDbpage );'), (47280, 1, u'+    assert( pWal->writeLock );'), (47284, 1, u'+      assert( mxSafeFrame==pWal->hdr.mxFrame );'), (47403, 1, u'+  assert( pWal->nWiData>0 && pWal->apWiData[0] );'), (47463, 1, u'+  assert( pChanged );'), (47468, 1, u'+  assert( page0 || pWal->writeLock==0 );'), (47480, 1, u'+  assert( badHdr==0 || pWal->writeLock==0 );'), (47579, 1, u'+  assert( pWal->readLock<0 );     /* Not currently locked */'), (47682, 1, u'+      assert( thisMark!=READMARK_NOT_USED );'), (47705, 1, u'+      assert( rc==SQLITE_BUSY || (pWal->readOnly & WAL_SHM_RDONLY)!=0 );'), (47740, 1, u'+      assert( mxReadMark<=pWal->hdr.mxFrame );'), (47805, 1, u'+  assert( pWal->readLock>=0 || pWal->lockError );'), (47868, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (47881, 1, u'+    assert( iRead==iRead2 );'), (47940, 1, u'+  assert( pWal->readLock>=0 );'), (48019, 1, u'+      assert( walFramePgno(pWal, iFrame)!=1 );'), (48024, 1, u'+  assert( rc==SQLITE_OK );'), (48035, 1, u'+  assert( pWal->writeLock );'), (48051, 1, u'+  assert( pWal->writeLock );'), (48052, 1, u'+  assert( aWalData[3]!=pWal->nCkpt || aWalData[0]<=pWal->hdr.mxFrame );'), (48092, 1, u'+    assert( pInfo->nBackfill==pWal->hdr.mxFrame );'), (48119, 1, u'+        assert( pInfo->aReadMark[0]==0 );'), (48132, 1, u'+    assert( (rc&0xff)!=SQLITE_BUSY ); /* BUSY not possible when useWal==1 */'), (48175, 1, u'+    assert( p->syncFlags & (SQLITE_SYNC_NORMAL|SQLITE_SYNC_FULL) );'), (48229, 1, u'+  assert( pList );'), (48230, 1, u'+  assert( pWal->writeLock );'), (48234, 1, u'+  assert( (isCommit!=0)==(nTruncate!=0) );'), (48293, 1, u'+  assert( (int)pWal->szPage==szPage );'), (48308, 1, u'+    assert( iOffset==walFrameOffset(iFrame, szPage) );'), (48420, 1, u'+  assert( pWal->ckptLock==0 );'), (48421, 1, u'+  assert( pWal->writeLock==0 );'), (48534, 1, u'+  assert( pWal->writeLock==0 );'), (48535, 1, u'+  assert( pWal->exclusiveMode!=WAL_HEAPMEMORY_MODE || op==-1 );'), (48543, 1, u'+  assert( pWal->readLock>=0 || pWal->lockError );'), (48544, 1, u'+  assert( pWal->readLock>=0 || (op<=0 && pWal->exclusiveMode==0) );'), (48558, 1, u'+    assert( pWal->exclusiveMode==0 );'), (48559, 1, u'+    assert( pWal->readLock>=0 );'), (48585, 1, u'+  assert( pWal==0 || pWal->readLock>=0 );'), (49226, 1, u'+  assert( p->pBt->inTransaction!=TRANS_NONE || p->pBt->nTransaction==0 ); \\'), (49227, 1, u'+  assert( p->pBt->inTransaction>=p->inTrans );'), (49285, 1, u'+  assert( p->locked==0 );'), (49286, 1, u'+  assert( sqlite3_mutex_notheld(p->pBt->mutex) );'), (49287, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (49300, 1, u'+  assert( p->locked==1 );'), (49301, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (49302, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (49303, 1, u'+  assert( p->db==pBt->db );'), (49332, 1, u'+  assert( p->pNext==0 || p->pNext->pBt>p->pBt );'), (49333, 1, u'+  assert( p->pPrev==0 || p->pPrev->pBt<p->pBt );'), (49334, 1, u'+  assert( p->pNext==0 || p->pNext->db==p->db );'), (49335, 1, u'+  assert( p->pPrev==0 || p->pPrev->db==p->db );'), (49336, 1, u'+  assert( p->sharable || (p->pNext==0 && p->pPrev==0) );'), (49339, 1, u'+  assert( !p->locked || p->wantToLock>0 );'), (49340, 1, u'+  assert( p->sharable || p->wantToLock==0 );'), (49343, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (49347, 1, u'+  assert( (p->locked==0 && p->sharable) || p->pBt->db==p->db );'), (49369, 1, u'+    assert( pLater->sharable );'), (49370, 1, u'+    assert( pLater->pNext==0 || pLater->pNext->pBt>pLater->pBt );'), (49371, 1, u'+    assert( !pLater->locked || pLater->wantToLock>0 );'), (49389, 1, u'+    assert( p->wantToLock>0 );'), (49405, 1, u'+  assert( p->sharable==0 || p->locked==0 || p->wantToLock>0 );'), (49406, 1, u'+  assert( p->sharable==0 || p->locked==0 || p->db==p->pBt->db );'), (49407, 1, u'+  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->pBt->mutex) );'), (49408, 1, u'+  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->db->mutex) );'), (49447, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (49456, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (49509, 1, u'+  assert( db!=0 );'), (49511, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (49515, 1, u'+  assert( p!=0 );'), (49791, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (49792, 1, u'+  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (49793, 1, u'+  assert( p->db!=0 );'), (49794, 1, u'+  assert( !(p->db->flags&SQLITE_ReadUncommitted)||eLock==WRITE_LOCK||iTab==1 );'), (49800, 1, u'+  assert( eLock==READ_LOCK || (p==pBt->pWriter && p->inTrans==TRANS_WRITE) );'), (49801, 1, u'+  assert( eLock==READ_LOCK || pBt->inTransaction==TRANS_WRITE );'), (49826, 1, u'+    assert( pIter->eLock==READ_LOCK || pIter->eLock==WRITE_LOCK );'), (49827, 1, u'+    assert( eLock==READ_LOCK || pIter->pBtree==p || pIter->eLock==READ_LOCK);'), (49831, 1, u'+        assert( p==pBt->pWriter );'), (49864, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (49865, 1, u'+  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (49866, 1, u'+  assert( p->db!=0 );'), (49872, 1, u'+  assert( 0==(p->db->flags&SQLITE_ReadUncommitted) || eLock==WRITE_LOCK );'), (49876, 1, u'+  assert( p->sharable );'), (49877, 1, u'+  assert( SQLITE_OK==querySharedCacheTableLock(p, iTable, eLock) );'), (49905, 1, u'+  assert( WRITE_LOCK>READ_LOCK );'), (49927, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (49928, 1, u'+  assert( p->sharable || 0==*ppIter );'), (49929, 1, u'+  assert( p->inTrans>0 );'), (49933, 1, u'+    assert( (pBt->btsFlags & BTS_EXCLUSIVE)==0 || pBt->pWriter==pLock->pBtree );'), (49934, 1, u'+    assert( pLock->pBtree->inTrans>=pLock->eLock );'), (49937, 1, u'+      assert( pLock->iTable!=1 || pLock==&p->lock );'), (49946, 1, u'+  assert( (pBt->btsFlags & BTS_PENDING)==0 || pBt->pWriter );'), (49974, 1, u'+      assert( pLock->eLock==READ_LOCK || pLock->pBtree==p );'), (50001, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (50012, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (50038, 1, u'+  assert( sqlite3BtreeHoldsMutex(pBtree) );'), (50091, 1, u'+    assert( pgno<=pBt->nPage );'), (50147, 1, u'+  assert( CURSOR_VALID==pCur->eState );'), (50148, 1, u'+  assert( 0==pCur->pKey );'), (50149, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (50152, 1, u'+  assert( rc==SQLITE_OK );  /* KeySize() cannot fail */'), (50173, 1, u'+  assert( !pCur->apPage[0]->intKey || !pCur->pKey );'), (50191, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (50192, 1, u'+  assert( pExcept==0 || pExcept->pBt==pBt );'), (50213, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (50237, 1, u'+    assert( nKey==(i64)(int)nKey );'), (50262, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (50263, 1, u'+  assert( pCur->eState>=CURSOR_REQUIRESEEK );'), (50272, 1, u'+    assert( pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_INVALID );'), (50319, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (50349, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (50351, 1, u'+  assert( 0==PTRMAP_ISPAGE(pBt, PENDING_BYTE_PAGE(pBt)) );'), (50353, 1, u'+  assert( pBt->autoVacuum );'), (50369, 1, u'+  assert( offset <= (int)pBt->usableSize-5 );'), (50399, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (50413, 1, u'+  assert( offset <= (int)pBt->usableSize-5 );'), (50414, 1, u'+  assert( pEType!=0 );'), (50447, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50478, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50481, 1, u'+  assert( pPage->leaf==0 || pPage->leaf==1 );'), (50483, 1, u'+  assert( n==4-4*pPage->leaf );'), (50601, 1, u'+  assert( nSize==debuginfo.nSize );'), (50622, 1, u'+  assert( pCell!=0 );'), (50624, 1, u'+  assert( (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload );'), (50654, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50655, 1, u'+  assert( pPage->pBt!=0 );'), (50656, 1, u'+  assert( pPage->pBt->usableSize <= SQLITE_MAX_PAGE_SIZE );'), (50657, 1, u'+  assert( pPage->nOverflow==0 );'), (50658, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50664, 1, u'+  assert( nCell==get2byte(&data[hdr+3]) );'), (50685, 1, u'+    assert( pc>=iCellFirst && pc<=iCellLast );'), (50697, 1, u'+    assert( cbrk+size<=usableSize && cbrk>=iCellFirst );'), (50703, 1, u'+  assert( cbrk>=iCellFirst );'), (50709, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50738, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50739, 1, u'+  assert( pPage->pBt );'), (50740, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50741, 1, u'+  assert( nByte>=0 );  /* Minimum cell size is 4 */'), (50742, 1, u'+  assert( pPage->nFree>=nByte );'), (50743, 1, u'+  assert( pPage->nOverflow==0 );'), (50745, 1, u'+  assert( nByte < usableSize-8 );'), (50748, 1, u'+  assert( pPage->cellOffset == hdr + 12 - 4*pPage->leaf );'), (50803, 1, u'+    assert( gap+nByte<=top );'), (50815, 1, u'+  assert( top+nByte <= (int)pPage->pBt->usableSize );'), (50833, 1, u'+  assert( pPage->pBt!=0 );'), (50834, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50835, 1, u'+  assert( start>=pPage->hdrOffset+6+pPage->childPtrSize );'), (50836, 1, u'+  assert( (start + size) <= (int)pPage->pBt->usableSize );'), (50837, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50838, 1, u'+  assert( size>=0 );   /* Minimum cell size is 4 */'), (50858, 1, u'+  assert( start<=iLast );'), (50868, 1, u'+  assert( pbegin>addr || pbegin==0 );'), (50878, 1, u'+    assert( pbegin>addr );'), (50879, 1, u'+    assert( pbegin <= (int)pPage->pBt->usableSize-4 );'), (50905, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (50924, 1, u'+  assert( pPage->hdrOffset==(pPage->pgno==1 ? 100 : 0) );'), (50925, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50926, 1, u'+  pPage->leaf = (u8)(flagByte>>3);  assert( PTF_LEAF == 1<<3 );'), (50958, 1, u'+  assert( pPage->pBt!=0 );'), (50959, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (50960, 1, u'+  assert( pPage->pgno==sqlite3PagerPagenumber(pPage->pDbPage) );'), (50961, 1, u'+  assert( pPage == sqlite3PagerGetExtra(pPage->pDbPage) );'), (50962, 1, u'+  assert( pPage->aData == sqlite3PagerGetData(pPage->pDbPage) );'), (50981, 1, u'+    assert( pBt->pageSize>=512 && pBt->pageSize<=65536 );'), (51074, 1, u'+  assert( sqlite3PagerPagenumber(pPage->pDbPage)==pPage->pgno );'), (51075, 1, u'+  assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (51076, 1, u'+  assert( sqlite3PagerGetData(pPage->pDbPage) == data );'), (51077, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (51078, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51094, 1, u'+  assert( pBt->pageSize>=512 && pBt->pageSize<=65536 );'), (51138, 1, u'+  assert( noContent==0 || bReadonly==0 );'), (51139, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51153, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51169, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (51170, 1, u'+  assert( ((p->pBt->nPage)&0x8000000)==0 );'), (51189, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51204, 1, u'+  assert( pgno!=0 || rc==SQLITE_CORRUPT );'), (51214, 1, u'+    assert( pPage->aData );'), (51215, 1, u'+    assert( pPage->pBt );'), (51216, 1, u'+    assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (51217, 1, u'+    assert( sqlite3PagerGetData(pPage->pDbPage)==pPage->aData );'), (51218, 1, u'+    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (51234, 1, u'+  assert( sqlite3PagerPageRefcount(pData)>0 );'), (51236, 1, u'+    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (51255, 1, u'+  assert( pBt->db );'), (51256, 1, u'+  assert( sqlite3_mutex_held(pBt->db->mutex) );'), (51310, 1, u'+  assert( db!=0 );'), (51311, 1, u'+  assert( pVfs!=0 );'), (51312, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (51313, 1, u'+  assert( (flags&0xff)==flags );   /* flags fit in 8 bits */'), (51316, 1, u'+  assert( (flags & BTREE_UNORDERED)==0 || (flags & BTREE_SINGLE)!=0 );'), (51319, 1, u'+  assert( (flags & BTREE_SINGLE)==0 || isTempDb );'), (51371, 1, u'+        assert( pBt->nRef>0 );'), (51411, 1, u'+    assert( sizeof(i64)==8 || sizeof(i64)==4 );'), (51412, 1, u'+    assert( sizeof(u64)==8 || sizeof(u64)==4 );'), (51413, 1, u'+    assert( sizeof(u32)==4 );'), (51414, 1, u'+    assert( sizeof(u16)==2 );'), (51415, 1, u'+    assert( sizeof(Pgno)==4 );'), (51470, 1, u'+    assert( (pBt->pageSize & 7)==0 );  /* 8-byte alignment of pageSize */'), (51546, 1, u'+    assert( sqlite3_mutex_held(mutexOpen) );'), (51564, 1, u'+  assert( sqlite3_mutex_notheld(pBt->mutex) );'), (51618, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (51640, 1, u'+  assert( p->wantToLock==0 && p->locked==0 );'), (51647, 1, u'+    assert( !pBt->pCursor );'), (51658, 1, u'+  assert( p->wantToLock==0 );'), (51659, 1, u'+  assert( p->locked==0 );'), (51685, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (51698, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (51721, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (51722, 1, u'+  assert( level>=1 && level<=3 );'), (51737, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (51739, 1, u'+  assert( pBt && pBt->pPager );'), (51768, 1, u'+  assert( nReserve>=-1 && nReserve<=255 );'), (51777, 1, u'+  assert( nReserve>=0 && nReserve<=255 );'), (51780, 1, u'+    assert( (pageSize & 7)==0 );'), (51781, 1, u'+    assert( !pBt->pPage1 && !pBt->pCursor );'), (51812, 1, u'+  assert( sqlite3_mutex_held(p->pBt->mutex) );'), (51926, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51927, 1, u'+  assert( pBt->pPage1==0 );'), (52001, 1, u'+    assert( (pageSize & 7)==0 );'), (52055, 1, u'+  assert( pBt->maxLeaf + 23 <= MX_CELL_SIZE(pBt) );'), (52098, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (52099, 1, u'+  assert( countValidCursors(pBt,0)==0 || pBt->inTransaction>TRANS_NONE );'), (52101, 1, u'+    assert( pBt->pPage1->aData );'), (52102, 1, u'+    assert( sqlite3PagerRefcount(pBt->pPager)==1 );'), (52103, 1, u'+    assert( pBt->pPage1->aData );'), (52119, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (52124, 1, u'+  assert( pP1!=0 );'), (52129, 1, u'+  assert( sizeof(zMagicHeader)==16 );'), (52134, 1, u'+  assert( pBt->usableSize<=pBt->pageSize && pBt->usableSize+255>=pBt->pageSize);'), (52143, 1, u'+  assert( pBt->autoVacuum==1 || pBt->autoVacuum==0 );'), (52144, 1, u'+  assert( pBt->incrVacuum==1 || pBt->incrVacuum==0 );'), (52217, 1, u'+  assert( IfNotOmitAV(pBt->bDoTruncate)==0 );'), (52290, 1, u'+        assert( p->lock.pBtree==p && p->lock.iTable==1 );'), (52304, 1, u'+      assert( !pBt->pWriter );'), (52355, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (52398, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (52399, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (52470, 1, u'+  assert( eType==PTRMAP_OVERFLOW2 || eType==PTRMAP_OVERFLOW1 ||'), (52472, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (52473, 1, u'+  assert( pDbPage->pBt==pBt );'), (52554, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (52555, 1, u'+  assert( iLastPg>nFin );'), (52587, 1, u'+        assert( iFreePg==iLastPg );'), (52621, 1, u'+      assert( iFreePg<iLastPg );'), (52677, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE && p->inTrans==TRANS_WRITE );'), (52719, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (52721, 1, u'+  assert(pBt->autoVacuum);'), (52759, 1, u'+  assert( nRef>=sqlite3PagerRefcount(pPager) );'), (52822, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (52893, 1, u'+    assert( pBt->inTransaction==TRANS_WRITE );'), (52894, 1, u'+    assert( pBt->nTransaction>0 );'), (52985, 1, u'+    assert( TRANS_WRITE==pBt->inTransaction );'), (53002, 1, u'+    assert( countValidCursors(pBt, 1)==0 );'), (53034, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (53035, 1, u'+  assert( (pBt->btsFlags & BTS_READ_ONLY)==0 );'), (53036, 1, u'+  assert( iStatement>0 );'), (53037, 1, u'+  assert( iStatement>p->db->nSavepoint );'), (53038, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (53065, 1, u'+    assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (53066, 1, u'+    assert( iSavepoint>=0 || (iSavepoint==-1 && op==SAVEPOINT_ROLLBACK) );'), (53079, 1, u'+      assert( pBt->nPage>0 );'), (53127, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (53128, 1, u'+  assert( wrFlag==0 || wrFlag==1 );'), (53134, 1, u'+  assert( hasSharedCacheTableLock(p, iTable, pKeyInfo!=0, wrFlag+1) );'), (53135, 1, u'+  assert( wrFlag==0 || !hasReadConflicts(p, iTable) );'), (53138, 1, u'+  assert( p->inTrans>TRANS_NONE );'), (53139, 1, u'+  assert( wrFlag==0 || p->inTrans==TRANS_WRITE );'), (53140, 1, u'+  assert( pBt->pPage1 && pBt->pPage1->aData );'), (53146, 1, u'+    assert( wrFlag==0 );'), (53222, 1, u'+  assert( pCur->cachedRowid==iRowid );'), (53281, 1, u'+  static void assertCellInfo(BtCursor *pCur){'), (53286, 1, u'+    assert( memcmp(&info, &pCur->info, sizeof(info))==0 );'), (53289, 1, u'+  #define assertCellInfo(x)'), (53299, 1, u'+      assertCellInfo(pCur);'), (53310, 1, u'+    assertCellInfo(pCur);                                                      \\'), (53338, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53339, 1, u'+  assert( pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID );'), (53362, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53363, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (53398, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (53399, 1, u'+  assert(pPgnoNext);'), (53427, 1, u'+  assert( next==0 || rc==SQLITE_DONE );'), (53430, 1, u'+    assert( rc==SQLITE_OK || pPage==0 );'), (53519, 1, u'+  assert( pPage );'), (53520, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (53521, 1, u'+  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (53522, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53589, 1, u'+        assert(!pCur->aOverflow[iIdx] || pCur->aOverflow[iIdx]==nextPage);'), (53686, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53687, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (53688, 1, u'+  assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (53689, 1, u'+  assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (53711, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53714, 1, u'+    assert( pCur->eState==CURSOR_VALID );'), (53715, 1, u'+    assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (53716, 1, u'+    assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (53751, 1, u'+  assert( pCur!=0 && pCur->iPage>=0 && pCur->apPage[pCur->iPage]);'), (53752, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (53753, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53755, 1, u'+  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (53772, 1, u'+    assert( nLocal<=nKey );'), (53795, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (53796, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53804, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (53805, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53828, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53829, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (53830, 1, u'+  assert( pCur->iPage<BTCURSOR_MAX_DEPTH );'), (53831, 1, u'+  assert( pCur->iPage>=0 );'), (53857, 1, u'+static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){'), (53858, 1, u'+  assert( iIdx<=pParent->nCell );'), (53860, 1, u'+    assert( get4byte(&pParent->aData[pParent->hdrOffset+8])==iChild );'), (53862, 1, u'+    assert( get4byte(findCell(pParent, iIdx))==iChild );'), (53866, 1, u'+#  define assertParentIndex(x,y,z)'), (53878, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53879, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (53880, 1, u'+  assert( pCur->iPage>0 );'), (53881, 1, u'+  assert( pCur->apPage[pCur->iPage] );'), (53889, 1, u'+  assertParentIndex('), (53930, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (53931, 1, u'+  assert( CURSOR_INVALID < CURSOR_REQUIRESEEK );'), (53932, 1, u'+  assert( CURSOR_VALID   < CURSOR_REQUIRESEEK );'), (53933, 1, u'+  assert( CURSOR_FAULT   > CURSOR_REQUIRESEEK );'), (53936, 1, u'+      assert( pCur->skipNext!=SQLITE_OK );'), (53963, 1, u'+    assert( pCur->apPage[0]->intKey==1 || pCur->apPage[0]->intKey==0 );'), (53976, 1, u'+  assert( pRoot->pgno==pCur->pgnoRoot );'), (53977, 1, u'+  assert( pRoot->isInit && (pCur->pKeyInfo==0)==pRoot->intKey );'), (54008, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54009, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (54011, 1, u'+    assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (54033, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54034, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (54055, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54056, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (54060, 1, u'+      assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 );'), (54063, 1, u'+      assert( pCur->apPage[pCur->iPage]->nCell>0 );'), (54078, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54079, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (54088, 1, u'+      assert( pCur->aiIdx[ii]==pCur->apPage[ii]->nCell );'), (54090, 1, u'+    assert( pCur->aiIdx[pCur->iPage]==pCur->apPage[pCur->iPage]->nCell-1 );'), (54091, 1, u'+    assert( pCur->apPage[pCur->iPage]->leaf );'), (54099, 1, u'+      assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 );'), (54102, 1, u'+      assert( pCur->eState==CURSOR_VALID );'), (54148, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54149, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (54150, 1, u'+  assert( pRes );'), (54151, 1, u'+  assert( (pIdxKey==0)==(pCur->pKeyInfo==0) );'), (54172, 1, u'+  assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage] );'), (54173, 1, u'+  assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->isInit );'), (54174, 1, u'+  assert( pCur->eState==CURSOR_INVALID || pCur->apPage[pCur->iPage]->nCell>0 );'), (54177, 1, u'+    assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 );'), (54180, 1, u'+  assert( pCur->apPage[0]->intKey || pIdxKey );'), (54193, 1, u'+    assert( pPage->nCell>0 );'), (54194, 1, u'+    assert( pPage->intKey==(pIdxKey==0) );'), (54205, 1, u'+      assert( idx==pCur->aiIdx[pCur->iPage] );'), (54220, 1, u'+          assert( nCellKey>intKey );'), (54294, 1, u'+    assert( lwr==upr+1 || (pPage->intKey && !pPage->leaf) );'), (54295, 1, u'+    assert( pPage->isInit );'), (54304, 1, u'+      assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (54346, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54351, 1, u'+  assert( pRes!=0 );'), (54365, 1, u'+  assert( pPage->isInit );'), (54420, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54438, 1, u'+  assert( pPage->isInit );'), (54508, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (54509, 1, u'+  assert( eMode==BTALLOC_ANY || (nearby>0 && IfNotOmitAV(pBt->autoVacuum)) );'), (54530, 1, u'+        assert( nearby>0 );'), (54531, 1, u'+        assert( pBt->autoVacuum );'), (54572, 1, u'+      assert( pTrunk!=0 );'), (54573, 1, u'+      assert( pTrunk->aData!=0 );'), (54580, 1, u'+        assert( pPrevTrunk==0 );'), (54644, 1, u'+            assert( sqlite3PagerIswriteable(pPage1->pDbPage) );'), (54757, 1, u'+      assert( pBt->nPage!=PENDING_BYTE_PAGE(pBt) );'), (54771, 1, u'+    assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (54781, 1, u'+  assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (54795, 1, u'+  assert( rc!=SQLITE_OK || sqlite3PagerIswriteable((*ppPage)->pDbPage) );'), (54819, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (54820, 1, u'+  assert( iPage>1 );'), (54821, 1, u'+  assert( !pMemPage || pMemPage->pgno==iPage );'), (54873, 1, u'+    assert( pBt->usableSize>32 );'), (54950, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (54959, 1, u'+  assert( pBt->usableSize > 4 );'), (54962, 1, u'+  assert( ovflPgno==0 || nOvfl>0 );'), (55037, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55041, 1, u'+  assert( pCell<pPage->aData || pCell>=&pPage->aData[pBt->pageSize]'), (55056, 1, u'+  assert( info.nHeader==nHeader );'), (55057, 1, u'+  assert( info.nKey==nKey );'), (55058, 1, u'+  assert( info.nData==(u32)(nData+nZero) );'), (55118, 1, u'+      assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (55122, 1, u'+      assert( pPrior<pPage->aData || pPrior>=&pPage->aData[pBt->pageSize]'), (55138, 1, u'+    assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (55142, 1, u'+    assert( pPayload<pPage->aData || pPayload>=&pPage->aData[pBt->pageSize]'), (55147, 1, u'+      assert( pSrc );'), (55184, 1, u'+  assert( idx>=0 && idx<pPage->nCell );'), (55185, 1, u'+  assert( sz==cellSize(pPage, idx) );'), (55186, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (55187, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55204, 1, u'+  assert( (SQLITE_PTR_TO_INT(ptr)&1)==0 );  /* ptr is always 2-byte aligned */'), (55253, 1, u'+  assert( i>=0 && i<=pPage->nCell+pPage->nOverflow );'), (55254, 1, u'+  assert( pPage->nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=10921 );'), (55255, 1, u'+  assert( pPage->nOverflow<=ArraySize(pPage->apOvfl) );'), (55256, 1, u'+  assert( ArraySize(pPage->apOvfl)==ArraySize(pPage->aiOvfl) );'), (55257, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55263, 1, u'+  assert( sz==cellSizePtr(pPage, pCell) || (sz==8 && iChild>0) );'), (55273, 1, u'+    assert( j<(int)(sizeof(pPage->apOvfl)/sizeof(pPage->apOvfl[0])) );'), (55282, 1, u'+    assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (55291, 1, u'+    assert( idx >= end+2 );'), (55292, 1, u'+    assert( idx+sz <= (int)pPage->pBt->usableSize );'), (55301, 1, u'+    assert( (SQLITE_PTR_TO_INT(ptr)&1)==0 );  /* ptr is always 2-byte aligned */'), (55336, 1, u'+  assert( pPage->nOverflow==0 );'), (55337, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55338, 1, u'+  assert( nCell>=0 && nCell<=(int)MX_CELL(pPage->pBt)'), (55340, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (55343, 1, u'+  assert( pPage->nCell==0 );'), (55344, 1, u'+  assert( get2byteNotZero(&data[hdr+5])==nUsable );'), (55407, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55408, 1, u'+  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (55409, 1, u'+  assert( pPage->nOverflow==1 );'), (55427, 1, u'+    assert( sqlite3PagerIswriteable(pNew->pDbPage) );'), (55428, 1, u'+    assert( pPage->aData[0]==(PTF_INTKEY|PTF_LEAFDATA|PTF_LEAF) );'), (55495, 1, u'+    assert( pPage->isInit );'), (55506, 1, u'+        assert( n==pPage->pgno && e==PTRMAP_OVERFLOW1 );'), (55511, 1, u'+        assert( n==pPage->pgno && e==PTRMAP_BTREE );'), (55517, 1, u'+      assert( n==pPage->pgno && e==PTRMAP_BTREE );'), (55552, 1, u'+    assert( pFrom->isInit );'), (55553, 1, u'+    assert( pFrom->nFree>=iToHdr );'), (55554, 1, u'+    assert( get2byte(&aFrom[iFromHdr+5]) <= (int)pBt->usableSize );'), (55661, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (55662, 1, u'+  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (55673, 1, u'+  assert( pParent->nOverflow==0 || pParent->nOverflow==1 );'), (55674, 1, u'+  assert( pParent->nOverflow==0 || pParent->aiOvfl[0]==iParentIdx );'), (55695, 1, u'+    assert( bBulk==0 || bBulk==1 );'), (55701, 1, u'+      assert( bBulk==0 );'), (55781, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(aSpace1) );'), (55816, 1, u'+        assert( nCell<nMaxCells );'), (55826, 1, u'+        assert( nCell<nMaxCells );'), (55835, 1, u'+      assert( nCell<nMaxCells );'), (55839, 1, u'+      assert( sz<=pBt->maxLocal+23 );'), (55840, 1, u'+      assert( iSpace1 <= (int)pBt->pageSize );'), (55843, 1, u'+      assert( leafCorrection==0 || leafCorrection==4 );'), (55846, 1, u'+        assert( leafCorrection==0 );'), (55847, 1, u'+        assert( pOld->hdrOffset==0 );'), (55852, 1, u'+        assert( leafCorrection==4 );'), (55880, 1, u'+    assert( i<nMaxCells );'), (55913, 1, u'+    assert( d<nMaxCells );'), (55914, 1, u'+    assert( r<nMaxCells );'), (55937, 1, u'+  assert( cntNew[0]>0 || (pParent->pgno==1 && pParent->nCell==0) );'), (55963, 1, u'+      assert( i>0 );'), (56026, 1, u'+  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (56037, 1, u'+    assert( j<nMaxCells );'), (56040, 1, u'+    assert( pNew->nCell>0 || (nNew==1 && cntNew[0]==0) );'), (56041, 1, u'+    assert( pNew->nOverflow==0 );'), (56048, 1, u'+    assert( i<nNew-1 || j==nCell );'), (56054, 1, u'+      assert( j<nMaxCells );'), (56086, 1, u'+          assert(leafCorrection==4);'), (56091, 1, u'+      assert( sz<=pBt->maxLocal+23 );'), (56092, 1, u'+      assert( iOvflSpace <= (int)pBt->pageSize );'), (56095, 1, u'+      assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (56101, 1, u'+  assert( j==nCell );'), (56102, 1, u'+  assert( nOld>0 );'), (56103, 1, u'+  assert( nNew>0 );'), (56124, 1, u'+    assert( nNew==1 );'), (56125, 1, u'+    assert( apNew[0]->nFree =='), (56175, 1, u'+        assert( j+1 < ArraySize(apCopy) );'), (56176, 1, u'+        assert( j+1 < nOld );'), (56186, 1, u'+      assert(nOverflow>0 || iOverflow<i );'), (56187, 1, u'+      assert(nOverflow<2 || pOld->aiOvfl[0]==pOld->aiOvfl[1]-1);'), (56188, 1, u'+      assert(nOverflow<3 || pOld->aiOvfl[1]==pOld->aiOvfl[2]-1);'), (56203, 1, u'+      assert( j<nOld );'), (56204, 1, u'+      assert( k<nNew );'), (56237, 1, u'+  assert( pParent->isInit );'), (56285, 1, u'+  assert( pRoot->nOverflow>0 );'), (56286, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (56305, 1, u'+  assert( sqlite3PagerIswriteable(pChild->pDbPage) );'), (56306, 1, u'+  assert( sqlite3PagerIswriteable(pRoot->pDbPage) );'), (56307, 1, u'+  assert( pChild->nCell==pRoot->nCell );'), (56356, 1, u'+        assert( (balance_deeper_called++)==0 );'), (56362, 1, u'+          assert( pCur->apPage[1]->nOverflow );'), (56395, 1, u'+          assert( (balance_quick_called++)==0 );'), (56490, 1, u'+    assert( pCur->skipNext!=SQLITE_OK );'), (56494, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (56495, 1, u'+  assert( pCur->wrFlag && pBt->inTransaction==TRANS_WRITE'), (56497, 1, u'+  assert( hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) );'), (56504, 1, u'+  assert( (pKey==0)==(pCur->pKeyInfo==0) );'), (56531, 1, u'+  assert( pCur->eState==CURSOR_VALID || (pCur->eState==CURSOR_INVALID && loc) );'), (56534, 1, u'+  assert( pPage->intKey || nKey>=0 );'), (56535, 1, u'+  assert( pPage->leaf || !pPage->intKey );'), (56540, 1, u'+  assert( pPage->isInit );'), (56546, 1, u'+  assert( szNew==cellSizePtr(pPage, newCell) );'), (56547, 1, u'+  assert( szNew <= MX_CELL_SIZE(pBt) );'), (56551, 1, u'+    assert( idx<pPage->nCell );'), (56565, 1, u'+    assert( pPage->leaf );'), (56568, 1, u'+    assert( pPage->leaf );'), (56571, 1, u'+  assert( rc!=SQLITE_OK || pPage->nCell>0 || pPage->nOverflow>0 );'), (56605, 1, u'+  assert( pCur->apPage[pCur->iPage]->nOverflow==0 );'), (56624, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (56625, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (56626, 1, u'+  assert( (pBt->btsFlags & BTS_READ_ONLY)==0 );'), (56627, 1, u'+  assert( pCur->wrFlag );'), (56628, 1, u'+  assert( hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) );'), (56629, 1, u'+  assert( !hasReadConflicts(p, pCur->pgnoRoot) );'), (56688, 1, u'+    assert( MX_CELL_SIZE(pBt) >= nCell );'), (56746, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (56747, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (56748, 1, u'+  assert( (pBt->btsFlags & BTS_READ_ONLY)==0 );'), (56781, 1, u'+    assert( pgnoRoot>=3 );'), (56824, 1, u'+      assert( eType!=PTRMAP_ROOTPAGE );'), (56825, 1, u'+      assert( eType!=PTRMAP_FREEPAGE );'), (56857, 1, u'+    assert( sqlite3PagerIswriteable(pBt->pPage1->pDbPage) );'), (56869, 1, u'+  assert( sqlite3PagerIswriteable(pRoot->pDbPage) );'), (56877, 1, u'+  assert( (pBt->openFlags & BTREE_SINGLE)==0 || pgnoRoot==2 );'), (56904, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (56924, 1, u'+    assert( pPage->intKey );'), (56955, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (56995, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (56996, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (57075, 1, u'+      assert( maxRootPgno!=PENDING_BYTE_PAGE(pBt) );'), (57119, 1, u'+  assert( p->inTrans>TRANS_NONE );'), (57120, 1, u'+  assert( SQLITE_OK==querySharedCacheTableLock(p, MASTER_ROOT, READ_LOCK) );'), (57121, 1, u'+  assert( pBt->pPage1 );'), (57122, 1, u'+  assert( idx>=0 && idx<=15 );'), (57145, 1, u'+  assert( idx>=1 && idx<=15 );'), (57147, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (57148, 1, u'+  assert( pBt->pPage1!=0 );'), (57155, 1, u'+      assert( pBt->autoVacuum || iMeta==0 );'), (57156, 1, u'+      assert( iMeta==0 || iMeta==1 );'), (57284, 1, u'+  assert( iPg<=pCheck->nPage && sizeof(pCheck->aPgRef[0])==1 );'), (57292, 1, u'+  assert( iPg<=pCheck->nPage && sizeof(pCheck->aPgRef[0])==1 );'), (57478, 1, u'+    assert( rc==SQLITE_CORRUPT );  /* The only possible error from InitPage */'), (57511, 1, u'+    assert( sz==info.nPayload );'), (57599, 1, u'+    assert( contentOffset<=usableSize );  /* Enforced by btreeInitPage() */'), (57621, 1, u'+      assert( i<=usableSize-4 );     /* Enforced by btreeInitPage() */'), (57623, 1, u'+      assert( i+size<=usableSize );  /* Enforced by btreeInitPage() */'), (57626, 1, u'+      assert( j==0 || j>i+size );  /* Enforced by btreeInitPage() */'), (57627, 1, u'+      assert( j<=usableSize-4 );   /* Enforced by btreeInitPage() */'), (57679, 1, u'+  assert( p->inTrans>TRANS_NONE && pBt->inTransaction>TRANS_NONE );'), (57777, 1, u'+  assert( p->pBt->pPager!=0 );'), (57790, 1, u'+  assert( p->pBt->pPager!=0 );'), (57798, 1, u'+  assert( p==0 || sqlite3_mutex_held(p->db->mutex) );'), (57831, 1, u'+  assert( p );'), (57832, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (57837, 1, u'+  assert( p );'), (57838, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (57880, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (57883, 1, u'+  assert( rc==SQLITE_OK || rc==SQLITE_LOCKED_SHAREDCACHE );'), (57897, 1, u'+  assert( p->inTrans!=TRANS_NONE );'), (57900, 1, u'+    assert( READ_LOCK+1==WRITE_LOCK );'), (57901, 1, u'+    assert( isWriteLock==0 || isWriteLock==1 );'), (57927, 1, u'+  assert( cursorHoldsMutex(pCsr) );'), (57928, 1, u'+  assert( sqlite3_mutex_held(pCsr->pBtree->db->mutex) );'), (57929, 1, u'+  assert( pCsr->isIncrblobHandle );'), (57935, 1, u'+  assert( pCsr->eState!=CURSOR_REQUIRESEEK );'), (57949, 1, u'+  assert( rc==SQLITE_OK );'), (57961, 1, u'+  assert( (pCsr->pBt->btsFlags & BTS_READ_ONLY)==0'), (57963, 1, u'+  assert( hasSharedCacheTableLock(pCsr->pBtree, pCsr->pgnoRoot, 0, 2) );'), (57964, 1, u'+  assert( !hasReadConflicts(pCsr->pBtree, pCsr->pgnoRoot) );'), (57965, 1, u'+  assert( pCsr->apPage[pCsr->iPage]->intKey );'), (57981, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (57982, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (57997, 1, u'+  assert( iVersion==1 || iVersion==2 );'), (58029, 1, u'+  assert( mask==BTREE_BULKLOAD || mask==0 );'), (58268, 1, u'+  assert( sqlite3BtreeGetReserveNoMutex(p->pSrc)>=0 );'), (58269, 1, u'+  assert( p->bDestLocked );'), (58270, 1, u'+  assert( !isFatalError(p->rc) );'), (58271, 1, u'+  assert( iSrcPg!=PENDING_BYTE_PAGE(p->pSrc->pBt) );'), (58272, 1, u'+  assert( zSrcData );'), (58358, 1, u'+  assert( sqlite3BtreeHoldsMutex(p->pSrc) );'), (58427, 1, u'+    assert( nSrcPage>=0 );'), (58486, 1, u'+        assert( pgszSrc==sqlite3BtreeGetPageSize(p->pSrc) );'), (58487, 1, u'+        assert( pgszDest==sqlite3BtreeGetPageSize(p->pDest) );'), (58497, 1, u'+        assert( nDestTruncate>0 );'), (58516, 1, u'+          assert( pFile );'), (58517, 1, u'+          assert( nDestTruncate==0'), (58591, 1, u'+      assert( rc2==SQLITE_OK );'), (58689, 1, u'+    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (58696, 1, u'+      assert( p->pDestDb );'), (58700, 1, u'+      assert( rc!=SQLITE_BUSY && rc!=SQLITE_LOCKED );'), (58722, 1, u'+    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (58743, 1, u'+  assert( sqlite3BtreeIsInTrans(pTo) );'), (58771, 1, u'+  assert( b.rc!=SQLITE_OK );'), (58779, 1, u'+  assert( sqlite3BtreeIsInTrans(pTo)==0 );'), (58824, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (58825, 1, u'+  assert( desiredEnc==SQLITE_UTF8 || desiredEnc==SQLITE_UTF16LE'), (58830, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58839, 1, u'+  assert(rc==SQLITE_OK    || rc==SQLITE_NOMEM);'), (58840, 1, u'+  assert(rc==SQLITE_OK    || pMem->enc!=desiredEnc);'), (58841, 1, u'+  assert(rc==SQLITE_NOMEM || pMem->enc==desiredEnc);'), (58860, 1, u'+  assert( 1 >='), (58866, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (58870, 1, u'+  assert( preserve==0 || pMem->flags&(MEM_Blob|MEM_Str) );'), (58887, 1, u'+    assert( pMem->xDel!=SQLITE_DYNAMIC );'), (58911, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58912, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (58938, 1, u'+    assert( pMem->flags&MEM_Blob );'), (58939, 1, u'+    assert( (pMem->flags&MEM_RowSet)==0 );'), (58940, 1, u'+    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58964, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58995, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (58996, 1, u'+  assert( !(fg&MEM_Zero) );'), (58997, 1, u'+  assert( !(fg&(MEM_Str|MEM_Blob)) );'), (58998, 1, u'+  assert( fg&(MEM_Int|MEM_Real) );'), (58999, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (59000, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59016, 1, u'+    assert( fg & MEM_Real );'), (59038, 1, u'+    assert( (pMem->flags & MEM_Null)!=0 || pFunc==pMem->u.pDef );'), (59039, 1, u'+    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59046, 1, u'+    assert( 0==(pMem->flags&MEM_Dyn) && !pMem->xDel );'), (59060, 1, u'+  assert( p->db==0 || sqlite3_mutex_held(p->db->mutex) );'), (59063, 1, u'+    assert( (p->flags & MEM_Agg)==0 );'), (59066, 1, u'+    assert( (p->flags&MEM_RowSet)==0 );'), (59067, 1, u'+    assert( p->xDel!=SQLITE_DYNAMIC );'), (59144, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59145, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59153, 1, u'+    assert( pMem->z || pMem->n==0 );'), (59169, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59170, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59191, 1, u'+  assert( pMem->flags & MEM_Real );'), (59192, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (59193, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59194, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59226, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59227, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (59228, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59240, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59241, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59258, 1, u'+    assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );'), (59259, 1, u'+    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59268, 1, u'+  assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))!=0 );'), (59345, 1, u'+  assert( db!=0 );'), (59346, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (59352, 1, u'+    assert( pMem->zMalloc );'), (59355, 1, u'+    assert( pMem->u.pRowSet!=0 );'), (59365, 1, u'+  assert( p->db!=0 );'), (59410, 1, u'+  assert( (pFrom->flags & MEM_RowSet)==0 );'), (59416, 1, u'+    assert( srcType==MEM_Ephem || srcType==MEM_Static );'), (59428, 1, u'+  assert( (pFrom->flags & MEM_RowSet)==0 );'), (59450, 1, u'+  assert( pFrom->db==0 || sqlite3_mutex_held(pFrom->db->mutex) );'), (59451, 1, u'+  assert( pTo->db==0 || sqlite3_mutex_held(pTo->db->mutex) );'), (59452, 1, u'+  assert( pFrom->db==0 || pTo->db==0 || pFrom->db==pTo->db );'), (59487, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59488, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (59503, 1, u'+    assert( enc!=0 );'), (59574, 1, u'+  assert( (combined_flags & MEM_RowSet)==0 );'), (59610, 1, u'+      assert( f1&MEM_Int );'), (59611, 1, u'+      assert( f2&MEM_Int );'), (59629, 1, u'+    assert( pMem1->enc==pMem2->enc );'), (59630, 1, u'+    assert( pMem1->enc==SQLITE_UTF8 ||'), (59637, 1, u'+    assert( !pColl || pColl->xCmp );'), (59699, 1, u'+  assert( sqlite3BtreeCursorIsValid(pCur) );'), (59703, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (59709, 1, u'+  assert( zData!=0 );'), (59748, 1, u'+  assert( pVal->db==0 || sqlite3_mutex_held(pVal->db->mutex) );'), (59749, 1, u'+  assert( (enc&3)==(enc&~SQLITE_UTF16_ALIGNED) );'), (59750, 1, u'+  assert( (pVal->flags & MEM_RowSet)==0 );'), (59755, 1, u'+  assert( (MEM_Blob>>3) == MEM_Str );'), (59761, 1, u'+      assert( (pVal->flags & (MEM_Ephem|MEM_Static))!=0 );'), (59768, 1, u'+    assert( (pVal->flags&MEM_Blob)==0 );'), (59770, 1, u'+    assert( 0==(1&SQLITE_PTR_TO_INT(pVal->z)) );'), (59772, 1, u'+  assert(pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) || pVal->db==0'), (59885, 1, u"+    assert( pExpr->u.zToken[0]=='x' || pExpr->u.zToken[0]=='X' );"), (59886, 1, u"+    assert( pExpr->u.zToken[1]=='\\'' );"), (59891, 1, u"+    assert( zVal[nVal]=='\\'' );"), (59990, 1, u'+  assert( isPrepareV2==1 || isPrepareV2==0 );'), (59995, 1, u'+  assert( p->zSql==0 );'), (60079, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (60080, 1, u'+  assert( op>0 && op<0xff );'), (60182, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (60200, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (60201, 1, u'+  assert( j>=0 && j<p->nLabel );'), (60255, 1, u'+    assert( p->iAddr<nOp );'), (60304, 1, u'+SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){'), (60367, 1, u'+      assert( p->nOp - i >= 3 );'), (60368, 1, u'+      assert( pOp[-1].opcode==OP_Integer );'), (60381, 1, u'+      assert( -1-pOp->p2<p->nLabel );'), (60395, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (60412, 1, u'+  assert( aOp && !p->db->mallocFailed );'), (60415, 1, u'+  assert( p->btreeMask==0 );'), (60429, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (60470, 1, u'+  assert( p!=0 );'), (60481, 1, u'+  assert( p!=0 );'), (60491, 1, u'+  assert( p!=0 );'), (60502, 1, u'+  assert( p!=0 );'), (60504, 1, u'+    assert( p->nOp>0 );'), (60514, 1, u'+  assert( addr>=0 || p->db->mallocFailed );'), (60536, 1, u'+    assert( db );'), (60649, 1, u'+  assert( p!=0 );'), (60651, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (60658, 1, u'+  assert( p->nOp>0 );'), (60659, 1, u'+  assert( addr<p->nOp );'), (60664, 1, u'+  assert( pOp->p4type==P4_NOTUSED || pOp->p4type==P4_INT32 );'), (60687, 1, u'+      assert( aSortOrder!=0 );'), (60702, 1, u'+    assert( ((VTable *)zP4)->db==p->db );'), (60721, 1, u'+  assert( p->nOp>0 || p->aOp==0 );'), (60722, 1, u'+  assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );'), (60724, 1, u'+    assert( p->aOp );'), (60773, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (60780, 1, u'+  assert( (addr>=0 && addr<p->nOp) || p->db->mallocFailed );'), (60796, 1, u'+  assert( nTemp>=20 );'), (60802, 1, u'+      assert( pKeyInfo->aSortOrder!=0 );'), (60822, 1, u'+      assert( i<nTemp );'), (60858, 1, u'+        assert( pMem->flags & MEM_Blob );'), (60890, 1, u'+  assert( zP4!=0 );'), (60904, 1, u'+  assert( i>=0 && i<p->db->nDb && i<(int)sizeof(yDbMask)*8 );'), (60905, 1, u'+  assert( i<(int)sizeof(p->btreeMask)*8 );'), (61011, 1, u'+      assert( (&p[1])==pEnd || p[0].db==p[1].db );'), (61081, 1, u'+  assert( p->explain );'), (61082, 1, u'+  assert( p->magic==VDBE_MAGIC_RUN );'), (61083, 1, u'+  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY || p->rc==SQLITE_NOMEM );'), (61112, 1, u'+    assert( p->nMem>9 );'), (61160, 1, u'+      assert( pMem->z!=0 );'), (61202, 1, u'+      assert( p->db->mallocFailed );'), (61210, 1, u'+      assert( pMem->z!=0 );'), (61219, 1, u'+        assert( p->db->mallocFailed );'), (61328, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(*ppFrom) );'), (61348, 1, u'+  assert( p!=0 );'), (61349, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (61353, 1, u'+  assert( p->nOp>0 );'), (61360, 1, u'+    assert( p->aMem[i].db==p->db );'), (61413, 1, u'+  assert( p!=0 );'), (61414, 1, u'+  assert( p->nOp>0 );'), (61415, 1, u'+  assert( pParse!=0 );'), (61416, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (61418, 1, u'+  assert( db->mallocFailed==0 );'), (61450, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(zCsr) );'), (61603, 1, u'+  if( p->apCsr ) for(i=0; i<p->nCursor; i++) assert( p->apCsr[i]==0 );'), (61605, 1, u'+    for(i=1; i<=p->nMem; i++) assert( p->aMem[i].flags==MEM_Invalid );'), (61657, 1, u'+  assert( idx<p->nResColumn );'), (61658, 1, u'+  assert( var<COLNAME_N );'), (61660, 1, u'+    assert( !zName || xDel!=SQLITE_DYNAMIC );'), (61663, 1, u'+  assert( p->aColName!=0 );'), (61666, 1, u'+  assert( rc!=0 || !zName || (pColName->flags&MEM_Term)!=0 );'), (61797, 1, u"+      assert( zMaster[sqlite3Strlen30(zMaster)-3]=='9' );"), (61826, 1, u'+        assert( zFile[0]!=0 );'), (61871, 1, u'+    assert( rc!=SQLITE_BUSY );'), (61935, 1, u'+  assert( cnt==db->activeVdbeCnt );'), (61936, 1, u'+  assert( nWrite==db->writeVdbeCnt );'), (61965, 1, u'+    assert( eOp==SAVEPOINT_ROLLBACK || eOp==SAVEPOINT_RELEASE);'), (61966, 1, u'+    assert( db->nStatement>0 );'), (61967, 1, u'+    assert( p->iStatement==(db->nStatement+db->nSavepoint) );'), (62083, 1, u'+    assert( p->rc!=SQLITE_IOERR_BLOCKED );  /* This error no longer exists */'), (62211, 1, u'+    assert( db->activeVdbeCnt>=db->writeVdbeCnt );'), (62227, 1, u'+  assert( db->activeVdbeCnt>0 || db->autoCommit==0 || db->nStatement==0 );'), (62272, 1, u'+    assert( v->db->init.busy==0 );'), (62368, 1, u'+    assert( (rc & p->db->errMask)==rc );'), (62404, 1, u'+  assert( p->db==0 || p->db==db );'), (62432, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (62437, 1, u'+    assert( db->pVdbe==p );'), (62467, 1, u'+    assert( p->isTable );'), (62566, 1, u'+  assert( pMem->db->mallocFailed || flags&(MEM_Str|MEM_Blob) );'), (62571, 1, u'+  assert( n>=0 );'), (62667, 1, u'+      assert( sizeof(v)==sizeof(pMem->r) );'), (62674, 1, u'+    assert( len<=(u32)nBuf );'), (62684, 1, u'+    assert( pMem->n + ((pMem->flags & MEM_Zero)?pMem->u.nZero:0)'), (62686, 1, u'+    assert( pMem->n<=nBuf );'), (62691, 1, u'+      assert( nBuf>=0 );'), (62762, 1, u'+      assert( sizeof(r1)==sizeof(t2) && memcmp(&r1, &t2, sizeof(r1))==0 );'), (62772, 1, u'+        assert( sizeof(x)==8 && sizeof(pMem->r)==8 );'), (62841, 1, u'+  assert( pKeyInfo->aSortOrder!=0 );'), (62866, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (62882, 1, u'+  assert( u<=pKeyInfo->nField + 1 );'), (62935, 1, u'+  assert( pKeyInfo->aSortOrder!=0 );'), (62952, 1, u'+      assert( mem1.zMalloc==0 );  /* See comment below */'), (62965, 1, u'+        assert( idx1==szHdr1 && rc );'), (62966, 1, u'+        assert( mem1.flags & MEM_Int );'), (62980, 1, u'+  assert( mem1.zMalloc==0 );'), (62990, 1, u'+  assert( rc==0 );'), (63025, 1, u'+  assert( sqlite3BtreeCursorIsValid(pCur) );'), (63027, 1, u'+  assert( rc==SQLITE_OK );     /* pCur is always valid so KeySize cannot fail */'), (63028, 1, u'+  assert( (nCellKey & SQLITE_MAX_U32)==(u64)nCellKey );'), (63100, 1, u'+  assert( sqlite3BtreeCursorIsValid(pCur) );'), (63102, 1, u'+  assert( rc==SQLITE_OK );    /* pCur is always valid so KeySize cannot fail */'), (63114, 1, u'+  assert( pUnpacked->flags & UNPACKED_PREFIX_MATCH );'), (63125, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (63171, 1, u'+  assert( iVar>0 );'), (63193, 1, u'+  assert( iVar>0 );'), (63300, 1, u'+    assert( (rc & (v->db->errMask))==rc );'), (63403, 1, u'+  assert( n>=0 );'), (63404, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63408, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63412, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63418, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63424, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63428, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63432, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63441, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63451, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63460, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63469, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63474, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63478, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63491, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63499, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63539, 1, u'+  assert(p);'), (63589, 1, u'+    assert( db->writeVdbeCnt>0 || db->autoCommit==0 || db->nDeferredCons==0 );'), (63623, 1, u'+    assert( p->rc==SQLITE_OK );'), (63642, 1, u'+  assert( rc==SQLITE_ROW  || rc==SQLITE_DONE   || rc==SQLITE_ERROR'), (63645, 1, u'+  assert( p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE );'), (63679, 1, u'+    assert( v->expired==0 );'), (63710, 1, u'+  assert( p && p->pFunc );'), (63725, 1, u'+  assert( p && p->pFunc );'), (63758, 1, u'+  assert( p && p->pFunc && p->pFunc->xStep );'), (63759, 1, u'+  assert( sqlite3_mutex_held(p->s.db->mutex) );'), (63786, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63809, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (63849, 1, u'+  assert( p && p->pMem && p->pFunc && p->pFunc->xStep );'), (64050, 1, u'+  assert( db!=0 );'), (64055, 1, u'+    assert( db->mallocFailed==0 );'), (64411, 1, u'+  assert( pTo->db==pFrom->db );'), (64412, 1, u'+  assert( pTo->nVar==pFrom->nVar );'), (64540, 1, u'+    assert( n>0 && tokenType!=TK_ILLEGAL );'), (64603, 1, u'+      assert( n>0 );'), (64606, 1, u'+      assert( zRawSql[0] || nToken==0 );'), (64610, 1, u'+          assert( sqlite3Isdigit(zRawSql[1]) );'), (64616, 1, u"+        assert( zRawSql[0]==':' || zRawSql[0]=='$' || zRawSql[0]=='@' );"), (64621, 1, u'+        assert( idx>0 );'), (64625, 1, u'+      assert( idx>0 && idx<=p->nVar );'), (64664, 1, u'+        assert( pVar->flags & MEM_Blob );'), (65018, 1, u'+  assert( iCur<p->nCursor );'), (65096, 1, u'+    assert( affinity==SQLITE_AFF_INTEGER || affinity==SQLITE_AFF_REAL'), (65148, 1, u'+      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (65151, 1, u'+      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (65154, 1, u'+      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (65185, 1, u'+      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (65188, 1, u'+      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (65191, 1, u'+      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (65383, 1, u'+  assert( n==(db->nSavepoint + db->isTransactionSavepoint) );'), (65890, 1, u'+  assert( p->magic==VDBE_MAGIC_RUN );  /* sqlite3_step() verifies this */'), (65897, 1, u'+  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY );'), (65899, 1, u'+  assert( p->explain==0 );'), (65920, 1, u'+    assert( pc>=0 && pc<p->nOp );'), (65979, 1, u'+    assert( pOp->opflags==sqlite3OpcodeProperty[pOp->opcode] );'), (65981, 1, u'+      assert( pOp->p2>0 );'), (65982, 1, u'+      assert( pOp->p2<=p->nMem );'), (65992, 1, u'+      assert( pOp->p1>0 );'), (65993, 1, u'+      assert( pOp->p1<=p->nMem );'), (65994, 1, u'+      assert( memIsValid(&aMem[pOp->p1]) );'), (65998, 1, u'+      assert( pOp->p2>0 );'), (65999, 1, u'+      assert( pOp->p2<=p->nMem );'), (66000, 1, u'+      assert( memIsValid(&aMem[pOp->p2]) );'), (66004, 1, u'+      assert( pOp->p3>0 );'), (66005, 1, u'+      assert( pOp->p3<=p->nMem );'), (66006, 1, u'+      assert( memIsValid(&aMem[pOp->p3]) );'), (66010, 1, u'+      assert( pOp->p2>0 );'), (66011, 1, u'+      assert( pOp->p2<=p->nMem );'), (66015, 1, u'+      assert( pOp->p3>0 );'), (66016, 1, u'+      assert( pOp->p3<=p->nMem );'), (66077, 1, u'+  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (66079, 1, u'+  assert( (pIn1->flags & MEM_Dyn)==0 );'), (66094, 1, u'+  assert( pIn1->flags & MEM_Int );'), (66108, 1, u'+  assert( (pIn1->flags & MEM_Dyn)==0 );'), (66174, 1, u'+    assert( p->rc!=SQLITE_OK );'), (66183, 1, u'+  assert( rc==SQLITE_BUSY || rc==SQLITE_OK || rc==SQLITE_ERROR );'), (66187, 1, u'+    assert( rc==SQLITE_OK || (p->rc&0xff)==SQLITE_CONSTRAINT );'), (66188, 1, u'+    assert( rc==SQLITE_OK || db->nDeferredCons>0 );'), (66209, 1, u'+  assert( pOp->p4.pI64!=0 );'), (66222, 1, u'+  assert( !sqlite3IsNaN(*pOp->p4.pReal) );'), (66234, 1, u'+  assert( pOp->p4.z!=0 );'), (66243, 1, u'+    assert( pOut->zMalloc==pOut->z );'), (66244, 1, u'+    assert( pOut->flags & MEM_Dyn );'), (66267, 1, u'+  assert( pOp->p4.z!=0 );'), (66293, 1, u'+  assert( pOp->p3<=p->nMem );'), (66312, 1, u'+  assert( pOp->p1 <= SQLITE_MAX_LENGTH );'), (66331, 1, u'+  assert( pOp->p1>0 && pOp->p1<=p->nVar );'), (66332, 1, u'+  assert( pOp->p4.z==0 || pOp->p4.z==p->azVar[pOp->p1-1] );'), (66360, 1, u'+  assert( u.ad.n>0 && u.ad.p1>0 && u.ad.p2>0 );'), (66361, 1, u'+  assert( u.ad.p1+u.ad.n<=u.ad.p2 || u.ad.p2+u.ad.n<=u.ad.p1 );'), (66366, 1, u'+    assert( pOut<=&aMem[p->nMem] );'), (66367, 1, u'+    assert( pIn1<=&aMem[p->nMem] );'), (66368, 1, u'+    assert( memIsValid(pIn1) );'), (66401, 1, u'+  assert( pOut!=pIn1 );'), (66431, 1, u'+  assert( pOut!=pIn1 );'), (66453, 1, u'+  assert( p->nResColumn==pOp->p2 );'), (66454, 1, u'+  assert( pOp->p1>0 );'), (66455, 1, u'+  assert( pOp->p1+pOp->p2<=p->nMem+1 );'), (66461, 1, u'+    assert( db->flags&SQLITE_CountRows );'), (66462, 1, u'+    assert( p->usesStmtJournal );'), (66481, 1, u'+  assert( p->iStatement==0 || db->flags&SQLITE_CountRows );'), (66496, 1, u'+    assert( memIsValid(&u.af.pMem[u.af.i]) );'), (66498, 1, u'+    assert( (u.af.pMem[u.af.i].flags & MEM_Ephem)==0'), (66533, 1, u'+  assert( pIn1!=pOut );'), (66700, 1, u'+  assert( pOp->p4type==P4_COLLSEQ );'), (66734, 1, u'+  assert( u.ai.apVal || u.ai.n==0 );'), (66735, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (66739, 1, u'+  assert( u.ai.n==0 || (pOp->p2>0 && pOp->p2+u.ai.n<=p->nMem+1) );'), (66740, 1, u'+  assert( pOp->p3<pOp->p2 || pOp->p3>=pOp->p2+u.ai.n );'), (66743, 1, u'+    assert( memIsValid(u.ai.pArg) );'), (66750, 1, u'+  assert( pOp->p4type==P4_FUNCDEF || pOp->p4type==P4_VDBEFUNC );'), (66773, 1, u'+    assert( pOp>aOp );'), (66774, 1, u'+    assert( pOp[-1].p4type==P4_COLLSEQ );'), (66775, 1, u'+    assert( pOp[-1].opcode==OP_CollSeq );'), (66879, 1, u'+    assert( u.aj.op==OP_ShiftRight || u.aj.op==OP_ShiftLeft );'), (66883, 1, u'+      assert( OP_ShiftRight==OP_ShiftLeft+1 );'), (66978, 1, u'+  assert( MEM_Str==(MEM_Blob>>3) );'), (66982, 1, u'+  assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (67002, 1, u'+    assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (67165, 1, u'+      assert( pOp->opcode==OP_Eq || pOp->opcode==OP_Ne );'), (67166, 1, u'+      assert( (u.ak.flags1 & MEM_Cleared)==0 );'), (67198, 1, u'+    assert( pOp->p4type==P4_COLLSEQ || pOp->p4.pColl==0 );'), (67238, 1, u'+  assert( pOp->p4type==P4_INTARRAY );'), (67239, 1, u'+  assert( pOp->p4.ai );'), (67278, 1, u'+  assert( u.al.n>0 );'), (67279, 1, u'+  assert( u.al.pKeyInfo!=0 );'), (67286, 1, u'+    assert( u.al.p1>0 && u.al.p1+mx<=p->nMem+1 );'), (67287, 1, u'+    assert( u.al.p2>0 && u.al.p2+mx<=p->nMem+1 );'), (67289, 1, u'+    assert( u.al.p1>0 && u.al.p1+u.al.n<=p->nMem+1 );'), (67290, 1, u'+    assert( u.al.p2>0 && u.al.p2+u.al.n<=p->nMem+1 );'), (67295, 1, u'+    assert( memIsValid(&aMem[u.al.p1+u.al.idx]) );'), (67296, 1, u'+    assert( memIsValid(&aMem[u.al.p2+u.al.idx]) );'), (67299, 1, u'+    assert( u.al.i<u.al.pKeyInfo->nField );'), (67423, 1, u'+  assert( pOp->p1<p->nOnceFlag );'), (67546, 1, u'+  assert( u.ao.p1<p->nCursor );'), (67547, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (67565, 1, u'+  assert( u.ao.pC!=0 );'), (67567, 1, u'+  assert( u.ao.pC->pVtabCursor==0 );'), (67580, 1, u'+      assert( sqlite3BtreeCursorIsValid(u.ao.pCrsr) );'), (67582, 1, u'+      assert( rc==SQLITE_OK );   /* True because of CursorMoveto() call above */'), (67586, 1, u'+      assert( (u.ao.payloadSize64 & SQLITE_MAX_U32)==(u64)u.ao.payloadSize64 );'), (67589, 1, u'+      assert( sqlite3BtreeCursorIsValid(u.ao.pCrsr) );'), (67591, 1, u'+      assert( rc==SQLITE_OK );   /* DataSize() cannot fail */'), (67600, 1, u'+    assert( u.ao.pReg->flags & MEM_Blob );'), (67601, 1, u'+    assert( memIsValid(u.ao.pReg) );'), (67605, 1, u'+    assert( u.ao.payloadSize==0 || u.ao.zRec!=0 );'), (67617, 1, u'+  assert( db->aLimit[SQLITE_LIMIT_LENGTH]>=0 );'), (67623, 1, u'+  assert( u.ao.p2<u.ao.nField );'), (67632, 1, u'+    assert(u.ao.aType);'), (67652, 1, u'+      assert( u.ao.avail>=0 );'), (67767, 1, u'+    assert( rc==SQLITE_OK );'), (67811, 1, u'+    assert( u.ao.sMem.z==u.ao.sMem.zMalloc );'), (67812, 1, u'+    assert( !(u.ao.pDest->flags & MEM_Dyn) );'), (67813, 1, u'+    assert( !(u.ao.pDest->flags & (MEM_Blob|MEM_Str)) || u.ao.pDest->z==u.ao.sMem.z );'), (67843, 1, u'+  assert( u.ap.zAffinity!=0 );'), (67844, 1, u'+  assert( u.ap.zAffinity[pOp->p2]==0 );'), (67847, 1, u'+    assert( pIn1 <= &p->aMem[p->nMem] );'), (67848, 1, u'+    assert( memIsValid(pIn1) );'), (67910, 1, u'+  assert( u.aq.nField>0 && pOp->p2>0 && pOp->p2+u.aq.nField<=p->nMem+1 );'), (67917, 1, u'+  assert( pOp->p3<pOp->p1 || pOp->p3>=pOp->p1+pOp->p2 );'), (67925, 1, u'+    assert( memIsValid(u.aq.pRec) );'), (67974, 1, u'+  assert( u.aq.i==u.aq.nByte );'), (67976, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (68037, 1, u'+  assert( db->pSavepoint==0 || db->autoCommit==0 );'), (68038, 1, u'+  assert( u.as.p1==SAVEPOINT_BEGIN||u.as.p1==SAVEPOINT_RELEASE||u.as.p1==SAVEPOINT_ROLLBACK );'), (68039, 1, u'+  assert( db->pSavepoint || db->isTransactionSavepoint==0 );'), (68040, 1, u'+  assert( checkSavepointCount(db) );'), (68058, 1, u'+      assert( db->autoCommit==0 || db->nVTrans==0 );'), (68162, 1, u'+        assert( u.as.pSavepoint==db->pSavepoint );'), (68201, 1, u'+  assert( u.at.desiredAutoCommit==1 || u.at.desiredAutoCommit==0 );'), (68202, 1, u'+  assert( u.at.desiredAutoCommit==1 || u.at.iRollback==0 );'), (68203, 1, u'+  assert( db->activeVdbeCnt>0 );  /* At least this one VM is active */'), (68225, 1, u'+      assert( u.at.desiredAutoCommit==1 );'), (68239, 1, u'+    assert( db->nStatement==0 );'), (68294, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (68295, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (68312, 1, u'+      assert( sqlite3BtreeIsInTrans(u.au.pBt) );'), (68314, 1, u'+        assert( db->nStatement>=0 && db->nSavepoint>=0 );'), (68354, 1, u'+  assert( pOp->p3<SQLITE_N_BTREE_META );'), (68355, 1, u'+  assert( u.av.iDb>=0 && u.av.iDb<db->nDb );'), (68356, 1, u'+  assert( db->aDb[u.av.iDb].pBt!=0 );'), (68357, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<u.av.iDb))!=0 );'), (68378, 1, u'+  assert( pOp->p2<SQLITE_N_BTREE_META );'), (68379, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (68380, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (68382, 1, u'+  assert( u.aw.pDb->pBt!=0 );'), (68383, 1, u'+  assert( sqlite3SchemaMutexHeld(db, pOp->p1, 0) );'), (68430, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (68431, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (68432, 1, u'+  assert( sqlite3SchemaMutexHeld(db, pOp->p1, 0) );'), (68528, 1, u'+  assert( (pOp->p5&(OPFLAG_P2ISREG|OPFLAG_BULKCSR))==pOp->p5 );'), (68529, 1, u'+  assert( pOp->opcode==OP_OpenWrite || pOp->p5==0 );'), (68540, 1, u'+  assert( u.ay.iDb>=0 && u.ay.iDb<db->nDb );'), (68541, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<u.ay.iDb))!=0 );'), (68544, 1, u'+  assert( u.ay.pX!=0 );'), (68547, 1, u'+    assert( sqlite3SchemaMutexHeld(db, u.ay.iDb, 0) );'), (68555, 1, u'+    assert( u.ay.p2>0 );'), (68556, 1, u'+    assert( u.ay.p2<=p->nMem );'), (68558, 1, u'+    assert( memIsValid(pIn2) );'), (68559, 1, u'+    assert( (pIn2->flags & MEM_Int)!=0 );'), (68578, 1, u'+  assert( pOp->p1>=0 );'), (68585, 1, u'+  assert( OPFLAG_BULKCSR==BTREE_BULKLOAD );'), (68590, 1, u'+  assert( rc==SQLITE_OK );'), (68643, 1, u'+  assert( pOp->p1>=0 );'), (68660, 1, u'+      assert( pOp->p4type==P4_KEYINFO );'), (68663, 1, u'+        assert( pgno==MASTER_ROOT+1 );'), (68721, 1, u'+  assert( pOp->p1>=0 );'), (68738, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (68809, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (68810, 1, u'+  assert( pOp->p2!=0 );'), (68812, 1, u'+  assert( u.bc.pC!=0 );'), (68813, 1, u'+  assert( u.bc.pC->pseudoTableReg==0 );'), (68814, 1, u'+  assert( OP_SeekLe == OP_SeekLt+1 );'), (68815, 1, u'+  assert( OP_SeekGe == OP_SeekLt+2 );'), (68816, 1, u'+  assert( OP_SeekGt == OP_SeekLt+3 );'), (68817, 1, u'+  assert( u.bc.pC->isOrdered );'), (68841, 1, u'+        assert( (pIn3->flags & MEM_Real)!=0 );'), (68848, 1, u'+            if( u.bc.oc>=OP_SeekGe ){  assert( u.bc.oc==OP_SeekGe || u.bc.oc==OP_SeekGt );'), (68853, 1, u'+            if( u.bc.oc<=OP_SeekLe ){  assert( u.bc.oc==OP_SeekLt || u.bc.oc==OP_SeekLe );'), (68867, 1, u'+          assert( u.bc.oc==OP_SeekLe || u.bc.oc==OP_SeekGt );'), (68881, 1, u'+      assert( pOp->p4type==P4_INT32 );'), (68882, 1, u'+      assert( u.bc.nField>0 );'), (68894, 1, u'+      assert( u.bc.oc!=OP_SeekGt || u.bc.r.flags==UNPACKED_INCRKEY );'), (68895, 1, u'+      assert( u.bc.oc!=OP_SeekLe || u.bc.r.flags==UNPACKED_INCRKEY );'), (68896, 1, u'+      assert( u.bc.oc!=OP_SeekGe || u.bc.r.flags==0 );'), (68897, 1, u'+      assert( u.bc.oc!=OP_SeekLt || u.bc.r.flags==0 );'), (68901, 1, u'+      { int i; for(i=0; i<u.bc.r.nField; i++) assert( memIsValid(&u.bc.r.aMem[i]) ); }'), (68915, 1, u'+    if( u.bc.oc>=OP_SeekGe ){  assert( u.bc.oc==OP_SeekGe || u.bc.oc==OP_SeekGt );'), (68924, 1, u'+      assert( u.bc.oc==OP_SeekLt || u.bc.oc==OP_SeekLe );'), (68936, 1, u'+    assert( pOp->p2>0 );'), (68964, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (68966, 1, u'+  assert( u.bd.pC!=0 );'), (68968, 1, u'+    assert( u.bd.pC->isTable );'), (69020, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69021, 1, u'+  assert( pOp->p4type==P4_INT32 );'), (69023, 1, u'+  assert( u.be.pC!=0 );'), (69027, 1, u'+    assert( u.be.pC->isTable==0 );'), (69033, 1, u'+      { int i; for(i=0; i<u.be.r.nField; i++) assert( memIsValid(&u.be.r.aMem[i]) ); }'), (69042, 1, u'+      assert( pIn3->flags & MEM_Blob );'), (69043, 1, u'+      assert( (pIn3->flags & MEM_Zero)==0 );  /* zeroblobs already expanded */'), (69106, 1, u'+  assert( pOp->p4type==P4_INT32 );'), (69107, 1, u'+  assert( pOp->p4.i>0 && pOp->p4.i<=p->nMem );'), (69108, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69112, 1, u'+  assert( u.bf.pCx->deferredMoveto==0 );'), (69126, 1, u'+  assert( (u.bf.aMx[u.bf.nField].flags & MEM_Null)==0 );'), (69135, 1, u'+    { int i; for(i=0; i<u.bf.r.nField; i++) assert( memIsValid(&u.bf.r.aMem[i]) ); }'), (69178, 1, u'+  assert( pIn3->flags & MEM_Int );'), (69179, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69181, 1, u'+  assert( u.bg.pC!=0 );'), (69182, 1, u'+  assert( u.bg.pC->isTable );'), (69183, 1, u'+  assert( u.bg.pC->pseudoTableReg==0 );'), (69196, 1, u'+      assert( u.bg.pC->rowidIsValid==0 );'), (69204, 1, u'+    assert( u.bg.pC->rowidIsValid==0 );'), (69218, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69219, 1, u'+  assert( p->apCsr[pOp->p1]!=0 );'), (69251, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69253, 1, u'+  assert( u.bh.pC!=0 );'), (69270, 1, u'+    assert( u.bh.pC->isTable );'), (69292, 1, u'+          assert( sqlite3BtreeCursorIsValid(u.bh.pC->pCursor) );'), (69294, 1, u'+          assert( rc==SQLITE_OK );   /* Cannot fail following BtreeLast() */'), (69306, 1, u'+        assert( pOp->p3>0 );'), (69310, 1, u'+          assert( pOp->p3<=u.bh.pFrame->nMem );'), (69314, 1, u'+          assert( pOp->p3<=p->nMem );'), (69318, 1, u'+        assert( memIsValid(u.bh.pMem) );'), (69322, 1, u'+        assert( (u.bh.pMem->flags & MEM_Int)!=0 );  /* mem(P3) holds an integer */'), (69366, 1, u'+      assert( u.bh.v>0 );  /* EV: R-40812-03570 */'), (69435, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69436, 1, u'+  assert( memIsValid(u.bi.pData) );'), (69438, 1, u'+  assert( u.bi.pC!=0 );'), (69439, 1, u'+  assert( u.bi.pC->pCursor!=0 );'), (69440, 1, u'+  assert( u.bi.pC->pseudoTableReg==0 );'), (69441, 1, u'+  assert( u.bi.pC->isTable );'), (69446, 1, u'+    assert( u.bi.pKey->flags & MEM_Int );'), (69447, 1, u'+    assert( memIsValid(u.bi.pKey) );'), (69451, 1, u'+    assert( pOp->opcode==OP_InsertInt );'), (69461, 1, u'+    assert( u.bi.pData->flags & (MEM_Blob|MEM_Str) );'), (69483, 1, u'+    assert( u.bi.pC->isTable );'), (69485, 1, u'+    assert( u.bi.pC->iDb>=0 );'), (69517, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69519, 1, u'+  assert( u.bj.pC!=0 );'), (69520, 1, u'+  assert( u.bj.pC->pCursor!=0 );  /* Only valid for real tables, no pseudotables */'), (69526, 1, u'+    assert( u.bj.pC->isTable );'), (69527, 1, u'+    assert( u.bj.pC->rowidIsValid );  /* lastRowid set by previous OP_NotFound */'), (69538, 1, u'+  assert( u.bj.pC->deferredMoveto==0 );'), (69551, 1, u'+    assert( u.bj.pC->iDb>=0 );'), (69583, 1, u'+  assert( isSorter(u.bk.pC) );'), (69603, 1, u'+  assert( u.bl.pC->isSorter );'), (69641, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69643, 1, u'+  assert( u.bm.pC->isSorter==0 );'), (69644, 1, u'+  assert( u.bm.pC->isTable || pOp->opcode!=OP_RowData );'), (69645, 1, u'+  assert( u.bm.pC->isIndex || pOp->opcode==OP_RowData );'), (69646, 1, u'+  assert( u.bm.pC!=0 );'), (69647, 1, u'+  assert( u.bm.pC->nullRow==0 );'), (69648, 1, u'+  assert( u.bm.pC->pseudoTableReg==0 );'), (69649, 1, u'+  assert( u.bm.pC->pCursor!=0 );'), (69651, 1, u'+  assert( sqlite3BtreeCursorIsValid(u.bm.pCrsr) );'), (69658, 1, u'+  assert( u.bm.pC->deferredMoveto==0 );'), (69663, 1, u'+    assert( !u.bm.pC->isTable );'), (69665, 1, u'+    assert( rc==SQLITE_OK );    /* True because of CursorMoveto() call above */'), (69672, 1, u'+    assert( rc==SQLITE_OK );    /* DataSize() cannot fail */'), (69709, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69711, 1, u'+  assert( u.bn.pC!=0 );'), (69712, 1, u'+  assert( u.bn.pC->pseudoTableReg==0 || u.bn.pC->nullRow );'), (69722, 1, u'+    assert( u.bn.pModule->xRowid );'), (69727, 1, u'+    assert( u.bn.pC->pCursor!=0 );'), (69734, 1, u'+      assert( rc==SQLITE_OK );  /* Always so because of CursorMoveto() above */'), (69752, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69754, 1, u'+  assert( u.bo.pC!=0 );'), (69757, 1, u'+  assert( u.bo.pC->pCursor || u.bo.pC->pVtabCursor );'), (69779, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69781, 1, u'+  assert( u.bp.pC!=0 );'), (69834, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69836, 1, u'+  assert( u.bq.pC!=0 );'), (69837, 1, u'+  assert( u.bq.pC->isSorter==(pOp->opcode==OP_SorterSort) );'), (69843, 1, u'+    assert( u.bq.pCrsr );'), (69851, 1, u'+  assert( pOp->p2>0 && pOp->p2<p->nOp );'), (69899, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69900, 1, u'+  assert( pOp->p5<=ArraySize(p->aCounter) );'), (69905, 1, u'+  assert( u.br.pC->isSorter==(pOp->opcode==OP_SorterNext) );'), (69907, 1, u'+    assert( pOp->opcode==OP_SorterNext );'), (69911, 1, u'+    assert( u.br.pC->deferredMoveto==0 );'), (69912, 1, u'+    assert( u.br.pC->pCursor );'), (69913, 1, u'+    assert( pOp->opcode!=OP_Next || pOp->p4.xAdvance==sqlite3BtreeNext );'), (69914, 1, u'+    assert( pOp->opcode!=OP_Prev || pOp->p4.xAdvance==sqlite3BtreePrevious );'), (69951, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69953, 1, u'+  assert( u.bs.pC!=0 );'), (69954, 1, u'+  assert( u.bs.pC->isSorter==(pOp->opcode==OP_SorterInsert) );'), (69956, 1, u'+  assert( pIn2->flags & MEM_Blob );'), (69959, 1, u'+    assert( u.bs.pC->isTable==0 );'), (69970, 1, u'+        assert( u.bs.pC->deferredMoveto==0 );'), (69992, 1, u'+  assert( pOp->p3>0 );'), (69993, 1, u'+  assert( pOp->p2>0 && pOp->p2+pOp->p3<=p->nMem+1 );'), (69994, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (69996, 1, u'+  assert( u.bt.pC!=0 );'), (70004, 1, u'+    { int i; for(i=0; i<u.bt.r.nField; i++) assert( memIsValid(&u.bt.r.aMem[i]) ); }'), (70010, 1, u'+    assert( u.bt.pC->deferredMoveto==0 );'), (70031, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70033, 1, u'+  assert( u.bu.pC!=0 );'), (70039, 1, u'+    assert( u.bu.pC->deferredMoveto==0 );'), (70040, 1, u'+    assert( u.bu.pC->isTable==0 );'), (70087, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70089, 1, u'+  assert( u.bv.pC!=0 );'), (70090, 1, u'+  assert( u.bv.pC->isOrdered );'), (70092, 1, u'+    assert( u.bv.pC->deferredMoveto==0 );'), (70093, 1, u'+    assert( pOp->p5==0 || pOp->p5==1 );'), (70094, 1, u'+    assert( pOp->p4type==P4_INT32 );'), (70104, 1, u'+    { int i; for(i=0; i<u.bv.r.nField; i++) assert( memIsValid(&u.bv.r.aMem[i]) ); }'), (70110, 1, u'+      assert( pOp->opcode==OP_IdxGE );'), (70164, 1, u'+    assert( u.bw.iCnt==1 );'), (70165, 1, u'+    assert( (p->btreeMask & (((yDbMask)1)<<u.bw.iDb))!=0 );'), (70173, 1, u'+      assert( resetSchemaOnFault==0 || resetSchemaOnFault==u.bw.iDb+1 );'), (70205, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p2))!=0 );'), (70212, 1, u'+      assert( memIsValid(&aMem[pOp->p3]) );'), (70251, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (70252, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (70254, 1, u'+  assert( u.by.pDb->pBt!=0 );'), (70288, 1, u'+    assert( u.bz.iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[u.bz.iDb].pBt) );'), (70293, 1, u'+  assert( u.bz.iDb>=0 && u.bz.iDb<db->nDb );'), (70294, 1, u'+  assert( DbHasProperty(db, u.bz.iDb, DB_SchemaLoaded) );'), (70306, 1, u'+      assert( db->init.busy==0 );'), (70309, 1, u'+      assert( !db->mallocFailed );'), (70331, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (70406, 1, u'+  assert( u.ca.nRoot>0 );'), (70409, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (70411, 1, u'+  assert( (u.ca.pnErr->flags & MEM_Int)!=0 );'), (70412, 1, u'+  assert( (u.ca.pnErr->flags & (MEM_Str|MEM_Blob))==0 );'), (70418, 1, u'+  assert( pOp->p5<db->nDb );'), (70419, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p5))!=0 );'), (70426, 1, u'+    assert( u.ca.z==0 );'), (70448, 1, u'+  assert( (pIn2->flags & MEM_Int)!=0 );'), (70514, 1, u'+  assert( pIn3->flags&MEM_Int );'), (70524, 1, u'+  assert( pOp->p4type==P4_INT32 );'), (70525, 1, u'+  assert( u.cc.iSet==-1 || u.cc.iSet>=0 );'), (70571, 1, u'+  assert( u.cd.pProgram->nOp>0 );'), (70640, 1, u'+    assert( u.cd.pProgram->nMem+u.cd.pProgram->nCsr==u.cd.pFrame->nChildMem );'), (70641, 1, u'+    assert( u.cd.pProgram->nCsr==u.cd.pFrame->nChildCsr );'), (70642, 1, u'+    assert( pc==u.cd.pFrame->pc );'), (70750, 1, u'+  assert( memIsValid(u.cf.pIn1) );'), (70770, 1, u'+  assert( pIn1->flags&MEM_Int );'), (70786, 1, u'+  assert( pIn1->flags&MEM_Int );'), (70803, 1, u'+  assert( pIn1->flags&MEM_Int );'), (70832, 1, u'+  assert( u.cg.n>=0 );'), (70835, 1, u'+  assert( u.cg.apVal || u.cg.n==0 );'), (70837, 1, u'+    assert( memIsValid(u.cg.pRec) );'), (70843, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (70855, 1, u'+    assert( pOp>p->aOp );'), (70856, 1, u'+    assert( pOp[-1].p4type==P4_COLLSEQ );'), (70857, 1, u'+    assert( pOp[-1].opcode==OP_CollSeq );'), (70866, 1, u'+    assert( pOp[-1].opcode==OP_CollSeq );'), (70892, 1, u'+  assert( pOp->p1>0 && pOp->p1<=p->nMem );'), (70894, 1, u'+  assert( (u.ch.pMem->flags & ~(MEM_Null|MEM_Agg))==0 );'), (70928, 1, u'+  assert( pOp->p2==SQLITE_CHECKPOINT_PASSIVE'), (70968, 1, u'+  assert( u.cj.eNew==PAGER_JOURNALMODE_DELETE'), (70976, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (71028, 1, u'+      assert( sqlite3BtreeIsInTrans(u.cj.pBt)==0 );'), (71076, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (71077, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (71125, 1, u'+    assert( p1>=0 && p1<db->nDb );'), (71126, 1, u'+    assert( (p->btreeMask & (((yDbMask)1)<<p1))!=0 );'), (71127, 1, u'+    assert( isWriteLock==0 || isWriteLock==1 );'), (71204, 1, u'+  assert(u.cm.pVtab && u.cm.pModule);'), (71262, 1, u'+  assert( memIsValid(u.cn.pQuery) );'), (71264, 1, u'+  assert( u.cn.pCur->pVtabCursor );'), (71270, 1, u'+  assert( (u.cn.pQuery->flags&MEM_Int)!=0 && u.cn.pArgc->flags==MEM_Int );'), (71317, 1, u'+  assert( pCur->pVtabCursor );'), (71318, 1, u'+  assert( pOp->p3>0 && pOp->p3<=p->nMem );'), (71327, 1, u'+  assert( u.co.pModule->xColumn );'), (71377, 1, u'+  assert( u.cp.pCur->pVtabCursor );'), (71383, 1, u'+  assert( u.cp.pModule->xNext );'), (71422, 1, u'+  assert( u.cq.pVtab->pModule->xRename );'), (71423, 1, u'+  assert( memIsValid(u.cq.pName) );'), (71425, 1, u'+  assert( u.cq.pName->flags & MEM_Str );'), (71474, 1, u'+  assert( pOp->p2==1        || pOp->p5==OE_Fail   || pOp->p5==OE_Rollback'), (71480, 1, u'+  assert( pOp->p4type==P4_VTAB );'), (71486, 1, u'+      assert( memIsValid(u.cr.pX) );'), (71497, 1, u'+      assert( u.cr.nArg>1 && u.cr.apArg[0] && (u.cr.apArg[0]->flags&MEM_Null) );'), (71595, 1, u'+  assert( pOp->opcode==OP_Noop || pOp->opcode==OP_Explain );'), (71625, 1, u'+    assert( pc>=-1 && pc<p->nOp );'), (71645, 1, u'+  assert( rc );'), (71685, 1, u'+  assert( p->zErrMsg==0 );'), (71696, 1, u'+  assert( db->u1.isInterrupted );'), (71764, 1, u'+  assert( v->aVar[0].flags&MEM_Int );'), (71800, 1, u'+  assert( rc!=SQLITE_OK || zErr==0 );'), (71801, 1, u'+  assert( rc!=SQLITE_ROW && rc!=SQLITE_DONE );'), (71956, 1, u'+    assert( pBlob->pStmt || db->mallocFailed );'), (72089, 1, u'+    assert( db == v->db );'), (72162, 1, u'+    assert( rc!=SQLITE_SCHEMA );'), (72166, 1, u'+  assert( rc==SQLITE_OK || p->pStmt==0 );'), (72358, 1, u'+  assert( p->aBuffer );'), (72374, 1, u'+    assert( nRead>0 );'), (72378, 1, u'+    assert( rc!=SQLITE_IOERR_SHORT_READ );'), (72421, 1, u'+      assert( aNext!=p->aAlloc );'), (72501, 1, u'+  assert( pSorter->iWriteOff>iStart );'), (72502, 1, u'+  assert( pIter->aAlloc==0 );'), (72503, 1, u'+  assert( pIter->aBuffer==0 );'), (72525, 1, u'+      assert( rc!=SQLITE_IOERR_SHORT_READ );'), (72577, 1, u'+    assert( r2->nField>0 );'), (72603, 1, u'+  assert( iOut<pSorter->nTree && iOut>0 );'), (72622, 1, u'+    assert( pCsr->pSorter->pUnpacked!=0 );  /* allocated in vdbeSorterMerge() */'), (72646, 1, u'+  assert( pCsr->pKeyInfo && pCsr->pBt==0 );'), (72654, 1, u'+  assert( pSorter->pUnpacked==(UnpackedRecord *)d );'), (72833, 1, u'+    assert( p->iBufEnd<p->nBuffer );'), (72895, 1, u'+    assert( pSorter->pRecord==0 );'), (72904, 1, u'+    assert( rc!=SQLITE_OK || pSorter->pTemp1 );'), (72905, 1, u'+    assert( pSorter->iWriteOff==0 );'), (72906, 1, u'+    assert( pSorter->nPMA==0 );'), (72941, 1, u'+  assert( pSorter );'), (72975, 1, u'+    assert( rc!=SQLITE_OK || (nExpect==pSorter->iWriteOff) );'), (72999, 1, u'+    assert( rc!=SQLITE_OK || pSorter->iReadOff<=pSorter->iWriteOff );'), (73025, 1, u'+  assert( pSorter );'), (73032, 1, u'+    assert( pSorter->aTree==0 );'), (73043, 1, u'+  assert( nIter>0 );'), (73074, 1, u'+      assert( rc!=SQLITE_OK || pSorter->aIter[ pSorter->aTree[1] ].pFile );'), (73081, 1, u'+        assert( iWrite2==0 );'), (73091, 1, u'+          assert( pIter->pFile );'), (73271, 1, u'+        assert(p->iSize<=p->nBuf);'), (73555, 1, u'+  assert( iOfst+iAmt<=p->endpoint.iOffset );'), (73600, 1, u'+  assert( iOfst==p->endpoint.iOffset );'), (73616, 1, u'+        assert( p->pFirst );'), (73619, 1, u'+        assert( !p->pFirst );'), (73640, 1, u'+  assert(size==0);'), (73713, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(p) );'), (73986, 1, u'+  assert( iCol>=0 && iCol<pEList->nExpr );'), (73988, 1, u'+  assert( pOrig!=0 );'), (73989, 1, u'+  assert( pOrig->flags & EP_Resolved );'), (74017, 1, u'+    assert( (pExpr->flags & (EP_Reduced|EP_TokenOnly))==0 );'), (74117, 1, u'+  assert( pNC );     /* the name context cannot be NULL. */'), (74118, 1, u'+  assert( zCol );    /* The Z in X.Y.Z cannot be NULL */'), (74119, 1, u'+  assert( !ExprHasAnyProperty(pExpr, EP_TokenOnly|EP_Reduced) );'), (74132, 1, u'+      assert( db->aDb[i].zName );'), (74151, 1, u'+        assert( pTab!=0 && pTab->zName!=0 );'), (74152, 1, u'+        assert( pTab->nCol>0 );'), (74172, 1, u'+          assert( zTabName!=0 );'), (74212, 1, u'+      assert( op==TK_DELETE || op==TK_UPDATE || op==TK_INSERT );'), (74287, 1, u'+          assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (74288, 1, u'+          assert( pExpr->x.pList==0 );'), (74289, 1, u'+          assert( pExpr->x.pSelect==0 );'), (74298, 1, u'+          assert( zTab==0 && zDb==0 );'), (74359, 1, u'+    assert( pMatch->iCursor==pExpr->iTable );'), (74372, 1, u'+    assert( pNC!=0 );'), (74379, 1, u'+      assert( pTopNC!=0 );'), (74429, 1, u'+  assert( pNC!=0 );'), (74431, 1, u'+  assert( pParse==pWalker->pParse );'), (74440, 1, u'+      assert( pSrcList->a[i].iCursor>=0 && pSrcList->a[i].iCursor<pParse->nTab);'), (74454, 1, u'+      assert( pSrcList && pSrcList->nSrc==1 );'), (74487, 1, u'+        assert( pRight->op==TK_DOT );'), (74511, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (74583, 1, u'+        assert( pNC->nRef>=nRef );'), (74665, 1, u'+  assert( sqlite3ExprIsInteger(pE, &i)==0 );'), (74757, 1, u'+    assert( pEList!=0 );'), (74773, 1, u'+            assert(pDup);'), (74789, 1, u'+          assert( pItem->pExpr->op==TK_COLLATE );'), (74790, 1, u'+          assert( pItem->pExpr->pLeft==pE );'), (74841, 1, u'+  assert( pEList!=0 );  /* sqlite3SelectNew() guarantees this */'), (74940, 1, u'+  assert( p!=0 );'), (74965, 1, u'+    assert( (p->selFlags & SF_Expanded)!=0 );'), (74966, 1, u'+    assert( (p->selFlags & SF_Resolved)==0 );'), (75001, 1, u'+        assert( pItem->isCorrelated==0 && nRef<=0 );'), (75015, 1, u'+    assert( pEList!=0 );'), (75026, 1, u'+    assert( (p->selFlags & SF_Aggregate)==0 );'), (75214, 1, u'+  assert( p!=0 );'), (75261, 1, u'+    assert( pExpr->flags&EP_xIsSelect );'), (75266, 1, u'+    assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (75277, 1, u'+    assert( pExpr->pTab && j<pExpr->pTab->nCol );'), (75304, 1, u'+  assert( zC!=0 );'), (75340, 1, u'+    assert( op!=TK_REGISTER || p->op2!=TK_COLLATE );'), (75397, 1, u'+    assert( aff1==0 || aff2==0 );'), (75408, 1, u'+  assert( pExpr->op==TK_EQ || pExpr->op==TK_IN || pExpr->op==TK_LT ||'), (75411, 1, u'+  assert( pExpr->pLeft );'), (75469, 1, u'+  assert( pLeft );'), (75638, 1, u'+      assert( iValue>=0 );'), (75652, 1, u'+        assert( pToken->z!=0 || pToken->n==0 );'), (75697, 1, u'+    assert( db->mallocFailed );'), (75790, 1, u'+  assert( pToken );'), (75797, 1, u'+  assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (75823, 1, u'+  assert( !ExprHasAnyProperty(pExpr, EP_IntValue|EP_Reduced|EP_TokenOnly) );'), (75825, 1, u'+  assert( z!=0 );'), (75826, 1, u'+  assert( z[0]!=0 );'), (75829, 1, u"+    assert( z[0]=='?' );"), (75892, 1, u'+  assert( !ExprHasProperty(p, EP_IntValue) || p->u.iValue>=0 );'), (75957, 1, u'+  assert( flags==EXPRDUP_REDUCE || flags==0 ); /* Only one flag value allowed */'), (75961, 1, u'+    assert( !ExprHasAnyProperty(p, EP_TokenOnly|EP_Reduced) );'), (75962, 1, u'+    assert( !ExprHasProperty(p, EP_FromJoin) );'), (75963, 1, u'+    assert( (p->flags2 & EP2_MallocedToken)==0 );'), (75964, 1, u'+    assert( (p->flags2 & EP2_Irreducible)==0 );'), (76026, 1, u'+    assert( pzBuffer==0 || isReduced );'), (76052, 1, u'+        assert( ExprHasProperty(p, EP_Reduced)==0 );'), (76248, 1, u'+  assert( p==0 );'), (76277, 1, u'+    assert( pList->nExpr>0 );'), (76284, 1, u'+  assert( pList->a!=0 );'), (76313, 1, u'+  assert( pList!=0 || pParse->db->mallocFailed!=0 );'), (76316, 1, u'+    assert( pList->nExpr>0 );'), (76318, 1, u'+    assert( pItem->zName==0 );'), (76338, 1, u'+  assert( pList!=0 || db->mallocFailed!=0 );'), (76341, 1, u'+    assert( pList->nExpr>0 );'), (76342, 1, u'+    assert( db->mallocFailed || pItem->pExpr==pSpan->pExpr );'), (76373, 1, u'+  assert( pList->a!=0 || pList->nExpr==0 );'), (76489, 1, u'+  assert( p->op!=TK_INTEGER || (p->flags & EP_IntValue)!=0'), (76592, 1, u'+      assert( p->iTable>=0 );  /* p cannot be part of a CHECK constraint */'), (76636, 1, u'+  assert( p->pGroupBy==0 );              /* Has no GROUP BY clause */'), (76638, 1, u'+  assert( p->pOffset==0 );               /* No LIMIT means no OFFSET */'), (76641, 1, u'+  assert( pSrc!=0 );'), (76646, 1, u'+  assert( pTab->pSelect==0 );            /* FROM clause is not a view */'), (76736, 1, u'+  assert( pX->op==TK_IN );'), (76750, 1, u'+    assert( p );                        /* Because of isCandidateForInOpt(p) */'), (76751, 1, u'+    assert( p->pEList!=0 );             /* Because of isCandidateForInOpt(p) */'), (76752, 1, u'+    assert( p->pEList->a[0].pExpr!=0 ); /* Because of isCandidateForInOpt(p) */'), (76753, 1, u'+    assert( p->pSrc!=0 );               /* Because of isCandidateForInOpt(p) */'), (76767, 1, u'+    assert(v);'), (76805, 1, u'+          assert( IN_INDEX_INDEX_DESC == IN_INDEX_INDEX_ASC+1 );'), (76957, 1, u'+        assert( !isRowid );'), (76960, 1, u'+        assert( (pExpr->iTable&0x0000FFFF)==pExpr->iTable );'), (77046, 1, u'+      assert( pExpr->op==TK_EXISTS || pExpr->op==TK_SELECT );'), (77048, 1, u'+      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (77116, 1, u'+  assert( v!=0 );       /* OOM detected prior to this routine */'), (77241, 1, u'+    assert( !sqlite3IsNaN(value) ); /* The new AtoF never returns NaN */'), (77260, 1, u'+    assert( i>=0 );'), (77267, 1, u'+    assert( z!=0 );'), (77307, 1, u'+  assert( iReg>0 );  /* Register numbers are always positive */'), (77308, 1, u'+  assert( iCol>=-1 && iCol<32768 );  /* Finite column numbers */'), (77323, 1, u'+    assert( p->iReg==0 || p->iTable!=iTab || p->iColumn!=iCol );'), (77395, 1, u'+  assert( N>0 );'), (77396, 1, u'+  assert( pParse->iCacheLevel>=N );'), (77471, 1, u'+  assert( v!=0 );'), (77511, 1, u'+  assert( iFrom>=iTo+nReg || iFrom+nReg<=iTo );'), (77560, 1, u'+  assert( target>0 && target<=pParse->nMem );'), (77562, 1, u'+    assert( pParse->db->mallocFailed );'), (77576, 1, u'+        assert( pCol->iMem>0 );'), (77589, 1, u'+        assert( pParse->ckBase>0 );'), (77604, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77610, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77623, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77624, 1, u"+      assert( pExpr->u.zToken[0]=='x' || pExpr->u.zToken[0]=='X' );"), (77625, 1, u"+      assert( pExpr->u.zToken[1]=='\\'' );"), (77628, 1, u"+      assert( z[n]=='\\'' );"), (77635, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77636, 1, u'+      assert( pExpr->u.zToken!=0 );'), (77637, 1, u'+      assert( pExpr->u.zToken[0]!=0 );'), (77640, 1, u"+        assert( pExpr->u.zToken[0]=='?'"), (77659, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77662, 1, u'+      assert( to_op==OP_ToText    || aff!=SQLITE_AFF_TEXT    );'), (77663, 1, u'+      assert( to_op==OP_ToBlob    || aff!=SQLITE_AFF_NONE    );'), (77664, 1, u'+      assert( to_op==OP_ToNumeric || aff!=SQLITE_AFF_NUMERIC );'), (77665, 1, u'+      assert( to_op==OP_ToInt     || aff!=SQLITE_AFF_INTEGER );'), (77666, 1, u'+      assert( to_op==OP_ToReal    || aff!=SQLITE_AFF_REAL    );'), (77688, 1, u'+      assert( TK_LT==OP_Lt );'), (77689, 1, u'+      assert( TK_LE==OP_Le );'), (77690, 1, u'+      assert( TK_GT==OP_Gt );'), (77691, 1, u'+      assert( TK_GE==OP_Ge );'), (77692, 1, u'+      assert( TK_EQ==OP_Eq );'), (77693, 1, u'+      assert( TK_NE==OP_Ne );'), (77733, 1, u'+      assert( TK_AND==OP_And );'), (77734, 1, u'+      assert( TK_OR==OP_Or );'), (77735, 1, u'+      assert( TK_PLUS==OP_Add );'), (77736, 1, u'+      assert( TK_MINUS==OP_Subtract );'), (77737, 1, u'+      assert( TK_REM==OP_Remainder );'), (77738, 1, u'+      assert( TK_BITAND==OP_BitAnd );'), (77739, 1, u'+      assert( TK_BITOR==OP_BitOr );'), (77740, 1, u'+      assert( TK_SLASH==OP_Divide );'), (77741, 1, u'+      assert( TK_LSHIFT==OP_ShiftLeft );'), (77742, 1, u'+      assert( TK_RSHIFT==OP_ShiftRight );'), (77743, 1, u'+      assert( TK_CONCAT==OP_Concat );'), (77764, 1, u'+      assert( pLeft );'), (77769, 1, u'+        assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77784, 1, u'+      assert( TK_BITNOT==OP_BitNot );'), (77785, 1, u'+      assert( TK_NOT==OP_Not );'), (77797, 1, u'+      assert( TK_ISNULL==OP_IsNull );'), (77798, 1, u'+      assert( TK_NOTNULL==OP_NotNull );'), (77812, 1, u'+        assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77831, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (77840, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (77855, 1, u'+        assert( nFarg>=2 );'), (77879, 1, u'+          assert( nFarg==1 );'), (77880, 1, u'+          assert( pFarg->a[0].pExpr!=0 );'), (77883, 1, u'+            assert( SQLITE_FUNC_LENGTH==OPFLAG_LENGTHARG );'), (77884, 1, u'+            assert( SQLITE_FUNC_TYPEOF==OPFLAG_TYPEOFARG );'), (78027, 1, u'+      assert( pExpr->iTable==0 || pExpr->iTable==1 );'), (78028, 1, u'+      assert( pExpr->iColumn>=-1 && pExpr->iColumn<pTab->nCol );'), (78029, 1, u'+      assert( pTab->iPKey<0 || pExpr->iColumn!=pTab->iPKey );'), (78030, 1, u'+      assert( p1>=0 && p1<(pTab->nCol*2+2) );'), (78073, 1, u'+    default: assert( op==TK_CASE ); {'), (78086, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList );'), (78087, 1, u'+      assert((pExpr->x.pList->nExpr % 2) == 0);'), (78088, 1, u'+      assert(pExpr->x.pList->nExpr > 0);'), (78112, 1, u'+          assert( pTest!=0 );'), (78134, 1, u'+      assert( db->mallocFailed || pParse->nErr>0'), (78141, 1, u'+      assert( pExpr->affinity==OE_Rollback'), (78154, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (78201, 1, u'+  assert( target>0 && target<=pParse->nMem );'), (78206, 1, u'+    assert( pParse->pVdbe || pParse->db->mallocFailed );'), (78230, 1, u'+  assert( target>0 );'), (78604, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (78621, 1, u'+    assert( r2==r1 );'), (78671, 1, u'+  assert( pList!=0 );'), (78672, 1, u'+  assert( target>0 );'), (78673, 1, u'+  assert( pParse->pVdbe!=0 );  /* Never gets this far otherwise */'), (78711, 1, u'+  assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (78763, 1, u'+  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (78795, 1, u'+      assert( TK_LT==OP_Lt );'), (78796, 1, u'+      assert( TK_LE==OP_Le );'), (78797, 1, u'+      assert( TK_GT==OP_Gt );'), (78798, 1, u'+      assert( TK_GE==OP_Ge );'), (78799, 1, u'+      assert( TK_EQ==OP_Eq );'), (78800, 1, u'+      assert( TK_NE==OP_Ne );'), (78831, 1, u'+      assert( TK_ISNULL==OP_IsNull );'), (78832, 1, u'+      assert( TK_NOTNULL==OP_NotNull );'), (78883, 1, u'+  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (78909, 1, u'+  assert( pExpr->op!=TK_ISNULL || op==OP_NotNull );'), (78910, 1, u'+  assert( pExpr->op!=TK_NOTNULL || op==OP_IsNull );'), (78911, 1, u'+  assert( pExpr->op!=TK_NE || op==OP_Eq );'), (78912, 1, u'+  assert( pExpr->op!=TK_EQ || op==OP_Ne );'), (78913, 1, u'+  assert( pExpr->op!=TK_LT || op==OP_Ge );'), (78914, 1, u'+  assert( pExpr->op!=TK_LE || op==OP_Gt );'), (78915, 1, u'+  assert( pExpr->op!=TK_GT || op==OP_Le );'), (78916, 1, u'+  assert( pExpr->op!=TK_GE || op==OP_Lt );'), (79032, 1, u'+  assert( !ExprHasAnyProperty(pA, EP_TokenOnly|EP_Reduced) );'), (79033, 1, u'+  assert( !ExprHasAnyProperty(pB, EP_TokenOnly|EP_Reduced) );'), (79136, 1, u'+  assert( pExpr->op==TK_AGG_FUNCTION );'), (79202, 1, u'+          assert( !ExprHasAnyProperty(pExpr, EP_TokenOnly|EP_Reduced) );'), (79280, 1, u'+            assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (79284, 1, u'+            assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (79297, 1, u'+        assert( !ExprHasAnyProperty(pExpr, EP_TokenOnly|EP_Reduced) );'), (79330, 1, u'+  assert( pNC->pSrcList!=0 );'), (79390, 1, u'+    assert( !usedAsColumnCache(pParse, i, i+n-1) );'), (79492, 1, u'+      assert( len>0 );'), (79614, 1, u'+      assert( len>0 );'), (79757, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (79759, 1, u'+  assert( iDb>=0 );'), (79765, 1, u'+    assert( iTrigDb==iDb || iTrigDb==1 );'), (79829, 1, u'+  assert( pSrc->nSrc==1 );'), (79830, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (80052, 1, u'+  assert( pNew );'), (80054, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (80061, 1, u'+  assert( pTab );'), (80172, 1, u'+  assert( pParse->pNewTable==0 );'), (80173, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (80194, 1, u'+  assert( pTab->addColOffset>0 );'), (80209, 1, u'+  assert( pNew->nCol>0 );'), (80211, 1, u'+  assert( nAlloc>=pNew->nCol && nAlloc%8==0 && nAlloc-pNew->nCol<8 );'), (80403, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (80404, 1, u'+  assert( sqlite3VdbeDb(v)==db );'), (80569, 1, u'+    assert( p->nSample - iMin - 1 >= 0 );'), (80589, 1, u'+      assert( i<p->nSample );'), (80640, 1, u'+  assert( p!=0 );'), (80723, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (80725, 1, u'+  assert( iDb>=0 );'), (80726, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (80756, 1, u'+    assert( iDb==sqlite3SchemaToIndex(db, pIdx->pSchema) );'), (80817, 1, u'+      assert( pIdx->azColl!=0 );'), (80818, 1, u'+      assert( pIdx->azColl[i]!=0 );'), (80972, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (80989, 1, u'+  assert( pTab!=0 );'), (80990, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (81027, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (81032, 1, u'+  assert( pName2!=0 || pName1==0 );'), (81102, 1, u'+  assert( argc==3 );'), (81177, 1, u'+  assert( db->lookaside.bEnabled==0 );'), (81202, 1, u'+    assert( pIdx->nSample==0 );'), (81240, 1, u'+    assert( idx<pIdx->nSample );'), (81266, 1, u'+      default: assert( eType==SQLITE_TEXT || eType==SQLITE_BLOB ); {'), (81318, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (81319, 1, u'+  assert( db->aDb[iDb].pBt!=0 );'), (81322, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (81474, 1, u'+    assert( z && zName );'), (81508, 1, u'+  assert( pVfs );'), (81582, 1, u'+    assert( iDb>=2 );'), (81720, 1, u'+  assert( v || db->mallocFailed );'), (81723, 1, u'+    assert( pFunc->nArg==-1 || (pFunc->nArg&0xff)==pFunc->nArg );'), (81803, 1, u'+  assert( db->nDb>iDb );'), (82085, 1, u'+  assert( pExpr->op==TK_COLUMN || pExpr->op==TK_TRIGGER );'), (82089, 1, u'+    assert( pTabList );'), (82101, 1, u'+    assert( iCol<pTab->nCol );'), (82104, 1, u'+    assert( pTab->iPKey<pTab->nCol );'), (82109, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (82162, 1, u'+  assert( pParse );'), (82250, 1, u'+  assert( iDb>=0 );'), (82284, 1, u'+  assert( pVdbe!=0 ); /* sqlite3GetVdbe cannot fail: VDBE already allocated */'), (82311, 1, u'+  assert( pParse->pToplevel==0 );'), (82321, 1, u'+  assert( !pParse->isMultiWrite'), (82322, 1, u'+       || sqlite3VdbeAssertMayAbort(v, pParse->mayAbort));'), (82341, 1, u'+          assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (82381, 1, u'+    assert( pParse->iCacheLevel==0 );  /* Disables and re-enables match */'), (82420, 1, u'+  assert( pParse->nested<10 );  /* Nesting should only be of limited depth */'), (82453, 1, u'+  assert( zName!=0 );'), (82456, 1, u'+  assert( zDatabase!=0 || sqlite3BtreeHoldsAllMutexes(db) );'), (82460, 1, u'+    assert( sqlite3SchemaMutexHeld(db, j, 0) );'), (82519, 1, u'+  assert( p->pSchema==0 || p->zDatabase==0 );'), (82546, 1, u'+  assert( zDb!=0 || sqlite3BtreeHoldsAllMutexes(db) );'), (82550, 1, u'+    assert( pSchema );'), (82552, 1, u'+    assert( sqlite3SchemaMutexHeld(db, j, 0) );'), (82581, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (82640, 1, u'+  assert( iDb<db->nDb );'), (82644, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (82645, 1, u'+  assert( pDb->pSchema!=0 );'), (82654, 1, u'+    assert( pDb->pSchema!=0 );'), (82693, 1, u'+  assert( pTable!=0 );'), (82725, 1, u'+  assert( !pTable || pTable->nRef>0 );'), (82740, 1, u'+    assert( pIndex->pSchema==pTable->pSchema );'), (82746, 1, u'+      assert( db==0 || sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) );'), (82747, 1, u'+      assert( pOld==pIndex || pOld==0 );'), (82770, 1, u'+  assert( nLookaside==0 || nLookaside==db->lookaside.nOut );'), (82781, 1, u'+  assert( db!=0 );'), (82782, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (82783, 1, u'+  assert( zTabName );'), (82784, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (82906, 1, u'+    assert( db->init.iDb==0 || db->init.busy );'), (82997, 1, u'+  assert( (isTemp & 1)==isTemp );'), (83040, 1, u'+        assert( !db->init.busy );'), (83063, 1, u'+  assert( pParse->pNewTable==0 );'), (83072, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (83302, 1, u'+  assert( pCol->zType==0 );'), (83400, 1, u'+    assert( autoInc==0 || autoInc==1 );'), (83467, 1, u'+      assert( pIdx->nColumn==1 );'), (83532, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (83639, 1, u'+    assert( pCol->affinity-SQLITE_AFF_TEXT >= 0 );'), (83640, 1, u'+    assert( pCol->affinity-SQLITE_AFF_TEXT < ArraySize(azType) );'), (83649, 1, u'+    assert( pCol->affinity==SQLITE_AFF_NONE'), (83653, 1, u'+    assert( k<=n );'), (83695, 1, u'+  assert( !db->init.busy || !pSelect );'), (83786, 1, u'+      assert(pParse->nTab==1);'), (83796, 1, u'+        assert( p->aCol==0 );'), (83840, 1, u'+      assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (83861, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (83865, 1, u'+      assert( p==pOld );  /* Malloc must have failed inside HashInsert() */'), (83876, 1, u'+      assert( !pSelect && pCons && pEnd );'), (83977, 1, u'+  assert( pTable );'), (84011, 1, u'+  assert( pTable->nCol>=0 );'), (84020, 1, u'+  assert( pTable->pSelect );'), (84039, 1, u'+      assert( pTable->aCol==0 );'), (84045, 1, u'+      assert( sqlite3SchemaMutexHeld(db, 0, pTable->pSchema) );'), (84066, 1, u'+  assert( sqlite3SchemaMutexHeld(db, idx, 0) );'), (84105, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (84195, 1, u'+      assert( pIdx->pSchema==pTab->pSchema );'), (84204, 1, u'+      assert( iDb>=0 && iDb<pParse->db->nDb );'), (84246, 1, u'+  assert( v!=0 );'), (84261, 1, u'+    assert( pTrigger->pSchema==pTab->pSchema ||'), (84319, 1, u'+  assert( pParse->nErr==0 );'), (84320, 1, u'+  assert( pName->nSrc==1 );'), (84330, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (84441, 1, u'+  assert( pTo!=0 );'), (84512, 1, u'+  assert( sqlite3SchemaMutexHeld(db, 0, p->pSchema) );'), (84521, 1, u'+    assert( pNextTo->pPrevTo==0 );'), (84550, 1, u'+  assert( isDeferred==0 || isDeferred==1 ); /* EV: R-30323-21917 */'), (84687, 1, u'+  assert( pStart==0 || pEnd!=0 ); /* pEnd must be non-NULL if pStart is */'), (84688, 1, u'+  assert( pParse->nErr==0 );      /* Never called with prior errors */'), (84705, 1, u'+    assert( pName1 && pName2 );'), (84708, 1, u'+    assert( pName && pName->z );'), (84728, 1, u'+      assert(0);'), (84731, 1, u'+    assert( db->mallocFailed==0 || pTab==0 );'), (84733, 1, u'+    assert( db->aDb[iDb].pSchema==pTab->pSchema );'), (84735, 1, u'+    assert( pName==0 );'), (84736, 1, u'+    assert( pStart==0 );'), (84743, 1, u'+  assert( pTab!=0 );'), (84744, 1, u'+  assert( pParse->nErr==0 );'), (84779, 1, u'+    assert( pName->z!=0 );'), (84793, 1, u'+        assert( !db->init.busy );'), (84843, 1, u'+      assert( pExpr->op==TK_COLLATE );'), (84869, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pIndex->aiRowEst) );'), (84870, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pIndex->azColl) );'), (84881, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (84919, 1, u'+      assert( pListItem->pExpr->op==TK_COLLATE );'), (84922, 1, u'+      assert( nExtra>=nColl );'), (84965, 1, u'+      assert( pIdx->onError!=OE_None );'), (84966, 1, u'+      assert( pIdx->autoIndex );'), (84967, 1, u'+      assert( pIndex->onError!=OE_None );'), (85005, 1, u'+    assert( sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) );'), (85010, 1, u'+      assert( p==pIndex );  /* Malloc must have failed */'), (85053, 1, u'+      assert( pEnd!=0 );'), (85146, 1, u'+  assert( a!=0 );'), (85169, 1, u'+  assert( pParse->nErr==0 );   /* Never called with prior errors */'), (85173, 1, u'+  assert( pName->nSrc==1 );'), (85350, 1, u'+  assert( iStart>=0 );'), (85351, 1, u'+  assert( nExtra>=1 );'), (85352, 1, u'+  assert( pSrc!=0 );'), (85353, 1, u'+  assert( iStart<=pSrc->nSrc );'), (85363, 1, u'+      assert( db->mallocFailed );'), (85430, 1, u'+  assert( pDatabase==0 || pTable!=0 );  /* Cannot have C without B */'), (85461, 1, u'+  assert(pList || pParse->db->mallocFailed );'), (85532, 1, u'+  assert( pAlias!=0 );'), (85542, 1, u'+  assert( p==0 );'), (85554, 1, u'+  assert( pIndexedBy!=0 );'), (85557, 1, u'+    assert( pItem->notIndexed==0 && pItem->zIndex==0 );'), (85586, 1, u'+    assert( p->a || p->nSrc==0 );'), (85602, 1, u'+  assert( pParse!=0 );'), (85604, 1, u'+  assert( db!=0 );'), (85626, 1, u'+  assert( pParse!=0 );'), (85627, 1, u'+  assert( pParse->db!=0 );'), (85643, 1, u'+  assert( pParse!=0 );'), (85644, 1, u'+  assert( pParse->db!=0 );'), (85664, 1, u'+    assert( !SAVEPOINT_BEGIN && SAVEPOINT_RELEASE==1 && SAVEPOINT_ROLLBACK==2 );'), (85698, 1, u'+    assert( db->aDb[1].pSchema );'), (85750, 1, u'+    assert( iDb<db->nDb );'), (85751, 1, u'+    assert( db->aDb[iDb].pBt!=0 || iDb==1 );'), (85752, 1, u'+    assert( iDb<SQLITE_MAX_ATTACHED+2 );'), (85753, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (85846, 1, u'+  assert( (errCode&0xff)==SQLITE_CONSTRAINT );'), (85860, 1, u'+  assert( zColl!=0 );'), (85863, 1, u'+    assert( z!=0 );'), (85903, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );  /* Needed for schema access */'), (85905, 1, u'+    assert( pDb!=0 );'), (85949, 1, u'+    assert( pName1->z );'), (86002, 1, u'+    assert( &pKey->aSortOrder[nCol]==&(((u8 *)pKey)[nBytes]) );'), (86005, 1, u'+      assert( zColl );'), (86043, 1, u'+  assert( !db->xCollNeeded || !db->xCollNeeded16 );'), (86124, 1, u'+  assert( !p || p->xCmp );'), (86150, 1, u'+    assert( p==pColl );'), (86197, 1, u'+      assert( pDel==0 || pDel==pColl );'), (86235, 1, u'+  assert( SQLITE_UTF8==1 && SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (86236, 1, u'+  assert( enc>=SQLITE_UTF8 && enc<=SQLITE_UTF16BE );'), (86333, 1, u'+    assert( pOther!=pDef && pOther->pNext!=pDef );'), (86377, 1, u'+  assert( nArg>=(-2) );'), (86378, 1, u'+  assert( nArg>=(-1) || createFlag==0 );'), (86379, 1, u'+  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (86533, 1, u'+  assert( pItem && pSrc->nSrc==1 );'), (86604, 1, u'+    assert( pFrom->nSrc==1 );'), (86607, 1, u'+    assert( pFrom->a[0].pOn==0 );'), (86608, 1, u'+    assert( pFrom->a[0].pUsing==0 );'), (86657, 1, u'+    assert( pOffset == 0 );'), (86750, 1, u'+  assert( pTabList->nSrc==1 );'), (86785, 1, u'+  assert( iDb<db->nDb );'), (86788, 1, u'+  assert( rcauth==SQLITE_OK || rcauth==SQLITE_DENY || rcauth==SQLITE_IGNORE );'), (86792, 1, u'+  assert(!isView || pTrigger);'), (86796, 1, u'+  assert( pTabList->nSrc==1 );'), (86851, 1, u'+    assert( !isView );'), (86855, 1, u'+      assert( pIdx->pSchema==pTab->pSchema );'), (86992, 1, u'+  assert( v );'), (87204, 1, u'+  assert( argc>1 );'), (87207, 1, u'+  assert( pColl );'), (87208, 1, u'+  assert( mask==-1 || mask==0 );'), (87252, 1, u'+  assert( argc==1 );'), (87286, 1, u'+  assert( argc==1 );'), (87397, 1, u'+  assert( argc==3 || argc==2 );'), (87409, 1, u'+    assert( len==sqlite3_value_bytes(argv[0]) );'), (87448, 1, u'+  assert( p1>=0 && p2>=0 );'), (87475, 1, u'+  assert( argc==1 || argc==2 );'), (87515, 1, u'+  assert( nByte>0 );'), (87541, 1, u'+  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (87560, 1, u'+  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (87618, 1, u'+  assert( argc==1 );'), (87771, 1, u'+        assert( esc==0 );         /* This is GLOB, not LIKE */'), (87772, 1, u"+        assert( matchSet<0x80 );  /* '[' is a single-byte character */"), (87801, 1, u'+      assert( esc==0 );    /* This only occurs for GLOB, not LIKE */'), (87900, 1, u'+  assert( zB==sqlite3_value_text(argv[0]) );  /* Encoding did not change */'), (88000, 1, u'+  assert( argc==1 );'), (88024, 1, u'+  assert( argc==1 );'), (88053, 1, u'+  assert( argc==1 );'), (88076, 1, u'+      assert( zBlob==sqlite3_value_blob(argv[0]) ); /* No encoding change */'), (88117, 1, u'+      assert( sqlite3_value_type(argv[0])==SQLITE_NULL );'), (88192, 1, u'+  assert( argc==1 );'), (88196, 1, u'+  assert( pBlob==sqlite3_value_blob(argv[0]) );  /* No encoding change */'), (88219, 1, u'+  assert( argc==1 );'), (88253, 1, u'+  assert( argc==3 );'), (88258, 1, u'+  assert( zStr==sqlite3_value_text(argv[0]) );  /* No encoding change */'), (88261, 1, u'+    assert( sqlite3_value_type(argv[1])==SQLITE_NULL'), (88266, 1, u'+    assert( sqlite3_value_type(argv[1])!=SQLITE_NULL );'), (88271, 1, u'+  assert( zPattern==sqlite3_value_text(argv[1]) );  /* No encoding change */'), (88275, 1, u'+  assert( zRep==sqlite3_value_text(argv[2]) );'), (88277, 1, u'+  assert( nOut<SQLITE_MAX_LENGTH );'), (88309, 1, u'+  assert( j+nStr-i+1==nOut );'), (88312, 1, u'+  assert( j<=nOut );'), (88341, 1, u'+  assert( zIn==sqlite3_value_text(argv[0]) );'), (88431, 1, u'+  assert( argc==1 );'), (88511, 1, u'+  assert( argc==1 );'), (88580, 1, u'+  assert( argc==1 || p==0 || p->n>0x7fffffff'), (88653, 1, u'+  assert( argc==1 || argc==2 );'), (88699, 1, u'+  assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (88753, 1, u'+  assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (88766, 1, u'+  assert( (char*)&likeInfoAlt == (char*)&likeInfoAlt.matchAll );'), (88767, 1, u'+  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );'), (88768, 1, u'+  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );'), (89072, 1, u'+  assert( ppIdx && *ppIdx==0 );'), (89073, 1, u'+  assert( !paiCol || *paiCol==0 );'), (89074, 1, u'+  assert( pParse );'), (89097, 1, u'+    assert( nCol>1 );'), (89281, 1, u'+          assert( aiCol[i]!=pTab->iPKey );'), (89306, 1, u'+    assert( nIncr==1 );'), (89367, 1, u'+  assert( !pIdx || pIdx->pTable==pTab );'), (89409, 1, u'+    assert( iCol>=0 );'), (89523, 1, u'+    assert( v );                  /* VDBE has already been allocated */'), (89591, 1, u'+  assert( (regOld==0)!=(regNew==0) );'), (89620, 1, u'+      assert( isIgnoreErrors==0 || (regOld!=0 && regNew==0) );'), (89640, 1, u'+    assert( pFKey->nCol==1 || (aiFree && pIdx) );'), (89693, 1, u'+      assert( regOld==0 && regNew!=0 );'), (89703, 1, u'+    assert( aiCol || pFKey->nCol==1 );'), (89881, 1, u'+    assert( aiCol || pFKey->nCol==1 );'), (89892, 1, u'+      assert( iFromCol>=0 );'), (90011, 1, u'+    assert( pStep!=0 );'), (90071, 1, u'+  assert( db==0 || sqlite3SchemaMutexHeld(db, 0, pTab->pSchema) );'), (90091, 1, u'+    assert( pFKey->isDeferred==0 || pFKey->isDeferred==1 );'), (90133, 1, u'+  assert( !IsVirtual(pTab) );'), (90135, 1, u'+  assert( opcode==OP_OpenWrite || opcode==OP_OpenRead );'), (90251, 1, u'+    assert( pOp!=0 );'), (90266, 1, u'+      assert( pOp->p4.pVtab!=0 );'), (90267, 1, u'+      assert( pOp->p4type==P4_VTAB );'), (90338, 1, u'+  assert( pParse->pTriggerTab==0 );'), (90339, 1, u'+  assert( pParse==sqlite3ParseToplevel(pParse) );'), (90341, 1, u'+  assert( v );   /* We failed long ago if this is not so */'), (90345, 1, u'+    assert( sqlite3SchemaMutexHeld(db, 0, pDb->pSchema) );'), (90389, 1, u'+  assert( v );'), (90397, 1, u'+    assert( sqlite3SchemaMutexHeld(db, 0, pDb->pSchema) );'), (90506, 1, u'+  assert( pParse->nErr==0 || rc );'), (90684, 1, u'+  assert( pTabList->nSrc==1 );'), (90692, 1, u'+  assert( iDb<db->nDb );'), (90714, 1, u'+  assert( (pTrigger && tmask) || (pTrigger==0 && tmask==0) );'), (90750, 1, u'+    assert( !pTrigger );'), (90751, 1, u'+    assert( pList==0 );'), (90774, 1, u'+    assert( pSelect->pEList );'), (90776, 1, u'+    assert( dest.nSdst==nColumn );'), (90830, 1, u'+    assert( useTempTable==0 );'), (90983, 1, u'+        assert( pSelect==0 );  /* Otherwise useTempTable is true */'), (90995, 1, u'+    assert( !IsVirtual(pTab) );'), (91012, 1, u'+        assert( pSelect==0 ); /* Otherwise useTempTable is true */'), (91100, 1, u'+          assert( IsVirtual(pTab) );'), (91323, 1, u'+  assert( v!=0 );'), (91324, 1, u'+  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (91344, 1, u'+    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (91364, 1, u'+        assert( onError==OE_Replace );'), (91469, 1, u'+        assert( seenReplace==0 );'), (91530, 1, u'+    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (91559, 1, u'+        assert( seenReplace==0 );'), (91565, 1, u'+        assert( onError==OE_Replace );'), (91614, 1, u'+  assert( v!=0 );'), (91615, 1, u'+  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (91669, 1, u'+  assert( v!=0 );'), (91673, 1, u'+    assert( pIdx->pSchema==pTab->pSchema );'), (91723, 1, u'+  assert( pDest && pSrc );'), (91724, 1, u'+  assert( pDest->pTable!=pSrc->pTable );'), (91810, 1, u'+  assert(pSelect->pSrc);   /* allocated even if there is no FROM clause */'), (91831, 1, u'+  assert( pSelect->pOffset==0 );  /* Must be so if pLimit==0 */'), (91839, 1, u'+  assert( pEList!=0 );'), (91843, 1, u'+  assert( pEList->a[0].pExpr );'), (91970, 1, u'+    assert( (pDest->tabFlags & TF_Autoincrement)==0 );'), (91981, 1, u'+    assert( pSrcIdx );'), (92068, 1, u'+    assert( rc==SQLITE_OK || pStmt==0 );'), (92098, 1, u'+            assert( azCols[i]!=0 );'), (92152, 1, u'+  assert( (rc&db->errMask)==rc );'), (93211, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (93310, 1, u'+    assert( (rc&0xff)==rc );'), (93590, 1, u'+      assert( v!=0 );  /* Already allocated by sqlite3Pragma() */'), (93635, 1, u'+                      assert( action==OE_None ); break;'), (93654, 1, u'+  assert( PAGER_JOURNALMODE_DELETE==0 );'), (93655, 1, u'+  assert( PAGER_JOURNALMODE_PERSIST==1 );'), (93656, 1, u'+  assert( PAGER_JOURNALMODE_OFF==2 );'), (93657, 1, u'+  assert( PAGER_JOURNALMODE_TRUNCATE==3 );'), (93658, 1, u'+  assert( PAGER_JOURNALMODE_MEMORY==4 );'), (93659, 1, u'+  assert( PAGER_JOURNALMODE_WAL==5 );'), (93660, 1, u'+  assert( eMode>=0 && eMode<=ArraySize(azModeName) );'), (93724, 1, u'+  assert( pId2 );'), (93804, 1, u'+      assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (93823, 1, u'+    assert( pBt!=0 );'), (93849, 1, u'+    assert( pBt!=0 );'), (93924, 1, u'+        assert(pDb==&db->aDb[0]);'), (93935, 1, u'+    assert(eMode==PAGER_LOCKINGMODE_NORMAL||eMode==PAGER_LOCKINGMODE_EXCLUSIVE);'), (94024, 1, u'+    assert( pBt!=0 );'), (94038, 1, u'+      assert( eAuto>=0 && eAuto<=2 );'), (94113, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (94139, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (94428, 1, u'+        assert( pTab->nCol>cnum );'), (94473, 1, u'+      assert( db->aDb[i].zName!=0 );'), (94614, 1, u'+        assert( pParent!=0 );'), (94618, 1, u'+        assert( x==0 );'), (94622, 1, u'+          assert( iKey>=0 && iKey<pTab->nCol );'), (94718, 1, u'+    assert( iDb>=0 );'), (94719, 1, u'+    assert( iDb==0 || pId2->z );'), (94757, 1, u'+      assert( sqlite3SchemaMutexHeld(db, i, 0) );'), (94908, 1, u'+      assert( encnames[SQLITE_UTF8].enc==SQLITE_UTF8 );'), (94909, 1, u'+      assert( encnames[SQLITE_UTF16LE].enc==SQLITE_UTF16LE );'), (94910, 1, u'+      assert( encnames[SQLITE_UTF16BE].enc==SQLITE_UTF16BE );'), (95259, 1, u'+  assert( argc==3 );'), (95261, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95268, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (95282, 1, u'+    assert( db->init.busy );'), (95288, 1, u'+    assert( (rc&0xFF)==(rcp&0xFF) );'), (95292, 1, u'+        assert( iDb==1 );'), (95377, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (95378, 1, u'+  assert( db->aDb[iDb].pSchema );'), (95379, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95380, 1, u'+  assert( iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (95525, 1, u'+  assert( db->init.busy );'), (95598, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95638, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95661, 1, u'+  assert( pParse->checkSchema );'), (95662, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95684, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (95717, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95724, 1, u'+    assert( i>=0 && i<db->nDb );'), (95753, 1, u'+  assert( ppStmt && *ppStmt==0 );'), (95754, 1, u'+  assert( !db->mallocFailed );'), (95755, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95783, 1, u'+      assert( sqlite3BtreeHoldsMutex(pBt) );'), (95819, 1, u'+  assert( 1==(int)pParse->nQueryLoop );'), (95865, 1, u'+    assert(!(*ppStmt));'), (95888, 1, u'+  assert( (rc&db->errMask)==rc );'), (95901, 1, u'+  assert( ppStmt!=0 );'), (95915, 1, u'+  assert( rc==SQLITE_OK || *ppStmt==0 );'), (95933, 1, u'+  assert( sqlite3_mutex_held(sqlite3VdbeDb(p)->mutex) );'), (95935, 1, u'+  assert( zSql!=0 );  /* Reprepare only called for prepare_v2() statements */'), (95937, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (95943, 1, u'+    assert( pNew==0 );'), (95946, 1, u'+    assert( pNew!=0 );'), (95973, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (95985, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (96010, 1, u'+  assert( ppStmt );'), (96053, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (96065, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (96137, 1, u'+  assert( db->mallocFailed || !pOffset || pLimit ); /* OFFSET implies LIMIT */'), (96139, 1, u'+    assert( db->mallocFailed );'), (96157, 1, u'+  assert( pOffset==0 || pLimit!=0 );'), (96166, 1, u'+    assert( pNew->pSrc!=0 || pParse->nErr>0 );'), (96168, 1, u'+  assert( pNew!=&standin );'), (96242, 1, u'+    assert( pB!=0 );'), (96287, 1, u'+  assert( (piTab==0)==(piCol==0) );  /* Both or neither are NULL */'), (96327, 1, u'+  assert( iLeft<iRight );'), (96328, 1, u'+  assert( pSrc->nSrc>iRight );'), (96329, 1, u'+  assert( pSrc->a[iLeft].pTab );'), (96330, 1, u'+  assert( pSrc->a[iRight].pTab );'), (96338, 1, u'+    assert( !ExprHasAnyProperty(pEq, EP_TokenOnly|EP_Reduced) );'), (96374, 1, u'+    assert( !ExprHasAnyProperty(p, EP_TokenOnly|EP_Reduced) );'), (96641, 1, u'+  assert( v );'), (96643, 1, u'+  assert( pEList!=0 );'), (96661, 1, u'+    assert( pDest->nSdst==nResultCol );'), (96682, 1, u'+    assert( pEList!=0 );'), (96683, 1, u'+    assert( pEList->nExpr==nColumn );'), (96717, 1, u'+        assert( sqlite3VdbeCurrentAddr(v)==iJump );'), (96728, 1, u'+        assert( pDistinct->eTnctType==WHERE_DISTINCT_UNORDERED );'), (96789, 1, u'+      assert( nColumn==1 );'), (96821, 1, u'+      assert( nColumn==1 );'), (96861, 1, u'+      assert( eDest==SRT_Discard );'), (96990, 1, u'+  assert( op==TK_UNION || op==TK_EXCEPT || op==TK_INTERSECT || op==TK_ALL );'), (97066, 1, u'+      assert( nColumn==1 );'), (97074, 1, u'+      assert( nColumn==1 );'), (97082, 1, u'+      assert( eDest==SRT_Output || eDest==SRT_Coroutine );'), (97086, 1, u'+        assert( regRow!=pDest->iSdst+i );'), (97194, 1, u'+      assert( pTab && pExpr->pTab==pTab );'), (97214, 1, u'+        assert( !pS );'), (97216, 1, u'+        assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (97241, 1, u'+      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (97252, 1, u'+    assert( pzOriginTab && pzOriginCol );'), (97340, 1, u'+      assert( j<pTabList->nSrc );'), (97343, 1, u'+      assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (97418, 1, u'+        assert( pColExpr!=0 );'), (97428, 1, u'+        assert( !ExprHasProperty(pColExpr, EP_IntValue) );'), (97497, 1, u'+  assert( pSelect!=0 );'), (97498, 1, u'+  assert( (pSelect->selFlags & SF_Resolved)!=0 );'), (97499, 1, u'+  assert( nCol==pSelect->pEList->nExpr || db->mallocFailed );'), (97538, 1, u'+  assert( db->lookaside.bEnabled==0 );'), (97602, 1, u'+  assert( p->pOffset==0 || p->pLimit!=0 );'), (97655, 1, u'+  assert( iCol>=0 );'), (97722, 1, u'+  assert( p && p->pPrior );  /* Calling function guarantees this much */'), (97725, 1, u'+  assert( pPrior->pRightmost!=pPrior );'), (97726, 1, u'+  assert( pPrior->pRightmost==p->pRightmost );'), (97742, 1, u'+  assert( v!=0 );  /* The VDBE already created by calling function */'), (97747, 1, u'+    assert( p->pEList );'), (97756, 1, u'+  assert( p->pEList && pPrior->pEList );'), (97780, 1, u'+      assert( !pPrior->pLimit );'), (97834, 1, u'+        assert( p->pLimit==0 );      /* Not allowed on leftward elements */'), (97835, 1, u'+        assert( p->pOffset==0 );     /* Not allowed on leftward elements */'), (97842, 1, u'+        assert( p->pOrderBy==0 );'), (97844, 1, u'+        assert( p->addrOpenEphm[0] == -1 );'), (97847, 1, u'+        assert( p->pEList );'), (97852, 1, u'+      assert( !pPrior->pOrderBy );'), (97865, 1, u'+        assert( p->op==TK_UNION );'), (97893, 1, u'+      assert( unionTab==dest.iSDParm || dest.eDest!=priorOp );'), (97896, 1, u'+        assert( p->pEList );'), (97916, 1, u'+    default: assert( p->op==TK_INTERSECT ); {'), (97930, 1, u'+      assert( p->pOrderBy==0 );'), (97933, 1, u'+      assert( p->addrOpenEphm[0] == -1 );'), (97936, 1, u'+      assert( p->pEList );'), (97950, 1, u'+      assert( p->addrOpenEphm[1] == -1 );'), (97971, 1, u'+      assert( p->pEList );'), (98014, 1, u'+    assert( p->pRightmost==p );'), (98040, 1, u'+          assert( pLoop->addrOpenEphm[1]<0 );'), (98140, 1, u'+      assert( pIn->nSdst==1 );'), (98166, 1, u'+      assert( pIn->nSdst==1 );'), (98195, 1, u'+      assert( pDest->eDest==SRT_Output );'), (98347, 1, u'+  assert( p->pOrderBy!=0 );'), (98348, 1, u'+  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */'), (98351, 1, u'+  assert( v!=0 );       /* Already thrown the error if VDBE alloc failed */'), (98360, 1, u'+  assert( pPrior->pOrderBy==0 );'), (98362, 1, u'+  assert( pOrderBy );'), (98373, 1, u'+        assert( pItem->iOrderByCol>0 );'), (98398, 1, u'+      assert( pItem->iOrderByCol>0  && pItem->iOrderByCol<=p->pEList->nExpr );'), (98439, 1, u'+    assert( nOrderBy>=nExpr || db->mallocFailed );'), (98679, 1, u'+      assert( pEList!=0 && pExpr->iColumn<pEList->nExpr );'), (98680, 1, u'+      assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (98725, 1, u'+  assert( pSrc );  /* Even for (SELECT 1) we have: pSrc!=0 but pSrc->nSrc==0 */'), (98878, 1, u'+  assert( p!=0 );'), (98879, 1, u'+  assert( p->pPrior==0 );  /* Unable to flatten compound queries */'), (98882, 1, u'+  assert( pSrc && iFrom>=0 && iFrom<pSrc->nSrc );'), (98886, 1, u'+  assert( pSub!=0 );'), (98890, 1, u'+  assert( pSubSrc );'), (98969, 1, u'+      assert( pSub->pSrc!=0 );'), (99114, 1, u'+      assert( pParent==p );  /* First time through the loop */'), (99117, 1, u'+      assert( pParent!=p );  /* 2nd and subsequent times through the loop */'), (99120, 1, u'+        assert( db->mallocFailed );'), (99183, 1, u'+      assert( pParent->pOrderBy==0 );'), (99195, 1, u'+      assert( pParent->pHaving==0 );'), (99201, 1, u'+      assert( pParent->pGroupBy==0 );'), (99257, 1, u'+    assert( pExpr->op==TK_AGG_FUNCTION );'), (99270, 1, u'+  assert( *ppMinMax==0 || (*ppMinMax)->nExpr==1 );'), (99289, 1, u'+  assert( !p->pGroupBy );'), (99298, 1, u'+  assert( pTab && !pTab->pSelect && pExpr );'), (99456, 1, u'+      assert( i==0 );'), (99463, 1, u'+      assert( pSel!=0 );'), (99464, 1, u'+      assert( pFrom->pTab==0 );'), (99478, 1, u'+      assert( pFrom->pTab==0 );'), (99492, 1, u'+        assert( pFrom->pSelect==0 );'), (99524, 1, u'+    assert( pE->op!=TK_DOT || pE->pRight!=0 );'), (99525, 1, u'+    assert( pE->op!=TK_DOT || (pE->pLeft!=0 && pE->pLeft->op==TK_ID) );'), (99543, 1, u'+    assert( (p->selFlags & SF_NestedFrom)==0'), (99550, 1, u'+      assert( pE->op!=TK_DOT || pRight!=0 );'), (99568, 1, u'+          assert( pE->pLeft!=0 );'), (99569, 1, u'+          assert( !ExprHasProperty(pE->pLeft, EP_IntValue) );'), (99596, 1, u'+            assert( zName );'), (99608, 1, u'+              assert(IsVirtual(pTab));'), (99743, 1, u'+  assert( p->selFlags & SF_Resolved );'), (99753, 1, u'+        assert( pSel );'), (99835, 1, u'+      assert( !ExprHasProperty(pE, EP_xIsSelect) );'), (99859, 1, u'+    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (99884, 1, u'+    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (99895, 1, u'+      assert( nArg==1 );'), (99902, 1, u'+      assert( pList!=0 );  /* pList!=0 if pF->pFunc has NEEDCOLL */'), (100063, 1, u'+    assert(pDest->eDest==SRT_Exists || pDest->eDest==SRT_Union ||'), (100079, 1, u'+  assert( pEList!=0 );'), (100183, 1, u'+      assert( pItem->addrFillSub==0 );'), (100282, 1, u'+    assert( sDistinct.isTnct );'), (100415, 1, u'+      assert( !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) );'), (100726, 1, u'+        assert( p->pGroupBy==0 );'), (100727, 1, u'+        assert( flag==0 );'), (100731, 1, u'+        assert( flag==0 || (pMinMax!=0 && pMinMax->nExpr==1) );'), (100753, 1, u'+        assert( pMinMax==0 || pMinMax->nExpr==1 );'), (101056, 1, u'+  assert( sizeof(res.azResult[0])>= sizeof(res.nData) );'), (101100, 1, u'+    assert( azResult!=0 );'), (101166, 1, u'+    assert( sqlite3SchemaMutexHeld(pParse->db, 0, pTmpSchema) );'), (101210, 1, u'+  assert( pName1!=0 );   /* pName1->z might be NULL, but not pName1 itself */'), (101211, 1, u'+  assert( pName2!=0 );'), (101212, 1, u'+  assert( op==TK_INSERT || op==TK_UPDATE || op==TK_DELETE );'), (101213, 1, u'+  assert( op>0 && op<0xff );'), (101259, 1, u'+  assert( pTableName->nSrc==1 );'), (101291, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (101297, 1, u'+      assert( !db->init.busy );'), (101361, 1, u'+  assert( pParse->pNewTrigger==0 );'), (101372, 1, u'+    assert( pParse->pNewTrigger==pTrigger );'), (101433, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (101441, 1, u'+      assert( pTab!=0 );'), (101449, 1, u'+  assert( !pParse->pNewTrigger );'), (101513, 1, u'+  assert(pEList == 0 || pSelect == 0);'), (101514, 1, u'+  assert(pEList != 0 || pSelect != 0 || db->mallocFailed);'), (101611, 1, u'+  assert( pName->nSrc==1 );'), (101615, 1, u'+  assert( zDb!=0 || sqlite3BtreeHoldsAllMutexes(db) );'), (101619, 1, u'+    assert( sqlite3SchemaMutexHeld(db, j, 0) );'), (101658, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (101660, 1, u'+  assert( pTable );'), (101661, 1, u'+  assert( pTable->pSchema==pTrigger->pSchema || iDb==1 );'), (101677, 1, u'+  assert( pTable!=0 );'), (101713, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (101766, 1, u'+  assert( pList==0 || IsVirtual(pTab)==0 );'), (101797, 1, u'+    assert( pSrc->nSrc>0 );'), (101798, 1, u'+    assert( pSrc->a!=0 );'), (101802, 1, u'+      assert( iDb<pParse->db->nDb );'), (101822, 1, u'+  assert( pParse->pTriggerTab && pParse->pToplevel );'), (101823, 1, u'+  assert( pStepList );'), (101824, 1, u'+  assert( v!=0 );'), (101847, 1, u'+    assert( pParse->cookieGoto==0 || pParse->cookieGoto==-1 );'), (101877, 1, u'+      default: assert( pStep->op==TK_SELECT ); {'), (101918, 1, u'+  assert( pFrom->zErrMsg==0 || pFrom->nErr );'), (101919, 1, u'+  assert( pTo->zErrMsg==0 || pTo->nErr );'), (101948, 1, u'+  assert( pTrigger->zName==0 || pTab==tableOfTrigger(pTrigger) );'), (101949, 1, u'+  assert( pTop->pVdbe );'), (102032, 1, u'+  assert( !pSubParse->pAinc       && !pSubParse->pZombieTab );'), (102033, 1, u'+  assert( !pSubParse->pTriggerPrg && !pSubParse->nMaxArg );'), (102054, 1, u'+  assert( pTrigger->zName==0 || pTab==tableOfTrigger(pTrigger) );'), (102090, 1, u'+  assert( pPrg || pParse->nErr || pParse->db->mallocFailed );'), (102164, 1, u'+  assert( op==TK_UPDATE || op==TK_INSERT || op==TK_DELETE );'), (102165, 1, u'+  assert( tr_tm==TRIGGER_BEFORE || tr_tm==TRIGGER_AFTER );'), (102166, 1, u'+  assert( (op==TK_UPDATE)==(pChanges!=0) );'), (102173, 1, u'+    assert( p->pSchema!=0 );'), (102174, 1, u'+    assert( p->pTabSchema!=0 );'), (102175, 1, u'+    assert( p->pSchema==p->pTabSchema'), (102226, 1, u'+  assert( isNew==1 || isNew==0 );'), (102306, 1, u'+  assert( pTab!=0 );'), (102312, 1, u'+    assert( i<pTab->nCol );'), (102382, 1, u'+  assert( pTabList->nSrc==1 );'), (102396, 1, u'+  assert( pTrigger || tmask==0 );'), (102605, 1, u'+      assert( aRegIdx );'), (102610, 1, u'+        assert( pParse->nTab>iCur+i+1 );'), (102633, 1, u'+  assert( chngRowid || pTrigger || hasFK || regOldRowid==regNewRowid );'), (102780, 1, u'+    assert( aRegIdx );'), (102875, 1, u'+  assert( pTab->iPKey<0 );'), (102889, 1, u'+  assert( v );'), (102968, 1, u'+  assert( rc!=SQLITE_ROW || (db->flags&SQLITE_CountRows) );'), (103076, 1, u'+    assert( strcmp(pDb->zName,"vacuum_db")==0 );'), (103215, 1, u'+    assert( 1==sqlite3BtreeIsInTrans(pTemp) );'), (103216, 1, u'+    assert( 1==sqlite3BtreeIsInTrans(pMain) );'), (103236, 1, u'+  assert( rc==SQLITE_OK );'), (103331, 1, u'+      assert( pDel==0 || pDel==pMod );'), (103391, 1, u'+  assert( IsVirtual(pTab) );'), (103403, 1, u'+  assert( db );'), (103404, 1, u'+  assert( pVTab->nRef>0 );'), (103405, 1, u'+  assert( db->magic==SQLITE_MAGIC_OPEN || db->magic==SQLITE_MAGIC_ZOMBIE );'), (103435, 1, u'+  assert( db==0 || sqlite3SchemaMutexHeld(db, 0, p->pSchema) );'), (103440, 1, u'+    assert( db2 );'), (103452, 1, u'+  assert( !db || pRet );'), (103467, 1, u'+  assert( IsVirtual(p) );'), (103468, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (103469, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (103506, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (103507, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (103589, 1, u'+  assert( 0==pTable->pIndex );'), (103593, 1, u'+  assert( iDb>=0 );'), (103700, 1, u'+    assert( sqlite3SchemaMutexHeld(db, 0, pSchema) );'), (103704, 1, u'+      assert( pTab==pOld );  /* Malloc must have failed inside HashInsert() */'), (103731, 1, u'+    assert(pArg->z < p->z);'), (103773, 1, u'+  assert( &db->pVtabCtx );'), (103774, 1, u'+  assert( xConstruct );'), (103834, 1, u"+            assert(zType[i-1]==' ');"), (103860, 1, u'+  assert( pTab );'), (103931, 1, u'+  assert( pTab && (pTab->tabFlags & TF_Virtual)!=0 && !pTab->pVTable );'), (103978, 1, u'+  assert( (pTab->tabFlags & TF_Virtual)!=0 );'), (104015, 1, u'+  assert( (rc&0xff)==rc );'), (104036, 1, u'+    assert( rc==SQLITE_OK );'), (104041, 1, u'+      assert( pTab->pVTable==p && p->pNext==0 );'), (104191, 1, u'+  assert( op==SAVEPOINT_RELEASE||op==SAVEPOINT_ROLLBACK||op==SAVEPOINT_BEGIN );'), (104192, 1, u'+  assert( iSavepoint>=0 );'), (104258, 1, u'+  assert( pVtab!=0 );'), (104259, 1, u'+  assert( pVtab->pModule!=0 );'), (104305, 1, u'+  assert( IsVirtual(pTab) );'), (104330, 1, u'+  assert( OE_Rollback==1 && OE_Abort==2 && OE_Fail==3 );'), (104331, 1, u'+  assert( OE_Ignore==4 && OE_Replace==5 );'), (104332, 1, u'+  assert( db->vtabOnConflict>=1 && db->vtabOnConflict<=5 );'), (104354, 1, u'+        assert( p->pTab==0 || (p->pTab->tabFlags & TF_Virtual)!=0 );'), (104825, 1, u'+  assert( pMaskSet->n<=(int)sizeof(Bitmask)*8 );'), (104843, 1, u'+  assert( pMaskSet->n < ArraySize(pMaskSet->ix) );'), (104923, 1, u'+  assert( TK_GT>TK_EQ && TK_GT<TK_GE );'), (104924, 1, u'+  assert( TK_LT>TK_EQ && TK_LT<TK_GE );'), (104925, 1, u'+  assert( TK_LE>TK_EQ && TK_LE<TK_GE );'), (104926, 1, u'+  assert( TK_GE==TK_EQ+4 );'), (104951, 1, u'+  assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );'), (104967, 1, u'+    assert( TK_LT==TK_GT+2 );'), (104968, 1, u'+    assert( TK_GE==TK_LE+2 );'), (104969, 1, u'+    assert( TK_GT>TK_EQ );'), (104970, 1, u'+    assert( TK_GT<TK_LE );'), (104971, 1, u'+    assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );'), (104981, 1, u'+  assert( allowedOp(op) );'), (104987, 1, u'+    assert( (WO_EQ<<(op-TK_EQ)) < 0x7fff );'), (104990, 1, u'+  assert( op!=TK_ISNULL || c==WO_ISNULL );'), (104991, 1, u'+  assert( op!=TK_IN || c==WO_IN );'), (104992, 1, u'+  assert( op!=TK_EQ || c==WO_EQ );'), (104993, 1, u'+  assert( op!=TK_LT || c==WO_LT );'), (104994, 1, u'+  assert( op!=TK_LE || c==WO_LE );'), (104995, 1, u'+  assert( op!=TK_GT || c==WO_GT );'), (104996, 1, u'+  assert( op!=TK_GE || c==WO_GE );'), (105042, 1, u'+  assert( iCur>=0 );'), (105069, 1, u'+              assert(pX->pLeft);'), (105091, 1, u'+            assert( pX->op==TK_COLUMN );'), (105172, 1, u'+  assert( pLeft->iColumn!=(-1) ); /* Because IPK never has AFF_TEXT */'), (105187, 1, u'+    assert( pRight->op==TK_VARIABLE || pRight->op==TK_REGISTER );'), (105367, 1, u'+  assert( (pTerm->wtFlags & (TERM_DYNAMIC|TERM_ORINFO|TERM_ANDINFO))==0 );'), (105368, 1, u'+  assert( pExpr->op==TK_OR );'), (105377, 1, u'+  assert( pOrWc->nTerm>=2 );'), (105387, 1, u'+      assert( (pOrTerm->wtFlags & (TERM_ANDINFO|TERM_ORINFO))==0 );'), (105406, 1, u'+            assert( pAndTerm->pExpr );'), (105476, 1, u'+        assert( pOrTerm->eOperator & WO_EQ );'), (105481, 1, u'+          assert( j==1 );'), (105491, 1, u'+          assert( pOrTerm->wtFlags & (TERM_COPIED|TERM_VIRTUAL) );'), (105501, 1, u'+        assert( j==1 );'), (105502, 1, u'+        assert( IsPowerOfTwo(chngToIN) );'), (105503, 1, u'+        assert( chngToIN==getMask(pMaskSet, iCursor) );'), (105512, 1, u'+        assert( pOrTerm->eOperator & WO_EQ );'), (105548, 1, u'+        assert( pOrTerm->eOperator & WO_EQ );'), (105549, 1, u'+        assert( pOrTerm->leftCursor==iCursor );'), (105550, 1, u'+        assert( pOrTerm->u.leftColumn==iColumn );'), (105555, 1, u'+      assert( pLeft!=0 );'), (105561, 1, u'+        assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (105620, 1, u'+  assert( pExpr->op!=TK_AS && pExpr->op!=TK_COLLATE );'), (105624, 1, u'+    assert( pExpr->pRight==0 );'), (105715, 1, u'+    assert( pList!=0 );'), (105716, 1, u'+    assert( pList->nExpr==2 );'), (105738, 1, u'+    assert( pWC->op==TK_AND );'), (105954, 1, u'+  assert( pDistinct!=0 );'), (106287, 1, u'+  assert( pParse->nQueryLoop >= (double)1 );'), (106351, 1, u'+  assert( v!=0 );'), (106372, 1, u'+  assert( nColumn>0 );'), (106425, 1, u'+  assert( (u32)n==pLevel->plan.nEq );'), (106443, 1, u'+  assert( n==nColumn );'), (106447, 1, u'+  assert( pLevel->iIdxCur>=0 );'), (106494, 1, u'+    assert( IsPowerOfTwo(pTerm->eOperator & ~WO_EQUIV) );'), (106547, 1, u'+    assert( IsPowerOfTwo(pTerm->eOperator & ~WO_EQUIV) );'), (106560, 1, u'+    assert( WO_EQ==SQLITE_INDEX_CONSTRAINT_EQ );'), (106561, 1, u'+    assert( WO_LT==SQLITE_INDEX_CONSTRAINT_LT );'), (106562, 1, u'+    assert( WO_LE==SQLITE_INDEX_CONSTRAINT_LE );'), (106563, 1, u'+    assert( WO_GT==SQLITE_INDEX_CONSTRAINT_GT );'), (106564, 1, u'+    assert( WO_GE==SQLITE_INDEX_CONSTRAINT_GE );'), (106565, 1, u'+    assert( WO_MATCH==SQLITE_INDEX_CONSTRAINT_MATCH );'), (106566, 1, u'+    assert( pTerm->eOperator & (WO_IN|WO_EQ|WO_LT|WO_LE|WO_GT|WO_GE|WO_MATCH) );'), (106684, 1, u'+  assert( pTab->azModuleArg && pTab->azModuleArg[0] );'), (106685, 1, u'+  assert( sqlite3GetVTable(pParse->db, pTab) );'), (106696, 1, u'+    assert( bAllowIN==0 || bAllowIN==1 );'), (106849, 1, u'+  assert( roundUp==0 || roundUp==1 );'), (106850, 1, u'+  assert( pIdx->nSample>0 );'), (106868, 1, u'+        assert( aSample[i].eType==SQLITE_FLOAT );'), (106894, 1, u'+    assert( eType==SQLITE_TEXT || eType==SQLITE_BLOB );'), (106907, 1, u'+        assert( pColl->enc==SQLITE_UTF8 );'), (106917, 1, u'+        assert( z && pColl && pColl->xCmp );'), (106933, 1, u'+            assert( db->mallocFailed );'), (106956, 1, u'+    assert( i<pIdx->nSample );'), (107081, 1, u'+      assert( (pLower->eOperator & (WO_GT|WO_GE))!=0 );'), (107093, 1, u'+      assert( (pUpper->eOperator & (WO_LT|WO_LE))!=0 );'), (107118, 1, u'+  assert( pLower || pUpper );'), (107154, 1, u'+  assert( p->aSample!=0 );'), (107155, 1, u'+  assert( p->nSample>0 );'), (107203, 1, u'+  assert( p->aSample!=0 );'), (107243, 1, u'+    assert( (pLevel->plan.wsFlags & WHERE_ORDERED)!=0 );'), (107263, 1, u'+      assert( sortOrder==0 || sortOrder==1 );'), (107327, 1, u'+  assert( pOrderBy!=0 );'), (107335, 1, u'+  assert( nTerm>0 );'), (107340, 1, u'+  assert( pIdx->zName || (pIdx->nColumn==1 && pIdx->aiColumn[0]==-1) );'), (107379, 1, u'+      assert( zColl!=0 );'), (107404, 1, u'+    assert( pOBItem->sortOrder==0 || pOBItem->sortOrder==1 );'), (107405, 1, u'+    assert( iSortOrder==0 || iSortOrder==1 );'), (107844, 1, u'+      assert( (pFirstTerm->eOperator & (WO_EQ|WO_ISNULL|WO_IN))!=0 );'), (107852, 1, u'+        assert( pFirstTerm->eOperator & WO_IN );'), (108045, 1, u'+  assert( p->pOrderBy || (p->cost.plan.wsFlags&WHERE_ORDERED)==0 );'), (108046, 1, u'+  assert( p->cost.plan.u.pIdx==0 || (p->cost.plan.wsFlags&WHERE_ROWID_EQ)==0 );'), (108047, 1, u'+  assert( pSrc->pIndex==0'), (108079, 1, u'+    assert( pIdxInfo!=0 || p->pParse->db->mallocFailed );'), (108146, 1, u'+    assert( pParse->db->mallocFailed );'), (108149, 1, u'+  assert( v!=0 );'), (108194, 1, u'+  assert( iTarget>0 );'), (108216, 1, u'+    assert( pX->op==TK_IN );'), (108225, 1, u'+    assert( pLevel->plan.wsFlags & WHERE_IN_ABLE );'), (108311, 1, u'+  assert( pLevel->plan.wsFlags & WHERE_INDEXED );'), (108327, 1, u'+  assert( pIdx->nColumn>=nEq );'), (108653, 1, u'+    assert( pTerm!=0 );'), (108654, 1, u'+    assert( pTerm->pExpr!=0 );'), (108655, 1, u'+    assert( omitTable==0 );'), (108673, 1, u'+    assert( omitTable==0 );'), (108694, 1, u'+      assert( TK_LE==TK_GT+1 );      /* Make sure the ordering.. */'), (108695, 1, u'+      assert( TK_LT==TK_GT+2 );      /*  ... of the TK_xx values... */'), (108696, 1, u'+      assert( TK_GE==TK_GT+3 );      /*  ... is correcct. */'), (108700, 1, u'+      assert( pX!=0 );'), (108701, 1, u'+      assert( pStart->leftCursor==iCur );'), (108714, 1, u'+      assert( pX!=0 );'), (108715, 1, u'+      assert( pEnd->leftCursor==iCur );'), (108733, 1, u'+      assert( pLevel->p5==0 );'), (108897, 1, u'+    assert( op!=0 );'), (108985, 1, u'+      assert( pLevel->p5==0 );'), (109045, 1, u'+    assert( pTerm!=0 );'), (109046, 1, u'+    assert( pTerm->eOperator & WO_OR );'), (109047, 1, u'+    assert( (pTerm->wtFlags & TERM_ORINFO)!=0 );'), (109134, 1, u'+        assert( pSubWInfo || pParse->nErr || pParse->db->mallocFailed );'), (109174, 1, u'+            assert( pLvl->iIdxCur==iCovCur );'), (109206, 1, u'+    assert( bRev==0 || bRev==1 );'), (109207, 1, u'+    assert( omitTable==0 );'), (109234, 1, u'+    assert( pE!=0 );'), (109258, 1, u'+    assert( !ExprHasProperty(pE, EP_FromJoin) );'), (109259, 1, u'+    assert( (pTerm->prereqRight & newNotReady)!=0 );'), (109282, 1, u'+        assert( pWInfo->untestedTerms );'), (109285, 1, u'+      assert( pTerm->pExpr );'), (109541, 1, u'+      assert( (m-1)==toTheLeft );'), (109663, 1, u'+    assert( ckOptimal==0 || ckOptimal==1 );'), (109677, 1, u'+          assert( j>iFrom );'), (109685, 1, u'+        assert( sWBI.pSrc->pTab );'), (109695, 1, u'+        assert( isOptimal || (sWBI.cost.used&sWBI.notValid)==0 );'), (109699, 1, u'+        assert( sWBI.pSrc->pIndex==0'), (109761, 1, u'+    assert( bestJ>=0 );'), (109762, 1, u'+    assert( sWBI.notValid & getMask(pMaskSet, pTabList->a[bestJ].iCursor) );'), (109763, 1, u'+    assert( bestJ==iFrom || (pTabList->a[iFrom].jointype & JT_LEFT)==0 );'), (109773, 1, u'+      assert( pWInfo->eDistinct==0 );'), (109812, 1, u'+        assert( bestPlan.plan.u.pIdx==pIdx );'), (109831, 1, u'+    assert( nTabList==0 || (pLevel->plan.wsFlags & WHERE_ALL_UNIQUE)!=0 );'), (109840, 1, u'+  assert( (wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || pWInfo->nLevel==1 );'), (109885, 1, u'+        assert( n<=pTab->nCol );'), (109899, 1, u'+      assert( pIx->pSchema==pTab->pSchema );'), (109900, 1, u'+      assert( iIndexCur>=0 );'), (110027, 1, u'+      assert( (pLevel->plan.wsFlags & WHERE_IDX_ONLY)==0'), (110051, 1, u'+  assert( pWInfo->nLevel==1 || pWInfo->nLevel==pTabList->nSrc );'), (110056, 1, u'+    assert( pTab!=0 );'), (110104, 1, u'+          assert( (pLevel->plan.wsFlags & WHERE_IDX_ONLY)==0'), (111676, 1, u'+  assert( iLookAhead!=YYNOCODE );'), (111740, 1, u'+  assert( stateno<=YY_REDUCE_COUNT );'), (111743, 1, u'+  assert( i!=YY_REDUCE_USE_DFLT );'), (111744, 1, u'+  assert( iLookAhead!=YYNOCODE );'), (111751, 1, u'+  assert( i>=0 && i<YY_ACTTAB_COUNT );'), (111752, 1, u'+  assert( yy_lookahead[i]==iLookAhead );'), (113174, 1, u'+  assert( yymsp[-2].minor.yy327!=0 );'), (113182, 1, u'+  assert( yymsp[-1].minor.yy327!=0 );'), (113350, 1, u'+  assert( yyruleno>=0 && yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) );'), (113373, 1, u'+    assert( yyact == YYNSTATE + YYNRULE + 1 );'), (113410, 1, u'+  assert( TOKEN.z[0] );  /* The tokenizer always gives us a token */'), (113505, 1, u'+      assert( yyact == YY_ERROR_ACTION );'), (114285, 1, u'+  assert( pzErrMsg!=0 );'), (114291, 1, u'+  assert( pParse->pNewTable==0 );'), (114292, 1, u'+  assert( pParse->pNewTrigger==0 );'), (114293, 1, u'+  assert( pParse->nVar==0 );'), (114294, 1, u'+  assert( pParse->nzVar==0 );'), (114295, 1, u'+  assert( pParse->azVar==0 );'), (114299, 1, u'+    assert( i>=0 );'), (114358, 1, u'+  assert( pzErrMsg!=0 );'), (115009, 1, u'+    assert( sqlite3GlobalConfig.nRefInitMutex==0 );'), (115026, 1, u'+    assert(sizeof(x)==8);'), (115027, 1, u'+    assert(sizeof(x)==sizeof(y));'), (115029, 1, u'+    assert( sqlite3IsNaN(y) );'), (115348, 1, u'+    assert( sz > (int)sizeof(LookasideSlot*) );'), (115589, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (115714, 1, u'+  assert( db->nDb<=2 );'), (115715, 1, u'+  assert( db->aDb==db->aDbStatic );'), (115774, 1, u'+  assert( db->lookaside.nOut==0 );  /* Fails on a lookaside memory leak */'), (115790, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (116004, 1, u'+  assert( count>=0 );'), (116135, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (116182, 1, u'+      assert( !db->mallocFailed );'), (116190, 1, u'+  assert(p || db->mallocFailed);'), (116254, 1, u'+    assert( rc!=SQLITE_OK );'), (116279, 1, u'+  assert( !db->mallocFailed );'), (116504, 1, u'+  assert( SQLITE_CHECKPOINT_FULL>SQLITE_CHECKPOINT_PASSIVE );'), (116505, 1, u'+  assert( SQLITE_CHECKPOINT_FULL<SQLITE_CHECKPOINT_RESTART );'), (116506, 1, u'+  assert( SQLITE_CHECKPOINT_PASSIVE+2==SQLITE_CHECKPOINT_RESTART );'), (116563, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (116564, 1, u'+  assert( !pnLog || *pnLog==-1 );'), (116565, 1, u'+  assert( !pnCkpt || *pnCkpt==-1 );'), (116634, 1, u'+    assert( !db->mallocFailed );'), (116738, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (116872, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_LENGTH]==SQLITE_MAX_LENGTH );'), (116873, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_SQL_LENGTH]==SQLITE_MAX_SQL_LENGTH );'), (116874, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_COLUMN]==SQLITE_MAX_COLUMN );'), (116875, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_EXPR_DEPTH]==SQLITE_MAX_EXPR_DEPTH );'), (116876, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_COMPOUND_SELECT]==SQLITE_MAX_COMPOUND_SELECT);'), (116877, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_VDBE_OP]==SQLITE_MAX_VDBE_OP );'), (116878, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_FUNCTION_ARG]==SQLITE_MAX_FUNCTION_ARG );'), (116879, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_ATTACHED]==SQLITE_MAX_ATTACHED );'), (116880, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_LIKE_PATTERN_LENGTH]=='), (116882, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_VARIABLE_NUMBER]==SQLITE_MAX_VARIABLE_NUMBER);'), (116883, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_TRIGGER_DEPTH]==SQLITE_MAX_TRIGGER_DEPTH );'), (116884, 1, u'+  assert( SQLITE_LIMIT_TRIGGER_DEPTH==(SQLITE_N_LIMIT-1) );'), (116939, 1, u'+  assert( *pzErrMsg==0 );'), (116993, 1, u'+        assert( octet>=0 && octet<256 );'), (117166, 1, u'+  assert( SQLITE_OPEN_READONLY  == 0x01 );'), (117167, 1, u'+  assert( SQLITE_OPEN_READWRITE == 0x02 );'), (117168, 1, u'+  assert( SQLITE_OPEN_CREATE    == 0x04 );'), (117229, 1, u'+  assert( sizeof(db->aLimit)==sizeof(aHardLimit) );'), (117266, 1, u'+  assert( db->pDfltColl!=0 );'), (117380, 1, u'+    assert( db->mutex!=0 || isThreadsafe==0 || sqlite3GlobalConfig.bFullMutex==0 );'), (117384, 1, u'+  assert( db!=0 || rc==SQLITE_NOMEM );'), (117433, 1, u'+  assert( zFilename );'), (117434, 1, u'+  assert( ppDb );'), (117446, 1, u'+    assert( *ppDb || rc==SQLITE_NOMEM );'), (117471, 1, u'+  assert( !db->mallocFailed );'), (117491, 1, u'+  assert( !db->mallocFailed );'), (117512, 1, u'+  assert( !db->mallocFailed );'), (117781, 1, u'+    assert( pPager!=0 );'), (117783, 1, u'+    assert( fd!=0 );'), (117901, 1, u'+    case SQLITE_TESTCTRL_ASSERT: {'), (117903, 1, u'+      assert( (x = va_arg(ap,int))!=0 );'), (118149, 1, u'+#define assertMutexHeld() \\'), (118150, 1, u'+  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) )'), (118182, 1, u'+    assert( p->pUnlockConnection || p->pBlockingConnection );'), (118187, 1, u'+      assert( p2->xUnlockNotify==p->xUnlockNotify || !seen );'), (118188, 1, u'+      assert( db==0 || p->pUnlockConnection!=db );'), (118189, 1, u'+      assert( db==0 || p->pBlockingConnection!=db );'), (118203, 1, u'+  assertMutexHeld();'), (118218, 1, u'+  assertMutexHeld();'), (118240, 1, u'+  assertMutexHeld();'), (118304, 1, u'+  assert( !db->mallocFailed );'), (118366, 1, u'+      assert( p->xUnlockNotify );'), (118373, 1, u'+      assert( aArg==aDyn || (aDyn==0 && aArg==aStatic) );'), (118374, 1, u'+      assert( nArg<=(int)ArraySize(aStatic) || aArg==aDyn );'), (119625, 1, u'+  assert( q - (unsigned char *)p <= FTS3_VARINT_MAX );'), (119753, 1, u'+  assert( p->nPendingData==0 );'), (119754, 1, u'+  assert( p->pSegments==0 );'), (119941, 1, u'+  assert( p->bHasStat==p->bFts4 );'), (119975, 1, u'+    assert( p->nPgsz>0 || rc!=SQLITE_OK );'), (120381, 1, u'+  assert( strlen(argv[0])==4 );'), (120382, 1, u'+  assert( (sqlite3_strnicmp(argv[0], "fts4", 4)==0 && isFts4)'), (120491, 1, u'+              assert( iOpt==6 );'), (120544, 1, u'+    assert( nString==0 );'), (120554, 1, u'+  assert( pTokenizer );'), (120558, 1, u'+    assert( zPrefix );'), (120620, 1, u'+    assert( zCsr <= &((char *)p)[nByte] );'), (120672, 1, u'+    assert( p->pSegments==0 );'), (120785, 1, u'+  assert( p->pSegments==0 );'), (120815, 1, u'+  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (120821, 1, u'+  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (120964, 1, u'+    assert( zBuffer );'), (121034, 1, u'+  assert( piLeaf || piLeaf2 );'), (121038, 1, u'+  assert( !piLeaf2 || !piLeaf || rc!=SQLITE_OK || (*piLeaf<=*piLeaf2) );'), (121075, 1, u'+  assert( iVal-*piPrev > 0 || (*piPrev==0 && iVal==0) );'), (121330, 1, u'+  assert( isSaveLeft==0 || isExact==0 );'), (121332, 1, u'+  assert( p!=0 && *p1!=0 && *p2!=0 );'), (121354, 1, u'+      assert( *p1!=POS_END && *p1!=POS_COLUMN );'), (121355, 1, u'+      assert( *p2!=POS_END && *p2!=POS_COLUMN );'), (121367, 1, u'+          assert( p );'), (121379, 1, u'+        assert( pp && p );'), (121385, 1, u'+      assert( (*p1&0xFE)==0 && (*p2&0xFE)==0 );'), (121544, 1, u'+  assert( *pbFirst || *piPrev==0 );'), (121545, 1, u'+  assert( *pbFirst==0 || iWrite>0 );'), (121653, 1, u'+  assert( *pnOut<=n1+n2+FTS3_VARINT_MAX-1 );'), (121686, 1, u'+  assert( nDist>0 );'), (121856, 1, u'+        assert( iOut>0 );'), (122001, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (122002, 1, u'+  assert( iLevel==FTS3_SEGCURSOR_ALL'), (122006, 1, u'+  assert( iLevel<FTS3_SEGDIR_MAXLEVEL );'), (122007, 1, u'+  assert( FTS3_SEGCURSOR_ALL<0 && FTS3_SEGCURSOR_PENDING<0 );'), (122008, 1, u'+  assert( isPrefix==0 || isScan==0 );'), (122210, 1, u'+  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (122245, 1, u'+  assert( idxNum>=0 && idxNum<=(FTS3_FULLTEXT_SEARCH+p->nColumn) );'), (122246, 1, u'+  assert( nVal==0 || nVal==1 || nVal==2 );'), (122247, 1, u'+  assert( (nVal==0)==(idxNum==FTS3_FULLSCAN_SEARCH) );'), (122248, 1, u'+  assert( p->pSegments==0 );'), (122274, 1, u'+    assert( p->base.zErrMsg==0 );'), (122362, 1, u'+  assert( iCol>=0 && iCol<=p->nColumn+2 );'), (122393, 1, u'+  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (122446, 1, u'+    assert( rc==SQLITE_OK || mxLevel==0 );'), (122461, 1, u'+  assert( p->pSegments==0 );'), (122462, 1, u'+  assert( p->nPendingData==0 );'), (122463, 1, u'+  assert( p->inTransaction!=1 );'), (122478, 1, u'+  assert( p->nPendingData==0 );'), (122479, 1, u'+  assert( p->inTransaction!=0 );'), (122480, 1, u'+  assert( p->pSegments==0 );'), (122493, 1, u'+  assert( p->inTransaction!=0 );'), (122566, 1, u'+  assert( nVal>=1 );'), (122601, 1, u'+  assert( nVal==1 );'), (122603, 1, u'+  assert( pCsr );'), (122629, 1, u'+  assert( nVal==1 );'), (122632, 1, u'+  assert( p );'), (122658, 1, u'+  assert( nVal==1 || nVal==2 );'), (122722, 1, u'+  assert( p->nPendingData==0 );'), (122763, 1, u'+  assert( ((Fts3Table *)pVtab)->inTransaction );'), (122764, 1, u'+  assert( ((Fts3Table *)pVtab)->mxSavepoint < iSavepoint );'), (122781, 1, u'+  assert( p->inTransaction );'), (122782, 1, u'+  assert( p->mxSavepoint >= iSavepoint );'), (122795, 1, u'+  assert( p->inTransaction );'), (122796, 1, u'+  assert( p->mxSavepoint >= iSavepoint );'), (122951, 1, u'+  assert( rc!=SQLITE_OK );'), (122996, 1, u'+      assert( pExpr->pPhrase->iDoclistToken==0 );'), (123021, 1, u'+  assert( iToken!=p->iDoclistToken );'), (123084, 1, u'+    assert( pToken->pDeferred==0 || pToken->pSegcsr==0 );'), (123094, 1, u'+    assert( pToken->pSegcsr==0 );'), (123116, 1, u'+  assert( pPhrase->doclist.bFreeList==0 );'), (123143, 1, u'+        assert( iPrev>=0 );'), (123240, 1, u'+  assert( rc!=SQLITE_OK || p->nToken<1 || p->aToken[0].pSegcsr==0 || p->bIncr );'), (123265, 1, u'+  assert( nDoclist>0 );'), (123266, 1, u'+  assert( *pbEof==0 );'), (123267, 1, u'+  assert( p || *piDocid==0 );'), (123268, 1, u'+  assert( !p || (p>aDoclist && p<&aDoclist[nDoclist]) );'), (123320, 1, u'+  assert( nDoclist>0 );'), (123321, 1, u'+  assert( *pbEof==0 );'), (123322, 1, u'+  assert( p || *piDocid==0 );'), (123323, 1, u'+  assert( !p || (p>=aDoclist && p<=&aDoclist[nDoclist]) );'), (123361, 1, u'+    assert( p->nToken==1 );'), (123362, 1, u'+    assert( pDL->pNextDocid==0 );'), (123407, 1, u'+      assert( pIter>=&pDL->aAll[pDL->nAll] || *pIter );'), (123505, 1, u'+      assert( pExpr->eType==FTSQUERY_OR'), (123509, 1, u'+      assert( pExpr->pLeft && pExpr->pRight );'), (123561, 1, u'+    assert( a );'), (123575, 1, u'+    assert( pCsr->nRowAvg>0 );'), (123636, 1, u'+  assert( rc!=SQLITE_OK || nDocSize>0 );'), (123673, 1, u'+    assert( pTC );'), (123698, 1, u'+        assert( rc==SQLITE_OK || pList==0 );'), (123822, 1, u'+  assert( pPhrase->doclist.pList );'), (123830, 1, u"+    assert( pPhrase->doclist.pList[nNew]=='\\0' );"), (123831, 1, u'+    assert( nNew<=pPhrase->doclist.nList && nNew>0 );'), (123889, 1, u'+    assert( pExpr->bEof==0 );'), (123897, 1, u'+        assert( !pLeft->bDeferred || !pRight->bDeferred );'), (123935, 1, u'+        assert( pLeft->bStart || pLeft->iDocid==pRight->iDocid );'), (123936, 1, u'+        assert( pRight->bStart || pLeft->iDocid==pRight->iDocid );'), (123964, 1, u'+          assert( *pRc!=SQLITE_OK || pRight->bStart );'), (124066, 1, u'+          assert( p->pParent && p->pParent->pLeft==p );'), (124161, 1, u'+          assert( pExpr->bDeferred || pPhrase->doclist.bFreeList==0 );'), (124237, 1, u'+  assert( pCsr->isEof==0 );'), (124245, 1, u'+      assert( sqlite3_data_count(pCsr->pStmt)==0 );'), (124276, 1, u'+        assert( pPhrase->nToken==1 );'), (124277, 1, u'+        assert( pPhrase->aToken[0].pSegcsr );'), (124310, 1, u'+      assert( *p );'), (124352, 1, u'+  assert( pExpr->eType==FTSQUERY_PHRASE );'), (124369, 1, u'+    assert( pRoot->bStart );'), (124374, 1, u'+      assert( pE->aMI==0 );'), (124387, 1, u'+        assert( sqlite3_data_count(pCsr->pStmt)==0 );'), (124420, 1, u'+        assert( pRoot->bEof==0 );'), (124468, 1, u'+    assert( pCsr->nDoc>0 );'), (124476, 1, u'+      assert( pExpr->aMI );'), (124521, 1, u'+  assert( iCol>=0 && iCol<pTab->nColumn );'), (124554, 1, u'+      assert( rc!=SQLITE_OK || pPhrase->bIncr==0 );'), (124563, 1, u'+    assert( bDescDoclist==0 || bDescDoclist==1 );'), (124564, 1, u'+    assert( pCsr->bDesc==0 || pCsr->bDesc==1 );'), (124956, 1, u'+          assert( iCol==0 );'), (124975, 1, u'+        default: assert( eState==3 );'), (125010, 1, u'+  assert( idxStr==0 );'), (125011, 1, u'+  assert( idxNum==FTS4AUX_EQ_CONSTRAINT || idxNum==0'), (125071, 1, u'+  assert( p->isEof==0 );'), (125282, 1, u'+  assert( rc==SQLITE_OK || pCsr==0 );'), (125453, 1, u'+        assert( nToken==ii );'), (125488, 1, u'+      assert( nTemp==0 );'), (125579, 1, u'+        assert( nKey==4 );'), (125698, 1, u'+  assert( p->eType!=FTSQUERY_PHRASE );'), (125706, 1, u'+  assert( p->eType==FTSQUERY_AND );'), (125729, 1, u'+    assert( pSplit->pParent->pRight==pSplit );'), (125807, 1, u'+          assert( pRet && pPrev );'), (125839, 1, u'+            assert( pPrev && pPrev->pLeft && pPrev->pRight==0 );'), (125850, 1, u'+      assert( nByte>0 );'), (125852, 1, u'+    assert( rc!=SQLITE_OK || (nByte>0 && nByte<=nIn) );'), (125945, 1, u'+        assert( p->pParent==0 || p->pParent->pLeft==p );'), (125946, 1, u'+        assert( p->pLeft && p->pRight );'), (125954, 1, u'+        assert( pParent==0 || pParent->pLeft==p );'), (125969, 1, u'+            assert( pFree );'), (125994, 1, u'+        assert( pParent->pParent==0 || pParent->pParent->pLeft==pParent );'), (125999, 1, u'+          assert( pParent==pRoot );'), (126017, 1, u'+              assert( pFree!=0 );'), (126044, 1, u'+      assert( pFree==0 );'), (126097, 1, u'+  assert( rc==SQLITE_OK || *ppExpr==0 );'), (126176, 1, u'+  assert( p->eType==FTSQUERY_PHRASE || p->pPhrase==0 );'), (126191, 1, u'+  assert( pDel==0 || pDel->pParent==0 );'), (126193, 1, u'+    assert( p->pParent==0 || p==p->pParent->pRight || p==p->pParent->pLeft );'), (126201, 1, u'+        assert( p==p->pParent->pRight || p==p->pParent->pLeft );'), (126349, 1, u'+  assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (126373, 1, u'+    assert( rc==SQLITE_OK || pExpr==0 );'), (126478, 1, u'+  assert( pNew!=0 );'), (126479, 1, u'+  assert( keyClass>=FTS3_HASH_STRING && keyClass<=FTS3_HASH_BINARY );'), (126495, 1, u'+  assert( pH!=0 );'), (126562, 1, u'+    assert( keyClass==FTS3_HASH_BINARY );'), (126577, 1, u'+    assert( keyClass==FTS3_HASH_BINARY );'), (126619, 1, u'+  assert( (new_size & (new_size-1))==0 );'), (126694, 1, u'+    assert( pH->first==0 );'), (126695, 1, u'+    assert( pH->count==0 );'), (126710, 1, u'+  assert( xHash!=0 );'), (126712, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (126755, 1, u'+  assert( pH!=0 );'), (126757, 1, u'+  assert( xHash!=0 );'), (126759, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (126778, 1, u'+  assert( pH->htsize>0 );'), (126793, 1, u'+  assert( pH->htsize>0 );'), (126794, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (126956, 1, u"+  assert( x>='a' && x<='z' );"), (126965, 1, u"+  assert( x>='a' && x<='z' );"), (127512, 1, u'+  assert( argc==1 || argc==2 );'), (127640, 1, u'+    assert( rc!=SQLITE_OK || *ppTok );'), (127859, 1, u'+  assert( rc==SQLITE_OK );'), (127860, 1, u'+  assert( p1==p2 );'), (127862, 1, u'+  assert( rc==SQLITE_ERROR );'), (127863, 1, u'+  assert( p2==0 );'), (127864, 1, u'+  assert( 0==strcmp(sqlite3_errmsg(db), "unknown tokenizer: nosuchtokenizer") );'), (127868, 1, u'+  assert( rc==SQLITE_OK );'), (127870, 1, u'+  assert( rc==SQLITE_OK );'), (127871, 1, u'+  assert( p2==p1 );'), (128364, 1, u'+  assert( (rc==SQLITE_OK)==(pMod!=0) );'), (128429, 1, u'+  assert( pInfo->estimatedCost>1000000.0 );'), (128574, 1, u'+      assert( iCol==4 );'), (129008, 1, u'+  assert( SizeofArray(azSql)==SizeofArray(p->aStmt) );'), (129009, 1, u'+  assert( eStmt<SizeofArray(azSql) && eStmt>=0 );'), (129026, 1, u'+      assert( rc==SQLITE_OK || pStmt==0 );'), (129189, 1, u'+  assert( iLangid>=0 );'), (129190, 1, u'+  assert( p->nIndex>0 );'), (129191, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (129224, 1, u'+  assert( iLevel==FTS3_SEGCURSOR_ALL || iLevel>=0 );'), (129225, 1, u'+  assert( iLevel<FTS3_SEGDIR_MAXLEVEL );'), (129226, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (129315, 1, u'+  assert( !p || p->iLastDocid<=iDocid );'), (129320, 1, u'+      assert( p->nData<p->nSpace );'), (129321, 1, u'+      assert( p->aData[p->nData]==0 );'), (129341, 1, u'+    assert( iPos>p->iLastPos || (iPos==0 && p->iLastPos==0) );'), (129387, 1, u'+      assert( 0==fts3HashFind(pHash, zToken, nToken) );'), (129427, 1, u'+  assert( pTokenizer && pModule );'), (129488, 1, u'+  assert( iLangid>=0 );'), (129647, 1, u'+  assert( p->zContentTbl==0 || bContent==0 );'), (129684, 1, u'+  assert( *pbFound==0 );'), (129743, 1, u'+  assert( iLangid>=0 );'), (129744, 1, u'+  assert( p->nIndex>=1 );'), (129813, 1, u'+  assert( pnBlob );'), (129888, 1, u'+  assert( !pReader->pBlob'), (129945, 1, u'+        assert( pReader->aNode );'), (129954, 1, u'+    assert( pReader->iCurrentBlock<=pReader->iLeafEndBlock );'), (129964, 1, u'+    assert( pReader->pBlob==0 );'), (129972, 1, u'+  assert( !fts3SegReaderIsPending(pReader) );'), (130025, 1, u'+  assert( pReader->aDoclist );'), (130026, 1, u'+  assert( !pReader->pOffsetList );'), (130065, 1, u'+  assert( p );'), (130100, 1, u'+      assert( *p==0 );'), (130155, 1, u'+  assert( p->bFts4 );'), (130156, 1, u'+  assert( pgsz>0 );'), (130209, 1, u'+  assert( iStartLeaf<=iEndLeaf );'), (130391, 1, u'+  assert( rc!=0 );'), (130415, 1, u'+  assert( pLhs->aNode && pRhs->aNode );'), (130427, 1, u'+  assert( pLhs->aNode && pRhs->aNode );'), (130472, 1, u'+  assert( nSuspect<=nSegment );'), (130489, 1, u'+    assert( xCmp(apSegment[i], apSegment[i+1])<0 );'), (130621, 1, u'+        assert( pTree->aData==(char *)&pTree[1] );'), (130704, 1, u'+  assert( iHeight>=1 && iHeight<128 );'), (130755, 1, u'+      assert( iNextLeaf==iFree );'), (130777, 1, u'+      assert( pRight==0 || p->zMalloc==0 );'), (130865, 1, u'+    assert( nPrefix<nTerm );'), (130890, 1, u'+  assert( nData+nReq<=pWriter->nSize );'), (130916, 1, u'+    assert( pWriter->zTerm==pWriter->zMalloc );'), (131022, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (131098, 1, u'+  assert( iLevel>=0 || iLevel==FTS3_SEGCURSOR_ALL );'), (131148, 1, u'+  assert( iCol>=0 );'), (131246, 1, u'+        assert( (pMsr->aBuffer[nList] & 0xFE)==0x00 );'), (131321, 1, u'+  assert( pCsr->pFilter==0 );'), (131322, 1, u'+  assert( zTerm && nTerm>0 );'), (131344, 1, u'+  assert( iCol<0 || iCol<p->nColumn );'), (131365, 1, u'+  assert( pCsr->zTerm==0 );'), (131366, 1, u'+  assert( pCsr->nTerm==0 );'), (131367, 1, u'+  assert( pCsr->aDoclist==0 );'), (131368, 1, u'+  assert( pCsr->nDoclist==0 );'), (131424, 1, u'+    assert( rc==SQLITE_OK );'), (131455, 1, u'+    assert( isIgnoreEmpty || (isRequirePos && !isColFilter) );'), (131511, 1, u'+          assert( iDelta>0 || (nDoclist==0 && iDelta==iDocid) );'), (131512, 1, u'+          assert( nDoclist>0 || iDelta==iDocid );'), (131602, 1, u'+  assert( iLevel==FTS3_SEGCURSOR_ALL'), (131606, 1, u'+  assert( iLevel<FTS3_SEGDIR_MAXLEVEL );'), (131607, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (131636, 1, u'+  assert( csr.nSegment>0 );'), (131637, 1, u'+  assert( iNewLevel>=getAbsoluteLevel(p, iLangid, iIndex, 0) );'), (131638, 1, u'+  assert( iNewLevel<getAbsoluteLevel(p, iLangid, iIndex,FTS3_SEGDIR_MAXLEVEL) );'), (131652, 1, u'+  assert( pWriter );'), (131730, 1, u'+    assert(j<=nBuf);'), (132002, 1, u'+    assert( pCsr->nSegment==0 );'), (132120, 1, u'+  assert( p->aNode );'), (132144, 1, u'+  assert( p->iOff<=p->nNode );'), (132198, 1, u'+  assert( nTerm>0 );'), (132249, 1, u'+      assert( pNode->block.nAlloc>=p->nNodeSize );'), (132262, 1, u'+  assert( 0 );'), (132305, 1, u'+  assert( pNode->n>0 );'), (132306, 1, u"+  assert( (pNode->a[0]=='\\0')==(aDoclist!=0) );"), (132329, 1, u'+  assert( pNode->n<=pNode->nAlloc );'), (132442, 1, u'+    assert( *pRc || pNode->block.nAlloc==0 );'), (132443, 1, u'+    assert( *pRc || pNode->key.nAlloc==0 );'), (132620, 1, u'+          assert( reader.aNode );'), (132873, 1, u'+  assert( p->bIgnoreSavepoint==0 );'), (132892, 1, u'+    assert( pNode->nAlloc>=1+sqlite3Fts3VarintLen(iChild) );'), (132895, 1, u'+    assert( pNode->nAlloc>=1 );'), (132947, 1, u'+  assert( pNew->n<=pNew->nAlloc );'), (133068, 1, u'+    assert( j<pCsr->nSegment && pSeg->iIdx==i );'), (133381, 1, u'+      assert( p->bFts4==0 );'), (133408, 1, u'+    assert( p->bFts4==0 );'), (133466, 1, u'+  assert( *pRc==SQLITE_OK );'), (133738, 1, u'+    assert( pCsr->isRequireSeek==0 );'), (133824, 1, u'+  assert( pToken->pDeferred==0 );'), (133899, 1, u'+  assert( p->pSegments==0 );'), (133900, 1, u'+  assert('), (133982, 1, u'+    assert( sqlite3_value_type(apVal[0])==SQLITE_INTEGER );'), (134000, 1, u'+      assert( p->iPrevDocid==*pRowid );'), (134191, 1, u'+    assert( pExpr->pLeft && pExpr->pRight );'), (134373, 1, u'+        assert( iCsr>=iStart );'), (134410, 1, u'+  assert( rc==SQLITE_OK || pCsr==0 );'), (134415, 1, u'+    assert( iFirst>=0 );'), (134421, 1, u'+    assert( rc!=SQLITE_OK || ('), (134507, 1, u'+    assert( iScore>=0 );'), (134629, 1, u'+      assert( nShift<=nDesired );'), (134884, 1, u'+      assert( cArg==FTS3_MATCHINFO_HITS );'), (134907, 1, u'+  assert( sqlite3_data_count(pStmt)==1 );'), (135139, 1, u'+        assert( zArg[i]==FTS3_MATCHINFO_HITS );'), (135185, 1, u'+    assert( pCsr->aMatchinfo );'), (135312, 1, u'+    assert( (mCovered&mSeen)==mCovered );'), (135316, 1, u'+  assert( nFToken>0 );'), (135368, 1, u'+    assert( iPos>=0 );'), (135402, 1, u'+  assert( pCsr->isRequireSeek==0 );'), (135478, 1, u'+        assert( iCurrent<=iMinPos );'), (135508, 1, u'+  assert( rc!=SQLITE_DONE );'), (135706, 1, u'+  assert( bAlnum==0 || bAlnum==1 );'), (135710, 1, u'+    assert( (sqlite3FtsUnicodeIsalnum(iCode) & 0xFFFFFFFE)==0 );'), (135775, 1, u'+  assert( (sqlite3FtsUnicodeIsalnum(iCode) & 0xFFFFFFFE)==0 );'), (136107, 1, u'+    assert( aEntry[0]<key );'), (136108, 1, u'+    assert( key>=aEntry[iRes] );'), (136164, 1, u'+  assert( key>=aDia[iRes] );'), (136286, 1, u'+  assert( c>=0 );'), (136287, 1, u'+  assert( sizeof(unsigned short)==2 && sizeof(unsigned char)==1 );'), (136306, 1, u'+    assert( iRes<0 || c>=aEntry[iRes].iCode );'), (136312, 1, u'+        assert( ret>0 );'), (136702, 1, u'+  assert( sizeof(RtreeCoord)==4 );'), (136703, 1, u'+  assert( sizeof(u32)==4 );'), (136766, 1, u'+  assert( pNode->pNext==0 );'), (136779, 1, u'+    for( ; (*pp)!=pNode; pp = &(*pp)->pNext){ assert(*pp); }'), (136823, 1, u'+    assert( !pParent || !pNode->pParent || pNode->pParent==pParent );'), (136942, 1, u'+  assert( nCell<=nMaxCell );'), (136985, 1, u'+    assert( pNode->nRef>0 );'), (137014, 1, u'+  assert( iCell<NCELL(pNode) );'), (137219, 1, u'+  assert( pConstraint->op==RTREE_MATCH );'), (137220, 1, u'+  assert( pConstraint->pGeom );'), (137249, 1, u'+    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (137267, 1, u'+        assert( p->op==RTREE_MATCH );'), (137301, 1, u'+    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (137312, 1, u'+        assert( p->op==RTREE_MATCH );'), (137351, 1, u'+  assert( iHeight>=0 );'), (137380, 1, u'+    assert( pCursor->pNode==pChild );'), (137438, 1, u'+  assert( pCsr->pNode );'), (137478, 1, u'+  assert(pCsr->pNode);'), (137503, 1, u'+      assert( pRtree->eCoordType==RTREE_COORD_INT32 );'), (137605, 1, u'+      assert( rc==SQLITE_OK );'), (137619, 1, u'+        assert( (idxStr==0 && argc==0)'), (137654, 1, u'+        assert( pCsr->pNode==pRoot );'), (137661, 1, u'+        assert( pCsr->pNode==pRoot );'), (137665, 1, u'+      assert( rc!=SQLITE_OK || !pCsr->pNode || pCsr->iCell<NCELL(pCsr->pNode) );'), (137716, 1, u'+  assert( pIdxInfo->idxStr==0 );'), (137749, 1, u'+          assert( p->op==SQLITE_INDEX_CONSTRAINT_MATCH );'), (137765, 1, u'+  assert( iIdx>=0 );'), (137858, 1, u'+    assert( iExclude==-1 );'), (138266, 1, u'+        assert( left<=right );'), (138333, 1, u'+        assert( xleft1<=xright1 && (xleft1<xright1 || xleft2<=xright2) );'), (138701, 1, u'+  assert( pNode->nRef==1 );'), (138790, 1, u'+  assert( pParent || pNode->iNode==1 );'), (139114, 1, u'+  assert(nData>=1);'), (139131, 1, u'+    assert( nData==(pRtree->nDim*2 + 3) );'), (139777, 1, u'+    assert(uPattern!=0);'), (139961, 1, u'+      assert(!pExpr);'), (140027, 1, u'+  assert(nArg==1 || nArg==2);'), (140086, 1, u'+  assert(!"Unexpected return value from ucol_strcoll()");'), (140115, 1, u'+  assert(nArg==2);'), (140128, 1, u'+  assert(p);'), (140402, 1, u'+    assert(iStart<=iEnd);')]
===========================================
<type 'unicode'>
507
Mismatch count:239
Normal count:2481
