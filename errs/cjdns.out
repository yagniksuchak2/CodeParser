projects/top_C/cjdns
Going to process projects/top_C/cjdns/all_log.txt 
---------- cjdns ------------

===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_true(!"should never happen");')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_true(!"should never happen");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_true(!"should never happen");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(strlen((char*)expectedOutput) == 264);'), (3, 1, u'+    Assert_true(CString_strlen((char*)expectedOutput) == 264);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: testHello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(strlen((char*)expectedOutput) == 264);'), (3, 1, u'+    Assert_true(CString_strlen((char*)expectedOutput) == 264);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(strlen((char*)expectedOutput) == 264);'), (3, 1, u'+    Assert_true(CString_strlen((char*)expectedOutput) == 264);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);'), (3, 1, u'+    Assert_true(Hex_decode(message, 132, messageHex, CString_strlen((char*)messageHex)) > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: receiveHelloWithNoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);'), (3, 1, u'+    Assert_true(Hex_decode(message, 132, messageHex, CString_strlen((char*)messageHex)) > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);'), (3, 1, u'+    Assert_true(Hex_decode(message, 132, messageHex, CString_strlen((char*)messageHex)) > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(12 == strlen(text));'), (3, 1, u'+    Assert_true(12 == CString_strlen(text));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(12 == strlen(text));'), (3, 1, u'+    Assert_true(12 == CString_strlen(text));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(12 == strlen(text));'), (3, 1, u'+    Assert_true(12 == CString_strlen(text));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(output && output->length == (int)strlen(text));'), (3, 2, u'-    Assert_true(!Bits_memcmp(output->bytes, text, strlen(text)));'), (4, 1, u'+    Assert_true(output && output->length == (int)CString_strlen(text));'), (5, 1, u'+    Assert_true(!Bits_memcmp(output->bytes, text, CString_strlen(text)));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(output && output->length == (int)strlen(text));'), (3, 2, u'-    Assert_true(!Bits_memcmp(output->bytes, text, strlen(text)));'), (4, 1, u'+    Assert_true(output && output->length == (int)CString_strlen(text));'), (5, 1, u'+    Assert_true(!Bits_memcmp(output->bytes, text, CString_strlen(text)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(output && output->length == (int)strlen(text));'), (3, 2, u'-    Assert_true(!Bits_memcmp(output->bytes, text, strlen(text)));'), (4, 1, u'+    Assert_true(output && output->length == (int)CString_strlen(text));'), (5, 1, u'+    Assert_true(!Bits_memcmp(output->bytes, text, CString_strlen(text)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(output && output->length == (int)strlen(text));'), (3, 2, u'-    Assert_true(!Bits_memcmp(output->bytes, text, strlen(text)));'), (4, 1, u'+    Assert_true(output && output->length == (int)CString_strlen(text));'), (5, 1, u'+    Assert_true(!Bits_memcmp(output->bytes, text, CString_strlen(text)));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(output && output->length == (int)strlen(text));'), (3, 2, u'-    Assert_true(!Bits_memcmp(output->bytes, text, strlen(text)));'), (4, 1, u'+    Assert_true(output && output->length == (int)CString_strlen(text));'), (5, 1, u'+    Assert_true(!Bits_memcmp(output->bytes, text, CString_strlen(text)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(output && output->length == (int)strlen(text));'), (3, 2, u'-    Assert_true(!Bits_memcmp(output->bytes, text, strlen(text)));'), (4, 1, u'+    Assert_true(output && output->length == (int)CString_strlen(text));'), (5, 1, u'+    Assert_true(!Bits_memcmp(output->bytes, text, CString_strlen(text)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->length == (int32_t) strlen(expectedResponse));'), (3, 1, u'+    Assert_true(message->length == (int32_t) CString_strlen(expectedResponse));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: responseWithIpCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->length == (int32_t) strlen(expectedResponse));'), (3, 1, u'+    Assert_true(message->length == (int32_t) CString_strlen(expectedResponse));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->length == (int32_t) strlen(expectedResponse));'), (3, 1, u'+    Assert_true(message->length == (int32_t) CString_strlen(expectedResponse));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(strlen(outAddr) == strlen(expectedOutput));'), (3, 2, u'-    Assert_true(!strcmp(outAddr, expectedOutput));'), (4, 1, u'+    Assert_true(CString_strlen(outAddr) == CString_strlen(expectedOutput));'), (5, 1, u'+    Assert_true(!CString_strcmp(outAddr, expectedOutput));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: expectConvert
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(strlen(outAddr) == strlen(expectedOutput));'), (3, 2, u'-    Assert_true(!strcmp(outAddr, expectedOutput));'), (4, 1, u'+    Assert_true(CString_strlen(outAddr) == CString_strlen(expectedOutput));'), (5, 1, u'+    Assert_true(!CString_strcmp(outAddr, expectedOutput));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(strlen(outAddr) == strlen(expectedOutput));'), (3, 2, u'-    Assert_true(!strcmp(outAddr, expectedOutput));'), (4, 1, u'+    Assert_true(CString_strlen(outAddr) == CString_strlen(expectedOutput));'), (5, 1, u'+    Assert_true(!CString_strcmp(outAddr, expectedOutput));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (3, 2, u'-        Assert_true(strstr(path, ".exe"));'), (4, 1, u'+        Assert_true(CString_strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (5, 1, u'+        Assert_true(CString_strstr(path, ".exe"));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (3, 2, u'-        Assert_true(strstr(path, ".exe"));'), (4, 1, u'+        Assert_true(CString_strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (5, 1, u'+        Assert_true(CString_strstr(path, ".exe"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (3, 2, u'-        Assert_true(strstr(path, ".exe"));'), (4, 1, u'+        Assert_true(CString_strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (5, 1, u'+        Assert_true(CString_strstr(path, ".exe"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(splitLinkParent->child == splitLink->parent);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: asyncSplitLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(splitLinkParent->child == splitLink->parent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(splitLinkParent->child == splitLink->parent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            | assertBits(ArchInfo_Bits_64)'), (9, 2, u'-            | assertEndian(ArchInfo_Endian_LITTLE);'), (16, 2, u'-            | assertBits(ArchInfo_Arch_32)'), (17, 2, u'-            | assertEndian(ArchInfo_Endian_LITTLE);'), (43, 2, u'-            | assertBits(ArchInfo_Arch_64)'), (44, 2, u'-            | assertEndian(ArchInfo_Endian_BIG);'), (50, 2, u'-            | assertBits(ArchInfo_Arch_32)'), (51, 2, u'-            | assertEndian(ArchInfo_Endian_BIG);'), (58, 2, u'-            | assertBits(ArchInfo_Arch_64)'), (59, 2, u'-            | assertEndian(ArchInfo_Endian_BIG);'), (66, 2, u'-            | assertBits(ArchInfo_Arch_32)'), (67, 2, u'-            | assertEndian(ArchInfo_Endian_BIG);'), (72, 2, u'-        uint32_t out = ArchInfo_SPARC | detectBits() | assertEndian(ArchInfo_Endian_BIG);'), (90, 2, u'-            return out | assertBits(ArchInfo_Arch_32) | ArchInfo_Mips_OABI;'), (94, 2, u'-            return out | assertBits(ArchInfo_Arch_32) | ArchInfo_Mips_NABI;'), (97, 1, u'+            return arch | assertBits(ArchInfo_Bits_64) | assertEndian(ArchInfo_Endian_LITTLE);'), (107, 1, u'+            return arch | assertBits(ArchInfo_Bits_32) | assertEndian(ArchInfo_Endian_LITTLE);'), (129, 1, u'+            return arch | assertBits(ArchInfo_Bits_64) | assertEndian(ArchInfo_Endian_BIG);'), (132, 1, u'+            return arch | assertBits(ArchInfo_Bits_32) | assertEndian(ArchInfo_Endian_BIG);'), (135, 1, u'+            return arch | assertBits(ArchInfo_Bits_64) | assertEndian(ArchInfo_Endian_BIG);'), (138, 1, u'+            return arch | assertBits(ArchInfo_Bits_32) | assertEndian(ArchInfo_Endian_BIG);'), (147, 1, u'+            return arch | assertEndian(ArchInfo_Endian_BIG);'), (156, 1, u'+                return arch | ArchInfo_Mips_OABI | assertBits(ArchInfo_Bits_32);'), (167, 1, u'+                return arch | ArchInfo_Mips_NABI | assertBits(ArchInfo_Bits_32);'), (171, 2, u'-            return out | assertBits(ArchInfo_Arch_64);'), (178, 1, u'+            return arch | assertBits(ArchInfo_Bits_64);')]
===========================================
===========================================
Total add: 90
Total del: 75
Header: ArchInfo_detect
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            | assertBits(ArchInfo_Bits_64)'), (9, 2, u'-            | assertEndian(ArchInfo_Endian_LITTLE);'), (16, 2, u'-            | assertBits(ArchInfo_Arch_32)'), (17, 2, u'-            | assertEndian(ArchInfo_Endian_LITTLE);'), (43, 2, u'-            | assertBits(ArchInfo_Arch_64)'), (44, 2, u'-            | assertEndian(ArchInfo_Endian_BIG);'), (50, 2, u'-            | assertBits(ArchInfo_Arch_32)'), (51, 2, u'-            | assertEndian(ArchInfo_Endian_BIG);'), (58, 2, u'-            | assertBits(ArchInfo_Arch_64)'), (59, 2, u'-            | assertEndian(ArchInfo_Endian_BIG);'), (66, 2, u'-            | assertBits(ArchInfo_Arch_32)'), (67, 2, u'-            | assertEndian(ArchInfo_Endian_BIG);'), (72, 2, u'-        uint32_t out = ArchInfo_SPARC | detectBits() | assertEndian(ArchInfo_Endian_BIG);'), (90, 2, u'-            return out | assertBits(ArchInfo_Arch_32) | ArchInfo_Mips_OABI;'), (94, 2, u'-            return out | assertBits(ArchInfo_Arch_32) | ArchInfo_Mips_NABI;'), (97, 1, u'+            return arch | assertBits(ArchInfo_Bits_64) | assertEndian(ArchInfo_Endian_LITTLE);'), (107, 1, u'+            return arch | assertBits(ArchInfo_Bits_32) | assertEndian(ArchInfo_Endian_LITTLE);'), (129, 1, u'+            return arch | assertBits(ArchInfo_Bits_64) | assertEndian(ArchInfo_Endian_BIG);'), (132, 1, u'+            return arch | assertBits(ArchInfo_Bits_32) | assertEndian(ArchInfo_Endian_BIG);'), (135, 1, u'+            return arch | assertBits(ArchInfo_Bits_64) | assertEndian(ArchInfo_Endian_BIG);'), (138, 1, u'+            return arch | assertBits(ArchInfo_Bits_32) | assertEndian(ArchInfo_Endian_BIG);'), (147, 1, u'+            return arch | assertEndian(ArchInfo_Endian_BIG);'), (156, 1, u'+                return arch | ArchInfo_Mips_OABI | assertBits(ArchInfo_Bits_32);'), (167, 1, u'+                return arch | ArchInfo_Mips_NABI | assertBits(ArchInfo_Bits_32);'), (171, 2, u'-            return out | assertBits(ArchInfo_Arch_64);'), (178, 1, u'+            return arch | assertBits(ArchInfo_Bits_64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            | assertBits(ArchInfo_Bits_64)'), (9, 2, u'-            | assertEndian(ArchInfo_Endian_LITTLE);'), (16, 2, u'-            | assertBits(ArchInfo_Arch_32)'), (17, 2, u'-            | assertEndian(ArchInfo_Endian_LITTLE);'), (43, 2, u'-            | assertBits(ArchInfo_Arch_64)'), (44, 2, u'-            | assertEndian(ArchInfo_Endian_BIG);'), (50, 2, u'-            | assertBits(ArchInfo_Arch_32)'), (51, 2, u'-            | assertEndian(ArchInfo_Endian_BIG);'), (58, 2, u'-            | assertBits(ArchInfo_Arch_64)'), (59, 2, u'-            | assertEndian(ArchInfo_Endian_BIG);'), (66, 2, u'-            | assertBits(ArchInfo_Arch_32)'), (67, 2, u'-            | assertEndian(ArchInfo_Endian_BIG);'), (72, 2, u'-        uint32_t out = ArchInfo_SPARC | detectBits() | assertEndian(ArchInfo_Endian_BIG);'), (90, 2, u'-            return out | assertBits(ArchInfo_Arch_32) | ArchInfo_Mips_OABI;'), (94, 2, u'-            return out | assertBits(ArchInfo_Arch_32) | ArchInfo_Mips_NABI;'), (97, 1, u'+            return arch | assertBits(ArchInfo_Bits_64) | assertEndian(ArchInfo_Endian_LITTLE);'), (107, 1, u'+            return arch | assertBits(ArchInfo_Bits_32) | assertEndian(ArchInfo_Endian_LITTLE);'), (129, 1, u'+            return arch | assertBits(ArchInfo_Bits_64) | assertEndian(ArchInfo_Endian_BIG);'), (132, 1, u'+            return arch | assertBits(ArchInfo_Bits_32) | assertEndian(ArchInfo_Endian_BIG);'), (135, 1, u'+            return arch | assertBits(ArchInfo_Bits_64) | assertEndian(ArchInfo_Endian_BIG);'), (138, 1, u'+            return arch | assertBits(ArchInfo_Bits_32) | assertEndian(ArchInfo_Endian_BIG);'), (147, 1, u'+            return arch | assertEndian(ArchInfo_Endian_BIG);'), (156, 1, u'+                return arch | ArchInfo_Mips_OABI | assertBits(ArchInfo_Bits_32);'), (167, 1, u'+                return arch | ArchInfo_Mips_NABI | assertBits(ArchInfo_Bits_32);'), (171, 2, u'-            return out | assertBits(ArchInfo_Arch_64);'), (178, 1, u'+            return arch | assertBits(ArchInfo_Bits_64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_true(splitLink->parent == parent);'), (13, 2, u'-        Assert_true(childToGrandchild < UINT64_MAX);'), (14, 2, u'-        Assert_true(childToGrandchild != 1);'), (15, 2, u'-        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (40, 1, u'+            Assert_true(!verifyOrder);'), (97, 1, u'+            Assert_true(childToGrandchild < UINT64_MAX);'), (98, 1, u'+            Assert_true(childToGrandchild != 1);'), (99, 1, u'+            Assert_true(splitLink->cannonicalLabel != parentLink->cannonicalLabel);'), (108, 2, u'-            Assert_true(Node_getReach(child) > Node_getReach(grandChild));'), (114, 1, u'+        Assert_true(splitLink->parent);'), (135, 2, u'-            Assert_true(link);'), (169, 2, u'-            Assert_true(Node_getReach(child) > Node_getReach(grandChild));'), (175, 2, u'-                Assert_true(parentLink->child != lcg->parent);'), (185, 2, u'-                    Assert_true(!firstHopInPath_ERR(nextPath));'), (192, 2, u'-                    Assert_true(Node_getReach(link->parent) >= Node_getReach(grandChild));'), (203, 2, u'-                            Assert_true(Node_getReach(link->parent) > Node_getReach(grandChild));'), (209, 2, u'-                        Assert_true(Node_getReach(link->child) > Node_getReach(grandChild));'), (220, 2, u'-                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (224, 2, u'-                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (230, 2, u'-            Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 72
Total del: 188
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_true(splitLink->parent == parent);'), (13, 2, u'-        Assert_true(childToGrandchild < UINT64_MAX);'), (14, 2, u'-        Assert_true(childToGrandchild != 1);'), (15, 2, u'-        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (40, 1, u'+            Assert_true(!verifyOrder);'), (97, 1, u'+            Assert_true(childToGrandchild < UINT64_MAX);'), (98, 1, u'+            Assert_true(childToGrandchild != 1);'), (99, 1, u'+            Assert_true(splitLink->cannonicalLabel != parentLink->cannonicalLabel);'), (108, 2, u'-            Assert_true(Node_getReach(child) > Node_getReach(grandChild));'), (114, 1, u'+        Assert_true(splitLink->parent);'), (135, 2, u'-            Assert_true(link);'), (169, 2, u'-            Assert_true(Node_getReach(child) > Node_getReach(grandChild));'), (175, 2, u'-                Assert_true(parentLink->child != lcg->parent);'), (185, 2, u'-                    Assert_true(!firstHopInPath_ERR(nextPath));'), (192, 2, u'-                    Assert_true(Node_getReach(link->parent) >= Node_getReach(grandChild));'), (203, 2, u'-                            Assert_true(Node_getReach(link->parent) > Node_getReach(grandChild));'), (209, 2, u'-                        Assert_true(Node_getReach(link->child) > Node_getReach(grandChild));'), (220, 2, u'-                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (224, 2, u'-                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (230, 2, u'-            Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_true(splitLink->parent == parent);'), (13, 2, u'-        Assert_true(childToGrandchild < UINT64_MAX);'), (14, 2, u'-        Assert_true(childToGrandchild != 1);'), (15, 2, u'-        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (40, 1, u'+            Assert_true(!verifyOrder);'), (97, 1, u'+            Assert_true(childToGrandchild < UINT64_MAX);'), (98, 1, u'+            Assert_true(childToGrandchild != 1);'), (99, 1, u'+            Assert_true(splitLink->cannonicalLabel != parentLink->cannonicalLabel);'), (108, 2, u'-            Assert_true(Node_getReach(child) > Node_getReach(grandChild));'), (114, 1, u'+        Assert_true(splitLink->parent);'), (135, 2, u'-            Assert_true(link);'), (169, 2, u'-            Assert_true(Node_getReach(child) > Node_getReach(grandChild));'), (175, 2, u'-                Assert_true(parentLink->child != lcg->parent);'), (185, 2, u'-                    Assert_true(!firstHopInPath_ERR(nextPath));'), (192, 2, u'-                    Assert_true(Node_getReach(link->parent) >= Node_getReach(grandChild));'), (203, 2, u'-                            Assert_true(Node_getReach(link->parent) > Node_getReach(grandChild));'), (209, 2, u'-                        Assert_true(Node_getReach(link->child) > Node_getReach(grandChild));'), (220, 2, u'-                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (224, 2, u'-                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (230, 2, u'-            Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+            Assert_true(a->jt == 0 && a->jf == 0);'), (62, 1, u'+        Assert_true(outI <= totalOut);'), (63, 1, u'+        Assert_true(i != inputLen-1 || outI == totalOut);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_fileLine(!EncodingScheme_isSelfRoute(link->parent->encodingScheme,')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: _checkNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_fileLine(!EncodingScheme_isSelfRoute(link->parent->encodingScheme,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_fileLine(!EncodingScheme_isSelfRoute(link->parent->encodingScheme,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+    Assert_true(worst);')]
===========================================
===========================================
Total add: 16
Total del: 5
Header: getWorstNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+    Assert_true(worst);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+    Assert_true(worst);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(worst);')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: getWorstNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(worst);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(worst);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(!loopCount++);'), (3, 1, u'+                Assert_true(!loopCount);'), (5, 1, u'+            Assert_true(!NodeStore_nextLink(parent, NULL));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: peersResponseCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(!loopCount++);'), (3, 1, u'+                Assert_true(!loopCount);'), (5, 1, u'+            Assert_true(!NodeStore_nextLink(parent, NULL));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(!loopCount++);'), (3, 1, u'+                Assert_true(!loopCount);'), (5, 1, u'+            Assert_true(!NodeStore_nextLink(parent, NULL));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-            Assert_true(path != firstHopInPath_NO_NEXT_LINK);')]
===========================================
===========================================
Total add: 6
Total del: 3
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-            Assert_true(path != firstHopInPath_NO_NEXT_LINK);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-            Assert_true(path != firstHopInPath_NO_NEXT_LINK);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+                Assert_true(!loopCount++);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: peersResponseCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+                Assert_true(!loopCount++);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+                Assert_true(!loopCount++);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(context->lastSibling);'), (3, 1, u'+    Assert_true(context->parent);'), (7, 1, u'+        Assert_ifParanoid(context->lastSibling->nextSibling == context);'), (8, 1, u'+        Assert_ifParanoid(context->parent->firstChild != context);'), (16, 2, u'-        Assert_true(!context->nextSibling);'), (19, 1, u'+        Assert_ifParanoid(context->parent->firstChild == context || context->parent == context);'), (20, 1, u'+        Assert_ifParanoid(context->parent != context || !context->nextSibling);'), (25, 1, u'+        Assert_ifParanoid(context->nextSibling->lastSibling == context);')]
===========================================
===========================================
Total add: 13
Total del: 13
Header: disconnect
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(context->lastSibling);'), (3, 1, u'+    Assert_true(context->parent);'), (7, 1, u'+        Assert_ifParanoid(context->lastSibling->nextSibling == context);'), (8, 1, u'+        Assert_ifParanoid(context->parent->firstChild != context);'), (16, 2, u'-        Assert_true(!context->nextSibling);'), (19, 1, u'+        Assert_ifParanoid(context->parent->firstChild == context || context->parent == context);'), (20, 1, u'+        Assert_ifParanoid(context->parent != context || !context->nextSibling);'), (25, 1, u'+        Assert_ifParanoid(context->nextSibling->lastSibling == context);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(context->lastSibling);'), (3, 1, u'+    Assert_true(context->parent);'), (7, 1, u'+        Assert_ifParanoid(context->lastSibling->nextSibling == context);'), (8, 1, u'+        Assert_ifParanoid(context->parent->firstChild != context);'), (16, 2, u'-        Assert_true(!context->nextSibling);'), (19, 1, u'+        Assert_ifParanoid(context->parent->firstChild == context || context->parent == context);'), (20, 1, u'+        Assert_ifParanoid(context->parent != context || !context->nextSibling);'), (25, 1, u'+        Assert_ifParanoid(context->nextSibling->lastSibling == context);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(child->lastSibling == child);'), (3, 2, u'-    Assert_true(child->nextSibling == NULL);'), (4, 1, u'+    Assert_ifParanoid(child->parent == NULL);'), (5, 1, u'+    Assert_ifParanoid(child->lastSibling == NULL);'), (6, 1, u'+    Assert_ifParanoid(child->nextSibling == NULL);')]
===========================================
===========================================
Total add: 7
Total del: 20
Header: connect
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(child->lastSibling == child);'), (3, 2, u'-    Assert_true(child->nextSibling == NULL);'), (4, 1, u'+    Assert_ifParanoid(child->parent == NULL);'), (5, 1, u'+    Assert_ifParanoid(child->lastSibling == NULL);'), (6, 1, u'+    Assert_ifParanoid(child->nextSibling == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(child->lastSibling == child);'), (3, 2, u'-    Assert_true(child->nextSibling == NULL);'), (4, 1, u'+    Assert_ifParanoid(child->parent == NULL);'), (5, 1, u'+    Assert_ifParanoid(child->lastSibling == NULL);'), (6, 1, u'+    Assert_ifParanoid(child->nextSibling == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-                    Assert_true(splitLink->child == child);'), (7, 2, u'-                    Assert_true(!splitLink || splitLink->cannonicalLabel < pathParentChild);')]
===========================================
===========================================
Total add: 1
Total del: 8
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-                    Assert_true(splitLink->child == child);'), (7, 2, u'-                    Assert_true(!splitLink || splitLink->cannonicalLabel < pathParentChild);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-                    Assert_true(splitLink->child == child);'), (7, 2, u'-                    Assert_true(!splitLink || splitLink->cannonicalLabel < pathParentChild);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                    Assert_true(!firstHopInPath_ERR(nextPath));'), (5, 2, u'-                    Assert_true(link);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                    Assert_true(!firstHopInPath_ERR(nextPath));'), (5, 2, u'-                    Assert_true(link);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                    Assert_true(!firstHopInPath_ERR(nextPath));'), (5, 2, u'-                    Assert_true(link);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+            Assert_true(path != firstHopInPath_NO_NEXT_LINK);'), (39, 1, u'+            Assert_true(lastLink != store->selfLink);')]
===========================================
===========================================
Total add: 35
Total del: 7
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+            Assert_true(path != firstHopInPath_NO_NEXT_LINK);'), (39, 1, u'+            Assert_true(lastLink != store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+            Assert_true(path != firstHopInPath_NO_NEXT_LINK);'), (39, 1, u'+            Assert_true(lastLink != store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(nextLink);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: updatePathReach
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(nextLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(nextLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-                Assert_true(splitLink->child == child);'), (12, 1, u'+                    Assert_true(splitLink->child == child);'), (14, 1, u'+                    Assert_true(!splitLink || splitLink->cannonicalLabel < pathParentChild);')]
===========================================
===========================================
Total add: 9
Total del: 8
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-                Assert_true(splitLink->child == child);'), (12, 1, u'+                    Assert_true(splitLink->child == child);'), (14, 1, u'+                    Assert_true(!splitLink || splitLink->cannonicalLabel < pathParentChild);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-                Assert_true(splitLink->child == child);'), (12, 1, u'+                    Assert_true(splitLink->child == child);'), (14, 1, u'+                    Assert_true(!splitLink || splitLink->cannonicalLabel < pathParentChild);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(childToGrandchild != 1);'), (3, 1, u'+        Assert_true(splitLink->cannonicalLabel != pathParentChild);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(childToGrandchild != 1);'), (3, 1, u'+        Assert_true(splitLink->cannonicalLabel != pathParentChild);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(childToGrandchild != 1);'), (3, 1, u'+        Assert_true(splitLink->cannonicalLabel != pathParentChild);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-                Assert_true(Node_getReach(grandChild) < UINT32_MAX);')]
===========================================
===========================================
Total add: 4
Total del: 5
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-                Assert_true(Node_getReach(grandChild) < UINT32_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-                Assert_true(Node_getReach(grandChild) < UINT32_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (3, 2, u'-        Assert_true(childToGrandchild != 1);')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (3, 2, u'-        Assert_true(childToGrandchild != 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (3, 2, u'-        Assert_true(childToGrandchild != 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+        Assert_true(nextLink);'), (28, 1, u'+        Assert_ifParanoid(nextLink->parent == link->child);'), (59, 1, u'+        Assert_ifParanoid(pathFrag == 1);')]
===========================================
===========================================
Total add: 35
Total del: 20
Header: NodeStore_brokenPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+        Assert_true(nextLink);'), (28, 1, u'+        Assert_ifParanoid(nextLink->parent == link->child);'), (59, 1, u'+        Assert_ifParanoid(pathFrag == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+        Assert_true(nextLink);'), (28, 1, u'+        Assert_ifParanoid(nextLink->parent == link->child);'), (59, 1, u'+        Assert_ifParanoid(pathFrag == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(bp);'), (4, 2, u'-    Assert_true(bp != store->selfLink);'), (5, 1, u'+    Assert_true(bp && bp != store->selfLink);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(bp);'), (4, 2, u'-    Assert_true(bp != store->selfLink);'), (5, 1, u'+    Assert_true(bp && bp != store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(bp);'), (4, 2, u'-    Assert_true(bp != store->selfLink);'), (5, 1, u'+    Assert_true(bp && bp != store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-        Assert_true(Node_getReach(node) < Node_getReach(Node_getBestParent(node)->parent));')]
===========================================
===========================================
Total add: 0
Total del: 10
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-        Assert_true(Node_getReach(node) < Node_getReach(Node_getBestParent(node)->parent));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-        Assert_true(Node_getReach(node) < Node_getReach(Node_getBestParent(node)->parent));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(node->bestParent);'), (3, 1, u'+        Assert_true(Node_getBestParent(node));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Node_setReach
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(node->bestParent);'), (3, 1, u'+        Assert_true(Node_getBestParent(node));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(node->bestParent);'), (3, 1, u'+        Assert_true(Node_getBestParent(node));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!node->bestParent);'), (3, 1, u'+        Assert_true(!Node_getBestParent(node));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Node_setReach
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!node->bestParent);'), (3, 1, u'+        Assert_true(!Node_getBestParent(node));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!node->bestParent);'), (3, 1, u'+        Assert_true(!Node_getBestParent(node));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->bestParent || link->child->bestParent != link, file, line);'), (3, 1, u'+        Assert_fileLine(Node_getBestParent(node) || Node_getBestParent(link->child) != link,')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: _checkNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->bestParent || link->child->bestParent != link, file, line);'), (3, 1, u'+        Assert_fileLine(Node_getBestParent(node) || Node_getBestParent(link->child) != link,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->bestParent || link->child->bestParent != link, file, line);'), (3, 1, u'+        Assert_fileLine(Node_getBestParent(node) || Node_getBestParent(link->child) != link,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_fileLine(Node_getReach(node->bestParent->parent) > Node_getReach(node)'), (5, 1, u'+        Assert_fileLine(Node_getReach(Node_getBestParent(node)->parent) > Node_getReach(node)')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: _checkNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_fileLine(Node_getReach(node->bestParent->parent) > Node_getReach(node)'), (5, 1, u'+        Assert_fileLine(Node_getReach(Node_getBestParent(node)->parent) > Node_getReach(node)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_fileLine(Node_getReach(node->bestParent->parent) > Node_getReach(node)'), (5, 1, u'+        Assert_fileLine(Node_getReach(Node_getBestParent(node)->parent) > Node_getReach(node)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_true(Node_getBestParent(store->pub.selfNode) == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _verify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_true(Node_getBestParent(store->pub.selfNode) == store->selfLink || !store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_true(Node_getBestParent(store->pub.selfNode) == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_true(Node_getBestParent(store->pub.selfNode) == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _check
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_true(Node_getBestParent(store->pub.selfNode) == store->selfLink || !store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_true(Node_getBestParent(store->pub.selfNode) == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(nextReach < Node_getReach(newBestParent->parent));')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: updateBestParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(nextReach < Node_getReach(newBestParent->parent));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(nextReach < Node_getReach(newBestParent->parent));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(node->bestParent);'), (7, 2, u'-    Assert_true(node->bestParent != store->selfLink);'), (9, 1, u'+    Assert_true(bp);'), (13, 1, u'+    Assert_true(bp != store->selfLink);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(node->bestParent);'), (7, 2, u'-    Assert_true(node->bestParent != store->selfLink);'), (9, 1, u'+    Assert_true(bp);'), (13, 1, u'+    Assert_true(bp != store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(node->bestParent);'), (7, 2, u'-    Assert_true(node->bestParent != store->selfLink);'), (9, 1, u'+    Assert_true(bp);'), (13, 1, u'+    Assert_true(bp != store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-        Assert_true(Node_getReach(node) < Node_getReach(node->bestParent->parent));'), (11, 1, u'+        Assert_true(Node_getReach(node) < Node_getReach(Node_getBestParent(node)->parent));')]
===========================================
===========================================
Total add: 5
Total del: 4
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-        Assert_true(Node_getReach(node) < Node_getReach(node->bestParent->parent));'), (11, 1, u'+        Assert_true(Node_getReach(node) < Node_getReach(Node_getBestParent(node)->parent));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-        Assert_true(Node_getReach(node) < Node_getReach(node->bestParent->parent));'), (11, 1, u'+        Assert_true(Node_getReach(node) < Node_getReach(Node_getBestParent(node)->parent));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!node->bestParent);'), (3, 1, u'+    Assert_ifParanoid(!Node_getBestParent(node));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: destroyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!node->bestParent);'), (3, 1, u'+    Assert_ifParanoid(!Node_getBestParent(node));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!node->bestParent);'), (3, 1, u'+    Assert_ifParanoid(!Node_getBestParent(node));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(tmpl.cannonicalLabel);/// TODO remove this'), (3, 1, u'+    Assert_true(tmpl.cannonicalLabel);/// TODO(cjd): remove this')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(tmpl.cannonicalLabel);/// TODO remove this'), (3, 1, u'+    Assert_true(tmpl.cannonicalLabel);/// TODO(cjd): remove this')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(tmpl.cannonicalLabel);/// TODO remove this'), (3, 1, u'+    Assert_true(tmpl.cannonicalLabel);/// TODO(cjd): remove this')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Bits_memcmp(&msgNextPartFirstLong, nextMessage->bytes, 8));'), (3, 1, u'+    Assert_ifParanoid(!Bits_memcmp(&msgNextPartFirstLong, nextMessage->bytes, 8));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendFragmented
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Bits_memcmp(&msgNextPartFirstLong, nextMessage->bytes, 8));'), (3, 1, u'+    Assert_ifParanoid(!Bits_memcmp(&msgNextPartFirstLong, nextMessage->bytes, 8));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Bits_memcmp(&msgNextPartFirstLong, nextMessage->bytes, 8));'), (3, 1, u'+    Assert_ifParanoid(!Bits_memcmp(&msgNextPartFirstLong, nextMessage->bytes, 8));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(txid && txid->len >= admin->addrLen);'), (3, 1, u'+    Assert_true(txid && txid->len >= admin->addrLen);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Admin_sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(txid && txid->len >= admin->addrLen);'), (3, 1, u'+    Assert_true(txid && txid->len >= admin->addrLen);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(txid && txid->len >= admin->addrLen);'), (3, 1, u'+    Assert_true(txid && txid->len >= admin->addrLen);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!calculateAuth(messageDict, ctx->password, cookie, req->alloc));'), (3, 1, u'+        Assert_true(!calculateAuth(messageDict, ctx->password, cookie, req->alloc));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendRaw
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!calculateAuth(messageDict, ctx->password, cookie, req->alloc));'), (3, 1, u'+        Assert_true(!calculateAuth(messageDict, ctx->password, cookie, req->alloc));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!calculateAuth(messageDict, ctx->password, cookie, req->alloc));'), (3, 1, u'+        Assert_true(!calculateAuth(messageDict, ctx->password, cookie, req->alloc));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(res);'), (3, 1, u'+    Assert_true(res);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: rpcCall0
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(res);'), (3, 1, u'+    Assert_true(res);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(res);'), (3, 1, u'+    Assert_true(res);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("::", &rainflyAddr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("::", &rainflyAddr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Core_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("::", &rainflyAddr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("::", &rainflyAddr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("::", &rainflyAddr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("::", &rainflyAddr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Core_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ctx.message);'), (3, 1, u'+    Assert_true(ctx.message);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: InterfaceWaiter_waitForData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ctx.message);'), (3, 1, u'+    Assert_true(ctx.message);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ctx.message);'), (3, 1, u'+    Assert_true(ctx.message);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ctx->res);'), (3, 1, u'+    Assert_true(ctx->res);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: checkRunningInstance
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ctx->res);'), (3, 1, u'+    Assert_true(ctx->res);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ctx->res);'), (3, 1, u'+    Assert_true(ctx->res);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!res->err);'), (3, 2, u'-    Assert_always(Dict_getInt(res->responseDict, String_CONST("called!")));'), (4, 2, u'-    Assert_always(ctx->called);'), (5, 1, u'+    Assert_true(!res->err);'), (6, 1, u'+    Assert_true(Dict_getInt(res->responseDict, String_CONST("called!")));'), (7, 1, u'+    Assert_true(ctx->called);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: standardClientCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!res->err);'), (3, 2, u'-    Assert_always(Dict_getInt(res->responseDict, String_CONST("called!")));'), (4, 2, u'-    Assert_always(ctx->called);'), (5, 1, u'+    Assert_true(!res->err);'), (6, 1, u'+    Assert_true(Dict_getInt(res->responseDict, String_CONST("called!")));'), (7, 1, u'+    Assert_true(ctx->called);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!res->err);'), (3, 2, u'-    Assert_always(Dict_getInt(res->responseDict, String_CONST("called!")));'), (4, 2, u'-    Assert_always(ctx->called);'), (5, 1, u'+    Assert_true(!res->err);'), (6, 1, u'+    Assert_true(Dict_getInt(res->responseDict, String_CONST("called!")));'), (7, 1, u'+    Assert_true(ctx->called);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(path);'), (3, 1, u'+    Assert_true(path);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: spawnAngel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(path);'), (3, 1, u'+    Assert_true(path);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(path);'), (3, 1, u'+    Assert_true(path);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(logwriter);'), (3, 1, u'+    Assert_true(logwriter);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: AdminTestFramework_setUp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(logwriter);'), (3, 1, u'+    Assert_true(logwriter);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(logwriter);'), (3, 1, u'+    Assert_true(logwriter);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("127.0.0.1", &addr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: AdminTestFramework_setUp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("127.0.0.1", &addr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("127.0.0.1", &addr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(client);'), (3, 1, u'+    Assert_true(client);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: AdminTestFramework_setUp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(client);'), (3, 1, u'+    Assert_true(client);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(client);'), (3, 1, u'+    Assert_true(client);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        default: Assert_always(0);'), (3, 1, u'+        default: Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: clone
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        default: Assert_always(0);'), (3, 1, u'+        default: Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        default: Assert_always(0);'), (3, 1, u'+        default: Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!StandardBencSerializer_get()->serializeString(writer, String_CONST("hello")));'), (3, 2, u'-    Assert_always(!expect("5:hello", writer, reader));'), (4, 1, u'+    Assert_true(!StandardBencSerializer_get()->serializeString(writer, String_CONST("hello")));'), (5, 1, u'+    Assert_true(!expect("5:hello", writer, reader));'), (7, 2, u'-    Assert_always(!StandardBencSerializer_get()->serializeString(writer, String_CONST("")));'), (8, 2, u'-    Assert_always(!expect("0:", writer, reader));'), (9, 1, u'+    Assert_true(!StandardBencSerializer_get()->serializeString(writer, String_CONST("")));'), (10, 1, u'+    Assert_true(!expect("0:", writer, reader));')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: testSerialize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!StandardBencSerializer_get()->serializeString(writer, String_CONST("hello")));'), (3, 2, u'-    Assert_always(!expect("5:hello", writer, reader));'), (4, 1, u'+    Assert_true(!StandardBencSerializer_get()->serializeString(writer, String_CONST("hello")));'), (5, 1, u'+    Assert_true(!expect("5:hello", writer, reader));'), (7, 2, u'-    Assert_always(!StandardBencSerializer_get()->serializeString(writer, String_CONST("")));'), (8, 2, u'-    Assert_always(!expect("0:", writer, reader));'), (9, 1, u'+    Assert_true(!StandardBencSerializer_get()->serializeString(writer, String_CONST("")));'), (10, 1, u'+    Assert_true(!expect("0:", writer, reader));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!StandardBencSerializer_get()->serializeString(writer, String_CONST("hello")));'), (3, 2, u'-    Assert_always(!expect("5:hello", writer, reader));'), (4, 1, u'+    Assert_true(!StandardBencSerializer_get()->serializeString(writer, String_CONST("hello")));'), (5, 1, u'+    Assert_true(!expect("5:hello", writer, reader));'), (7, 2, u'-    Assert_always(!StandardBencSerializer_get()->serializeString(writer, String_CONST("")));'), (8, 2, u'-    Assert_always(!expect("0:", writer, reader));'), (9, 1, u'+    Assert_true(!StandardBencSerializer_get()->serializeString(writer, String_CONST("")));'), (10, 1, u'+    Assert_true(!expect("0:", writer, reader));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(StandardBencSerializer_get()->parseDictionary(r, alloc, &dict));'), (3, 1, u'+    Assert_true(StandardBencSerializer_get()->parseDictionary(r, alloc, &dict));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: testParse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(StandardBencSerializer_get()->parseDictionary(r, alloc, &dict));'), (3, 1, u'+    Assert_true(StandardBencSerializer_get()->parseDictionary(r, alloc, &dict));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(StandardBencSerializer_get()->parseDictionary(r, alloc, &dict));'), (3, 1, u'+    Assert_true(StandardBencSerializer_get()->parseDictionary(r, alloc, &dict));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!StandardBencSerializer_get()->parseDictionary(reader, alloc, config));'), (3, 1, u'+    Assert_true(!StandardBencSerializer_get()->parseDictionary(reader, alloc, config));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: messageToAngel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!StandardBencSerializer_get()->parseDictionary(reader, alloc, config));'), (3, 1, u'+    Assert_true(!StandardBencSerializer_get()->parseDictionary(reader, alloc, config));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!StandardBencSerializer_get()->parseDictionary(reader, alloc, config));'), (3, 1, u'+    Assert_true(!StandardBencSerializer_get()->parseDictionary(reader, alloc, config));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse(bind->bytes, &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse(bind->bytes, &ss));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: messageToAngel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse(bind->bytes, &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse(bind->bytes, &ss));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse(bind->bytes, &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse(bind->bytes, &ss));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!StandardBencSerializer_get()->serializeDictionary(writer, d));'), (3, 1, u'+    Assert_true(!StandardBencSerializer_get()->serializeDictionary(writer, d));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendFirstMessageToCore
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!StandardBencSerializer_get()->serializeDictionary(writer, d));'), (3, 1, u'+    Assert_true(!StandardBencSerializer_get()->serializeDictionary(writer, d));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!StandardBencSerializer_get()->serializeDictionary(writer, d));'), (3, 1, u'+    Assert_true(!StandardBencSerializer_get()->serializeDictionary(writer, d));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!res->err);'), (3, 1, u'+    Assert_true(!res->err);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: bindUDPCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!res->err);'), (3, 1, u'+    Assert_true(!res->err);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!res->err);'), (3, 1, u'+    Assert_true(!res->err);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse(addr->bytes, &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse(addr->bytes, &ss));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: bindUDPCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse(addr->bytes, &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse(addr->bytes, &ss));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse(addr->bytes, &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse(addr->bytes, &ss));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!res->err);'), (3, 1, u'+    Assert_true(!res->err);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: beginConnectionCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!res->err);'), (3, 1, u'+    Assert_true(!res->err);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!res->err);'), (3, 1, u'+    Assert_true(!res->err);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(server);'), (3, 1, u'+            Assert_true(server);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: linkAllNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(server);'), (3, 1, u'+            Assert_true(server);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(server);'), (3, 1, u'+            Assert_true(server);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(argc > 0);'), (3, 1, u'+    Assert_true(argc > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(argc > 0);'), (3, 1, u'+    Assert_true(argc > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(argc > 0);'), (3, 1, u'+    Assert_true(argc > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(!"Unsupported auth type.");'), (3, 1, u'+            Assert_true(!"Unsupported auth type.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: hashPassword
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(!"Unsupported auth type.");'), (3, 1, u'+            Assert_true(!"Unsupported auth type.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(!"Unsupported auth type.");'), (3, 1, u'+            Assert_true(!"Unsupported auth type.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!Bits_memcmp(wrapper->herIp6, calculatedIp6, 16));'), (3, 1, u'+        Assert_true(!Bits_memcmp(wrapper->herIp6, calculatedIp6, 16));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!Bits_memcmp(wrapper->herIp6, calculatedIp6, 16));'), (3, 1, u'+        Assert_true(!Bits_memcmp(wrapper->herIp6, calculatedIp6, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!Bits_memcmp(wrapper->herIp6, calculatedIp6, 16));'), (3, 1, u'+        Assert_true(!Bits_memcmp(wrapper->herIp6, calculatedIp6, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));'), (3, 1, u'+            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));'), (3, 1, u'+            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));'), (3, 1, u'+            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));'), (3, 1, u'+            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));'), (3, 1, u'+            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));'), (3, 1, u'+            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(wrapper->nextNonce <= nextNonce);'), (3, 1, u'+            Assert_true(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(wrapper->nextNonce <= nextNonce);'), (3, 1, u'+            Assert_true(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(wrapper->nextNonce <= nextNonce);'), (3, 1, u'+            Assert_true(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(wrapper->nextNonce <= nextNonce);'), (3, 1, u'+        Assert_true(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(wrapper->nextNonce <= nextNonce);'), (3, 1, u'+        Assert_true(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(wrapper->nextNonce <= nextNonce);'), (3, 1, u'+        Assert_true(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(wrapper->nextNonce <= nextNonce);'), (3, 1, u'+        Assert_true(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(wrapper->nextNonce <= nextNonce);'), (3, 1, u'+        Assert_true(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(wrapper->nextNonce <= nextNonce);'), (3, 1, u'+        Assert_true(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0);'), (3, 1, u'+    Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0);'), (3, 1, u'+    Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0);'), (3, 1, u'+    Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(!Bits_memcmp(calculatedIp6, herIp6, 16));'), (3, 1, u'+            Assert_true(!Bits_memcmp(calculatedIp6, herIp6, 16));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CryptoAuth_wrapInterface
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(!Bits_memcmp(calculatedIp6, herIp6, 16));'), (3, 1, u'+            Assert_true(!Bits_memcmp(calculatedIp6, herIp6, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(!Bits_memcmp(calculatedIp6, herIp6, 16));'), (3, 1, u'+            Assert_true(!Bits_memcmp(calculatedIp6, herIp6, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(sizeof(buff.output) == 64);'), (3, 1, u'+    Assert_true(sizeof(buff.output) == 64);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: get
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(sizeof(buff.output) == 64);'), (3, 1, u'+    Assert_true(sizeof(buff.output) == 64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(sizeof(buff.output) == 64);'), (3, 1, u'+    Assert_true(sizeof(buff.output) == 64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(length < 128 && alignment < 8);'), (3, 1, u'+    Assert_true(length < 128 && alignment < 8);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: checkBytes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(length < 128 && alignment < 8);'), (3, 1, u'+    Assert_true(length < 128 && alignment < 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(length < 128 && alignment < 8);'), (3, 1, u'+    Assert_true(length < 128 && alignment < 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(Bits_isZero(origBuff, 8+alignment));'), (3, 2, u'-        Assert_always(Bits_isZero(buff+length, 8));'), (4, 1, u'+        Assert_true(Bits_isZero(origBuff, 8+alignment));'), (5, 1, u'+        Assert_true(Bits_isZero(buff+length, 8));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: checkBytes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(Bits_isZero(origBuff, 8+alignment));'), (3, 2, u'-        Assert_always(Bits_isZero(buff+length, 8));'), (4, 1, u'+        Assert_true(Bits_isZero(origBuff, 8+alignment));'), (5, 1, u'+        Assert_true(Bits_isZero(buff+length, 8));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(Bits_isZero(origBuff, 8+alignment));'), (3, 2, u'-        Assert_always(Bits_isZero(buff+length, 8));'), (4, 1, u'+        Assert_true(Bits_isZero(origBuff, 8+alignment));'), (5, 1, u'+        Assert_true(Bits_isZero(buff+length, 8));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!sameBytes[i]);'), (3, 1, u'+        Assert_true(!sameBytes[i]);'), (6, 2, u'-        Assert_always(!sameAsOld[i]);'), (7, 1, u'+        Assert_true(!sameAsOld[i]);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: checkBytes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!sameBytes[i]);'), (3, 1, u'+        Assert_true(!sameBytes[i]);'), (6, 2, u'-        Assert_always(!sameAsOld[i]);'), (7, 1, u'+        Assert_true(!sameAsOld[i]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!sameBytes[i]);'), (3, 1, u'+        Assert_true(!sameBytes[i]);'), (6, 2, u'-        Assert_always(!sameAsOld[i]);'), (7, 1, u'+        Assert_true(!sameAsOld[i]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_memcmp(buff, buff2, 32));'), (3, 1, u'+    Assert_true(Bits_memcmp(buff, buff2, 32));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test179
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_memcmp(buff, buff2, 32));'), (3, 1, u'+    Assert_true(Bits_memcmp(buff, buff2, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_memcmp(buff, buff2, 32));'), (3, 1, u'+    Assert_true(Bits_memcmp(buff, buff2, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tctx->aliceMsg);'), (3, 1, u'+    Assert_true(tctx->aliceMsg);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: twoKeyPackets
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tctx->aliceMsg);'), (3, 1, u'+    Assert_true(tctx->aliceMsg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tctx->aliceMsg);'), (3, 1, u'+    Assert_true(tctx->aliceMsg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tctx->bobCryptMsg);'), (3, 1, u'+    Assert_true(tctx->bobCryptMsg);'), (5, 2, u'-    Assert_always(tctx->aliceMsg);'), (6, 1, u'+    Assert_true(tctx->aliceMsg);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: sendToAlice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tctx->bobCryptMsg);'), (3, 1, u'+    Assert_true(tctx->bobCryptMsg);'), (5, 2, u'-    Assert_always(tctx->aliceMsg);'), (6, 1, u'+    Assert_true(tctx->aliceMsg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tctx->bobCryptMsg);'), (3, 1, u'+    Assert_true(tctx->bobCryptMsg);'), (5, 2, u'-    Assert_always(tctx->aliceMsg);'), (6, 1, u'+    Assert_true(tctx->aliceMsg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tctx->aliceCryptMsg);'), (3, 1, u'+    Assert_true(tctx->aliceCryptMsg);'), (5, 2, u'-    Assert_always(tctx->bobMsg);'), (6, 1, u'+    Assert_true(tctx->bobMsg);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: sendToBob
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tctx->aliceCryptMsg);'), (3, 1, u'+    Assert_true(tctx->aliceCryptMsg);'), (5, 2, u'-    Assert_always(tctx->bobMsg);'), (6, 1, u'+    Assert_true(tctx->bobMsg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tctx->aliceCryptMsg);'), (3, 1, u'+    Assert_true(tctx->aliceCryptMsg);'), (5, 2, u'-    Assert_always(tctx->bobMsg);'), (6, 1, u'+    Assert_true(tctx->bobMsg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (3, 2, u'-    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);'), (4, 1, u'+    Assert_true(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (5, 1, u'+    Assert_true(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: reset
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (3, 2, u'-    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);'), (4, 1, u'+    Assert_true(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (5, 1, u'+    Assert_true(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (3, 2, u'-    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);'), (4, 1, u'+    Assert_true(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (5, 1, u'+    Assert_true(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!tctx->bobMsg);'), (3, 1, u'+    Assert_true(!tctx->bobMsg);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: reset
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!tctx->bobMsg);'), (3, 1, u'+    Assert_true(!tctx->bobMsg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!tctx->bobMsg);'), (3, 1, u'+    Assert_true(!tctx->bobMsg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!tctx->aliceMsg);'), (3, 1, u'+    Assert_true(!tctx->aliceMsg);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: reset
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!tctx->aliceMsg);'), (3, 1, u'+    Assert_true(!tctx->aliceMsg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!tctx->aliceMsg);'), (3, 1, u'+    Assert_true(!tctx->aliceMsg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (3, 2, u'-    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);'), (4, 1, u'+    Assert_true(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (5, 1, u'+    Assert_true(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: reset
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (3, 2, u'-    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);'), (4, 1, u'+    Assert_true(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (5, 1, u'+    Assert_true(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (3, 2, u'-    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);'), (4, 1, u'+    Assert_true(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (5, 1, u'+    Assert_true(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (3, 2, u'-    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);'), (4, 1, u'+    Assert_true(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (5, 1, u'+    Assert_true(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: crossedOnTheWire
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (3, 2, u'-    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);'), (4, 1, u'+    Assert_true(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (5, 1, u'+    Assert_true(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (3, 2, u'-    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);'), (4, 1, u'+    Assert_true(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (5, 1, u'+    Assert_true(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_memcmp(m1->bytes, m2->bytes, 4));'), (3, 1, u'+    Assert_true(Bits_memcmp(m1->bytes, m2->bytes, 4));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: replayKeyPacket
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_memcmp(m1->bytes, m2->bytes, 4));'), (3, 1, u'+    Assert_true(Bits_memcmp(m1->bytes, m2->bytes, 4));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_memcmp(m1->bytes, m2->bytes, 4));'), (3, 1, u'+    Assert_true(Bits_memcmp(m1->bytes, m2->bytes, 4));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(message->length + message->padding <= BUFFER_SIZE);'), (3, 1, u'+        Assert_true(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendMessageToIf2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(message->length + message->padding <= BUFFER_SIZE);'), (3, 1, u'+        Assert_true(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(message->length + message->padding <= BUFFER_SIZE);'), (3, 1, u'+        Assert_true(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(message->length + message->padding <= BUFFER_SIZE);'), (3, 1, u'+        Assert_true(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendMessageToIf1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(message->length + message->padding <= BUFFER_SIZE);'), (3, 1, u'+        Assert_true(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(message->length + message->padding <= BUFFER_SIZE);'), (3, 1, u'+        Assert_true(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(if1Msg);'), (3, 1, u'+        Assert_true(if1Msg);'), (6, 2, u'-            Assert_always(0);'), (7, 1, u'+            Assert_true(0);'), (10, 2, u'-        Assert_always(!if1Msg);'), (11, 1, u'+        Assert_true(!if1Msg);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: sendToIf1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(if1Msg);'), (3, 1, u'+        Assert_true(if1Msg);'), (6, 2, u'-            Assert_always(0);'), (7, 1, u'+            Assert_true(0);'), (10, 2, u'-        Assert_always(!if1Msg);'), (11, 1, u'+        Assert_true(!if1Msg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(if1Msg);'), (3, 1, u'+        Assert_true(if1Msg);'), (6, 2, u'-            Assert_always(0);'), (7, 1, u'+            Assert_true(0);'), (10, 2, u'-        Assert_always(!if1Msg);'), (11, 1, u'+        Assert_true(!if1Msg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(if2Msg);'), (3, 1, u'+        Assert_true(if2Msg);'), (6, 2, u'-            Assert_always(0);'), (7, 1, u'+            Assert_true(0);'), (10, 2, u'-        Assert_always(!if2Msg);'), (11, 1, u'+        Assert_true(!if2Msg);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: sendToIf2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(if2Msg);'), (3, 1, u'+        Assert_true(if2Msg);'), (6, 2, u'-            Assert_always(0);'), (7, 1, u'+            Assert_true(0);'), (10, 2, u'-        Assert_always(!if2Msg);'), (11, 1, u'+        Assert_true(!if2Msg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(if2Msg);'), (3, 1, u'+        Assert_true(if2Msg);'), (6, 2, u'-            Assert_always(0);'), (7, 1, u'+            Assert_true(0);'), (10, 2, u'-        Assert_always(!if2Msg);'), (11, 1, u'+        Assert_true(!if2Msg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(expected, output, 56));'), (3, 1, u'+    Assert_true(!Bits_memcmp(expected, output, 56));'), (5, 2, u'-    Assert_always(!CryptoAuth_decryptRndNonce(nonce, &m, secret));'), (6, 2, u'-    Assert_always(m.length == 12 && !Bits_memcmp(m.bytes, "hello world", m.length));'), (7, 1, u'+    Assert_true(!CryptoAuth_decryptRndNonce(nonce, &m, secret));'), (8, 1, u'+    Assert_true(m.length == 12 && !Bits_memcmp(m.bytes, "hello world", m.length));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: encryptRndNonceTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(expected, output, 56));'), (3, 1, u'+    Assert_true(!Bits_memcmp(expected, output, 56));'), (5, 2, u'-    Assert_always(!CryptoAuth_decryptRndNonce(nonce, &m, secret));'), (6, 2, u'-    Assert_always(m.length == 12 && !Bits_memcmp(m.bytes, "hello world", m.length));'), (7, 1, u'+    Assert_true(!CryptoAuth_decryptRndNonce(nonce, &m, secret));'), (8, 1, u'+    Assert_true(m.length == 12 && !Bits_memcmp(m.bytes, "hello world", m.length));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(expected, output, 56));'), (3, 1, u'+    Assert_true(!Bits_memcmp(expected, output, 56));'), (5, 2, u'-    Assert_always(!CryptoAuth_decryptRndNonce(nonce, &m, secret));'), (6, 2, u'-    Assert_always(m.length == 12 && !Bits_memcmp(m.bytes, "hello world", m.length));'), (7, 1, u'+    Assert_true(!CryptoAuth_decryptRndNonce(nonce, &m, secret));'), (8, 1, u'+    Assert_true(m.length == 12 && !Bits_memcmp(m.bytes, "hello world", m.length));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_memcmp(ca->publicKey, publicKey, 32) == 0);'), (3, 1, u'+    Assert_true(Bits_memcmp(ca->publicKey, publicKey, 32) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: createNew
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_memcmp(ca->publicKey, publicKey, 32) == 0);'), (3, 1, u'+    Assert_true(Bits_memcmp(ca->publicKey, publicKey, 32) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_memcmp(ca->publicKey, publicKey, 32) == 0);'), (3, 1, u'+    Assert_true(Bits_memcmp(ca->publicKey, publicKey, 32) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(strlen((char*)expectedOutput) == 264);'), (3, 1, u'+    Assert_true(strlen((char*)expectedOutput) == 264);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: testHello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(strlen((char*)expectedOutput) == 264);'), (3, 1, u'+    Assert_true(strlen((char*)expectedOutput) == 264);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(strlen((char*)expectedOutput) == 264);'), (3, 1, u'+    Assert_true(strlen((char*)expectedOutput) == 264);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);'), (3, 1, u'+    Assert_true(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: testHello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);'), (3, 1, u'+    Assert_true(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);'), (3, 1, u'+    Assert_true(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);'), (3, 1, u'+    Assert_true(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: receiveHelloWithNoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);'), (3, 1, u'+    Assert_true(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);'), (3, 1, u'+    Assert_true(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(finalOut);'), (3, 2, u'-    Assert_always(finalOut->length == 12);'), (4, 2, u'-    Assert_always(Bits_memcmp(hello, finalOut->bytes, 12) == 0);'), (5, 1, u'+    Assert_true(finalOut);'), (6, 1, u'+    Assert_true(finalOut->length == 12);'), (7, 1, u'+    Assert_true(Bits_memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: receiveHelloWithNoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(finalOut);'), (3, 2, u'-    Assert_always(finalOut->length == 12);'), (4, 2, u'-    Assert_always(Bits_memcmp(hello, finalOut->bytes, 12) == 0);'), (5, 1, u'+    Assert_true(finalOut);'), (6, 1, u'+    Assert_true(finalOut->length == 12);'), (7, 1, u'+    Assert_true(Bits_memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(finalOut);'), (3, 2, u'-    Assert_always(finalOut->length == 12);'), (4, 2, u'-    Assert_always(Bits_memcmp(hello, finalOut->bytes, 12) == 0);'), (5, 1, u'+    Assert_true(finalOut);'), (6, 1, u'+    Assert_true(finalOut->length == 12);'), (7, 1, u'+    Assert_true(Bits_memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));'), (3, 1, u'+    Assert_true(!Bits_memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: repeatHello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));'), (3, 1, u'+    Assert_true(!Bits_memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));'), (3, 1, u'+    Assert_true(!Bits_memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(finalOut);'), (3, 2, u'-    Assert_always(finalOut->length == 12);'), (4, 2, u'-    Assert_always(Bits_memcmp(hello, finalOut->bytes, 12) == 0);'), (5, 1, u'+    Assert_true(finalOut);'), (6, 1, u'+    Assert_true(finalOut->length == 12);'), (7, 1, u'+    Assert_true(Bits_memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: repeatHello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(finalOut);'), (3, 2, u'-    Assert_always(finalOut->length == 12);'), (4, 2, u'-    Assert_always(Bits_memcmp(hello, finalOut->bytes, 12) == 0);'), (5, 1, u'+    Assert_true(finalOut);'), (6, 1, u'+    Assert_true(finalOut->length == 12);'), (7, 1, u'+    Assert_true(Bits_memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(finalOut);'), (3, 2, u'-    Assert_always(finalOut->length == 12);'), (4, 2, u'-    Assert_always(Bits_memcmp(hello, finalOut->bytes, 12) == 0);'), (5, 1, u'+    Assert_true(finalOut);'), (6, 1, u'+    Assert_true(finalOut->length == 12);'), (7, 1, u'+    Assert_true(Bits_memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(List_size(users) == -1);'), (3, 1, u'+    Assert_true(List_size(users) == -1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: testGetUsers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(List_size(users) == -1);'), (3, 1, u'+    Assert_true(List_size(users) == -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(List_size(users) == -1);'), (3, 1, u'+    Assert_true(List_size(users) == -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(List_size(users) == 1);'), (3, 2, u'-    Assert_always(String_equals(String_CONST("user1"),List_getString(users,0)));'), (4, 1, u'+    Assert_true(List_size(users) == 1);'), (5, 1, u'+    Assert_true(String_equals(String_CONST("user1"),List_getString(users,0)));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: testGetUsers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(List_size(users) == 1);'), (3, 2, u'-    Assert_always(String_equals(String_CONST("user1"),List_getString(users,0)));'), (4, 1, u'+    Assert_true(List_size(users) == 1);'), (5, 1, u'+    Assert_true(String_equals(String_CONST("user1"),List_getString(users,0)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(List_size(users) == 1);'), (3, 2, u'-    Assert_always(String_equals(String_CONST("user1"),List_getString(users,0)));'), (4, 1, u'+    Assert_true(List_size(users) == 1);'), (5, 1, u'+    Assert_true(String_equals(String_CONST("user1"),List_getString(users,0)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(List_size(users) == 2);'), (3, 2, u'-    Assert_always(String_equals(String_CONST("user2"),List_getString(users,0)));'), (4, 2, u'-    Assert_always(String_equals(String_CONST("user1"),List_getString(users,1)));'), (5, 1, u'+    Assert_true(List_size(users) == 2);'), (6, 1, u'+    Assert_true(String_equals(String_CONST("user2"),List_getString(users,0)));'), (7, 1, u'+    Assert_true(String_equals(String_CONST("user1"),List_getString(users,1)));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: testGetUsers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(List_size(users) == 2);'), (3, 2, u'-    Assert_always(String_equals(String_CONST("user2"),List_getString(users,0)));'), (4, 2, u'-    Assert_always(String_equals(String_CONST("user1"),List_getString(users,1)));'), (5, 1, u'+    Assert_true(List_size(users) == 2);'), (6, 1, u'+    Assert_true(String_equals(String_CONST("user2"),List_getString(users,0)));'), (7, 1, u'+    Assert_true(String_equals(String_CONST("user1"),List_getString(users,1)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(List_size(users) == 2);'), (3, 2, u'-    Assert_always(String_equals(String_CONST("user2"),List_getString(users,0)));'), (4, 2, u'-    Assert_always(String_equals(String_CONST("user1"),List_getString(users,1)));'), (5, 1, u'+    Assert_true(List_size(users) == 2);'), (6, 1, u'+    Assert_true(String_equals(String_CONST("user2"),List_getString(users,0)));'), (7, 1, u'+    Assert_true(String_equals(String_CONST("user1"),List_getString(users,1)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(out[i] != out[j]);'), (3, 1, u'+            Assert_true(out[i] != out[j]);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: testDuplicates
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(out[i] != out[j]);'), (3, 1, u'+            Assert_true(out[i] != out[j]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(out[i] != out[j]);'), (3, 1, u'+            Assert_true(out[i] != out[j]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(i < 77);'), (3, 1, u'+        Assert_true(i < 77);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Address_fromString
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(i < 77);'), (3, 1, u'+        Assert_true(i < 77);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(i < 77);'), (3, 1, u'+        Assert_true(i < 77);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-    Assert_always(keyPart.len == 54 && keyPart.bytes[53] == 'k');"), (3, 1, u"+    Assert_true(keyPart.len == 54 && keyPart.bytes[53] == 'k');")]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Address_fromString
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-    Assert_always(keyPart.len == 54 && keyPart.bytes[53] == 'k');"), (3, 1, u"+    Assert_true(keyPart.len == 54 && keyPart.bytes[53] == 'k');")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-    Assert_always(keyPart.len == 54 && keyPart.bytes[53] == 'k');"), (3, 1, u"+    Assert_true(keyPart.len == 54 && keyPart.bytes[53] == 'k');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(num > -1 && num < ps->count);'), (3, 1, u'+    Assert_true(num > -1 && num < ps->count);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Node_isOneHopLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(num > -1 && num < ps->count);'), (3, 1, u'+    Assert_true(num > -1 && num < ps->count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(num > -1 && num < ps->count);'), (3, 1, u'+    Assert_true(num > -1 && num < ps->count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(node->address.path =='), (3, 1, u'+    Assert_true(node->address.path ==')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _checkNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(node->address.path =='), (3, 1, u'+    Assert_true(node->address.path ==')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(node->address.path =='), (3, 1, u'+    Assert_true(node->address.path ==')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _verify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _check
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(next != EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+    Assert_true(next != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: extendRoute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(next != EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+    Assert_true(next != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(next != EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+    Assert_true(next != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(node->bestParent);'), (3, 2, u'-        Assert_always(node->address.path < UINT64_MAX);'), (4, 2, u'-        Assert_always(newReach > 512);'), (5, 1, u'+        Assert_true(node->bestParent);'), (6, 1, u'+        Assert_true(node->address.path < UINT64_MAX);'), (7, 1, u'+        Assert_true(newReach > 512);'), (9, 2, u'-        Assert_always(!node->bestParent);'), (10, 2, u'-        Assert_always(node->address.path == UINT64_MAX);'), (11, 1, u'+        Assert_true(!node->bestParent);'), (12, 1, u'+        Assert_true(node->address.path == UINT64_MAX);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: setReach
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(node->bestParent);'), (3, 2, u'-        Assert_always(node->address.path < UINT64_MAX);'), (4, 2, u'-        Assert_always(newReach > 512);'), (5, 1, u'+        Assert_true(node->bestParent);'), (6, 1, u'+        Assert_true(node->address.path < UINT64_MAX);'), (7, 1, u'+        Assert_true(newReach > 512);'), (9, 2, u'-        Assert_always(!node->bestParent);'), (10, 2, u'-        Assert_always(node->address.path == UINT64_MAX);'), (11, 1, u'+        Assert_true(!node->bestParent);'), (12, 1, u'+        Assert_true(node->address.path == UINT64_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(node->bestParent);'), (3, 2, u'-        Assert_always(node->address.path < UINT64_MAX);'), (4, 2, u'-        Assert_always(newReach > 512);'), (5, 1, u'+        Assert_true(node->bestParent);'), (6, 1, u'+        Assert_true(node->address.path < UINT64_MAX);'), (7, 1, u'+        Assert_true(newReach > 512);'), (9, 2, u'-        Assert_always(!node->bestParent);'), (10, 2, u'-        Assert_always(node->address.path == UINT64_MAX);'), (11, 1, u'+        Assert_true(!node->bestParent);'), (12, 1, u'+        Assert_true(node->address.path == UINT64_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(r < Node_getReach(link->parent) && r != 0);'), (3, 1, u'+    Assert_true(r < Node_getReach(link->parent) && r != 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: guessReachOfChild
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(r < Node_getReach(link->parent) && r != 0);'), (3, 1, u'+    Assert_true(r < Node_getReach(link->parent) && r != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(r < Node_getReach(link->parent) && r != 0);'), (3, 1, u'+    Assert_true(r < Node_getReach(link->parent) && r != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(cycle < 1000);'), (3, 1, u'+    Assert_true(cycle < 1000);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: updateBestParentCycle
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(cycle < 1000);'), (3, 1, u'+    Assert_true(cycle < 1000);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(cycle < 1000);'), (3, 1, u'+    Assert_true(cycle < 1000);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(newBestParent);'), (4, 2, u'-    Assert_always(nextReach < Node_getReach(newBestParent->parent));'), (5, 1, u'+    Assert_true(newBestParent);'), (7, 1, u'+    Assert_true(nextReach < Node_getReach(newBestParent->parent));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: updateBestParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(newBestParent);'), (4, 2, u'-    Assert_always(nextReach < Node_getReach(newBestParent->parent));'), (5, 1, u'+    Assert_true(newBestParent);'), (7, 1, u'+    Assert_true(nextReach < Node_getReach(newBestParent->parent));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(newBestParent);'), (4, 2, u'-    Assert_always(nextReach < Node_getReach(newBestParent->parent));'), (5, 1, u'+    Assert_true(newBestParent);'), (7, 1, u'+    Assert_true(nextReach < Node_getReach(newBestParent->parent));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0);'), (3, 1, u'+    Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: updateBestParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0);'), (3, 1, u'+    Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0);'), (3, 1, u'+    Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(newReach != UINT32_MAX);'), (3, 2, u'-    Assert_always(newReach > 1023);'), (4, 1, u'+    Assert_true(newReach != UINT32_MAX);'), (5, 1, u'+    Assert_true(newReach > 1023);'), (7, 2, u'-    Assert_always(newReach > Node_getReach(node));'), (8, 1, u'+    Assert_true(newReach > Node_getReach(node));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: handleGoodNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(newReach != UINT32_MAX);'), (3, 2, u'-    Assert_always(newReach > 1023);'), (4, 1, u'+    Assert_true(newReach != UINT32_MAX);'), (5, 1, u'+    Assert_true(newReach > 1023);'), (7, 2, u'-    Assert_always(newReach > Node_getReach(node));'), (8, 1, u'+    Assert_true(newReach > Node_getReach(node));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(newReach != UINT32_MAX);'), (3, 2, u'-    Assert_always(newReach > 1023);'), (4, 1, u'+    Assert_true(newReach != UINT32_MAX);'), (5, 1, u'+    Assert_true(newReach > 1023);'), (7, 2, u'-    Assert_always(newReach > Node_getReach(node));'), (8, 1, u'+    Assert_true(newReach > Node_getReach(node));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Node_getReach(node) < Node_getReach(best->parent));'), (3, 1, u'+    Assert_true(Node_getReach(node) < Node_getReach(best->parent));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handleBadNewsTwo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Node_getReach(node) < Node_getReach(best->parent));'), (3, 1, u'+    Assert_true(Node_getReach(node) < Node_getReach(best->parent));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Node_getReach(node) < Node_getReach(best->parent));'), (3, 1, u'+    Assert_true(Node_getReach(node) < Node_getReach(best->parent));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(link->child != store->pub.selfNode);'), (3, 1, u'+    Assert_true(link->child != store->pub.selfNode);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handleBadNewsOne
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(link->child != store->pub.selfNode);'), (3, 1, u'+    Assert_true(link->child != store->pub.selfNode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(link->child != store->pub.selfNode);'), (3, 1, u'+    Assert_true(link->child != store->pub.selfNode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(newReach < Node_getReach(node));'), (3, 1, u'+    Assert_true(newReach < Node_getReach(node));'), (6, 2, u'-    Assert_always(node->bestParent);'), (7, 1, u'+    Assert_true(node->bestParent);'), (9, 2, u'-    Assert_always(node->bestParent != store->selfLink);'), (10, 1, u'+    Assert_true(node->bestParent != store->selfLink);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(newReach < Node_getReach(node));'), (3, 1, u'+    Assert_true(newReach < Node_getReach(node));'), (6, 2, u'-    Assert_always(node->bestParent);'), (7, 1, u'+    Assert_true(node->bestParent);'), (9, 2, u'-    Assert_always(node->bestParent != store->selfLink);'), (10, 1, u'+    Assert_true(node->bestParent != store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(newReach < Node_getReach(node));'), (3, 1, u'+    Assert_true(newReach < Node_getReach(node));'), (6, 2, u'-    Assert_always(node->bestParent);'), (7, 1, u'+    Assert_true(node->bestParent);'), (9, 2, u'-    Assert_always(node->bestParent != store->selfLink);'), (10, 1, u'+    Assert_true(node->bestParent != store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!newReach || newReach > 1023);'), (3, 1, u'+    Assert_true(!newReach || newReach > 1023);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!newReach || newReach > 1023);'), (3, 1, u'+    Assert_true(!newReach || newReach > 1023);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!newReach || newReach > 1023);'), (3, 1, u'+    Assert_true(!newReach || newReach > 1023);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(Node_getReach(node) < Node_getReach(node->bestParent->parent));'), (3, 1, u'+        Assert_true(Node_getReach(node) < Node_getReach(node->bestParent->parent));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(Node_getReach(node) < Node_getReach(node->bestParent->parent));'), (3, 1, u'+        Assert_true(Node_getReach(node) < Node_getReach(node->bestParent->parent));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(Node_getReach(node) < Node_getReach(node->bestParent->parent));'), (3, 1, u'+        Assert_true(Node_getReach(node) < Node_getReach(node->bestParent->parent));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(current);'), (3, 1, u'+    Assert_true(current);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: unlinkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(current);'), (3, 1, u'+    Assert_true(current);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(current);'), (3, 1, u'+    Assert_true(current);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(cannonicalLabel != 1 || store->selfLink == NULL);'), (3, 1, u'+    Assert_true(cannonicalLabel != 1 || store->selfLink == NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(cannonicalLabel != 1 || store->selfLink == NULL);'), (3, 1, u'+    Assert_true(cannonicalLabel != 1 || store->selfLink == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(cannonicalLabel != 1 || store->selfLink == NULL);'), (3, 1, u'+    Assert_true(cannonicalLabel != 1 || store->selfLink == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(definitelyCannonical == cannonicalLabel);'), (3, 1, u'+        Assert_true(definitelyCannonical == cannonicalLabel);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(definitelyCannonical == cannonicalLabel);'), (3, 1, u'+        Assert_true(definitelyCannonical == cannonicalLabel);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(definitelyCannonical == cannonicalLabel);'), (3, 1, u'+        Assert_true(definitelyCannonical == cannonicalLabel);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_true(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_true(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_true(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(nextLink->child->encodingScheme);'), (3, 1, u'+        Assert_true(nextLink->child->encodingScheme);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(nextLink->child->encodingScheme);'), (3, 1, u'+        Assert_true(nextLink->child->encodingScheme);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(nextLink->child->encodingScheme);'), (3, 1, u'+        Assert_true(nextLink->child->encodingScheme);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tmpl.cannonicalLabel);/// TODO remove this'), (3, 1, u'+    Assert_true(tmpl.cannonicalLabel);/// TODO remove this')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tmpl.cannonicalLabel);/// TODO remove this'), (3, 1, u'+    Assert_true(tmpl.cannonicalLabel);/// TODO remove this')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tmpl.cannonicalLabel);/// TODO remove this'), (3, 1, u'+    Assert_true(tmpl.cannonicalLabel);/// TODO remove this')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0);'), (3, 1, u'+    Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: isAncestorOf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0);'), (3, 1, u'+    Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0);'), (3, 1, u'+    Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(closestKnown != closest);'), (3, 1, u'+        Assert_true(closestKnown != closest);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(closestKnown != closest);'), (3, 1, u'+        Assert_true(closestKnown != closest);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(closestKnown != closest);'), (3, 1, u'+        Assert_true(closestKnown != closest);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(splitLink->child == child);'), (3, 1, u'+                Assert_true(splitLink->child == child);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(splitLink->child == child);'), (3, 1, u'+                Assert_true(splitLink->child == child);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(splitLink->child == child);'), (3, 1, u'+                Assert_true(splitLink->child == child);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(splitLink->parent == parent);'), (3, 2, u'-        Assert_always(childToGrandchild < UINT64_MAX);'), (4, 1, u'+        Assert_true(splitLink->parent == parent);'), (5, 1, u'+        Assert_true(childToGrandchild < UINT64_MAX);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(splitLink->parent == parent);'), (3, 2, u'-        Assert_always(childToGrandchild < UINT64_MAX);'), (4, 1, u'+        Assert_true(splitLink->parent == parent);'), (5, 1, u'+        Assert_true(childToGrandchild < UINT64_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(splitLink->parent == parent);'), (3, 2, u'-        Assert_always(childToGrandchild < UINT64_MAX);'), (4, 1, u'+        Assert_true(splitLink->parent == parent);'), (5, 1, u'+        Assert_true(childToGrandchild < UINT64_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(Node_getReach(grandChild) < UINT32_MAX);'), (3, 1, u'+                Assert_true(Node_getReach(grandChild) < UINT32_MAX);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(Node_getReach(grandChild) < UINT32_MAX);'), (3, 1, u'+                Assert_true(Node_getReach(grandChild) < UINT32_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(Node_getReach(grandChild) < UINT32_MAX);'), (3, 1, u'+                Assert_true(Node_getReach(grandChild) < UINT32_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(Node_getReach(child) > Node_getReach(grandChild));'), (3, 1, u'+            Assert_true(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(Node_getReach(child) > Node_getReach(grandChild));'), (3, 1, u'+            Assert_true(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(Node_getReach(child) > Node_getReach(grandChild));'), (3, 1, u'+            Assert_true(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(splitLink->cannonicalLabel != pathParentChild);'), (3, 2, u'-        Assert_always(childToGrandchild != 1);'), (4, 1, u'+        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (5, 1, u'+        Assert_true(childToGrandchild != 1);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(splitLink->cannonicalLabel != pathParentChild);'), (3, 2, u'-        Assert_always(childToGrandchild != 1);'), (4, 1, u'+        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (5, 1, u'+        Assert_true(childToGrandchild != 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(splitLink->cannonicalLabel != pathParentChild);'), (3, 2, u'-        Assert_always(childToGrandchild != 1);'), (4, 1, u'+        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (5, 1, u'+        Assert_true(childToGrandchild != 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(link);'), (3, 1, u'+            Assert_true(link);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(link);'), (3, 1, u'+            Assert_true(link);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(link);'), (3, 1, u'+            Assert_true(link);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(Node_getReach(child) > Node_getReach(grandChild));'), (3, 1, u'+            Assert_true(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(Node_getReach(child) > Node_getReach(grandChild));'), (3, 1, u'+            Assert_true(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(Node_getReach(child) > Node_getReach(grandChild));'), (3, 1, u'+            Assert_true(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(parentLink->child != lcg->parent);'), (3, 1, u'+                Assert_true(parentLink->child != lcg->parent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(parentLink->child != lcg->parent);'), (3, 1, u'+                Assert_true(parentLink->child != lcg->parent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(parentLink->child != lcg->parent);'), (3, 1, u'+                Assert_true(parentLink->child != lcg->parent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_always(link);'), (3, 1, u'+                    Assert_true(link);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_always(link);'), (3, 1, u'+                    Assert_true(link);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_always(link);'), (3, 1, u'+                    Assert_true(link);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_always(Node_getReach(link->parent) >= Node_getReach(grandChild));'), (3, 1, u'+                    Assert_true(Node_getReach(link->parent) >= Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_always(Node_getReach(link->parent) >= Node_getReach(grandChild));'), (3, 1, u'+                    Assert_true(Node_getReach(link->parent) >= Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_always(Node_getReach(link->parent) >= Node_getReach(grandChild));'), (3, 1, u'+                    Assert_true(Node_getReach(link->parent) >= Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                            Assert_always(Node_getReach(link->parent) > Node_getReach(grandChild));'), (3, 1, u'+                            Assert_true(Node_getReach(link->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                            Assert_always(Node_getReach(link->parent) > Node_getReach(grandChild));'), (3, 1, u'+                            Assert_true(Node_getReach(link->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                            Assert_always(Node_getReach(link->parent) > Node_getReach(grandChild));'), (3, 1, u'+                            Assert_true(Node_getReach(link->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        Assert_always(Node_getReach(link->child) > Node_getReach(grandChild));'), (3, 1, u'+                        Assert_true(Node_getReach(link->child) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        Assert_always(Node_getReach(link->child) > Node_getReach(grandChild));'), (3, 1, u'+                        Assert_true(Node_getReach(link->child) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        Assert_always(Node_getReach(link->child) > Node_getReach(grandChild));'), (3, 1, u'+                        Assert_true(Node_getReach(link->child) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (3, 1, u'+                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (3, 1, u'+                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (3, 1, u'+                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (3, 1, u'+                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (6, 2, u'-            Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (7, 1, u'+            Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (3, 1, u'+                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (6, 2, u'-            Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (7, 1, u'+            Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (3, 1, u'+                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (6, 2, u'-            Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (7, 1, u'+            Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(worst);'), (3, 1, u'+    Assert_true(worst);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: getWorstNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(worst);'), (3, 1, u'+    Assert_true(worst);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(worst);'), (3, 1, u'+    Assert_true(worst);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!node->bestParent);'), (3, 1, u'+    Assert_true(!node->bestParent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: destroyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!node->bestParent);'), (3, 1, u'+    Assert_true(!node->bestParent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!node->bestParent);'), (3, 1, u'+    Assert_true(!node->bestParent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(cycle < 1000);'), (3, 1, u'+    Assert_true(cycle < 1000);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: getBestCycle
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(cycle < 1000);'), (3, 1, u'+    Assert_true(cycle < 1000);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(cycle < 1000);'), (3, 1, u'+    Assert_true(cycle < 1000);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(out->nodes[i]->address.path);'), (3, 2, u'-        Assert_always(out->nodes[i]->address.path < (((uint64_t)1)<<63));'), (4, 1, u'+        Assert_true(out->nodes[i]->address.path);'), (5, 1, u'+        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: NodeStore_getPeers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(out->nodes[i]->address.path);'), (3, 2, u'-        Assert_always(out->nodes[i]->address.path < (((uint64_t)1)<<63));'), (4, 1, u'+        Assert_true(out->nodes[i]->address.path);'), (5, 1, u'+        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(out->nodes[i]->address.path);'), (3, 2, u'-        Assert_always(out->nodes[i]->address.path < (((uint64_t)1)<<63));'), (4, 1, u'+        Assert_true(out->nodes[i]->address.path);'), (5, 1, u'+        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(out->nodes[i]->address.path);'), (3, 2, u'-        Assert_always(out->nodes[i]->address.path < (((uint64_t)1)<<63));'), (4, 1, u'+        Assert_true(out->nodes[i]->address.path);'), (5, 1, u'+        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: NodeStore_getClosestNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(out->nodes[i]->address.path);'), (3, 2, u'-        Assert_always(out->nodes[i]->address.path < (((uint64_t)1)<<63));'), (4, 1, u'+        Assert_true(out->nodes[i]->address.path);'), (5, 1, u'+        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(out->nodes[i]->address.path);'), (3, 2, u'-        Assert_always(out->nodes[i]->address.path < (((uint64_t)1)<<63));'), (4, 1, u'+        Assert_true(out->nodes[i]->address.path);'), (5, 1, u'+        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(node != ctx->nodeStore->selfNode);'), (3, 1, u'+    Assert_true(node != ctx->nodeStore->selfNode);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: searchStep
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(node != ctx->nodeStore->selfNode);'), (3, 1, u'+    Assert_true(node != ctx->nodeStore->selfNode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(node != ctx->nodeStore->selfNode);'), (3, 1, u'+    Assert_true(node != ctx->nodeStore->selfNode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(search->runner->searches > 0);'), (3, 1, u'+    Assert_true(search->runner->searches > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: searchOnFree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(search->runner->searches > 0);'), (3, 1, u'+    Assert_true(search->runner->searches > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(search->runner->searches > 0);'), (3, 1, u'+    Assert_true(search->runner->searches > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(false);'), (3, 1, u'+    Assert_true(false);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: missingKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(false);'), (3, 1, u'+    Assert_true(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(false);'), (3, 1, u'+    Assert_true(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_addNode(store, myAddr, 1, Version_CURRENT_PROTOCOL) == NULL);'), (3, 1, u'+    Assert_true(NodeStore_addNode(store, myAddr, 1, Version_CURRENT_PROTOCOL) == NULL);'), (6, 2, u'-    Assert_always('), (7, 1, u'+    Assert_true(')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_addNode(store, myAddr, 1, Version_CURRENT_PROTOCOL) == NULL);'), (3, 1, u'+    Assert_true(NodeStore_addNode(store, myAddr, 1, Version_CURRENT_PROTOCOL) == NULL);'), (6, 2, u'-    Assert_always('), (7, 1, u'+    Assert_true(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_addNode(store, myAddr, 1, Version_CURRENT_PROTOCOL) == NULL);'), (3, 1, u'+    Assert_true(NodeStore_addNode(store, myAddr, 1, Version_CURRENT_PROTOCOL) == NULL);'), (6, 2, u'-    Assert_always('), (7, 1, u'+    Assert_true(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always('), (3, 1, u'+    Assert_true(')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always('), (3, 1, u'+    Assert_true(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always('), (3, 1, u'+    Assert_true(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always('), (3, 1, u'+    Assert_true(')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always('), (3, 1, u'+    Assert_true(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always('), (3, 1, u'+    Assert_true(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always( Address_isSameIp(&node->address, &NodeStore_dumpTable(store,1)->address) );'), (3, 1, u'+    Assert_true( Address_isSameIp(&node->address, &NodeStore_dumpTable(store,1)->address) );')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always( Address_isSameIp(&node->address, &NodeStore_dumpTable(store,1)->address) );'), (3, 1, u'+    Assert_true( Address_isSameIp(&node->address, &NodeStore_dumpTable(store,1)->address) );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always( Address_isSameIp(&node->address, &NodeStore_dumpTable(store,1)->address) );'), (3, 1, u'+    Assert_true( Address_isSameIp(&node->address, &NodeStore_dumpTable(store,1)->address) );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 1);'), (3, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (4, 1, u'+    Assert_true(list->size == 1);'), (5, 1, u'+    Assert_true(Address_isSameIp(&list->nodes[0]->address, otherAddr));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test_getNodesByAddr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 1);'), (3, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (4, 1, u'+    Assert_true(list->size == 1);'), (5, 1, u'+    Assert_true(Address_isSameIp(&list->nodes[0]->address, otherAddr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 1);'), (3, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (4, 1, u'+    Assert_true(list->size == 1);'), (5, 1, u'+    Assert_true(Address_isSameIp(&list->nodes[0]->address, otherAddr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 2);'), (3, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (4, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[1]->address, otherAddr));'), (5, 1, u'+    Assert_true(list->size == 2);'), (6, 1, u'+    Assert_true(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (7, 1, u'+    Assert_true(Address_isSameIp(&list->nodes[1]->address, otherAddr));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: test_getNodesByAddr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 2);'), (3, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (4, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[1]->address, otherAddr));'), (5, 1, u'+    Assert_true(list->size == 2);'), (6, 1, u'+    Assert_true(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (7, 1, u'+    Assert_true(Address_isSameIp(&list->nodes[1]->address, otherAddr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 2);'), (3, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (4, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[1]->address, otherAddr));'), (5, 1, u'+    Assert_true(list->size == 2);'), (6, 1, u'+    Assert_true(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (7, 1, u'+    Assert_true(Address_isSameIp(&list->nodes[1]->address, otherAddr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 1);'), (3, 1, u'+    Assert_true(list->size == 1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_getNodesByAddr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 1);'), (3, 1, u'+    Assert_true(list->size == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 1);'), (3, 1, u'+    Assert_true(list->size == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(target) == 4);'), (3, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(oneHop1->path) == 4);'), (4, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(oneHop2->path) == 4);'), (5, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(oneHop3->path) == 4);'), (6, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(twoHop->path) == 4);'), (7, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(target) == 4);'), (8, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(oneHop1->path) == 4);'), (9, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(oneHop2->path) == 4);'), (10, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(oneHop3->path) == 4);'), (11, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(twoHop->path) == 4);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: test_getPeers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(target) == 4);'), (3, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(oneHop1->path) == 4);'), (4, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(oneHop2->path) == 4);'), (5, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(oneHop3->path) == 4);'), (6, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(twoHop->path) == 4);'), (7, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(target) == 4);'), (8, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(oneHop1->path) == 4);'), (9, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(oneHop2->path) == 4);'), (10, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(oneHop3->path) == 4);'), (11, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(twoHop->path) == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(target) == 4);'), (3, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(oneHop1->path) == 4);'), (4, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(oneHop2->path) == 4);'), (5, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(oneHop3->path) == 4);'), (6, 2, u'-        Assert_always(NumberCompress_bitsUsedForLabel(twoHop->path) == 4);'), (7, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(target) == 4);'), (8, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(oneHop1->path) == 4);'), (9, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(oneHop2->path) == 4);'), (10, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(oneHop3->path) == 4);'), (11, 1, u'+        Assert_true(NumberCompress_bitsUsedForLabel(twoHop->path) == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(LabelSplicer_isOneHop(oneHop1->path));'), (3, 2, u'-    Assert_always(LabelSplicer_isOneHop(oneHop2->path));'), (4, 2, u'-    Assert_always(LabelSplicer_isOneHop(oneHop3->path));'), (5, 2, u'-    Assert_always(!LabelSplicer_isOneHop(twoHop->path));'), (6, 1, u'+    Assert_true(LabelSplicer_isOneHop(oneHop1->path));'), (7, 1, u'+    Assert_true(LabelSplicer_isOneHop(oneHop2->path));'), (8, 1, u'+    Assert_true(LabelSplicer_isOneHop(oneHop3->path));'), (9, 1, u'+    Assert_true(!LabelSplicer_isOneHop(twoHop->path));')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: test_getPeers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(LabelSplicer_isOneHop(oneHop1->path));'), (3, 2, u'-    Assert_always(LabelSplicer_isOneHop(oneHop2->path));'), (4, 2, u'-    Assert_always(LabelSplicer_isOneHop(oneHop3->path));'), (5, 2, u'-    Assert_always(!LabelSplicer_isOneHop(twoHop->path));'), (6, 1, u'+    Assert_true(LabelSplicer_isOneHop(oneHop1->path));'), (7, 1, u'+    Assert_true(LabelSplicer_isOneHop(oneHop2->path));'), (8, 1, u'+    Assert_true(LabelSplicer_isOneHop(oneHop3->path));'), (9, 1, u'+    Assert_true(!LabelSplicer_isOneHop(twoHop->path));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(LabelSplicer_isOneHop(oneHop1->path));'), (3, 2, u'-    Assert_always(LabelSplicer_isOneHop(oneHop2->path));'), (4, 2, u'-    Assert_always(LabelSplicer_isOneHop(oneHop3->path));'), (5, 2, u'-    Assert_always(!LabelSplicer_isOneHop(twoHop->path));'), (6, 1, u'+    Assert_true(LabelSplicer_isOneHop(oneHop1->path));'), (7, 1, u'+    Assert_true(LabelSplicer_isOneHop(oneHop2->path));'), (8, 1, u'+    Assert_true(LabelSplicer_isOneHop(oneHop3->path));'), (9, 1, u'+    Assert_true(!LabelSplicer_isOneHop(twoHop->path));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list != NULL);'), (3, 2, u'-    Assert_always(list->size == 0);'), (4, 1, u'+    Assert_true(list != NULL);'), (5, 1, u'+    Assert_true(list->size == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test_getPeers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list != NULL);'), (3, 2, u'-    Assert_always(list->size == 0);'), (4, 1, u'+    Assert_true(list != NULL);'), (5, 1, u'+    Assert_true(list->size == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list != NULL);'), (3, 2, u'-    Assert_always(list->size == 0);'), (4, 1, u'+    Assert_true(list != NULL);'), (5, 1, u'+    Assert_true(list->size == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 3);'), (3, 1, u'+    Assert_true(list->size == 3);'), (5, 2, u'-        Assert_always(LabelSplicer_isOneHop(list->nodes[i]->address.path));'), (6, 1, u'+        Assert_true(LabelSplicer_isOneHop(list->nodes[i]->address.path));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test_getPeers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 3);'), (3, 1, u'+    Assert_true(list->size == 3);'), (5, 2, u'-        Assert_always(LabelSplicer_isOneHop(list->nodes[i]->address.path));'), (6, 1, u'+        Assert_true(LabelSplicer_isOneHop(list->nodes[i]->address.path));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 3);'), (3, 1, u'+    Assert_true(list->size == 3);'), (5, 2, u'-        Assert_always(LabelSplicer_isOneHop(list->nodes[i]->address.path));'), (6, 1, u'+        Assert_true(LabelSplicer_isOneHop(list->nodes[i]->address.path));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 1);'), (3, 1, u'+    Assert_true(list->size == 1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_getPeers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 1);'), (3, 1, u'+    Assert_true(list->size == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list->size == 1);'), (3, 1, u'+    Assert_true(list->size == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(best != NULL);'), (3, 2, u'-    Assert_always(Address_isSameIp(&best->address, b));'), (4, 1, u'+    Assert_true(best != NULL);'), (5, 1, u'+    Assert_true(Address_isSameIp(&best->address, b));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test_getBest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(best != NULL);'), (3, 2, u'-    Assert_always(Address_isSameIp(&best->address, b));'), (4, 1, u'+    Assert_true(best != NULL);'), (5, 1, u'+    Assert_true(Address_isSameIp(&best->address, b));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(best != NULL);'), (3, 2, u'-    Assert_always(Address_isSameIp(&best->address, b));'), (4, 1, u'+    Assert_true(best != NULL);'), (5, 1, u'+    Assert_true(Address_isSameIp(&best->address, b));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(best != NULL);'), (3, 2, u'-    Assert_always(Address_isSameIp(&best->address, a));'), (4, 1, u'+    Assert_true(best != NULL);'), (5, 1, u'+    Assert_true(Address_isSameIp(&best->address, a));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test_getBest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(best != NULL);'), (3, 2, u'-    Assert_always(Address_isSameIp(&best->address, a));'), (4, 1, u'+    Assert_true(best != NULL);'), (5, 1, u'+    Assert_true(Address_isSameIp(&best->address, a));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(best != NULL);'), (3, 2, u'-    Assert_always(Address_isSameIp(&best->address, a));'), (4, 1, u'+    Assert_true(best != NULL);'), (5, 1, u'+    Assert_true(Address_isSameIp(&best->address, a));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(closest != NULL);'), (3, 2, u'-    Assert_always(closest->size == 2);'), (4, 2, u'-    Assert_always(Address_isSameIp(&closest->nodes[0]->address, twoHop));'), (5, 2, u'-    Assert_always(Address_isSameIp(&closest->nodes[1]->address, oneHop));'), (6, 1, u'+    Assert_true(closest != NULL);'), (7, 1, u'+    Assert_true(closest->size == 2);'), (8, 1, u'+    Assert_true(Address_isSameIp(&closest->nodes[0]->address, twoHop));'), (9, 1, u'+    Assert_true(Address_isSameIp(&closest->nodes[1]->address, oneHop));')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: test_getClosestNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(closest != NULL);'), (3, 2, u'-    Assert_always(closest->size == 2);'), (4, 2, u'-    Assert_always(Address_isSameIp(&closest->nodes[0]->address, twoHop));'), (5, 2, u'-    Assert_always(Address_isSameIp(&closest->nodes[1]->address, oneHop));'), (6, 1, u'+    Assert_true(closest != NULL);'), (7, 1, u'+    Assert_true(closest->size == 2);'), (8, 1, u'+    Assert_true(Address_isSameIp(&closest->nodes[0]->address, twoHop));'), (9, 1, u'+    Assert_true(Address_isSameIp(&closest->nodes[1]->address, oneHop));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(closest != NULL);'), (3, 2, u'-    Assert_always(closest->size == 2);'), (4, 2, u'-    Assert_always(Address_isSameIp(&closest->nodes[0]->address, twoHop));'), (5, 2, u'-    Assert_always(Address_isSameIp(&closest->nodes[1]->address, oneHop));'), (6, 1, u'+    Assert_true(closest != NULL);'), (7, 1, u'+    Assert_true(closest->size == 2);'), (8, 1, u'+    Assert_true(Address_isSameIp(&closest->nodes[0]->address, twoHop));'), (9, 1, u'+    Assert_true(Address_isSameIp(&closest->nodes[1]->address, oneHop));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(LabelSplicer_routesThrough(c->path, b->path));'), (3, 1, u'+    Assert_true(LabelSplicer_routesThrough(c->path, b->path));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_updateReach
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(LabelSplicer_routesThrough(c->path, b->path));'), (3, 1, u'+    Assert_true(LabelSplicer_routesThrough(c->path, b->path));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(LabelSplicer_routesThrough(c->path, b->path));'), (3, 1, u'+    Assert_true(LabelSplicer_routesThrough(c->path, b->path));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_dumpTable(store, 2)->reach == 10);'), (3, 1, u'+    Assert_true(NodeStore_dumpTable(store, 2)->reach == 10);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_updateReach
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_dumpTable(store, 2)->reach == 10);'), (3, 1, u'+    Assert_true(NodeStore_dumpTable(store, 2)->reach == 10);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_dumpTable(store, 2)->reach == 10);'), (3, 1, u'+    Assert_true(NodeStore_dumpTable(store, 2)->reach == 10);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(store->size == 4);'), (3, 2, u'-    Assert_always(NodeStore_nonZeroNodes(store)==4);'), (4, 1, u'+    Assert_true(store->size == 4);'), (5, 1, u'+    Assert_true(NodeStore_nonZeroNodes(store)==4);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test_nonZeroNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(store->size == 4);'), (3, 2, u'-    Assert_always(NodeStore_nonZeroNodes(store)==4);'), (4, 1, u'+    Assert_true(store->size == 4);'), (5, 1, u'+    Assert_true(NodeStore_nonZeroNodes(store)==4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(store->size == 4);'), (3, 2, u'-    Assert_always(NodeStore_nonZeroNodes(store)==4);'), (4, 1, u'+    Assert_true(store->size == 4);'), (5, 1, u'+    Assert_true(NodeStore_nonZeroNodes(store)==4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_nonZeroNodes(store)==3);'), (3, 1, u'+    Assert_true(NodeStore_nonZeroNodes(store)==3);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_nonZeroNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_nonZeroNodes(store)==3);'), (3, 1, u'+    Assert_true(NodeStore_nonZeroNodes(store)==3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_nonZeroNodes(store)==3);'), (3, 1, u'+    Assert_true(NodeStore_nonZeroNodes(store)==3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_size(store) == 0);'), (3, 1, u'+    Assert_true(NodeStore_size(store) == 0);'), (5, 2, u'-    Assert_always(NodeStore_size(store) == 1);'), (6, 1, u'+    Assert_true(NodeStore_size(store) == 1);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test_size
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_size(store) == 0);'), (3, 1, u'+    Assert_true(NodeStore_size(store) == 0);'), (5, 2, u'-    Assert_always(NodeStore_size(store) == 1);'), (6, 1, u'+    Assert_true(NodeStore_size(store) == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_size(store) == 0);'), (3, 1, u'+    Assert_true(NodeStore_size(store) == 0);'), (5, 2, u'-    Assert_always(NodeStore_size(store) == 1);'), (6, 1, u'+    Assert_true(NodeStore_size(store) == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_getNodeByNetworkAddr(getPath((int[]){2,1}),store)==NULL);'), (3, 1, u'+    Assert_true(NodeStore_getNodeByNetworkAddr(getPath((int[]){2,1}),store)==NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_getNodeByNetworkAddr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_getNodeByNetworkAddr(getPath((int[]){2,1}),store)==NULL);'), (3, 1, u'+    Assert_true(NodeStore_getNodeByNetworkAddr(getPath((int[]){2,1}),store)==NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_getNodeByNetworkAddr(getPath((int[]){2,1}),store)==NULL);'), (3, 1, u'+    Assert_true(NodeStore_getNodeByNetworkAddr(getPath((int[]){2,1}),store)==NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always('), (3, 1, u'+    Assert_true(')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_getNodeByNetworkAddr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always('), (3, 1, u'+    Assert_true(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always('), (3, 1, u'+    Assert_true(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(LabelSplicer_routesThrough(c->path, b->path));'), (3, 1, u'+    Assert_true(LabelSplicer_routesThrough(c->path, b->path));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_brokenPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(LabelSplicer_routesThrough(c->path, b->path));'), (3, 1, u'+    Assert_true(LabelSplicer_routesThrough(c->path, b->path));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(LabelSplicer_routesThrough(c->path, b->path));'), (3, 1, u'+    Assert_true(LabelSplicer_routesThrough(c->path, b->path));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_brokenPath(b->path, store)==2);'), (3, 1, u'+    Assert_true(NodeStore_brokenPath(b->path, store)==2);'), (6, 2, u'-    Assert_always(NodeStore_nonZeroNodes(store)==1);'), (7, 1, u'+    Assert_true(NodeStore_nonZeroNodes(store)==1);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test_brokenPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_brokenPath(b->path, store)==2);'), (3, 1, u'+    Assert_true(NodeStore_brokenPath(b->path, store)==2);'), (6, 2, u'-    Assert_always(NodeStore_nonZeroNodes(store)==1);'), (7, 1, u'+    Assert_true(NodeStore_nonZeroNodes(store)==1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_brokenPath(b->path, store)==2);'), (3, 1, u'+    Assert_true(NodeStore_brokenPath(b->path, store)==2);'), (6, 2, u'-    Assert_always(NodeStore_nonZeroNodes(store)==1);'), (7, 1, u'+    Assert_true(NodeStore_nonZeroNodes(store)==1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Address_isSameIp(&orig->address, &test->address));'), (3, 1, u'+    Assert_true(Address_isSameIp(&orig->address, &test->address));'), (5, 2, u'-    Assert_always(NodeStore_dumpTable(store, -1) == NULL);'), (6, 2, u'-    Assert_always(NodeStore_dumpTable(store, 3) == NULL);'), (7, 1, u'+    Assert_true(NodeStore_dumpTable(store, -1) == NULL);'), (8, 1, u'+    Assert_true(NodeStore_dumpTable(store, 3) == NULL);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: test_dumpTable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Address_isSameIp(&orig->address, &test->address));'), (3, 1, u'+    Assert_true(Address_isSameIp(&orig->address, &test->address));'), (5, 2, u'-    Assert_always(NodeStore_dumpTable(store, -1) == NULL);'), (6, 2, u'-    Assert_always(NodeStore_dumpTable(store, 3) == NULL);'), (7, 1, u'+    Assert_true(NodeStore_dumpTable(store, -1) == NULL);'), (8, 1, u'+    Assert_true(NodeStore_dumpTable(store, 3) == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Address_isSameIp(&orig->address, &test->address));'), (3, 1, u'+    Assert_true(Address_isSameIp(&orig->address, &test->address));'), (5, 2, u'-    Assert_always(NodeStore_dumpTable(store, -1) == NULL);'), (6, 2, u'-    Assert_always(NodeStore_dumpTable(store, 3) == NULL);'), (7, 1, u'+    Assert_true(NodeStore_dumpTable(store, -1) == NULL);'), (8, 1, u'+    Assert_true(NodeStore_dumpTable(store, 3) == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_linkCount(store->selfNode) == 1);'), (3, 1, u'+    Assert_true(NodeStore_linkCount(store->selfNode) == 1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_pathfinderTwo_splitLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_linkCount(store->selfNode) == 1);'), (3, 1, u'+    Assert_true(NodeStore_linkCount(store->selfNode) == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_linkCount(store->selfNode) == 1);'), (3, 1, u'+    Assert_true(NodeStore_linkCount(store->selfNode) == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_linkCount(store->selfNode) == 2);'), (3, 1, u'+    Assert_true(NodeStore_linkCount(store->selfNode) == 2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_pathfinderTwo_splitLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_linkCount(store->selfNode) == 2);'), (3, 1, u'+    Assert_true(NodeStore_linkCount(store->selfNode) == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_linkCount(store->selfNode) == 2);'), (3, 1, u'+    Assert_true(NodeStore_linkCount(store->selfNode) == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_linkCount(store->selfNode) == 2);'), (3, 1, u'+    Assert_true(NodeStore_linkCount(store->selfNode) == 2);'), (5, 2, u'-    Assert_always(NodeStore_linkCount(linkSelfEfef->child) == 1);'), (6, 1, u'+    Assert_true(NodeStore_linkCount(linkSelfEfef->child) == 1);'), (9, 2, u'-    Assert_always(NodeStore_linkCount(linkEfEf39ee->child) == 0);'), (10, 1, u'+    Assert_true(NodeStore_linkCount(linkEfEf39ee->child) == 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: test_pathfinderTwo_splitLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_linkCount(store->selfNode) == 2);'), (3, 1, u'+    Assert_true(NodeStore_linkCount(store->selfNode) == 2);'), (5, 2, u'-    Assert_always(NodeStore_linkCount(linkSelfEfef->child) == 1);'), (6, 1, u'+    Assert_true(NodeStore_linkCount(linkSelfEfef->child) == 1);'), (9, 2, u'-    Assert_always(NodeStore_linkCount(linkEfEf39ee->child) == 0);'), (10, 1, u'+    Assert_true(NodeStore_linkCount(linkEfEf39ee->child) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_linkCount(store->selfNode) == 2);'), (3, 1, u'+    Assert_true(NodeStore_linkCount(store->selfNode) == 2);'), (5, 2, u'-    Assert_always(NodeStore_linkCount(linkSelfEfef->child) == 1);'), (6, 1, u'+    Assert_true(NodeStore_linkCount(linkSelfEfef->child) == 1);'), (9, 2, u'-    Assert_always(NodeStore_linkCount(linkEfEf39ee->child) == 0);'), (10, 1, u'+    Assert_true(NodeStore_linkCount(linkEfEf39ee->child) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_linkCount(linkSelfEfef->child) == 1);'), (3, 1, u'+    Assert_true(NodeStore_linkCount(linkSelfEfef->child) == 1);'), (5, 2, u'-    Assert_always(linkEfef2765->child != node39ee);'), (6, 2, u'-    Assert_always(NodeStore_linkCount(linkEfef2765->child) == 1);'), (7, 1, u'+    Assert_true(linkEfef2765->child != node39ee);'), (8, 1, u'+    Assert_true(NodeStore_linkCount(linkEfef2765->child) == 1);'), (10, 2, u'-    Assert_always(link276539ee->child == node39ee);'), (11, 2, u'-    Assert_always(NodeStore_linkCount(node39ee) == 0);'), (12, 1, u'+    Assert_true(link276539ee->child == node39ee);'), (13, 1, u'+    Assert_true(NodeStore_linkCount(node39ee) == 0);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: test_pathfinderTwo_splitLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_linkCount(linkSelfEfef->child) == 1);'), (3, 1, u'+    Assert_true(NodeStore_linkCount(linkSelfEfef->child) == 1);'), (5, 2, u'-    Assert_always(linkEfef2765->child != node39ee);'), (6, 2, u'-    Assert_always(NodeStore_linkCount(linkEfef2765->child) == 1);'), (7, 1, u'+    Assert_true(linkEfef2765->child != node39ee);'), (8, 1, u'+    Assert_true(NodeStore_linkCount(linkEfef2765->child) == 1);'), (10, 2, u'-    Assert_always(link276539ee->child == node39ee);'), (11, 2, u'-    Assert_always(NodeStore_linkCount(node39ee) == 0);'), (12, 1, u'+    Assert_true(link276539ee->child == node39ee);'), (13, 1, u'+    Assert_true(NodeStore_linkCount(node39ee) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_linkCount(linkSelfEfef->child) == 1);'), (3, 1, u'+    Assert_true(NodeStore_linkCount(linkSelfEfef->child) == 1);'), (5, 2, u'-    Assert_always(linkEfef2765->child != node39ee);'), (6, 2, u'-    Assert_always(NodeStore_linkCount(linkEfef2765->child) == 1);'), (7, 1, u'+    Assert_true(linkEfef2765->child != node39ee);'), (8, 1, u'+    Assert_true(NodeStore_linkCount(linkEfef2765->child) == 1);'), (10, 2, u'-    Assert_always(link276539ee->child == node39ee);'), (11, 2, u'-    Assert_always(NodeStore_linkCount(node39ee) == 0);'), (12, 1, u'+    Assert_true(link276539ee->child == node39ee);'), (13, 1, u'+    Assert_true(NodeStore_linkCount(node39ee) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(vl->length == vl2->length && vl->length == count);'), (3, 1, u'+            Assert_true(vl->length == vl2->length && vl->length == count);'), (6, 2, u'-                Assert_always(vl2->versions[i] == vl->versions[i]);'), (7, 1, u'+                Assert_true(vl2->versions[i] == vl->versions[i]);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(vl->length == vl2->length && vl->length == count);'), (3, 1, u'+            Assert_true(vl->length == vl2->length && vl->length == count);'), (6, 2, u'-                Assert_always(vl2->versions[i] == vl->versions[i]);'), (7, 1, u'+                Assert_true(vl2->versions[i] == vl->versions[i]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(vl->length == vl2->length && vl->length == count);'), (3, 1, u'+            Assert_true(vl->length == vl2->length && vl->length == count);'), (6, 2, u'-                Assert_always(vl2->versions[i] == vl->versions[i]);'), (7, 1, u'+                Assert_true(vl2->versions[i] == vl->versions[i]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(sm->ifaceMap.keys[mapIndex].bytes[0] == 0xfc);'), (3, 1, u'+    Assert_true(sm->ifaceMap.keys[mapIndex].bytes[0] == 0xfc);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: check
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(sm->ifaceMap.keys[mapIndex].bytes[0] == 0xfc);'), (3, 1, u'+    Assert_true(sm->ifaceMap.keys[mapIndex].bytes[0] == 0xfc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(sm->ifaceMap.keys[mapIndex].bytes[0] == 0xfc);'), (3, 1, u'+    Assert_true(sm->ifaceMap.keys[mapIndex].bytes[0] == 0xfc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!Bits_memcmp(&sm->ifaceMap.keys[mapIndex], ip6, 16));'), (3, 1, u'+        Assert_true(!Bits_memcmp(&sm->ifaceMap.keys[mapIndex], ip6, 16));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: check
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!Bits_memcmp(&sm->ifaceMap.keys[mapIndex], ip6, 16));'), (3, 1, u'+        Assert_true(!Bits_memcmp(&sm->ifaceMap.keys[mapIndex], ip6, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!Bits_memcmp(&sm->ifaceMap.keys[mapIndex], ip6, 16));'), (3, 1, u'+        Assert_true(!Bits_memcmp(&sm->ifaceMap.keys[mapIndex], ip6, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ip6);'), (3, 1, u'+    Assert_true(ip6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sessionStats
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ip6);'), (3, 1, u'+    Assert_true(ip6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ip6);'), (3, 1, u'+    Assert_true(ip6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(12 == strlen(text));'), (3, 1, u'+    Assert_true(12 == strlen(text));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(12 == strlen(text));'), (3, 1, u'+    Assert_true(12 == strlen(text));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(12 == strlen(text));'), (3, 1, u'+    Assert_true(12 == strlen(text));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(output == NULL);'), (3, 1, u'+    Assert_true(output == NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(output == NULL);'), (3, 1, u'+    Assert_true(output == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(output == NULL);'), (3, 1, u'+    Assert_true(output == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(output && output->length == (int)strlen(text));'), (3, 2, u'-    Assert_always(!Bits_memcmp(output->bytes, text, strlen(text)));'), (4, 1, u'+    Assert_true(output && output->length == (int)strlen(text));'), (5, 1, u'+    Assert_true(!Bits_memcmp(output->bytes, text, strlen(text)));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(output && output->length == (int)strlen(text));'), (3, 2, u'-    Assert_always(!Bits_memcmp(output->bytes, text, strlen(text)));'), (4, 1, u'+    Assert_true(output && output->length == (int)strlen(text));'), (5, 1, u'+    Assert_true(!Bits_memcmp(output->bytes, text, strlen(text)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(output && output->length == (int)strlen(text));'), (3, 2, u'-    Assert_always(!Bits_memcmp(output->bytes, text, strlen(text)));'), (4, 1, u'+    Assert_true(output && output->length == (int)strlen(text));'), (5, 1, u'+    Assert_true(!Bits_memcmp(output->bytes, text, strlen(text)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(output && output->length == (int)strlen(text));'), (3, 2, u'-    Assert_always(!Bits_memcmp(output->bytes, text, strlen(text)));'), (4, 1, u'+    Assert_true(output && output->length == (int)strlen(text));'), (5, 1, u'+    Assert_true(!Bits_memcmp(output->bytes, text, strlen(text)));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(output && output->length == (int)strlen(text));'), (3, 2, u'-    Assert_always(!Bits_memcmp(output->bytes, text, strlen(text)));'), (4, 1, u'+    Assert_true(output && output->length == (int)strlen(text));'), (5, 1, u'+    Assert_true(!Bits_memcmp(output->bytes, text, strlen(text)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(output && output->length == (int)strlen(text));'), (3, 2, u'-    Assert_always(!Bits_memcmp(output->bytes, text, strlen(text)));'), (4, 1, u'+    Assert_true(output && output->length == (int)strlen(text));'), (5, 1, u'+    Assert_true(!Bits_memcmp(output->bytes, text, strlen(text)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length <= 1280);'), (3, 1, u'+    Assert_true(msg->length <= 1280);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mtuTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length <= 1280);'), (3, 1, u'+    Assert_true(msg->length <= 1280);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length <= 1280);'), (3, 1, u'+    Assert_true(msg->length <= 1280);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(sourceAddr, header->sourceAddr, 16));'), (3, 2, u'-    Assert_always(!Bits_memcmp(destAddr, header->destinationAddr, 16));'), (4, 2, u'-    Assert_always(Headers_getIpVersion(header) == 6);'), (5, 2, u'-    Assert_always(header->flowLabelLow_be == 0);'), (6, 2, u'-    Assert_always(Endian_bigEndianToHost16(header->payloadLength_be) == msg->length);'), (7, 2, u'-    Assert_always(header->nextHeader == 58); // 58 -> icmp'), (8, 2, u'-    Assert_always(header->hopLimit == 64);'), (9, 1, u'+    Assert_true(!Bits_memcmp(sourceAddr, header->sourceAddr, 16));'), (10, 1, u'+    Assert_true(!Bits_memcmp(destAddr, header->destinationAddr, 16));'), (11, 1, u'+    Assert_true(Headers_getIpVersion(header) == 6);'), (12, 1, u'+    Assert_true(header->flowLabelLow_be == 0);'), (13, 1, u'+    Assert_true(Endian_bigEndianToHost16(header->payloadLength_be) == msg->length);'), (14, 1, u'+    Assert_true(header->nextHeader == 58); // 58 -> icmp'), (15, 1, u'+    Assert_true(header->hopLimit == 64);')]
===========================================
===========================================
Total add: 7
Total del: 7
Header: mtuTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(sourceAddr, header->sourceAddr, 16));'), (3, 2, u'-    Assert_always(!Bits_memcmp(destAddr, header->destinationAddr, 16));'), (4, 2, u'-    Assert_always(Headers_getIpVersion(header) == 6);'), (5, 2, u'-    Assert_always(header->flowLabelLow_be == 0);'), (6, 2, u'-    Assert_always(Endian_bigEndianToHost16(header->payloadLength_be) == msg->length);'), (7, 2, u'-    Assert_always(header->nextHeader == 58); // 58 -> icmp'), (8, 2, u'-    Assert_always(header->hopLimit == 64);'), (9, 1, u'+    Assert_true(!Bits_memcmp(sourceAddr, header->sourceAddr, 16));'), (10, 1, u'+    Assert_true(!Bits_memcmp(destAddr, header->destinationAddr, 16));'), (11, 1, u'+    Assert_true(Headers_getIpVersion(header) == 6);'), (12, 1, u'+    Assert_true(header->flowLabelLow_be == 0);'), (13, 1, u'+    Assert_true(Endian_bigEndianToHost16(header->payloadLength_be) == msg->length);'), (14, 1, u'+    Assert_true(header->nextHeader == 58); // 58 -> icmp'), (15, 1, u'+    Assert_true(header->hopLimit == 64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(sourceAddr, header->sourceAddr, 16));'), (3, 2, u'-    Assert_always(!Bits_memcmp(destAddr, header->destinationAddr, 16));'), (4, 2, u'-    Assert_always(Headers_getIpVersion(header) == 6);'), (5, 2, u'-    Assert_always(header->flowLabelLow_be == 0);'), (6, 2, u'-    Assert_always(Endian_bigEndianToHost16(header->payloadLength_be) == msg->length);'), (7, 2, u'-    Assert_always(header->nextHeader == 58); // 58 -> icmp'), (8, 2, u'-    Assert_always(header->hopLimit == 64);'), (9, 1, u'+    Assert_true(!Bits_memcmp(sourceAddr, header->sourceAddr, 16));'), (10, 1, u'+    Assert_true(!Bits_memcmp(destAddr, header->destinationAddr, 16));'), (11, 1, u'+    Assert_true(Headers_getIpVersion(header) == 6);'), (12, 1, u'+    Assert_true(header->flowLabelLow_be == 0);'), (13, 1, u'+    Assert_true(Endian_bigEndianToHost16(header->payloadLength_be) == msg->length);'), (14, 1, u'+    Assert_true(header->nextHeader == 58); // 58 -> icmp'), (15, 1, u'+    Assert_true(header->hopLimit == 64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(icmp->type == 2); // packet too big.'), (3, 2, u'-    Assert_always(icmp->code == 0);'), (4, 2, u'-    Assert_always(icmp->additional == Endian_hostToBigEndian32(mtu));'), (5, 1, u'+    Assert_true(icmp->type == 2); // packet too big.'), (6, 1, u'+    Assert_true(icmp->code == 0);'), (7, 1, u'+    Assert_true(icmp->additional == Endian_hostToBigEndian32(mtu));'), (9, 2, u'-    Assert_always(msg->length =='), (10, 1, u'+    Assert_true(msg->length ==')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: mtuTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(icmp->type == 2); // packet too big.'), (3, 2, u'-    Assert_always(icmp->code == 0);'), (4, 2, u'-    Assert_always(icmp->additional == Endian_hostToBigEndian32(mtu));'), (5, 1, u'+    Assert_true(icmp->type == 2); // packet too big.'), (6, 1, u'+    Assert_true(icmp->code == 0);'), (7, 1, u'+    Assert_true(icmp->additional == Endian_hostToBigEndian32(mtu));'), (9, 2, u'-    Assert_always(msg->length =='), (10, 1, u'+    Assert_true(msg->length ==')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(icmp->type == 2); // packet too big.'), (3, 2, u'-    Assert_always(icmp->code == 0);'), (4, 2, u'-    Assert_always(icmp->additional == Endian_hostToBigEndian32(mtu));'), (5, 1, u'+    Assert_true(icmp->type == 2); // packet too big.'), (6, 1, u'+    Assert_true(icmp->code == 0);'), (7, 1, u'+    Assert_true(icmp->additional == Endian_hostToBigEndian32(mtu));'), (9, 2, u'-    Assert_always(msg->length =='), (10, 1, u'+    Assert_true(msg->length ==')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!out);'), (3, 1, u'+    Assert_true(!out);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mtuTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!out);'), (3, 1, u'+    Assert_true(!out);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!out);'), (3, 1, u'+    Assert_true(!out);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Endian_bigEndianToHost16(ip6->payloadLength_be) == msg->length);'), (3, 1, u'+    Assert_true(Endian_bigEndianToHost16(ip6->payloadLength_be) == msg->length);'), (5, 2, u'-    Assert_always(msg->length > 0);'), (6, 1, u'+    Assert_true(msg->length > 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: messageFromGenerator
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Endian_bigEndianToHost16(ip6->payloadLength_be) == msg->length);'), (3, 1, u'+    Assert_true(Endian_bigEndianToHost16(ip6->payloadLength_be) == msg->length);'), (5, 2, u'-    Assert_always(msg->length > 0);'), (6, 1, u'+    Assert_true(msg->length > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Endian_bigEndianToHost16(ip6->payloadLength_be) == msg->length);'), (3, 1, u'+    Assert_true(Endian_bigEndianToHost16(ip6->payloadLength_be) == msg->length);'), (5, 2, u'-    Assert_always(msg->length > 0);'), (6, 1, u'+    Assert_true(msg->length > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(reassemblyBuff[i] == ((i + headersSize) & 0xff));'), (3, 1, u'+        Assert_true(reassemblyBuff[i] == ((i + headersSize) & 0xff));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: fragTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(reassemblyBuff[i] == ((i + headersSize) & 0xff));'), (3, 1, u'+        Assert_true(reassemblyBuff[i] == ((i + headersSize) & 0xff));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(reassemblyBuff[i] == ((i + headersSize) & 0xff));'), (3, 1, u'+        Assert_true(reassemblyBuff[i] == ((i + headersSize) & 0xff));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(ctx.receivedOn == iface);'), (3, 1, u'+            Assert_true(ctx.receivedOn == iface);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(ctx.receivedOn == iface);'), (3, 1, u'+            Assert_true(ctx.receivedOn == iface);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(ctx.receivedOn == iface);'), (3, 1, u'+            Assert_true(ctx.receivedOn == iface);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length == Headers_IP4Header_SIZE + Headers_UDPHeader_SIZE + 12);'), (3, 1, u'+    Assert_true(msg->length == Headers_IP4Header_SIZE + Headers_UDPHeader_SIZE + 12);'), (5, 2, u'-    Assert_always(!Bits_memcmp(header->destAddr, testAddrB, 4));'), (6, 2, u'-    Assert_always(!Bits_memcmp(header->sourceAddr, testAddrA, 4));'), (7, 1, u'+    Assert_true(!Bits_memcmp(header->destAddr, testAddrB, 4));'), (8, 1, u'+    Assert_true(!Bits_memcmp(header->sourceAddr, testAddrA, 4));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: receiveMessageTUN
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length == Headers_IP4Header_SIZE + Headers_UDPHeader_SIZE + 12);'), (3, 1, u'+    Assert_true(msg->length == Headers_IP4Header_SIZE + Headers_UDPHeader_SIZE + 12);'), (5, 2, u'-    Assert_always(!Bits_memcmp(header->destAddr, testAddrB, 4));'), (6, 2, u'-    Assert_always(!Bits_memcmp(header->sourceAddr, testAddrA, 4));'), (7, 1, u'+    Assert_true(!Bits_memcmp(header->destAddr, testAddrB, 4));'), (8, 1, u'+    Assert_true(!Bits_memcmp(header->sourceAddr, testAddrA, 4));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length == Headers_IP4Header_SIZE + Headers_UDPHeader_SIZE + 12);'), (3, 1, u'+    Assert_true(msg->length == Headers_IP4Header_SIZE + Headers_UDPHeader_SIZE + 12);'), (5, 2, u'-    Assert_always(!Bits_memcmp(header->destAddr, testAddrB, 4));'), (6, 2, u'-    Assert_always(!Bits_memcmp(header->sourceAddr, testAddrA, 4));'), (7, 1, u'+    Assert_true(!Bits_memcmp(header->destAddr, testAddrB, 4));'), (8, 1, u'+    Assert_true(!Bits_memcmp(header->sourceAddr, testAddrA, 4));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!"timeout");'), (3, 1, u'+    Assert_true(!"timeout");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: fail
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!"timeout");'), (3, 1, u'+    Assert_true(!"timeout");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!"timeout");'), (3, 1, u'+    Assert_true(!"timeout");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("0.0.0.0", &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("0.0.0.0", &ss));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("0.0.0.0", &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("0.0.0.0", &ss));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("0.0.0.0", &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("0.0.0.0", &ss));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(4 == Sockaddr_getAddress(dest, &addr));'), (3, 1, u'+    Assert_true(4 == Sockaddr_getAddress(dest, &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(4 == Sockaddr_getAddress(dest, &addr));'), (3, 1, u'+    Assert_true(4 == Sockaddr_getAddress(dest, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(4 == Sockaddr_getAddress(dest, &addr));'), (3, 1, u'+    Assert_true(4 == Sockaddr_getAddress(dest, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(header->destinationAddr, testAddrB, 16));'), (3, 2, u'-    Assert_always(!Bits_memcmp(header->sourceAddr, testAddrA, 16));'), (4, 1, u'+    Assert_true(!Bits_memcmp(header->destinationAddr, testAddrB, 16));'), (5, 1, u'+    Assert_true(!Bits_memcmp(header->sourceAddr, testAddrA, 16));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: receiveMessageTUN
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(header->destinationAddr, testAddrB, 16));'), (3, 2, u'-    Assert_always(!Bits_memcmp(header->sourceAddr, testAddrA, 16));'), (4, 1, u'+    Assert_true(!Bits_memcmp(header->destinationAddr, testAddrB, 16));'), (5, 1, u'+    Assert_true(!Bits_memcmp(header->sourceAddr, testAddrA, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(header->destinationAddr, testAddrB, 16));'), (3, 2, u'-    Assert_always(!Bits_memcmp(header->sourceAddr, testAddrA, 16));'), (4, 1, u'+    Assert_true(!Bits_memcmp(header->destinationAddr, testAddrB, 16));'), (5, 1, u'+    Assert_true(!Bits_memcmp(header->sourceAddr, testAddrA, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!"timeout");'), (3, 1, u'+    Assert_true(!"timeout");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: fail
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!"timeout");'), (3, 1, u'+    Assert_true(!"timeout");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!"timeout");'), (3, 1, u'+    Assert_true(!"timeout");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("[fd00::1]", &addr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("[fd00::1]", &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("[fd00::1]", &addr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("[fd00::1]", &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("[fd00::1]", &addr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("[fd00::1]", &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(udp);'), (3, 1, u'+    Assert_true(udp);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(udp);'), (3, 1, u'+    Assert_true(udp);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(udp);'), (3, 1, u'+    Assert_true(udp);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(16 == Sockaddr_getAddress(dest, &addrBytes));'), (3, 1, u'+    Assert_true(16 == Sockaddr_getAddress(dest, &addrBytes));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(16 == Sockaddr_getAddress(dest, &addrBytes));'), (3, 1, u'+    Assert_true(16 == Sockaddr_getAddress(dest, &addrBytes));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(16 == Sockaddr_getAddress(dest, &addrBytes));'), (3, 1, u'+    Assert_true(16 == Sockaddr_getAddress(dest, &addrBytes));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!"timeout");'), (3, 1, u'+    Assert_true(!"timeout");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: fail
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!"timeout");'), (3, 1, u'+    Assert_true(!"timeout");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!"timeout");'), (3, 1, u'+    Assert_true(!"timeout");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("127.0.0.1", &addr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("127.0.0.1", &addr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("127.0.0.1", &addr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!res->err);'), (3, 1, u'+    Assert_true(!res->err);'), (6, 2, u'-    Assert_always(CString_strstr(res->messageBytes, "5:error4:none15:interfaceNumberi0e"));'), (7, 1, u'+    Assert_true(CString_strstr(res->messageBytes, "5:error4:none15:interfaceNumberi0e"));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ifNewCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!res->err);'), (3, 1, u'+    Assert_true(!res->err);'), (6, 2, u'-    Assert_always(CString_strstr(res->messageBytes, "5:error4:none15:interfaceNumberi0e"));'), (7, 1, u'+    Assert_true(CString_strstr(res->messageBytes, "5:error4:none15:interfaceNumberi0e"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!res->err);'), (3, 1, u'+    Assert_true(!res->err);'), (6, 2, u'-    Assert_always(CString_strstr(res->messageBytes, "5:error4:none15:interfaceNumberi0e"));'), (7, 1, u'+    Assert_true(CString_strstr(res->messageBytes, "5:error4:none15:interfaceNumberi0e"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CString_strstr(res->messageBytes, "5:error30:key must be 52 characters long"));'), (3, 1, u'+    Assert_true(CString_strstr(res->messageBytes, "5:error30:key must be 52 characters long"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: badKeyCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CString_strstr(res->messageBytes, "5:error30:key must be 52 characters long"));'), (3, 1, u'+    Assert_true(CString_strstr(res->messageBytes, "5:error30:key must be 52 characters long"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CString_strstr(res->messageBytes, "5:error30:key must be 52 characters long"));'), (3, 1, u'+    Assert_true(CString_strstr(res->messageBytes, "5:error30:key must be 52 characters long"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CString_strstr(res->messageBytes, "5:error4:none"));'), (3, 1, u'+    Assert_true(CString_strstr(res->messageBytes, "5:error4:none"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: goodCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CString_strstr(res->messageBytes, "5:error4:none"));'), (3, 1, u'+    Assert_true(CString_strstr(res->messageBytes, "5:error4:none"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(CString_strstr(res->messageBytes, "5:error4:none"));'), (3, 1, u'+    Assert_true(CString_strstr(res->messageBytes, "5:error4:none"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!"Unsupported ethertype");'), (3, 1, u'+        Assert_true(!"Unsupported ethertype");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!"Unsupported ethertype");'), (3, 1, u'+        Assert_true(!"Unsupported ethertype");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!"Unsupported ethertype");'), (3, 1, u'+        Assert_true(!"Unsupported ethertype");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!"Unsupported ethertype");'), (3, 1, u'+        Assert_true(!"Unsupported ethertype");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!"Unsupported ethertype");'), (3, 1, u'+        Assert_true(!"Unsupported ethertype");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(!"Unsupported ethertype");'), (3, 1, u'+        Assert_true(!"Unsupported ethertype");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(dev && dev->name && dev->path);'), (3, 1, u'+    Assert_true(dev && dev->name && dev->path);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(dev && dev->name && dev->path);'), (3, 1, u'+    Assert_true(dev && dev->name && dev->path);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(dev && dev->name && dev->path);'), (3, 1, u'+    Assert_true(dev && dev->name && dev->path);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("fd00::1", &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("fd00::1", &ss));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: printf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("fd00::1", &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("fd00::1", &ss));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse("fd00::1", &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("fd00::1", &ss));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(r->bytesRead == 128+128+128+512+256+300+128);'), (3, 1, u'+    Assert_true(r->bytesRead == 128+128+128+512+256+300+128);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(r->bytesRead == 128+128+128+512+256+300+128);'), (3, 1, u'+    Assert_true(r->bytesRead == 128+128+128+512+256+300+128);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(r->bytesRead == 128+128+128+512+256+300+128);'), (3, 1, u'+    Assert_true(r->bytesRead == 128+128+128+512+256+300+128);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    #define CMP(x) Assert_always(!Bits_memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x'), (3, 1, u'+    #define CMP(x) Assert_true(!Bits_memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    #define CMP(x) Assert_always(!Bits_memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x'), (3, 1, u'+    #define CMP(x) Assert_true(!Bits_memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    #define CMP(x) Assert_always(!Bits_memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x'), (3, 1, u'+    #define CMP(x) Assert_true(!Bits_memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(allocatedHere == 0);'), (3, 1, u'+        Assert_true(allocatedHere == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: releaseMemory
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(allocatedHere == 0);'), (3, 1, u'+        Assert_true(allocatedHere == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(allocatedHere == 0);'), (3, 1, u'+        Assert_true(allocatedHere == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0);'), (3, 1, u'+    Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: getParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0);'), (3, 1, u'+    Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0);'), (3, 1, u'+    Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(found);'), (3, 1, u'+    Assert_true(found);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: disconnectAdopted
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(found);'), (3, 1, u'+    Assert_true(found);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(found);'), (3, 1, u'+    Assert_true(found);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(found);'), (3, 1, u'+    Assert_true(found);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: disconnectAdopted
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(found);'), (3, 1, u'+    Assert_true(found);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(found);'), (3, 1, u'+    Assert_true(found);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(bytesUsed == ALLOCATION_SIZE + sizeof(struct Allocator_FirstCtx));'), (3, 1, u'+    Assert_true(bytesUsed == ALLOCATION_SIZE + sizeof(struct Allocator_FirstCtx));'), (6, 2, u'-    Assert_always(Allocator_bytesAllocated(alloc) == bytesUsed);'), (7, 1, u'+    Assert_true(Allocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: structureSizes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(bytesUsed == ALLOCATION_SIZE + sizeof(struct Allocator_FirstCtx));'), (3, 1, u'+    Assert_true(bytesUsed == ALLOCATION_SIZE + sizeof(struct Allocator_FirstCtx));'), (6, 2, u'-    Assert_always(Allocator_bytesAllocated(alloc) == bytesUsed);'), (7, 1, u'+    Assert_true(Allocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(bytesUsed == ALLOCATION_SIZE + sizeof(struct Allocator_FirstCtx));'), (3, 1, u'+    Assert_true(bytesUsed == ALLOCATION_SIZE + sizeof(struct Allocator_FirstCtx));'), (6, 2, u'-    Assert_always(Allocator_bytesAllocated(alloc) == bytesUsed);'), (7, 1, u'+    Assert_true(Allocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Allocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_true(Allocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: structureSizes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Allocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_true(Allocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Allocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_true(Allocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Allocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_true(Allocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: structureSizes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Allocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_true(Allocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Allocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_true(Allocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Allocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_true(Allocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: structureSizes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Allocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_true(Allocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Allocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_true(Allocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(requireAuth);'), (3, 1, u'+        Assert_true(requireAuth);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: registerPeer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(requireAuth);'), (3, 1, u'+        Assert_true(requireAuth);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(requireAuth);'), (3, 1, u'+        Assert_true(requireAuth);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(session->ip6, addr.ip6.bytes, 16));'), (3, 1, u'+    Assert_true(!Bits_memcmp(session->ip6, addr.ip6.bytes, 16));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingForMe
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(session->ip6, addr.ip6.bytes, 16));'), (3, 1, u'+    Assert_true(!Bits_memcmp(session->ip6, addr.ip6.bytes, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(session->ip6, addr.ip6.bytes, 16));'), (3, 1, u'+    Assert_true(!Bits_memcmp(session->ip6, addr.ip6.bytes, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(message->length >= Headers_IP6Header_SIZE);'), (3, 1, u'+        Assert_true(message->length >= Headers_IP6Header_SIZE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendToTun
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(message->length >= Headers_IP6Header_SIZE);'), (3, 1, u'+        Assert_true(message->length >= Headers_IP6Header_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(message->length >= Headers_IP6Header_SIZE);'), (3, 1, u'+        Assert_true(message->length >= Headers_IP6Header_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(false);'), (3, 1, u'+            Assert_true(false);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingFromCryptoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(false);'), (3, 1, u'+            Assert_true(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(false);'), (3, 1, u'+            Assert_true(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: outgoingFromCryptoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(false);'), (3, 1, u'+        Assert_true(false);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(false);'), (3, 1, u'+        Assert_true(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(false);'), (3, 1, u'+        Assert_true(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(allocatorsFreed == 1);'), (3, 1, u'+    Assert_true(allocatorsFreed == 1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(allocatorsFreed == 1);'), (3, 1, u'+    Assert_true(allocatorsFreed == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(allocatorsFreed == 1);'), (3, 1, u'+    Assert_true(allocatorsFreed == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(message);'), (3, 2, u'-        Assert_always(message->length == 24);'), (4, 1, u'+        Assert_true(message);'), (5, 1, u'+        Assert_true(message->length == 24);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: reconnectionNewEndpointTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(message);'), (3, 2, u'-        Assert_always(message->length == 24);'), (4, 1, u'+        Assert_true(message);'), (5, 1, u'+        Assert_true(message->length == 24);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(message);'), (3, 2, u'-        Assert_always(message->length == 24);'), (4, 1, u'+        Assert_true(message);'), (5, 1, u'+        Assert_true(message->length == 24);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!CString_strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));'), (3, 1, u'+    Assert_true(!CString_strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: reconnectionNewEndpointTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!CString_strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));'), (3, 1, u'+    Assert_true(!CString_strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!CString_strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));'), (3, 1, u'+    Assert_true(!CString_strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == NumberCompress_getDecompressed(rev_label,'), (3, 1, u'+    Assert_true(0 == NumberCompress_getDecompressed(rev_label,')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: reconnectionNewEndpointTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == NumberCompress_getDecompressed(rev_label,'), (3, 1, u'+    Assert_true(0 == NumberCompress_getDecompressed(rev_label,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == NumberCompress_getDecompressed(rev_label,'), (3, 1, u'+    Assert_true(0 == NumberCompress_getDecompressed(rev_label,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(rev_label == out);'), (3, 1, u'+    Assert_true(rev_label == out);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: reconnectionNewEndpointTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(rev_label == out);'), (3, 1, u'+    Assert_true(rev_label == out);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(rev_label == out);'), (3, 1, u'+    Assert_true(rev_label == out);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(EncodingScheme_isSane(&out->scheme));'), (3, 1, u'+    Assert_true(EncodingScheme_isSane(&out->scheme));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: EncodingScheme_defineFixedWidthScheme
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(EncodingScheme_isSane(&out->scheme));'), (3, 1, u'+    Assert_true(EncodingScheme_isSane(&out->scheme));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(EncodingScheme_isSane(&out->scheme));'), (3, 1, u'+    Assert_true(EncodingScheme_isSane(&out->scheme));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(b);'), (3, 2, u'-    Assert_always(a->count == b->count);'), (4, 2, u'-    Assert_always('), (5, 1, u'+    Assert_true(b);'), (6, 1, u'+    Assert_true(a->count == b->count);'), (7, 1, u'+    Assert_true(')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: assertEqual
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(b);'), (3, 2, u'-    Assert_always(a->count == b->count);'), (4, 2, u'-    Assert_always('), (5, 1, u'+    Assert_true(b);'), (6, 1, u'+    Assert_true(a->count == b->count);'), (7, 1, u'+    Assert_true(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(b);'), (3, 2, u'-    Assert_always(a->count == b->count);'), (4, 2, u'-    Assert_always('), (5, 1, u'+    Assert_true(b);'), (6, 1, u'+    Assert_true(a->count == b->count);'), (7, 1, u'+    Assert_true(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(data->len == 11);'), (3, 2, u'-    Assert_always(!Bits_memcmp(data->bytes, "\\x4f\\xf4\\xff\\x29\\xd9\\xff\\x7f\\x89\\xee\\xff\\x07", 11));'), (4, 1, u'+    Assert_true(data->len == 11);'), (5, 1, u'+    Assert_true(!Bits_memcmp(data->bytes, "\\x4f\\xf4\\xff\\x29\\xd9\\xff\\x7f\\x89\\xee\\xff\\x07", 11));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: encoding
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(data->len == 11);'), (3, 2, u'-    Assert_always(!Bits_memcmp(data->bytes, "\\x4f\\xf4\\xff\\x29\\xd9\\xff\\x7f\\x89\\xee\\xff\\x07", 11));'), (4, 1, u'+    Assert_true(data->len == 11);'), (5, 1, u'+    Assert_true(!Bits_memcmp(data->bytes, "\\x4f\\xf4\\xff\\x29\\xd9\\xff\\x7f\\x89\\xee\\xff\\x07", 11));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(data->len == 11);'), (3, 2, u'-    Assert_always(!Bits_memcmp(data->bytes, "\\x4f\\xf4\\xff\\x29\\xd9\\xff\\x7f\\x89\\xee\\xff\\x07", 11));'), (4, 1, u'+    Assert_true(data->len == 11);'), (5, 1, u'+    Assert_true(!Bits_memcmp(data->bytes, "\\x4f\\xf4\\xff\\x29\\xd9\\xff\\x7f\\x89\\xee\\xff\\x07", 11));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(EncodingScheme_getFormNum(scheme, label) == iformNum);'), (3, 1, u'+    Assert_true(EncodingScheme_getFormNum(scheme, label) == iformNum);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: convertLabel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(EncodingScheme_getFormNum(scheme, label) == iformNum);'), (3, 1, u'+    Assert_true(EncodingScheme_getFormNum(scheme, label) == iformNum);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(EncodingScheme_getFormNum(scheme, label) == iformNum);'), (3, 1, u'+    Assert_true(EncodingScheme_getFormNum(scheme, label) == iformNum);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_true(label2 == EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: convertLabel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_true(label2 == EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_true(label2 == EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_true(label2 == EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: convertLabel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_true(label2 == EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_true(label2 == EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_true(label2 == EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: convertLabel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_true(label2 == EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_true(label2 == EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(label2 == converted);'), (3, 1, u'+    Assert_true(label2 == converted);'), (6, 2, u'-    Assert_always(label3 == label);'), (7, 1, u'+    Assert_true(label3 == label);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: convertLabel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(label2 == converted);'), (3, 1, u'+    Assert_true(label2 == converted);'), (6, 2, u'-    Assert_always(label3 == label);'), (7, 1, u'+    Assert_true(label3 == label);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(label2 == converted);'), (3, 1, u'+    Assert_true(label2 == converted);'), (6, 2, u'-    Assert_always(label3 == label);'), (7, 1, u'+    Assert_true(label3 == label);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(EncodingScheme_getFormNum(scheme, label) == iformNum);'), (3, 1, u'+            Assert_true(EncodingScheme_getFormNum(scheme, label) == iformNum);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: convertLabelRand
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(EncodingScheme_getFormNum(scheme, label) == iformNum);'), (3, 1, u'+            Assert_true(EncodingScheme_getFormNum(scheme, label) == iformNum);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(EncodingScheme_getFormNum(scheme, label) == iformNum);'), (3, 1, u'+            Assert_true(EncodingScheme_getFormNum(scheme, label) == iformNum);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_always(0);'), (3, 1, u'+                    Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: convertLabelRand
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_always(0);'), (3, 1, u'+                    Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_always(0);'), (3, 1, u'+                    Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0x13 == LabelSplicer_unsplice(0x13, 1));'), (3, 1, u'+    Assert_true(0x13 == LabelSplicer_unsplice(0x13, 1));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: unsplice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0x13 == LabelSplicer_unsplice(0x13, 1));'), (3, 1, u'+    Assert_true(0x13 == LabelSplicer_unsplice(0x13, 1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0x13 == LabelSplicer_unsplice(0x13, 1));'), (3, 1, u'+    Assert_true(0x13 == LabelSplicer_unsplice(0x13, 1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(expected == out);'), (3, 1, u'+    Assert_true(expected == out);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: splice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(expected == out);'), (3, 1, u'+    Assert_true(expected == out);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(expected == out);'), (3, 1, u'+    Assert_true(expected == out);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(LabelSplicer_isOneHop(routeToInterface(0)));'), (3, 1, u'+    Assert_true(LabelSplicer_isOneHop(routeToInterface(0)));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: isOneHop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(LabelSplicer_isOneHop(routeToInterface(0)));'), (3, 1, u'+    Assert_true(LabelSplicer_isOneHop(routeToInterface(0)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(LabelSplicer_isOneHop(routeToInterface(0)));'), (3, 1, u'+    Assert_true(LabelSplicer_isOneHop(routeToInterface(0)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!LabelSplicer_routesThrough(dest, mid));'), (3, 1, u'+    Assert_true(!LabelSplicer_routesThrough(dest, mid));'), (5, 2, u'-    Assert_always(LabelSplicer_routesThrough(dest, 1));'), (6, 1, u'+    Assert_true(LabelSplicer_routesThrough(dest, 1));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: routesThrough
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!LabelSplicer_routesThrough(dest, mid));'), (3, 1, u'+    Assert_true(!LabelSplicer_routesThrough(dest, mid));'), (5, 2, u'-    Assert_always(LabelSplicer_routesThrough(dest, 1));'), (6, 1, u'+    Assert_true(LabelSplicer_routesThrough(dest, 1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!LabelSplicer_routesThrough(dest, mid));'), (3, 1, u'+    Assert_true(!LabelSplicer_routesThrough(dest, mid));'), (5, 2, u'-    Assert_always(LabelSplicer_routesThrough(dest, 1));'), (6, 1, u'+    Assert_true(LabelSplicer_routesThrough(dest, 1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(1 == label);'), (3, 1, u'+                Assert_true(1 == label);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: numberCompressions_generic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(1 == label);'), (3, 1, u'+                Assert_true(1 == label);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(1 == label);'), (3, 1, u'+                Assert_true(1 == label);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(bits == bitsUsedForLabel(label));'), (3, 2, u'-            Assert_always(i == getDecompressed(label, bits));'), (4, 1, u'+            Assert_true(bits == bitsUsedForLabel(label));'), (5, 1, u'+            Assert_true(i == getDecompressed(label, bits));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: numberCompressions_generic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(bits == bitsUsedForLabel(label));'), (3, 2, u'-            Assert_always(i == getDecompressed(label, bits));'), (4, 1, u'+            Assert_true(bits == bitsUsedForLabel(label));'), (5, 1, u'+            Assert_true(i == getDecompressed(label, bits));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(bits == bitsUsedForLabel(label));'), (3, 2, u'-            Assert_always(i == getDecompressed(label, bits));'), (4, 1, u'+            Assert_true(bits == bitsUsedForLabel(label));'), (5, 1, u'+            Assert_true(i == getDecompressed(label, bits));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(1 == bitWidths[bits]);'), (3, 1, u'+        Assert_true(1 == bitWidths[bits]);'), (6, 2, u'-            Assert_always(1 == getDecompressed(label, bits));'), (8, 1, u'+            Assert_true(1 == getDecompressed(label, bits));'), (11, 2, u'-            Assert_always(i < nInterfaces);'), (12, 1, u'+            Assert_true(i < nInterfaces);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: numberCompressions_generic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(1 == bitWidths[bits]);'), (3, 1, u'+        Assert_true(1 == bitWidths[bits]);'), (6, 2, u'-            Assert_always(1 == getDecompressed(label, bits));'), (8, 1, u'+            Assert_true(1 == getDecompressed(label, bits));'), (11, 2, u'-            Assert_always(i < nInterfaces);'), (12, 1, u'+            Assert_true(i < nInterfaces);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(1 == bitWidths[bits]);'), (3, 1, u'+        Assert_true(1 == bitWidths[bits]);'), (6, 2, u'-            Assert_always(1 == getDecompressed(label, bits));'), (8, 1, u'+            Assert_true(1 == getDecompressed(label, bits));'), (11, 2, u'-            Assert_always(i < nInterfaces);'), (12, 1, u'+            Assert_true(i < nInterfaces);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == Bits_memcmp(address.key, publicKey, 32));'), (3, 2, u'-    Assert_always(0 == CString_strcmp(publicKeyBase32, (char*) publicKeyBase32Out));'), (4, 2, u'-    Assert_always(0 == CString_strcmp(ipv6, (char*) addressOut));'), (5, 1, u'+    Assert_true(0 == Bits_memcmp(address.key, publicKey, 32));'), (6, 1, u'+    Assert_true(0 == CString_strcmp(publicKeyBase32, (char*) publicKeyBase32Out));'), (7, 1, u'+    Assert_true(0 == CString_strcmp(ipv6, (char*) addressOut));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == Bits_memcmp(address.key, publicKey, 32));'), (3, 2, u'-    Assert_always(0 == CString_strcmp(publicKeyBase32, (char*) publicKeyBase32Out));'), (4, 2, u'-    Assert_always(0 == CString_strcmp(ipv6, (char*) addressOut));'), (5, 1, u'+    Assert_true(0 == Bits_memcmp(address.key, publicKey, 32));'), (6, 1, u'+    Assert_true(0 == CString_strcmp(publicKeyBase32, (char*) publicKeyBase32Out));'), (7, 1, u'+    Assert_true(0 == CString_strcmp(ipv6, (char*) addressOut));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == Bits_memcmp(address.key, publicKey, 32));'), (3, 2, u'-    Assert_always(0 == CString_strcmp(publicKeyBase32, (char*) publicKeyBase32Out));'), (4, 2, u'-    Assert_always(0 == CString_strcmp(ipv6, (char*) addressOut));'), (5, 1, u'+    Assert_true(0 == Bits_memcmp(address.key, publicKey, 32));'), (6, 1, u'+    Assert_true(0 == CString_strcmp(publicKeyBase32, (char*) publicKeyBase32Out));'), (7, 1, u'+    Assert_true(0 == CString_strcmp(ipv6, (char*) addressOut));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(false);'), (3, 1, u'+        Assert_true(false);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendTo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(false);'), (3, 1, u'+        Assert_true(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(false);'), (3, 1, u'+        Assert_true(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(a->length == b->length);'), (3, 2, u'-    Assert_always(a->padding == b->padding);'), (4, 2, u'-    Assert_always(!Bits_memcmp(a->bytes, b->bytes, a->length));'), (5, 1, u'+    Assert_true(a->length == b->length);'), (6, 1, u'+    Assert_true(a->padding == b->padding);'), (7, 1, u'+    Assert_true(!Bits_memcmp(a->bytes, b->bytes, a->length));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TestFramework_assertLastMessageUnaltered
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(a->length == b->length);'), (3, 2, u'-    Assert_always(a->padding == b->padding);'), (4, 2, u'-    Assert_always(!Bits_memcmp(a->bytes, b->bytes, a->length));'), (5, 1, u'+    Assert_true(a->length == b->length);'), (6, 1, u'+    Assert_true(a->padding == b->padding);'), (7, 1, u'+    Assert_true(!Bits_memcmp(a->bytes, b->bytes, a->length));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(a->length == b->length);'), (3, 2, u'-    Assert_always(a->padding == b->padding);'), (4, 2, u'-    Assert_always(!Bits_memcmp(a->bytes, b->bytes, a->length));'), (5, 1, u'+    Assert_true(a->length == b->length);'), (6, 1, u'+    Assert_true(a->padding == b->padding);'), (7, 1, u'+    Assert_true(!Bits_memcmp(a->bytes, b->bytes, a->length));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!dt->switchInterface.receiverContext);'), (3, 1, u'+    Assert_true(!dt->switchInterface.receiverContext);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: return 0; // TODO make this work again
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!dt->switchInterface.receiverContext);'), (3, 1, u'+    Assert_true(!dt->switchInterface.receiverContext);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!dt->switchInterface.receiverContext);'), (3, 1, u'+    Assert_true(!dt->switchInterface.receiverContext);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!dt->switchInterface.receiverContext);'), (3, 1, u'+    Assert_true(!dt->switchInterface.receiverContext);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: return 0; // TODO make this work again
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!dt->switchInterface.receiverContext);'), (3, 1, u'+    Assert_true(!dt->switchInterface.receiverContext);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!dt->switchInterface.receiverContext);'), (3, 1, u'+    Assert_true(!dt->switchInterface.receiverContext);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(dt->switchInterface.receiverContext);'), (3, 1, u'+    Assert_true(dt->switchInterface.receiverContext);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: return 0; // TODO make this work again
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(dt->switchInterface.receiverContext);'), (3, 1, u'+    Assert_true(dt->switchInterface.receiverContext);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(dt->switchInterface.receiverContext);'), (3, 1, u'+    Assert_true(dt->switchInterface.receiverContext);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!test(argc, argv));'), (3, 1, u'+    Assert_true(!test(argc, argv));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: runTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!test(argc, argv));'), (3, 1, u'+    Assert_true(!test(argc, argv));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!test(argc, argv));'), (3, 1, u'+    Assert_true(!test(argc, argv));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(argc > 0);'), (3, 1, u'+        Assert_true(argc > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(argc > 0);'), (3, 1, u'+        Assert_true(argc > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(argc > 0);'), (3, 1, u'+        Assert_true(argc > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingTunC
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingTunB
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingTunA
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(false);'), (3, 1, u'+        Assert_true(false);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(false);'), (3, 1, u'+        Assert_true(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(false);'), (3, 1, u'+        Assert_true(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(tn->messageFrom == TUNA);'), (3, 1, u'+        Assert_true(tn->messageFrom == TUNA);'), (5, 2, u'-        Assert_always(tn->messageFrom == TUNB);'), (6, 1, u'+        Assert_true(tn->messageFrom == TUNB);'), (8, 2, u'-        Assert_always(tn->messageFrom == TUNC);'), (9, 1, u'+        Assert_true(tn->messageFrom == TUNC);'), (11, 2, u'-        Assert_always(false);'), (12, 1, u'+        Assert_true(false);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(tn->messageFrom == TUNA);'), (3, 1, u'+        Assert_true(tn->messageFrom == TUNA);'), (5, 2, u'-        Assert_always(tn->messageFrom == TUNB);'), (6, 1, u'+        Assert_true(tn->messageFrom == TUNB);'), (8, 2, u'-        Assert_always(tn->messageFrom == TUNC);'), (9, 1, u'+        Assert_true(tn->messageFrom == TUNC);'), (11, 2, u'-        Assert_always(false);'), (12, 1, u'+        Assert_true(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(tn->messageFrom == TUNA);'), (3, 1, u'+        Assert_true(tn->messageFrom == TUNA);'), (5, 2, u'-        Assert_always(tn->messageFrom == TUNB);'), (6, 1, u'+        Assert_true(tn->messageFrom == TUNB);'), (8, 2, u'-        Assert_always(tn->messageFrom == TUNC);'), (9, 1, u'+        Assert_true(tn->messageFrom == TUNC);'), (11, 2, u'-        Assert_always(false);'), (12, 1, u'+        Assert_true(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(16 == Sockaddr_getAddress(addr, &address));'), (3, 1, u'+        Assert_true(16 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: showConn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(16 == Sockaddr_getAddress(addr, &address));'), (3, 1, u'+        Assert_true(16 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(16 == Sockaddr_getAddress(addr, &address));'), (3, 1, u'+        Assert_true(16 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(4 == Sockaddr_getAddress(addr, &address));'), (3, 1, u'+        Assert_true(4 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: showConn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(4 == Sockaddr_getAddress(addr, &address));'), (3, 1, u'+        Assert_true(4 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(4 == Sockaddr_getAddress(addr, &address));'), (3, 1, u'+        Assert_true(4 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(nodeCjdnsIp6, pi->nodeIp6Addr, 16));'), (3, 2, u'-    Assert_always(!Bits_memcmp(fakePubKey, pi->nodeKey, 32));'), (4, 1, u'+    Assert_true(!Bits_memcmp(nodeCjdnsIp6, pi->nodeIp6Addr, 16));'), (5, 1, u'+    Assert_true(!Bits_memcmp(fakePubKey, pi->nodeKey, 32));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: responseWithIpCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(nodeCjdnsIp6, pi->nodeIp6Addr, 16));'), (3, 2, u'-    Assert_always(!Bits_memcmp(fakePubKey, pi->nodeKey, 32));'), (4, 1, u'+    Assert_true(!Bits_memcmp(nodeCjdnsIp6, pi->nodeIp6Addr, 16));'), (5, 1, u'+    Assert_true(!Bits_memcmp(fakePubKey, pi->nodeKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(nodeCjdnsIp6, pi->nodeIp6Addr, 16));'), (3, 2, u'-    Assert_always(!Bits_memcmp(fakePubKey, pi->nodeKey, 32));'), (4, 1, u'+    Assert_true(!Bits_memcmp(nodeCjdnsIp6, pi->nodeIp6Addr, 16));'), (5, 1, u'+    Assert_true(!Bits_memcmp(fakePubKey, pi->nodeKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Headers_getIpVersion(ip) == 6);'), (3, 1, u'+    Assert_true(Headers_getIpVersion(ip) == 6);'), (5, 2, u'-    Assert_always(length + Headers_IP6Header_SIZE == message->length);'), (6, 2, u'-    Assert_always(ip->nextHeader == 17);'), (7, 2, u'-    Assert_always(Bits_isZero(ip->sourceAddr, 32));'), (8, 1, u'+    Assert_true(length + Headers_IP6Header_SIZE == message->length);'), (9, 1, u'+    Assert_true(ip->nextHeader == 17);'), (10, 1, u'+    Assert_true(Bits_isZero(ip->sourceAddr, 32));')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: responseWithIpCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Headers_getIpVersion(ip) == 6);'), (3, 1, u'+    Assert_true(Headers_getIpVersion(ip) == 6);'), (5, 2, u'-    Assert_always(length + Headers_IP6Header_SIZE == message->length);'), (6, 2, u'-    Assert_always(ip->nextHeader == 17);'), (7, 2, u'-    Assert_always(Bits_isZero(ip->sourceAddr, 32));'), (8, 1, u'+    Assert_true(length + Headers_IP6Header_SIZE == message->length);'), (9, 1, u'+    Assert_true(ip->nextHeader == 17);'), (10, 1, u'+    Assert_true(Bits_isZero(ip->sourceAddr, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Headers_getIpVersion(ip) == 6);'), (3, 1, u'+    Assert_true(Headers_getIpVersion(ip) == 6);'), (5, 2, u'-    Assert_always(length + Headers_IP6Header_SIZE == message->length);'), (6, 2, u'-    Assert_always(ip->nextHeader == 17);'), (7, 2, u'-    Assert_always(Bits_isZero(ip->sourceAddr, 32));'), (8, 1, u'+    Assert_true(length + Headers_IP6Header_SIZE == message->length);'), (9, 1, u'+    Assert_true(ip->nextHeader == 17);'), (10, 1, u'+    Assert_true(Bits_isZero(ip->sourceAddr, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Checksum_udpIp6(ip->sourceAddr, message->bytes, length));'), (3, 1, u'+    Assert_true(!Checksum_udpIp6(ip->sourceAddr, message->bytes, length));'), (5, 2, u'-    Assert_always(uh->srcPort_be == 0);'), (6, 2, u'-    Assert_always(uh->destPort_be == 0);'), (7, 2, u'-    Assert_always(Endian_bigEndianToHost16(uh->length_be) + Headers_UDPHeader_SIZE == length);'), (8, 1, u'+    Assert_true(uh->srcPort_be == 0);'), (9, 1, u'+    Assert_true(uh->destPort_be == 0);'), (10, 1, u'+    Assert_true(Endian_bigEndianToHost16(uh->length_be) + Headers_UDPHeader_SIZE == length);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: responseWithIpCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Checksum_udpIp6(ip->sourceAddr, message->bytes, length));'), (3, 1, u'+    Assert_true(!Checksum_udpIp6(ip->sourceAddr, message->bytes, length));'), (5, 2, u'-    Assert_always(uh->srcPort_be == 0);'), (6, 2, u'-    Assert_always(uh->destPort_be == 0);'), (7, 2, u'-    Assert_always(Endian_bigEndianToHost16(uh->length_be) + Headers_UDPHeader_SIZE == length);'), (8, 1, u'+    Assert_true(uh->srcPort_be == 0);'), (9, 1, u'+    Assert_true(uh->destPort_be == 0);'), (10, 1, u'+    Assert_true(Endian_bigEndianToHost16(uh->length_be) + Headers_UDPHeader_SIZE == length);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Checksum_udpIp6(ip->sourceAddr, message->bytes, length));'), (3, 1, u'+    Assert_true(!Checksum_udpIp6(ip->sourceAddr, message->bytes, length));'), (5, 2, u'-    Assert_always(uh->srcPort_be == 0);'), (6, 2, u'-    Assert_always(uh->destPort_be == 0);'), (7, 2, u'-    Assert_always(Endian_bigEndianToHost16(uh->length_be) + Headers_UDPHeader_SIZE == length);'), (8, 1, u'+    Assert_true(uh->srcPort_be == 0);'), (9, 1, u'+    Assert_true(uh->destPort_be == 0);'), (10, 1, u'+    Assert_true(Endian_bigEndianToHost16(uh->length_be) + Headers_UDPHeader_SIZE == length);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(message->length == (int32_t) strlen(expectedResponse));'), (3, 2, u'-    Assert_always(!Bits_memcmp(message->bytes, expectedResponse, message->length));'), (4, 1, u'+    Assert_true(message->length == (int32_t) strlen(expectedResponse));'), (5, 1, u'+    Assert_true(!Bits_memcmp(message->bytes, expectedResponse, message->length));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: responseWithIpCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(message->length == (int32_t) strlen(expectedResponse));'), (3, 2, u'-    Assert_always(!Bits_memcmp(message->bytes, expectedResponse, message->length));'), (4, 1, u'+    Assert_true(message->length == (int32_t) strlen(expectedResponse));'), (5, 1, u'+    Assert_true(!Bits_memcmp(message->bytes, expectedResponse, message->length));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(message->length == (int32_t) strlen(expectedResponse));'), (3, 2, u'-    Assert_always(!Bits_memcmp(message->bytes, expectedResponse, message->length));'), (4, 1, u'+    Assert_true(message->length == (int32_t) strlen(expectedResponse));'), (5, 1, u'+    Assert_true(!Bits_memcmp(message->bytes, expectedResponse, message->length));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);'), (5, 2, u'-    Assert_always(Headers_getIpVersion(ip) == 6);'), (6, 1, u'+    Assert_true(Headers_getIpVersion(ip) == 6);'), (8, 2, u'-    Assert_always(length + Headers_IP6Header_SIZE == message->length);'), (9, 2, u'-    Assert_always(ip->nextHeader == 17);'), (10, 2, u'-    Assert_always(!Bits_memcmp(ip->sourceAddr, fakeIp6ToGive, 16));'), (11, 1, u'+    Assert_true(length + Headers_IP6Header_SIZE == message->length);'), (12, 1, u'+    Assert_true(ip->nextHeader == 17);'), (13, 1, u'+    Assert_true(!Bits_memcmp(ip->sourceAddr, fakeIp6ToGive, 16));')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: messageToTun
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);'), (5, 2, u'-    Assert_always(Headers_getIpVersion(ip) == 6);'), (6, 1, u'+    Assert_true(Headers_getIpVersion(ip) == 6);'), (8, 2, u'-    Assert_always(length + Headers_IP6Header_SIZE == message->length);'), (9, 2, u'-    Assert_always(ip->nextHeader == 17);'), (10, 2, u'-    Assert_always(!Bits_memcmp(ip->sourceAddr, fakeIp6ToGive, 16));'), (11, 1, u'+    Assert_true(length + Headers_IP6Header_SIZE == message->length);'), (12, 1, u'+    Assert_true(ip->nextHeader == 17);'), (13, 1, u'+    Assert_true(!Bits_memcmp(ip->sourceAddr, fakeIp6ToGive, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);'), (5, 2, u'-    Assert_always(Headers_getIpVersion(ip) == 6);'), (6, 1, u'+    Assert_true(Headers_getIpVersion(ip) == 6);'), (8, 2, u'-    Assert_always(length + Headers_IP6Header_SIZE == message->length);'), (9, 2, u'-    Assert_always(ip->nextHeader == 17);'), (10, 2, u'-    Assert_always(!Bits_memcmp(ip->sourceAddr, fakeIp6ToGive, 16));'), (11, 1, u'+    Assert_true(length + Headers_IP6Header_SIZE == message->length);'), (12, 1, u'+    Assert_true(ip->nextHeader == 17);'), (13, 1, u'+    Assert_true(!Bits_memcmp(ip->sourceAddr, fakeIp6ToGive, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(called);'), (3, 1, u'+    Assert_true(called);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(called);'), (3, 1, u'+    Assert_true(called);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(called);'), (3, 1, u'+    Assert_true(called);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(called);'), (3, 1, u'+    Assert_true(called);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(called);'), (3, 1, u'+    Assert_true(called);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(called);'), (3, 1, u'+    Assert_true(called);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!ctx->running); // double begin'), (3, 1, u'+    Assert_true(!ctx->running); // double begin')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: EventBase_beginLoop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!ctx->running); // double begin'), (3, 1, u'+    Assert_true(!ctx->running); // double begin')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!ctx->running); // double begin'), (3, 1, u'+    Assert_true(!ctx->running); // double begin')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(base->faker);'), (3, 1, u'+    Assert_true(base->faker);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: FakeUDPAddrInterface_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(base->faker);'), (3, 1, u'+    Assert_true(base->faker);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(base->faker);'), (3, 1, u'+    Assert_true(base->faker);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NetPlatform_addAddress
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NetPlatform_addAddress
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NetPlatform_addAddress
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NetPlatform_addAddress
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NetPlatform_addAddress
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NetPlatform_addAddress
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0);'), (3, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Sockaddr_parse(address, &ss));'), (3, 1, u'+    Assert_true(Sockaddr_parse(address, &ss));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: expectFailure
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Sockaddr_parse(address, &ss));'), (3, 1, u'+    Assert_true(Sockaddr_parse(address, &ss));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Sockaddr_parse(address, &ss));'), (3, 1, u'+    Assert_true(Sockaddr_parse(address, &ss));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse(address, &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse(address, &ss));'), (6, 2, u'-    Assert_always(outAddr);'), (7, 2, u'-    Assert_always(strlen(outAddr) == strlen(expectedOutput));'), (8, 2, u'-    Assert_always(!strcmp(outAddr, expectedOutput));'), (9, 1, u'+    Assert_true(outAddr);'), (10, 1, u'+    Assert_true(strlen(outAddr) == strlen(expectedOutput));'), (11, 1, u'+    Assert_true(!strcmp(outAddr, expectedOutput));')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: expectConvert
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse(address, &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse(address, &ss));'), (6, 2, u'-    Assert_always(outAddr);'), (7, 2, u'-    Assert_always(strlen(outAddr) == strlen(expectedOutput));'), (8, 2, u'-    Assert_always(!strcmp(outAddr, expectedOutput));'), (9, 1, u'+    Assert_true(outAddr);'), (10, 1, u'+    Assert_true(strlen(outAddr) == strlen(expectedOutput));'), (11, 1, u'+    Assert_true(!strcmp(outAddr, expectedOutput));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Sockaddr_parse(address, &ss));'), (3, 1, u'+    Assert_true(!Sockaddr_parse(address, &ss));'), (6, 2, u'-    Assert_always(outAddr);'), (7, 2, u'-    Assert_always(strlen(outAddr) == strlen(expectedOutput));'), (8, 2, u'-    Assert_always(!strcmp(outAddr, expectedOutput));'), (9, 1, u'+    Assert_true(outAddr);'), (10, 1, u'+    Assert_true(strlen(outAddr) == strlen(expectedOutput));'), (11, 1, u'+    Assert_true(!strcmp(outAddr, expectedOutput));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Sockaddr_asNative(&test.addr) == ((uint8_t*)&test) + Sockaddr_OVERHEAD);'), (3, 1, u'+    Assert_true(Sockaddr_asNative(&test.addr) == ((uint8_t*)&test) + Sockaddr_OVERHEAD);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: parse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Sockaddr_asNative(&test.addr) == ((uint8_t*)&test) + Sockaddr_OVERHEAD);'), (3, 1, u'+    Assert_true(Sockaddr_asNative(&test.addr) == ((uint8_t*)&test) + Sockaddr_OVERHEAD);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Sockaddr_asNative(&test.addr) == ((uint8_t*)&test) + Sockaddr_OVERHEAD);'), (3, 1, u'+    Assert_true(Sockaddr_asNative(&test.addr) == ((uint8_t*)&test) + Sockaddr_OVERHEAD);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!AddrTools_parseIp(out, (uint8_t*)"[::1]"));'), (3, 2, u'-    Assert_always(!Bits_memcmp(out, (uint8_t*)"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1", 16));'), (4, 1, u'+    Assert_true(!AddrTools_parseIp(out, (uint8_t*)"[::1]"));'), (5, 1, u'+    Assert_true(!Bits_memcmp(out, (uint8_t*)"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1", 16));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!AddrTools_parseIp(out, (uint8_t*)"[::1]"));'), (3, 2, u'-    Assert_always(!Bits_memcmp(out, (uint8_t*)"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1", 16));'), (4, 1, u'+    Assert_true(!AddrTools_parseIp(out, (uint8_t*)"[::1]"));'), (5, 1, u'+    Assert_true(!Bits_memcmp(out, (uint8_t*)"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1", 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!AddrTools_parseIp(out, (uint8_t*)"[::1]"));'), (3, 2, u'-    Assert_always(!Bits_memcmp(out, (uint8_t*)"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1", 16));'), (4, 1, u'+    Assert_true(!AddrTools_parseIp(out, (uint8_t*)"[::1]"));'), (5, 1, u'+    Assert_true(!Bits_memcmp(out, (uint8_t*)"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1", 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Base32_encode(base32, 64, bytes, 32) == 52);'), (3, 1, u'+    Assert_true(Base32_encode(base32, 64, bytes, 32) == 52);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Base32_encode(base32, 64, bytes, 32) == 52);'), (3, 1, u'+    Assert_true(Base32_encode(base32, 64, bytes, 32) == 52);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Base32_encode(base32, 64, bytes, 32) == 52);'), (3, 1, u'+    Assert_true(Base32_encode(base32, 64, bytes, 32) == 52);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Base32_decode(bytes2, 32, base32, 52) == 32);'), (3, 1, u'+    Assert_true(Base32_decode(bytes2, 32, base32, 52) == 32);'), (5, 2, u'-    Assert_always(Bits_memcmp(bytes, bytes2, 32) == 0);'), (6, 1, u'+    Assert_true(Bits_memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Base32_decode(bytes2, 32, base32, 52) == 32);'), (3, 1, u'+    Assert_true(Base32_decode(bytes2, 32, base32, 52) == 32);'), (5, 2, u'-    Assert_always(Bits_memcmp(bytes, bytes2, 32) == 0);'), (6, 1, u'+    Assert_true(Bits_memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Base32_decode(bytes2, 32, base32, 52) == 32);'), (3, 1, u'+    Assert_true(Base32_decode(bytes2, 32, base32, 52) == 32);'), (5, 2, u'-    Assert_always(Bits_memcmp(bytes, bytes2, 32) == 0);'), (6, 1, u'+    Assert_true(Bits_memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_log2x64(1)==0);'), (3, 1, u'+    Assert_true(Bits_log2x64(1)==0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_log2x64(1)==0);'), (3, 1, u'+    Assert_true(Bits_log2x64(1)==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_log2x64(1)==0);'), (3, 1, u'+    Assert_true(Bits_log2x64(1)==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_bitReverse64(Bits_bitReverse64(x)) == x);'), (3, 2, u'-    Assert_always('), (4, 1, u'+    Assert_true(Bits_bitReverse64(Bits_bitReverse64(x)) == x);'), (5, 1, u'+    Assert_true('), (7, 2, u'-    Assert_always(Bits_bitReverse64(1) == ((uint64_t)1)<<63);'), (8, 2, u'-    Assert_always(Bits_bitReverse64(0) == 0);'), (9, 1, u'+    Assert_true(Bits_bitReverse64(1) == ((uint64_t)1)<<63);'), (10, 1, u'+    Assert_true(Bits_bitReverse64(0) == 0);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_bitReverse64(Bits_bitReverse64(x)) == x);'), (3, 2, u'-    Assert_always('), (4, 1, u'+    Assert_true(Bits_bitReverse64(Bits_bitReverse64(x)) == x);'), (5, 1, u'+    Assert_true('), (7, 2, u'-    Assert_always(Bits_bitReverse64(1) == ((uint64_t)1)<<63);'), (8, 2, u'-    Assert_always(Bits_bitReverse64(0) == 0);'), (9, 1, u'+    Assert_true(Bits_bitReverse64(1) == ((uint64_t)1)<<63);'), (10, 1, u'+    Assert_true(Bits_bitReverse64(0) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_bitReverse64(Bits_bitReverse64(x)) == x);'), (3, 2, u'-    Assert_always('), (4, 1, u'+    Assert_true(Bits_bitReverse64(Bits_bitReverse64(x)) == x);'), (5, 1, u'+    Assert_true('), (7, 2, u'-    Assert_always(Bits_bitReverse64(1) == ((uint64_t)1)<<63);'), (8, 2, u'-    Assert_always(Bits_bitReverse64(0) == 0);'), (9, 1, u'+    Assert_true(Bits_bitReverse64(1) == ((uint64_t)1)<<63);'), (10, 1, u'+    Assert_true(Bits_bitReverse64(0) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(checksum == calcatedSum);'), (3, 1, u'+    Assert_true(checksum == calcatedSum);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: checksumAlgorithmTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(checksum == calcatedSum);'), (3, 1, u'+    Assert_true(checksum == calcatedSum);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(checksum == calcatedSum);'), (3, 1, u'+    Assert_true(checksum == calcatedSum);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(udp6Checksum == calcatedSum);'), (3, 1, u'+    Assert_true(udp6Checksum == calcatedSum);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: udp6ChecksumTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(udp6Checksum == calcatedSum);'), (3, 1, u'+    Assert_true(udp6Checksum == calcatedSum);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(udp6Checksum == calcatedSum);'), (3, 1, u'+    Assert_true(udp6Checksum == calcatedSum);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(checksum == calcatedSum);'), (3, 1, u'+    Assert_true(checksum == calcatedSum);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: icmp6ChecksumTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(checksum == calcatedSum);'), (3, 1, u'+    Assert_true(checksum == calcatedSum);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(checksum == calcatedSum);'), (3, 1, u'+    Assert_true(checksum == calcatedSum);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(c == Endian_bigEndianToHost16(sc));'), (3, 2, u'-        Assert_always(c == Endian_hostToBigEndian16(sc));'), (4, 2, u'-        Assert_always(c == Endian_hostToLittleEndian16(c));'), (5, 2, u'-        Assert_always(c == Endian_hostToLittleEndian16(c));'), (6, 1, u'+        Assert_true(c == Endian_bigEndianToHost16(sc));'), (7, 1, u'+        Assert_true(c == Endian_hostToBigEndian16(sc));'), (8, 1, u'+        Assert_true(c == Endian_hostToLittleEndian16(c));'), (9, 1, u'+        Assert_true(c == Endian_hostToLittleEndian16(c));'), (11, 2, u'-        Assert_always(a == Endian_bigEndianToHost32(sa));'), (12, 2, u'-        Assert_always(a == Endian_hostToBigEndian32(sa));'), (13, 2, u'-        Assert_always(a == Endian_hostToLittleEndian32(a));'), (14, 2, u'-        Assert_always(a == Endian_hostToLittleEndian32(a));'), (15, 1, u'+        Assert_true(a == Endian_bigEndianToHost32(sa));'), (16, 1, u'+        Assert_true(a == Endian_hostToBigEndian32(sa));'), (17, 1, u'+        Assert_true(a == Endian_hostToLittleEndian32(a));'), (18, 1, u'+        Assert_true(a == Endian_hostToLittleEndian32(a));'), (20, 2, u'-        Assert_always(b == Endian_bigEndianToHost64(sb));'), (21, 2, u'-        Assert_always(b == Endian_hostToBigEndian64(sb));'), (22, 2, u'-        Assert_always(b == Endian_hostToLittleEndian64(b));'), (23, 2, u'-        Assert_always(b == Endian_hostToLittleEndian64(b));'), (24, 1, u'+        Assert_true(b == Endian_bigEndianToHost64(sb));'), (25, 1, u'+        Assert_true(b == Endian_hostToBigEndian64(sb));'), (26, 1, u'+        Assert_true(b == Endian_hostToLittleEndian64(b));'), (27, 1, u'+        Assert_true(b == Endian_hostToLittleEndian64(b));'), (29, 2, u'-        Assert_always(c == Endian_bigEndianToHost16(c));'), (30, 2, u'-        Assert_always(c == Endian_hostToBigEndian16(c));'), (31, 2, u'-        Assert_always(c == Endian_hostToLittleEndian16(sc));'), (32, 2, u'-        Assert_always(c == Endian_hostToLittleEndian16(sc));'), (33, 1, u'+        Assert_true(c == Endian_bigEndianToHost16(c));'), (34, 1, u'+        Assert_true(c == Endian_hostToBigEndian16(c));'), (35, 1, u'+        Assert_true(c == Endian_hostToLittleEndian16(sc));'), (36, 1, u'+        Assert_true(c == Endian_hostToLittleEndian16(sc));'), (38, 2, u'-        Assert_always(a == Endian_bigEndianToHost32(a));'), (39, 2, u'-        Assert_always(a == Endian_hostToBigEndian32(a));'), (40, 2, u'-        Assert_always(a == Endian_hostToLittleEndian32(sa));'), (41, 2, u'-        Assert_always(a == Endian_hostToLittleEndian32(sa));'), (42, 1, u'+        Assert_true(a == Endian_bigEndianToHost32(a));'), (43, 1, u'+        Assert_true(a == Endian_hostToBigEndian32(a));'), (44, 1, u'+        Assert_true(a == Endian_hostToLittleEndian32(sa));'), (45, 1, u'+        Assert_true(a == Endian_hostToLittleEndian32(sa));'), (47, 2, u'-        Assert_always(b == Endian_bigEndianToHost64(b));'), (48, 2, u'-        Assert_always(b == Endian_hostToBigEndian64(b));'), (49, 2, u'-        Assert_always(b == Endian_hostToLittleEndian64(sb));'), (50, 2, u'-        Assert_always(b == Endian_hostToLittleEndian64(sb));'), (51, 1, u'+        Assert_true(b == Endian_bigEndianToHost64(b));'), (52, 1, u'+        Assert_true(b == Endian_hostToBigEndian64(b));'), (53, 1, u'+        Assert_true(b == Endian_hostToLittleEndian64(sb));'), (54, 1, u'+        Assert_true(b == Endian_hostToLittleEndian64(sb));'), (57, 2, u'-    Assert_always(b == Endian_byteSwap64(sb));'), (58, 2, u'-    Assert_always(a == Endian_byteSwap32(sa));'), (59, 2, u'-    Assert_always(c == Endian_byteSwap16(sc));'), (60, 1, u'+    Assert_true(b == Endian_byteSwap64(sb));'), (61, 1, u'+    Assert_true(a == Endian_byteSwap32(sa));'), (62, 1, u'+    Assert_true(c == Endian_byteSwap16(sc));')]
===========================================
===========================================
Total add: 27
Total del: 27
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(c == Endian_bigEndianToHost16(sc));'), (3, 2, u'-        Assert_always(c == Endian_hostToBigEndian16(sc));'), (4, 2, u'-        Assert_always(c == Endian_hostToLittleEndian16(c));'), (5, 2, u'-        Assert_always(c == Endian_hostToLittleEndian16(c));'), (6, 1, u'+        Assert_true(c == Endian_bigEndianToHost16(sc));'), (7, 1, u'+        Assert_true(c == Endian_hostToBigEndian16(sc));'), (8, 1, u'+        Assert_true(c == Endian_hostToLittleEndian16(c));'), (9, 1, u'+        Assert_true(c == Endian_hostToLittleEndian16(c));'), (11, 2, u'-        Assert_always(a == Endian_bigEndianToHost32(sa));'), (12, 2, u'-        Assert_always(a == Endian_hostToBigEndian32(sa));'), (13, 2, u'-        Assert_always(a == Endian_hostToLittleEndian32(a));'), (14, 2, u'-        Assert_always(a == Endian_hostToLittleEndian32(a));'), (15, 1, u'+        Assert_true(a == Endian_bigEndianToHost32(sa));'), (16, 1, u'+        Assert_true(a == Endian_hostToBigEndian32(sa));'), (17, 1, u'+        Assert_true(a == Endian_hostToLittleEndian32(a));'), (18, 1, u'+        Assert_true(a == Endian_hostToLittleEndian32(a));'), (20, 2, u'-        Assert_always(b == Endian_bigEndianToHost64(sb));'), (21, 2, u'-        Assert_always(b == Endian_hostToBigEndian64(sb));'), (22, 2, u'-        Assert_always(b == Endian_hostToLittleEndian64(b));'), (23, 2, u'-        Assert_always(b == Endian_hostToLittleEndian64(b));'), (24, 1, u'+        Assert_true(b == Endian_bigEndianToHost64(sb));'), (25, 1, u'+        Assert_true(b == Endian_hostToBigEndian64(sb));'), (26, 1, u'+        Assert_true(b == Endian_hostToLittleEndian64(b));'), (27, 1, u'+        Assert_true(b == Endian_hostToLittleEndian64(b));'), (29, 2, u'-        Assert_always(c == Endian_bigEndianToHost16(c));'), (30, 2, u'-        Assert_always(c == Endian_hostToBigEndian16(c));'), (31, 2, u'-        Assert_always(c == Endian_hostToLittleEndian16(sc));'), (32, 2, u'-        Assert_always(c == Endian_hostToLittleEndian16(sc));'), (33, 1, u'+        Assert_true(c == Endian_bigEndianToHost16(c));'), (34, 1, u'+        Assert_true(c == Endian_hostToBigEndian16(c));'), (35, 1, u'+        Assert_true(c == Endian_hostToLittleEndian16(sc));'), (36, 1, u'+        Assert_true(c == Endian_hostToLittleEndian16(sc));'), (38, 2, u'-        Assert_always(a == Endian_bigEndianToHost32(a));'), (39, 2, u'-        Assert_always(a == Endian_hostToBigEndian32(a));'), (40, 2, u'-        Assert_always(a == Endian_hostToLittleEndian32(sa));'), (41, 2, u'-        Assert_always(a == Endian_hostToLittleEndian32(sa));'), (42, 1, u'+        Assert_true(a == Endian_bigEndianToHost32(a));'), (43, 1, u'+        Assert_true(a == Endian_hostToBigEndian32(a));'), (44, 1, u'+        Assert_true(a == Endian_hostToLittleEndian32(sa));'), (45, 1, u'+        Assert_true(a == Endian_hostToLittleEndian32(sa));'), (47, 2, u'-        Assert_always(b == Endian_bigEndianToHost64(b));'), (48, 2, u'-        Assert_always(b == Endian_hostToBigEndian64(b));'), (49, 2, u'-        Assert_always(b == Endian_hostToLittleEndian64(sb));'), (50, 2, u'-        Assert_always(b == Endian_hostToLittleEndian64(sb));'), (51, 1, u'+        Assert_true(b == Endian_bigEndianToHost64(b));'), (52, 1, u'+        Assert_true(b == Endian_hostToBigEndian64(b));'), (53, 1, u'+        Assert_true(b == Endian_hostToLittleEndian64(sb));'), (54, 1, u'+        Assert_true(b == Endian_hostToLittleEndian64(sb));'), (57, 2, u'-    Assert_always(b == Endian_byteSwap64(sb));'), (58, 2, u'-    Assert_always(a == Endian_byteSwap32(sa));'), (59, 2, u'-    Assert_always(c == Endian_byteSwap16(sc));'), (60, 1, u'+    Assert_true(b == Endian_byteSwap64(sb));'), (61, 1, u'+    Assert_true(a == Endian_byteSwap32(sa));'), (62, 1, u'+    Assert_true(c == Endian_byteSwap16(sc));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(c == Endian_bigEndianToHost16(sc));'), (3, 2, u'-        Assert_always(c == Endian_hostToBigEndian16(sc));'), (4, 2, u'-        Assert_always(c == Endian_hostToLittleEndian16(c));'), (5, 2, u'-        Assert_always(c == Endian_hostToLittleEndian16(c));'), (6, 1, u'+        Assert_true(c == Endian_bigEndianToHost16(sc));'), (7, 1, u'+        Assert_true(c == Endian_hostToBigEndian16(sc));'), (8, 1, u'+        Assert_true(c == Endian_hostToLittleEndian16(c));'), (9, 1, u'+        Assert_true(c == Endian_hostToLittleEndian16(c));'), (11, 2, u'-        Assert_always(a == Endian_bigEndianToHost32(sa));'), (12, 2, u'-        Assert_always(a == Endian_hostToBigEndian32(sa));'), (13, 2, u'-        Assert_always(a == Endian_hostToLittleEndian32(a));'), (14, 2, u'-        Assert_always(a == Endian_hostToLittleEndian32(a));'), (15, 1, u'+        Assert_true(a == Endian_bigEndianToHost32(sa));'), (16, 1, u'+        Assert_true(a == Endian_hostToBigEndian32(sa));'), (17, 1, u'+        Assert_true(a == Endian_hostToLittleEndian32(a));'), (18, 1, u'+        Assert_true(a == Endian_hostToLittleEndian32(a));'), (20, 2, u'-        Assert_always(b == Endian_bigEndianToHost64(sb));'), (21, 2, u'-        Assert_always(b == Endian_hostToBigEndian64(sb));'), (22, 2, u'-        Assert_always(b == Endian_hostToLittleEndian64(b));'), (23, 2, u'-        Assert_always(b == Endian_hostToLittleEndian64(b));'), (24, 1, u'+        Assert_true(b == Endian_bigEndianToHost64(sb));'), (25, 1, u'+        Assert_true(b == Endian_hostToBigEndian64(sb));'), (26, 1, u'+        Assert_true(b == Endian_hostToLittleEndian64(b));'), (27, 1, u'+        Assert_true(b == Endian_hostToLittleEndian64(b));'), (29, 2, u'-        Assert_always(c == Endian_bigEndianToHost16(c));'), (30, 2, u'-        Assert_always(c == Endian_hostToBigEndian16(c));'), (31, 2, u'-        Assert_always(c == Endian_hostToLittleEndian16(sc));'), (32, 2, u'-        Assert_always(c == Endian_hostToLittleEndian16(sc));'), (33, 1, u'+        Assert_true(c == Endian_bigEndianToHost16(c));'), (34, 1, u'+        Assert_true(c == Endian_hostToBigEndian16(c));'), (35, 1, u'+        Assert_true(c == Endian_hostToLittleEndian16(sc));'), (36, 1, u'+        Assert_true(c == Endian_hostToLittleEndian16(sc));'), (38, 2, u'-        Assert_always(a == Endian_bigEndianToHost32(a));'), (39, 2, u'-        Assert_always(a == Endian_hostToBigEndian32(a));'), (40, 2, u'-        Assert_always(a == Endian_hostToLittleEndian32(sa));'), (41, 2, u'-        Assert_always(a == Endian_hostToLittleEndian32(sa));'), (42, 1, u'+        Assert_true(a == Endian_bigEndianToHost32(a));'), (43, 1, u'+        Assert_true(a == Endian_hostToBigEndian32(a));'), (44, 1, u'+        Assert_true(a == Endian_hostToLittleEndian32(sa));'), (45, 1, u'+        Assert_true(a == Endian_hostToLittleEndian32(sa));'), (47, 2, u'-        Assert_always(b == Endian_bigEndianToHost64(b));'), (48, 2, u'-        Assert_always(b == Endian_hostToBigEndian64(b));'), (49, 2, u'-        Assert_always(b == Endian_hostToLittleEndian64(sb));'), (50, 2, u'-        Assert_always(b == Endian_hostToLittleEndian64(sb));'), (51, 1, u'+        Assert_true(b == Endian_bigEndianToHost64(b));'), (52, 1, u'+        Assert_true(b == Endian_hostToBigEndian64(b));'), (53, 1, u'+        Assert_true(b == Endian_hostToLittleEndian64(sb));'), (54, 1, u'+        Assert_true(b == Endian_hostToLittleEndian64(sb));'), (57, 2, u'-    Assert_always(b == Endian_byteSwap64(sb));'), (58, 2, u'-    Assert_always(a == Endian_byteSwap32(sa));'), (59, 2, u'-    Assert_always(c == Endian_byteSwap16(sc));'), (60, 1, u'+    Assert_true(b == Endian_byteSwap64(sb));'), (61, 1, u'+    Assert_true(a == Endian_byteSwap32(sa));'), (62, 1, u'+    Assert_true(c == Endian_byteSwap16(sc));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Hex_encode(hex, 65, bytes, 32) == 64);'), (3, 1, u'+    Assert_true(Hex_encode(hex, 65, bytes, 32) == 64);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Hex_encode(hex, 65, bytes, 32) == 64);'), (3, 1, u'+    Assert_true(Hex_encode(hex, 65, bytes, 32) == 64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Hex_encode(hex, 65, bytes, 32) == 64);'), (3, 1, u'+    Assert_true(Hex_encode(hex, 65, bytes, 32) == 64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Hex_decode(bytes2, 32, hex, 64) == 32);'), (3, 1, u'+    Assert_true(Hex_decode(bytes2, 32, hex, 64) == 32);'), (5, 2, u'-    Assert_always(Bits_memcmp(bytes, bytes2, 32) == 0);'), (6, 1, u'+    Assert_true(Bits_memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Hex_decode(bytes2, 32, hex, 64) == 32);'), (3, 1, u'+    Assert_true(Hex_decode(bytes2, 32, hex, 64) == 32);'), (5, 2, u'-    Assert_always(Bits_memcmp(bytes, bytes2, 32) == 0);'), (6, 1, u'+    Assert_true(Bits_memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Hex_decode(bytes2, 32, hex, 64) == 32);'), (3, 1, u'+    Assert_true(Hex_decode(bytes2, 32, hex, 64) == 32);'), (5, 2, u'-    Assert_always(Bits_memcmp(bytes, bytes2, 32) == 0);'), (6, 1, u'+    Assert_true(Bits_memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tp == &t);'), (3, 2, u'-    Assert_always(t.counter == 1);'), (4, 1, u'+    Assert_true(tp == &t);'), (5, 1, u'+    Assert_true(t.counter == 1);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tp == &t);'), (3, 2, u'-    Assert_always(t.counter == 1);'), (4, 1, u'+    Assert_true(tp == &t);'), (5, 1, u'+    Assert_true(t.counter == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(tp == &t);'), (3, 2, u'-    Assert_always(t.counter == 1);'), (4, 1, u'+    Assert_true(tp == &t);'), (5, 1, u'+    Assert_true(t.counter == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        Assert_always(!"map out of order");'), (3, 1, u'+                        Assert_true(!"map out of order");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        Assert_always(!"map out of order");'), (3, 1, u'+                        Assert_true(!"map out of order");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        Assert_always(!"map out of order");'), (3, 1, u'+                        Assert_true(!"map out of order");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(false);'), (3, 1, u'+                Assert_true(false);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(false);'), (3, 1, u'+                Assert_true(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_always(false);'), (3, 1, u'+                Assert_true(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!status);'), (3, 1, u'+    Assert_true(!status);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: onConnectionParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!status);'), (3, 1, u'+    Assert_true(!status);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!status);'), (3, 1, u'+    Assert_true(!status);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length == (int)CString_strlen(MESSAGEB));'), (3, 2, u'-    Assert_always(!Bits_memcmp(msg->bytes, MESSAGEB, CString_strlen(MESSAGEB)));'), (4, 1, u'+    Assert_true(msg->length == (int)CString_strlen(MESSAGEB));'), (5, 1, u'+    Assert_true(!Bits_memcmp(msg->bytes, MESSAGEB, CString_strlen(MESSAGEB)));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: receiveMessageParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length == (int)CString_strlen(MESSAGEB));'), (3, 2, u'-    Assert_always(!Bits_memcmp(msg->bytes, MESSAGEB, CString_strlen(MESSAGEB)));'), (4, 1, u'+    Assert_true(msg->length == (int)CString_strlen(MESSAGEB));'), (5, 1, u'+    Assert_true(!Bits_memcmp(msg->bytes, MESSAGEB, CString_strlen(MESSAGEB)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length == (int)CString_strlen(MESSAGEB));'), (3, 2, u'-    Assert_always(!Bits_memcmp(msg->bytes, MESSAGEB, CString_strlen(MESSAGEB)));'), (4, 1, u'+    Assert_true(msg->length == (int)CString_strlen(MESSAGEB));'), (5, 1, u'+    Assert_true(!Bits_memcmp(msg->bytes, MESSAGEB, CString_strlen(MESSAGEB)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!"timed out.");'), (3, 1, u'+    Assert_true(!"timed out.");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: timeout
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!"timed out.");'), (3, 1, u'+    Assert_true(!"timed out.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!"timed out.");'), (3, 1, u'+    Assert_true(!"timed out.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!status);'), (3, 1, u'+    Assert_true(!status);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: onConnectionChild
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!status);'), (3, 1, u'+    Assert_true(!status);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!status);'), (3, 1, u'+    Assert_true(!status);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(m->length == (int)CString_strlen(MESSAGE));'), (3, 2, u'-    Assert_always(!Bits_memcmp(m->bytes, MESSAGE, CString_strlen(MESSAGE)));'), (4, 1, u'+    Assert_true(m->length == (int)CString_strlen(MESSAGE));'), (5, 1, u'+    Assert_true(!Bits_memcmp(m->bytes, MESSAGE, CString_strlen(MESSAGE)));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: receiveMessageChild
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(m->length == (int)CString_strlen(MESSAGE));'), (3, 2, u'-    Assert_always(!Bits_memcmp(m->bytes, MESSAGE, CString_strlen(MESSAGE)));'), (4, 1, u'+    Assert_true(m->length == (int)CString_strlen(MESSAGE));'), (5, 1, u'+    Assert_true(!Bits_memcmp(m->bytes, MESSAGE, CString_strlen(MESSAGE)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(m->length == (int)CString_strlen(MESSAGE));'), (3, 2, u'-    Assert_always(!Bits_memcmp(m->bytes, MESSAGE, CString_strlen(MESSAGE)));'), (4, 1, u'+    Assert_true(m->length == (int)CString_strlen(MESSAGE));'), (5, 1, u'+    Assert_true(!Bits_memcmp(m->bytes, MESSAGE, CString_strlen(MESSAGE)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(path != NULL);'), (3, 1, u'+    Assert_true(path != NULL);'), (5, 2, u'-        Assert_always(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (6, 2, u'-        Assert_always(strstr(path, ".exe"));'), (7, 1, u'+        Assert_true(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (8, 1, u'+        Assert_true(strstr(path, ".exe"));'), (10, 2, u"-        Assert_always(path[0] == '/');"), (11, 1, u"+        Assert_true(path[0] == '/');")]
===========================================
===========================================
Total add: 4
Total del: 4
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(path != NULL);'), (3, 1, u'+    Assert_true(path != NULL);'), (5, 2, u'-        Assert_always(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (6, 2, u'-        Assert_always(strstr(path, ".exe"));'), (7, 1, u'+        Assert_true(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (8, 1, u'+        Assert_true(strstr(path, ".exe"));'), (10, 2, u"-        Assert_always(path[0] == '/');"), (11, 1, u"+        Assert_true(path[0] == '/');")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(path != NULL);'), (3, 1, u'+    Assert_true(path != NULL);'), (5, 2, u'-        Assert_always(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (6, 2, u'-        Assert_always(strstr(path, ".exe"));'), (7, 1, u'+        Assert_true(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (8, 1, u'+        Assert_true(strstr(path, ".exe"));'), (10, 2, u"-        Assert_always(path[0] == '/');"), (11, 1, u"+        Assert_true(path[0] == '/');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Process_spawn(path, args, eb, alloc));'), (3, 1, u'+    Assert_true(!Process_spawn(path, args, eb, alloc));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Process_spawn(path, args, eb, alloc));'), (3, 1, u'+    Assert_true(!Process_spawn(path, args, eb, alloc));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Process_spawn(path, args, eb, alloc));'), (3, 1, u'+    Assert_true(!Process_spawn(path, args, eb, alloc));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(txid && txid->len >= admin->addrLen);'), (3, 1, u'+    Assert_always(txid && txid->len >= admin->addrLen);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Admin_sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(txid && txid->len >= admin->addrLen);'), (3, 1, u'+    Assert_always(txid && txid->len >= admin->addrLen);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(txid && txid->len >= admin->addrLen);'), (3, 1, u'+    Assert_always(txid && txid->len >= admin->addrLen);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(entry->val->type == Object_DICT);'), (3, 1, u'+        Assert_ifParanoid(entry->val->type == Object_DICT);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: checkArgs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(entry->val->type == Object_DICT);'), (3, 1, u'+        Assert_ifParanoid(entry->val->type == Object_DICT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(entry->val->type == Object_DICT);'), (3, 1, u'+        Assert_ifParanoid(entry->val->type == Object_DICT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->length >= (int)admin->addrLen);'), (3, 1, u'+    Assert_ifParanoid(message->length >= (int)admin->addrLen);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->length >= (int)admin->addrLen);'), (3, 1, u'+    Assert_ifParanoid(message->length >= (int)admin->addrLen);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->length >= (int)admin->addrLen);'), (3, 1, u'+    Assert_ifParanoid(message->length >= (int)admin->addrLen);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("::", &rainflyAddr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("::", &rainflyAddr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Core_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("::", &rainflyAddr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("::", &rainflyAddr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("::", &rainflyAddr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("::", &rainflyAddr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Core_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(ctx.message);'), (3, 1, u'+    Assert_always(ctx.message);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: InterfaceWaiter_waitForData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(ctx.message);'), (3, 1, u'+    Assert_always(ctx.message);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(ctx.message);'), (3, 1, u'+    Assert_always(ctx.message);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(argc > 0);'), (3, 1, u'+    Assert_ifParanoid(argc > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(argc > 0);'), (3, 1, u'+    Assert_ifParanoid(argc > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(argc > 0);'), (3, 1, u'+    Assert_ifParanoid(argc > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EventBase_eventCount(eventBase) == 0);'), (3, 1, u'+    Assert_ifParanoid(EventBase_eventCount(eventBase) == 0);'), (5, 2, u'-    Assert_true(EventBase_eventCount(eventBase) == 2);'), (6, 1, u'+    Assert_ifParanoid(EventBase_eventCount(eventBase) == 2);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EventBase_eventCount(eventBase) == 0);'), (3, 1, u'+    Assert_ifParanoid(EventBase_eventCount(eventBase) == 0);'), (5, 2, u'-    Assert_true(EventBase_eventCount(eventBase) == 2);'), (6, 1, u'+    Assert_ifParanoid(EventBase_eventCount(eventBase) == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EventBase_eventCount(eventBase) == 0);'), (3, 1, u'+    Assert_ifParanoid(EventBase_eventCount(eventBase) == 0);'), (5, 2, u'-    Assert_true(EventBase_eventCount(eventBase) == 2);'), (6, 1, u'+    Assert_ifParanoid(EventBase_eventCount(eventBase) == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EventBase_eventCount(eventBase) == 2);'), (3, 1, u'+    Assert_ifParanoid(EventBase_eventCount(eventBase) == 2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EventBase_eventCount(eventBase) == 2);'), (3, 1, u'+    Assert_ifParanoid(EventBase_eventCount(eventBase) == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EventBase_eventCount(eventBase) == 2);'), (3, 1, u'+    Assert_ifParanoid(EventBase_eventCount(eventBase) == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(path);'), (3, 1, u'+    Assert_always(path);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: spawnAngel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(path);'), (3, 1, u'+    Assert_always(path);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(path);'), (3, 1, u'+    Assert_always(path);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: AdminTestFramework_setUp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(wrapper->nextNonce == 0);'), (3, 1, u'+    Assert_ifParanoid(wrapper->nextNonce == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: genReverseHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(wrapper->nextNonce == 0);'), (3, 1, u'+    Assert_ifParanoid(wrapper->nextNonce == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(wrapper->nextNonce == 0);'), (3, 1, u'+    Assert_ifParanoid(wrapper->nextNonce == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));'), (3, 1, u'+        Assert_ifParanoid(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));'), (3, 1, u'+        Assert_ifParanoid(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));'), (3, 1, u'+        Assert_ifParanoid(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(!((uintptr_t)message->bytes % 4) || !"alignment fault");'), (5, 1, u'+    Assert_true(!((uintptr_t)message->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(!((uintptr_t)message->bytes % 4) || !"alignment fault");'), (5, 1, u'+    Assert_true(!((uintptr_t)message->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(!((uintptr_t)message->bytes % 4) || !"alignment fault");'), (5, 1, u'+    Assert_true(!((uintptr_t)message->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (3, 2, u'-            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));'), (4, 1, u'+            Assert_ifParanoid(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (5, 1, u'+            Assert_ifParanoid(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (3, 2, u'-            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));'), (4, 1, u'+            Assert_ifParanoid(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (5, 1, u'+            Assert_ifParanoid(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (3, 2, u'-            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));'), (4, 1, u'+            Assert_ifParanoid(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (5, 1, u'+            Assert_ifParanoid(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (5, 1, u'+    Assert_ifParanoid(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (5, 1, u'+    Assert_ifParanoid(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (5, 1, u'+    Assert_ifParanoid(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(!((uintptr_t)received->bytes % 4) || !"alignment fault");'), (5, 1, u'+    Assert_true(!((uintptr_t)received->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(!((uintptr_t)received->bytes % 4) || !"alignment fault");'), (5, 1, u'+    Assert_true(!((uintptr_t)received->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(!((uintptr_t)received->bytes % 4) || !"alignment fault");'), (5, 1, u'+    Assert_true(!((uintptr_t)received->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (3, 2, u'-            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));'), (4, 1, u'+            Assert_ifParanoid(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (5, 1, u'+            Assert_ifParanoid(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (3, 2, u'-            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));'), (4, 1, u'+            Assert_ifParanoid(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (5, 1, u'+            Assert_ifParanoid(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (3, 2, u'-            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));'), (4, 1, u'+            Assert_ifParanoid(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (5, 1, u'+            Assert_ifParanoid(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!Bits_isZero(wrapper->sharedSecret, 32));'), (3, 1, u'+        Assert_ifParanoid(!Bits_isZero(wrapper->sharedSecret, 32));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!Bits_isZero(wrapper->sharedSecret, 32));'), (3, 1, u'+        Assert_ifParanoid(!Bits_isZero(wrapper->sharedSecret, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!Bits_isZero(wrapper->sharedSecret, 32));'), (3, 1, u'+        Assert_ifParanoid(!Bits_isZero(wrapper->sharedSecret, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-    Assert_true(keyPart.len == 54 && keyPart.bytes[53] == 'k');"), (3, 1, u"+    Assert_always(keyPart.len == 54 && keyPart.bytes[53] == 'k');")]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Address_fromString
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-    Assert_true(keyPart.len == 54 && keyPart.bytes[53] == 'k');"), (3, 1, u"+    Assert_always(keyPart.len == 54 && keyPart.bytes[53] == 'k');")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-    Assert_true(keyPart.len == 54 && keyPart.bytes[53] == 'k');"), (3, 1, u"+    Assert_always(keyPart.len == 54 && keyPart.bytes[53] == 'k');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(module != NULL);'), (3, 1, u'+    Assert_ifParanoid(module != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dhtModuleHandleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(module != NULL);'), (3, 1, u'+    Assert_ifParanoid(module != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(module != NULL);'), (3, 1, u'+    Assert_ifParanoid(module != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        Assert_true(dmesg->address->path =='), (10, 1, u'+    Assert_ifTesting(dmesg->address->path ==')]
===========================================
===========================================
Total add: 5
Total del: 7
Header: handleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        Assert_true(dmesg->address->path =='), (10, 1, u'+    Assert_ifTesting(dmesg->address->path ==')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        Assert_true(dmesg->address->path =='), (10, 1, u'+    Assert_ifTesting(dmesg->address->path ==')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(encIdx != EncodingScheme_getFormNum_INVALID);'), (3, 1, u'+    Assert_ifParanoid(encIdx != EncodingScheme_getFormNum_INVALID);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(encIdx != EncodingScheme_getFormNum_INVALID);'), (3, 1, u'+    Assert_ifParanoid(encIdx != EncodingScheme_getFormNum_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(encIdx != EncodingScheme_getFormNum_INVALID);'), (3, 1, u'+    Assert_ifParanoid(encIdx != EncodingScheme_getFormNum_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node->address.path =='), (3, 1, u'+    Assert_always(node->address.path ==')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _checkNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node->address.path =='), (3, 1, u'+    Assert_always(node->address.path ==')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node->address.path =='), (3, 1, u'+    Assert_always(node->address.path ==')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_always(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _verify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_always(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_always(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_always(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _check
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_always(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);'), (3, 1, u'+    Assert_always(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(next != EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+    Assert_always(next != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: extendRoute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(next != EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+    Assert_always(next != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(next != EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+    Assert_always(next != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(node->bestParent);'), (3, 2, u'-        Assert_true(node->address.path < UINT64_MAX);'), (4, 2, u'-        Assert_true(newReach > 512);'), (5, 1, u'+        Assert_always(node->bestParent);'), (6, 1, u'+        Assert_always(node->address.path < UINT64_MAX);'), (7, 1, u'+        Assert_always(newReach > 512);'), (9, 2, u'-        Assert_true(!node->bestParent);'), (10, 2, u'-        Assert_true(node->address.path == UINT64_MAX);'), (11, 1, u'+        Assert_always(!node->bestParent);'), (12, 1, u'+        Assert_always(node->address.path == UINT64_MAX);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: setReach
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(node->bestParent);'), (3, 2, u'-        Assert_true(node->address.path < UINT64_MAX);'), (4, 2, u'-        Assert_true(newReach > 512);'), (5, 1, u'+        Assert_always(node->bestParent);'), (6, 1, u'+        Assert_always(node->address.path < UINT64_MAX);'), (7, 1, u'+        Assert_always(newReach > 512);'), (9, 2, u'-        Assert_true(!node->bestParent);'), (10, 2, u'-        Assert_true(node->address.path == UINT64_MAX);'), (11, 1, u'+        Assert_always(!node->bestParent);'), (12, 1, u'+        Assert_always(node->address.path == UINT64_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(node->bestParent);'), (3, 2, u'-        Assert_true(node->address.path < UINT64_MAX);'), (4, 2, u'-        Assert_true(newReach > 512);'), (5, 1, u'+        Assert_always(node->bestParent);'), (6, 1, u'+        Assert_always(node->address.path < UINT64_MAX);'), (7, 1, u'+        Assert_always(newReach > 512);'), (9, 2, u'-        Assert_true(!node->bestParent);'), (10, 2, u'-        Assert_true(node->address.path == UINT64_MAX);'), (11, 1, u'+        Assert_always(!node->bestParent);'), (12, 1, u'+        Assert_always(node->address.path == UINT64_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(r < Node_getReach(link->parent) && r != 0);'), (3, 1, u'+    Assert_always(r < Node_getReach(link->parent) && r != 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: guessReachOfChild
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(r < Node_getReach(link->parent) && r != 0);'), (3, 1, u'+    Assert_always(r < Node_getReach(link->parent) && r != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(r < Node_getReach(link->parent) && r != 0);'), (3, 1, u'+    Assert_always(r < Node_getReach(link->parent) && r != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newBestParent);'), (4, 2, u'-    Assert_true(nextReach < Node_getReach(newBestParent->parent));'), (5, 1, u'+    Assert_always(newBestParent);'), (7, 1, u'+    Assert_always(nextReach < Node_getReach(newBestParent->parent));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: updateBestParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newBestParent);'), (4, 2, u'-    Assert_true(nextReach < Node_getReach(newBestParent->parent));'), (5, 1, u'+    Assert_always(newBestParent);'), (7, 1, u'+    Assert_always(nextReach < Node_getReach(newBestParent->parent));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newBestParent);'), (4, 2, u'-    Assert_true(nextReach < Node_getReach(newBestParent->parent));'), (5, 1, u'+    Assert_always(newBestParent);'), (7, 1, u'+    Assert_always(nextReach < Node_getReach(newBestParent->parent));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(0);'), (3, 1, u'+    Assert_always(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: updateBestParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(0);'), (3, 1, u'+    Assert_always(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(0);'), (3, 1, u'+    Assert_always(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newReach > Node_getReach(node));'), (3, 1, u'+    Assert_always(newReach > Node_getReach(node));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handleGoodNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newReach > Node_getReach(node));'), (3, 1, u'+    Assert_always(newReach > Node_getReach(node));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newReach > Node_getReach(node));'), (3, 1, u'+    Assert_always(newReach > Node_getReach(node));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Node_getReach(node) < Node_getReach(best->parent));'), (3, 1, u'+    Assert_always(Node_getReach(node) < Node_getReach(best->parent));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handleBadNewsTwo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Node_getReach(node) < Node_getReach(best->parent));'), (3, 1, u'+    Assert_always(Node_getReach(node) < Node_getReach(best->parent));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Node_getReach(node) < Node_getReach(best->parent));'), (3, 1, u'+    Assert_always(Node_getReach(node) < Node_getReach(best->parent));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(link->child != store->pub.selfNode);'), (3, 1, u'+    Assert_always(link->child != store->pub.selfNode);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handleBadNewsOne
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(link->child != store->pub.selfNode);'), (3, 1, u'+    Assert_always(link->child != store->pub.selfNode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(link->child != store->pub.selfNode);'), (3, 1, u'+    Assert_always(link->child != store->pub.selfNode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newReach < Node_getReach(node));'), (3, 1, u'+    Assert_always(newReach < Node_getReach(node));'), (6, 2, u'-    Assert_true(node->bestParent);'), (7, 1, u'+    Assert_always(node->bestParent);'), (9, 2, u'-    Assert_true(node->bestParent != store->selfLink);'), (10, 1, u'+    Assert_always(node->bestParent != store->selfLink);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newReach < Node_getReach(node));'), (3, 1, u'+    Assert_always(newReach < Node_getReach(node));'), (6, 2, u'-    Assert_true(node->bestParent);'), (7, 1, u'+    Assert_always(node->bestParent);'), (9, 2, u'-    Assert_true(node->bestParent != store->selfLink);'), (10, 1, u'+    Assert_always(node->bestParent != store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newReach < Node_getReach(node));'), (3, 1, u'+    Assert_always(newReach < Node_getReach(node));'), (6, 2, u'-    Assert_true(node->bestParent);'), (7, 1, u'+    Assert_always(node->bestParent);'), (9, 2, u'-    Assert_true(node->bestParent != store->selfLink);'), (10, 1, u'+    Assert_always(node->bestParent != store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!newReach || newReach > 1023);'), (3, 1, u'+    Assert_always(!newReach || newReach > 1023);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!newReach || newReach > 1023);'), (3, 1, u'+    Assert_always(!newReach || newReach > 1023);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!newReach || newReach > 1023);'), (3, 1, u'+    Assert_always(!newReach || newReach > 1023);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(Node_getReach(node) < Node_getReach(node->bestParent->parent));'), (3, 1, u'+        Assert_always(Node_getReach(node) < Node_getReach(node->bestParent->parent));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(Node_getReach(node) < Node_getReach(node->bestParent->parent));'), (3, 1, u'+        Assert_always(Node_getReach(node) < Node_getReach(node->bestParent->parent));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(Node_getReach(node) < Node_getReach(node->bestParent->parent));'), (3, 1, u'+        Assert_always(Node_getReach(node) < Node_getReach(node->bestParent->parent));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(current);'), (3, 1, u'+    Assert_always(current);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: unlinkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(current);'), (3, 1, u'+    Assert_always(current);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(current);'), (3, 1, u'+    Assert_always(current);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(cannonicalLabel != 1 || store->selfLink == NULL);'), (3, 1, u'+    Assert_always(cannonicalLabel != 1 || store->selfLink == NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(cannonicalLabel != 1 || store->selfLink == NULL);'), (3, 1, u'+    Assert_always(cannonicalLabel != 1 || store->selfLink == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(cannonicalLabel != 1 || store->selfLink == NULL);'), (3, 1, u'+    Assert_always(cannonicalLabel != 1 || store->selfLink == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(definitelyCannonical == cannonicalLabel);'), (3, 1, u'+        Assert_always(definitelyCannonical == cannonicalLabel);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(definitelyCannonical == cannonicalLabel);'), (3, 1, u'+        Assert_always(definitelyCannonical == cannonicalLabel);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(definitelyCannonical == cannonicalLabel);'), (3, 1, u'+        Assert_always(definitelyCannonical == cannonicalLabel);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(0);'), (3, 1, u'+        Assert_always(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(0);'), (3, 1, u'+        Assert_always(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(0);'), (3, 1, u'+        Assert_always(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_always(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_always(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);'), (3, 1, u'+        Assert_always(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(nextLink->child->encodingScheme);'), (3, 1, u'+        Assert_always(nextLink->child->encodingScheme);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(nextLink->child->encodingScheme);'), (3, 1, u'+        Assert_always(nextLink->child->encodingScheme);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(nextLink->child->encodingScheme);'), (3, 1, u'+        Assert_always(nextLink->child->encodingScheme);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(tmpl.cannonicalLabel);/// TODO remove this'), (3, 1, u'+    Assert_always(tmpl.cannonicalLabel);/// TODO remove this')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(tmpl.cannonicalLabel);/// TODO remove this'), (3, 1, u'+    Assert_always(tmpl.cannonicalLabel);/// TODO remove this')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(tmpl.cannonicalLabel);/// TODO remove this'), (3, 1, u'+    Assert_always(tmpl.cannonicalLabel);/// TODO remove this')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(splitLink->child == child);'), (3, 1, u'+                Assert_always(splitLink->child == child);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(splitLink->child == child);'), (3, 1, u'+                Assert_always(splitLink->child == child);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(splitLink->child == child);'), (3, 1, u'+                Assert_always(splitLink->child == child);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(splitLink->parent == parent);'), (3, 2, u'-        Assert_true(childToGrandchild < UINT64_MAX);'), (4, 1, u'+        Assert_always(splitLink->parent == parent);'), (5, 1, u'+        Assert_always(childToGrandchild < UINT64_MAX);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(splitLink->parent == parent);'), (3, 2, u'-        Assert_true(childToGrandchild < UINT64_MAX);'), (4, 1, u'+        Assert_always(splitLink->parent == parent);'), (5, 1, u'+        Assert_always(childToGrandchild < UINT64_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(splitLink->parent == parent);'), (3, 2, u'-        Assert_true(childToGrandchild < UINT64_MAX);'), (4, 1, u'+        Assert_always(splitLink->parent == parent);'), (5, 1, u'+        Assert_always(childToGrandchild < UINT64_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(Node_getReach(grandChild) < UINT32_MAX);'), (3, 1, u'+                Assert_always(Node_getReach(grandChild) < UINT32_MAX);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(Node_getReach(grandChild) < UINT32_MAX);'), (3, 1, u'+                Assert_always(Node_getReach(grandChild) < UINT32_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(Node_getReach(grandChild) < UINT32_MAX);'), (3, 1, u'+                Assert_always(Node_getReach(grandChild) < UINT32_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(Node_getReach(child) > Node_getReach(grandChild));'), (3, 1, u'+            Assert_always(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(Node_getReach(child) > Node_getReach(grandChild));'), (3, 1, u'+            Assert_always(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(Node_getReach(child) > Node_getReach(grandChild));'), (3, 1, u'+            Assert_always(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (3, 2, u'-        Assert_true(childToGrandchild != 1);'), (4, 1, u'+        Assert_always(splitLink->cannonicalLabel != pathParentChild);'), (5, 1, u'+        Assert_always(childToGrandchild != 1);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (3, 2, u'-        Assert_true(childToGrandchild != 1);'), (4, 1, u'+        Assert_always(splitLink->cannonicalLabel != pathParentChild);'), (5, 1, u'+        Assert_always(childToGrandchild != 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (3, 2, u'-        Assert_true(childToGrandchild != 1);'), (4, 1, u'+        Assert_always(splitLink->cannonicalLabel != pathParentChild);'), (5, 1, u'+        Assert_always(childToGrandchild != 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(Node_getReach(child) > Node_getReach(grandChild));'), (3, 1, u'+            Assert_always(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(Node_getReach(child) > Node_getReach(grandChild));'), (3, 1, u'+            Assert_always(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(Node_getReach(child) > Node_getReach(grandChild));'), (3, 1, u'+            Assert_always(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(parentLink->child != lcg->parent);'), (3, 1, u'+                Assert_always(parentLink->child != lcg->parent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(parentLink->child != lcg->parent);'), (3, 1, u'+                Assert_always(parentLink->child != lcg->parent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(parentLink->child != lcg->parent);'), (3, 1, u'+                Assert_always(parentLink->child != lcg->parent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_true(Node_getReach(link->parent) >= Node_getReach(grandChild));'), (3, 1, u'+                    Assert_always(Node_getReach(link->parent) >= Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_true(Node_getReach(link->parent) >= Node_getReach(grandChild));'), (3, 1, u'+                    Assert_always(Node_getReach(link->parent) >= Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_true(Node_getReach(link->parent) >= Node_getReach(grandChild));'), (3, 1, u'+                    Assert_always(Node_getReach(link->parent) >= Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                            Assert_true(Node_getReach(link->parent) > Node_getReach(grandChild));'), (3, 1, u'+                            Assert_always(Node_getReach(link->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                            Assert_true(Node_getReach(link->parent) > Node_getReach(grandChild));'), (3, 1, u'+                            Assert_always(Node_getReach(link->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                            Assert_true(Node_getReach(link->parent) > Node_getReach(grandChild));'), (3, 1, u'+                            Assert_always(Node_getReach(link->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        Assert_true(Node_getReach(link->child) > Node_getReach(grandChild));'), (3, 1, u'+                        Assert_always(Node_getReach(link->child) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        Assert_true(Node_getReach(link->child) > Node_getReach(grandChild));'), (3, 1, u'+                        Assert_always(Node_getReach(link->child) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        Assert_true(Node_getReach(link->child) > Node_getReach(grandChild));'), (3, 1, u'+                        Assert_always(Node_getReach(link->child) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (3, 1, u'+                Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (3, 1, u'+                Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (3, 1, u'+                Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (3, 1, u'+                Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (6, 2, u'-            Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (7, 1, u'+            Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (3, 1, u'+                Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (6, 2, u'-            Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (7, 1, u'+            Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (3, 1, u'+                Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (6, 2, u'-            Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (7, 1, u'+            Assert_always(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(worst);'), (3, 1, u'+    Assert_always(worst);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: getWorstNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(worst);'), (3, 1, u'+    Assert_always(worst);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(worst);'), (3, 1, u'+    Assert_always(worst);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!node->bestParent);'), (3, 1, u'+    Assert_always(!node->bestParent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: destroyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!node->bestParent);'), (3, 1, u'+    Assert_always(!node->bestParent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!node->bestParent);'), (3, 1, u'+    Assert_always(!node->bestParent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(out->nodes[i]->address.path);'), (3, 2, u'-        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));'), (4, 1, u'+        Assert_always(out->nodes[i]->address.path);'), (5, 1, u'+        Assert_always(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: NodeStore_getPeers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(out->nodes[i]->address.path);'), (3, 2, u'-        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));'), (4, 1, u'+        Assert_always(out->nodes[i]->address.path);'), (5, 1, u'+        Assert_always(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(out->nodes[i]->address.path);'), (3, 2, u'-        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));'), (4, 1, u'+        Assert_always(out->nodes[i]->address.path);'), (5, 1, u'+        Assert_always(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(out->nodes[i]->address.path);'), (3, 2, u'-        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));'), (4, 1, u'+        Assert_always(out->nodes[i]->address.path);'), (5, 1, u'+        Assert_always(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: NodeStore_getClosestNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(out->nodes[i]->address.path);'), (3, 2, u'-        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));'), (4, 1, u'+        Assert_always(out->nodes[i]->address.path);'), (5, 1, u'+        Assert_always(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(out->nodes[i]->address.path);'), (3, 2, u'-        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));'), (4, 1, u'+        Assert_always(out->nodes[i]->address.path);'), (5, 1, u'+        Assert_always(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!Bits_isZero(&nodes->bytes[i * Address_SERIALIZED_SIZE],'), (4, 1, u'+        Assert_ifParanoid(!Bits_isZero(&nodes->bytes[i * Address_SERIALIZED_SIZE],')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: sendNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!Bits_isZero(&nodes->bytes[i * Address_SERIALIZED_SIZE],'), (4, 1, u'+        Assert_ifParanoid(!Bits_isZero(&nodes->bytes[i * Address_SERIALIZED_SIZE],')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!Bits_isZero(&nodes->bytes[i * Address_SERIALIZED_SIZE],'), (4, 1, u'+        Assert_ifParanoid(!Bits_isZero(&nodes->bytes[i * Address_SERIALIZED_SIZE],')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(addr->path =='), (3, 1, u'+    Assert_ifParanoid(addr->path ==')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: RouterModule_newMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(addr->path =='), (3, 1, u'+    Assert_ifParanoid(addr->path ==')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(addr->path =='), (3, 1, u'+    Assert_ifParanoid(addr->path ==')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(LabelSplicer_isOneHop(pathToPeer));'), (3, 1, u'+    Assert_ifParanoid(LabelSplicer_isOneHop(pathToPeer));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: RouterModule_peerIsReachable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(LabelSplicer_isOneHop(pathToPeer));'), (3, 1, u'+    Assert_ifParanoid(LabelSplicer_isOneHop(pathToPeer));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(LabelSplicer_isOneHop(pathToPeer));'), (3, 1, u'+    Assert_ifParanoid(LabelSplicer_isOneHop(pathToPeer));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(worst);'), (3, 1, u'+    Assert_ifParanoid(worst);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: getWorst
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(worst);'), (3, 1, u'+    Assert_ifParanoid(worst);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(worst);'), (3, 1, u'+    Assert_ifParanoid(worst);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node != ctx->nodeStore->selfNode);'), (3, 1, u'+    Assert_always(node != ctx->nodeStore->selfNode);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: searchStep
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node != ctx->nodeStore->selfNode);'), (3, 1, u'+    Assert_always(node != ctx->nodeStore->selfNode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node != ctx->nodeStore->selfNode);'), (3, 1, u'+    Assert_always(node != ctx->nodeStore->selfNode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(search->runner->searches > 0);'), (3, 1, u'+    Assert_always(search->runner->searches > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: searchOnFree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(search->runner->searches > 0);'), (3, 1, u'+    Assert_always(search->runner->searches > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(search->runner->searches > 0);'), (3, 1, u'+    Assert_always(search->runner->searches > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(Hex_encode(keyHex, 255, (uint8_t*)key, key->keySize+4));'), (7, 1, u'+        Assert_true(Hex_encode(keyHex, 255, (uint8_t*)key, key->keySize+4));')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: peerForKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(Hex_encode(keyHex, 255, (uint8_t*)key, key->keySize+4));'), (7, 1, u'+        Assert_true(Hex_encode(keyHex, 255, (uint8_t*)key, key->keySize+4));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(Hex_encode(keyHex, 255, (uint8_t*)key, key->keySize+4));'), (7, 1, u'+        Assert_true(Hex_encode(keyHex, 255, (uint8_t*)key, key->keySize+4));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_ifParanoid(msg->length >= Headers_IP6Header_SIZE);'), (4, 2, u'-        Assert_true(msg->length >= Headers_IP6Header_SIZE);'), (7, 2, u'-        Assert_true(!Bits_memcmp(header->destinationAddr, ctx->myAddr.ip6.bytes, 16));'), (8, 2, u'-        Assert_true(!Bits_memcmp(header->sourceAddr, FC_ONE, 16));'), (9, 1, u'+        Assert_ifParanoid(!Bits_memcmp(header->destinationAddr, ctx->myAddr.ip6.bytes, 16));'), (10, 1, u'+        Assert_ifParanoid(!Bits_memcmp(header->sourceAddr, FC_ONE, 16));')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: magicInterfaceSendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_ifParanoid(msg->length >= Headers_IP6Header_SIZE);'), (4, 2, u'-        Assert_true(msg->length >= Headers_IP6Header_SIZE);'), (7, 2, u'-        Assert_true(!Bits_memcmp(header->destinationAddr, ctx->myAddr.ip6.bytes, 16));'), (8, 2, u'-        Assert_true(!Bits_memcmp(header->sourceAddr, FC_ONE, 16));'), (9, 1, u'+        Assert_ifParanoid(!Bits_memcmp(header->destinationAddr, ctx->myAddr.ip6.bytes, 16));'), (10, 1, u'+        Assert_ifParanoid(!Bits_memcmp(header->sourceAddr, FC_ONE, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_ifParanoid(msg->length >= Headers_IP6Header_SIZE);'), (4, 2, u'-        Assert_true(msg->length >= Headers_IP6Header_SIZE);'), (7, 2, u'-        Assert_true(!Bits_memcmp(header->destinationAddr, ctx->myAddr.ip6.bytes, 16));'), (8, 2, u'-        Assert_true(!Bits_memcmp(header->sourceAddr, FC_ONE, 16));'), (9, 1, u'+        Assert_ifParanoid(!Bits_memcmp(header->destinationAddr, ctx->myAddr.ip6.bytes, 16));'), (10, 1, u'+        Assert_ifParanoid(!Bits_memcmp(header->sourceAddr, FC_ONE, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!Bits_memcmp(header->sourceAddr, context->myAddr.ip6.bytes, 16));'), (3, 1, u'+        Assert_ifParanoid(!Bits_memcmp(header->sourceAddr, context->myAddr.ip6.bytes, 16));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: outgoingFromMe
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!Bits_memcmp(header->sourceAddr, context->myAddr.ip6.bytes, 16));'), (3, 1, u'+        Assert_ifParanoid(!Bits_memcmp(header->sourceAddr, context->myAddr.ip6.bytes, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(!Bits_memcmp(header->sourceAddr, context->myAddr.ip6.bytes, 16));'), (3, 1, u'+        Assert_ifParanoid(!Bits_memcmp(header->sourceAddr, context->myAddr.ip6.bytes, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_isSane(list));'), (3, 1, u'+    Assert_ifParanoid(EncodingScheme_isSane(list));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: EncodingScheme_asList
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_isSane(list));'), (3, 1, u'+    Assert_ifParanoid(EncodingScheme_isSane(list));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_isSane(list));'), (3, 1, u'+    Assert_ifParanoid(EncodingScheme_isSane(list));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_isSane(list));'), (3, 1, u'+    Assert_ifParanoid(EncodingScheme_isSane(list));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: EncodingScheme_serialize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_isSane(list));'), (3, 1, u'+    Assert_ifParanoid(EncodingScheme_isSane(list));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_isSane(list));'), (3, 1, u'+    Assert_ifParanoid(EncodingScheme_isSane(list));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_isSane(scheme));'), (3, 1, u'+    Assert_ifParanoid(EncodingScheme_isSane(scheme));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: EncodingScheme_defineDynWidthScheme
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_isSane(scheme));'), (3, 1, u'+    Assert_ifParanoid(EncodingScheme_isSane(scheme));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_isSane(scheme));'), (3, 1, u'+    Assert_ifParanoid(EncodingScheme_isSane(scheme));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(req->pipe->queueLen >= 0);'), (3, 1, u'+    Assert_ifParanoid(req->pipe->queueLen >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendMessageCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(req->pipe->queueLen >= 0);'), (3, 1, u'+    Assert_ifParanoid(req->pipe->queueLen >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(req->pipe->queueLen >= 0);'), (3, 1, u'+    Assert_ifParanoid(req->pipe->queueLen >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-    Assert_true(closest);'), (18, 1, u'+    Assert_true(best);')]
===========================================
===========================================
Total add: 11
Total del: 6
Header: getBest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-    Assert_true(closest);'), (18, 1, u'+    Assert_true(best);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-    Assert_true(closest);'), (18, 1, u'+    Assert_true(best);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->bestParent->parent->pathQuality > node->pathQuality'), (3, 1, u'+        Assert_fileLine(Node_getReach(node->bestParent->parent) > Node_getReach(node)')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _checkNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->bestParent->parent->pathQuality > node->pathQuality'), (3, 1, u'+        Assert_fileLine(Node_getReach(node->bestParent->parent) > Node_getReach(node)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->bestParent->parent->pathQuality > node->pathQuality'), (3, 1, u'+        Assert_fileLine(Node_getReach(node->bestParent->parent) > Node_getReach(node)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->pathQuality > 512, file, line);'), (3, 1, u'+        Assert_fileLine(Node_getReach(node) > 512, file, line);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _checkNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->pathQuality > 512, file, line);'), (3, 1, u'+        Assert_fileLine(Node_getReach(node) > 512, file, line);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->pathQuality > 512, file, line);'), (3, 1, u'+        Assert_fileLine(Node_getReach(node) > 512, file, line);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->pathQuality == 0, file, line);'), (3, 1, u'+        Assert_fileLine(Node_getReach(node) == 0, file, line);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _checkNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->pathQuality == 0, file, line);'), (3, 1, u'+        Assert_fileLine(Node_getReach(node) == 0, file, line);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->pathQuality == 0, file, line);'), (3, 1, u'+        Assert_fileLine(Node_getReach(node) == 0, file, line);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    Assert_true(r < link->parent->pathQuality && r != 0);'), (12, 1, u'+    Assert_true(r < Node_getReach(link->parent) && r != 0);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: guessReachOfChild
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    Assert_true(r < link->parent->pathQuality && r != 0);'), (12, 1, u'+    Assert_true(r < Node_getReach(link->parent) && r != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    Assert_true(r < link->parent->pathQuality && r != 0);'), (12, 1, u'+    Assert_true(r < Node_getReach(link->parent) && r != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(node->pathQuality < newBestParent->parent->pathQuality);'), (5, 1, u'+    Assert_true(newBestParent);'), (7, 1, u'+    Assert_true(nextReach < Node_getReach(newBestParent->parent));')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: updateBestParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(node->pathQuality < newBestParent->parent->pathQuality);'), (5, 1, u'+    Assert_true(newBestParent);'), (7, 1, u'+    Assert_true(nextReach < Node_getReach(newBestParent->parent));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(node->pathQuality < newBestParent->parent->pathQuality);'), (5, 1, u'+    Assert_true(newBestParent);'), (7, 1, u'+    Assert_true(nextReach < Node_getReach(newBestParent->parent));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newReach > node->pathQuality);'), (3, 1, u'+    Assert_true(newReach > Node_getReach(node));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handleGoodNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newReach > node->pathQuality);'), (3, 1, u'+    Assert_true(newReach > Node_getReach(node));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newReach > node->pathQuality);'), (3, 1, u'+    Assert_true(newReach > Node_getReach(node));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(node->pathQuality < best->parent->pathQuality);'), (5, 1, u'+    Assert_true(Node_getReach(node) < Node_getReach(best->parent));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: handleBadNewsTwo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(node->pathQuality < best->parent->pathQuality);'), (5, 1, u'+    Assert_true(Node_getReach(node) < Node_getReach(best->parent));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(node->pathQuality < best->parent->pathQuality);'), (5, 1, u'+    Assert_true(Node_getReach(node) < Node_getReach(best->parent));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newReach < node->pathQuality);'), (3, 1, u'+    Assert_true(newReach < Node_getReach(node));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newReach < node->pathQuality);'), (3, 1, u'+    Assert_true(newReach < Node_getReach(node));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(newReach < node->pathQuality);'), (3, 1, u'+    Assert_true(newReach < Node_getReach(node));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        Assert_true(node->pathQuality < node->bestParent->parent->pathQuality);'), (8, 1, u'+        Assert_true(Node_getReach(node) < Node_getReach(node->bestParent->parent));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        Assert_true(node->pathQuality < node->bestParent->parent->pathQuality);'), (8, 1, u'+        Assert_true(Node_getReach(node) < Node_getReach(node->bestParent->parent));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        Assert_true(node->pathQuality < node->bestParent->parent->pathQuality);'), (8, 1, u'+        Assert_true(Node_getReach(node) < Node_getReach(node->bestParent->parent));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-                Assert_true(grandChild->pathQuality < UINT32_MAX);'), (7, 1, u'+                Assert_true(Node_getReach(grandChild) < UINT32_MAX);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-                Assert_true(grandChild->pathQuality < UINT32_MAX);'), (7, 1, u'+                Assert_true(Node_getReach(grandChild) < UINT32_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-                Assert_true(grandChild->pathQuality < UINT32_MAX);'), (7, 1, u'+                Assert_true(Node_getReach(grandChild) < UINT32_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            Assert_true(child->pathQuality > grandChild->pathQuality);'), (9, 1, u'+            Assert_true(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            Assert_true(child->pathQuality > grandChild->pathQuality);'), (9, 1, u'+            Assert_true(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            Assert_true(child->pathQuality > grandChild->pathQuality);'), (9, 1, u'+            Assert_true(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            Assert_true(child->pathQuality > grandChild->pathQuality);'), (7, 1, u'+            Assert_true(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            Assert_true(child->pathQuality > grandChild->pathQuality);'), (7, 1, u'+            Assert_true(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            Assert_true(child->pathQuality > grandChild->pathQuality);'), (7, 1, u'+            Assert_true(Node_getReach(child) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_true(link->parent->pathQuality >= grandChild->pathQuality);'), (3, 1, u'+                    Assert_true(Node_getReach(link->parent) >= Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_true(link->parent->pathQuality >= grandChild->pathQuality);'), (3, 1, u'+                    Assert_true(Node_getReach(link->parent) >= Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_true(link->parent->pathQuality >= grandChild->pathQuality);'), (3, 1, u'+                    Assert_true(Node_getReach(link->parent) >= Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-                            Assert_true(link->parent->pathQuality > grandChild->pathQuality);'), (9, 1, u'+                            Assert_true(Node_getReach(link->parent) > Node_getReach(grandChild));'), (17, 2, u'-                        Assert_true(link->child->pathQuality > grandChild->pathQuality);'), (18, 1, u'+                        Assert_true(Node_getReach(link->child) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 7
Total del: 7
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-                            Assert_true(link->parent->pathQuality > grandChild->pathQuality);'), (9, 1, u'+                            Assert_true(Node_getReach(link->parent) > Node_getReach(grandChild));'), (17, 2, u'-                        Assert_true(link->child->pathQuality > grandChild->pathQuality);'), (18, 1, u'+                        Assert_true(Node_getReach(link->child) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-                            Assert_true(link->parent->pathQuality > grandChild->pathQuality);'), (9, 1, u'+                            Assert_true(Node_getReach(link->parent) > Node_getReach(grandChild));'), (17, 2, u'-                        Assert_true(link->child->pathQuality > grandChild->pathQuality);'), (18, 1, u'+                        Assert_true(Node_getReach(link->child) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (3, 1, u'+                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (7, 2, u'-                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (9, 1, u'+                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (12, 2, u'-            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (14, 1, u'+            Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (3, 1, u'+                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (7, 2, u'-                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (9, 1, u'+                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (12, 2, u'-            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (14, 1, u'+            Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (3, 1, u'+                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (7, 2, u'-                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (9, 1, u'+                Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));'), (12, 2, u'-            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (14, 1, u'+            Assert_true(Node_getReach(lcg->parent) > Node_getReach(grandChild));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-            Assert_always(closestKnown != closest);'), (57, 1, u'+        Assert_always(closestKnown != closest);')]
===========================================
===========================================
Total add: 33
Total del: 35
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-            Assert_always(closestKnown != closest);'), (57, 1, u'+        Assert_always(closestKnown != closest);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-            Assert_always(closestKnown != closest);'), (57, 1, u'+        Assert_always(closestKnown != closest);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            Assert_always(link);')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            Assert_always(link);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            Assert_always(link);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-            Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (12, 2, u'-            Assert_true(childToGrandchild != 1);'), (15, 1, u'+            Assert_true(child->pathQuality > grandChild->pathQuality);'), (31, 1, u'+        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (32, 1, u'+        Assert_true(childToGrandchild != 1);'), (101, 2, u'-                            Assert_always(linkToGrandchild);'), (118, 1, u'+            Assert_true(child->pathQuality > grandChild->pathQuality);'), (124, 1, u'+                Assert_true(parentLink->child != lcg->parent);'), (138, 1, u'+                    Assert_always(link);'), (142, 1, u'+                    Assert_true(link->parent->pathQuality >= grandChild->pathQuality);'), (151, 1, u'+                            Assert_true(link->parent->pathQuality > grandChild->pathQuality);'), (155, 2, u'-                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (159, 2, u'-                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (161, 1, u'+                        Assert_true(link->child->pathQuality > grandChild->pathQuality);'), (164, 2, u'-                    Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (175, 1, u'+                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (179, 1, u'+                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (182, 1, u'+            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Total add: 106
Total del: 69
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-            Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (12, 2, u'-            Assert_true(childToGrandchild != 1);'), (15, 1, u'+            Assert_true(child->pathQuality > grandChild->pathQuality);'), (31, 1, u'+        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (32, 1, u'+        Assert_true(childToGrandchild != 1);'), (101, 2, u'-                            Assert_always(linkToGrandchild);'), (118, 1, u'+            Assert_true(child->pathQuality > grandChild->pathQuality);'), (124, 1, u'+                Assert_true(parentLink->child != lcg->parent);'), (138, 1, u'+                    Assert_always(link);'), (142, 1, u'+                    Assert_true(link->parent->pathQuality >= grandChild->pathQuality);'), (151, 1, u'+                            Assert_true(link->parent->pathQuality > grandChild->pathQuality);'), (155, 2, u'-                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (159, 2, u'-                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (161, 1, u'+                        Assert_true(link->child->pathQuality > grandChild->pathQuality);'), (164, 2, u'-                    Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (175, 1, u'+                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (179, 1, u'+                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (182, 1, u'+            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-            Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (12, 2, u'-            Assert_true(childToGrandchild != 1);'), (15, 1, u'+            Assert_true(child->pathQuality > grandChild->pathQuality);'), (31, 1, u'+        Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (32, 1, u'+        Assert_true(childToGrandchild != 1);'), (101, 2, u'-                            Assert_always(linkToGrandchild);'), (118, 1, u'+            Assert_true(child->pathQuality > grandChild->pathQuality);'), (124, 1, u'+                Assert_true(parentLink->child != lcg->parent);'), (138, 1, u'+                    Assert_always(link);'), (142, 1, u'+                    Assert_true(link->parent->pathQuality >= grandChild->pathQuality);'), (151, 1, u'+                            Assert_true(link->parent->pathQuality > grandChild->pathQuality);'), (155, 2, u'-                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (159, 2, u'-                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (161, 1, u'+                        Assert_true(link->child->pathQuality > grandChild->pathQuality);'), (164, 2, u'-                    Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (175, 1, u'+                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (179, 1, u'+                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (182, 1, u'+            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-                            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Total add: 1
Total del: 8
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-                            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-                            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-                            Assert_true(lcg != store->selfLink);'), (6, 2, u'-                            Assert_true(oldLcg != lcg);'), (20, 1, u'+                            Assert_always(linkToGrandchild);'), (23, 1, u'+                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (27, 1, u'+                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (29, 2, u'-                    Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (31, 1, u'+                    Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Total add: 21
Total del: 7
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-                            Assert_true(lcg != store->selfLink);'), (6, 2, u'-                            Assert_true(oldLcg != lcg);'), (20, 1, u'+                            Assert_always(linkToGrandchild);'), (23, 1, u'+                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (27, 1, u'+                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (29, 2, u'-                    Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (31, 1, u'+                    Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-                            Assert_true(lcg != store->selfLink);'), (6, 2, u'-                            Assert_true(oldLcg != lcg);'), (20, 1, u'+                            Assert_always(linkToGrandchild);'), (23, 1, u'+                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (27, 1, u'+                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (29, 2, u'-                    Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (31, 1, u'+                    Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-                                Assert_true(lcg != store->selfLink);'), (12, 2, u'-                                Assert_true(oldLcg != lcg);'), (14, 2, u'-                            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Total add: 1
Total del: 15
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-                                Assert_true(lcg != store->selfLink);'), (12, 2, u'-                                Assert_true(oldLcg != lcg);'), (14, 2, u'-                            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-                                Assert_true(lcg != store->selfLink);'), (12, 2, u'-                                Assert_true(oldLcg != lcg);'), (14, 2, u'-                            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+                            Assert_true(lcg != store->selfLink);'), (13, 1, u'+                            Assert_true(oldLcg != lcg);')]
===========================================
===========================================
Total add: 13
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+                            Assert_true(lcg != store->selfLink);'), (13, 1, u'+                            Assert_true(oldLcg != lcg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+                            Assert_true(lcg != store->selfLink);'), (13, 1, u'+                            Assert_true(oldLcg != lcg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-                            Assert_always(linkToGrandchild);'), (31, 1, u'+                                Assert_true(lcg != store->selfLink);'), (33, 1, u'+                                Assert_true(oldLcg != lcg);'), (35, 1, u'+                            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (39, 1, u'+                            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (43, 2, u'-                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (47, 2, u'-                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Total add: 20
Total del: 25
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-                            Assert_always(linkToGrandchild);'), (31, 1, u'+                                Assert_true(lcg != store->selfLink);'), (33, 1, u'+                                Assert_true(oldLcg != lcg);'), (35, 1, u'+                            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (39, 1, u'+                            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (43, 2, u'-                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (47, 2, u'-                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-                            Assert_always(linkToGrandchild);'), (31, 1, u'+                                Assert_true(lcg != store->selfLink);'), (33, 1, u'+                                Assert_true(oldLcg != lcg);'), (35, 1, u'+                            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (39, 1, u'+                            Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (43, 2, u'-                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (47, 2, u'-                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_fileLine(link->cannonicalLabel < UINT64_MAX && link->cannonicalLabel > 0,')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: _checkNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_fileLine(link->cannonicalLabel < UINT64_MAX && link->cannonicalLabel > 0,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_fileLine(link->cannonicalLabel < UINT64_MAX && link->cannonicalLabel > 0,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-    Assert_failure("%s:%d Fatal error: [%s] totalBytes [%ld] remaining [%ld]",')]
===========================================
===========================================
Total add: 18
Total del: 6
Header: failure
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-    Assert_failure("%s:%d Fatal error: [%s] totalBytes [%ld] remaining [%ld]",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-    Assert_failure("%s:%d Fatal error: [%s] totalBytes [%ld] remaining [%ld]",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_fileLine(link->child != node || link == store->selfLink, file, line);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _checkNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_fileLine(link->child != node || link == store->selfLink, file, line);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_fileLine(link->child != node || link == store->selfLink, file, line);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(link->linkAddr == (uintptr_t)link, file, line);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: _checkNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(link->linkAddr == (uintptr_t)link, file, line);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(link->linkAddr == (uintptr_t)link, file, line);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-                Assert_true(lcg->child == grandChild);'), (12, 2, u'-                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Total add: 0
Total del: 14
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-                Assert_true(lcg->child == grandChild);'), (12, 2, u'-                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-                Assert_true(lcg->child == grandChild);'), (12, 2, u'-                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                        Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(pathParentChild != findClosest_INVALID);')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(pathParentChild != findClosest_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_always(pathParentChild != findClosest_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+                            Assert_always(linkToGrandchild);'), (48, 1, u'+                    Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Total add: 51
Total del: 0
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+                            Assert_always(linkToGrandchild);'), (48, 1, u'+                    Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+                            Assert_always(linkToGrandchild);'), (48, 1, u'+                    Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(Hex_encode(keyHex, 255, (uint8_t*)key, key->keySize+4));')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: peerForKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(Hex_encode(keyHex, 255, (uint8_t*)key, key->keySize+4));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(Hex_encode(keyHex, 255, (uint8_t*)key, key->keySize+4));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(Hex_encode(buff, 255, m->bytes, context->pub.addr->addrLen));')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: incoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(Hex_encode(buff, 255, m->bytes, context->pub.addr->addrLen));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(Hex_encode(buff, 255, m->bytes, context->pub.addr->addrLen));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(Hex_encode(keyHex, 255, (uint8_t*)key, key->keySize+4));')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: peerForKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(Hex_encode(keyHex, 255, (uint8_t*)key, key->keySize+4));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(Hex_encode(keyHex, 255, (uint8_t*)key, key->keySize+4));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(Hex_encode(buff, 255, m->bytes, context->pub.addr->addrLen));')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: incoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(Hex_encode(buff, 255, m->bytes, context->pub.addr->addrLen));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(Hex_encode(buff, 255, m->bytes, context->pub.addr->addrLen));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(child->address.protocolVersion);'), (3, 2, u'-    Assert_true(EncodingScheme_equals(scheme, child->encodingScheme));//TODO')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(child->address.protocolVersion);'), (3, 2, u'-    Assert_true(EncodingScheme_equals(scheme, child->encodingScheme));//TODO')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(child->address.protocolVersion);'), (3, 2, u'-    Assert_true(EncodingScheme_equals(scheme, child->encodingScheme));//TODO')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->pathQuality != 0, file, line);'), (4, 1, u'+        Assert_fileLine(node->pathQuality > 512, file, line);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: _checkNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->pathQuality != 0, file, line);'), (4, 1, u'+        Assert_fileLine(node->pathQuality > 512, file, line);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node->pathQuality != 0, file, line);'), (4, 1, u'+        Assert_fileLine(node->pathQuality > 512, file, line);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(newReach > 1023);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: handleGoodNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(newReach > 1023);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(newReach > 1023);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(!newReach || newReach > 1023);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(!newReach || newReach > 1023);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(!newReach || newReach > 1023);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(153, 1, u'+  ASSERT(cx->state != s_dead);'), (212, 1, u'+  ASSERT(incoming->rdstate == c_done);'), (213, 1, u'+  ASSERT(incoming->wrstate == c_stop);'), (268, 1, u'+  ASSERT(incoming->rdstate == c_stop);'), (269, 1, u'+  ASSERT(incoming->wrstate == c_done);'), (292, 1, u'+  ASSERT(incoming->rdstate == c_done);'), (293, 1, u'+  ASSERT(incoming->wrstate == c_stop);'), (294, 1, u'+  ASSERT(outgoing->rdstate == c_stop);'), (295, 1, u'+  ASSERT(outgoing->wrstate == c_stop);'), (334, 1, u'+  ASSERT(parser->cmd == s5_cmd_tcp_connect);'), (370, 1, u'+  ASSERT(incoming->rdstate == c_stop);'), (371, 1, u'+  ASSERT(incoming->wrstate == c_stop);'), (372, 1, u'+  ASSERT(outgoing->rdstate == c_stop);'), (373, 1, u'+  ASSERT(outgoing->wrstate == c_stop);'), (408, 1, u'+  ASSERT(incoming->rdstate == c_stop);'), (409, 1, u'+  ASSERT(incoming->wrstate == c_stop);'), (410, 1, u'+  ASSERT(outgoing->rdstate == c_stop);'), (411, 1, u'+  ASSERT(outgoing->wrstate == c_stop);'), (440, 1, u'+  ASSERT(incoming->rdstate == c_stop);'), (441, 1, u'+  ASSERT(incoming->wrstate == c_stop);'), (442, 1, u'+  ASSERT(outgoing->rdstate == c_stop);'), (443, 1, u'+  ASSERT(outgoing->wrstate == c_stop);'), (491, 1, u'+  ASSERT(incoming->rdstate == c_stop);'), (492, 1, u'+  ASSERT(incoming->wrstate == c_done);'), (493, 1, u'+  ASSERT(outgoing->rdstate == c_stop);'), (494, 1, u'+  ASSERT(outgoing->wrstate == c_stop);'), (542, 1, u'+  ASSERT(cx->state >= s_almost_dead_0);'), (635, 1, u'+  ASSERT(c->t.addr.sa_family == AF_INET ||'), (657, 1, u'+  ASSERT(c->rdstate == c_stop);'), (669, 1, u'+  ASSERT(c->t.buf == buf->base);'), (670, 1, u'+  ASSERT(c->rdstate == c_busy);'), (682, 1, u'+  ASSERT(c->rdstate == c_busy);'), (690, 1, u'+  ASSERT(c->wrstate == c_stop || c->wrstate == c_done);'), (715, 1, u'+  ASSERT(c->wrstate == c_busy);'), (722, 1, u'+  ASSERT(c->rdstate != c_dead);'), (723, 1, u'+  ASSERT(c->wrstate != c_dead);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!uv__is_active(handle));')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: uv__make_close_pending
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!uv__is_active(handle));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!uv__is_active(handle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+  assert(fd > -1);  /* Catch uninitialized io_watcher.fd bugs. */'), (30, 1, u'+  assert(fd > STDERR_FILENO);  /* Catch stdio close bugs. */')]
===========================================
===========================================
Total add: 28
Total del: 7
Header: skip:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+  assert(fd > -1);  /* Catch uninitialized io_watcher.fd bugs. */'), (30, 1, u'+  assert(fd > STDERR_FILENO);  /* Catch stdio close bugs. */')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+  assert(fd > -1);  /* Catch uninitialized io_watcher.fd bugs. */'), (30, 1, u'+  assert(fd > STDERR_FILENO);  /* Catch stdio close bugs. */')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(87, 2, u'-  assert(0 && "implement me");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 2, u'-  assert(ACCESS_ONCE(CFRunLoopRef, loop->cf_loop) != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(loop->cf_loop != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 20
Header: uv__platform_loop_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(loop->cf_loop != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(loop->cf_loop != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 2, u'-  assert(loop->cf_loop != NULL);')]
===========================================
===========================================
Total add: 4
Total del: 75
Header: uv__platform_loop_delete
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 2, u'-  assert(loop->cf_loop != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 2, u'-  assert(loop->cf_loop != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+  assert(err == KERN_SUCCESS);')]
===========================================
===========================================
Total add: 16
Total del: 14
Header: uv_loadavg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+  assert(err == KERN_SUCCESS);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+  assert(err == KERN_SUCCESS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(req->errorno == 0);'), (12, 1, u'+    assert(req->result == 0);')]
===========================================
===========================================
Total add: 3
Total del: 9
Header: uv__fs_done
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(req->errorno == 0);'), (12, 1, u'+    assert(req->result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(req->errorno == 0);'), (12, 1, u'+    assert(req->result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  assert(events != NULL || err != 0);')]
===========================================
===========================================
Total add: 21
Total del: 7
Header: uv__fsevents_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  assert(events != NULL || err != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  assert(events != NULL || err != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+  assert(state != NULL);')]
===========================================
===========================================
Total add: 63
Total del: 79
Header: uv__fsevents_event_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+  assert(state != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+  assert(state != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+  assert(ref != NULL);'), (122, 1, u'+      assert(q != &state->fsevent_handles);'), (125, 1, u'+      assert(curr->realpath != NULL);'), (471, 1, u'+  assert(state != NULL);')]
===========================================
===========================================
Total add: 481
Total del: 20
Header: uv__fsevents_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+  assert(ref != NULL);'), (122, 1, u'+      assert(q != &state->fsevent_handles);'), (125, 1, u'+      assert(curr->realpath != NULL);'), (471, 1, u'+  assert(state != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+  assert(ref != NULL);'), (122, 1, u'+      assert(q != &state->fsevent_handles);'), (125, 1, u'+      assert(curr->realpath != NULL);'), (471, 1, u'+  assert(state != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  assert(handle != NULL);')]
===========================================
===========================================
Total add: 30
Total del: 4
Header: uv__fsevents_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  assert(handle != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  assert(handle != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+  assert(handle != NULL);')]
===========================================
===========================================
Total add: 23
Total del: 13
Header: uv__fsevents_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+  assert(handle != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+  assert(handle != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ngx_queue_empty(&loop->watcher_queue));'), (3, 1, u'+    assert(QUEUE_EMPTY(&loop->watcher_queue));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: uv__io_poll
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ngx_queue_empty(&loop->watcher_queue));'), (3, 1, u'+    assert(QUEUE_EMPTY(&loop->watcher_queue));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ngx_queue_empty(&loop->watcher_queue));'), (3, 1, u'+    assert(QUEUE_EMPTY(&loop->watcher_queue));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(loop->watchers != NULL);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: uv__io_poll
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(loop->watchers != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(loop->watchers != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(loop->watchers != NULL);')]
===========================================
===========================================
Total add: 19
Total del: 0
Header: update_timeout:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(loop->watchers != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(loop->watchers != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(loop->watchers != NULL);')]
===========================================
===========================================
Total add: 19
Total del: 0
Header: uv__platform_loop_delete
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(loop->watchers != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(loop->watchers != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ngx_queue_empty(&loop->watcher_queue));'), (3, 1, u'+    assert(QUEUE_EMPTY(&loop->watcher_queue));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: uv__io_poll
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ngx_queue_empty(&loop->watcher_queue));'), (3, 1, u'+    assert(QUEUE_EMPTY(&loop->watcher_queue));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ngx_queue_empty(&loop->watcher_queue));'), (3, 1, u'+    assert(QUEUE_EMPTY(&loop->watcher_queue));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(loop->watchers != NULL);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: uv__io_poll
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(loop->watchers != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(loop->watchers != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(r == 1);'), (8, 2, u'-      assert(sscanf(buf, "cpu%u ", &n) == 1 && n == num);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: read_times
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(r == 1);'), (8, 2, u'-      assert(sscanf(buf, "cpu%u ", &n) == 1 && n == num);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(r == 1);'), (8, 2, u'-      assert(sscanf(buf, "cpu%u ", &n) == 1 && n == num);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(num == numcpus);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: read_times
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(num == numcpus);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(num == numcpus);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ngx_queue_empty(&loop->wq) && "thread pool work queue not empty!");'), (3, 1, u'+  assert(QUEUE_EMPTY(&loop->wq) && "thread pool work queue not empty!");'), (4, 1, u'+  assert(!uv__has_active_reqs(loop));')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: uv__loop_delete
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ngx_queue_empty(&loop->wq) && "thread pool work queue not empty!");'), (3, 1, u'+  assert(QUEUE_EMPTY(&loop->wq) && "thread pool work queue not empty!");'), (4, 1, u'+  assert(!uv__has_active_reqs(loop));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ngx_queue_empty(&loop->wq) && "thread pool work queue not empty!");'), (3, 1, u'+  assert(QUEUE_EMPTY(&loop->wq) && "thread pool work queue not empty!");'), (4, 1, u'+  assert(!uv__has_active_reqs(loop));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ngx_queue_empty(&loop->pending_queue));'), (3, 2, u'-  assert(ngx_queue_empty(&loop->watcher_queue));'), (4, 1, u'+  assert(QUEUE_EMPTY(&loop->pending_queue));'), (5, 1, u'+  assert(QUEUE_EMPTY(&loop->watcher_queue));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: uv__loop_delete
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ngx_queue_empty(&loop->pending_queue));'), (3, 2, u'-  assert(ngx_queue_empty(&loop->watcher_queue));'), (4, 1, u'+  assert(QUEUE_EMPTY(&loop->pending_queue));'), (5, 1, u'+  assert(QUEUE_EMPTY(&loop->watcher_queue));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ngx_queue_empty(&loop->pending_queue));'), (3, 2, u'-  assert(ngx_queue_empty(&loop->watcher_queue));'), (4, 1, u'+  assert(QUEUE_EMPTY(&loop->pending_queue));'), (5, 1, u'+  assert(QUEUE_EMPTY(&loop->watcher_queue));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-      assert(pipe_fname != NULL);'), (18, 1, u'+    assert(pipe_fname != NULL);')]
===========================================
===========================================
Total add: 8
Total del: 14
Header: uv_pipe_bind
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-      assert(pipe_fname != NULL);'), (18, 1, u'+    assert(pipe_fname != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-      assert(pipe_fname != NULL);'), (18, 1, u'+    assert(pipe_fname != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-  assert(uv__stream_fd(handle) >= 0);')]
===========================================
===========================================
Total add: 8
Total del: 21
Header: out:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-  assert(uv__stream_fd(handle) >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-  assert(uv__stream_fd(handle) >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-  assert(pipe->type == UV_NAMED_PIPE);')]
===========================================
===========================================
Total add: 0
Total del: 31
Header: out:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-  assert(pipe->type == UV_NAMED_PIPE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-  assert(pipe->type == UV_NAMED_PIPE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  assert(options.file != NULL);'), (11, 2, u'-  assert(!(options.flags & ~(UV_PROCESS_DETACHED |'), (16, 1, u'+  assert(options->file != NULL);'), (17, 1, u'+  assert(!(options->flags & ~(UV_PROCESS_DETACHED |')]
===========================================
===========================================
Total add: 11
Total del: 9
Header: uv_spawn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  assert(options.file != NULL);'), (11, 2, u'-  assert(!(options.flags & ~(UV_PROCESS_DETACHED |'), (16, 1, u'+  assert(options->file != NULL);'), (17, 1, u'+  assert(!(options->flags & ~(UV_PROCESS_DETACHED |')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  assert(options.file != NULL);'), (11, 2, u'-  assert(!(options.flags & ~(UV_PROCESS_DETACHED |'), (16, 1, u'+  assert(options->file != NULL);'), (17, 1, u'+  assert(!(options->flags & ~(UV_PROCESS_DETACHED |')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+  assert(r == 1);')]
===========================================
===========================================
Total add: 25
Total del: 0
Header: uv__stream_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+  assert(r == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+  assert(r == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-  assert(r == 1);')]
===========================================
===========================================
Total add: 0
Total del: 19
Header: uv__stream_osx_select
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-  assert(r == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-  assert(r == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-      assert(0);'), (25, 1, u'+    assert(0);')]
===========================================
===========================================
Total add: 12
Total del: 12
Header: out:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-      assert(0);'), (25, 1, u'+    assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-      assert(0);'), (25, 1, u'+    assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(ngx_queue_empty(&stream->write_queue));'), (5, 2, u'-  assert(stream->write_queue_size == 0);'), (7, 1, u'+  assert(QUEUE_EMPTY(&stream->write_queue));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: uv__drain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(ngx_queue_empty(&stream->write_queue));'), (5, 2, u'-  assert(stream->write_queue_size == 0);'), (7, 1, u'+  assert(QUEUE_EMPTY(&stream->write_queue));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(ngx_queue_empty(&stream->write_queue));'), (5, 2, u'-  assert(stream->write_queue_size == 0);'), (7, 1, u'+  assert(QUEUE_EMPTY(&stream->write_queue));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(req->bufs != NULL);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: uv__write_req_size
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(req->bufs != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(req->bufs != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(stream->write_queue_size == 0);')]
===========================================
===========================================
Total add: 3
Total del: 5
Header: start:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(stream->write_queue_size == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(stream->write_queue_size == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(req->write_index < req->bufcnt);'), (3, 1, u'+      assert(req->write_index < req->nbufs);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: start:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(req->write_index < req->bufcnt);'), (3, 1, u'+      assert(req->write_index < req->nbufs);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(req->write_index < req->bufcnt);'), (3, 1, u'+      assert(req->write_index < req->nbufs);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-  assert(ngx_queue_empty(&stream->write_completed_queue));'), (33, 1, u'+  assert(QUEUE_EMPTY(&stream->write_completed_queue));')]
===========================================
===========================================
Total add: 16
Total del: 11
Header: uv__write_callbacks
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-  assert(ngx_queue_empty(&stream->write_completed_queue));'), (33, 1, u'+  assert(QUEUE_EMPTY(&stream->write_completed_queue));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-  assert(ngx_queue_empty(&stream->write_completed_queue));'), (33, 1, u'+  assert(QUEUE_EMPTY(&stream->write_completed_queue));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(stream->alloc_cb);'), (4, 1, u'+    assert(stream->alloc_cb != NULL);'), (6, 2, u'-    assert(buf.len > 0);'), (7, 2, u'-    assert(buf.base);'), (15, 1, u'+    assert(buf.base != NULL);')]
===========================================
===========================================
Total add: 9
Total del: 4
Header: uv__read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(stream->alloc_cb);'), (4, 1, u'+    assert(stream->alloc_cb != NULL);'), (6, 2, u'-    assert(buf.len > 0);'), (7, 2, u'-    assert(buf.base);'), (15, 1, u'+    assert(buf.base != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(stream->alloc_cb);'), (4, 1, u'+    assert(stream->alloc_cb != NULL);'), (6, 2, u'-    assert(buf.len > 0);'), (7, 2, u'-    assert(buf.base);'), (15, 1, u'+    assert(buf.base != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(uv__stream_fd(stream) >= 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: uv_shutdown
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(uv__stream_fd(stream) >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(uv__stream_fd(stream) >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(uv__stream_fd(stream) >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: uv_shutdown
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(uv__stream_fd(stream) >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(uv__stream_fd(stream) >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(uv__stream_fd(stream) >= 0);'), (4, 1, u'+  assert(uv__stream_fd(stream) >= 0);'), (30, 2, u'-    assert(uv__stream_fd(stream) >= 0);')]
===========================================
===========================================
Total add: 22
Total del: 6
Header: uv__stream_io
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(uv__stream_fd(stream) >= 0);'), (4, 1, u'+  assert(uv__stream_fd(stream) >= 0);'), (30, 2, u'-    assert(uv__stream_fd(stream) >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(uv__stream_fd(stream) >= 0);'), (4, 1, u'+  assert(uv__stream_fd(stream) >= 0);'), (30, 2, u'-    assert(uv__stream_fd(stream) >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(bufcnt > 0);'), (3, 1, u'+  assert(nbufs > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: uv_write2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(bufcnt > 0);'), (3, 1, u'+  assert(nbufs > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(bufcnt > 0);'), (3, 1, u'+  assert(nbufs > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  assert(!uv__io_active(&stream->io_watcher, UV__POLLOUT) ||')]
===========================================
===========================================
Total add: 14
Total del: 8
Header: uv_read2_start
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  assert(!uv__io_active(&stream->io_watcher, UV__POLLOUT) ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  assert(!uv__io_active(&stream->io_watcher, UV__POLLOUT) ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(0 && "implement me");')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: uv__stream_close
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(0 && "implement me");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(0 && "implement me");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(loop->watchers != NULL);')]
===========================================
===========================================
Total add: 19
Total del: 0
Header: uv__platform_loop_delete
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(loop->watchers != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(loop->watchers != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ngx_queue_empty(&loop->watcher_queue));'), (3, 1, u'+    assert(QUEUE_EMPTY(&loop->watcher_queue));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: uv__io_poll
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ngx_queue_empty(&loop->watcher_queue));'), (3, 1, u'+    assert(QUEUE_EMPTY(&loop->watcher_queue));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ngx_queue_empty(&loop->watcher_queue));'), (3, 1, u'+    assert(QUEUE_EMPTY(&loop->watcher_queue));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(loop->watchers != NULL);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: uv__io_poll
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(loop->watchers != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(loop->watchers != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(size == nbytes);')]
===========================================
===========================================
Total add: 0
Total del: 13
Header: uv__udp_run_pending
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(size == nbytes);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(size == nbytes);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(buf.len > 0);')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: uv__udp_recvmsg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(buf.len > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(buf.len > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!ngx_queue_empty(&handle->write_queue)'), (4, 1, u'+  assert(!QUEUE_EMPTY(&handle->write_queue)')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: uv__udp_sendmsg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!ngx_queue_empty(&handle->write_queue)'), (4, 1, u'+  assert(!QUEUE_EMPTY(&handle->write_queue)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!ngx_queue_empty(&handle->write_queue)'), (4, 1, u'+  assert(!QUEUE_EMPTY(&handle->write_queue)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  assert(bufcnt > 0);'), (21, 1, u'+  assert(nbufs > 0);')]
===========================================
===========================================
Total add: 13
Total del: 10
Header: uv__udp_maybe_deferred_bind
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  assert(bufcnt > 0);'), (21, 1, u'+  assert(nbufs > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  assert(bufcnt > 0);'), (21, 1, u'+  assert(nbufs > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+  assert(!"unknown EAI_* error code");')]
===========================================
===========================================
Total add: 62
Total del: 0
Header: uv_stop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+  assert(!"unknown EAI_* error code");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+  assert(!"unknown EAI_* error code");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+__declspec( thread ) int uv__crt_assert_enabled = TRUE;'), (9, 1, u'+  if (uv__crt_assert_enabled || report_type != _CRT_ASSERT)')]
===========================================
===========================================
Total add: 26
Total del: 0
Header: static uv_once_t uv_default_loop_init_guard_ = UV_ONCE_INIT;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+__declspec( thread ) int uv__crt_assert_enabled = TRUE;'), (9, 1, u'+  if (uv__crt_assert_enabled || report_type != _CRT_ASSERT)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+__declspec( thread ) int uv__crt_assert_enabled = TRUE;'), (9, 1, u'+  if (uv__crt_assert_enabled || report_type != _CRT_ASSERT)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      assert(buf.len > 0);'), (13, 1, u'+      assert(buf.base != NULL);')]
===========================================
===========================================
Total add: 10
Total del: 2
Header: uv_process_pipe_read_req
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      assert(buf.len > 0);'), (13, 1, u'+      assert(buf.base != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      assert(buf.len > 0);'), (13, 1, u'+      assert(buf.base != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(req->pipeHandle == INVALID_HANDLE_VALUE);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: uv_process_pipe_accept_req
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(req->pipeHandle == INVALID_HANDLE_VALUE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(req->pipeHandle == INVALID_HANDLE_VALUE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-  assert(options.file != NULL);'), (19, 2, u'-  assert(!(options.flags & ~(UV_PROCESS_DETACHED |'), (24, 1, u'+  assert(options->file != NULL);'), (25, 1, u'+  assert(!(options->flags & ~(UV_PROCESS_DETACHED |')]
===========================================
===========================================
Total add: 22
Total del: 23
Header: uv_spawn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-  assert(options.file != NULL);'), (19, 2, u'-  assert(!(options.flags & ~(UV_PROCESS_DETACHED |'), (24, 1, u'+  assert(options->file != NULL);'), (25, 1, u'+  assert(!(options->flags & ~(UV_PROCESS_DETACHED |')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-  assert(options.file != NULL);'), (19, 2, u'-  assert(!(options.flags & ~(UV_PROCESS_DETACHED |'), (24, 1, u'+  assert(options->file != NULL);'), (25, 1, u'+  assert(!(options->flags & ~(UV_PROCESS_DETACHED |')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(85, 1, u'+  assert(!err);')]
===========================================
===========================================
Total add: 53
Total del: 31
Header: uv_spawn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(85, 1, u'+  assert(!err);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(85, 1, u'+  assert(!err);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(handle->read_buffer.len > 0);'), (9, 1, u'+    assert(handle->read_buffer.base != NULL);')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: uv_tcp_queue_read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(handle->read_buffer.len > 0);'), (9, 1, u'+    assert(handle->read_buffer.base != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(handle->read_buffer.len > 0);'), (9, 1, u'+    assert(handle->read_buffer.base != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      assert(buf.len > 0);'), (9, 1, u'+      assert(buf.base != NULL);')]
===========================================
===========================================
Total add: 7
Total del: 2
Header: uv_process_tcp_read_req
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      assert(buf.len > 0);'), (9, 1, u'+      assert(buf.base != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      assert(buf.len > 0);'), (9, 1, u'+      assert(buf.base != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-  assert(handle->read_line_buffer.len > 0);')]
===========================================
===========================================
Total add: 7
Total del: 2
Header: uv_tty_queue_read_line
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-  assert(handle->read_line_buffer.len > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-  assert(handle->read_line_buffer.len > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+          assert(buf.base != NULL);')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: uv_process_tty_read_raw_req
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+          assert(buf.base != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+          assert(buf.base != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(handle->recv_buffer.len > 0);'), (9, 1, u'+    assert(handle->recv_buffer.base != NULL);')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: uv_udp_queue_recv
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(handle->recv_buffer.len > 0);'), (9, 1, u'+    assert(handle->recv_buffer.base != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(handle->recv_buffer.len > 0);'), (9, 1, u'+    assert(handle->recv_buffer.base != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(buf.len > 0);'), (9, 1, u'+    assert(buf.base != NULL);')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: uv_process_udp_recv_req
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(buf.len > 0);'), (9, 1, u'+    assert(buf.base != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(buf.len > 0);'), (9, 1, u'+    assert(buf.base != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(0 == uv_async_init(uv_default_loop(), &ctx->main_async, main_async_cb));'), (3, 1, u'+    ASSERT(0 == uv_async_init(uv_default_loop(),')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: test_async
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(0 == uv_async_init(uv_default_loop(), &ctx->main_async, main_async_cb));'), (3, 1, u'+    ASSERT(0 == uv_async_init(uv_default_loop(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(0 == uv_async_init(uv_default_loop(), &ctx->main_async, main_async_cb));'), (3, 1, u'+    ASSERT(0 == uv_async_init(uv_default_loop(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(0 == uv_tcp_bind((uv_tcp_t*) &ctx.server_handle, listen_addr));'), (3, 1, u'+    ASSERT(0 == uv_tcp_bind((uv_tcp_t*) &ctx.server_handle,')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: send_listen_handles
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(0 == uv_tcp_bind((uv_tcp_t*) &ctx.server_handle, listen_addr));'), (3, 1, u'+    ASSERT(0 == uv_tcp_bind((uv_tcp_t*) &ctx.server_handle,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(0 == uv_tcp_bind((uv_tcp_t*) &ctx.server_handle, listen_addr));'), (3, 1, u'+    ASSERT(0 == uv_tcp_bind((uv_tcp_t*) &ctx.server_handle,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(nread == -1);'), (4, 2, u'-  ASSERT(uv_last_error(handle->loop).code == UV_EOF);'), (8, 1, u'+  ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: sv_alloc_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(nread == -1);'), (4, 2, u'-  ASSERT(uv_last_error(handle->loop).code == UV_EOF);'), (8, 1, u'+  ASSERT(nread == UV_EOF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(nread == -1);'), (4, 2, u'-  ASSERT(uv_last_error(handle->loop).code == UV_EOF);'), (8, 1, u'+  ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &listen_addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test_tcp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &listen_addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &listen_addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(uv_last_error(loop).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: pinger_read_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(uv_last_error(loop).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(uv_last_error(loop).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(buf.base[i] == PING[pinger->state]);'), (3, 1, u'+    ASSERT(buf->base[i] == PING[pinger->state]);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: pinger_read_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(buf.base[i] == PING[pinger->state]);'), (3, 1, u'+    ASSERT(buf->base[i] == PING[pinger->state]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(buf.base[i] == PING[pinger->state]);'), (3, 1, u'+    ASSERT(buf->base[i] == PING[pinger->state]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", 0, &client_addr));'), (12, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: pinger_connect_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", 0, &client_addr));'), (12, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", 0, &client_addr));'), (12, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_tcp_bind(&pinger->tcp,')]
===========================================
===========================================
Total add: 7
Total del: 2
Header: pinger_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_tcp_bind(&pinger->tcp,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_tcp_bind(&pinger->tcp,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: tcp_make_connect
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &listen_addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: HELPER_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &listen_addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &listen_addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &connect_addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: tcp_pump
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &connect_addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &connect_addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: BENCHMARK_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (9, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
Total add: 6
Total del: 3
Header: static int exiting;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (9, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (9, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(status == -1);'), (3, 2, u'-    ASSERT(uv_last_error(req->handle->loop).code == UV_ECANCELED);'), (4, 1, u'+    ASSERT(status == UV_ECANCELED);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: send_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(status == -1);'), (3, 2, u'-    ASSERT(uv_last_error(req->handle->loop).code == UV_ECANCELED);'), (4, 1, u'+    ASSERT(status == UV_ECANCELED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(status == -1);'), (3, 2, u'-    ASSERT(uv_last_error(req->handle->loop).code == UV_ECANCELED);'), (4, 1, u'+    ASSERT(status == UV_ECANCELED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(uv_last_error(handle->loop).code == UV_ECANCELED);'), (5, 1, u'+    ASSERT(nread == UV_ECANCELED);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: recv_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(uv_last_error(handle->loop).code == UV_ECANCELED);'), (5, 1, u'+    ASSERT(nread == UV_ECANCELED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(uv_last_error(handle->loop).code == UV_ECANCELED);'), (5, 1, u'+    ASSERT(nread == UV_ECANCELED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!memcmp(buf.base, EXPECTED, nread));'), (3, 1, u'+  ASSERT(!memcmp(buf->base, EXPECTED, nread));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: recv_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!memcmp(buf.base, EXPECTED, nread));'), (3, 1, u'+  ASSERT(!memcmp(buf->base, EXPECTED, nread));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!memcmp(buf.base, EXPECTED, nread));'), (3, 1, u'+  ASSERT(!memcmp(buf->base, EXPECTED, nread));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    ASSERT(0 == uv_ip4_addr("0.0.0.0", BASE_PORT + i, &addr));'), (6, 2, u'-    ASSERT(0 == uv_udp_bind(&s->udp_handle, addr, 0));'), (7, 1, u'+    ASSERT(0 == uv_udp_bind(&s->udp_handle, (const struct sockaddr*) &addr, 0));')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: pummel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    ASSERT(0 == uv_ip4_addr("0.0.0.0", BASE_PORT + i, &addr));'), (6, 2, u'-    ASSERT(0 == uv_udp_bind(&s->udp_handle, addr, 0));'), (7, 1, u'+    ASSERT(0 == uv_udp_bind(&s->udp_handle, (const struct sockaddr*) &addr, 0));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    ASSERT(0 == uv_ip4_addr("0.0.0.0", BASE_PORT + i, &addr));'), (6, 2, u'-    ASSERT(0 == uv_udp_bind(&s->udp_handle, addr, 0));'), (7, 1, u'+    ASSERT(0 == uv_udp_bind(&s->udp_handle, (const struct sockaddr*) &addr, 0));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(0 == uv_ip4_addr("127.0.0.1",')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: pummel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(0 == uv_ip4_addr("127.0.0.1",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(0 == uv_ip4_addr("127.0.0.1",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_last_error(stream->loop).code == UV_EOF);'), (3, 1, u'+  ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: read_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_last_error(stream->loop).code == UV_EOF);'), (3, 1, u'+  ASSERT(nread == UV_EOF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_last_error(stream->loop).code == UV_EOF);'), (3, 1, u'+  ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: HELPER_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT (uv_last_error(loop).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: after_read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT (uv_last_error(loop).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT (uv_last_error(loop).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", port, &addr));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: on_connection
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", port, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", port, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  ASSERT(err.code == UV_EPIPE);'), (11, 1, u'+  ASSERT(status == UV_EPIPE);')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: after_write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  ASSERT(err.code == UV_EPIPE);'), (11, 1, u'+  ASSERT(status == UV_EPIPE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  ASSERT(err.code == UV_EPIPE);'), (11, 1, u'+  ASSERT(status == UV_EPIPE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT (uv_last_error(loop).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: after_read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT (uv_last_error(loop).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT (uv_last_error(loop).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(0 == uv_udp_send(req, handle, &sndbuf, 1, addr, on_send));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: on_recv
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(0 == uv_udp_send(req, handle, &sndbuf, 1, addr, on_send));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(0 == uv_udp_send(req, handle, &sndbuf, 1, addr, on_send));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", port, &addr));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: on_send
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", port, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", port, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT(0 == uv_ip6_addr("::1", port, &addr6));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: tcp4_echo_start
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT(0 == uv_ip6_addr("::1", port, &addr6));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT(0 == uv_ip6_addr("::1", port, &addr6));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &timer));'), (6, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &timer));'), (6, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &timer));'), (6, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (4, 1, u'+  ASSERT(1 == uv_is_active((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (4, 1, u'+  ASSERT(1 == uv_is_active((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (4, 1, u'+  ASSERT(1 == uv_is_active((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (4, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (4, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (4, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (4, 1, u'+  ASSERT(1 == uv_is_active((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (4, 1, u'+  ASSERT(1 == uv_is_active((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (4, 1, u'+  ASSERT(1 == uv_is_active((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(uv_is_closing((uv_handle_t*) &timer));'), (4, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(1 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(uv_is_closing((uv_handle_t*) &timer));'), (4, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(1 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*) &timer));'), (3, 2, u'-  ASSERT(uv_is_closing((uv_handle_t*) &timer));'), (4, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &timer));'), (5, 1, u'+  ASSERT(1 == uv_is_closing((uv_handle_t*) &timer));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+  ASSERT(check_cb_called == 0);'), (46, 1, u'+  ASSERT(0 == uv_async_init(uv_default_loop(), &async_handle, NULL));'), (47, 1, u'+  ASSERT(0 == uv_check_init(uv_default_loop(), &check_handle));'), (48, 1, u'+  ASSERT(0 == uv_check_start(&check_handle, check_cb));'), (49, 1, u'+  ASSERT(0 == uv_thread_create(&thread, thread_cb, NULL));'), (50, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (51, 1, u'+  ASSERT(0 == uv_thread_join(&thread));'), (52, 1, u'+  ASSERT(1 == check_cb_called);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT(buf.base);'), (11, 1, u'+  ASSERT(buf->base != NULL);')]
===========================================
===========================================
Total add: 4
Total del: 6
Header: static int shutdown_cb_called = 0;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT(buf.base);'), (11, 1, u'+  ASSERT(buf->base != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT(buf.base);'), (11, 1, u'+  ASSERT(buf->base != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EAGAIN);'), (10, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (12, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: read_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EAGAIN);'), (10, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (12, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EAGAIN);'), (10, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (12, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: connect_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+    ASSERT(nread == 1);'), (44, 1, u'+    ASSERT(nread == UV_EOF);'), (48, 1, u'+    ASSERT(!"read_cb_called > 2");'), (56, 1, u'+  ASSERT(0 == pipe(fd));'), (57, 1, u'+  ASSERT(0 == fcntl(fd[0], F_SETFL, O_NONBLOCK));'), (58, 1, u'+  ASSERT(0 == uv_pipe_init(uv_default_loop(), &pipe_handle, 0));'), (59, 1, u'+  ASSERT(0 == uv_pipe_open(&pipe_handle, fd[0]));'), (61, 1, u'+  ASSERT(1 == write(fd[1], "", 1));'), (62, 1, u'+  ASSERT(0 == close(fd[1]));'), (64, 1, u'+  ASSERT(0 == uv_read_start((uv_stream_t *) &pipe_handle, alloc_cb, read_cb));'), (65, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (66, 1, u'+  ASSERT(1 == read_cb_called);'), (67, 1, u'+  ASSERT(0 == uv_is_active((const uv_handle_t *) &pipe_handle));'), (68, 1, u'+  ASSERT(0 == uv_read_start((uv_stream_t *) &pipe_handle, alloc_cb, read_cb));'), (69, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (70, 1, u'+  ASSERT(2 == read_cb_called);'), (71, 1, u'+  ASSERT(0 != uv_is_closing((const uv_handle_t *) &pipe_handle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+  ASSERT(handle != NULL);'), (42, 1, u'+  ASSERT(check_cb_called == 0);'), (43, 1, u'+  ASSERT(timer_cb_called == 1);'), (44, 1, u'+  ASSERT(close_cb_called == 0);'), (68, 1, u'+  ASSERT(check_cb_called == 0);'), (69, 1, u'+  ASSERT(close_cb_called == 0);'), (70, 1, u'+  ASSERT(timer_cb_called == 0);'), (74, 1, u'+  ASSERT(check_cb_called == 1);'), (75, 1, u'+  ASSERT(close_cb_called == 3);'), (76, 1, u'+  ASSERT(timer_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 1, u'+  ASSERT(r == UV_ETIMEDOUT);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 1, u'+  ASSERT(r == UV_ETIMEDOUT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 1, u'+  ASSERT(r == UV_ETIMEDOUT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ECONNREFUSED);'), (4, 1, u'+  ASSERT(status == UV_ECONNREFUSED);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: on_connect_with_close
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ECONNREFUSED);'), (4, 1, u'+  ASSERT(status == UV_ECONNREFUSED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ECONNREFUSED);'), (4, 1, u'+  ASSERT(status == UV_ECONNREFUSED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ECONNREFUSED);'), (4, 1, u'+  ASSERT(status == UV_ECONNREFUSED);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: on_connect_with_close
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ECONNREFUSED);'), (4, 1, u'+  ASSERT(status == UV_ECONNREFUSED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ECONNREFUSED);'), (4, 1, u'+  ASSERT(status == UV_ECONNREFUSED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", 0, &client_addr));'), (7, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: connection_fail
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", 0, &client_addr));'), (7, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", 0, &client_addr));'), (7, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(0 == uv_tcp_bind(&tcp, (const struct sockaddr*) &client_addr, 0));')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: connection_fail
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(0 == uv_tcp_bind(&tcp, (const struct sockaddr*) &client_addr, 0));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(0 == uv_tcp_bind(&tcp, (const struct sockaddr*) &client_addr, 0));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(err.code == UV_OK);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(err.code == UV_OK);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(err.code == UV_OK);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(err.code == UV_OK);'), (3, 1, u'+  ASSERT(err == 0);'), (6, 2, u'-  ASSERT(err.code == UV_OK);'), (7, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(err.code == UV_OK);'), (3, 1, u'+  ASSERT(err == 0);'), (6, 2, u'-  ASSERT(err.code == UV_OK);'), (7, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(err.code == UV_OK);'), (3, 1, u'+  ASSERT(err == 0);'), (6, 2, u'-  ASSERT(err.code == UV_OK);'), (7, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: start_server
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EAGAIN);'), (18, 2, u'-    ASSERT(nread == -1);'), (19, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (20, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Total add: 5
Total del: 7
Header: start_server
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EAGAIN);'), (18, 2, u'-    ASSERT(nread == -1);'), (19, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (20, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EAGAIN);'), (18, 2, u'-    ASSERT(nread == -1);'), (19, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (20, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: client_connect
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));'), (50, 1, u'+  ASSERT(0 == uv_tcp_init(loop, &server_handle));'), (51, 1, u'+  ASSERT(0 == uv_tcp_init(loop, &client_handle));'), (52, 1, u'+  ASSERT(0 == uv_tcp_bind(&server_handle, (const struct sockaddr*) &addr, 0));'), (53, 1, u'+  ASSERT(0 == uv_listen((uv_stream_t*) &server_handle, 8, connection_cb));'), (59, 1, u'+    ASSERT(0);'), (66, 1, u'+  ASSERT(first_fd > 0);'), (69, 1, u'+  ASSERT(errno == EMFILE);'), (76, 1, u'+  ASSERT(0 == uv_tcp_connect(&connect_req,'), (80, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (81, 1, u'+  ASSERT(1 == connect_cb_called);'), (97, 1, u'+  ASSERT(0 && "connection_cb should not be called.");'), (105, 1, u'+  ASSERT(0 == status);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(strstr(uv_strerror(e), "Success") == NULL);'), (6, 2, u'-  ASSERT(strcmp(uv_strerror(e), "Unknown error") == 0);'), (9, 2, u'-  ASSERT(strcmp(uv_strerror(e), "Unknown error") == 0);'), (10, 1, u'+  ASSERT(strstr(uv_strerror(UV_EINVAL), "Success") == NULL);'), (11, 1, u'+  ASSERT(strcmp(uv_strerror(1337), "Unknown error") == 0);'), (12, 1, u'+  ASSERT(strcmp(uv_strerror(-1337), "Unknown error") == 0);')]
===========================================
===========================================
Total add: 3
Total del: 8
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(strstr(uv_strerror(e), "Success") == NULL);'), (6, 2, u'-  ASSERT(strcmp(uv_strerror(e), "Unknown error") == 0);'), (9, 2, u'-  ASSERT(strcmp(uv_strerror(e), "Unknown error") == 0);'), (10, 1, u'+  ASSERT(strstr(uv_strerror(UV_EINVAL), "Success") == NULL);'), (11, 1, u'+  ASSERT(strcmp(uv_strerror(1337), "Unknown error") == 0);'), (12, 1, u'+  ASSERT(strcmp(uv_strerror(-1337), "Unknown error") == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(strstr(uv_strerror(e), "Success") == NULL);'), (6, 2, u'-  ASSERT(strcmp(uv_strerror(e), "Unknown error") == 0);'), (9, 2, u'-  ASSERT(strcmp(uv_strerror(e), "Unknown error") == 0);'), (10, 1, u'+  ASSERT(strstr(uv_strerror(UV_EINVAL), "Success") == NULL);'), (11, 1, u'+  ASSERT(strcmp(uv_strerror(1337), "Unknown error") == 0);'), (12, 1, u'+  ASSERT(strcmp(uv_strerror(-1337), "Unknown error") == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == 0 || uv_last_error(loop).code == UV_EEXIST);'), (3, 1, u'+  ASSERT(r == 0 || r == UV_EEXIST);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: create_dir
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == 0 || uv_last_error(loop).code == UV_EEXIST);'), (3, 1, u'+  ASSERT(r == 0 || r == UV_EEXIST);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == 0 || uv_last_error(loop).code == UV_EEXIST);'), (3, 1, u'+  ASSERT(r == 0 || r == UV_EEXIST);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: create_file
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: touch_file
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: touch_file
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: touch_file
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_fs_event_stop(handle));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: fs_event_cb_dir
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_fs_event_stop(handle));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_fs_event_stop(handle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT(handle == &fs_event);'), (8, 1, u'+  ASSERT(status == 0);'), (9, 1, u'+  ASSERT(events == UV_RENAME);'), (10, 1, u'+  ASSERT(filename == NULL ||'), (16, 1, u'+    ASSERT(0 == uv_fs_event_stop(handle));'), (44, 1, u'+  ASSERT(0 == uv_timer_start(&timer, fs_event_unlink_files, 50, 0));'), (57, 1, u'+      ASSERT(r == 0);'), (62, 1, u'+    ASSERT(0 == uv_timer_start(&timer, fs_event_create_files, 50, 0));')]
===========================================
===========================================
Total add: 63
Total del: 0
Header: fs_event_cb_dir
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT(handle == &fs_event);'), (8, 1, u'+  ASSERT(status == 0);'), (9, 1, u'+  ASSERT(events == UV_RENAME);'), (10, 1, u'+  ASSERT(filename == NULL ||'), (16, 1, u'+    ASSERT(0 == uv_fs_event_stop(handle));'), (44, 1, u'+  ASSERT(0 == uv_timer_start(&timer, fs_event_unlink_files, 50, 0));'), (57, 1, u'+      ASSERT(r == 0);'), (62, 1, u'+    ASSERT(0 == uv_timer_start(&timer, fs_event_create_files, 50, 0));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT(handle == &fs_event);'), (8, 1, u'+  ASSERT(status == 0);'), (9, 1, u'+  ASSERT(events == UV_RENAME);'), (10, 1, u'+  ASSERT(filename == NULL ||'), (16, 1, u'+    ASSERT(0 == uv_fs_event_stop(handle));'), (44, 1, u'+  ASSERT(0 == uv_timer_start(&timer, fs_event_unlink_files, 50, 0));'), (57, 1, u'+      ASSERT(r == 0);'), (62, 1, u'+    ASSERT(0 == uv_timer_start(&timer, fs_event_create_files, 50, 0));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_fs_event_stop(handle));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: fs_event_cb_file
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_fs_event_stop(handle));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_fs_event_stop(handle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r == 0);'), (7, 1, u'+  ASSERT(r == 0);'), (9, 2, u'-  ASSERT(r != -1);'), (11, 2, u'-  ASSERT(r != -1);'), (12, 1, u'+  ASSERT(r == 0);'), (14, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 7
Total del: 5
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r == 0);'), (7, 1, u'+  ASSERT(r == 0);'), (9, 2, u'-  ASSERT(r != -1);'), (11, 2, u'-  ASSERT(r != -1);'), (12, 1, u'+  ASSERT(r == 0);'), (14, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r == 0);'), (7, 1, u'+  ASSERT(r == 0);'), (9, 2, u'-  ASSERT(r != -1);'), (11, 2, u'-  ASSERT(r != -1);'), (12, 1, u'+  ASSERT(r == 0);'), (14, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(fs_event_cb_called == 1);'), (3, 2, u'-  ASSERT(timer_cb_called == 1);'), (4, 1, u'+  ASSERT(fs_event_cb_called == 2 * fs_event_file_count);'), (5, 1, u'+  ASSERT(fs_event_created == fs_event_file_count);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(fs_event_cb_called == 1);'), (3, 2, u'-  ASSERT(timer_cb_called == 1);'), (4, 1, u'+  ASSERT(fs_event_cb_called == 2 * fs_event_file_count);'), (5, 1, u'+  ASSERT(fs_event_created == fs_event_file_count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(fs_event_cb_called == 1);'), (3, 2, u'-  ASSERT(timer_cb_called == 1);'), (4, 1, u'+  ASSERT(fs_event_cb_called == 2 * fs_event_file_count);'), (5, 1, u'+  ASSERT(fs_event_created == fs_event_file_count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r == 0);'), (7, 1, u'+  ASSERT(r == 0);'), (9, 2, u'-  ASSERT(r != -1);'), (10, 1, u'+  ASSERT(r == 0);'), (12, 2, u'-  ASSERT(r != -1);'), (13, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r == 0);'), (7, 1, u'+  ASSERT(r == 0);'), (9, 2, u'-  ASSERT(r != -1);'), (10, 1, u'+  ASSERT(r == 0);'), (12, 2, u'-  ASSERT(r != -1);'), (13, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r == 0);'), (7, 1, u'+  ASSERT(r == 0);'), (9, 2, u'-  ASSERT(r != -1);'), (10, 1, u'+  ASSERT(r == 0);'), (12, 2, u'-  ASSERT(r != -1);'), (13, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0 == uv_fs_event_init(loop, watchers + 0, path, fail_cb, 0));'), (3, 2, u'-  ASSERT(0 == uv_fs_event_init(loop, watchers + 1, path, fail_cb, 0));'), (4, 1, u'+  ASSERT(0 == uv_fs_event_init(loop, watchers + 0));'), (5, 1, u'+  ASSERT(0 == uv_fs_event_start(watchers + 0, fail_cb, path, 0));'), (6, 1, u'+  ASSERT(0 == uv_fs_event_init(loop, watchers + 1));'), (7, 1, u'+  ASSERT(0 == uv_fs_event_start(watchers + 1, fail_cb, path, 0));')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0 == uv_fs_event_init(loop, watchers + 0, path, fail_cb, 0));'), (3, 2, u'-  ASSERT(0 == uv_fs_event_init(loop, watchers + 1, path, fail_cb, 0));'), (4, 1, u'+  ASSERT(0 == uv_fs_event_init(loop, watchers + 0));'), (5, 1, u'+  ASSERT(0 == uv_fs_event_start(watchers + 0, fail_cb, path, 0));'), (6, 1, u'+  ASSERT(0 == uv_fs_event_init(loop, watchers + 1));'), (7, 1, u'+  ASSERT(0 == uv_fs_event_start(watchers + 1, fail_cb, path, 0));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0 == uv_fs_event_init(loop, watchers + 0, path, fail_cb, 0));'), (3, 2, u'-  ASSERT(0 == uv_fs_event_init(loop, watchers + 1, path, fail_cb, 0));'), (4, 1, u'+  ASSERT(0 == uv_fs_event_init(loop, watchers + 0));'), (5, 1, u'+  ASSERT(0 == uv_fs_event_start(watchers + 0, fail_cb, path, 0));'), (6, 1, u'+  ASSERT(0 == uv_fs_event_init(loop, watchers + 1));'), (7, 1, u'+  ASSERT(0 == uv_fs_event_start(watchers + 1, fail_cb, path, 0));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT(r != -1);'), (6, 1, u'+  ASSERT(r == 0);'), (11, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 8
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT(r != -1);'), (6, 1, u'+  ASSERT(r == 0);'), (11, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT(r != -1);'), (6, 1, u'+  ASSERT(r == 0);'), (11, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(r != -1);'), (9, 1, u'+  ASSERT(r == 0);'), (14, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 8
Total del: 6
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(r != -1);'), (9, 1, u'+  ASSERT(r == 0);'), (14, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(r != -1);'), (9, 1, u'+  ASSERT(r == 0);'), (14, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(r != -1);'), (9, 1, u'+  ASSERT(r == 0);'), (14, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 7
Total del: 6
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(r != -1);'), (9, 1, u'+  ASSERT(r == 0);'), (14, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(r != -1);'), (9, 1, u'+  ASSERT(r == 0);'), (14, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: timer_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT(r == 0);'), (16, 1, u'+  ASSERT(r == 0);'), (19, 1, u'+  ASSERT(r == 0);'), (21, 1, u'+  ASSERT(r == 0);'), (28, 1, u'+  ASSERT(close_cb_called == 2);'), (53, 1, u'+  ASSERT(handle != NULL);'), (79, 1, u'+    ASSERT(loop != NULL);'), (84, 1, u'+    ASSERT(0 == uv_fs_event_init(loop, event));'), (85, 1, u'+    ASSERT(0 == uv_fs_event_start(event,'), (92, 1, u'+    ASSERT(0 == uv_timer_init(loop, &timer));'), (93, 1, u'+    ASSERT(0 == uv_timer_start(&timer, timer_cb_nop, 2, 0));'), (95, 1, u'+    ASSERT(1 == timer_cb_called);'), (96, 1, u'+    ASSERT(1 == close_cb_called);'), (102, 1, u'+  ASSERT(fs_event_error_reported == UV_EMFILE);'), (109, 1, u'+    ASSERT(0 == uv_fs_event_stop(event));'), (115, 1, u'+    ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Total add: 135
Total del: 0
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT(r == 0);'), (16, 1, u'+  ASSERT(r == 0);'), (19, 1, u'+  ASSERT(r == 0);'), (21, 1, u'+  ASSERT(r == 0);'), (28, 1, u'+  ASSERT(close_cb_called == 2);'), (53, 1, u'+  ASSERT(handle != NULL);'), (79, 1, u'+    ASSERT(loop != NULL);'), (84, 1, u'+    ASSERT(0 == uv_fs_event_init(loop, event));'), (85, 1, u'+    ASSERT(0 == uv_fs_event_start(event,'), (92, 1, u'+    ASSERT(0 == uv_timer_init(loop, &timer));'), (93, 1, u'+    ASSERT(0 == uv_timer_start(&timer, timer_cb_nop, 2, 0));'), (95, 1, u'+    ASSERT(1 == timer_cb_called);'), (96, 1, u'+    ASSERT(1 == close_cb_called);'), (102, 1, u'+  ASSERT(fs_event_error_reported == UV_EMFILE);'), (109, 1, u'+    ASSERT(0 == uv_fs_event_stop(event));'), (115, 1, u'+    ASSERT(close_cb_called == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT(r == 0);'), (16, 1, u'+  ASSERT(r == 0);'), (19, 1, u'+  ASSERT(r == 0);'), (21, 1, u'+  ASSERT(r == 0);'), (28, 1, u'+  ASSERT(close_cb_called == 2);'), (53, 1, u'+  ASSERT(handle != NULL);'), (79, 1, u'+    ASSERT(loop != NULL);'), (84, 1, u'+    ASSERT(0 == uv_fs_event_init(loop, event));'), (85, 1, u'+    ASSERT(0 == uv_fs_event_start(event,'), (92, 1, u'+    ASSERT(0 == uv_timer_init(loop, &timer));'), (93, 1, u'+    ASSERT(0 == uv_timer_start(&timer, timer_cb_nop, 2, 0));'), (95, 1, u'+    ASSERT(1 == timer_cb_called);'), (96, 1, u'+    ASSERT(1 == close_cb_called);'), (102, 1, u'+  ASSERT(fs_event_error_reported == UV_EMFILE);'), (109, 1, u'+    ASSERT(0 == uv_fs_event_stop(event));'), (115, 1, u'+    ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_active((uv_handle_t*)handle));'), (3, 1, u'+  ASSERT(1 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: poll_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_active((uv_handle_t*)handle));'), (3, 1, u'+  ASSERT(1 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_active((uv_handle_t*)handle));'), (3, 1, u'+  ASSERT(1 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(status == -1);'), (3, 2, u'-    ASSERT(uv_last_error(loop).code == UV_ENOENT);'), (4, 1, u'+    ASSERT(status == UV_ENOENT);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: poll_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(status == -1);'), (3, 2, u'-    ASSERT(uv_last_error(loop).code == UV_ENOENT);'), (4, 1, u'+    ASSERT(status == UV_ENOENT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(status == -1);'), (3, 2, u'-    ASSERT(uv_last_error(loop).code == UV_ENOENT);'), (4, 1, u'+    ASSERT(status == UV_ENOENT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(status == -1);'), (3, 1, u'+    ASSERT(status == UV_ENOENT);'), (6, 2, u'-    ASSERT(uv_last_error(loop).code == UV_ENOENT);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: poll_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(status == -1);'), (3, 1, u'+    ASSERT(status == UV_ENOENT);'), (6, 2, u'-    ASSERT(uv_last_error(loop).code == UV_ENOENT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(status == -1);'), (3, 1, u'+    ASSERT(status == UV_ENOENT);'), (6, 2, u'-    ASSERT(uv_last_error(loop).code == UV_ENOENT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(req->result == -1);'), (4, 2, u'-  ASSERT(req->errorno == UV_EPERM);'), (9, 1, u'+    ASSERT(req->result == 0);'), (11, 1, u'+    ASSERT(req->result == UV_EPERM);')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: chown_root_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(req->result == -1);'), (4, 2, u'-  ASSERT(req->errorno == UV_EPERM);'), (9, 1, u'+    ASSERT(req->result == 0);'), (11, 1, u'+    ASSERT(req->result == UV_EPERM);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(req->result == -1);'), (4, 2, u'-  ASSERT(req->errorno == UV_EPERM);'), (9, 1, u'+    ASSERT(req->result == 0);'), (11, 1, u'+    ASSERT(req->result == UV_EPERM);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: unlink_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: close_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ftruncate_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result >= 0);  /* FIXME(bnoordhuis) Check if requested size? */')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: read_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result >= 0);  /* FIXME(bnoordhuis) Check if requested size? */')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result >= 0);  /* FIXME(bnoordhuis) Check if requested size? */')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: fsync_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: fdatasync_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result >= 0);  /* FIXME(bnoordhuis) Check if requested size? */')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: write_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result >= 0);  /* FIXME(bnoordhuis) Check if requested size? */')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result >= 0);  /* FIXME(bnoordhuis) Check if requested size? */')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: create_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: rename_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: mkdir_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: rmdir_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result == -1);'), (3, 1, u'+  ASSERT(req->result == UV_ENOTDIR);'), (5, 2, u'-  ASSERT(uv_last_error(req->loop).code == UV_ENOTDIR);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: file_readdir_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result == -1);'), (3, 1, u'+  ASSERT(req->result == UV_ENOTDIR);'), (5, 2, u'-  ASSERT(uv_last_error(req->loop).code == UV_ENOTDIR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result == -1);'), (3, 1, u'+  ASSERT(req->result == UV_ENOTDIR);'), (5, 2, u'-  ASSERT(uv_last_error(req->loop).code == UV_ENOTDIR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: stat_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->result != -1);'), (3, 1, u'+  ASSERT(req->result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->errorno == UV_ENOENT);'), (3, 2, u'-  ASSERT(req->result == -1);'), (4, 1, u'+  ASSERT(req->result == UV_ENOENT);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: open_noent_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->errorno == UV_ENOENT);'), (3, 2, u'-  ASSERT(req->result == -1);'), (4, 1, u'+  ASSERT(req->result == UV_ENOENT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->errorno == UV_ENOENT);'), (3, 2, u'-  ASSERT(req->result == -1);'), (4, 1, u'+  ASSERT(req->result == UV_ENOENT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->errorno == UV_ENAMETOOLONG);'), (3, 2, u'-  ASSERT(req->result == -1);'), (4, 1, u'+  ASSERT(req->result == UV_ENAMETOOLONG);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: open_nametoolong_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->errorno == UV_ENAMETOOLONG);'), (3, 2, u'-  ASSERT(req->result == -1);'), (4, 1, u'+  ASSERT(req->result == UV_ENAMETOOLONG);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->errorno == UV_ENAMETOOLONG);'), (3, 2, u'-  ASSERT(req->result == -1);'), (4, 1, u'+  ASSERT(req->result == UV_ENAMETOOLONG);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->errorno == UV_ELOOP);'), (3, 2, u'-  ASSERT(req->result == -1);'), (4, 1, u'+  ASSERT(req->result == UV_ELOOP);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: open_loop_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->errorno == UV_ELOOP);'), (3, 2, u'-  ASSERT(req->result == -1);'), (4, 1, u'+  ASSERT(req->result == UV_ELOOP);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->errorno == UV_ELOOP);'), (3, 2, u'-  ASSERT(req->result == -1);'), (4, 1, u'+  ASSERT(req->result == UV_ELOOP);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(req.result == -1);'), (4, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENOENT);'), (5, 1, u'+  ASSERT(r == UV_ENOENT);'), (6, 1, u'+  ASSERT(req.result == UV_ENOENT);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(req.result == -1);'), (4, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENOENT);'), (5, 1, u'+  ASSERT(r == UV_ENOENT);'), (6, 1, u'+  ASSERT(req.result == UV_ENOENT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(req.result == -1);'), (4, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENOENT);'), (5, 1, u'+  ASSERT(r == UV_ENOENT);'), (6, 1, u'+  ASSERT(req.result == UV_ENOENT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(req.result == -1);'), (4, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENAMETOOLONG);'), (5, 1, u'+  ASSERT(r == UV_ENAMETOOLONG);'), (6, 1, u'+  ASSERT(req.result == UV_ENAMETOOLONG);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(req.result == -1);'), (4, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENAMETOOLONG);'), (5, 1, u'+  ASSERT(r == UV_ENAMETOOLONG);'), (6, 1, u'+  ASSERT(req.result == UV_ENAMETOOLONG);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(req.result == -1);'), (4, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENAMETOOLONG);'), (5, 1, u'+  ASSERT(r == UV_ENAMETOOLONG);'), (6, 1, u'+  ASSERT(req.result == UV_ENAMETOOLONG);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(req.result == -1);'), (4, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ELOOP);'), (5, 1, u'+  ASSERT(r == UV_ELOOP);'), (6, 1, u'+  ASSERT(req.result == UV_ELOOP);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(req.result == -1);'), (4, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ELOOP);'), (5, 1, u'+  ASSERT(r == UV_ELOOP);'), (6, 1, u'+  ASSERT(req.result == UV_ELOOP);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(req.result == -1);'), (4, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ELOOP);'), (5, 1, u'+  ASSERT(r == UV_ELOOP);'), (6, 1, u'+  ASSERT(req.result == UV_ELOOP);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(s->st_atime == atime);'), (4, 2, u'-  ASSERT(s->st_mtime == mtime);'), (6, 2, u'-  ASSERT(s->st_atimespec.tv_sec  == atime);'), (7, 2, u'-  ASSERT(s->st_mtimespec.tv_sec  == mtime);')]
===========================================
===========================================
Total add: 0
Total del: 8
Header: check_utime
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(s->st_atime == atime);'), (4, 2, u'-  ASSERT(s->st_mtime == mtime);'), (6, 2, u'-  ASSERT(s->st_atimespec.tv_sec  == atime);'), (7, 2, u'-  ASSERT(s->st_mtimespec.tv_sec  == mtime);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(s->st_atime == atime);'), (4, 2, u'-  ASSERT(s->st_mtime == mtime);'), (6, 2, u'-  ASSERT(s->st_atimespec.tv_sec  == atime);'), (7, 2, u'-  ASSERT(s->st_mtimespec.tv_sec  == mtime);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(read_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(read_req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(read_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(read_req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(read_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(read_req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(ftruncate_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(ftruncate_req.result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(ftruncate_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(ftruncate_req.result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(ftruncate_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(ftruncate_req.result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(rename_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(rename_req.result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(rename_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(rename_req.result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(rename_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(rename_req.result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(read_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(read_req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(read_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(read_req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(read_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(read_req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(unlink_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(unlink_req.result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(unlink_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(unlink_req.result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(unlink_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(unlink_req.result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req2.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req2.result >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req2.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req2.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req2.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req2.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(r == 0);'), (7, 1, u'+  ASSERT(s->st_dev == (uint64_t) t.st_dev);'), (8, 1, u'+  ASSERT(s->st_mode == (uint64_t) t.st_mode);'), (9, 1, u'+  ASSERT(s->st_nlink == (uint64_t) t.st_nlink);'), (10, 1, u'+  ASSERT(s->st_uid == (uint64_t) t.st_uid);'), (11, 1, u'+  ASSERT(s->st_gid == (uint64_t) t.st_gid);'), (12, 1, u'+  ASSERT(s->st_rdev == (uint64_t) t.st_rdev);'), (13, 1, u'+  ASSERT(s->st_ino == (uint64_t) t.st_ino);'), (14, 1, u'+  ASSERT(s->st_size == (uint64_t) t.st_size);'), (15, 1, u'+  ASSERT(s->st_blksize == (uint64_t) t.st_blksize);'), (16, 1, u'+  ASSERT(s->st_blocks == (uint64_t) t.st_blocks);'), (18, 1, u'+  ASSERT(s->st_atim.tv_sec == t.st_atimespec.tv_sec);'), (19, 1, u'+  ASSERT(s->st_atim.tv_nsec == t.st_atimespec.tv_nsec);'), (20, 1, u'+  ASSERT(s->st_mtim.tv_sec == t.st_mtimespec.tv_sec);'), (21, 1, u'+  ASSERT(s->st_mtim.tv_nsec == t.st_mtimespec.tv_nsec);'), (22, 1, u'+  ASSERT(s->st_ctim.tv_sec == t.st_ctimespec.tv_sec);'), (23, 1, u'+  ASSERT(s->st_ctim.tv_nsec == t.st_ctimespec.tv_nsec);'), (24, 1, u'+  ASSERT(s->st_birthtim.tv_sec == t.st_birthtimespec.tv_sec);'), (25, 1, u'+  ASSERT(s->st_birthtim.tv_nsec == t.st_birthtimespec.tv_nsec);'), (26, 1, u'+  ASSERT(s->st_flags == t.st_flags);'), (27, 1, u'+  ASSERT(s->st_gen == t.st_gen);'), (32, 1, u'+  ASSERT(s->st_atim.tv_sec == t.st_atim.tv_sec);'), (33, 1, u'+  ASSERT(s->st_atim.tv_nsec == t.st_atim.tv_nsec);'), (34, 1, u'+  ASSERT(s->st_mtim.tv_sec == t.st_mtim.tv_sec);'), (35, 1, u'+  ASSERT(s->st_mtim.tv_nsec == t.st_mtim.tv_nsec);'), (36, 1, u'+  ASSERT(s->st_ctim.tv_sec == t.st_ctim.tv_sec);'), (37, 1, u'+  ASSERT(s->st_ctim.tv_nsec == t.st_ctim.tv_nsec);'), (42, 1, u'+  ASSERT(s->st_birthtim.tv_sec == t.st_birthtim.tv_sec);'), (43, 1, u'+  ASSERT(s->st_birthtim.tv_nsec == t.st_birthtim.tv_nsec);'), (44, 1, u'+  ASSERT(s->st_flags == t.st_flags);'), (45, 1, u'+  ASSERT(s->st_gen == t.st_gen);'), (48, 1, u'+  ASSERT(s->st_atim.tv_sec == t.st_atime);'), (49, 1, u'+  ASSERT(s->st_atim.tv_nsec == 0);'), (50, 1, u'+  ASSERT(s->st_mtim.tv_sec == t.st_mtime);'), (51, 1, u'+  ASSERT(s->st_mtim.tv_nsec == 0);'), (52, 1, u'+  ASSERT(s->st_ctim.tv_sec == t.st_ctime);'), (53, 1, u'+  ASSERT(s->st_ctim.tv_nsec == 0);')]
===========================================
===========================================
Total add: 55
Total del: 0
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(r == 0);'), (7, 1, u'+  ASSERT(s->st_dev == (uint64_t) t.st_dev);'), (8, 1, u'+  ASSERT(s->st_mode == (uint64_t) t.st_mode);'), (9, 1, u'+  ASSERT(s->st_nlink == (uint64_t) t.st_nlink);'), (10, 1, u'+  ASSERT(s->st_uid == (uint64_t) t.st_uid);'), (11, 1, u'+  ASSERT(s->st_gid == (uint64_t) t.st_gid);'), (12, 1, u'+  ASSERT(s->st_rdev == (uint64_t) t.st_rdev);'), (13, 1, u'+  ASSERT(s->st_ino == (uint64_t) t.st_ino);'), (14, 1, u'+  ASSERT(s->st_size == (uint64_t) t.st_size);'), (15, 1, u'+  ASSERT(s->st_blksize == (uint64_t) t.st_blksize);'), (16, 1, u'+  ASSERT(s->st_blocks == (uint64_t) t.st_blocks);'), (18, 1, u'+  ASSERT(s->st_atim.tv_sec == t.st_atimespec.tv_sec);'), (19, 1, u'+  ASSERT(s->st_atim.tv_nsec == t.st_atimespec.tv_nsec);'), (20, 1, u'+  ASSERT(s->st_mtim.tv_sec == t.st_mtimespec.tv_sec);'), (21, 1, u'+  ASSERT(s->st_mtim.tv_nsec == t.st_mtimespec.tv_nsec);'), (22, 1, u'+  ASSERT(s->st_ctim.tv_sec == t.st_ctimespec.tv_sec);'), (23, 1, u'+  ASSERT(s->st_ctim.tv_nsec == t.st_ctimespec.tv_nsec);'), (24, 1, u'+  ASSERT(s->st_birthtim.tv_sec == t.st_birthtimespec.tv_sec);'), (25, 1, u'+  ASSERT(s->st_birthtim.tv_nsec == t.st_birthtimespec.tv_nsec);'), (26, 1, u'+  ASSERT(s->st_flags == t.st_flags);'), (27, 1, u'+  ASSERT(s->st_gen == t.st_gen);'), (32, 1, u'+  ASSERT(s->st_atim.tv_sec == t.st_atim.tv_sec);'), (33, 1, u'+  ASSERT(s->st_atim.tv_nsec == t.st_atim.tv_nsec);'), (34, 1, u'+  ASSERT(s->st_mtim.tv_sec == t.st_mtim.tv_sec);'), (35, 1, u'+  ASSERT(s->st_mtim.tv_nsec == t.st_mtim.tv_nsec);'), (36, 1, u'+  ASSERT(s->st_ctim.tv_sec == t.st_ctim.tv_sec);'), (37, 1, u'+  ASSERT(s->st_ctim.tv_nsec == t.st_ctim.tv_nsec);'), (42, 1, u'+  ASSERT(s->st_birthtim.tv_sec == t.st_birthtim.tv_sec);'), (43, 1, u'+  ASSERT(s->st_birthtim.tv_nsec == t.st_birthtim.tv_nsec);'), (44, 1, u'+  ASSERT(s->st_flags == t.st_flags);'), (45, 1, u'+  ASSERT(s->st_gen == t.st_gen);'), (48, 1, u'+  ASSERT(s->st_atim.tv_sec == t.st_atime);'), (49, 1, u'+  ASSERT(s->st_atim.tv_nsec == 0);'), (50, 1, u'+  ASSERT(s->st_mtim.tv_sec == t.st_mtime);'), (51, 1, u'+  ASSERT(s->st_mtim.tv_nsec == 0);'), (52, 1, u'+  ASSERT(s->st_ctim.tv_sec == t.st_ctime);'), (53, 1, u'+  ASSERT(s->st_ctim.tv_nsec == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(r == 0);'), (7, 1, u'+  ASSERT(s->st_dev == (uint64_t) t.st_dev);'), (8, 1, u'+  ASSERT(s->st_mode == (uint64_t) t.st_mode);'), (9, 1, u'+  ASSERT(s->st_nlink == (uint64_t) t.st_nlink);'), (10, 1, u'+  ASSERT(s->st_uid == (uint64_t) t.st_uid);'), (11, 1, u'+  ASSERT(s->st_gid == (uint64_t) t.st_gid);'), (12, 1, u'+  ASSERT(s->st_rdev == (uint64_t) t.st_rdev);'), (13, 1, u'+  ASSERT(s->st_ino == (uint64_t) t.st_ino);'), (14, 1, u'+  ASSERT(s->st_size == (uint64_t) t.st_size);'), (15, 1, u'+  ASSERT(s->st_blksize == (uint64_t) t.st_blksize);'), (16, 1, u'+  ASSERT(s->st_blocks == (uint64_t) t.st_blocks);'), (18, 1, u'+  ASSERT(s->st_atim.tv_sec == t.st_atimespec.tv_sec);'), (19, 1, u'+  ASSERT(s->st_atim.tv_nsec == t.st_atimespec.tv_nsec);'), (20, 1, u'+  ASSERT(s->st_mtim.tv_sec == t.st_mtimespec.tv_sec);'), (21, 1, u'+  ASSERT(s->st_mtim.tv_nsec == t.st_mtimespec.tv_nsec);'), (22, 1, u'+  ASSERT(s->st_ctim.tv_sec == t.st_ctimespec.tv_sec);'), (23, 1, u'+  ASSERT(s->st_ctim.tv_nsec == t.st_ctimespec.tv_nsec);'), (24, 1, u'+  ASSERT(s->st_birthtim.tv_sec == t.st_birthtimespec.tv_sec);'), (25, 1, u'+  ASSERT(s->st_birthtim.tv_nsec == t.st_birthtimespec.tv_nsec);'), (26, 1, u'+  ASSERT(s->st_flags == t.st_flags);'), (27, 1, u'+  ASSERT(s->st_gen == t.st_gen);'), (32, 1, u'+  ASSERT(s->st_atim.tv_sec == t.st_atim.tv_sec);'), (33, 1, u'+  ASSERT(s->st_atim.tv_nsec == t.st_atim.tv_nsec);'), (34, 1, u'+  ASSERT(s->st_mtim.tv_sec == t.st_mtim.tv_sec);'), (35, 1, u'+  ASSERT(s->st_mtim.tv_nsec == t.st_mtim.tv_nsec);'), (36, 1, u'+  ASSERT(s->st_ctim.tv_sec == t.st_ctim.tv_sec);'), (37, 1, u'+  ASSERT(s->st_ctim.tv_nsec == t.st_ctim.tv_nsec);'), (42, 1, u'+  ASSERT(s->st_birthtim.tv_sec == t.st_birthtim.tv_sec);'), (43, 1, u'+  ASSERT(s->st_birthtim.tv_nsec == t.st_birthtim.tv_nsec);'), (44, 1, u'+  ASSERT(s->st_flags == t.st_flags);'), (45, 1, u'+  ASSERT(s->st_gen == t.st_gen);'), (48, 1, u'+  ASSERT(s->st_atim.tv_sec == t.st_atime);'), (49, 1, u'+  ASSERT(s->st_atim.tv_nsec == 0);'), (50, 1, u'+  ASSERT(s->st_mtim.tv_sec == t.st_mtime);'), (51, 1, u'+  ASSERT(s->st_mtim.tv_nsec == 0);'), (52, 1, u'+  ASSERT(s->st_ctim.tv_sec == t.st_ctime);'), (53, 1, u'+  ASSERT(s->st_ctim.tv_nsec == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req.result == -1);'), (3, 2, u'-  ASSERT(req.errorno == UV_ENOENT);'), (4, 1, u'+  ASSERT(req.result == UV_ENOENT);'), (7, 2, u'-  ASSERT(-1 == uv_fs_readlink(loop, &req, "no_such_file", NULL));'), (8, 1, u'+  ASSERT(UV_ENOENT == uv_fs_readlink(loop, &req, "no_such_file", NULL));'), (10, 2, u'-  ASSERT(req.result == -1);'), (11, 2, u'-  ASSERT(req.errorno == UV_ENOENT);'), (12, 1, u'+  ASSERT(req.result == UV_ENOENT);')]
===========================================
===========================================
Total add: 3
Total del: 5
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req.result == -1);'), (3, 2, u'-  ASSERT(req.errorno == UV_ENOENT);'), (4, 1, u'+  ASSERT(req.result == UV_ENOENT);'), (7, 2, u'-  ASSERT(-1 == uv_fs_readlink(loop, &req, "no_such_file", NULL));'), (8, 1, u'+  ASSERT(UV_ENOENT == uv_fs_readlink(loop, &req, "no_such_file", NULL));'), (10, 2, u'-  ASSERT(req.result == -1);'), (11, 2, u'-  ASSERT(req.errorno == UV_ENOENT);'), (12, 1, u'+  ASSERT(req.result == UV_ENOENT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req.result == -1);'), (3, 2, u'-  ASSERT(req.errorno == UV_ENOENT);'), (4, 1, u'+  ASSERT(req.result == UV_ENOENT);'), (7, 2, u'-  ASSERT(-1 == uv_fs_readlink(loop, &req, "no_such_file", NULL));'), (8, 1, u'+  ASSERT(UV_ENOENT == uv_fs_readlink(loop, &req, "no_such_file", NULL));'), (10, 2, u'-  ASSERT(req.result == -1);'), (11, 2, u'-  ASSERT(req.errorno == UV_ENOENT);'), (12, 1, u'+  ASSERT(req.result == UV_ENOENT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (10, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 7
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (10, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (10, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (10, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 7
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (10, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (10, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(((struct stat*)req.ptr)->st_mode & S_IFDIR);'), (3, 1, u'+  ASSERT(((uv_stat_t*)req.ptr)->st_mode & S_IFDIR);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(((struct stat*)req.ptr)->st_mode & S_IFDIR);'), (3, 1, u'+  ASSERT(((uv_stat_t*)req.ptr)->st_mode & S_IFDIR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(((struct stat*)req.ptr)->st_mode & S_IFDIR);'), (3, 1, u'+  ASSERT(((uv_stat_t*)req.ptr)->st_mode & S_IFDIR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(((struct stat*)req.ptr)->st_mode & S_IFLNK);'), (3, 1, u'+  ASSERT(((uv_stat_t*)req.ptr)->st_mode & S_IFLNK);'), (5, 2, u'-  ASSERT(((struct stat*)req.ptr)->st_size == strlen(test_dir + 4));'), (6, 1, u'+  ASSERT(((uv_stat_t*)req.ptr)->st_size == strlen(test_dir + 4));'), (8, 2, u'-  ASSERT(((struct stat*)req.ptr)->st_size == strlen(test_dir));'), (9, 1, u'+  ASSERT(((uv_stat_t*)req.ptr)->st_size == strlen(test_dir));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(((struct stat*)req.ptr)->st_mode & S_IFLNK);'), (3, 1, u'+  ASSERT(((uv_stat_t*)req.ptr)->st_mode & S_IFLNK);'), (5, 2, u'-  ASSERT(((struct stat*)req.ptr)->st_size == strlen(test_dir + 4));'), (6, 1, u'+  ASSERT(((uv_stat_t*)req.ptr)->st_size == strlen(test_dir + 4));'), (8, 2, u'-  ASSERT(((struct stat*)req.ptr)->st_size == strlen(test_dir));'), (9, 1, u'+  ASSERT(((uv_stat_t*)req.ptr)->st_size == strlen(test_dir));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(((struct stat*)req.ptr)->st_mode & S_IFLNK);'), (3, 1, u'+  ASSERT(((uv_stat_t*)req.ptr)->st_mode & S_IFLNK);'), (5, 2, u'-  ASSERT(((struct stat*)req.ptr)->st_size == strlen(test_dir + 4));'), (6, 1, u'+  ASSERT(((uv_stat_t*)req.ptr)->st_size == strlen(test_dir + 4));'), (8, 2, u'-  ASSERT(((struct stat*)req.ptr)->st_size == strlen(test_dir));'), (9, 1, u'+  ASSERT(((uv_stat_t*)req.ptr)->st_size == strlen(test_dir));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (5, 1, u'+  ASSERT(r >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 1, u'+  ASSERT(r == UV_ENOENT);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 1, u'+  ASSERT(r == UV_ENOENT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 1, u'+  ASSERT(r == UV_ENOENT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(req.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(req.result == -1);'), (4, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENOENT);'), (5, 1, u'+  ASSERT(r == UV_ENOENT);'), (6, 1, u'+  ASSERT(req.result == UV_ENOENT);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(req.result == -1);'), (4, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENOENT);'), (5, 1, u'+  ASSERT(r == UV_ENOENT);'), (6, 1, u'+  ASSERT(req.result == UV_ENOENT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(req.result == -1);'), (4, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENOENT);'), (5, 1, u'+  ASSERT(r == UV_ENOENT);'), (6, 1, u'+  ASSERT(req.result == UV_ENOENT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENOTDIR);'), (4, 1, u'+  ASSERT(r == UV_ENOTDIR);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENOTDIR);'), (4, 1, u'+  ASSERT(r == UV_ENOTDIR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENOTDIR);'), (4, 1, u'+  ASSERT(r == UV_ENOTDIR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);'), (9, 2, u'-  ASSERT(r != -1);'), (10, 2, u'-  ASSERT(open_req1.result != -1);'), (12, 1, u'+  ASSERT(r >= 0);'), (13, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);'), (9, 2, u'-  ASSERT(r != -1);'), (10, 2, u'-  ASSERT(open_req1.result != -1);'), (12, 1, u'+  ASSERT(r >= 0);'), (13, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);'), (9, 2, u'-  ASSERT(r != -1);'), (10, 2, u'-  ASSERT(open_req1.result != -1);'), (12, 1, u'+  ASSERT(r >= 0);'), (13, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(rename_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(rename_req.result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(rename_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(rename_req.result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(rename_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(rename_req.result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(read_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(read_req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(read_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(read_req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(read_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(read_req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r != -1);'), (4, 2, u'-  ASSERT(open_req1.result != -1);'), (6, 1, u'+  ASSERT(r >= 0);'), (7, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(write_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(write_req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(open_req1.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(open_req1.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(read_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(read_req.result >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(read_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(read_req.result >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(read_req.result != -1);'), (4, 1, u'+  ASSERT(r >= 0);'), (5, 1, u'+  ASSERT(read_req.result >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r != -1);'), (3, 2, u'-  ASSERT(close_req.result != -1);'), (4, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(close_req.result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 1, u'+  ASSERT(r == UV_EINVAL);'), (6, 2, u'-  ASSERT(r == -1);'), (7, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 1, u'+  ASSERT(r == UV_EINVAL);'), (6, 2, u'-  ASSERT(r == -1);'), (7, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 1, u'+  ASSERT(r == UV_EINVAL);'), (6, 2, u'-  ASSERT(r == -1);'), (7, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT(fail_cb_called == 0);'), (9, 1, u'+  ASSERT(status < 0);'), (10, 1, u'+  ASSERT(res == NULL);')]
===========================================
===========================================
Total add: 12
Total del: 0
Header: static uv_getaddrinfo_t getaddrinfo_handles[CONCURRENT_COUNT];
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT(fail_cb_called == 0);'), (9, 1, u'+  ASSERT(status < 0);'), (10, 1, u'+  ASSERT(res == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT(fail_cb_called == 0);'), (9, 1, u'+  ASSERT(status < 0);'), (10, 1, u'+  ASSERT(res == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_getaddrinfo(uv_default_loop(),'), (11, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (12, 1, u'+  ASSERT(fail_cb_called == 1);')]
===========================================
===========================================
Total add: 17
Total del: 0
Header: getaddrinfo_cuncurrent_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_getaddrinfo(uv_default_loop(),'), (11, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (12, 1, u'+  ASSERT(fail_cb_called == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_getaddrinfo(uv_default_loop(),'), (11, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (12, 1, u'+  ASSERT(fail_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr(compare_ip, compare_port, &compare_addr));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: check_sockname
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr(compare_ip, compare_port, &compare_addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr(compare_ip, compare_port, &compare_addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", server_port, &addr));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: tcp_listener
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", server_port, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", server_port, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENOTCONN);'), (4, 1, u'+  ASSERT(r == UV_ENOTCONN);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: tcp_listener
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENOTCONN);'), (4, 1, u'+  ASSERT(r == UV_ENOTCONN);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(loop).code == UV_ENOTCONN);'), (4, 1, u'+  ASSERT(r == UV_ENOTCONN);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", server_port, &server_addr));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: tcp_connector
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", server_port, &server_addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", server_port, &server_addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", server_port, &addr));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: udp_listener
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", server_port, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", server_port, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", server_port, &server_addr));')]
===========================================
===========================================
Total add: 8
Total del: 3
Header: udp_sender
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", server_port, &server_addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", server_port, &server_addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(handle == &check_handle);'), (4, 1, u'+  ASSERT(status == 0);')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: idle_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(handle == &check_handle);'), (4, 1, u'+  ASSERT(status == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(handle == &check_handle);'), (4, 1, u'+  ASSERT(status == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(r == 0);'), (5, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(close_cb_called == 2);'), (3, 1, u'+  ASSERT(close_cb_called == 3);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(close_cb_called == 2);'), (3, 1, u'+  ASSERT(close_cb_called == 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(close_cb_called == 2);'), (3, 1, u'+  ASSERT(close_cb_called == 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));'), (34, 1, u'+  ASSERT(0 == uv_ip4_addr("255.255.255.255", TEST_PORT, &addr));'), (35, 1, u'+  ASSERT(UV_EINVAL == uv_ip4_addr("255.255.255*000", TEST_PORT, &addr));'), (36, 1, u'+  ASSERT(UV_EINVAL == uv_ip4_addr("255.255.255.256", TEST_PORT, &addr));'), (37, 1, u'+  ASSERT(UV_EINVAL == uv_ip4_addr("2555.0.0.0", TEST_PORT, &addr));'), (38, 1, u'+  ASSERT(UV_EINVAL == uv_ip4_addr("255", TEST_PORT, &addr));'), (41, 1, u'+  ASSERT(UV_EAFNOSUPPORT == uv_inet_pton(42, "127.0.0.1",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+  ASSERT(0 == uv_interface_addresses(&addresses, &count));'), (55, 1, u'+    ASSERT(0 == uv_inet_ntop(AF_INET6,'), (87, 1, u'+    ASSERT(0 == uv_ip6_addr(scoped_addr, TEST_PORT, &addr));'), (89, 1, u'+    ASSERT(iface_index == addr.sin6_scope_id);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_readable((uv_stream_t*)&ctx.channel));'), (3, 2, u'-  ASSERT(uv_is_writable((uv_stream_t*)&ctx.channel));'), (4, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*)&ctx.channel));'), (5, 1, u'+  ASSERT(1 == uv_is_readable((uv_stream_t*)&ctx.channel));'), (6, 1, u'+  ASSERT(1 == uv_is_writable((uv_stream_t*)&ctx.channel));'), (7, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*)&ctx.channel));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: ipc_send_recv_helper
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_readable((uv_stream_t*)&ctx.channel));'), (3, 2, u'-  ASSERT(uv_is_writable((uv_stream_t*)&ctx.channel));'), (4, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*)&ctx.channel));'), (5, 1, u'+  ASSERT(1 == uv_is_readable((uv_stream_t*)&ctx.channel));'), (6, 1, u'+  ASSERT(1 == uv_is_writable((uv_stream_t*)&ctx.channel));'), (7, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*)&ctx.channel));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_readable((uv_stream_t*)&ctx.channel));'), (3, 2, u'-  ASSERT(uv_is_writable((uv_stream_t*)&ctx.channel));'), (4, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*)&ctx.channel));'), (5, 1, u'+  ASSERT(1 == uv_is_readable((uv_stream_t*)&ctx.channel));'), (6, 1, u'+  ASSERT(1 == uv_is_writable((uv_stream_t*)&ctx.channel));'), (7, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*)&ctx.channel));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: make_many_connections
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(nread > 0 && buf.base && pending != UV_UNKNOWN_HANDLE);'), (3, 1, u'+    ASSERT(nread > 0 && buf->base && pending != UV_UNKNOWN_HANDLE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: on_read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(nread > 0 && buf.base && pending != UV_UNKNOWN_HANDLE);'), (3, 1, u'+    ASSERT(nread > 0 && buf->base && pending != UV_UNKNOWN_HANDLE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(nread > 0 && buf.base && pending != UV_UNKNOWN_HANDLE);'), (3, 1, u'+    ASSERT(nread > 0 && buf->base && pending != UV_UNKNOWN_HANDLE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(memcmp("hello\\n", buf.base, nread) == 0);'), (3, 1, u'+    ASSERT(memcmp("hello\\n", buf->base, nread) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: on_read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(memcmp("hello\\n", buf.base, nread) == 0);'), (3, 1, u'+    ASSERT(memcmp("hello\\n", buf->base, nread) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(memcmp("hello\\n", buf.base, nread) == 0);'), (3, 1, u'+    ASSERT(memcmp("hello\\n", buf->base, nread) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  ASSERT(memcmp("hello again\\n", buf.base, nread) == 0);'), (6, 1, u'+  ASSERT(memcmp("hello again\\n", buf->base, nread) == 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: on_read_alloc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  ASSERT(memcmp("hello again\\n", buf.base, nread) == 0);'), (6, 1, u'+  ASSERT(memcmp("hello again\\n", buf->base, nread) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  ASSERT(memcmp("hello again\\n", buf.base, nread) == 0);'), (6, 1, u'+  ASSERT(memcmp("hello again\\n", buf->base, nread) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(nread > 0 && buf.base && pending != UV_UNKNOWN_HANDLE);'), (3, 1, u'+  ASSERT(nread > 0 && buf->base && pending != UV_UNKNOWN_HANDLE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: on_read_connection
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(nread > 0 && buf.base && pending != UV_UNKNOWN_HANDLE);'), (3, 1, u'+  ASSERT(nread > 0 && buf->base && pending != UV_UNKNOWN_HANDLE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(nread > 0 && buf.base && pending != UV_UNKNOWN_HANDLE);'), (3, 1, u'+  ASSERT(nread > 0 && buf->base && pending != UV_UNKNOWN_HANDLE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(memcmp("hello\\n", buf.base, nread) == 0);'), (3, 1, u'+  ASSERT(memcmp("hello\\n", buf->base, nread) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: on_read_connection
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(memcmp("hello\\n", buf.base, nread) == 0);'), (3, 1, u'+  ASSERT(memcmp("hello\\n", buf->base, nread) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(memcmp("hello\\n", buf.base, nread) == 0);'), (3, 1, u'+  ASSERT(memcmp("hello\\n", buf->base, nread) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(memcmp("world\\n", buf.base, nread) == 0);'), (3, 1, u'+  ASSERT(memcmp("world\\n", buf->base, nread) == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: on_tcp_child_process_read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(memcmp("world\\n", buf.base, nread) == 0);'), (3, 1, u'+  ASSERT(memcmp("world\\n", buf->base, nread) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(memcmp("world\\n", buf.base, nread) == 0);'), (3, 1, u'+  ASSERT(memcmp("world\\n", buf->base, nread) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: ipc_helper
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_readable((uv_stream_t*) &channel));'), (3, 2, u'-  ASSERT(uv_is_writable((uv_stream_t*) &channel));'), (4, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &channel));'), (5, 1, u'+  ASSERT(1 == uv_is_readable((uv_stream_t*) &channel));'), (6, 1, u'+  ASSERT(1 == uv_is_writable((uv_stream_t*) &channel));'), (7, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &channel));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: ipc_helper
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_readable((uv_stream_t*) &channel));'), (3, 2, u'-  ASSERT(uv_is_writable((uv_stream_t*) &channel));'), (4, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &channel));'), (5, 1, u'+  ASSERT(1 == uv_is_readable((uv_stream_t*) &channel));'), (6, 1, u'+  ASSERT(1 == uv_is_writable((uv_stream_t*) &channel));'), (7, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &channel));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_readable((uv_stream_t*) &channel));'), (3, 2, u'-  ASSERT(uv_is_writable((uv_stream_t*) &channel));'), (4, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) &channel));'), (5, 1, u'+  ASSERT(1 == uv_is_readable((uv_stream_t*) &channel));'), (6, 1, u'+  ASSERT(1 == uv_is_writable((uv_stream_t*) &channel));'), (7, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &channel));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_readable((uv_stream_t*)&channel));'), (3, 2, u'-  ASSERT(uv_is_writable((uv_stream_t*)&channel));'), (4, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*)&channel));'), (5, 1, u'+  ASSERT(1 == uv_is_readable((uv_stream_t*) &channel));'), (6, 1, u'+  ASSERT(1 == uv_is_writable((uv_stream_t*) &channel));'), (7, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &channel));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: ipc_helper_tcp_connection
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_readable((uv_stream_t*)&channel));'), (3, 2, u'-  ASSERT(uv_is_writable((uv_stream_t*)&channel));'), (4, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*)&channel));'), (5, 1, u'+  ASSERT(1 == uv_is_readable((uv_stream_t*) &channel));'), (6, 1, u'+  ASSERT(1 == uv_is_writable((uv_stream_t*) &channel));'), (7, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &channel));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_readable((uv_stream_t*)&channel));'), (3, 2, u'-  ASSERT(uv_is_writable((uv_stream_t*)&channel));'), (4, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*)&channel));'), (5, 1, u'+  ASSERT(1 == uv_is_readable((uv_stream_t*) &channel));'), (6, 1, u'+  ASSERT(1 == uv_is_writable((uv_stream_t*) &channel));'), (7, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &channel));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: ipc_helper_tcp_connection
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: ipc_helper_tcp_connection
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+  ASSERT(handle);'), (29, 1, u'+  ASSERT(status == 0);'), (36, 1, u'+  ASSERT(req);'), (40, 1, u'+  ASSERT(req);'), (41, 1, u'+  ASSERT(status == 0);'), (47, 1, u'+  ASSERT(!uv_loop_alive(uv_default_loop()));'), (52, 1, u'+  ASSERT(uv_loop_alive(uv_default_loop()));'), (55, 1, u'+  ASSERT(r == 0);'), (56, 1, u'+  ASSERT(!uv_loop_alive(uv_default_loop()));'), (60, 1, u'+  ASSERT(r == 0);'), (61, 1, u'+  ASSERT(uv_loop_alive(uv_default_loop()));'), (64, 1, u'+  ASSERT(r == 0);'), (65, 1, u'+  ASSERT(!uv_loop_alive(uv_default_loop()));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(prepare_called == 3);'), (3, 1, u'+  ASSERT(prepare_called > 1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(prepare_called == 3);'), (3, 1, u'+  ASSERT(prepare_called > 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(prepare_called == 3);'), (3, 1, u'+  ASSERT(prepare_called > 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+    ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_NOWAIT));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: connection_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: client_connect
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: pinger_read_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(buf.base[i] == PING[pinger->state]);'), (3, 1, u'+    ASSERT(buf->base[i] == PING[pinger->state]);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: pinger_read_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(buf.base[i] == PING[pinger->state]);'), (3, 1, u'+    ASSERT(buf->base[i] == PING[pinger->state]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(buf.base[i] == PING[pinger->state]);'), (3, 1, u'+    ASSERT(buf->base[i] == PING[pinger->state]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_readable(req->handle));'), (3, 2, u'-  ASSERT(uv_is_writable(req->handle));'), (4, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t *)req->handle));'), (5, 1, u'+  ASSERT(1 == uv_is_readable(req->handle));'), (6, 1, u'+  ASSERT(1 == uv_is_writable(req->handle));'), (7, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t *) req->handle));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: pinger_on_connect
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_readable(req->handle));'), (3, 2, u'-  ASSERT(uv_is_writable(req->handle));'), (4, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t *)req->handle));'), (5, 1, u'+  ASSERT(1 == uv_is_readable(req->handle));'), (6, 1, u'+  ASSERT(1 == uv_is_writable(req->handle));'), (7, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t *) req->handle));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_readable(req->handle));'), (3, 2, u'-  ASSERT(uv_is_writable(req->handle));'), (4, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t *)req->handle));'), (5, 1, u'+  ASSERT(1 == uv_is_readable(req->handle));'), (6, 1, u'+  ASSERT(1 == uv_is_writable(req->handle));'), (7, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t *) req->handle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT(0 ==uv_ip6_addr("::1", TEST_PORT, &server_addr));')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: tcp_pinger_v6_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT(0 ==uv_ip6_addr("::1", TEST_PORT, &server_addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT(0 ==uv_ip6_addr("::1", TEST_PORT, &server_addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: tcp_pinger_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRINUSE);'), (5, 1, u'+  ASSERT(r == UV_EADDRINUSE);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRINUSE);'), (5, 1, u'+  ASSERT(r == UV_EADDRINUSE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRINUSE);'), (5, 1, u'+  ASSERT(r == UV_EADDRINUSE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (5, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (5, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (5, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EACCES);'), (7, 1, u'+  ASSERT(r == UV_EACCES);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EACCES);'), (7, 1, u'+  ASSERT(r == UV_EACCES);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EACCES);'), (7, 1, u'+  ASSERT(r == UV_EACCES);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (5, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (5, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (5, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (7, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (7, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (7, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOENT);'), (4, 1, u'+  ASSERT(status == UV_ENOENT);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: close_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOENT);'), (4, 1, u'+  ASSERT(status == UV_ENOENT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOENT);'), (4, 1, u'+  ASSERT(status == UV_ENOENT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOTSOCK ||'), (5, 1, u'+  ASSERT(status == UV_ENOTSOCK || status == UV_ECONNREFUSED);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: connect_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOTSOCK ||'), (5, 1, u'+  ASSERT(status == UV_ENOTSOCK || status == UV_ECONNREFUSED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOTSOCK ||'), (5, 1, u'+  ASSERT(status == UV_ENOTSOCK || status == UV_ECONNREFUSED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+  ASSERT(handle == (uv_handle_t*) &pipe_client ||'), (45, 1, u'+  ASSERT(req == &connect_req);'), (46, 1, u'+  ASSERT(status == 0);'), (59, 1, u'+  ASSERT(status == 0);'), (68, 1, u'+  ASSERT(loop != NULL);'), (71, 1, u'+  ASSERT(r == 0);'), (74, 1, u'+  ASSERT(r == 0);'), (77, 1, u'+  ASSERT(r == 0);'), (80, 1, u'+  ASSERT(r == 0);'), (85, 1, u'+  ASSERT(r == 0);'), (86, 1, u'+  ASSERT(pipe_client_connect_cb_called == 1);'), (87, 1, u'+  ASSERT(pipe_close_cb_called == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT(UV_OK == err.code);'), (7, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT(UV_OK == err.code);'), (7, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT(UV_OK == err.code);'), (7, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_OK == err.code);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_OK == err.code);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_OK == err.code);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_OK == err.code);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_OK == err.code);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_OK == err.code);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_OK == err.code);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_OK == err.code);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_OK == err.code);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_OK == err.code);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_OK == err.code);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_OK == err.code);'), (3, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(uv_is_active((uv_handle_t*) handle));'), (3, 1, u'+    ASSERT(1 == uv_is_active((uv_handle_t*) handle));'), (5, 2, u'-    ASSERT(!uv_is_active((uv_handle_t*) handle));'), (6, 1, u'+    ASSERT(0 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: connection_poll_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(uv_is_active((uv_handle_t*) handle));'), (3, 1, u'+    ASSERT(1 == uv_is_active((uv_handle_t*) handle));'), (5, 2, u'-    ASSERT(!uv_is_active((uv_handle_t*) handle));'), (6, 1, u'+    ASSERT(0 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(uv_is_active((uv_handle_t*) handle));'), (3, 1, u'+    ASSERT(1 == uv_is_active((uv_handle_t*) handle));'), (5, 2, u'-    ASSERT(!uv_is_active((uv_handle_t*) handle));'), (6, 1, u'+    ASSERT(0 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*) timer));'), (3, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) timer));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: delay_timer_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*) timer));'), (3, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) timer));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*) timer));'), (3, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) timer));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: server_poll_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));'), (9, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", 0, &addr));')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: start_client
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));'), (9, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", 0, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));'), (9, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", 0, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT(UV_OK == err.code);'), (7, 1, u'+  ASSERT(err == 0);'), (10, 2, u'-  ASSERT(UV_OK == err.code);'), (11, 1, u'+  ASSERT(err == 0);'), (14, 2, u'-  ASSERT(UV_OK == err.code);'), (15, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: set_title
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT(UV_OK == err.code);'), (7, 1, u'+  ASSERT(err == 0);'), (10, 2, u'-  ASSERT(UV_OK == err.code);'), (11, 1, u'+  ASSERT(err == 0);'), (14, 2, u'-  ASSERT(UV_OK == err.code);'), (15, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT(UV_OK == err.code);'), (7, 1, u'+  ASSERT(err == 0);'), (10, 2, u'-  ASSERT(UV_OK == err.code);'), (11, 1, u'+  ASSERT(err == 0);'), (14, 2, u'-  ASSERT(UV_OK == err.code);'), (15, 1, u'+  ASSERT(err == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT(uv_has_ref((uv_handle_t*)&h) == 1);'), (10, 1, u'+  ASSERT(uv_has_ref((uv_handle_t*)&h) == 0);')]
===========================================
===========================================
Total add: 12
Total del: 0
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT(uv_has_ref((uv_handle_t*)&h) == 1);'), (10, 1, u'+  ASSERT(uv_has_ref((uv_handle_t*)&h) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT(uv_has_ref((uv_handle_t*)&h) == 1);'), (10, 1, u'+  ASSERT(uv_has_ref((uv_handle_t*)&h) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(-1 == uv_sem_trywait(&sem));'), (3, 1, u'+  ASSERT(UV_EAGAIN == uv_sem_trywait(&sem));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(-1 == uv_sem_trywait(&sem));'), (3, 1, u'+  ASSERT(UV_EAGAIN == uv_sem_trywait(&sem));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(-1 == uv_sem_trywait(&sem));'), (3, 1, u'+  ASSERT(UV_EAGAIN == uv_sem_trywait(&sem));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(-1 == uv_sem_trywait(&sem));'), (3, 1, u'+  ASSERT(UV_EAGAIN == uv_sem_trywait(&sem));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(-1 == uv_sem_trywait(&sem));'), (3, 1, u'+  ASSERT(UV_EAGAIN == uv_sem_trywait(&sem));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(-1 == uv_sem_trywait(&sem));'), (3, 1, u'+  ASSERT(UV_EAGAIN == uv_sem_trywait(&sem));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT(status == 0 || (status == -1 && err == UV_ECANCELED));'), (5, 1, u'+  ASSERT(status == 0 || status == UV_ECANCELED);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: static int close_cb_called = 0;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT(status == 0 || (status == -1 && err == UV_ECANCELED));'), (5, 1, u'+  ASSERT(status == 0 || status == UV_ECANCELED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT(status == 0 || (status == -1 && err == UV_ECANCELED));'), (5, 1, u'+  ASSERT(status == 0 || status == UV_ECANCELED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) req->handle));'), (3, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) req->handle));'), (5, 2, u'-  ASSERT(uv_is_closing((uv_handle_t*) req->handle));'), (6, 1, u'+  ASSERT(1 == uv_is_closing((uv_handle_t*) req->handle));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: connect_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) req->handle));'), (3, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) req->handle));'), (5, 2, u'-  ASSERT(uv_is_closing((uv_handle_t*) req->handle));'), (6, 1, u'+  ASSERT(1 == uv_is_closing((uv_handle_t*) req->handle));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_closing((uv_handle_t*) req->handle));'), (3, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) req->handle));'), (5, 2, u'-  ASSERT(uv_is_closing((uv_handle_t*) req->handle));'), (6, 1, u'+  ASSERT(1 == uv_is_closing((uv_handle_t*) req->handle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(err.code == UV_EAGAIN);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: read_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(err.code == UV_EAGAIN);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(err.code == UV_EAGAIN);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-    ASSERT(buf.base[0] == 'Q');"), (4, 1, u"+    ASSERT(buf->base[0] == 'Q');")]
===========================================
===========================================
Total add: 2
Total del: 2
Header: read_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-    ASSERT(buf.base[0] == 'Q');"), (4, 1, u"+    ASSERT(buf->base[0] == 'Q');")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-    ASSERT(buf.base[0] == 'Q');"), (4, 1, u"+    ASSERT(buf->base[0] == 'Q');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(err.code == UV_EOF);'), (5, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: read_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(err.code == UV_EOF);'), (5, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(err.code == UV_EOF);'), (5, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &server_addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(signal1_cb_counter == 4 * NUM_SIGNAL_HANDLING_THREADS);'), (3, 2, u'-  ASSERT(signal2_cb_counter == 2 * NUM_SIGNAL_HANDLING_THREADS);'), (7, 1, u'+  ASSERT(signal1_cb_counter == 8 * (NUM_SIGNAL_HANDLING_THREADS / 3));'), (8, 1, u'+  ASSERT(signal2_cb_counter == 4 * (NUM_SIGNAL_HANDLING_THREADS / 3));')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(signal1_cb_counter == 4 * NUM_SIGNAL_HANDLING_THREADS);'), (3, 2, u'-  ASSERT(signal2_cb_counter == 2 * NUM_SIGNAL_HANDLING_THREADS);'), (7, 1, u'+  ASSERT(signal1_cb_counter == 8 * (NUM_SIGNAL_HANDLING_THREADS / 3));'), (8, 1, u'+  ASSERT(signal2_cb_counter == 4 * (NUM_SIGNAL_HANDLING_THREADS / 3));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(signal1_cb_counter == 4 * NUM_SIGNAL_HANDLING_THREADS);'), (3, 2, u'-  ASSERT(signal2_cb_counter == 2 * NUM_SIGNAL_HANDLING_THREADS);'), (7, 1, u'+  ASSERT(signal1_cb_counter == 8 * (NUM_SIGNAL_HANDLING_THREADS / 3));'), (8, 1, u'+  ASSERT(signal2_cb_counter == 4 * (NUM_SIGNAL_HANDLING_THREADS / 3));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT(exit_status == -1);'), (7, 2, u'-  ASSERT(term_signal == 0);'), (12, 1, u'+  ASSERT(0 && "fail_cb called");')]
===========================================
===========================================
Total add: 4
Total del: 7
Header: exit_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT(exit_status == -1);'), (7, 2, u'-  ASSERT(term_signal == 0);'), (12, 1, u'+  ASSERT(0 && "fail_cb called");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  ASSERT(exit_status == -1);'), (7, 2, u'-  ASSERT(term_signal == 0);'), (12, 1, u'+  ASSERT(0 && "fail_cb called");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(err.code == UV_ESRCH);'), (3, 1, u'+  ASSERT(err == UV_ESRCH);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: kill_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(err.code == UV_ESRCH);'), (3, 1, u'+  ASSERT(err == UV_ESRCH);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(err.code == UV_ESRCH);'), (3, 1, u'+  ASSERT(err == UV_ESRCH);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(err.code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: on_read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(err.code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(err.code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(0 == uv_spawn(uv_default_loop(), &process, options));'), (8, 2, u'-  ASSERT(0 != uv_is_active((uv_handle_t*)&process));'), (11, 1, u'+  ASSERT(r == UV_ENOENT || r == UV_EACCES);'), (12, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &process));'), (14, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOENT);')]
===========================================
===========================================
Total add: 7
Total del: 4
Header: timer_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(0 == uv_spawn(uv_default_loop(), &process, options));'), (8, 2, u'-  ASSERT(0 != uv_is_active((uv_handle_t*)&process));'), (11, 1, u'+  ASSERT(r == UV_ENOENT || r == UV_EACCES);'), (12, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &process));'), (14, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOENT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(0 == uv_spawn(uv_default_loop(), &process, options));'), (8, 2, u'-  ASSERT(0 != uv_is_active((uv_handle_t*)&process));'), (11, 1, u'+  ASSERT(r == UV_ENOENT || r == UV_EACCES);'), (12, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &process));'), (14, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOENT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  ASSERT(r != -1);'), (29, 1, u'+  ASSERT(r == 0);'), (32, 1, u'+  ASSERT(r == 0);'), (34, 1, u'+  ASSERT(exit_cb_called == 1);'), (35, 1, u'+  ASSERT(close_cb_called == 1);'), (39, 1, u'+  ASSERT(r == 27);'), (43, 1, u'+  ASSERT(r == 0);'), (47, 1, u'+  ASSERT(strcmp("hello world\\nhello errworld\\n", output) == 0);')]
===========================================
===========================================
Total add: 55
Total del: 0
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  ASSERT(r != -1);'), (29, 1, u'+  ASSERT(r == 0);'), (32, 1, u'+  ASSERT(r == 0);'), (34, 1, u'+  ASSERT(exit_cb_called == 1);'), (35, 1, u'+  ASSERT(close_cb_called == 1);'), (39, 1, u'+  ASSERT(r == 27);'), (43, 1, u'+  ASSERT(r == 0);'), (47, 1, u'+  ASSERT(strcmp("hello world\\nhello errworld\\n", output) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  ASSERT(r != -1);'), (29, 1, u'+  ASSERT(r == 0);'), (32, 1, u'+  ASSERT(r == 0);'), (34, 1, u'+  ASSERT(exit_cb_called == 1);'), (35, 1, u'+  ASSERT(close_cb_called == 1);'), (39, 1, u'+  ASSERT(r == 27);'), (43, 1, u'+  ASSERT(r == 0);'), (47, 1, u'+  ASSERT(strcmp("hello world\\nhello errworld\\n", output) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(err.code == 0);'), (5, 1, u'+  ASSERT(r == 0);'), (8, 2, u'-  ASSERT(err.code == 0);'), (10, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(err.code == 0);'), (5, 1, u'+  ASSERT(r == 0);'), (8, 2, u'-  ASSERT(err.code == 0);'), (10, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(err.code == 0);'), (5, 1, u'+  ASSERT(r == 0);'), (8, 2, u'-  ASSERT(err.code == 0);'), (10, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(r == 0);'), (10, 1, u'+  ASSERT(r == 0);'), (13, 1, u'+  ASSERT(r == 0);'), (16, 1, u'+  ASSERT(r == 0);'), (18, 1, u'+  ASSERT(exit_cb_called == 0);'), (21, 1, u'+  ASSERT(r == 0);'), (23, 1, u'+  ASSERT(exit_cb_called == 1);'), (24, 1, u'+  ASSERT(strcmp(output, "TEST") == 0);')]
===========================================
===========================================
Total add: 48
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(r == 0);'), (10, 1, u'+  ASSERT(r == 0);'), (13, 1, u'+  ASSERT(r == 0);'), (16, 1, u'+  ASSERT(r == 0);'), (18, 1, u'+  ASSERT(exit_cb_called == 0);'), (21, 1, u'+  ASSERT(r == 0);'), (23, 1, u'+  ASSERT(exit_cb_called == 1);'), (24, 1, u'+  ASSERT(strcmp(output, "TEST") == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT(r == 0);'), (10, 1, u'+  ASSERT(r == 0);'), (13, 1, u'+  ASSERT(r == 0);'), (16, 1, u'+  ASSERT(r == 0);'), (18, 1, u'+  ASSERT(exit_cb_called == 0);'), (21, 1, u'+  ASSERT(r == 0);'), (23, 1, u'+  ASSERT(exit_cb_called == 1);'), (24, 1, u'+  ASSERT(strcmp(output, "TEST") == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(err.code == UV_OK);'), (5, 1, u'+  ASSERT(r == 0);'), (9, 2, u'-  ASSERT(err.code == UV_OK);'), (11, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(err.code == UV_OK);'), (5, 1, u'+  ASSERT(r == 0);'), (9, 2, u'-  ASSERT(err.code == UV_OK);'), (11, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(err.code == UV_OK);'), (5, 1, u'+  ASSERT(r == 0);'), (9, 2, u'-  ASSERT(err.code == UV_OK);'), (11, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(result.code == UV_OK);'), (3, 1, u'+  ASSERT(result == 0);'), (5, 2, u'-  ASSERT(result.code == UV_OK);'), (6, 1, u'+  ASSERT(result == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(result.code == UV_OK);'), (3, 1, u'+  ASSERT(result == 0);'), (5, 2, u'-  ASSERT(result.code == UV_OK);'), (6, 1, u'+  ASSERT(result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(result.code == UV_OK);'), (3, 1, u'+  ASSERT(result == 0);'), (5, 2, u'-  ASSERT(result.code == UV_OK);'), (6, 1, u'+  ASSERT(result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(wcscmp(verbatim_output, L"cmd.exe /c c:\\\\path\\\\to\\\\node.exe --eval \\"require(\'c:\\\\\\\\path\\\\\\\\to\\\\\\\\test.js\')\\"") == 0);'), (3, 2, u'-  ASSERT(wcscmp(non_verbatim_output, L"cmd.exe /c \\"c:\\\\path\\\\to\\\\node.exe --eval \\\\\\"require(\'c:\\\\\\\\path\\\\\\\\to\\\\\\\\test.js\')\\\\\\"\\"") == 0);'), (4, 1, u'+  ASSERT(wcscmp(verbatim_output,'), (7, 1, u'+  ASSERT(wcscmp(non_verbatim_output,')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(wcscmp(verbatim_output, L"cmd.exe /c c:\\\\path\\\\to\\\\node.exe --eval \\"require(\'c:\\\\\\\\path\\\\\\\\to\\\\\\\\test.js\')\\"") == 0);'), (3, 2, u'-  ASSERT(wcscmp(non_verbatim_output, L"cmd.exe /c \\"c:\\\\path\\\\to\\\\node.exe --eval \\\\\\"require(\'c:\\\\\\\\path\\\\\\\\to\\\\\\\\test.js\')\\\\\\"\\"") == 0);'), (4, 1, u'+  ASSERT(wcscmp(verbatim_output,'), (7, 1, u'+  ASSERT(wcscmp(non_verbatim_output,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(wcscmp(verbatim_output, L"cmd.exe /c c:\\\\path\\\\to\\\\node.exe --eval \\"require(\'c:\\\\\\\\path\\\\\\\\to\\\\\\\\test.js\')\\"") == 0);'), (3, 2, u'-  ASSERT(wcscmp(non_verbatim_output, L"cmd.exe /c \\"c:\\\\path\\\\to\\\\node.exe --eval \\\\\\"require(\'c:\\\\\\\\path\\\\\\\\to\\\\\\\\test.js\')\\\\\\"\\"") == 0);'), (4, 1, u'+  ASSERT(wcscmp(verbatim_output,'), (7, 1, u'+  ASSERT(wcscmp(non_verbatim_output,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(result.code == UV_OK);'), (3, 1, u'+  ASSERT(result == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(result.code == UV_OK);'), (3, 1, u'+  ASSERT(result == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(result.code == UV_OK);'), (3, 1, u'+  ASSERT(result == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(r == 0);'), (4, 1, u'+    ASSERT(0 == setgid(pw->pw_gid));'), (5, 1, u'+    ASSERT(0 == setuid(pw->pw_uid));'), (16, 2, u'-  ASSERT(r == 0);'), (18, 1, u'+  ASSERT(r == UV_EPERM);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(r == 0);'), (4, 1, u'+    ASSERT(0 == setgid(pw->pw_gid));'), (5, 1, u'+    ASSERT(0 == setuid(pw->pw_uid));'), (16, 2, u'-  ASSERT(r == 0);'), (18, 1, u'+  ASSERT(r == UV_EPERM);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(r == 0);'), (4, 1, u'+    ASSERT(0 == setgid(pw->pw_gid));'), (5, 1, u'+    ASSERT(0 == setuid(pw->pw_uid));'), (16, 2, u'-  ASSERT(r == 0);'), (18, 1, u'+  ASSERT(r == UV_EPERM);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(exit_cb_called == 1);'), (3, 2, u'-  ASSERT(close_cb_called == 1);'), (4, 1, u'+  ASSERT(close_cb_called == 0);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(exit_cb_called == 1);'), (3, 2, u'-  ASSERT(close_cb_called == 1);'), (4, 1, u'+  ASSERT(close_cb_called == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(exit_cb_called == 1);'), (3, 2, u'-  ASSERT(close_cb_called == 1);'), (4, 1, u'+  ASSERT(close_cb_called == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(r == 0);'), (4, 1, u'+    ASSERT(0 == setgid(pw->pw_gid));'), (5, 1, u'+    ASSERT(0 == setuid(pw->pw_uid));'), (16, 2, u'-  ASSERT(r == 0);'), (18, 1, u'+  ASSERT(r == UV_EPERM);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(r == 0);'), (4, 1, u'+    ASSERT(0 == setgid(pw->pw_gid));'), (5, 1, u'+    ASSERT(0 == setuid(pw->pw_uid));'), (16, 2, u'-  ASSERT(r == 0);'), (18, 1, u'+  ASSERT(r == UV_EPERM);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    ASSERT(r == 0);'), (4, 1, u'+    ASSERT(0 == setgid(pw->pw_gid));'), (5, 1, u'+    ASSERT(0 == setuid(pw->pw_uid));'), (16, 2, u'-  ASSERT(r == 0);'), (18, 1, u'+  ASSERT(r == UV_EPERM);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(exit_cb_called == 1);'), (3, 2, u'-  ASSERT(close_cb_called == 1);'), (4, 1, u'+  ASSERT(close_cb_called == 0);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(exit_cb_called == 1);'), (3, 2, u'-  ASSERT(close_cb_called == 1);'), (4, 1, u'+  ASSERT(close_cb_called == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(exit_cb_called == 1);'), (3, 2, u'-  ASSERT(close_cb_called == 1);'), (4, 1, u'+  ASSERT(close_cb_called == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOTSUP);'), (6, 1, u'+  ASSERT(r == UV_ENOTSUP);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOTSUP);'), (6, 1, u'+  ASSERT(r == UV_ENOTSUP);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOTSUP);'), (6, 1, u'+  ASSERT(r == UV_ENOTSUP);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOTSUP);'), (6, 1, u'+  ASSERT(r == UV_ENOTSUP);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOTSUP);'), (6, 1, u'+  ASSERT(r == UV_ENOTSUP);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOTSUP);'), (6, 1, u'+  ASSERT(r == UV_ENOTSUP);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0 == uv_spawn(uv_default_loop(), &process, options));'), (3, 1, u'+  ASSERT(0 == uv_spawn(uv_default_loop(), &process, &options));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0 == uv_spawn(uv_default_loop(), &process, options));'), (3, 1, u'+  ASSERT(0 == uv_spawn(uv_default_loop(), &process, &options));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0 == uv_spawn(uv_default_loop(), &process, options));'), (3, 1, u'+  ASSERT(0 == uv_spawn(uv_default_loop(), &process, &options));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0 != uv_is_closing((uv_handle_t*) &process));'), (3, 1, u'+  ASSERT(1 == uv_is_closing((uv_handle_t*) &process));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0 != uv_is_closing((uv_handle_t*) &process));'), (3, 1, u'+  ASSERT(1 == uv_is_closing((uv_handle_t*) &process));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0 != uv_is_closing((uv_handle_t*) &process));'), (3, 1, u'+  ASSERT(1 == uv_is_closing((uv_handle_t*) &process));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(nread > 0 || uv_last_error(uv_default_loop()).code == UV_EOF);'), (3, 1, u'+  ASSERT(nread > 0 || nread == UV_EOF);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: on_read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(nread > 0 || uv_last_error(uv_default_loop()).code == UV_EOF);'), (3, 1, u'+  ASSERT(nread > 0 || nread == UV_EOF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(nread > 0 || uv_last_error(uv_default_loop()).code == UV_EOF);'), (3, 1, u'+  ASSERT(nread > 0 || nread == UV_EOF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  ASSERT(memcmp("hello world\\n", buf.base, nread) == 0);'), (6, 1, u'+  ASSERT(memcmp("hello world\\n", buf->base, nread) == 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: static uv_pipe_t stdout_pipe;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  ASSERT(memcmp("hello world\\n", buf.base, nread) == 0);'), (6, 1, u'+  ASSERT(memcmp("hello world\\n", buf->base, nread) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  ASSERT(memcmp("hello world\\n", buf.base, nread) == 0);'), (6, 1, u'+  ASSERT(memcmp("hello world\\n", buf->base, nread) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRINUSE);'), (5, 1, u'+  ASSERT(r == UV_EADDRINUSE);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRINUSE);'), (5, 1, u'+  ASSERT(r == UV_EADDRINUSE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRINUSE);'), (5, 1, u'+  ASSERT(r == UV_EADDRINUSE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.255.255.255", TEST_PORT, &addr));'), (10, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRNOTAVAIL);'), (13, 1, u'+  ASSERT(r == 0 || r == UV_EADDRNOTAVAIL);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.255.255.255", TEST_PORT, &addr));'), (10, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRNOTAVAIL);'), (13, 1, u'+  ASSERT(r == 0 || r == UV_EADDRNOTAVAIL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.255.255.255", TEST_PORT, &addr));'), (10, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRNOTAVAIL);'), (13, 1, u'+  ASSERT(r == 0 || r == UV_EADDRNOTAVAIL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("4.4.4.4", TEST_PORT, &addr));'), (7, 2, u'-  ASSERT(r == -1);'), (8, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRNOTAVAIL);'), (10, 1, u'+  ASSERT(r == UV_EADDRNOTAVAIL);')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("4.4.4.4", TEST_PORT, &addr));'), (7, 2, u'-  ASSERT(r == -1);'), (8, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRNOTAVAIL);'), (10, 1, u'+  ASSERT(r == UV_EADDRNOTAVAIL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("4.4.4.4", TEST_PORT, &addr));'), (7, 2, u'-  ASSERT(r == -1);'), (8, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRNOTAVAIL);'), (10, 1, u'+  ASSERT(r == UV_EADDRNOTAVAIL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (7, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (7, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (7, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr1));'), (3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT_2, &addr2));'), (11, 2, u'-  ASSERT(r == -1);'), (13, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (15, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr1));'), (3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT_2, &addr2));'), (11, 2, u'-  ASSERT(r == -1);'), (13, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (15, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr1));'), (3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT_2, &addr2));'), (11, 2, u'-  ASSERT(r == -1);'), (13, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (15, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip6_addr("::", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip6_addr("::", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip6_addr("::", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRINUSE);'), (5, 1, u'+  ASSERT(r == UV_EADDRINUSE);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRINUSE);'), (5, 1, u'+  ASSERT(r == UV_EADDRINUSE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (4, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRINUSE);'), (5, 1, u'+  ASSERT(r == UV_EADDRINUSE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip6_addr("4:4:4:4:4:4:4:4", TEST_PORT, &addr));'), (7, 2, u'-  ASSERT(r == -1);'), (8, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRNOTAVAIL);'), (10, 1, u'+  ASSERT(r == UV_EADDRNOTAVAIL);')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip6_addr("4:4:4:4:4:4:4:4", TEST_PORT, &addr));'), (7, 2, u'-  ASSERT(r == -1);'), (8, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRNOTAVAIL);'), (10, 1, u'+  ASSERT(r == UV_EADDRNOTAVAIL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip6_addr("4:4:4:4:4:4:4:4", TEST_PORT, &addr));'), (7, 2, u'-  ASSERT(r == -1);'), (8, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRNOTAVAIL);'), (10, 1, u'+  ASSERT(r == UV_EADDRNOTAVAIL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (7, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (7, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (7, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip6_addr("::", TEST_PORT, &addr1));'), (3, 1, u'+  ASSERT(0 == uv_ip6_addr("::", TEST_PORT_2, &addr2));'), (11, 2, u'-  ASSERT(r == -1);'), (13, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (15, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip6_addr("::", TEST_PORT, &addr1));'), (3, 1, u'+  ASSERT(0 == uv_ip6_addr("::", TEST_PORT_2, &addr2));'), (11, 2, u'-  ASSERT(r == -1);'), (13, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (15, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip6_addr("::", TEST_PORT, &addr1));'), (3, 1, u'+  ASSERT(0 == uv_ip6_addr("::", TEST_PORT_2, &addr2));'), (11, 2, u'-  ASSERT(r == -1);'), (13, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (15, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip6_addr("::1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip6_addr("::1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip6_addr("::1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+  ASSERT(status == 0);'), (56, 1, u'+    ASSERT(status != 0);'), (64, 1, u'+  ASSERT(status == 0);'), (65, 1, u'+  ASSERT(connect_reqs <= req);'), (66, 1, u'+  ASSERT(req <= connect_reqs + ARRAY_SIZE(connect_reqs));'), (71, 1, u'+  ASSERT(0 == uv_write(&write_reqs[i], outgoing, &buf, 1, write_cb));'), (85, 1, u'+  ASSERT(stream == (uv_stream_t*) &tcp_incoming[0]);'), (86, 1, u'+  ASSERT(0 == uv_read_stop(stream));'), (87, 1, u'+  ASSERT(1 == nread);'), (97, 1, u'+  ASSERT(0 == uv_tcp_init(loop, &tcp_check));'), (98, 1, u'+  ASSERT(0 == uv_tcp_connect(&tcp_check_req,'), (102, 1, u'+  ASSERT(0 == uv_read_start((uv_stream_t*) &tcp_check, alloc_cb, read_cb));'), (112, 1, u'+  ASSERT(server == (uv_stream_t*) &tcp_server);'), (120, 1, u'+  ASSERT(0 == uv_tcp_init(server->loop, incoming));'), (121, 1, u'+  ASSERT(0 == uv_accept(server, (uv_stream_t*) incoming));'), (129, 1, u'+    ASSERT(0 == uv_read_start((uv_stream_t*) incoming, alloc_cb, read_cb));'), (156, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));'), (158, 1, u'+  ASSERT(0 == uv_tcp_init(loop, &tcp_server));'), (159, 1, u'+  ASSERT(0 == uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr, 0));'), (160, 1, u'+  ASSERT(0 == uv_listen((uv_stream_t*) &tcp_server,'), (167, 1, u'+    ASSERT(0 == uv_tcp_init(loop, client));'), (168, 1, u'+    ASSERT(0 == uv_tcp_connect(&connect_reqs[i],'), (176, 1, u'+  ASSERT(ARRAY_SIZE(tcp_outgoing) == got_connections);'), (177, 1, u'+  ASSERT((ARRAY_SIZE(tcp_outgoing) + 2) == close_cb_called);'), (178, 1, u'+  ASSERT(ARRAY_SIZE(tcp_outgoing) == write_cb_called);'), (179, 1, u'+  ASSERT(1 == read_cb_called);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(req->handle->loop).code == UV_ECANCELED);'), (4, 1, u'+  ASSERT(status == UV_ECANCELED);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: close_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(req->handle->loop).code == UV_ECANCELED);'), (4, 1, u'+  ASSERT(status == UV_ECANCELED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(req->handle->loop).code == UV_ECANCELED);'), (4, 1, u'+  ASSERT(status == UV_ECANCELED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("1.2.3.4", TEST_PORT, &addr));'), (7, 2, u'-  ASSERT(0 == uv_tcp_connect(&connect_req, &tcp_handle, addr, connect_cb));'), (8, 1, u'+  ASSERT(0 == uv_tcp_connect(&connect_req,')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("1.2.3.4", TEST_PORT, &addr));'), (7, 2, u'-  ASSERT(0 == uv_tcp_connect(&connect_req, &tcp_handle, addr, connect_cb));'), (8, 1, u'+  ASSERT(0 == uv_tcp_connect(&connect_req,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("1.2.3.4", TEST_PORT, &addr));'), (7, 2, u'-  ASSERT(0 == uv_tcp_connect(&connect_req, &tcp_handle, addr, connect_cb));'), (8, 1, u'+  ASSERT(0 == uv_tcp_connect(&connect_req,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: connection_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: start_server
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 1, u'+  ASSERT(status < 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: close_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 1, u'+  ASSERT(status < 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 1, u'+  ASSERT(status < 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 1, u'+  ASSERT(status < 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: connect_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 1, u'+  ASSERT(status < 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 1, u'+  ASSERT(status < 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EBADF);'), (4, 1, u'+  ASSERT(r == UV_EBADF);')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EBADF);'), (4, 1, u'+  ASSERT(r == UV_EBADF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EBADF);'), (4, 1, u'+  ASSERT(r == UV_EBADF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (10, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Total add: 5
Total del: 4
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (10, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (10, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 1, u'+  ASSERT(status == UV_ECANCELED);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: connect_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 1, u'+  ASSERT(status == UV_ECANCELED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 1, u'+  ASSERT(status == UV_ECANCELED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("8.8.8.8", 9999, &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("8.8.8.8", 9999, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("8.8.8.8", 9999, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (10, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Total add: 5
Total del: 4
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (10, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  ASSERT(r == -1);'), (5, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (10, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (9, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
Total add: 6
Total del: 3
Header: create_tcp_socket
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (9, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (9, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(memcmp("PING", buf.base, nread) == 0);'), (3, 1, u'+    ASSERT(memcmp("PING", buf->base, nread) == 0);'), (6, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (7, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: read_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(memcmp("PING", buf.base, nread) == 0);'), (3, 1, u'+    ASSERT(memcmp("PING", buf->base, nread) == 0);'), (6, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (7, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(memcmp("PING", buf.base, nread) == 0);'), (3, 1, u'+    ASSERT(memcmp("PING", buf->base, nread) == 0);'), (6, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (7, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));'), (6, 2, u'-  ASSERT(0 == uv_tcp_connect(&connect_req, &tcp_handle, addr, connect_cb));'), (7, 1, u'+  ASSERT(0 == uv_tcp_connect(&connect_req,')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));'), (6, 2, u'-  ASSERT(0 == uv_tcp_connect(&connect_req, &tcp_handle, addr, connect_cb));'), (7, 1, u'+  ASSERT(0 == uv_tcp_connect(&connect_req,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));'), (6, 2, u'-  ASSERT(0 == uv_tcp_connect(&connect_req, &tcp_handle, addr, connect_cb));'), (7, 1, u'+  ASSERT(0 == uv_tcp_connect(&connect_req,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+  ASSERT(status == 0);'), (66, 1, u'+    ASSERT(r >= 0);'), (97, 1, u'+  ASSERT(status == 0);'), (99, 1, u'+  ASSERT(0 == uv_tcp_init(tcp->loop, &incoming));'), (100, 1, u'+  ASSERT(0 == uv_accept(tcp, (uv_stream_t*) &incoming));'), (103, 1, u'+  ASSERT(0 == uv_read_start((uv_stream_t*) &incoming, alloc_cb, read_cb));'), (110, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));'), (112, 1, u'+  ASSERT(0 == uv_tcp_init(uv_default_loop(), &server));'), (113, 1, u'+  ASSERT(0 == uv_tcp_bind(&server, (struct sockaddr*) &addr, 0));'), (114, 1, u'+  ASSERT(0 == uv_listen((uv_stream_t*) &server, 128, connection_cb));'), (124, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));'), (126, 1, u'+  ASSERT(0 == uv_tcp_init(uv_default_loop(), &client));'), (127, 1, u'+  ASSERT(0 == uv_tcp_connect(&connect_req,'), (132, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (134, 1, u'+  ASSERT(connect_cb_called == 1);'), (135, 1, u'+  ASSERT(close_cb_called == 3);'), (136, 1, u'+  ASSERT(connection_cb_called == 1);'), (137, 1, u'+  ASSERT(bytes_read == bytes_written);'), (138, 1, u'+  ASSERT(bytes_written > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0 == uv_tcp_bind(&server_handle, addr));'), (3, 1, u'+  ASSERT(0 == uv_tcp_bind(&server_handle, (const struct sockaddr*) &addr, 0));'), (5, 2, u'-  ASSERT(0 == uv_tcp_connect(&connect_req, &client_handle, addr, connect_cb));'), (6, 1, u'+  ASSERT(0 == uv_tcp_connect(&connect_req,')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0 == uv_tcp_bind(&server_handle, addr));'), (3, 1, u'+  ASSERT(0 == uv_tcp_bind(&server_handle, (const struct sockaddr*) &addr, 0));'), (5, 2, u'-  ASSERT(0 == uv_tcp_connect(&connect_req, &client_handle, addr, connect_cb));'), (6, 1, u'+  ASSERT(0 == uv_tcp_connect(&connect_req,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(0 == uv_tcp_bind(&server_handle, addr));'), (3, 1, u'+  ASSERT(0 == uv_tcp_bind(&server_handle, (const struct sockaddr*) &addr, 0));'), (5, 2, u'-  ASSERT(0 == uv_tcp_connect(&connect_req, &client_handle, addr, connect_cb));'), (6, 1, u'+  ASSERT(0 == uv_tcp_connect(&connect_req,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    ASSERT(uv_last_error(stream->loop).code == UV_ECONNRESET ||'), (10, 1, u'+    ASSERT(nread == UV_ECONNRESET || nread == UV_EOF);')]
===========================================
===========================================
Total add: 4
Total del: 5
Header: alloc_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    ASSERT(uv_last_error(stream->loop).code == UV_ECONNRESET ||'), (10, 1, u'+    ASSERT(nread == UV_ECONNRESET || nread == UV_EOF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    ASSERT(uv_last_error(stream->loop).code == UV_ECONNRESET ||'), (10, 1, u'+    ASSERT(nread == UV_ECONNRESET || nread == UV_EOF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: read_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (3, 1, u'+    ASSERT(nread == UV_EOF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(NULL == uv_key_get(&tls_key));'), (7, 1, u'+  ASSERT(arg == uv_key_get(&tls_key));'), (9, 1, u'+  ASSERT(NULL == uv_key_get(&tls_key));'), (16, 1, u'+  ASSERT(0 == uv_key_create(&tls_key));'), (17, 1, u'+  ASSERT(NULL == uv_key_get(&tls_key));'), (19, 1, u'+  ASSERT(name == uv_key_get(&tls_key));'), (20, 1, u'+  ASSERT(0 == uv_thread_create(threads + 0, tls_thread, threads + 0));'), (21, 1, u'+  ASSERT(0 == uv_thread_create(threads + 1, tls_thread, threads + 1));'), (22, 1, u'+  ASSERT(0 == uv_thread_join(threads + 0));'), (23, 1, u'+  ASSERT(0 == uv_thread_join(threads + 1));')]
===========================================
===========================================
Total add: 25
Total del: 0
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(NULL == uv_key_get(&tls_key));'), (7, 1, u'+  ASSERT(arg == uv_key_get(&tls_key));'), (9, 1, u'+  ASSERT(NULL == uv_key_get(&tls_key));'), (16, 1, u'+  ASSERT(0 == uv_key_create(&tls_key));'), (17, 1, u'+  ASSERT(NULL == uv_key_get(&tls_key));'), (19, 1, u'+  ASSERT(name == uv_key_get(&tls_key));'), (20, 1, u'+  ASSERT(0 == uv_thread_create(threads + 0, tls_thread, threads + 0));'), (21, 1, u'+  ASSERT(0 == uv_thread_create(threads + 1, tls_thread, threads + 1));'), (22, 1, u'+  ASSERT(0 == uv_thread_join(threads + 0));'), (23, 1, u'+  ASSERT(0 == uv_thread_join(threads + 1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(NULL == uv_key_get(&tls_key));'), (7, 1, u'+  ASSERT(arg == uv_key_get(&tls_key));'), (9, 1, u'+  ASSERT(NULL == uv_key_get(&tls_key));'), (16, 1, u'+  ASSERT(0 == uv_key_create(&tls_key));'), (17, 1, u'+  ASSERT(NULL == uv_key_get(&tls_key));'), (19, 1, u'+  ASSERT(name == uv_key_get(&tls_key));'), (20, 1, u'+  ASSERT(0 == uv_thread_create(threads + 0, tls_thread, threads + 0));'), (21, 1, u'+  ASSERT(0 == uv_thread_create(threads + 1, tls_thread, threads + 1));'), (22, 1, u'+  ASSERT(0 == uv_thread_join(threads + 0));'), (23, 1, u'+  ASSERT(0 == uv_thread_join(threads + 1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->errorno == UV_ECANCELED);'), (3, 1, u'+  ASSERT(req->result == UV_ECANCELED);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: cleanup_threadpool
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->errorno == UV_ECANCELED);'), (3, 1, u'+  ASSERT(req->result == UV_ECANCELED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(req->errorno == UV_ECANCELED);'), (3, 1, u'+  ASSERT(req->result == UV_ECANCELED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_ECANCELED == uv_last_error(req->loop).code);'), (3, 2, u'-  ASSERT(UV_ECANCELED == status);'), (4, 1, u'+  ASSERT(status == UV_EAI_CANCELED);'), (5, 1, u'+  ASSERT(res == NULL);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: getaddrinfo_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_ECANCELED == uv_last_error(req->loop).code);'), (3, 2, u'-  ASSERT(UV_ECANCELED == status);'), (4, 1, u'+  ASSERT(status == UV_EAI_CANCELED);'), (5, 1, u'+  ASSERT(res == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(UV_ECANCELED == uv_last_error(req->loop).code);'), (3, 2, u'-  ASSERT(UV_ECANCELED == status);'), (4, 1, u'+  ASSERT(status == UV_EAI_CANCELED);'), (5, 1, u'+  ASSERT(res == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_last_error(req->loop).code == UV_ECANCELED);'), (3, 2, u'-  ASSERT(status == -1);'), (4, 1, u'+  ASSERT(status == UV_ECANCELED);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: work2_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_last_error(req->loop).code == UV_ECANCELED);'), (3, 2, u'-  ASSERT(status == -1);'), (4, 1, u'+  ASSERT(status == UV_ECANCELED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_last_error(req->loop).code == UV_ECANCELED);'), (3, 2, u'-  ASSERT(status == -1);'), (4, 1, u'+  ASSERT(status == UV_ECANCELED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 1, u'+  ASSERT(r == UV_EINVAL);'), (6, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 1, u'+  ASSERT(r == UV_EINVAL);'), (6, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 1, u'+  ASSERT(r == UV_EINVAL);'), (6, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(!uv_is_active((uv_handle_t*)handle));'), (3, 1, u'+    ASSERT(0 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: repeat_2_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(!uv_is_active((uv_handle_t*)handle));'), (3, 1, u'+    ASSERT(0 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(!uv_is_active((uv_handle_t*)handle));'), (3, 1, u'+    ASSERT(0 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (4, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (4, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (4, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(700 <= uv_now(uv_default_loop()) - start_time);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(700 <= uv_now(uv_default_loop()) - start_time);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(700 <= uv_now(uv_default_loop()) - start_time);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+  ASSERT(0 == uv_prepare_stop(&prepare_handle));'), (36, 1, u'+  ASSERT(0 == prepare_cb_called);'), (37, 1, u'+  ASSERT(1 == check_cb_called);'), (38, 1, u'+  ASSERT(0 == timer_cb_called);'), (44, 1, u'+  ASSERT(0 == uv_timer_stop(&timer_handle));'), (45, 1, u'+  ASSERT(1 == prepare_cb_called);'), (46, 1, u'+  ASSERT(1 == check_cb_called);'), (47, 1, u'+  ASSERT(0 == timer_cb_called);'), (53, 1, u'+  ASSERT(0 == uv_check_stop(&check_handle));'), (54, 1, u'+  ASSERT(0 == uv_timer_stop(&timer_handle));  /* Runs before timer_cb. */'), (55, 1, u'+  ASSERT(0 == uv_timer_start(&timer_handle, timer_cb, 50, 0));'), (56, 1, u'+  ASSERT(0 == uv_prepare_start(&prepare_handle, prepare_cb));'), (57, 1, u'+  ASSERT(0 == prepare_cb_called);'), (58, 1, u'+  ASSERT(0 == check_cb_called);'), (59, 1, u'+  ASSERT(0 == timer_cb_called);'), (65, 1, u'+  ASSERT(0 == uv_prepare_init(uv_default_loop(), &prepare_handle));'), (66, 1, u'+  ASSERT(0 == uv_check_init(uv_default_loop(), &check_handle));'), (67, 1, u'+  ASSERT(0 == uv_check_start(&check_handle, check_cb));'), (68, 1, u'+  ASSERT(0 == uv_timer_init(uv_default_loop(), &timer_handle));'), (69, 1, u'+  ASSERT(0 == uv_timer_start(&timer_handle, timer_cb, 50, 0));'), (70, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (71, 1, u'+  ASSERT(1 == prepare_cb_called);'), (72, 1, u'+  ASSERT(1 == check_cb_called);'), (73, 1, u'+  ASSERT(1 == timer_cb_called);'), (77, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active(handle));'), (3, 1, u'+  ASSERT(0 == uv_is_active(handle));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: once_close_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active(handle));'), (3, 1, u'+  ASSERT(0 == uv_is_active(handle));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active(handle));'), (3, 1, u'+  ASSERT(0 == uv_is_active(handle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*)handle));'), (3, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: once_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*)handle));'), (3, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*)handle));'), (3, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_active((uv_handle_t*)handle));'), (3, 1, u'+  ASSERT(1 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: repeat_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_active((uv_handle_t*)handle));'), (3, 1, u'+  ASSERT(1 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_active((uv_handle_t*)handle));'), (3, 1, u'+  ASSERT(1 == uv_is_active((uv_handle_t*) handle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*)&handle));'), (3, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &handle));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*)&handle));'), (3, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &handle));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!uv_is_active((uv_handle_t*)&handle));'), (3, 1, u'+  ASSERT(0 == uv_is_active((uv_handle_t*) &handle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  ASSERT(0 == uv_timer_init(uv_default_loop(), &timer_handle));'), (16, 1, u'+  ASSERT(0 == uv_timer_start(&timer_handle, timer_run_once_timer_cb, 0, 0));'), (17, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));'), (18, 1, u'+  ASSERT(1 == timer_run_once_timer_cb_called);'), (20, 1, u'+  ASSERT(0 == uv_timer_start(&timer_handle, timer_run_once_timer_cb, 1, 0));'), (21, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));'), (22, 1, u'+  ASSERT(2 == timer_run_once_timer_cb_called);'), (25, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));')]
===========================================
===========================================
Total add: 28
Total del: 0
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  ASSERT(0 == uv_timer_init(uv_default_loop(), &timer_handle));'), (16, 1, u'+  ASSERT(0 == uv_timer_start(&timer_handle, timer_run_once_timer_cb, 0, 0));'), (17, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));'), (18, 1, u'+  ASSERT(1 == timer_run_once_timer_cb_called);'), (20, 1, u'+  ASSERT(0 == uv_timer_start(&timer_handle, timer_run_once_timer_cb, 1, 0));'), (21, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));'), (22, 1, u'+  ASSERT(2 == timer_run_once_timer_cb_called);'), (25, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  ASSERT(0 == uv_timer_init(uv_default_loop(), &timer_handle));'), (16, 1, u'+  ASSERT(0 == uv_timer_start(&timer_handle, timer_run_once_timer_cb, 0, 0));'), (17, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));'), (18, 1, u'+  ASSERT(1 == timer_run_once_timer_cb_called);'), (20, 1, u'+  ASSERT(0 == uv_timer_start(&timer_handle, timer_run_once_timer_cb, 1, 0));'), (21, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));'), (22, 1, u'+  ASSERT(2 == timer_run_once_timer_cb_called);'), (25, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EMSGSIZE);'), (4, 1, u'+  ASSERT(status == UV_EMSGSIZE);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: send_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EMSGSIZE);'), (4, 1, u'+  ASSERT(status == UV_EMSGSIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(status == -1);'), (3, 2, u'-  ASSERT(uv_last_error(uv_default_loop()).code == UV_EMSGSIZE);'), (4, 1, u'+  ASSERT(status == UV_EMSGSIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 8
Total del: 3
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip6_addr("::0", TEST_PORT, &addr6));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: do_test
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip6_addr("::0", TEST_PORT, &addr6));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip6_addr("::0", TEST_PORT, &addr6));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 8
Total del: 3
Header: do_test
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (12, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: static int close_cb_called;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (12, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (12, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!memcmp("PING", buf.base, nread));'), (3, 1, u'+  ASSERT(!memcmp("PING", buf->base, nread));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: cl_recv_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!memcmp("PING", buf.base, nread));'), (3, 1, u'+  ASSERT(!memcmp("PING", buf->base, nread));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!memcmp("PING", buf.base, nread));'), (3, 1, u'+  ASSERT(!memcmp("PING", buf->base, nread));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", 0, &addr));')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", 0, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", 0, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("239.255.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("239.255.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("239.255.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (9, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
Total add: 6
Total del: 3
Header: create_udp_socket
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (9, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (9, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(memcmp("PING", buf.base, nread) == 0);'), (3, 1, u'+  ASSERT(memcmp("PING", buf->base, nread) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: recv_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(memcmp("PING", buf.base, nread) == 0);'), (3, 1, u'+  ASSERT(memcmp("PING", buf->base, nread) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(memcmp("PING", buf.base, nread) == 0);'), (3, 1, u'+  ASSERT(memcmp("PING", buf->base, nread) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(r == -1);'), (3, 2, u'-    ASSERT(uv_last_error(loop).code == UV_EINVAL);'), (4, 1, u'+    ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(r == -1);'), (3, 2, u'-    ASSERT(uv_last_error(loop).code == UV_EINVAL);'), (4, 1, u'+    ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(r == -1);'), (3, 2, u'-    ASSERT(uv_last_error(loop).code == UV_EINVAL);'), (4, 1, u'+    ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(loop).code == UV_EINVAL);'), (4, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(loop).code == UV_EINVAL);'), (4, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(r == -1);'), (3, 2, u'-  ASSERT(uv_last_error(loop).code == UV_EINVAL);'), (4, 1, u'+  ASSERT(r == UV_EINVAL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (12, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: static int close_cb_called;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (12, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  ASSERT(suggested_size <= sizeof slab);'), (12, 1, u'+  ASSERT(suggested_size <= sizeof(slab));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_closing(handle));'), (3, 1, u'+  ASSERT(1 == uv_is_closing(handle));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: close_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_closing(handle));'), (3, 1, u'+  ASSERT(1 == uv_is_closing(handle));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(uv_is_closing(handle));'), (3, 1, u'+  ASSERT(1 == uv_is_closing(handle));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!memcmp("PONG", buf.base, nread));'), (3, 1, u'+  ASSERT(!memcmp("PONG", buf->base, nread));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: cl_recv_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!memcmp("PONG", buf.base, nread));'), (3, 1, u'+  ASSERT(!memcmp("PONG", buf->base, nread));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!memcmp("PONG", buf.base, nread));'), (3, 1, u'+  ASSERT(!memcmp("PONG", buf->base, nread));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!memcmp("PING", buf.base, nread));'), (3, 1, u'+  ASSERT(!memcmp("PING", rcvbuf->base, nread));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sv_recv_cb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!memcmp("PING", buf.base, nread));'), (3, 1, u'+  ASSERT(!memcmp("PING", rcvbuf->base, nread));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT(!memcmp("PING", buf.base, nread));'), (3, 1, u'+  ASSERT(!memcmp("PING", rcvbuf->base, nread));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("0.0.0.0", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TEST_IMPL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 2, u'-    ASSERT(r == 0);'), (37, 2, u'-    ASSERT(memeq(dst, "A", 1));'), (43, 2, u'-    ASSERT(r == 0);'), (44, 2, u'-    ASSERT(memeq(dst, "", 1));'), (50, 2, u'-    ASSERT(r == 1);'), (51, 2, u'-    ASSERT(memeq(dst, "B", 2));'), (57, 2, u'-    ASSERT(r == 2);'), (58, 2, u'-    ASSERT(memeq(dst, "CD", 3));'), (71, 2, u'-    ASSERT(r == 1);'), (72, 2, u'-    ASSERT(memeq(dst, "A", 2));'), (78, 2, u'-    ASSERT(r == 1);'), (79, 2, u'-    ASSERT(memeq(dst, "A", 2));'), (85, 2, u'-    ASSERT(r == 2);'), (86, 2, u'-    ASSERT(memeq(dst, "AB", 3));'), (92, 2, u'-    ASSERT(r == 4);'), (93, 2, u'-    ASSERT(memeq(dst, "ABCD", 5));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 1, u'+  ASSERT(0 == uv_ip4_addr("127.0.0.1", TEST_PORT, &addr));'), (75, 1, u'+    ASSERT(0 == uv_udp_init(loop, &sockets[i]));'), (76, 1, u'+    ASSERT(0 == uv_udp_bind(&sockets[i], (const struct sockaddr*) &addr, 0));'), (77, 1, u'+    ASSERT(0 == uv_udp_recv_start(&sockets[i], alloc_cb, recv_cb));'), (78, 1, u'+    ASSERT(0 == uv_udp_send(&reqs[i],'), (92, 1, u'+  ASSERT(0 < recv_cb_called && recv_cb_called <= ARRAY_SIZE(sockets));'), (93, 1, u'+  ASSERT(ARRAY_SIZE(sockets) == send_cb_called);'), (97, 1, u'+  ASSERT(ARRAY_SIZE(sockets) == close_cb_called);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+static_assert(__cplusplus == 201103L, "wrong c++ standard version");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  static_assert,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+struct CompileAssert {'), (9, 1, u'+#define COMPILE_ASSERT(expr, msg) \\'), (10, 1, u'+  typedef CompileAssert<(bool(expr))> msg[bool(expr) ? 1 : -1]'), (13, 1, u'+  COMPILE_ASSERT(char(-1) > 0, default_char_is_unsigned);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(rlink, file, line);'), (3, 1, u'+        Assert_fileLine(rlink && "child contains reverse link", file, line);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _checkNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(rlink, file, line);'), (3, 1, u'+        Assert_fileLine(rlink && "child contains reverse link", file, line);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(rlink, file, line);'), (3, 1, u'+        Assert_fileLine(rlink && "child contains reverse link", file, line);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-            Assert_true(lcg);'), (10, 2, u'-            Assert_true(lcg->child == grandChild);'), (31, 1, u'+                Assert_true(lcg->child == grandChild);'), (37, 1, u'+                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (41, 2, u'-            Assert_true(((lcg) ? lcg : parentLink)->parent->pathQuality > grandChild->pathQuality);'), (48, 2, u'-                 Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Total add: 18
Total del: 29
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-            Assert_true(lcg);'), (10, 2, u'-            Assert_true(lcg->child == grandChild);'), (31, 1, u'+                Assert_true(lcg->child == grandChild);'), (37, 1, u'+                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (41, 2, u'-            Assert_true(((lcg) ? lcg : parentLink)->parent->pathQuality > grandChild->pathQuality);'), (48, 2, u'-                 Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-            Assert_true(lcg);'), (10, 2, u'-            Assert_true(lcg->child == grandChild);'), (31, 1, u'+                Assert_true(lcg->child == grandChild);'), (37, 1, u'+                Assert_true(lcg->parent->pathQuality > grandChild->pathQuality);'), (41, 2, u'-            Assert_true(((lcg) ? lcg : parentLink)->parent->pathQuality > grandChild->pathQuality);'), (48, 2, u'-                 Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);'), (9, 1, u'+            Assert_true(((lcg) ? lcg : parentLink)->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);'), (9, 1, u'+            Assert_true(((lcg) ? lcg : parentLink)->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);'), (9, 1, u'+            Assert_true(((lcg) ? lcg : parentLink)->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(node->pathQuality & 0xff);')]
===========================================
===========================================
Total add: 0
Total del: 4
Header: updateBestParentCycle
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(node->pathQuality & 0xff);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(node->pathQuality & 0xff);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(node->pathQuality & 0xff);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: updateBestParentCycle
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(node->pathQuality & 0xff);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(node->pathQuality & 0xff);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node == NodeStore_closestNode(&store->pub, node->address.path), file, line);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: _checkNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node == NodeStore_closestNode(&store->pub, node->address.path), file, line);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(node == NodeStore_closestNode(&store->pub, node->address.path), file, line);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_fileLine(node == NodeStore_closestNode(&store->pub, node->address.path), file, line);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: _verifyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_fileLine(node == NodeStore_closestNode(&store->pub, node->address.path), file, line);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_fileLine(node == NodeStore_closestNode(&store->pub, node->address.path), file, line);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(RB_FIND(PeerRBTree, &link->parent->peerTree, link), file, line);'), (3, 1, u'+        Assert_fileLine(RB_FIND(PeerRBTree, &link->parent->peerTree, link) == link, file, line);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _verifyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(RB_FIND(PeerRBTree, &link->parent->peerTree, link), file, line);'), (3, 1, u'+        Assert_fileLine(RB_FIND(PeerRBTree, &link->parent->peerTree, link) == link, file, line);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_fileLine(RB_FIND(PeerRBTree, &link->parent->peerTree, link), file, line);'), (3, 1, u'+        Assert_fileLine(RB_FIND(PeerRBTree, &link->parent->peerTree, link) == link, file, line);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+            Assert_always(closestKnown != closest);'), (54, 1, u'+            Assert_always(pathParentChild != findClosest_INVALID);')]
===========================================
===========================================
Total add: 52
Total del: 4
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+            Assert_always(closestKnown != closest);'), (54, 1, u'+            Assert_always(pathParentChild != findClosest_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+            Assert_always(closestKnown != closest);'), (54, 1, u'+            Assert_always(pathParentChild != findClosest_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            Assert_true(lcg);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            Assert_true(lcg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            Assert_true(lcg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-            Assert_always(pathParentChild != findClosest_INVALID);')]
===========================================
===========================================
Total add: 1
Total del: 50
Header: Assert_true
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-            Assert_always(pathParentChild != findClosest_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-            Assert_always(pathParentChild != findClosest_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            Assert_fileLine('), (12, 2, u'-        Assert_fileLine(LabelSplicer_routesThrough(node->address.path,')]
===========================================
===========================================
Total add: 10
Total del: 3
Header: _verifyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            Assert_fileLine('), (12, 2, u'-        Assert_fileLine(LabelSplicer_routesThrough(node->address.path,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            Assert_fileLine('), (12, 2, u'-        Assert_fileLine(LabelSplicer_routesThrough(node->address.path,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);'), (5, 1, u'+                 Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);'), (5, 1, u'+                 Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);'), (5, 1, u'+                 Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_fileLine(node == NodeStore_closestNode(&store->pub, node->address.path), file, line);'), (4, 1, u'+        Assert_fileLine(LabelSplicer_routesThrough(node->address.path,')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: _verifyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_fileLine(node == NodeStore_closestNode(&store->pub, node->address.path), file, line);'), (4, 1, u'+        Assert_fileLine(LabelSplicer_routesThrough(node->address.path,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_fileLine(node == NodeStore_closestNode(&store->pub, node->address.path), file, line);'), (4, 1, u'+        Assert_fileLine(LabelSplicer_routesThrough(node->address.path,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_true(node->pathQuality < newBestParent->parent->pathQuality);')]
===========================================
===========================================
Total add: 10
Total del: 2
Header: updateBestPathCycle
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_true(node->pathQuality < newBestParent->parent->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_true(node->pathQuality < newBestParent->parent->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+        Assert_ifTesting(0);')]
===========================================
===========================================
Total add: 9
Total del: 4
Header: handleIncoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+        Assert_ifTesting(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+        Assert_ifTesting(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_ifTesting(0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: handleIncoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_ifTesting(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_ifTesting(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_ifTesting(0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: handleIncoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_ifTesting(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_ifTesting(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(dmesg->address->path =='), (12, 1, u'+    Assert_true(encIdx != EncodingScheme_getFormNum_INVALID);')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: handleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(dmesg->address->path =='), (12, 1, u'+    Assert_true(encIdx != EncodingScheme_getFormNum_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(dmesg->address->path =='), (12, 1, u'+    Assert_true(encIdx != EncodingScheme_getFormNum_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-static void assertNoLoop(struct Node_Two* node,  struct NodeStore_pvt* store)')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: logLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-static void assertNoLoop(struct Node_Two* node,  struct NodeStore_pvt* store)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-static void assertNoLoop(struct Node_Two* node,  struct NodeStore_pvt* store)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(node != parent->parent);'), (3, 1, u'+        Assert_fileLine(node != parent->parent, file, line);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: assertNoLoop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(node != parent->parent);'), (3, 1, u'+        Assert_fileLine(node != parent->parent, file, line);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(node != parent->parent);'), (3, 1, u'+        Assert_fileLine(node != parent->parent, file, line);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assertNoLoop(parent->child, store);'), (3, 1, u'+    _assertNoLoop(parent->child, store, file, line);'), (7, 1, u'+#define assertNoLoop(node, store) _assertNoLoop(node, store, Gcc_SHORT_FILE, Gcc_LINE)')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: assertNoLoop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assertNoLoop(parent->child, store);'), (3, 1, u'+    _assertNoLoop(parent->child, store, file, line);'), (7, 1, u'+#define assertNoLoop(node, store) _assertNoLoop(node, store, Gcc_SHORT_FILE, Gcc_LINE)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assertNoLoop(parent->child, store);'), (3, 1, u'+    _assertNoLoop(parent->child, store, file, line);'), (7, 1, u'+#define assertNoLoop(node, store) _assertNoLoop(node, store, Gcc_SHORT_FILE, Gcc_LINE)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(node->address.path =='), (10, 2, u'-        Assert_true(link->child == node);'), (11, 2, u'-        Assert_true(RB_FIND(PeerRBTree, &link->parent->peerTree, link));'), (12, 1, u'+        Assert_fileLine(link->child == node, file, line);'), (13, 1, u'+        Assert_fileLine(RB_FIND(PeerRBTree, &link->parent->peerTree, link), file, line);')]
===========================================
===========================================
Total add: 8
Total del: 2
Header: verifyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(node->address.path =='), (10, 2, u'-        Assert_true(link->child == node);'), (11, 2, u'-        Assert_true(RB_FIND(PeerRBTree, &link->parent->peerTree, link));'), (12, 1, u'+        Assert_fileLine(link->child == node, file, line);'), (13, 1, u'+        Assert_fileLine(RB_FIND(PeerRBTree, &link->parent->peerTree, link), file, line);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(node->address.path =='), (10, 2, u'-        Assert_true(link->child == node);'), (11, 2, u'-        Assert_true(RB_FIND(PeerRBTree, &link->parent->peerTree, link));'), (12, 1, u'+        Assert_fileLine(link->child == node, file, line);'), (13, 1, u'+        Assert_fileLine(RB_FIND(PeerRBTree, &link->parent->peerTree, link), file, line);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(link->linkAddr == (uintptr_t)link);'), (3, 2, u'-        Assert_true(link->parent == node);'), (4, 2, u'-        Assert_true(!lastLink || link->cannonicalLabel != lastLink->cannonicalLabel);'), (5, 1, u'+        Assert_fileLine(node->bestParent || link->child->bestParent != link, file, line);'), (6, 1, u'+        Assert_fileLine(link->linkAddr == (uintptr_t)link, file, line);'), (7, 1, u'+        Assert_fileLine(link->parent == node, file, line);'), (8, 1, u'+        Assert_fileLine(!lastLink || link->cannonicalLabel != lastLink->cannonicalLabel,')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: verifyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(link->linkAddr == (uintptr_t)link);'), (3, 2, u'-        Assert_true(link->parent == node);'), (4, 2, u'-        Assert_true(!lastLink || link->cannonicalLabel != lastLink->cannonicalLabel);'), (5, 1, u'+        Assert_fileLine(node->bestParent || link->child->bestParent != link, file, line);'), (6, 1, u'+        Assert_fileLine(link->linkAddr == (uintptr_t)link, file, line);'), (7, 1, u'+        Assert_fileLine(link->parent == node, file, line);'), (8, 1, u'+        Assert_fileLine(!lastLink || link->cannonicalLabel != lastLink->cannonicalLabel,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(link->linkAddr == (uintptr_t)link);'), (3, 2, u'-        Assert_true(link->parent == node);'), (4, 2, u'-        Assert_true(!lastLink || link->cannonicalLabel != lastLink->cannonicalLabel);'), (5, 1, u'+        Assert_fileLine(node->bestParent || link->child->bestParent != link, file, line);'), (6, 1, u'+        Assert_fileLine(link->linkAddr == (uintptr_t)link, file, line);'), (7, 1, u'+        Assert_fileLine(link->parent == node, file, line);'), (8, 1, u'+        Assert_fileLine(!lastLink || link->cannonicalLabel != lastLink->cannonicalLabel,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(rlink);'), (3, 1, u'+        Assert_fileLine(rlink, file, line);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: verifyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(rlink);'), (3, 1, u'+        Assert_fileLine(rlink, file, line);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(rlink);'), (3, 1, u'+        Assert_fileLine(rlink, file, line);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(node->bestParent->parent->pathQuality >= node->pathQuality);'), (4, 2, u'-            assertNoLoop(node, store);'), (6, 1, u'+        Assert_fileLine(node->bestParent->parent->pathQuality > node->pathQuality'), (9, 1, u'+        Assert_fileLine(node->address.path != UINT64_MAX, file, line);'), (10, 1, u'+        Assert_fileLine(node->pathQuality != 0, file, line);'), (12, 2, u'-        Assert_true(node->address.path == UINT64_MAX);'), (13, 1, u'+        Assert_fileLine(node->address.path == UINT64_MAX, file, line);'), (14, 1, u'+        Assert_fileLine(node->pathQuality == 0, file, line);')]
===========================================
===========================================
Total add: 9
Total del: 6
Header: verifyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(node->bestParent->parent->pathQuality >= node->pathQuality);'), (4, 2, u'-            assertNoLoop(node, store);'), (6, 1, u'+        Assert_fileLine(node->bestParent->parent->pathQuality > node->pathQuality'), (9, 1, u'+        Assert_fileLine(node->address.path != UINT64_MAX, file, line);'), (10, 1, u'+        Assert_fileLine(node->pathQuality != 0, file, line);'), (12, 2, u'-        Assert_true(node->address.path == UINT64_MAX);'), (13, 1, u'+        Assert_fileLine(node->address.path == UINT64_MAX, file, line);'), (14, 1, u'+        Assert_fileLine(node->pathQuality == 0, file, line);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(node->bestParent->parent->pathQuality >= node->pathQuality);'), (4, 2, u'-            assertNoLoop(node, store);'), (6, 1, u'+        Assert_fileLine(node->bestParent->parent->pathQuality > node->pathQuality'), (9, 1, u'+        Assert_fileLine(node->address.path != UINT64_MAX, file, line);'), (10, 1, u'+        Assert_fileLine(node->pathQuality != 0, file, line);'), (12, 2, u'-        Assert_true(node->address.path == UINT64_MAX);'), (13, 1, u'+        Assert_fileLine(node->address.path == UINT64_MAX, file, line);'), (14, 1, u'+        Assert_fileLine(node->pathQuality == 0, file, line);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    Assert_true(node->pathQuality <= newBest->pathQuality);')]
===========================================
===========================================
Total add: 13
Total del: 7
Header: updateBestPathCycle
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    Assert_true(node->pathQuality <= newBest->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    Assert_true(node->pathQuality <= newBest->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        assertNoLoop(node, store);'), (16, 1, u'+    Assert_true(node->pathQuality < best->parent->pathQuality);')]
===========================================
===========================================
Total add: 14
Total del: 9
Header: handleBadNewsTwo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        assertNoLoop(node, store);'), (16, 1, u'+    Assert_true(node->pathQuality < best->parent->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        assertNoLoop(node, store);'), (16, 1, u'+    Assert_true(node->pathQuality < best->parent->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-        Assert_true(link->child != store->pub.selfNode);'), (29, 1, u'+    Assert_true(link->child != store->pub.selfNode);')]
===========================================
===========================================
Total add: 20
Total del: 10
Header: handleBadNewsTwo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-        Assert_true(link->child != store->pub.selfNode);'), (29, 1, u'+    Assert_true(link->child != store->pub.selfNode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-        Assert_true(link->child != store->pub.selfNode);'), (29, 1, u'+    Assert_true(link->child != store->pub.selfNode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_true(newReach < node->pathQuality);'), (9, 1, u'+    Assert_true(node->bestParent);'), (25, 1, u'+        Assert_true(node->pathQuality < node->bestParent->parent->pathQuality);')]
===========================================
===========================================
Total add: 36
Total del: 11
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_true(newReach < node->pathQuality);'), (9, 1, u'+    Assert_true(node->bestParent);'), (25, 1, u'+        Assert_true(node->pathQuality < node->bestParent->parent->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_true(newReach < node->pathQuality);'), (9, 1, u'+    Assert_true(node->bestParent);'), (25, 1, u'+        Assert_true(node->pathQuality < node->bestParent->parent->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        assertNoLoop(child, store);')]
===========================================
===========================================
Total add: 8
Total del: 4
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        assertNoLoop(child, store);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        assertNoLoop(child, store);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-            Assert_true(child->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (20, 1, u'+                Assert_true(grandChild->pathQuality < UINT32_MAX);')]
===========================================
===========================================
Total add: 16
Total del: 10
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-            Assert_true(child->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (20, 1, u'+                Assert_true(grandChild->pathQuality < UINT32_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-            Assert_true(child->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (20, 1, u'+                Assert_true(grandChild->pathQuality < UINT32_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (3, 1, u'+            Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (3, 1, u'+            Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (3, 1, u'+            Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (3, 1, u'+            Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: discoverLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (3, 1, u'+            Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (3, 1, u'+            Assert_true(grandChild->bestParent->parent->pathQuality > grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    Assert_true(out < (UINT32_MAX - 1024) && out > 0);')]
===========================================
===========================================
Total add: 6
Total del: 9
Header: reachAfterTimeout
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    Assert_true(out < (UINT32_MAX - 1024) && out > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    Assert_true(out < (UINT32_MAX - 1024) && out > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-            Assert_true(nn != module->nodeStore->selfNode);')]
===========================================
===========================================
Total add: 0
Total del: 32
Header: onResponseOrTimeout
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-            Assert_true(nn != module->nodeStore->selfNode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-            Assert_true(nn != module->nodeStore->selfNode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(addr->path ==')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: RouterModule_newMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(addr->path ==')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(addr->path ==')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 2, u'-    Assert_true(node->address.protocolVersion);'), (39, 2, u'-    Assert_true(EncodingScheme_equals(scheme, node->encodingScheme));//TODO')]
===========================================
===========================================
Total add: 6
Total del: 44
Header: nodeForIp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 2, u'-    Assert_true(node->address.protocolVersion);'), (39, 2, u'-    Assert_true(EncodingScheme_equals(scheme, node->encodingScheme));//TODO')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 2, u'-    Assert_true(node->address.protocolVersion);'), (39, 2, u'-    Assert_true(EncodingScheme_equals(scheme, node->encodingScheme));//TODO')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 2, u'-            Assert_always(path != findClosest_INVALID);')]
===========================================
===========================================
Total add: 8
Total del: 46
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 2, u'-            Assert_always(path != findClosest_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 2, u'-            Assert_always(path != findClosest_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-                Assert_true(splitLink->child == node);'), (7, 1, u'+                Assert_true(splitLink->child == child);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-                Assert_true(splitLink->child == node);'), (7, 1, u'+                Assert_true(splitLink->child == child);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-                Assert_true(splitLink->child == node);'), (7, 1, u'+                Assert_true(splitLink->child == child);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(childToGrandchild < UINT64_MAX);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(childToGrandchild < UINT64_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(childToGrandchild < UINT64_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+            Assert_true(child->bestParent->parent->pathQuality >= grandChild->pathQuality);')]
===========================================
===========================================
Total add: 17
Total del: 2
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+            Assert_true(child->bestParent->parent->pathQuality >= grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+            Assert_true(child->bestParent->parent->pathQuality >= grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(splitLink->cannonicalLabel != path);'), (3, 1, u'+            Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (4, 1, u'+            Assert_true(childToGrandchild != 1);'), (15, 1, u'+            Assert_true(lcg->child == grandChild);')]
===========================================
===========================================
Total add: 13
Total del: 3
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(splitLink->cannonicalLabel != path);'), (3, 1, u'+            Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (4, 1, u'+            Assert_true(childToGrandchild != 1);'), (15, 1, u'+            Assert_true(lcg->child == grandChild);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(splitLink->cannonicalLabel != path);'), (3, 1, u'+            Assert_true(splitLink->cannonicalLabel != pathParentChild);'), (4, 1, u'+            Assert_true(childToGrandchild != 1);'), (15, 1, u'+            Assert_true(lcg->child == grandChild);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-                Assert_true(node->bestParent->parent->pathQuality >= grandChild->pathQuality);')]
===========================================
===========================================
Total add: 0
Total del: 15
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-                Assert_true(node->bestParent->parent->pathQuality >= grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-                Assert_true(node->bestParent->parent->pathQuality >= grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Total add: 0
Total del: 7
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+            Assert_true(nn != module->nodeStore->selfNode);')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: onResponseOrTimeout
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+            Assert_true(nn != module->nodeStore->selfNode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+            Assert_true(nn != module->nodeStore->selfNode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 2, u'-        Assert_true(!((uintptr_t)dmessage->bytes % 4) || !"alignment fault");'), (74, 1, u'+    Assert_true(!((uintptr_t)msg->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Total add: 43
Total del: 33
Header: handleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 2, u'-        Assert_true(!((uintptr_t)dmessage->bytes % 4) || !"alignment fault");'), (74, 1, u'+    Assert_true(!((uintptr_t)msg->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 2, u'-        Assert_true(!((uintptr_t)dmessage->bytes % 4) || !"alignment fault");'), (74, 1, u'+    Assert_true(!((uintptr_t)msg->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    Assert_true(session->version);')]
===========================================
===========================================
Total add: 4
Total del: 14
Header: handleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    Assert_true(session->version);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    Assert_true(session->version);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: check
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(store->pub.selfNode->bestParent == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(node->bestParent != store->selfLink);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: handleBadNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(node->bestParent != store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(node->bestParent != store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true((parent != child && cannonicalLabel != 1) || store->selfLink == NULL);'), (7, 1, u'+    Assert_true(cannonicalLabel != 1 || store->selfLink == NULL);')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true((parent != child && cannonicalLabel != 1) || store->selfLink == NULL);'), (7, 1, u'+    Assert_true(cannonicalLabel != 1 || store->selfLink == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true((parent != child && cannonicalLabel != 1) || store->selfLink == NULL);'), (7, 1, u'+    Assert_true(cannonicalLabel != 1 || store->selfLink == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        Assert_failure("You just sent a message to yourself you dingbat");')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        Assert_failure("You just sent a message to yourself you dingbat");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        Assert_failure("You just sent a message to yourself you dingbat");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Bits_memcmp(addr->key, module->address.key, 32));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: RouterModule_newMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Bits_memcmp(addr->key, module->address.key, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Bits_memcmp(addr->key, module->address.key, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));'), (3, 1, u'+    Assert_always(!CString_strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: reconnectionNewEndpointTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));'), (3, 1, u'+    Assert_always(!CString_strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));'), (3, 1, u'+    Assert_always(!CString_strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == strcmp(publicKeyBase32, (char*) publicKeyBase32Out));'), (3, 2, u'-    Assert_always(0 == strcmp(ipv6, (char*) addressOut));'), (4, 1, u'+    Assert_always(0 == CString_strcmp(publicKeyBase32, (char*) publicKeyBase32Out));'), (5, 1, u'+    Assert_always(0 == CString_strcmp(ipv6, (char*) addressOut));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == strcmp(publicKeyBase32, (char*) publicKeyBase32Out));'), (3, 2, u'-    Assert_always(0 == strcmp(ipv6, (char*) addressOut));'), (4, 1, u'+    Assert_always(0 == CString_strcmp(publicKeyBase32, (char*) publicKeyBase32Out));'), (5, 1, u'+    Assert_always(0 == CString_strcmp(ipv6, (char*) addressOut));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == strcmp(publicKeyBase32, (char*) publicKeyBase32Out));'), (3, 2, u'-    Assert_always(0 == strcmp(ipv6, (char*) addressOut));'), (4, 1, u'+    Assert_always(0 == CString_strcmp(publicKeyBase32, (char*) publicKeyBase32Out));'), (5, 1, u'+    Assert_always(0 == CString_strcmp(ipv6, (char*) addressOut));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(diff < 1000000000);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: timeoutCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(diff < 1000000000);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(diff < 1000000000);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node->bestParent->parent->pathQuality >= node->pathQuality);'), (4, 2, u'-        assertNoLoop(node, store);'), (6, 1, u'+        Assert_true(node->bestParent->parent->pathQuality >= node->pathQuality);'), (8, 1, u'+            assertNoLoop(node, store);'), (11, 1, u'+        Assert_true(node->address.path == UINT64_MAX);')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: verifyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node->bestParent->parent->pathQuality >= node->pathQuality);'), (4, 2, u'-        assertNoLoop(node, store);'), (6, 1, u'+        Assert_true(node->bestParent->parent->pathQuality >= node->pathQuality);'), (8, 1, u'+            assertNoLoop(node, store);'), (11, 1, u'+        Assert_true(node->address.path == UINT64_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node->bestParent->parent->pathQuality >= node->pathQuality);'), (4, 2, u'-        assertNoLoop(node, store);'), (6, 1, u'+        Assert_true(node->bestParent->parent->pathQuality >= node->pathQuality);'), (8, 1, u'+            assertNoLoop(node, store);'), (11, 1, u'+        Assert_true(node->address.path == UINT64_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(child->bestParent != link);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: unlinkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(child->bestParent != link);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(child->bestParent != link);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node && !Bits_memcmp(node->address.key, message->address->key, 32));')]
===========================================
===========================================
Total add: 21
Total del: 1
Header: onResponseOrTimeout
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node && !Bits_memcmp(node->address.key, message->address->key, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node && !Bits_memcmp(node->address.key, message->address->key, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+            Assert_always(path != findClosest_INVALID);'), (54, 2, u'-        Assert_always(path != findClosest_INVALID);'), (55, 2, u'-        Assert_always(closest->child != node);')]
===========================================
===========================================
Total add: 33
Total del: 20
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+            Assert_always(path != findClosest_INVALID);'), (54, 2, u'-        Assert_always(path != findClosest_INVALID);'), (55, 2, u'-        Assert_always(closest->child != node);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+            Assert_always(path != findClosest_INVALID);'), (54, 2, u'-        Assert_always(path != findClosest_INVALID);'), (55, 2, u'-        Assert_always(closest->child != node);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(splitLink->parent == closest->child);'), (3, 1, u'+        Assert_true(splitLink->parent == parent);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(splitLink->parent == closest->child);'), (3, 1, u'+        Assert_true(splitLink->parent == parent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(splitLink->parent == closest->child);'), (3, 1, u'+        Assert_true(splitLink->parent == parent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-                    Assert_true(node->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (25, 2, u'-                Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (40, 1, u'+                Assert_true(node->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (45, 1, u'+            Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);')]
===========================================
===========================================
Total add: 22
Total del: 23
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-                    Assert_true(node->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (25, 2, u'-                Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (40, 1, u'+                Assert_true(node->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (45, 1, u'+            Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-                    Assert_true(node->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (25, 2, u'-                Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (40, 1, u'+                Assert_true(node->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (45, 1, u'+            Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        Assert_true(!Bits_isZero(&nodes->bytes[j * Address_SERIALIZED_SIZE],'), (9, 1, u'+        Assert_true(!Bits_isZero(&nodes->bytes[i * Address_SERIALIZED_SIZE],')]
===========================================
===========================================
Total add: 6
Total del: 7
Header: sendNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        Assert_true(!Bits_isZero(&nodes->bytes[j * Address_SERIALIZED_SIZE],'), (9, 1, u'+        Assert_true(!Bits_isZero(&nodes->bytes[i * Address_SERIALIZED_SIZE],')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        Assert_true(!Bits_isZero(&nodes->bytes[j * Address_SERIALIZED_SIZE],'), (9, 1, u'+        Assert_true(!Bits_isZero(&nodes->bytes[i * Address_SERIALIZED_SIZE],')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_true(node && !Bits_memcmp(node->address.key, message->address->key, 32));'), (8, 2, u'-    Assert_true(node);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: onResponseOrTimeout
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_true(node && !Bits_memcmp(node->address.key, message->address->key, 32));'), (8, 2, u'-    Assert_true(node);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_true(node && !Bits_memcmp(node->address.key, message->address->key, 32));'), (8, 2, u'-    Assert_true(node);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_true(!peer->nextPeer);')]
===========================================
===========================================
Total add: 13
Total del: 5
Header: RB_GENERATE_STATIC
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_true(!peer->nextPeer);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_true(!peer->nextPeer);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_true(node->pathQuality <= newBest->pathQuality);')]
===========================================
===========================================
Total add: 1
Total del: 8
Header: updateBestPathCycle
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_true(node->pathQuality <= newBest->pathQuality);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_true(node->pathQuality <= newBest->pathQuality);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_ifParanoid(link == RB_FIND(PeerRBTree, &parent->peerTree, link));')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: unlinkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_ifParanoid(link == RB_FIND(PeerRBTree, &parent->peerTree, link));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_ifParanoid(link == RB_FIND(PeerRBTree, &parent->peerTree, link));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_ifParanoid(!RB_FIND(PeerRBTree, &parent->peerTree, link));')]
===========================================
===========================================
Total add: 8
Total del: 2
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_ifParanoid(!RB_FIND(PeerRBTree, &parent->peerTree, link));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_ifParanoid(!RB_FIND(PeerRBTree, &parent->peerTree, link));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_failure("You just sent a message to yourself you dingbat");')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_failure("You just sent a message to yourself you dingbat");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_failure("You just sent a message to yourself you dingbat");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-                    assertNoLoop(node, store);'), (10, 1, u'+                    Assert_true(node->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (14, 2, u'-                assertNoLoop(grandChild, store);'), (16, 1, u'+                Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (20, 2, u'-                assertNoLoop(grandChild, store);')]
===========================================
===========================================
Total add: 13
Total del: 5
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-                    assertNoLoop(node, store);'), (10, 1, u'+                    Assert_true(node->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (14, 2, u'-                assertNoLoop(grandChild, store);'), (16, 1, u'+                Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (20, 2, u'-                assertNoLoop(grandChild, store);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-                    assertNoLoop(node, store);'), (10, 1, u'+                    Assert_true(node->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (14, 2, u'-                assertNoLoop(grandChild, store);'), (16, 1, u'+                Assert_true(grandChild->bestParent->parent->pathQuality >= grandChild->pathQuality);'), (20, 2, u'-                assertNoLoop(grandChild, store);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_true(0);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: NodeStore_optimizePath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-            Assert_true(link->child->pathQuality <= newReach);'), (8, 2, u'-            assertNoLoop(link->child, store);'), (12, 1, u'+            assertNoLoop(child, store);'), (14, 1, u'+            assertNoLoop(child, store);')]
===========================================
===========================================
Total add: 7
Total del: 9
Header: handleGoodNews
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-            Assert_true(link->child->pathQuality <= newReach);'), (8, 2, u'-            assertNoLoop(link->child, store);'), (12, 1, u'+            assertNoLoop(child, store);'), (14, 1, u'+            assertNoLoop(child, store);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-            Assert_true(link->child->pathQuality <= newReach);'), (8, 2, u'-            assertNoLoop(link->child, store);'), (12, 1, u'+            assertNoLoop(child, store);'), (14, 1, u'+            assertNoLoop(child, store);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: NodeStore_getPeers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(61, 1, u'+        Assert_true(out->nodes[i]->address.path);'), (62, 1, u'+        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
Total add: 34
Total del: 19
Header: NodeStore_getClosestNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(61, 1, u'+        Assert_true(out->nodes[i]->address.path);'), (62, 1, u'+        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(61, 1, u'+        Assert_true(out->nodes[i]->address.path);'), (62, 1, u'+        Assert_true(out->nodes[i]->address.path < (((uint64_t)1)<<63));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(!Bits_isZero(&nodes->bytes[j * Address_SERIALIZED_SIZE],')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: sendNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(!Bits_isZero(&nodes->bytes[j * Address_SERIALIZED_SIZE],')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(!Bits_isZero(&nodes->bytes[j * Address_SERIALIZED_SIZE],')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(Bits_memcmp(addr->key, module->address.key, 32));')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: RouterModule_newMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(Bits_memcmp(addr->key, module->address.key, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(Bits_memcmp(addr->key, module->address.key, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    Assert_true(node != ctx->nodeStore->selfNode);')]
===========================================
===========================================
Total add: 10
Total del: 1
Header: searchStep
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    Assert_true(node != ctx->nodeStore->selfNode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    Assert_true(node != ctx->nodeStore->selfNode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+    Assert_true(!peer->nextPeer);')]
===========================================
===========================================
Total add: 6
Total del: 23
Header: RB_GENERATE_STATIC
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+    Assert_true(!peer->nextPeer);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+    Assert_true(!peer->nextPeer);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_true(store->linkCount < LINK_CAPACITY);')]
===========================================
===========================================
Total add: 5
Total del: 8
Header: freeLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_true(store->linkCount < LINK_CAPACITY);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_true(store->linkCount < LINK_CAPACITY);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-        Assert_true(link->linkAddr == (uintptr_t)link);'), (12, 2, u'-        Assert_true(!link->nextPeer || (char*)link->parent <= (char*)link->nextPeer->parent);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: assertNoLoop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-        Assert_true(link->linkAddr == (uintptr_t)link);'), (12, 2, u'-        Assert_true(!link->nextPeer || (char*)link->parent <= (char*)link->nextPeer->parent);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-        Assert_true(link->linkAddr == (uintptr_t)link);'), (12, 2, u'-        Assert_true(!link->nextPeer || (char*)link->parent <= (char*)link->nextPeer->parent);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node->bestParent->parent->reach >= node->reach);'), (4, 1, u'+    Assert_true(node->bestParent->parent->pathQuality >= node->pathQuality);'), (6, 1, u'+        assertNoLoop(node, store);')]
===========================================
===========================================
Total add: 11
Total del: 2
Header: verifyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node->bestParent->parent->reach >= node->reach);'), (4, 1, u'+    Assert_true(node->bestParent->parent->pathQuality >= node->pathQuality);'), (6, 1, u'+        assertNoLoop(node, store);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(node->bestParent->parent->reach >= node->reach);'), (4, 1, u'+    Assert_true(node->bestParent->parent->pathQuality >= node->pathQuality);'), (6, 1, u'+        assertNoLoop(node, store);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(node->version);'), (5, 1, u'+    Assert_true(node->address.protocolVersion);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(node->version);'), (5, 1, u'+    Assert_true(node->address.protocolVersion);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(node->version);'), (5, 1, u'+    Assert_true(node->address.protocolVersion);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-        Assert_true(link->elem->parent == lastLink->child);'), (21, 2, u'-        Assert_true(lastLink->parent->reach >= newReach);'), (28, 2, u'-                assertNoLoop(lastLink->child, store);'), (29, 2, u'-                Assert_true(lastLink->parent->reach >= newReach);'), (42, 1, u'+            Assert_true(link->child->pathQuality <= newReach);'), (43, 1, u'+            assertNoLoop(link->child, store);'), (46, 2, u'-        Assert_true(lastLink->parent->reach >= newReach);'), (92, 2, u'-    Assert_true(node >= store->nodes && node < store->nodes + store->pub.size);'), (140, 2, u'-        Assert_true(false);'), (170, 2, u'-                Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));'), (209, 2, u'-            Assert_true(&store->nodes[i].address != addr);'), (260, 2, u'-           Assert_true(store->headers[i].addressPrefix =='), (262, 2, u'-           Assert_true(!(!Bits_memcmp(&store->nodes[i].address.ip6, &addr->ip6, 16)'), (265, 2, u'-        Assert_true(store->pub.size < store->capacity || worstNode != -1);')]
===========================================
===========================================
Total add: 36
Total del: 235
Header: NodeStore_linksForPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-        Assert_true(link->elem->parent == lastLink->child);'), (21, 2, u'-        Assert_true(lastLink->parent->reach >= newReach);'), (28, 2, u'-                assertNoLoop(lastLink->child, store);'), (29, 2, u'-                Assert_true(lastLink->parent->reach >= newReach);'), (42, 1, u'+            Assert_true(link->child->pathQuality <= newReach);'), (43, 1, u'+            assertNoLoop(link->child, store);'), (46, 2, u'-        Assert_true(lastLink->parent->reach >= newReach);'), (92, 2, u'-    Assert_true(node >= store->nodes && node < store->nodes + store->pub.size);'), (140, 2, u'-        Assert_true(false);'), (170, 2, u'-                Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));'), (209, 2, u'-            Assert_true(&store->nodes[i].address != addr);'), (260, 2, u'-           Assert_true(store->headers[i].addressPrefix =='), (262, 2, u'-           Assert_true(!(!Bits_memcmp(&store->nodes[i].address.ip6, &addr->ip6, 16)'), (265, 2, u'-        Assert_true(store->pub.size < store->capacity || worstNode != -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-        Assert_true(link->elem->parent == lastLink->child);'), (21, 2, u'-        Assert_true(lastLink->parent->reach >= newReach);'), (28, 2, u'-                assertNoLoop(lastLink->child, store);'), (29, 2, u'-                Assert_true(lastLink->parent->reach >= newReach);'), (42, 1, u'+            Assert_true(link->child->pathQuality <= newReach);'), (43, 1, u'+            assertNoLoop(link->child, store);'), (46, 2, u'-        Assert_true(lastLink->parent->reach >= newReach);'), (92, 2, u'-    Assert_true(node >= store->nodes && node < store->nodes + store->pub.size);'), (140, 2, u'-        Assert_true(false);'), (170, 2, u'-                Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));'), (209, 2, u'-            Assert_true(&store->nodes[i].address != addr);'), (260, 2, u'-           Assert_true(store->headers[i].addressPrefix =='), (262, 2, u'-           Assert_true(!(!Bits_memcmp(&store->nodes[i].address.ip6, &addr->ip6, 16)'), (265, 2, u'-        Assert_true(store->pub.size < store->capacity || worstNode != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-                Assert_true(store->nodes[i].address.path == path);')]
===========================================
===========================================
Total add: 3
Total del: 10
Header: NodeStore_brokenPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-                Assert_true(store->nodes[i].address.path == path);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-                Assert_true(store->nodes[i].address.path == path);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_true(addr->path != 0);')]
===========================================
===========================================
Total add: 10
Total del: 0
Header: RouterModule_pingNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_true(addr->path != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_true(addr->path != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_true(next != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: extendRoute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_true(next != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_true(next != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(node->bestParent->parent->reach >= node->reach);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: verifyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(node->bestParent->parent->reach >= node->reach);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(node->bestParent->parent->reach >= node->reach);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assertNoLoop(link->child, store);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: verifyLinks
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assertNoLoop(link->child, store);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assertNoLoop(link->child, store);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(bestPath < UINT64_MAX); // TODO: handle this')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: updateBestPathCycle
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(bestPath < UINT64_MAX); // TODO: handle this')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(bestPath < UINT64_MAX); // TODO: handle this')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(link->child != store->pub.selfNode);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: handleBadNewsOne
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(link->child != store->pub.selfNode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(link->child != store->pub.selfNode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+                    assertNoLoop(node, store);'), (11, 1, u'+                assertNoLoop(grandChild, store);')]
===========================================
===========================================
Total add: 10
Total del: 0
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+                    assertNoLoop(node, store);'), (11, 1, u'+                assertNoLoop(grandChild, store);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+                    assertNoLoop(node, store);'), (11, 1, u'+                assertNoLoop(grandChild, store);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(link->elem->parent == lastLink->child);'), (3, 1, u'+        Assert_true(lastLink->parent->reach >= newReach);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: adjustReachB
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(link->elem->parent == lastLink->child);'), (3, 1, u'+        Assert_true(lastLink->parent->reach >= newReach);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(link->elem->parent == lastLink->child);'), (3, 1, u'+        Assert_true(lastLink->parent->reach >= newReach);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                Assert_true(lastLink->parent->reach >= newReach);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: adjustReachB
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                Assert_true(lastLink->parent->reach >= newReach);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                Assert_true(lastLink->parent->reach >= newReach);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(lastLink->parent->reach >= newReach);')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: adjustReachB
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(lastLink->parent->reach >= newReach);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(lastLink->parent->reach >= newReach);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(bestPath < UINT64_MAX); // TODO: handle this')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: updateBestPathCycle
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(bestPath < UINT64_MAX); // TODO: handle this')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(bestPath < UINT64_MAX); // TODO: handle this')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(bestPath < UINT64_MAX); // TODO: handle this')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: updateBestPathCycle
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(bestPath < UINT64_MAX); // TODO: handle this')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(bestPath < UINT64_MAX); // TODO: handle this')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+                assertNoLoop(grandChild, store);')]
===========================================
===========================================
Total add: 9
Total del: 2
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+                assertNoLoop(grandChild, store);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+                assertNoLoop(grandChild, store);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    Assert_always(cycle < 1000);'), (30, 2, u'-    Assert_true(bestPath < UINT64_MAX); // TODO: handle this'), (34, 1, u'+    Assert_always(bestPath < UINT64_MAX); // TODO: handle this')]
===========================================
===========================================
Total add: 27
Total del: 7
Header: logLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    Assert_always(cycle < 1000);'), (30, 2, u'-    Assert_true(bestPath < UINT64_MAX); // TODO: handle this'), (34, 1, u'+    Assert_always(bestPath < UINT64_MAX); // TODO: handle this')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    Assert_always(cycle < 1000);'), (30, 2, u'-    Assert_true(bestPath < UINT64_MAX); // TODO: handle this'), (34, 1, u'+    Assert_always(bestPath < UINT64_MAX); // TODO: handle this')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_true(bestPath < UINT64_MAX); // TODO: handle this'), (22, 1, u'+        assertNoLoop(node, store);')]
===========================================
===========================================
Total add: 24
Total del: 20
Header: handleBadNewsCycle
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_true(bestPath < UINT64_MAX); // TODO: handle this'), (22, 1, u'+        assertNoLoop(node, store);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_true(bestPath < UINT64_MAX); // TODO: handle this'), (22, 1, u'+        assertNoLoop(node, store);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    Assert_true(child->bestParent != link);'), (20, 1, u'+    Assert_always(child->bestParent != link);')]
===========================================
===========================================
Total add: 10
Total del: 8
Header: unlinkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    Assert_true(child->bestParent != link);'), (20, 1, u'+    Assert_always(child->bestParent != link);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-    Assert_true(child->bestParent != link);'), (20, 1, u'+    Assert_always(child->bestParent != link);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assertNoLoop(child, store);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assertNoLoop(child, store);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assertNoLoop(child, store);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                assertNoLoop(lastLink->child, store);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: adjustReachB
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                assertNoLoop(lastLink->child, store);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                assertNoLoop(lastLink->child, store);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    Assert_true(child->bestParent != link);')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: unlinkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    Assert_true(child->bestParent != link);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    Assert_true(child->bestParent != link);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            Assert_true(splitLink->cannonicalLabel != path);'), (11, 1, u'+                Assert_true(splitLink->child == node);')]
===========================================
===========================================
Total add: 10
Total del: 5
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            Assert_true(splitLink->cannonicalLabel != path);'), (11, 1, u'+                Assert_true(splitLink->child == node);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            Assert_true(splitLink->cannonicalLabel != path);'), (11, 1, u'+                Assert_true(splitLink->child == node);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true((uint8_t*)&ctrl->content.error.errorType_be == msg->bytes);')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true((uint8_t*)&ctrl->content.error.errorType_be == msg->bytes);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true((uint8_t*)&ctrl->content.error.errorType_be == msg->bytes);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(definitelyCannonical == cannonicalLabel);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(definitelyCannonical == cannonicalLabel);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(definitelyCannonical == cannonicalLabel);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+    Assert_always(!StandardBencSerializer_get()->serializeDictionary(writer, d));')]
===========================================
===========================================
Total add: 22
Total del: 14
Header: sendFirstMessageToCore
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+    Assert_always(!StandardBencSerializer_get()->serializeDictionary(writer, d));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+    Assert_always(!StandardBencSerializer_get()->serializeDictionary(writer, d));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(path > 1);'), (15, 1, u'+        Assert_always(path != findClosest_INVALID);'), (16, 1, u'+        Assert_always(closest->child != node);')]
===========================================
===========================================
Total add: 14
Total del: 2
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(path > 1);'), (15, 1, u'+        Assert_always(path != findClosest_INVALID);'), (16, 1, u'+        Assert_always(closest->child != node);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(path > 1);'), (15, 1, u'+        Assert_always(path != findClosest_INVALID);'), (16, 1, u'+        Assert_always(closest->child != node);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(out->nodes[i]->address.path);')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: NodeStore_getPeers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(out->nodes[i]->address.path);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(out->nodes[i]->address.path);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(!n || n->address.path != 0);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: RouteTracer_trace
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(!n || n->address.path != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(!n || n->address.path != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(n->address.path);')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: RouteTracer_trace
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(n->address.path);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(n->address.path);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(n->address.path);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: RouteTracer_trace
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(n->address.path);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(n->address.path);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(sm->ifaceMap.keys[mapIndex].bytes[0] == 0xfc);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: check
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(sm->ifaceMap.keys[mapIndex].bytes[0] == 0xfc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(sm->ifaceMap.keys[mapIndex].bytes[0] == 0xfc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(ip6);')]
===========================================
===========================================
Total add: 12
Total del: 0
Header: sessionStats2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(ip6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(ip6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-                Assert_true(!Bits_memcmp(sharedSecret, wrapper->sharedSecret, 32));')]
===========================================
===========================================
Total add: 1
Total del: 16
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-                Assert_true(!Bits_memcmp(sharedSecret, wrapper->sharedSecret, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-                Assert_true(!Bits_memcmp(sharedSecret, wrapper->sharedSecret, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));'), (17, 1, u'+            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Total add: 13
Total del: 3
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));'), (17, 1, u'+            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));'), (17, 1, u'+            Assert_always(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-            Assert_always(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
Total add: 4
Total del: 19
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-            Assert_always(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-            Assert_always(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+                Assert_true(!Bits_memcmp(sharedSecret, wrapper->sharedSecret, 32));'), (41, 1, u'+        Assert_always(wrapper->nextNonce <= nextNonce);'), (55, 1, u'+        Assert_always(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
Total add: 59
Total del: 0
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+                Assert_true(!Bits_memcmp(sharedSecret, wrapper->sharedSecret, 32));'), (41, 1, u'+        Assert_always(wrapper->nextNonce <= nextNonce);'), (55, 1, u'+        Assert_always(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+                Assert_true(!Bits_memcmp(sharedSecret, wrapper->sharedSecret, 32));'), (41, 1, u'+        Assert_always(wrapper->nextNonce <= nextNonce);'), (55, 1, u'+        Assert_always(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_always(message->length >= Headers_IP6Header_SIZE);'), (7, 1, u'+            Assert_failure("you can\'t do that");')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: sendToTun
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_always(message->length >= Headers_IP6Header_SIZE);'), (7, 1, u'+            Assert_failure("you can\'t do that");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_always(message->length >= Headers_IP6Header_SIZE);'), (7, 1, u'+            Assert_failure("you can\'t do that");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+        Assert_always(!Bits_memcmp(wrapper->herIp6, calculatedIp6, 16));')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+        Assert_always(!Bits_memcmp(wrapper->herIp6, calculatedIp6, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+        Assert_always(!Bits_memcmp(wrapper->herIp6, calculatedIp6, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            Assert_always(!Bits_memcmp(calculatedIp6, herIp6, 16));')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: CryptoAuth_wrapInterface
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            Assert_always(!Bits_memcmp(calculatedIp6, herIp6, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            Assert_always(!Bits_memcmp(calculatedIp6, herIp6, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_always(requireAuth);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: registerPeer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_always(requireAuth);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_always(requireAuth);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_always(!Bits_memcmp(session->ip6, addr.ip6.bytes, 16));')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: incomingForMe
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_always(!Bits_memcmp(session->ip6, addr.ip6.bytes, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_always(!Bits_memcmp(session->ip6, addr.ip6.bytes, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    Assert_always(EncodingScheme_isSane(&out->scheme));')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: EncodingScheme_defineFixedWidthScheme
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    Assert_always(EncodingScheme_isSane(&out->scheme));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    Assert_always(EncodingScheme_isSane(&out->scheme));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(EncodingScheme_isSane(scheme));')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: EncodingScheme_defineDynWidthScheme
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(EncodingScheme_isSane(scheme));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(EncodingScheme_isSane(scheme));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(node != grandChild);'), (3, 2, u'-        Assert_true(splitLink->cannonicalLabel != path);'), (8, 1, u'+            Assert_true(splitLink->cannonicalLabel != path);')]
===========================================
===========================================
Total add: 8
Total del: 4
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(node != grandChild);'), (3, 2, u'-        Assert_true(splitLink->cannonicalLabel != path);'), (8, 1, u'+            Assert_true(splitLink->cannonicalLabel != path);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(node != grandChild);'), (3, 2, u'-        Assert_true(splitLink->cannonicalLabel != path);'), (8, 1, u'+            Assert_true(splitLink->cannonicalLabel != path);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            Assert_true(&store->nodes[i].address != addr);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: NodeStore_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            Assert_true(&store->nodes[i].address != addr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            Assert_true(&store->nodes[i].address != addr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+            Assert_always(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
Total add: 15
Total del: 15
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+            Assert_always(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+            Assert_always(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(wrapper->nextNonce <= 1);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(wrapper->nextNonce <= 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(wrapper->nextNonce <= 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(wrapper->nextNonce <= 3);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(wrapper->nextNonce <= 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(wrapper->nextNonce <= 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+            Assert_always(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
Total add: 20
Total del: 5
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+            Assert_always(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+            Assert_always(wrapper->nextNonce <= nextNonce);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (3, 1, u'+    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: reset
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (3, 1, u'+    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (3, 1, u'+    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (4, 1, u'+    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
Total add: 37
Total del: 0
Header: reset
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (4, 1, u'+    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(CryptoAuth_getState(tctx->bobInternalIf) == CryptoAuth_ESTABLISHED);'), (4, 1, u'+    Assert_always(CryptoAuth_getState(tctx->aliceInternalIf) == CryptoAuth_ESTABLISHED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (7, 2, u'-            Assert_true(!Bits_isZero(wrapper->secret, 32));')]
===========================================
===========================================
Total add: 3
Total del: 19
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (7, 2, u'-            Assert_true(!Bits_isZero(wrapper->secret, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (7, 2, u'-            Assert_true(!Bits_isZero(wrapper->secret, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Total add: 0
Total del: 3
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            Assert_true(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (7, 1, u'+            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            Assert_true(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (7, 1, u'+            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+            Assert_true(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (7, 1, u'+            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+            Assert_true(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (14, 1, u'+            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Total add: 11
Total del: 4
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+            Assert_true(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (14, 1, u'+            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+            Assert_true(!Bits_isZero(wrapper->ourTempPrivKey, 32));'), (14, 1, u'+            Assert_true(!Bits_isZero(wrapper->herTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(!Bits_isZero(wrapper->sharedSecret, 32));')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(!Bits_isZero(wrapper->sharedSecret, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(!Bits_isZero(wrapper->sharedSecret, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_always(0);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_always(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_always(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+            Assert_true(splitLink->cannonicalLabel != path);')]
===========================================
===========================================
Total add: 14
Total del: 7
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+            Assert_true(splitLink->cannonicalLabel != path);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+            Assert_true(splitLink->cannonicalLabel != path);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+        Assert_true(splitLink->parent == closest->child);'), (50, 1, u'+        Assert_true(node != grandChild);'), (51, 1, u'+        Assert_true(splitLink->cannonicalLabel != path);')]
===========================================
===========================================
Total add: 32
Total del: 26
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+        Assert_true(splitLink->parent == closest->child);'), (50, 1, u'+        Assert_true(node != grandChild);'), (51, 1, u'+        Assert_true(splitLink->cannonicalLabel != path);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+        Assert_true(splitLink->parent == closest->child);'), (50, 1, u'+        Assert_true(node != grandChild);'), (51, 1, u'+        Assert_true(splitLink->cannonicalLabel != path);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-                Assert_true(next.prefix == 0);'), (6, 2, u'-                Assert_true(next.prefix >> next.prefixLen == 0);'), (9, 1, u'+        Assert_true((next.prefix >> next.prefixLen) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 7
Header: EncodingScheme_deserialize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-                Assert_true(next.prefix == 0);'), (6, 2, u'-                Assert_true(next.prefix >> next.prefixLen == 0);'), (9, 1, u'+        Assert_true((next.prefix >> next.prefixLen) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-                Assert_true(next.prefix == 0);'), (6, 2, u'-                Assert_true(next.prefix >> next.prefixLen == 0);'), (9, 1, u'+        Assert_true((next.prefix >> next.prefixLen) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(bits == 4);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(bits == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(bits == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+                    Assert_always(0);')]
===========================================
===========================================
Total add: 13
Total del: 2
Header: convertLabelRand
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+                    Assert_always(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+                    Assert_always(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-            Assert_always(4 == bits);'), (4, 2, u'-            Assert_always(1 == getDecompressed(label, 4));'), (7, 1, u'+            Assert_always(1 == getDecompressed(label, bits));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: numberCompressions_generic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-            Assert_always(4 == bits);'), (4, 2, u'-            Assert_always(1 == getDecompressed(label, 4));'), (7, 1, u'+            Assert_always(1 == getDecompressed(label, bits));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-            Assert_always(4 == bits);'), (4, 2, u'-            Assert_always(1 == getDecompressed(label, 4));'), (7, 1, u'+            Assert_always(1 == getDecompressed(label, bits));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-            Assert_true(NumberCompress_bitsUsedForLabel(label) == bits);'), (12, 2, u'-            Assert_true(NumberCompress_getDecompressed(label, bits) ==')]
===========================================
===========================================
Total add: 3
Total del: 24
Header: onPingResponse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-            Assert_true(NumberCompress_bitsUsedForLabel(label) == bits);'), (12, 2, u'-            Assert_true(NumberCompress_getDecompressed(label, bits) ==')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-            Assert_true(NumberCompress_bitsUsedForLabel(label) == bits);'), (12, 2, u'-            Assert_true(NumberCompress_getDecompressed(label, bits) ==')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(((struct Headers_SwitchHeader*)message->bytes)->label_be ==')]
===========================================
===========================================
Total add: 0
Total del: 10
Header: sendToSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(((struct Headers_SwitchHeader*)message->bytes)->label_be ==')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(((struct Headers_SwitchHeader*)message->bytes)->label_be ==')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(p->pub.hopLimit < 256);')]
===========================================
===========================================
Total add: 0
Total del: 9
Header: sendPing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(p->pub.hopLimit < 256);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(p->pub.hopLimit < 256);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_true(director != 0);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: EncodingScheme_convertLabel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_true(director != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_true(director != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    Assert_true(destIndex < NumberCompress_INTERFACES);'), (14, 1, u'+    Assert_true(sourceIndex < NumberCompress_INTERFACES);'), (36, 1, u'+        Assert_true(bits == 4);'), (39, 2, u'-    Assert_true(destIndex < NumberCompress_INTERFACES);'), (40, 2, u'-    Assert_true(sourceIndex < NumberCompress_INTERFACES);')]
===========================================
===========================================
Total add: 56
Total del: 23
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    Assert_true(destIndex < NumberCompress_INTERFACES);'), (14, 1, u'+    Assert_true(sourceIndex < NumberCompress_INTERFACES);'), (36, 1, u'+        Assert_true(bits == 4);'), (39, 2, u'-    Assert_true(destIndex < NumberCompress_INTERFACES);'), (40, 2, u'-    Assert_true(sourceIndex < NumberCompress_INTERFACES);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    Assert_true(destIndex < NumberCompress_INTERFACES);'), (14, 1, u'+    Assert_true(sourceIndex < NumberCompress_INTERFACES);'), (36, 1, u'+        Assert_true(bits == 4);'), (39, 2, u'-    Assert_true(destIndex < NumberCompress_INTERFACES);'), (40, 2, u'-    Assert_true(sourceIndex < NumberCompress_INTERFACES);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                Assert_ifTesting(!"invalid route");')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                Assert_ifTesting(!"invalid route");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                Assert_ifTesting(!"invalid route");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                Assert_ifTesting(!"wasting space");')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                Assert_ifTesting(!"wasting space");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                Assert_ifTesting(!"wasting space");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+            Assert_true(NumberCompress_bitsUsedForLabel(label) == bits);'), (9, 1, u'+            Assert_true(NumberCompress_getDecompressed(label, bits) ==')]
===========================================
===========================================
Total add: 24
Total del: 0
Header: onPingResponse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+            Assert_true(NumberCompress_bitsUsedForLabel(label) == bits);'), (9, 1, u'+            Assert_true(NumberCompress_getDecompressed(label, bits) ==')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+            Assert_true(NumberCompress_bitsUsedForLabel(label) == bits);'), (9, 1, u'+            Assert_true(NumberCompress_getDecompressed(label, bits) ==')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(((struct Headers_SwitchHeader*)message->bytes)->label_be ==')]
===========================================
===========================================
Total add: 10
Total del: 0
Header: sendToSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(((struct Headers_SwitchHeader*)message->bytes)->label_be ==')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(((struct Headers_SwitchHeader*)message->bytes)->label_be ==')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(p->pub.hopLimit < 256);')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: sendPing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(p->pub.hopLimit < 256);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(p->pub.hopLimit < 256);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        Assert_true(director != 0);')]
===========================================
===========================================
Total add: 0
Total del: 7
Header: EncodingScheme_convertLabel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        Assert_true(director != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        Assert_true(director != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    Assert_true(destIndex < NumberCompress_INTERFACES);'), (11, 2, u'-    Assert_true(sourceIndex < NumberCompress_INTERFACES);'), (25, 2, u'-        Assert_true(bits == 4);')]
===========================================
===========================================
Total add: 13
Total del: 56
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    Assert_true(destIndex < NumberCompress_INTERFACES);'), (11, 2, u'-    Assert_true(sourceIndex < NumberCompress_INTERFACES);'), (25, 2, u'-        Assert_true(bits == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    Assert_true(destIndex < NumberCompress_INTERFACES);'), (11, 2, u'-    Assert_true(sourceIndex < NumberCompress_INTERFACES);'), (25, 2, u'-        Assert_true(bits == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(destIndex < NumberCompress_INTERFACES);'), (3, 1, u'+    Assert_true(sourceIndex < NumberCompress_INTERFACES);')]
===========================================
===========================================
Total add: 10
Total del: 0
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(destIndex < NumberCompress_INTERFACES);'), (3, 1, u'+    Assert_true(sourceIndex < NumberCompress_INTERFACES);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(destIndex < NumberCompress_INTERFACES);'), (3, 1, u'+    Assert_true(sourceIndex < NumberCompress_INTERFACES);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: convertLabel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(label2 != EncodingScheme_convertLabel_INVALID);'), (21, 1, u'+        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);'), (24, 1, u'+    Assert_always(label2 == converted);')]
===========================================
===========================================
Total add: 22
Total del: 1
Header: convertLabel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(label2 != EncodingScheme_convertLabel_INVALID);'), (21, 1, u'+        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);'), (24, 1, u'+    Assert_always(label2 == converted);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(label2 != EncodingScheme_convertLabel_INVALID);'), (21, 1, u'+        Assert_always(label2 == EncodingScheme_convertLabel_INVALID);'), (24, 1, u'+    Assert_always(label2 == converted);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                    Assert_true(1 == label);'), (4, 1, u'+                    Assert_true(EncodingScheme_convertLabel_INVALID == labelB);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: numberCompressions_generic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                    Assert_true(1 == label);'), (4, 1, u'+                    Assert_true(EncodingScheme_convertLabel_INVALID == labelB);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                    Assert_true(1 == label);'), (4, 1, u'+                    Assert_true(EncodingScheme_convertLabel_INVALID == labelB);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_always(argc > 0);')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_always(argc > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_always(argc > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+Assert_true(0);')]
===========================================
===========================================
Total add: 34
Total del: 4
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(path > 1);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: return NULL;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(path > 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(path > 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(path == 1);'), (5, 1, u'+        Assert_true(closest->child == node);')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: return NULL;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(path == 1);'), (5, 1, u'+        Assert_true(closest->child == node);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_true(path == 1);'), (5, 1, u'+        Assert_true(closest->child == node);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_addNode(store, randomIp(0x155), 1, Version_CURRENT_PROTOCOL) == NULL);'), (3, 1, u'+    Assert_always('), (8, 2, u'-    Assert_always(NodeStore_addNode(store, randomIp(0x15), 1, Version_CURRENT_PROTOCOL) != NULL);'), (9, 1, u'+    Assert_always('), (14, 2, u'-    Assert_always(NodeStore_addNode(store, randomIp(0x155), 1, Version_CURRENT_PROTOCOL) != NULL);'), (15, 1, u'+    Assert_always(')]
===========================================
===========================================
Total add: 12
Total del: 5
Header: test_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_addNode(store, randomIp(0x155), 1, Version_CURRENT_PROTOCOL) == NULL);'), (3, 1, u'+    Assert_always('), (8, 2, u'-    Assert_always(NodeStore_addNode(store, randomIp(0x15), 1, Version_CURRENT_PROTOCOL) != NULL);'), (9, 1, u'+    Assert_always('), (14, 2, u'-    Assert_always(NodeStore_addNode(store, randomIp(0x155), 1, Version_CURRENT_PROTOCOL) != NULL);'), (15, 1, u'+    Assert_always(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_addNode(store, randomIp(0x155), 1, Version_CURRENT_PROTOCOL) == NULL);'), (3, 1, u'+    Assert_always('), (8, 2, u'-    Assert_always(NodeStore_addNode(store, randomIp(0x15), 1, Version_CURRENT_PROTOCOL) != NULL);'), (9, 1, u'+    Assert_always('), (14, 2, u'-    Assert_always(NodeStore_addNode(store, randomIp(0x155), 1, Version_CURRENT_PROTOCOL) != NULL);'), (15, 1, u'+    Assert_always(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(target) == 4);'), (18, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(oneHop1->path) == 4);'), (19, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(oneHop2->path) == 4);'), (20, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(oneHop3->path) == 4);'), (21, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(twoHop->path) == 4);')]
===========================================
===========================================
Total add: 13
Total del: 11
Header: test_getPeers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(target) == 4);'), (18, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(oneHop1->path) == 4);'), (19, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(oneHop2->path) == 4);'), (20, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(oneHop3->path) == 4);'), (21, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(twoHop->path) == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(target) == 4);'), (18, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(oneHop1->path) == 4);'), (19, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(oneHop2->path) == 4);'), (20, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(oneHop3->path) == 4);'), (21, 2, u'-    Assert_always(NumberCompress_bitsUsedForLabel(twoHop->path) == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_getNodeByNetworkAddr(0x15,store)==NULL);'), (3, 1, u'+    Assert_always(NodeStore_getNodeByNetworkAddr(getPath((int[]){2,1}),store)==NULL);'), (8, 2, u'-    Assert_always(NodeStore_getNodeByNetworkAddr(0x15,store)->address.path == 0x15);'), (11, 1, u'+    Assert_always(')]
===========================================
===========================================
Total add: 7
Total del: 4
Header: test_getNodeByNetworkAddr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_getNodeByNetworkAddr(0x15,store)==NULL);'), (3, 1, u'+    Assert_always(NodeStore_getNodeByNetworkAddr(getPath((int[]){2,1}),store)==NULL);'), (8, 2, u'-    Assert_always(NodeStore_getNodeByNetworkAddr(0x15,store)->address.path == 0x15);'), (11, 1, u'+    Assert_always(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_getNodeByNetworkAddr(0x15,store)==NULL);'), (3, 1, u'+    Assert_always(NodeStore_getNodeByNetworkAddr(getPath((int[]){2,1}),store)==NULL);'), (8, 2, u'-    Assert_always(NodeStore_getNodeByNetworkAddr(0x15,store)->address.path == 0x15);'), (11, 1, u'+    Assert_always(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_true(director != 0);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: EncodingScheme_convertLabel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_true(director != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_true(director != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+                Assert_true(bitsB == scheme->forms[k].prefixLen + scheme->forms[k].bitCount'), (15, 1, u'+                Assert_true(i == getDecompressed(labelB, bitsB));'), (18, 1, u'+                Assert_true(labelC == label);')]
===========================================
===========================================
Total add: 38
Total del: 20
Header: numberCompressions_generic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+                Assert_true(bitsB == scheme->forms[k].prefixLen + scheme->forms[k].bitCount'), (15, 1, u'+                Assert_true(i == getDecompressed(labelB, bitsB));'), (18, 1, u'+                Assert_true(labelC == label);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+                Assert_true(bitsB == scheme->forms[k].prefixLen + scheme->forms[k].bitCount'), (15, 1, u'+                Assert_true(i == getDecompressed(labelB, bitsB));'), (18, 1, u'+                Assert_true(labelC == label);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(122, 1, u'+        Assert_always(!calculateAuth(messageDict, ctx->password, cookie, req->alloc));')]
===========================================
===========================================
Total add: 95
Total del: 37
Header: calculateAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(122, 1, u'+        Assert_always(!calculateAuth(messageDict, ctx->password, cookie, req->alloc));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(122, 1, u'+        Assert_always(!calculateAuth(messageDict, ctx->password, cookie, req->alloc));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    Assert_always(res);')]
===========================================
===========================================
Total add: 11
Total del: 1
Header: rpcCall0
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    Assert_always(res);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    Assert_always(res);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+    Assert_always(ctx->res);')]
===========================================
===========================================
Total add: 16
Total del: 3
Header: checkRunningInstance
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+    Assert_always(ctx->res);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+    Assert_always(ctx->res);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(!res->err);'), (4, 2, u'-    Assert_always(Dict_getInt(res->responseDict, String_CONST("called!")));'), (5, 2, u'-    Assert_always(ctx->called);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: standardClient
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(!res->err);'), (4, 2, u'-    Assert_always(Dict_getInt(res->responseDict, String_CONST("called!")));'), (5, 2, u'-    Assert_always(ctx->called);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(!res->err);'), (4, 2, u'-    Assert_always(Dict_getInt(res->responseDict, String_CONST("called!")));'), (5, 2, u'-    Assert_always(ctx->called);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-    Assert_always(!res->err);'), (23, 2, u'-    Assert_always(!Sockaddr_parse(addr->bytes, &ss));')]
===========================================
===========================================
Total add: 27
Total del: 14
Header: sendFirstMessageToCore
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-    Assert_always(!res->err);'), (23, 2, u'-    Assert_always(!Sockaddr_parse(addr->bytes, &ss));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-    Assert_always(!res->err);'), (23, 2, u'-    Assert_always(!Sockaddr_parse(addr->bytes, &ss));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_always(!res->err);'), (9, 2, u'-    Assert_always(CString_strstr(res->messageBytes, "error4:none15:interfaceNumberi0ee"));')]
===========================================
===========================================
Total add: 6
Total del: 8
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_always(!res->err);'), (9, 2, u'-    Assert_always(CString_strstr(res->messageBytes, "error4:none15:interfaceNumberi0ee"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_always(!res->err);'), (9, 2, u'-    Assert_always(CString_strstr(res->messageBytes, "error4:none15:interfaceNumberi0ee"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_always(!CString_strcmp("d5:error30:key must be 52 characters longe",')]
===========================================
===========================================
Total add: 5
Total del: 4
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_always(!CString_strcmp("d5:error30:key must be 52 characters longe",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_always(!CString_strcmp("d5:error30:key must be 52 characters longe",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_always(!CString_strcmp("d5:error4:nonee", (char*) res->messageBytes));')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_always(!CString_strcmp("d5:error4:nonee", (char*) res->messageBytes));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_always(!CString_strcmp("d5:error4:nonee", (char*) res->messageBytes));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_true(addrLen > 0);'), (16, 1, u'+            Assert_failure("Sockaddr which is not AF_INET nor AF_INET6");')]
===========================================
===========================================
Total add: 20
Total del: 1
Header: UDPInterface_beginConnection
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_true(addrLen > 0);'), (16, 1, u'+            Assert_failure("Sockaddr which is not AF_INET nor AF_INET6");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_true(addrLen > 0);'), (16, 1, u'+            Assert_failure("Sockaddr which is not AF_INET nor AF_INET6");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(!strcmp("d5:error4:none15:interfaceNumberi0ee", (char*) res->messageBytes));'), (6, 1, u'+    Assert_always(CString_strstr(res->messageBytes, "error4:none15:interfaceNumberi0ee"));')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(!strcmp("d5:error4:none15:interfaceNumberi0ee", (char*) res->messageBytes));'), (6, 1, u'+    Assert_always(CString_strstr(res->messageBytes, "error4:none15:interfaceNumberi0ee"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(!strcmp("d5:error4:none15:interfaceNumberi0ee", (char*) res->messageBytes));'), (6, 1, u'+    Assert_always(CString_strstr(res->messageBytes, "error4:none15:interfaceNumberi0ee"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!strcmp("d5:error30:key must be 52 characters longe",'), (3, 1, u'+    Assert_always(!CString_strcmp("d5:error30:key must be 52 characters longe",')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!strcmp("d5:error30:key must be 52 characters longe",'), (3, 1, u'+    Assert_always(!CString_strcmp("d5:error30:key must be 52 characters longe",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!strcmp("d5:error30:key must be 52 characters longe",'), (3, 1, u'+    Assert_always(!CString_strcmp("d5:error30:key must be 52 characters longe",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!strcmp("d5:error4:nonee", (char*) res->messageBytes));'), (3, 1, u'+    Assert_always(!CString_strcmp("d5:error4:nonee", (char*) res->messageBytes));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!strcmp("d5:error4:nonee", (char*) res->messageBytes));'), (3, 1, u'+    Assert_always(!CString_strcmp("d5:error4:nonee", (char*) res->messageBytes));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!strcmp("d5:error4:nonee", (char*) res->messageBytes));'), (3, 1, u'+    Assert_always(!CString_strcmp("d5:error4:nonee", (char*) res->messageBytes));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(i < context->pub.connectionList.count);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: timeout
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(i < context->pub.connectionList.count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(i < context->pub.connectionList.count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+            Assert_true(nodeList->nodes[i]->address.path != 0);')]
===========================================
===========================================
Total add: 12
Total del: 5
Header: return;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+            Assert_true(nodeList->nodes[i]->address.path != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+            Assert_true(nodeList->nodes[i]->address.path != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length == strlen(MESSAGEB));'), (3, 2, u'-    Assert_always(!Bits_memcmp(msg->bytes, MESSAGEB, strlen(MESSAGEB)));'), (4, 1, u'+    Assert_always(msg->length == (int)CString_strlen(MESSAGEB));'), (5, 1, u'+    Assert_always(!Bits_memcmp(msg->bytes, MESSAGEB, CString_strlen(MESSAGEB)));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: receiveMessageParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length == strlen(MESSAGEB));'), (3, 2, u'-    Assert_always(!Bits_memcmp(msg->bytes, MESSAGEB, strlen(MESSAGEB)));'), (4, 1, u'+    Assert_always(msg->length == (int)CString_strlen(MESSAGEB));'), (5, 1, u'+    Assert_always(!Bits_memcmp(msg->bytes, MESSAGEB, CString_strlen(MESSAGEB)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length == strlen(MESSAGEB));'), (3, 2, u'-    Assert_always(!Bits_memcmp(msg->bytes, MESSAGEB, strlen(MESSAGEB)));'), (4, 1, u'+    Assert_always(msg->length == (int)CString_strlen(MESSAGEB));'), (5, 1, u'+    Assert_always(!Bits_memcmp(msg->bytes, MESSAGEB, CString_strlen(MESSAGEB)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(m->length == strlen(MESSAGE));'), (3, 2, u'-    Assert_always(!Bits_memcmp(m->bytes, MESSAGE, strlen(MESSAGE)));'), (4, 1, u'+    Assert_always(m->length == (int)CString_strlen(MESSAGE));'), (5, 1, u'+    Assert_always(!Bits_memcmp(m->bytes, MESSAGE, CString_strlen(MESSAGE)));')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: receiveMessageChild
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(m->length == strlen(MESSAGE));'), (3, 2, u'-    Assert_always(!Bits_memcmp(m->bytes, MESSAGE, strlen(MESSAGE)));'), (4, 1, u'+    Assert_always(m->length == (int)CString_strlen(MESSAGE));'), (5, 1, u'+    Assert_always(!Bits_memcmp(m->bytes, MESSAGE, CString_strlen(MESSAGE)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(m->length == strlen(MESSAGE));'), (3, 2, u'-    Assert_always(!Bits_memcmp(m->bytes, MESSAGE, strlen(MESSAGE)));'), (4, 1, u'+    Assert_always(m->length == (int)CString_strlen(MESSAGE));'), (5, 1, u'+    Assert_always(!Bits_memcmp(m->bytes, MESSAGE, CString_strlen(MESSAGE)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-Assert_compileTime(PROVIDERS_COUNT == (sizeof(PROVIDERS) / sizeof(RandomSeed_Provider)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Bits_memcmp(buff, buff2, 32));'), (3, 1, u'+    Assert_always(Bits_memcmp(buff, buff2, 32));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test179
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Bits_memcmp(buff, buff2, 32));'), (3, 1, u'+    Assert_always(Bits_memcmp(buff, buff2, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Bits_memcmp(buff, buff2, 32));'), (3, 1, u'+    Assert_always(Bits_memcmp(buff, buff2, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Exports_decryptRndNonce(nonce, &m, secret));'), (3, 1, u'+    Assert_always(!CryptoAuth_decryptRndNonce(nonce, &m, secret));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encryptRndNonceTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Exports_decryptRndNonce(nonce, &m, secret));'), (3, 1, u'+    Assert_always(!CryptoAuth_decryptRndNonce(nonce, &m, secret));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Exports_decryptRndNonce(nonce, &m, secret));'), (3, 1, u'+    Assert_always(!CryptoAuth_decryptRndNonce(nonce, &m, secret));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(false);'), (3, 1, u'+    Assert_always(false);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: missingKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(false);'), (3, 1, u'+    Assert_always(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(false);'), (3, 1, u'+    Assert_always(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Bits_memcmp(&msg->bytes[msg->length], nextMessage->bytes, 8));'), (5, 1, u'+        Assert_true(!Bits_memcmp(&msg->bytes[msg->length], nextMessage->bytes, 8));')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: sendFragmented
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Bits_memcmp(&msg->bytes[msg->length], nextMessage->bytes, 8));'), (5, 1, u'+        Assert_true(!Bits_memcmp(&msg->bytes[msg->length], nextMessage->bytes, 8));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Bits_memcmp(&msg->bytes[msg->length], nextMessage->bytes, 8));'), (5, 1, u'+        Assert_true(!Bits_memcmp(&msg->bytes[msg->length], nextMessage->bytes, 8));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(12 == strlen(text));'), (3, 1, u'+    Assert_always(12 == strlen(text));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(12 == strlen(text));'), (3, 1, u'+    Assert_always(12 == strlen(text));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(12 == strlen(text));'), (3, 1, u'+    Assert_always(12 == strlen(text));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!"timeout");'), (3, 1, u'+    Assert_always(!"timeout");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: fail
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!"timeout");'), (3, 1, u'+    Assert_always(!"timeout");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!"timeout");'), (3, 1, u'+    Assert_always(!"timeout");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("0.0.0.0", &ss));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("0.0.0.0", &ss));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("0.0.0.0", &ss));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("0.0.0.0", &ss));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("0.0.0.0", &ss));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("0.0.0.0", &ss));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(4 == Sockaddr_getAddress(dest, &addr));'), (3, 1, u'+    Assert_always(4 == Sockaddr_getAddress(dest, &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(4 == Sockaddr_getAddress(dest, &addr));'), (3, 1, u'+    Assert_always(4 == Sockaddr_getAddress(dest, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(4 == Sockaddr_getAddress(dest, &addr));'), (3, 1, u'+    Assert_always(4 == Sockaddr_getAddress(dest, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!"timeout");'), (3, 1, u'+    Assert_always(!"timeout");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: fail
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!"timeout");'), (3, 1, u'+    Assert_always(!"timeout");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!"timeout");'), (3, 1, u'+    Assert_always(!"timeout");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("[fd00::1]", &addr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("[fd00::1]", &addr));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("[fd00::1]", &addr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("[fd00::1]", &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("[fd00::1]", &addr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("[fd00::1]", &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(udp);'), (3, 1, u'+    Assert_always(udp);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(udp);'), (3, 1, u'+    Assert_always(udp);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(udp);'), (3, 1, u'+    Assert_always(udp);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(16 == Sockaddr_getAddress(dest, &addrBytes));'), (3, 1, u'+    Assert_always(16 == Sockaddr_getAddress(dest, &addrBytes));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(16 == Sockaddr_getAddress(dest, &addrBytes));'), (3, 1, u'+    Assert_always(16 == Sockaddr_getAddress(dest, &addrBytes));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(16 == Sockaddr_getAddress(dest, &addrBytes));'), (3, 1, u'+    Assert_always(16 == Sockaddr_getAddress(dest, &addrBytes));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!"timeout");'), (3, 1, u'+    Assert_always(!"timeout");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: fail
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!"timeout");'), (3, 1, u'+    Assert_always(!"timeout");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!"timeout");'), (3, 1, u'+    Assert_always(!"timeout");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("fd00::1", &ss));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("fd00::1", &ss));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: printf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("fd00::1", &ss));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("fd00::1", &ss));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("fd00::1", &ss));'), (3, 1, u'+    Assert_always(!Sockaddr_parse("fd00::1", &ss));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_failure("%s:%d Fatal error: invalid [%s] canary",'), (4, 1, u'+        Assert_failure("%s:%d Fatal error: invalid [%s] canary\\n",')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: checkCanaries
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_failure("%s:%d Fatal error: invalid [%s] canary",'), (4, 1, u'+        Assert_failure("%s:%d Fatal error: invalid [%s] canary\\n",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_failure("%s:%d Fatal error: invalid [%s] canary",'), (4, 1, u'+        Assert_failure("%s:%d Fatal error: invalid [%s] canary\\n",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(0);'), (3, 1, u'+    Assert_always(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: getParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(0);'), (3, 1, u'+    Assert_always(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(0);'), (3, 1, u'+    Assert_always(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(found);'), (3, 1, u'+    Assert_always(found);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: disconnectAdopted
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(found);'), (3, 1, u'+    Assert_always(found);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(found);'), (3, 1, u'+    Assert_always(found);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(found);'), (3, 1, u'+    Assert_always(found);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: disconnectAdopted
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(found);'), (3, 1, u'+    Assert_always(found);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(found);'), (3, 1, u'+    Assert_always(found);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(msg->length >= Headers_IP6Header_SIZE);'), (5, 1, u'+        Assert_true(msg->length >= Headers_IP6Header_SIZE);'), (8, 2, u'-    Assert_true(!Bits_memcmp(header->destinationAddr, ctx->myAddr.ip6.bytes, 16));'), (9, 2, u'-    Assert_true(!Bits_memcmp(header->sourceAddr, FC_ONE, 16));'), (10, 1, u'+        Assert_true(!Bits_memcmp(header->destinationAddr, ctx->myAddr.ip6.bytes, 16));'), (11, 1, u'+        Assert_true(!Bits_memcmp(header->sourceAddr, FC_ONE, 16));')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: magicInterfaceSendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(msg->length >= Headers_IP6Header_SIZE);'), (5, 1, u'+        Assert_true(msg->length >= Headers_IP6Header_SIZE);'), (8, 2, u'-    Assert_true(!Bits_memcmp(header->destinationAddr, ctx->myAddr.ip6.bytes, 16));'), (9, 2, u'-    Assert_true(!Bits_memcmp(header->sourceAddr, FC_ONE, 16));'), (10, 1, u'+        Assert_true(!Bits_memcmp(header->destinationAddr, ctx->myAddr.ip6.bytes, 16));'), (11, 1, u'+        Assert_true(!Bits_memcmp(header->sourceAddr, FC_ONE, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(msg->length >= Headers_IP6Header_SIZE);'), (5, 1, u'+        Assert_true(msg->length >= Headers_IP6Header_SIZE);'), (8, 2, u'-    Assert_true(!Bits_memcmp(header->destinationAddr, ctx->myAddr.ip6.bytes, 16));'), (9, 2, u'-    Assert_true(!Bits_memcmp(header->sourceAddr, FC_ONE, 16));'), (10, 1, u'+        Assert_true(!Bits_memcmp(header->destinationAddr, ctx->myAddr.ip6.bytes, 16));'), (11, 1, u'+        Assert_true(!Bits_memcmp(header->sourceAddr, FC_ONE, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(0);'), (3, 1, u'+        Assert_always(0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: outgoingFromCryptoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(0);'), (3, 1, u'+        Assert_always(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(0);'), (3, 1, u'+        Assert_always(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(allocatorsFreed == 1);'), (3, 1, u'+    Assert_always(allocatorsFreed == 1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(allocatorsFreed == 1);'), (3, 1, u'+    Assert_always(allocatorsFreed == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(allocatorsFreed == 1);'), (3, 1, u'+    Assert_always(allocatorsFreed == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(0x13 == LabelSplicer_unsplice(0x13, 1));'), (3, 1, u'+    Assert_always(0x13 == LabelSplicer_unsplice(0x13, 1));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: unsplice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(0x13 == LabelSplicer_unsplice(0x13, 1));'), (3, 1, u'+    Assert_always(0x13 == LabelSplicer_unsplice(0x13, 1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(0x13 == LabelSplicer_unsplice(0x13, 1));'), (3, 1, u'+    Assert_always(0x13 == LabelSplicer_unsplice(0x13, 1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingTunC
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingTunB
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingTunA
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingTunB
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingTunA
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(16 == Sockaddr_getAddress(addr, &address));'), (3, 1, u'+        Assert_always(16 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: showConn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(16 == Sockaddr_getAddress(addr, &address));'), (3, 1, u'+        Assert_always(16 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(16 == Sockaddr_getAddress(addr, &address));'), (3, 1, u'+        Assert_always(16 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(4 == Sockaddr_getAddress(addr, &address));'), (3, 1, u'+        Assert_always(4 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: showConn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(4 == Sockaddr_getAddress(addr, &address));'), (3, 1, u'+        Assert_always(4 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(4 == Sockaddr_getAddress(addr, &address));'), (3, 1, u'+        Assert_always(4 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: messageToTun
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_always(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(called);'), (3, 1, u'+    Assert_always(called);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(called);'), (3, 1, u'+    Assert_always(called);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(called);'), (3, 1, u'+    Assert_always(called);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!AddrTools_parseIp(out, (uint8_t*)"[::1]"));'), (3, 2, u'-    Assert_true(!Bits_memcmp(out, (uint8_t*)"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1", 16));'), (4, 1, u'+    Assert_always(!AddrTools_parseIp(out, (uint8_t*)"[::1]"));'), (5, 1, u'+    Assert_always(!Bits_memcmp(out, (uint8_t*)"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1", 16));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!AddrTools_parseIp(out, (uint8_t*)"[::1]"));'), (3, 2, u'-    Assert_true(!Bits_memcmp(out, (uint8_t*)"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1", 16));'), (4, 1, u'+    Assert_always(!AddrTools_parseIp(out, (uint8_t*)"[::1]"));'), (5, 1, u'+    Assert_always(!Bits_memcmp(out, (uint8_t*)"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1", 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!AddrTools_parseIp(out, (uint8_t*)"[::1]"));'), (3, 2, u'-    Assert_true(!Bits_memcmp(out, (uint8_t*)"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1", 16));'), (4, 1, u'+    Assert_always(!AddrTools_parseIp(out, (uint8_t*)"[::1]"));'), (5, 1, u'+    Assert_always(!Bits_memcmp(out, (uint8_t*)"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1", 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Bits_log2x64(1)==0);'), (3, 1, u'+    Assert_always(Bits_log2x64(1)==0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Bits_log2x64(1)==0);'), (3, 1, u'+    Assert_always(Bits_log2x64(1)==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Bits_log2x64(1)==0);'), (3, 1, u'+    Assert_always(Bits_log2x64(1)==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        Assert_true(!"map out of order");'), (3, 1, u'+                        Assert_always(!"map out of order");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        Assert_true(!"map out of order");'), (3, 1, u'+                        Assert_always(!"map out of order");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        Assert_true(!"map out of order");'), (3, 1, u'+                        Assert_always(!"map out of order");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(false);'), (3, 1, u'+                Assert_always(false);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(false);'), (3, 1, u'+                Assert_always(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                Assert_true(false);'), (3, 1, u'+                Assert_always(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(path != NULL);'), (3, 1, u'+    Assert_always(path != NULL);'), (5, 2, u'-        Assert_true(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (6, 2, u'-        Assert_true(strstr(path, ".exe"));'), (7, 1, u'+        Assert_always(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (8, 1, u'+        Assert_always(strstr(path, ".exe"));'), (10, 2, u"-        Assert_true(path[0] == '/');"), (11, 1, u"+        Assert_always(path[0] == '/');"), (17, 2, u'-    Assert_true(!Process_spawn(path, args, eb, alloc));'), (18, 1, u'+    Assert_always(!Process_spawn(path, args, eb, alloc));')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(path != NULL);'), (3, 1, u'+    Assert_always(path != NULL);'), (5, 2, u'-        Assert_true(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (6, 2, u'-        Assert_true(strstr(path, ".exe"));'), (7, 1, u'+        Assert_always(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (8, 1, u'+        Assert_always(strstr(path, ".exe"));'), (10, 2, u"-        Assert_true(path[0] == '/');"), (11, 1, u"+        Assert_always(path[0] == '/');"), (17, 2, u'-    Assert_true(!Process_spawn(path, args, eb, alloc));'), (18, 1, u'+    Assert_always(!Process_spawn(path, args, eb, alloc));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(path != NULL);'), (3, 1, u'+    Assert_always(path != NULL);'), (5, 2, u'-        Assert_true(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (6, 2, u'-        Assert_true(strstr(path, ".exe"));'), (7, 1, u'+        Assert_always(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (8, 1, u'+        Assert_always(strstr(path, ".exe"));'), (10, 2, u"-        Assert_true(path[0] == '/');"), (11, 1, u"+        Assert_always(path[0] == '/');"), (17, 2, u'-    Assert_true(!Process_spawn(path, args, eb, alloc));'), (18, 1, u'+    Assert_always(!Process_spawn(path, args, eb, alloc));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(104, 1, u'+  assert(ctx != NULL);'), (105, 1, u'+  assert(ctx->parent_handle != NULL);'), (130, 1, u'+  assert(ctx->parent_handle != NULL);'), (131, 1, u'+  assert(ctx->parent_handle->poll_ctx == ctx);'), (243, 1, u'+  assert(handle->flags & UV__HANDLE_CLOSING);'), (244, 1, u'+  assert(!(handle->flags & UV_HANDLE_CLOSED));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(149, 1, u'+    assert(n == sizeof(val));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 1, u'+STATIC_ASSERT(sizeof(uv_buf_t) == sizeof(struct iovec));'), (70, 1, u'+STATIC_ASSERT(sizeof(&((uv_buf_t*) 0)->base) =='), (72, 1, u'+STATIC_ASSERT(sizeof(&((uv_buf_t*) 0)->len) =='), (74, 1, u'+STATIC_ASSERT(offsetof(uv_buf_t, base) == offsetof(struct iovec, iov_base));'), (75, 1, u'+STATIC_ASSERT(offsetof(uv_buf_t, len) == offsetof(struct iovec, iov_len));'), (84, 1, u'+  assert(!(handle->flags & (UV_CLOSING | UV_CLOSED)));'), (149, 1, u'+    assert(0);'), (157, 1, u'+  assert(handle->flags & UV_CLOSING);'), (158, 1, u'+  assert(!(handle->flags & UV_CLOSED));'), (165, 1, u'+  assert(!uv__is_active(handle));'), (166, 1, u'+  assert(handle->flags & UV_CLOSING);'), (167, 1, u'+  assert(!(handle->flags & UV_CLOSED));'), (194, 1, u'+      assert(0);'), (387, 1, u'+  assert(sockfd >= 0);'), (619, 1, u'+  assert(cb != NULL);'), (620, 1, u'+  assert(fd >= -1);'), (636, 1, u'+  assert(0 == (events & ~(UV__POLLIN | UV__POLLOUT)));'), (637, 1, u'+  assert(0 != events);'), (638, 1, u'+  assert(w->fd >= 0);'), (639, 1, u'+  assert(w->fd < INT_MAX);'), (669, 1, u'+  assert(0 == (events & ~(UV__POLLIN | UV__POLLOUT)));'), (670, 1, u'+  assert(0 != events);'), (675, 1, u'+  assert(w->fd >= 0);'), (688, 1, u'+      assert(loop->watchers[w->fd] == w);'), (689, 1, u'+      assert(loop->nfds > 0);'), (713, 1, u'+  assert(0 == (events & ~(UV__POLLIN | UV__POLLOUT)));'), (714, 1, u'+  assert(0 != events);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(87, 1, u'+  assert(0 && "implement me");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(76, 1, u'+  assert(ACCESS_ONCE(CFRunLoopRef, loop->cf_loop) != NULL);'), (86, 1, u'+  assert(loop->cf_loop != NULL);'), (171, 1, u'+  assert(loop->cf_loop != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(573, 1, u'+    assert(req->errorno == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+    assert(0);'), (88, 1, u'+    assert(req->retcode == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 1, u'+    assert(ngx_queue_empty(&loop->watcher_queue));'), (83, 1, u'+    assert(w->pevents != 0);'), (84, 1, u'+    assert(w->fd >= 0);'), (85, 1, u'+    assert(w->fd < (int) loop->nwatchers);'), (121, 1, u'+  assert(timeout >= -1);'), (145, 1, u'+      assert(timeout != -1);'), (184, 1, u'+        assert(w->events == UV__POLLIN);'), (185, 1, u'+        assert(w->pevents == UV__POLLIN);'), (247, 1, u'+    assert(timeout > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(116, 1, u'+    assert(ngx_queue_empty(&loop->watcher_queue));'), (126, 1, u'+    assert(w->pevents != 0);'), (127, 1, u'+    assert(w->fd >= 0);'), (128, 1, u'+    assert(w->fd < (int) loop->nwatchers);'), (145, 1, u'+      assert(op == UV__EPOLL_CTL_ADD);'), (155, 1, u'+  assert(timeout >= -1);'), (172, 1, u'+      assert(timeout != -1);'), (196, 1, u'+      assert(fd >= 0);'), (197, 1, u'+      assert((unsigned) fd < loop->nwatchers);'), (231, 1, u'+    assert(timeout > 0);'), (377, 1, u'+  assert(numcpus != (unsigned int) -1);'), (378, 1, u'+  assert(numcpus != 0);'), (508, 1, u'+  assert(clock_ticks != (unsigned long) -1);'), (509, 1, u'+  assert(clock_ticks != 0);'), (531, 1, u'+      assert(sscanf(buf, "cpu%u ", &n) == 1 && n == num);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(135, 1, u'+      assert(errno == EAGAIN || errno == EWOULDBLOCK);'), (139, 1, u'+    assert(size > 0); /* pre-2.6.21 thing, size=0 == read buffer too small */'), (223, 1, u'+  assert(w != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(101, 1, u'+  assert(ngx_queue_empty(&loop->wq) && "thread pool work queue not empty!");'), (106, 1, u'+  assert(ngx_queue_empty(&loop->pending_queue));'), (107, 1, u'+  assert(ngx_queue_empty(&loop->watcher_queue));'), (108, 1, u'+  assert(loop->nfds == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(100, 1, u'+      assert(pipe_fname != NULL);'), (124, 1, u'+  assert(uv__stream_fd(handle) >= 0);'), (239, 1, u'+  assert(pipe->type == UV_NAMED_PIPE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(75, 1, u'+  assert(!(handle->flags & (UV_CLOSING | UV_CLOSED)));'), (84, 1, u'+  assert((pevents & ~(UV_READABLE | UV_WRITABLE)) == 0);'), (85, 1, u'+  assert(!(handle->flags & (UV_CLOSING | UV_CLOSED)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+  assert(pid > 0);'), (73, 1, u'+  assert(signum == SIGCHLD);'), (200, 1, u'+    assert(container->data.stream != NULL);'), (223, 1, u'+    assert(0 && "Unexpected flags");'), (272, 1, u'+  assert(n == sizeof(val));'), (359, 1, u'+  assert(options.file != NULL);'), (360, 1, u'+  assert(!(options.flags & ~(UV_PROCESS_DETACHED |')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 1, u'+  assert(process_title.len + 1 == size);  /* argv memory should be adjacent. */')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(162, 1, u'+    assert(r == sizeof msg ||'), (281, 1, u'+  assert(!(handle->flags & (UV_CLOSING | UV_CLOSED)));'), (375, 1, u'+        assert(!(handle->flags & UV_CLOSING));'), (425, 1, u'+  assert(!(handle->flags & (UV_CLOSING | UV_CLOSED)));'), (442, 1, u'+  assert(removed_handle == handle);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(205, 1, u'+    assert(events != 0 || FD_ISSET(s->int_fd, &sread));'), (213, 1, u'+      assert((s->events == 0) || (stream->flags & UV_CLOSING));'), (234, 1, u'+  assert(r == 1);'), (251, 1, u'+  assert(events != 0);'), (252, 1, u'+  assert(events == (events & (UV__POLLIN | UV__POLLOUT)));'), (361, 1, u'+  assert(fd >= 0);'), (383, 1, u'+  assert(!uv__io_active(&stream->io_watcher, UV__POLLIN | UV__POLLOUT));'), (384, 1, u'+  assert(stream->flags & UV_CLOSED);'), (480, 1, u'+  assert(events == UV__POLLIN);'), (481, 1, u'+  assert(stream->accepted_fd == -1);'), (482, 1, u'+  assert(!(stream->flags & UV_CLOSING));'), (491, 1, u'+    assert(stream->accepted_fd == -1);'), (546, 1, u'+  assert(server->loop == client->loop);'), (580, 1, u'+      assert(0);'), (606, 1, u'+      assert(0);'), (620, 1, u'+  assert(ngx_queue_empty(&stream->write_queue));'), (621, 1, u'+  assert(stream->write_queue_size == 0);'), (629, 1, u'+    assert(stream->shutdown_req);'), (657, 1, u'+  assert(req->handle->write_queue_size >= size);'), (705, 1, u'+  assert(uv__stream_fd(stream) >= 0);'), (708, 1, u'+    assert(stream->write_queue_size == 0);'), (714, 1, u'+  assert(req->handle == stream);'), (720, 1, u'+  assert(sizeof(uv_buf_t) == sizeof(struct iovec));'), (739, 1, u'+    assert(fd_to_send >= 0);'), (795, 1, u'+      assert(req->write_index < req->bufcnt);'), (819, 1, u'+        assert((size_t)n >= len);'), (822, 1, u'+        assert(stream->write_queue_size >= len);'), (827, 1, u'+          assert(n == 0);'), (837, 1, u'+  assert(n == 0 || n == -1);'), (840, 1, u'+  assert(!(stream->flags & UV_STREAM_BLOCKING));'), (865, 1, u'+  assert(ngx_queue_empty(&stream->write_completed_queue));'), (926, 1, u'+    assert(stream->alloc_cb);'), (929, 1, u'+    assert(buf.len > 0);'), (930, 1, u'+    assert(buf.base);'), (931, 1, u'+    assert(uv__stream_fd(stream) >= 0);'), (939, 1, u'+      assert(stream->read2_cb);'), (978, 1, u'+        assert(!uv__io_active(&stream->io_watcher, UV__POLLIN) &&'), (997, 1, u'+        assert(stream->read2_cb);'), (1047, 1, u'+  assert((stream->type == UV_TCP || stream->type == UV_NAMED_PIPE) &&'), (1049, 1, u'+  assert(uv__stream_fd(stream) >= 0);'), (1077, 1, u'+  assert(stream->type == UV_TCP ||'), (1080, 1, u'+  assert(!(stream->flags & UV_CLOSING));'), (1088, 1, u'+    assert(uv__stream_fd(stream) >= 0);'), (1097, 1, u'+    assert(uv__stream_fd(stream) >= 0);'), (1114, 1, u'+  assert(stream->type == UV_TCP || stream->type == UV_NAMED_PIPE);'), (1115, 1, u'+  assert(req);'), (1126, 1, u'+    assert(uv__stream_fd(stream) >= 0);'), (1155, 1, u'+  assert(bufcnt > 0);'), (1156, 1, u'+  assert((stream->type == UV_TCP ||'), (1217, 1, u'+    assert(!(stream->flags & UV_STREAM_BLOCKING));'), (1238, 1, u'+  assert(stream->type == UV_TCP || stream->type == UV_NAMED_PIPE ||'), (1259, 1, u'+  assert(uv__stream_fd(stream) >= 0);'), (1260, 1, u'+  assert(alloc_cb);'), (1317, 1, u'+  assert(handle->type == UV_TCP ||'), (1363, 1, u'+  assert(!uv__io_active(&handle->io_watcher, UV__POLLIN | UV__POLLOUT));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(106, 1, u'+    assert(ngx_queue_empty(&loop->watcher_queue));'), (116, 1, u'+    assert(w->pevents != 0);'), (124, 1, u'+  assert(timeout >= -1);'), (170, 1, u'+      assert(timeout != -1);'), (180, 1, u'+      assert(fd >= 0);'), (181, 1, u'+      assert((unsigned) fd < loop->nwatchers);'), (207, 1, u'+      assert(timeout != -1);'), (218, 1, u'+    assert(timeout > 0);'), (326, 1, u'+    assert((r == 0) && "unexpected port_get() error");'), (333, 1, u'+    assert(events != 0);'), (508, 1, u'+      assert(knp->data_type == KSTAT_DATA_INT32 ||'), (514, 1, u'+      assert(knp->data_type == KSTAT_DATA_STRING);'), (534, 1, u'+      assert(knp->data_type == KSTAT_DATA_UINT64);'), (538, 1, u'+      assert(knp->data_type == KSTAT_DATA_UINT64);'), (542, 1, u'+      assert(knp->data_type == KSTAT_DATA_UINT64);'), (546, 1, u'+      assert(knp->data_type == KSTAT_DATA_UINT64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(86, 1, u'+  assert(handle->type == UV_TCP);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(59, 1, u'+  assert(!uv__io_active(&handle->io_watcher, UV__POLLIN | UV__POLLOUT));'), (60, 1, u'+  assert(handle->io_watcher.fd == -1);'), (96, 1, u'+    assert(q != NULL);'), (99, 1, u'+    assert(req != NULL);'), (130, 1, u'+      assert(size == nbytes);'), (198, 1, u'+  assert(handle->type == UV_UDP);'), (199, 1, u'+  assert(revents & UV__POLLIN);'), (201, 1, u'+  assert(handle->recv_cb != NULL);'), (202, 1, u'+  assert(handle->alloc_cb != NULL);'), (214, 1, u'+    assert(buf.len > 0);'), (215, 1, u'+    assert(buf.base != NULL);'), (263, 1, u'+  assert(handle->type == UV_UDP);'), (264, 1, u'+  assert(revents & UV__POLLOUT);'), (266, 1, u'+  assert(!ngx_queue_empty(&handle->write_queue)'), (382, 1, u'+  assert(domain == AF_INET || domain == AF_INET6);'), (407, 1, u'+    assert(0 && "unsupported address family");'), (422, 1, u'+  assert(bufcnt > 0);'), (429, 1, u'+  assert(addrlen <= sizeof(req->addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(102, 1, u'+      assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+    assert(!(handle->flags & UV_HANDLE_CLOSED));'), (77, 1, u'+  assert(!(handle->flags & UV__HANDLE_CLOSING));'), (89, 1, u'+  assert(handle->type == UV_ASYNC);'), (90, 1, u'+  assert(req->type == UV_WAKEUP);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+  assert(handle->dir_handle != INVALID_HANDLE_VALUE);'), (64, 1, u'+  assert(!handle->req_pending);'), (295, 1, u'+  assert(req->type == UV_FS_EVENT_REQ);'), (296, 1, u'+  assert(handle->req_pending);'), (312, 1, u'+        assert(!filename);'), (313, 1, u'+        assert(!long_filenamew);'), (477, 1, u'+    assert(!(handle->flags & UV_HANDLE_CLOSED));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(113, 1, u'+  assert(new_path == NULL || path != NULL);'), (173, 1, u'+    assert(r == pathw_len);'), (187, 1, u'+    assert(r == new_pathw_len);'), (198, 1, u'+    assert(path_len == buf_sz - (pos - buf));'), (375, 1, u'+    assert(r == target_len);'), (1421, 1, u'+  assert(req != NULL);'), (1422, 1, u'+  assert(req->type == UV_FS);'), (1452, 1, u'+      assert(!"bad uv_fs_type");'), (1929, 1, u'+  assert(req->cb);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(85, 1, u'+  assert(req != NULL);'), (155, 1, u'+        assert(cur_ptr + addrinfo_struct_len <= alloc_ptr + addrinfo_len);'), (170, 1, u'+          assert(cur_ptr + addrinfo_ptr->ai_addrlen <='), (183, 1, u'+          assert(name_len > 0);'), (184, 1, u'+          assert(cur_ptr + name_len <= alloc_ptr + addrinfo_len);'), (189, 1, u'+          assert(name_len > 0);'), (193, 1, u'+        assert(cur_ptr <= alloc_ptr + addrinfo_len);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 1, u'+    assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+    assert(!(handle->flags & UV_HANDLE_CLOSED));'), (50, 1, u'+    assert(handle->type == UV_##NAME);                                        \\'), (80, 1, u'+    assert(handle->type == UV_##NAME);                                        \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(265, 1, u'+  assert(req);'), (267, 1, u'+  assert(handle);'), (269, 1, u'+  assert(loop);'), (359, 1, u'+    assert(!(handle->flags & UV_HANDLE_CLOSED));'), (380, 1, u'+      assert(handle->accept_reqs);'), (499, 1, u'+  assert(req);'), (501, 1, u'+  assert(handle);'), (503, 1, u'+  assert(loop);'), (576, 1, u'+  assert(pipeHandle != INVALID_HANDLE_VALUE);'), (669, 1, u'+  assert(handle->flags & UV_HANDLE_LISTENING);'), (672, 1, u'+    assert(req->pipeHandle == INVALID_HANDLE_VALUE);'), (696, 1, u'+  assert(req->pipeHandle != INVALID_HANDLE_VALUE);'), (795, 1, u'+  assert(handle->accept_reqs[0].pipeHandle != INVALID_HANDLE_VALUE);'), (812, 1, u'+  assert(req != NULL);'), (813, 1, u'+  assert(req->type == UV_READ);'), (814, 1, u'+  assert(handle->type == UV_NAMED_PIPE);'), (838, 1, u'+  assert(req != NULL);'), (839, 1, u'+  assert(req->type == UV_WRITE);'), (840, 1, u'+  assert(handle->type == UV_NAMED_PIPE);'), (841, 1, u'+  assert(req->write_buffer.base);'), (863, 1, u'+  assert(req != NULL);'), (865, 1, u'+  assert(handle != NULL);'), (866, 1, u'+  assert(!timed_out);'), (882, 1, u'+  assert(req != NULL);'), (884, 1, u'+  assert(handle != NULL);'), (885, 1, u'+  assert(!timed_out);'), (900, 1, u'+  assert(handle->flags & UV_HANDLE_READING);'), (901, 1, u'+  assert(!(handle->flags & UV_HANDLE_READ_PENDING));'), (903, 1, u'+  assert(handle->handle != INVALID_HANDLE_VALUE);'), (1065, 1, u'+  assert(handle->handle != INVALID_HANDLE_VALUE);'), (1077, 1, u'+    assert(!(handle->flags & UV_HANDLE_NON_OVERLAPPED_PIPE));'), (1283, 1, u'+  assert(handle->type == UV_NAMED_PIPE);'), (1318, 1, u'+          assert(avail >= sizeof(ipc_frame.header));'), (1330, 1, u'+          assert(bytes == sizeof(ipc_frame.header));'), (1331, 1, u'+          assert(ipc_frame.header.flags <= (UV_IPC_TCP_SERVER | UV_IPC_RAW_DATA |'), (1335, 1, u'+            assert(avail - sizeof(ipc_frame.header) >='), (1349, 1, u'+            assert(bytes == sizeof(ipc_frame) - sizeof(ipc_frame.header));'), (1352, 1, u'+            assert(!handle->pending_ipc_info.socket_info);'), (1375, 1, u'+      assert(buf.len > 0);'), (1384, 1, u'+          assert(handle->remaining_ipc_rawdata_bytes >= bytes);'), (1425, 1, u'+  assert(handle->type == UV_NAMED_PIPE);'), (1427, 1, u'+  assert(handle->write_queue_size >= req->queued_bytes);'), (1464, 1, u'+    assert(handle->write_reqs_pending > 0);'), (1481, 1, u'+  assert(handle->type == UV_NAMED_PIPE);'), (1484, 1, u'+    assert(req->pipeHandle != INVALID_HANDLE_VALUE);'), (1507, 1, u'+  assert(handle->type == UV_NAMED_PIPE);'), (1527, 1, u'+  assert(handle->type == UV_NAMED_PIPE);'), (1554, 1, u'+  assert(pipe->eof_timer == NULL);'), (1555, 1, u'+  assert(pipe->flags & UV_HANDLE_CONNECTION);'), (1560, 1, u"+  assert(r == 0); /* timers can't fail */"), (1567, 1, u'+  assert(pipe->flags & UV_HANDLE_CONNECTION);'), (1576, 1, u'+  assert(pipe->flags & UV_HANDLE_CONNECTION);'), (1588, 1, u"+  assert(status == 0); /* timers can't fail */"), (1589, 1, u'+  assert(pipe->type == UV_NAMED_PIPE);'), (1596, 1, u'+  assert(pipe->flags & UV_HANDLE_READ_PENDING);'), (1622, 1, u'+  assert(pipe->flags && UV_HANDLE_CONNECTION);'), (1632, 1, u'+  assert(handle->type == UV_TIMER);'), (1651, 1, u'+    assert(!(pipe->flags & UV_HANDLE_NON_OVERLAPPED_PIPE));'), (1653, 1, u'+    assert(pipe->ipc_pid != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(87, 1, u'+    assert(0);'), (161, 1, u'+    assert(0);'), (210, 1, u'+  assert(handle->type == UV_POLL);'), (211, 1, u'+  assert(!(handle->flags & UV__HANDLE_CLOSING));'), (212, 1, u'+  assert((events & ~(UV_READABLE | UV_WRITABLE)) == 0);'), (319, 1, u'+  assert(handle->type == UV_POLL);'), (320, 1, u'+  assert(req->type == UV_POLL_REQ);'), (356, 1, u'+      assert(rfds.fd_count == 1);'), (357, 1, u'+      assert(rfds.fd_array[0] == handle->socket);'), (362, 1, u'+      assert(wfds.fd_count == 1);'), (363, 1, u'+      assert(wfds.fd_array[0] == handle->socket);'), (366, 1, u'+      assert(efds.fd_count == 1);'), (367, 1, u'+      assert(efds.fd_array[0] == handle->socket);'), (395, 1, u'+    assert(0);'), (419, 1, u'+    assert(0);'), (449, 1, u'+  assert(handle->type == UV_POLL);'), (450, 1, u'+  assert(!(handle->flags & UV__HANDLE_CLOSING));'), (451, 1, u'+  assert((events & ~(UV_READABLE | UV_WRITABLE)) == 0);'), (510, 1, u'+    assert(base_socket != 0 && base_socket != INVALID_SOCKET);'), (600, 1, u'+  assert(handle->flags & UV__HANDLE_CLOSING);'), (601, 1, u'+  assert(!(handle->flags & UV_HANDLE_CLOSED));'), (603, 1, u'+  assert(handle->submitted_events_1 == 0);'), (604, 1, u'+  assert(handle->submitted_events_2 == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(152, 1, u'+    assert(r == TRUE);'), (153, 1, u'+    assert(mode == (PIPE_READMODE_BYTE | PIPE_WAIT));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(103, 1, u'+  assert(r == ws_len);'), (702, 1, u'+  assert(didTimeout == FALSE);'), (703, 1, u'+  assert(process);'), (704, 1, u'+  assert(!process->exit_cb_pending);'), (717, 1, u'+  assert(handle->exit_cb_pending);'), (775, 1, u'+  assert(!handle->exit_cb_pending);'), (776, 1, u'+  assert(handle->flags & UV__HANDLE_CLOSING);'), (777, 1, u'+  assert(!(handle->flags & UV_HANDLE_CLOSED));'), (809, 1, u'+  assert(options.file != NULL);'), (810, 1, u'+  assert(!(options.flags & ~(UV_PROCESS_DETACHED |')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(155, 1, u'+  assert(uv__signal_control_handler_refs == 1);'), (159, 1, u'+  assert(r);'), (215, 1, u'+      assert(0 && "Invalid signum");'), (250, 1, u'+  assert(removed_handle == handle);'), (285, 1, u'+    assert(r == 0);'), (314, 1, u'+  assert(handle->type == UV_SIGNAL);'), (315, 1, u'+  assert(req->type == UV_SIGNAL_REQ);'), (318, 1, u'+  assert(dispatched_signum != 0);'), (328, 1, u'+    assert(handle->signum == 0);'), (345, 1, u'+  assert(handle->flags & UV__HANDLE_CLOSING);'), (346, 1, u'+  assert(!(handle->flags & UV_HANDLE_CLOSED));'), (348, 1, u'+  assert(handle->signum == 0);'), (349, 1, u'+  assert(handle->pending_signum == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 1, u'+      assert(0);'), (50, 1, u'+      assert(0);'), (76, 1, u'+      assert(0);'), (98, 1, u'+      assert(0);'), (135, 1, u'+      assert(0);'), (155, 1, u'+      assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(88, 1, u'+  assert(handle->socket == INVALID_SOCKET);'), (144, 1, u'+    assert(!(handle->flags & UV_HANDLE_IPV6));'), (198, 1, u'+    assert(!(handle->flags & UV_HANDLE_CLOSED));'), (310, 1, u'+  assert(req != NULL);'), (312, 1, u'+  assert(handle != NULL);'), (313, 1, u'+  assert(!timed_out);'), (329, 1, u'+  assert(req != NULL);'), (331, 1, u'+  assert(handle != NULL);'), (332, 1, u'+  assert(!timed_out);'), (350, 1, u'+  assert(handle->flags & UV_HANDLE_LISTENING);'), (351, 1, u'+  assert(req->accept_socket == INVALID_SOCKET);'), (434, 1, u'+  assert(handle->flags & UV_HANDLE_READING);'), (435, 1, u'+  assert(!(handle->flags & UV_HANDLE_READ_PENDING));'), (447, 1, u'+    assert(handle->read_buffer.len > 0);'), (458, 1, u'+    assert(req->event_handle);'), (503, 1, u'+  assert(backlog > 0);'), (635, 1, u'+      assert(server->flags & UV_HANDLE_TCP_SINGLE_ACCEPT);'), (912, 1, u'+  assert(handle->type == UV_TCP);'), (969, 1, u'+      assert(buf.len > 0);'), (1033, 1, u'+  assert(handle->type == UV_TCP);'), (1035, 1, u'+  assert(handle->write_queue_size >= req->queued_bytes);'), (1068, 1, u'+  assert(handle->type == UV_TCP);'), (1309, 1, u'+  assert(socket != 0 && socket != INVALID_SOCKET);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(97, 1, u'+    assert(result);'), (105, 1, u'+    assert(result == WAIT_OBJECT_0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+  assert(req != NULL);'), (45, 1, u'+  assert(req->type == UV_WORK);'), (46, 1, u'+  assert(req->work_cb);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(84, 1, u'+    assert(!(handle->flags & UV_HANDLE_CLOSED));'), (120, 1, u'+  assert(old == NULL);'), (172, 1, u'+  assert(handle->type == UV_TIMER);'), (178, 1, u'+  assert(handle->type == UV_TIMER);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(252, 1, u'+  assert(data);'), (253, 1, u'+  assert(!didTimeout);'), (271, 1, u'+  assert(handle->flags & UV_HANDLE_READING);'), (272, 1, u'+  assert(!(handle->flags & UV_HANDLE_READ_PENDING));'), (274, 1, u'+  assert(handle->handle && handle->handle != INVALID_HANDLE_VALUE);'), (304, 1, u'+  assert(data);'), (310, 1, u'+  assert(handle->read_line_buffer.base != NULL);'), (311, 1, u'+  assert(handle->read_line_buffer.len > 0);'), (341, 1, u'+  assert(handle->flags & UV_HANDLE_READING);'), (342, 1, u'+  assert(!(handle->flags & UV_HANDLE_READ_PENDING));'), (343, 1, u'+  assert(handle->handle && handle->handle != INVALID_HANDLE_VALUE);'), (349, 1, u'+  assert(handle->read_line_buffer.base != NULL);'), (350, 1, u'+  assert(handle->read_line_buffer.len > 0);'), (469, 1, u'+  assert(handle->type == UV_TTY);'), (470, 1, u'+  assert(handle->flags & UV_HANDLE_TTY_READABLE);'), (666, 1, u'+        assert(prefix_len + vt100_len < sizeof handle->last_key);'), (727, 1, u'+  assert(handle->type == UV_TTY);'), (728, 1, u'+  assert(handle->flags & UV_HANDLE_TTY_READABLE);'), (772, 1, u'+  assert(handle->type == UV_TTY);'), (773, 1, u'+  assert(handle->flags & UV_HANDLE_TTY_READABLE);'), (1826, 1, u'+    assert(!(handle->flags & UV_HANDLE_TTY_READABLE) ||'), (1831, 1, u'+    assert(!(handle->flags & UV_HANDLE_TTY_READABLE) ||'), (1834, 1, u'+    assert(!(handle->flags & UV_HANDLE_CLOSED));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+  assert(handle->socket == INVALID_SOCKET);'), (134, 1, u'+    assert(!(handle->flags & UV_HANDLE_IPV6));'), (173, 1, u'+    assert(!(handle->flags & UV_HANDLE_CLOSED));'), (261, 1, u'+  assert(handle->flags & UV_HANDLE_READING);'), (262, 1, u'+  assert(!(handle->flags & UV_HANDLE_READ_PENDING));'), (275, 1, u'+    assert(handle->recv_buffer.len > 0);'), (468, 1, u'+  assert(handle->type == UV_UDP);'), (515, 1, u'+    assert(buf.len > 0);'), (570, 1, u'+  assert(handle->type == UV_UDP);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(403, 1, u'+  assert(!process_title);'), (431, 1, u'+  assert(process_title);'), (623, 1, u'+  assert(result_size == sppi_size);'), (639, 1, u'+    assert(len > 0 && len < ARRAY_SIZE(key_name));'), (698, 1, u'+    assert(len > 0);'), (827, 1, u'+        assert(r != ERROR_SUCCESS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 1, u'+  ASSERT(tids != NULL);'), (73, 1, u'+  ASSERT(0 == uv_async_init(uv_default_loop(), &handle, async_cb));'), (77, 1, u'+    ASSERT(0 == uv_thread_create(tids + i, pummel, &handle));'), (81, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (87, 1, u'+    ASSERT(0 == uv_thread_join(tids + i));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+  ASSERT(0 == uv_async_send(&ctx->main_async));'), (58, 1, u'+  ASSERT(0 == uv_async_send(&ctx->worker_async));'), (69, 1, u'+  ASSERT(0 == uv_async_send(&ctx->main_async));'), (70, 1, u'+  ASSERT(0 == uv_run(ctx->loop, UV_RUN_DEFAULT));'), (81, 1, u'+  ASSERT(threads != NULL);'), (87, 1, u'+    ASSERT(ctx->loop != NULL);'), (88, 1, u'+    ASSERT(0 == uv_async_init(ctx->loop, &ctx->worker_async, worker_async_cb));'), (89, 1, u'+    ASSERT(0 == uv_async_init(uv_default_loop(), &ctx->main_async, main_async_cb));'), (90, 1, u'+    ASSERT(0 == uv_thread_create(&ctx->thread, worker, ctx));'), (95, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (98, 1, u'+    ASSERT(0 == uv_thread_join(&threads[i].thread));'), (104, 1, u'+    ASSERT(ctx->worker_sent == NUM_PINGS);'), (105, 1, u'+    ASSERT(ctx->worker_seen == NUM_PINGS);'), (106, 1, u'+    ASSERT(ctx->main_sent == (unsigned int) NUM_PINGS);'), (107, 1, u'+    ASSERT(ctx->main_seen == (unsigned int) NUM_PINGS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+  ASSERT(status == 0);'), (62, 1, u'+  ASSERT(r == 0);'), (83, 1, u'+  ASSERT(calls_initiated == TOTAL_CALLS);'), (84, 1, u'+  ASSERT(calls_completed == TOTAL_CALLS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+  ASSERT(ticks == NUM_TICKS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+  ASSERT(0 == uv_thread_join(&thread_id));'), (89, 1, u'+  ASSERT(container != NULL);'), (95, 1, u'+    ASSERT(0 == uv_async_init(loop, handle, async_cb));'), (99, 1, u'+  ASSERT(0 == uv_timer_init(loop, &timer_handle));'), (100, 1, u'+  ASSERT(0 == uv_timer_start(&timer_handle, timer_cb, timeout, 0));'), (101, 1, u'+  ASSERT(0 == uv_thread_create(&thread_id, thread_cb, NULL));'), (102, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 1, u'+  ASSERT(timers != NULL);'), (57, 1, u'+    ASSERT(0 == uv_timer_init(loop, timers + i));'), (58, 1, u'+    ASSERT(0 == uv_timer_start(timers + i, timer_cb, timeout, 0));'), (62, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (68, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (69, 1, u'+  ASSERT(timer_cb_called == NUM_TIMERS);'), (70, 1, u'+  ASSERT(close_cb_called == NUM_TIMERS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(114, 1, u'+  ASSERT(pc != NULL);'), (117, 1, u'+    ASSERT(0 == uv_tcp_init(loop, (uv_tcp_t*) &pc->peer_handle));'), (119, 1, u'+    ASSERT(0 == uv_pipe_init(loop, (uv_pipe_t*) &pc->peer_handle, 1));'), (121, 1, u'+    ASSERT(0);'), (123, 1, u'+  ASSERT(0 == uv_accept(ipc_pipe, (uv_stream_t*) &pc->peer_handle));'), (124, 1, u'+  ASSERT(0 == uv_write2(&pc->write_req,'), (153, 1, u'+  ASSERT(0 == status);'), (154, 1, u'+  ASSERT(0 == uv_read2_start((uv_stream_t*) &ctx->ipc_pipe,'), (178, 1, u'+    ASSERT(0 == uv_tcp_init(loop, (uv_tcp_t*) ctx->server_handle));'), (180, 1, u'+    ASSERT(0 == uv_pipe_init(loop, (uv_pipe_t*) ctx->server_handle, 0));'), (182, 1, u'+    ASSERT(0);'), (184, 1, u'+  ASSERT(0 == uv_accept((uv_stream_t*) &ctx->ipc_pipe, ctx->server_handle));'), (204, 1, u'+    ASSERT(0 == uv_tcp_init(loop, (uv_tcp_t*) &ctx.server_handle));'), (205, 1, u'+    ASSERT(0 == uv_tcp_bind((uv_tcp_t*) &ctx.server_handle, listen_addr));'), (208, 1, u'+    ASSERT(0);'), (210, 1, u'+  ASSERT(0 == uv_pipe_init(loop, &ctx.ipc_pipe, 1));'), (211, 1, u'+  ASSERT(0 == uv_pipe_bind(&ctx.ipc_pipe, IPC_PIPE_NAME));'), (212, 1, u'+  ASSERT(0 == uv_listen((uv_stream_t*) &ctx.ipc_pipe, 128, ipc_connection_cb));'), (217, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (219, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (232, 1, u'+  ASSERT(0 == uv_pipe_init(loop, &ctx.ipc_pipe, 1));'), (237, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (247, 1, u'+  ASSERT(loop != NULL);'), (249, 1, u'+  ASSERT(0 == uv_async_init(loop, &ctx->async_handle, sv_async_cb));'), (258, 1, u'+  ASSERT(0 == uv_listen((uv_stream_t*) &ctx->server_handle,'), (261, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (280, 1, u'+  ASSERT(status == 0);'), (283, 1, u'+  ASSERT(storage != NULL);'), (286, 1, u'+    ASSERT(0 == uv_tcp_init(server_handle->loop, (uv_tcp_t*) storage));'), (288, 1, u'+    ASSERT(0 == uv_pipe_init(server_handle->loop, (uv_pipe_t*) storage, 0));'), (290, 1, u'+    ASSERT(0);'), (292, 1, u'+  ASSERT(0 == uv_accept(server_handle, (uv_stream_t*) storage));'), (293, 1, u'+  ASSERT(0 == uv_read_start((uv_stream_t*) storage, sv_alloc_cb, sv_read_cb));'), (305, 1, u'+  ASSERT(nread == -1);'), (306, 1, u'+  ASSERT(uv_last_error(handle->loop).code == UV_EOF);'), (314, 1, u'+  ASSERT(0 == status);'), (335, 1, u'+  ASSERT(0 == uv_tcp_init(handle->loop, (uv_tcp_t*) &ctx->client_handle));'), (336, 1, u'+  ASSERT(0 == uv_tcp_connect(&ctx->connect_req,'), (356, 1, u'+  ASSERT(servers != NULL);'), (357, 1, u'+  ASSERT(clients != NULL);'), (365, 1, u'+    ASSERT(0 == uv_sem_init(&ctx->semaphore, 0));'), (366, 1, u'+    ASSERT(0 == uv_thread_create(&ctx->thread_id, server_cb, ctx));'), (376, 1, u'+    ASSERT(0 == uv_tcp_init(loop, handle));'), (377, 1, u'+    ASSERT(0 == uv_tcp_connect(&ctx->connect_req,'), (381, 1, u'+    ASSERT(0 == uv_idle_init(loop, &ctx->idle_handle));'), (386, 1, u'+    ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (394, 1, u'+    ASSERT(0 == uv_thread_join(&ctx->thread_id));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(95, 1, u'+  ASSERT(status == 0);'), (115, 1, u'+  ASSERT(status == 0);'), (122, 1, u'+  ASSERT(completed_pingers == 0);'), (133, 1, u'+    ASSERT(uv_last_error(loop).code == UV_EOF);'), (139, 1, u'+    ASSERT(pinger_shutdown_cb_called == 1);'), (147, 1, u'+    ASSERT(buf.base[i] == PING[pinger->state]);'), (167, 1, u'+  ASSERT(status == 0);'), (189, 1, u'+  ASSERT(!r);'), (196, 1, u'+  ASSERT(!r);'), (208, 1, u'+  ASSERT(completed_pingers == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(119, 1, u'+  ASSERT(req != NULL);'), (120, 1, u'+  ASSERT(status == 0);'), (123, 1, u'+  ASSERT(conn != NULL);'), (130, 1, u'+  ASSERT(r == 0);'), (136, 1, u'+  ASSERT(r == 0);'), (143, 1, u'+  ASSERT(stream != NULL);'), (158, 1, u'+      ASSERT(0);'), (167, 1, u'+  ASSERT(handle != NULL);'), (203, 1, u'+  ASSERT(r == 0);'), (211, 1, u'+    ASSERT(0);'), (228, 1, u'+  ASSERT(r == 0);'), (288, 1, u'+  ASSERT(!r);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(152, 1, u'+  ASSERT(r == 0);'), (154, 1, u'+  ASSERT(r == 0);'), (163, 1, u'+    ASSERT(start_time == 0);'), (181, 1, u'+  ASSERT(status == 0);'), (202, 1, u'+  ASSERT(r == 0);'), (210, 1, u'+  ASSERT(status == 0);'), (240, 1, u'+      ASSERT(r == 0);'), (244, 1, u'+      ASSERT(r == 0);'), (249, 1, u'+      ASSERT(r == 0);'), (262, 1, u'+  ASSERT(server == s);'), (263, 1, u'+  ASSERT(status == 0);'), (268, 1, u'+    ASSERT(r == 0);'), (272, 1, u'+    ASSERT(r == 0);'), (276, 1, u'+  ASSERT(r == 0);'), (279, 1, u'+  ASSERT(r == 0);'), (370, 1, u'+  ASSERT(r == 0);'), (372, 1, u'+  ASSERT(r == 0);'), (374, 1, u'+  ASSERT(r == 0);'), (391, 1, u'+  ASSERT(r == 0);'), (393, 1, u'+  ASSERT(r == 0);'), (395, 1, u'+  ASSERT(r == 0);'), (405, 1, u'+  ASSERT(n <= MAX_WRITE_HANDLES);'), (423, 1, u'+  ASSERT(n <= MAX_WRITE_HANDLES);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(61, 1, u'+  ASSERT(process_open == 1);'), (68, 1, u'+  ASSERT(exit_status == 42);'), (69, 1, u'+  ASSERT(term_signal == 0);'), (83, 1, u'+  ASSERT(pipe_open == 1);'), (93, 1, u'+    ASSERT(pipe_open == 1);'), (107, 1, u'+  ASSERT(process_open == 0);'), (108, 1, u'+  ASSERT(pipe_open == 0);'), (126, 1, u'+  ASSERT(r == 0);'), (133, 1, u'+  ASSERT(r == 0);'), (144, 1, u'+  ASSERT(r == 0);'), (153, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 1, u'+  ASSERT(req->handle == (uv_stream_t*)&tcp_client);'), (63, 1, u'+    ASSERT(r == 0);'), (67, 1, u'+  ASSERT(r == 0);'), (74, 1, u'+  ASSERT(req != NULL);'), (75, 1, u'+  ASSERT(status == 0);'), (81, 1, u'+  ASSERT(req->handle == (uv_stream_t*)&tcp_client);'), (82, 1, u'+  ASSERT(req->handle->write_queue_size == 0);'), (92, 1, u'+  ASSERT(handle == (uv_handle_t*)&tcp_client);'), (106, 1, u'+  ASSERT(write_reqs != NULL);'), (118, 1, u'+  ASSERT(r == 0);'), (121, 1, u'+  ASSERT(r == 0);'), (126, 1, u'+  ASSERT(r == 0);'), (130, 1, u'+  ASSERT(connect_cb_called == 1);'), (131, 1, u'+  ASSERT(write_cb_called == NUM_WRITE_REQS);'), (132, 1, u'+  ASSERT(shutdown_cb_called == 1);'), (133, 1, u'+  ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+  ASSERT(arg == (void *) 42);'), (50, 1, u'+    ASSERT(r == 0);'), (53, 1, u'+    ASSERT(r == 0);'), (58, 1, u'+  ASSERT(num_threads == NUM_THREADS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+  ASSERT(suggested_size <= sizeof slab);'), (72, 1, u'+  ASSERT(req != NULL);'), (75, 1, u'+    ASSERT(status == -1);'), (76, 1, u'+    ASSERT(uv_last_error(req->handle->loop).code == UV_ECANCELED);'), (84, 1, u'+  ASSERT(req->handle == &s->udp_handle);'), (97, 1, u'+  ASSERT(0 == uv_udp_send(&s->send_req,'), (116, 1, u'+    ASSERT(uv_last_error(handle->loop).code == UV_ECANCELED);'), (120, 1, u'+  ASSERT(addr->sa_family == AF_INET);'), (121, 1, u'+  ASSERT(!memcmp(buf.base, EXPECTED, nread));'), (128, 1, u'+  ASSERT(handle != NULL);'), (154, 1, u'+  ASSERT(n_senders <= ARRAY_SIZE(senders));'), (155, 1, u'+  ASSERT(n_receivers <= ARRAY_SIZE(receivers));'), (163, 1, u'+    ASSERT(0 == uv_timer_init(loop, &timer_handle));'), (164, 1, u'+    ASSERT(0 == uv_timer_start(&timer_handle, timeout_cb, timeout, 0));'), (173, 1, u'+    ASSERT(0 == uv_udp_init(loop, &s->udp_handle));'), (174, 1, u'+    ASSERT(0 == uv_udp_bind(&s->udp_handle, addr, 0));'), (175, 1, u'+    ASSERT(0 == uv_udp_recv_start(&s->udp_handle, alloc_cb, recv_cb));'), (188, 1, u'+    ASSERT(0 == uv_udp_init(loop, &s->udp_handle));'), (189, 1, u'+    ASSERT(0 == uv_udp_send(&s->send_req,'), (198, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+  ASSERT(status == 0);'), (47, 1, u'+  ASSERT(stream == (uv_stream_t*)&tcp_server);'), (50, 1, u'+  ASSERT(conn != NULL);'), (53, 1, u'+  ASSERT(r == 0);'), (56, 1, u'+  ASSERT(r == 0);'), (59, 1, u'+  ASSERT(r == 0);'), (76, 1, u'+  ASSERT(uv_last_error(stream->loop).code == UV_EOF);'), (81, 1, u'+  ASSERT(r == 0);'), (106, 1, u'+  ASSERT(r == 0);'), (109, 1, u'+  ASSERT(r == 0);'), (112, 1, u'+  ASSERT(r == 0);'), (115, 1, u'+  ASSERT(0 && "Blackhole server dropped out of event loop.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(86, 1, u'+    ASSERT(0);'), (110, 1, u'+  ASSERT (rsplen + wr->buf.len < WRITE_BUF_LEN);'), (232, 1, u'+    ASSERT (uv_last_error(loop).code == UV_EOF);'), (271, 1, u'+  ASSERT(status == 0);'), (274, 1, u'+  ASSERT(handle != NULL);'), (282, 1, u'+  ASSERT(r == 0);'), (285, 1, u'+  ASSERT(r == 0);'), (288, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(66, 1, u'+  ASSERT(err.code == UV_EPIPE);'), (84, 1, u'+    ASSERT (uv_last_error(loop).code == UV_EOF);'), (148, 1, u'+  ASSERT(status == 0);'), (153, 1, u'+    ASSERT(stream != NULL);'), (155, 1, u'+    ASSERT(r == 0);'), (160, 1, u'+    ASSERT(stream != NULL);'), (162, 1, u'+    ASSERT(r == 0);'), (166, 1, u'+    ASSERT(0 && "Bad serverType");'), (174, 1, u'+  ASSERT(r == 0);'), (177, 1, u'+  ASSERT(r == 0);'), (182, 1, u'+  ASSERT(handle == server);'), (197, 1, u'+  ASSERT(nread > 0);'), (198, 1, u'+  ASSERT(addr->sa_family == AF_INET);'), (201, 1, u'+  ASSERT(req != NULL);'), (204, 1, u'+  ASSERT(r == 0);'), (209, 1, u'+  ASSERT(status == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(103, 1, u'+    ASSERT(buffer == fgets(buffer, sizeof(buffer) - 1, stdin));'), (137, 1, u'+    ASSERT(r > 0);'), (140, 1, u'+    ASSERT(r > 0);'), (150, 1, u'+    ASSERT(test != NULL);'), (153, 1, u'+    ASSERT(r > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 1, u'+  _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_DEBUG);'), (180, 1, u'+  ASSERT(n <= MAXIMUM_WAIT_OBJECTS);'), (259, 1, u'+  ASSERT(buffer_len > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 1, u'+  ASSERT(handle != NULL);'), (39, 1, u'+  ASSERT(0 && "timer_cb should not have been called");'), (48, 1, u'+  ASSERT(r == 0);'), (50, 1, u'+  ASSERT(!uv_is_active((uv_handle_t*) &timer));'), (51, 1, u'+  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (54, 1, u'+  ASSERT(r == 0);'), (56, 1, u'+  ASSERT(uv_is_active((uv_handle_t*) &timer));'), (57, 1, u'+  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (60, 1, u'+  ASSERT(r == 0);'), (62, 1, u'+  ASSERT(!uv_is_active((uv_handle_t*) &timer));'), (63, 1, u'+  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (66, 1, u'+  ASSERT(r == 0);'), (68, 1, u'+  ASSERT(uv_is_active((uv_handle_t*) &timer));'), (69, 1, u'+  ASSERT(!uv_is_closing((uv_handle_t*) &timer));'), (73, 1, u'+  ASSERT(!uv_is_active((uv_handle_t*) &timer));'), (74, 1, u'+  ASSERT(uv_is_closing((uv_handle_t*) &timer));'), (77, 1, u'+  ASSERT(r == 0);'), (79, 1, u'+  ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+    ASSERT(r == 0);'), (73, 1, u'+  ASSERT(handle != NULL);'), (81, 1, u'+  ASSERT(handle == &async);'), (82, 1, u'+  ASSERT(status == 0);'), (98, 1, u'+  ASSERT(handle == &prepare);'), (99, 1, u'+  ASSERT(status == 0);'), (105, 1, u'+  ASSERT(r == 0);'), (114, 1, u'+  ASSERT(r == 0);'), (118, 1, u'+  ASSERT(r == 0);'), (120, 1, u'+  ASSERT(r == 0);'), (123, 1, u'+  ASSERT(r == 0);'), (126, 1, u'+  ASSERT(r == 0);'), (128, 1, u'+  ASSERT(prepare_cb_called > 0);'), (129, 1, u'+  ASSERT(async_cb_called == 3);'), (130, 1, u'+  ASSERT(close_cb_called == 2);'), (132, 1, u'+  ASSERT(0 == uv_thread_join(&thread));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(51, 1, u'+  ASSERT(0 == uv_barrier_init(&wc.barrier, 2));'), (52, 1, u'+  ASSERT(0 == uv_thread_create(&thread, worker, &wc));'), (57, 1, u'+  ASSERT(0 == uv_thread_join(&thread));'), (71, 1, u'+  ASSERT(0 == uv_barrier_init(&wc.barrier, 2));'), (72, 1, u'+  ASSERT(0 == uv_thread_create(&thread, worker, &wc));'), (76, 1, u'+  ASSERT(0 == uv_thread_join(&thread));'), (89, 1, u'+  ASSERT(0 == uv_barrier_init(&wc.barrier, 2));'), (90, 1, u'+  ASSERT(0 == uv_thread_create(&thread, worker, &wc));'), (94, 1, u'+  ASSERT(0 == uv_thread_join(&thread));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+  ASSERT(idle_cb_called == 0);'), (35, 1, u'+  ASSERT(timer_cb_called == 0);'), (42, 1, u'+  ASSERT(idle_cb_called == 1);'), (43, 1, u'+  ASSERT(timer_cb_called == 0);'), (67, 1, u'+  ASSERT(idle_cb_called == 0);'), (68, 1, u'+  ASSERT(timer_cb_called == 0);'), (72, 1, u'+  ASSERT(idle_cb_called == 1);'), (73, 1, u'+  ASSERT(timer_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+  ASSERT(buf.base);'), (58, 1, u'+  ASSERT(nested == 0 && "close_cb must be called from a fresh stack");'), (65, 1, u'+  ASSERT(status == 0);'), (66, 1, u'+  ASSERT(nested == 0 && "shutdown_cb must be called from a fresh stack");'), (73, 1, u'+  ASSERT(nested == 0 && "read_cb must be called from a fresh stack");'), (79, 1, u'+    ASSERT(uv_last_error(uv_default_loop()).code == UV_EAGAIN);'), (83, 1, u'+    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (112, 1, u'+  ASSERT(handle == &timer);'), (113, 1, u'+  ASSERT(status == 0);'), (114, 1, u'+  ASSERT(nested == 0 && "timer_cb must be called from a fresh stack");'), (133, 1, u'+  ASSERT(status == 0);'), (134, 1, u'+  ASSERT(nested == 0 && "write_cb must be called from a fresh stack");'), (144, 1, u'+  ASSERT(r == 0);'), (146, 1, u'+  ASSERT(r == 0);'), (158, 1, u'+  ASSERT(status == 0);'), (159, 1, u'+  ASSERT(nested == 0 && "connect_cb must be called from a fresh stack");'), (194, 1, u'+  ASSERT(nested == 0);'), (195, 1, u'+  ASSERT(connect_cb_called == 1 && "connect_cb must be called exactly once");'), (196, 1, u'+  ASSERT(write_cb_called == 1 && "write_cb must be called exactly once");'), (197, 1, u'+  ASSERT(timer_cb_called == 1 && "timer_cb must be called exactly once");'), (198, 1, u'+  ASSERT(bytes_received == sizeof MESSAGE);'), (199, 1, u'+  ASSERT(shutdown_cb_called == 1 && "shutdown_cb must be called exactly once");'), (200, 1, u'+  ASSERT(close_cb_called == 2 && "close_cb must be called exactly twice");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+  ASSERT(c->posted == 0);'), (60, 1, u'+  ASSERT(0 == uv_cond_init(&wc.cond));'), (61, 1, u'+  ASSERT(0 == uv_mutex_init(&wc.mutex));'), (62, 1, u'+  ASSERT(0 == uv_thread_create(&thread, worker, &wc));'), (67, 1, u'+  ASSERT(wc.posted == 1);'), (70, 1, u'+  ASSERT(0 == uv_thread_join(&thread));'), (85, 1, u'+  ASSERT(0 == uv_cond_init(&wc.cond));'), (86, 1, u'+  ASSERT(0 == uv_mutex_init(&wc.mutex));'), (87, 1, u'+  ASSERT(0 == uv_thread_create(&thread, worker, &wc));'), (93, 1, u'+  ASSERT(0 == uv_thread_join(&thread));'), (109, 1, u'+  ASSERT(0 == uv_cond_init(&wc.cond));'), (110, 1, u'+  ASSERT(0 == uv_mutex_init(&wc.mutex));'), (111, 1, u'+  ASSERT(0 == uv_thread_create(&thread, worker, &wc));'), (115, 1, u'+  ASSERT(r == -1);'), (118, 1, u'+  ASSERT(0 == uv_thread_join(&thread));'), (134, 1, u'+  ASSERT(0 == uv_cond_init(&wc.cond));'), (135, 1, u'+  ASSERT(0 == uv_mutex_init(&wc.mutex));'), (136, 1, u'+  ASSERT(0 == uv_thread_create(&thread, worker, &wc));'), (140, 1, u'+  ASSERT(r == 0);'), (143, 1, u'+  ASSERT(0 == uv_thread_join(&thread));'), (158, 1, u'+  ASSERT(0 == uv_cond_init(&wc.cond));'), (159, 1, u'+  ASSERT(0 == uv_mutex_init(&wc.mutex));'), (160, 1, u'+  ASSERT(0 == uv_thread_create(&thread, worker, &wc));'), (165, 1, u'+  ASSERT(wc.posted == 1);'), (168, 1, u'+  ASSERT(0 == uv_thread_join(&thread));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 1, u'+  ASSERT(status == 0);'), (58, 1, u'+  ASSERT(close_cb_calls == 0);'), (59, 1, u'+  ASSERT(connect_cb_calls == 1);'), (70, 1, u'+  ASSERT((uv_stream_t*) &tcp == req->handle);'), (71, 1, u'+  ASSERT(status == -1);'), (72, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_ECONNREFUSED);'), (75, 1, u'+  ASSERT(close_cb_calls == 0);'), (81, 1, u'+  ASSERT(status == -1);'), (82, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_ECONNREFUSED);'), (87, 1, u'+  ASSERT(close_cb_calls == 0);'), (102, 1, u'+  ASSERT(!r);'), (108, 1, u'+  ASSERT(!r);'), (112, 1, u'+  ASSERT(connect_cb_calls == 1);'), (113, 1, u'+  ASSERT(close_cb_calls == 1);'), (124, 1, u'+  ASSERT(timer_close_cb_calls == 0);'), (125, 1, u'+  ASSERT(timer_cb_calls == 0);'), (141, 1, u'+  ASSERT(r == 0);'), (145, 1, u'+  ASSERT(timer_close_cb_calls == 1);'), (146, 1, u'+  ASSERT(timer_cb_calls == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+  ASSERT(err.code == UV_OK);'), (43, 1, u'+  ASSERT(last_slash);'), (49, 1, u'+  ASSERT(last_slash);'), (56, 1, u'+  ASSERT(err.code == UV_OK);'), (59, 1, u'+  ASSERT(err.code == UV_OK);'), (61, 1, u'+  ASSERT(strcmp(buffer_orig, buffer_new) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+  ASSERT(handle != NULL);'), (55, 1, u'+  ASSERT(timer_handle != NULL);'), (56, 1, u'+  ASSERT(status == 0);'), (57, 1, u'+  ASSERT(accepted_handle != NULL);'), (60, 1, u'+  ASSERT(r == 0);'), (64, 1, u'+  ASSERT(r == 0);'), (85, 1, u'+  ASSERT(status == 0);'), (88, 1, u'+  ASSERT(timer_handle != NULL);'), (92, 1, u'+  ASSERT(r == 0);'), (97, 1, u'+  ASSERT(r == 0);'), (108, 1, u'+  ASSERT(server != NULL);'), (111, 1, u'+  ASSERT(r == 0);'), (113, 1, u'+  ASSERT(r == 0);'), (116, 1, u'+  ASSERT(r == 0);'), (128, 1, u'+    ASSERT(nread == 0);'), (129, 1, u'+    ASSERT(uv_last_error(uv_default_loop()).code == UV_EAGAIN);'), (131, 1, u'+    ASSERT(tcp != NULL);'), (132, 1, u'+    ASSERT(nread == -1);'), (133, 1, u'+    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (142, 1, u'+  ASSERT(req != NULL);'), (143, 1, u'+  ASSERT(status == 0);'), (148, 1, u'+  ASSERT(r == 0);'), (162, 1, u'+  ASSERT(client != NULL);'), (163, 1, u'+  ASSERT(connect_req != NULL);'), (166, 1, u'+  ASSERT(r == 0);'), (169, 1, u'+  ASSERT(r == 0);'), (182, 1, u'+  ASSERT(connection_cb_called == 2);'), (183, 1, u'+  ASSERT(do_accept_called == 2);'), (184, 1, u'+  ASSERT(connect_cb_called == 2);'), (185, 1, u'+  ASSERT(close_cb_called == 7);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+  ASSERT(r == -1);'), (47, 1, u'+  ASSERT(msg != NULL);'), (48, 1, u'+  ASSERT(strstr(msg, dlerror_desc) != NULL);'), (52, 1, u'+  ASSERT(msg != NULL);'), (53, 1, u'+  ASSERT(strstr(msg, dlerror_desc) != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(111, 1, u'+  ASSERT(external != NULL);'), (132, 1, u'+  ASSERT(embed_timer_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 1, u'+  ASSERT(strstr(uv_strerror(e), "Success") == NULL);'), (53, 1, u'+  ASSERT(strcmp(uv_strerror(e), "Unknown error") == 0);'), (56, 1, u'+  ASSERT(strcmp(uv_strerror(e), "Unknown error") == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+  ASSERT(r == 0 || uv_last_error(loop).code == UV_EEXIST);'), (60, 1, u'+  ASSERT(r != -1);'), (64, 1, u'+  ASSERT(r == 0);'), (74, 1, u'+  ASSERT(r != -1);'), (79, 1, u'+  ASSERT(r != -1);'), (83, 1, u'+  ASSERT(r != -1);'), (88, 1, u'+  ASSERT(handle != NULL);'), (96, 1, u'+  ASSERT(0 && "fail_cb called");'), (102, 1, u'+  ASSERT(handle == &fs_event);'), (103, 1, u'+  ASSERT(status == 0);'), (104, 1, u'+  ASSERT(events == UV_RENAME);'), (105, 1, u'+  ASSERT(filename == NULL || strcmp(filename, "file1") == 0);'), (112, 1, u'+  ASSERT(handle == &fs_event);'), (113, 1, u'+  ASSERT(status == 0);'), (114, 1, u'+  ASSERT(events == UV_CHANGE);'), (115, 1, u'+  ASSERT(filename == NULL || strcmp(filename, "file2") == 0);'), (122, 1, u'+  ASSERT(timer != NULL);'), (123, 1, u'+  ASSERT(status == 0);'), (132, 1, u'+  ASSERT(fs_event_cb_called == 0);'), (135, 1, u'+  ASSERT(handle == &fs_event);'), (136, 1, u'+  ASSERT(status == 0);'), (137, 1, u'+  ASSERT(events == UV_CHANGE);'), (138, 1, u'+  ASSERT(filename == NULL || strcmp(filename, "watch_file") == 0);'), (167, 1, u'+  ASSERT(status == 0);'), (191, 1, u'+  ASSERT(r != -1);'), (193, 1, u'+  ASSERT(r != -1);'), (195, 1, u'+  ASSERT(r != -1);'), (199, 1, u'+  ASSERT(fs_event_cb_called == 1);'), (200, 1, u'+  ASSERT(timer_cb_called == 1);'), (201, 1, u'+  ASSERT(close_cb_called == 2);'), (225, 1, u'+  ASSERT(r != -1);'), (227, 1, u'+  ASSERT(r != -1);'), (229, 1, u'+  ASSERT(r != -1);'), (233, 1, u'+  ASSERT(fs_event_cb_called == 1);'), (234, 1, u'+  ASSERT(timer_cb_called == 2);'), (235, 1, u'+  ASSERT(close_cb_called == 2);'), (255, 1, u'+  ASSERT(0 == uv_fs_event_init(loop, watchers + 0, path, fail_cb, 0));'), (256, 1, u'+  ASSERT(0 == uv_fs_event_init(loop, watchers + 1, path, fail_cb, 0));'), (257, 1, u'+  ASSERT(0 == uv_timer_init(loop, &timer));'), (258, 1, u'+  ASSERT(0 == uv_timer_start(&timer, timer_cb_watch_twice, 10, 0));'), (259, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (278, 1, u'+  ASSERT(r != -1);'), (281, 1, u'+  ASSERT(r == 0);'), (284, 1, u'+  ASSERT(r == 0);'), (286, 1, u'+  ASSERT(timer_cb_touch_called == 0);'), (287, 1, u'+  ASSERT(fs_event_cb_called == 0);'), (288, 1, u'+  ASSERT(close_cb_called == 0);'), (292, 1, u'+  ASSERT(timer_cb_touch_called == 1);'), (293, 1, u'+  ASSERT(fs_event_cb_called == 1);'), (294, 1, u'+  ASSERT(close_cb_called == 1);'), (318, 1, u'+  ASSERT(r != -1);'), (324, 1, u'+  ASSERT(fs_event_cb_called == 0);'), (325, 1, u'+  ASSERT(close_cb_called == 1);'), (350, 1, u'+  ASSERT(r != -1);'), (356, 1, u'+  ASSERT(fs_event_cb_called == 0);'), (357, 1, u'+  ASSERT(close_cb_called == 1);'), (370, 1, u'+  ASSERT(0 && "should never be called");'), (377, 1, u'+  ASSERT(status == 0);'), (380, 1, u'+  ASSERT(r == 0);'), (395, 1, u'+  ASSERT(r == 0);'), (398, 1, u'+  ASSERT(r == 0);'), (402, 1, u'+  ASSERT(close_cb_called == 2);'), (419, 1, u'+  ASSERT(r == 0);'), (428, 1, u'+  ASSERT(close_cb_called == 1);'), (453, 1, u'+  ASSERT(status == 0);'), (455, 1, u'+  ASSERT(fs_event_cb_called < 3);'), (478, 1, u'+  ASSERT(r == 0);'), (489, 1, u'+  ASSERT(close_cb_called == 1);'), (490, 1, u'+  ASSERT(fs_event_cb_called == 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 1, u'+  ASSERT((fp = fopen(FIXTURE, "w+")));'), (83, 1, u'+  ASSERT(handle == &poll_handle);'), (84, 1, u'+  ASSERT(uv_is_active((uv_handle_t*)handle));'), (85, 1, u'+  ASSERT(prev != NULL);'), (86, 1, u'+  ASSERT(curr != NULL);'), (90, 1, u'+    ASSERT(status == -1);'), (91, 1, u'+    ASSERT(uv_last_error(loop).code == UV_ENOENT);'), (92, 1, u'+    ASSERT(0 == memcmp(prev, &zero_statbuf, sizeof(zero_statbuf)));'), (93, 1, u'+    ASSERT(0 == memcmp(curr, &zero_statbuf, sizeof(zero_statbuf)));'), (98, 1, u'+    ASSERT(status == 0);'), (99, 1, u'+    ASSERT(0 == memcmp(prev, &zero_statbuf, sizeof(zero_statbuf)));'), (100, 1, u'+    ASSERT(0 != memcmp(curr, &zero_statbuf, sizeof(zero_statbuf)));'), (101, 1, u'+    ASSERT(0 == uv_timer_start(&timer_handle, timer_cb, 20, 0));'), (105, 1, u'+    ASSERT(status == 0);'), (106, 1, u'+    ASSERT(0 != memcmp(prev, &zero_statbuf, sizeof(zero_statbuf)));'), (107, 1, u'+    ASSERT(0 != memcmp(curr, &zero_statbuf, sizeof(zero_statbuf)));'), (108, 1, u'+    ASSERT(0 == uv_timer_start(&timer_handle, timer_cb, 200, 0));'), (112, 1, u'+    ASSERT(status == 0);'), (113, 1, u'+    ASSERT(0 != memcmp(prev, &zero_statbuf, sizeof(zero_statbuf)));'), (114, 1, u'+    ASSERT(0 != memcmp(curr, &zero_statbuf, sizeof(zero_statbuf)));'), (119, 1, u'+    ASSERT(status == -1);'), (120, 1, u'+    ASSERT(0 != memcmp(prev, &zero_statbuf, sizeof(zero_statbuf)));'), (121, 1, u'+    ASSERT(0 == memcmp(curr, &zero_statbuf, sizeof(zero_statbuf)));'), (122, 1, u'+    ASSERT(uv_last_error(loop).code == UV_ENOENT);'), (127, 1, u'+    ASSERT(0);'), (137, 1, u'+  ASSERT(0 == uv_timer_init(loop, &timer_handle));'), (138, 1, u'+  ASSERT(0 == uv_fs_poll_init(loop, &poll_handle));'), (139, 1, u'+  ASSERT(0 == uv_fs_poll_start(&poll_handle, poll_cb, FIXTURE, 100));'), (140, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (142, 1, u'+  ASSERT(poll_cb_called == 5);'), (143, 1, u'+  ASSERT(timer_cb_called == 2);'), (144, 1, u'+  ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(113, 1, u'+  ASSERT(r == 0);'), (114, 1, u'+  ASSERT(req.result == 0);'), (122, 1, u'+  ASSERT((s->st_mode & 0777) & mode);'), (124, 1, u'+  ASSERT((s->st_mode & 0777) == mode);'), (138, 1, u'+  ASSERT(req->fs_type == UV_FS_LINK);'), (139, 1, u'+  ASSERT(req->result == 0);'), (146, 1, u'+  ASSERT(req->fs_type == UV_FS_SYMLINK);'), (147, 1, u'+  ASSERT(req->result == 0);'), (153, 1, u'+  ASSERT(req->fs_type == UV_FS_READLINK);'), (154, 1, u'+  ASSERT(req->result == 0);'), (155, 1, u'+  ASSERT(strcmp(req->ptr, "test_file_symlink2") == 0);'), (161, 1, u'+  ASSERT(req->fs_type == UV_FS_FCHMOD);'), (162, 1, u'+  ASSERT(req->result == 0);'), (170, 1, u'+  ASSERT(req->fs_type == UV_FS_CHMOD);'), (171, 1, u'+  ASSERT(req->result == 0);'), (179, 1, u'+  ASSERT(req->fs_type == UV_FS_FCHOWN);'), (180, 1, u'+  ASSERT(req->result == 0);'), (187, 1, u'+  ASSERT(req->fs_type == UV_FS_CHOWN);'), (188, 1, u'+  ASSERT(req->result == 0);'), (194, 1, u'+  ASSERT(req->fs_type == UV_FS_CHOWN);'), (197, 1, u'+  ASSERT(req->result == 0);'), (200, 1, u'+  ASSERT(req->result == -1);'), (201, 1, u'+  ASSERT(req->errorno == UV_EPERM);'), (208, 1, u'+  ASSERT(req == &unlink_req);'), (209, 1, u'+  ASSERT(req->fs_type == UV_FS_UNLINK);'), (210, 1, u'+  ASSERT(req->result != -1);'), (217, 1, u'+  ASSERT(req->fs_type == UV_FS_FSTAT);'), (218, 1, u'+  ASSERT(req->result == 0);'), (219, 1, u'+  ASSERT(s->st_size == sizeof(test_buf));'), (227, 1, u'+  ASSERT(req == &close_req);'), (228, 1, u'+  ASSERT(req->fs_type == UV_FS_CLOSE);'), (229, 1, u'+  ASSERT(req->result != -1);'), (234, 1, u'+    ASSERT(r == 0);'), (241, 1, u'+  ASSERT(req == &ftruncate_req);'), (242, 1, u'+  ASSERT(req->fs_type == UV_FS_FTRUNCATE);'), (243, 1, u'+  ASSERT(req->result != -1);'), (247, 1, u'+  ASSERT(r == 0);'), (253, 1, u'+  ASSERT(req == &read_req);'), (254, 1, u'+  ASSERT(req->fs_type == UV_FS_READ);'), (255, 1, u'+  ASSERT(req->result != -1);'), (259, 1, u'+    ASSERT(strcmp(buf, test_buf) == 0);'), (263, 1, u'+    ASSERT(strcmp(buf, "test-bu") == 0);'), (266, 1, u'+  ASSERT(r == 0);'), (272, 1, u'+  ASSERT(req == &open_req1);'), (273, 1, u'+  ASSERT(req->fs_type == UV_FS_OPEN);'), (277, 1, u'+    ASSERT(0);'), (280, 1, u'+  ASSERT(req->path);'), (281, 1, u'+  ASSERT(memcmp(req->path, "test_file2\\0", 11) == 0);'), (286, 1, u'+  ASSERT(r == 0);'), (291, 1, u'+  ASSERT(req->fs_type == UV_FS_OPEN);'), (295, 1, u'+    ASSERT(0);'), (298, 1, u'+  ASSERT(req->path);'), (305, 1, u'+  ASSERT(req == &fsync_req);'), (306, 1, u'+  ASSERT(req->fs_type == UV_FS_FSYNC);'), (307, 1, u'+  ASSERT(req->result != -1);'), (311, 1, u'+  ASSERT(r == 0);'), (317, 1, u'+  ASSERT(req == &fdatasync_req);'), (318, 1, u'+  ASSERT(req->fs_type == UV_FS_FDATASYNC);'), (319, 1, u'+  ASSERT(req->result != -1);'), (323, 1, u'+  ASSERT(r == 0);'), (329, 1, u'+  ASSERT(req == &write_req);'), (330, 1, u'+  ASSERT(req->fs_type == UV_FS_WRITE);'), (331, 1, u'+  ASSERT(req->result != -1);'), (335, 1, u'+  ASSERT(r == 0);'), (341, 1, u'+  ASSERT(req == &open_req1);'), (342, 1, u'+  ASSERT(req->fs_type == UV_FS_OPEN);'), (343, 1, u'+  ASSERT(req->result != -1);'), (348, 1, u'+  ASSERT(r == 0);'), (353, 1, u'+  ASSERT(req == &rename_req);'), (354, 1, u'+  ASSERT(req->fs_type == UV_FS_RENAME);'), (355, 1, u'+  ASSERT(req->result != -1);'), (362, 1, u'+  ASSERT(req == &mkdir_req);'), (363, 1, u'+  ASSERT(req->fs_type == UV_FS_MKDIR);'), (364, 1, u'+  ASSERT(req->result != -1);'), (366, 1, u'+  ASSERT(req->path);'), (367, 1, u'+  ASSERT(memcmp(req->path, "test_dir\\0", 9) == 0);'), (373, 1, u'+  ASSERT(req == &rmdir_req);'), (374, 1, u'+  ASSERT(req->fs_type == UV_FS_RMDIR);'), (375, 1, u'+  ASSERT(req->result != -1);'), (377, 1, u'+  ASSERT(req->path);'), (378, 1, u'+  ASSERT(memcmp(req->path, "test_dir\\0", 9) == 0);'), (384, 1, u'+  ASSERT(req == &readdir_req);'), (385, 1, u'+  ASSERT(req->fs_type == UV_FS_READDIR);'), (386, 1, u'+  ASSERT(req->result == 2);'), (387, 1, u'+  ASSERT(req->ptr);'), (388, 1, u'+  ASSERT(memcmp(req->ptr, "file1\\0file2\\0", 12) == 0'), (391, 1, u'+  ASSERT(req->path);'), (392, 1, u'+  ASSERT(memcmp(req->path, "test_dir\\0", 9) == 0);'), (394, 1, u'+  ASSERT(!req->ptr);'), (399, 1, u'+  ASSERT(req == &readdir_req);'), (400, 1, u'+  ASSERT(req->fs_type == UV_FS_READDIR);'), (401, 1, u'+  ASSERT(req->result == 0);'), (402, 1, u'+  ASSERT(req->ptr == NULL);'), (409, 1, u'+  ASSERT(req == &readdir_req);'), (410, 1, u'+  ASSERT(req->fs_type == UV_FS_READDIR);'), (411, 1, u'+  ASSERT(req->result == -1);'), (412, 1, u'+  ASSERT(req->ptr == NULL);'), (413, 1, u'+  ASSERT(uv_last_error(req->loop).code == UV_ENOTDIR);'), (420, 1, u'+  ASSERT(req == &stat_req);'), (421, 1, u'+  ASSERT(req->fs_type == UV_FS_STAT || req->fs_type == UV_FS_LSTAT);'), (422, 1, u'+  ASSERT(req->result != -1);'), (423, 1, u'+  ASSERT(req->ptr);'), (426, 1, u'+  ASSERT(!req->ptr);'), (431, 1, u'+  ASSERT(req == &sendfile_req);'), (432, 1, u'+  ASSERT(req->fs_type == UV_FS_SENDFILE);'), (433, 1, u'+  ASSERT(req->result == 65546);'), (440, 1, u'+  ASSERT(req->fs_type == UV_FS_OPEN);'), (441, 1, u'+  ASSERT(req->errorno == UV_ENOENT);'), (442, 1, u'+  ASSERT(req->result == -1);'), (448, 1, u'+  ASSERT(req->fs_type == UV_FS_OPEN);'), (449, 1, u'+  ASSERT(req->errorno == UV_ENAMETOOLONG);'), (450, 1, u'+  ASSERT(req->result == -1);'), (456, 1, u'+  ASSERT(req->fs_type == UV_FS_OPEN);'), (457, 1, u'+  ASSERT(req->errorno == UV_ELOOP);'), (458, 1, u'+  ASSERT(req->result == -1);'), (471, 1, u'+  ASSERT(r == -1);'), (472, 1, u'+  ASSERT(req.result == -1);'), (473, 1, u'+  ASSERT(uv_last_error(loop).code == UV_ENOENT);'), (477, 1, u'+  ASSERT(r == 0);'), (479, 1, u'+  ASSERT(open_cb_count == 0);'), (481, 1, u'+  ASSERT(open_cb_count == 1);'), (500, 1, u'+  ASSERT(r == -1);'), (501, 1, u'+  ASSERT(req.result == -1);'), (502, 1, u'+  ASSERT(uv_last_error(loop).code == UV_ENAMETOOLONG);'), (506, 1, u'+  ASSERT(r == 0);'), (508, 1, u'+  ASSERT(open_cb_count == 0);'), (510, 1, u'+  ASSERT(open_cb_count == 1);'), (527, 1, u'+  ASSERT(r == -1);'), (528, 1, u'+  ASSERT(req.result == -1);'), (529, 1, u'+  ASSERT(uv_last_error(loop).code == UV_ELOOP);'), (533, 1, u'+  ASSERT(r == 0);'), (535, 1, u'+  ASSERT(open_cb_count == 0);'), (537, 1, u'+  ASSERT(open_cb_count == 1);'), (551, 1, u'+  ASSERT(r == 0);'), (553, 1, u'+  ASSERT(req.result == 0);'), (557, 1, u'+  ASSERT(s->st_atime == atime);'), (558, 1, u'+  ASSERT(s->st_mtime == mtime);'), (560, 1, u'+  ASSERT(s->st_atimespec.tv_sec  == atime);'), (561, 1, u'+  ASSERT(s->st_mtimespec.tv_sec  == mtime);'), (563, 1, u'+  ASSERT(s->st_atim.tv_sec  == atime);'), (564, 1, u'+  ASSERT(s->st_mtim.tv_sec  == mtime);'), (574, 1, u'+  ASSERT(req == &utime_req);'), (575, 1, u'+  ASSERT(req->result == 0);'), (576, 1, u'+  ASSERT(req->fs_type == UV_FS_UTIME);'), (589, 1, u'+  ASSERT(req == &futime_req);'), (590, 1, u'+  ASSERT(req->result == 0);'), (591, 1, u'+  ASSERT(req->fs_type == UV_FS_FUTIME);'), (612, 1, u'+  ASSERT(r == 0);'), (615, 1, u'+  ASSERT(create_cb_count == 1);'), (616, 1, u'+  ASSERT(write_cb_count == 1);'), (617, 1, u'+  ASSERT(fsync_cb_count == 1);'), (618, 1, u'+  ASSERT(fdatasync_cb_count == 1);'), (619, 1, u'+  ASSERT(close_cb_count == 1);'), (622, 1, u'+  ASSERT(r == 0);'), (625, 1, u'+  ASSERT(create_cb_count == 1);'), (626, 1, u'+  ASSERT(write_cb_count == 1);'), (627, 1, u'+  ASSERT(close_cb_count == 1);'), (628, 1, u'+  ASSERT(rename_cb_count == 1);'), (631, 1, u'+  ASSERT(r == 0);'), (634, 1, u'+  ASSERT(open_cb_count == 1);'), (635, 1, u'+  ASSERT(read_cb_count == 1);'), (636, 1, u'+  ASSERT(close_cb_count == 2);'), (637, 1, u'+  ASSERT(rename_cb_count == 1);'), (638, 1, u'+  ASSERT(create_cb_count == 1);'), (639, 1, u'+  ASSERT(write_cb_count == 1);'), (640, 1, u'+  ASSERT(ftruncate_cb_count == 1);'), (643, 1, u'+  ASSERT(r == 0);'), (646, 1, u'+  ASSERT(open_cb_count == 2);'), (647, 1, u'+  ASSERT(read_cb_count == 2);'), (648, 1, u'+  ASSERT(close_cb_count == 3);'), (649, 1, u'+  ASSERT(rename_cb_count == 1);'), (650, 1, u'+  ASSERT(unlink_cb_count == 1);'), (651, 1, u'+  ASSERT(create_cb_count == 1);'), (652, 1, u'+  ASSERT(write_cb_count == 1);'), (653, 1, u'+  ASSERT(ftruncate_cb_count == 1);'), (675, 1, u'+  ASSERT(r != -1);'), (676, 1, u'+  ASSERT(open_req1.result != -1);'), (681, 1, u'+  ASSERT(r != -1);'), (682, 1, u'+  ASSERT(write_req.result != -1);'), (686, 1, u'+  ASSERT(r != -1);'), (687, 1, u'+  ASSERT(close_req.result != -1);'), (691, 1, u'+  ASSERT(r != -1);'), (692, 1, u'+  ASSERT(open_req1.result != -1);'), (697, 1, u'+  ASSERT(r != -1);'), (698, 1, u'+  ASSERT(read_req.result != -1);'), (699, 1, u'+  ASSERT(strcmp(buf, test_buf) == 0);'), (703, 1, u'+  ASSERT(r != -1);'), (704, 1, u'+  ASSERT(ftruncate_req.result != -1);'), (708, 1, u'+  ASSERT(r != -1);'), (709, 1, u'+  ASSERT(close_req.result != -1);'), (713, 1, u'+  ASSERT(r != -1);'), (714, 1, u'+  ASSERT(rename_req.result != -1);'), (718, 1, u'+  ASSERT(r != -1);'), (719, 1, u'+  ASSERT(open_req1.result != -1);'), (725, 1, u'+  ASSERT(r != -1);'), (726, 1, u'+  ASSERT(read_req.result != -1);'), (727, 1, u'+  ASSERT(strcmp(buf, "test-bu") == 0);'), (731, 1, u'+  ASSERT(r != -1);'), (732, 1, u'+  ASSERT(close_req.result != -1);'), (736, 1, u'+  ASSERT(r != -1);'), (737, 1, u'+  ASSERT(unlink_req.result != -1);'), (760, 1, u'+  ASSERT(r == 0);'), (763, 1, u'+  ASSERT(mkdir_cb_count == 1);'), (768, 1, u'+  ASSERT(r != -1);'), (771, 1, u'+  ASSERT(r == 0);'), (776, 1, u'+  ASSERT(r != -1);'), (779, 1, u'+  ASSERT(r == 0);'), (783, 1, u'+  ASSERT(r == 0);'), (786, 1, u'+  ASSERT(readdir_cb_count == 1);'), (790, 1, u'+  ASSERT(r == 2);'), (791, 1, u'+  ASSERT(readdir_req.result == 2);'), (792, 1, u'+  ASSERT(readdir_req.ptr);'), (793, 1, u'+  ASSERT(memcmp(readdir_req.ptr, "file1\\0file2\\0", 12) == 0'), (796, 1, u'+  ASSERT(!readdir_req.ptr);'), (799, 1, u'+  ASSERT(r == 0);'), (803, 1, u'+  ASSERT(r == 0);'), (807, 1, u'+  ASSERT(r == 0);'), (811, 1, u'+  ASSERT(r == 0);'), (814, 1, u'+  ASSERT(stat_cb_count == 4);'), (817, 1, u'+  ASSERT(r == 0);'), (819, 1, u'+  ASSERT(unlink_cb_count == 1);'), (822, 1, u'+  ASSERT(r == 0);'), (824, 1, u'+  ASSERT(unlink_cb_count == 2);'), (827, 1, u'+  ASSERT(r == 0);'), (829, 1, u'+  ASSERT(rmdir_cb_count == 1);'), (852, 1, u'+  ASSERT(f != -1);'), (855, 1, u'+  ASSERT(r == 6);'), (858, 1, u'+  ASSERT(r == 65542);'), (861, 1, u'+  ASSERT(r != -1);'), (864, 1, u'+  ASSERT(r == 0);'), (868, 1, u'+  ASSERT(r != -1);'), (869, 1, u'+  ASSERT(open_req1.result != -1);'), (874, 1, u'+  ASSERT(r != -1);'), (875, 1, u'+  ASSERT(open_req2.result != -1);'), (880, 1, u'+  ASSERT(r == 0);'), (883, 1, u'+  ASSERT(sendfile_cb_count == 1);'), (886, 1, u'+  ASSERT(r == 0);'), (889, 1, u'+  ASSERT(r == 0);'), (894, 1, u'+  ASSERT(65546 == s2.st_size && s1.st_size == s2.st_size);'), (918, 1, u'+  ASSERT(r != -1);'), (919, 1, u'+  ASSERT(req.result != -1);'), (924, 1, u'+  ASSERT(r == sizeof(test_buf));'), (925, 1, u'+  ASSERT(req.result == sizeof(test_buf));'), (929, 1, u'+  ASSERT(r == 0);'), (930, 1, u'+  ASSERT(req.result == 0);'), (932, 1, u'+  ASSERT(s->st_size == sizeof(test_buf));'), (937, 1, u'+  ASSERT(r == 0);'), (939, 1, u'+  ASSERT(fstat_cb_count == 1);'), (943, 1, u'+  ASSERT(r == 0);'), (944, 1, u'+  ASSERT(req.result == 0);'), (973, 1, u'+  ASSERT(r != -1);'), (974, 1, u'+  ASSERT(req.result != -1);'), (979, 1, u'+  ASSERT(r == sizeof(test_buf));'), (980, 1, u'+  ASSERT(req.result == sizeof(test_buf));'), (986, 1, u'+  ASSERT(r == 0);'), (987, 1, u'+  ASSERT(req.result == 0);'), (995, 1, u'+  ASSERT(r == 0);'), (996, 1, u'+  ASSERT(req.result == 0);'), (1003, 1, u'+  ASSERT(r == 0);'), (1004, 1, u'+  ASSERT(req.result == 0);'), (1016, 1, u'+  ASSERT(r == 0);'), (1018, 1, u'+  ASSERT(chmod_cb_count == 1);'), (1028, 1, u'+  ASSERT(r == 0);'), (1030, 1, u'+  ASSERT(chmod_cb_count == 1);'), (1038, 1, u'+  ASSERT(r == 0);'), (1040, 1, u'+  ASSERT(fchmod_cb_count == 1);'), (1070, 1, u'+  ASSERT(r != -1);'), (1071, 1, u'+  ASSERT(req.result != -1);'), (1077, 1, u'+  ASSERT(r == 0);'), (1078, 1, u'+  ASSERT(req.result == 0);'), (1083, 1, u'+  ASSERT(r == 0);'), (1084, 1, u'+  ASSERT(req.result == 0);'), (1089, 1, u'+  ASSERT(r == 0);'), (1091, 1, u'+  ASSERT(chown_cb_count == 1);'), (1097, 1, u'+  ASSERT(chown_cb_count == 1);'), (1101, 1, u'+  ASSERT(r == 0);'), (1103, 1, u'+  ASSERT(fchown_cb_count == 1);'), (1136, 1, u'+  ASSERT(r != -1);'), (1137, 1, u'+  ASSERT(req.result != -1);'), (1142, 1, u'+  ASSERT(r == sizeof(test_buf));'), (1143, 1, u'+  ASSERT(req.result == sizeof(test_buf));'), (1150, 1, u'+  ASSERT(r == 0);'), (1151, 1, u'+  ASSERT(req.result == 0);'), (1155, 1, u'+  ASSERT(r != -1);'), (1156, 1, u'+  ASSERT(req.result != -1);'), (1162, 1, u'+  ASSERT(r != -1);'), (1163, 1, u'+  ASSERT(req.result != -1);'), (1164, 1, u'+  ASSERT(strcmp(buf, test_buf) == 0);'), (1170, 1, u'+  ASSERT(r == 0);'), (1172, 1, u'+  ASSERT(link_cb_count == 1);'), (1175, 1, u'+  ASSERT(r != -1);'), (1176, 1, u'+  ASSERT(req.result != -1);'), (1182, 1, u'+  ASSERT(r != -1);'), (1183, 1, u'+  ASSERT(req.result != -1);'), (1184, 1, u'+  ASSERT(strcmp(buf, test_buf) == 0);'), (1208, 1, u'+  ASSERT(0 == uv_fs_readlink(loop, &req, "no_such_file", dummy_cb));'), (1209, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (1210, 1, u'+  ASSERT(dummy_cb_count == 1);'), (1211, 1, u'+  ASSERT(req.ptr == NULL);'), (1212, 1, u'+  ASSERT(req.result == -1);'), (1213, 1, u'+  ASSERT(req.errorno == UV_ENOENT);'), (1216, 1, u'+  ASSERT(-1 == uv_fs_readlink(loop, &req, "no_such_file", NULL));'), (1217, 1, u'+  ASSERT(req.ptr == NULL);'), (1218, 1, u'+  ASSERT(req.result == -1);'), (1219, 1, u'+  ASSERT(req.errorno == UV_ENOENT);'), (1244, 1, u'+  ASSERT(r != -1);'), (1245, 1, u'+  ASSERT(req.result != -1);'), (1250, 1, u'+  ASSERT(r == sizeof(test_buf));'), (1251, 1, u'+  ASSERT(req.result == sizeof(test_buf));'), (1275, 1, u'+  ASSERT(r == 0);'), (1276, 1, u'+  ASSERT(req.result == 0);'), (1280, 1, u'+  ASSERT(r != -1);'), (1281, 1, u'+  ASSERT(req.result != -1);'), (1287, 1, u'+  ASSERT(r != -1);'), (1288, 1, u'+  ASSERT(req.result != -1);'), (1289, 1, u'+  ASSERT(strcmp(buf, test_buf) == 0);'), (1294, 1, u'+  ASSERT(r != -1);'), (1298, 1, u'+  ASSERT(r != -1);'), (1299, 1, u'+  ASSERT(strcmp(req.ptr, "test_file_symlink") == 0);'), (1304, 1, u'+  ASSERT(r == 0);'), (1306, 1, u'+  ASSERT(symlink_cb_count == 1);'), (1309, 1, u'+  ASSERT(r != -1);'), (1310, 1, u'+  ASSERT(req.result != -1);'), (1316, 1, u'+  ASSERT(r != -1);'), (1317, 1, u'+  ASSERT(req.result != -1);'), (1318, 1, u'+  ASSERT(strcmp(buf, test_buf) == 0);'), (1323, 1, u'+  ASSERT(r != -1);'), (1327, 1, u'+  ASSERT(r != -1);'), (1329, 1, u'+  ASSERT(readlink_cb_count == 1);'), (1379, 1, u'+  ASSERT(r == 0);'), (1380, 1, u'+  ASSERT(req.result == 0);'), (1384, 1, u'+  ASSERT(r == 0);'), (1385, 1, u'+  ASSERT(((struct stat*)req.ptr)->st_mode & S_IFDIR);'), (1389, 1, u'+  ASSERT(r == 0);'), (1390, 1, u'+  ASSERT(((struct stat*)req.ptr)->st_mode & S_IFLNK);'), (1392, 1, u'+  ASSERT(((struct stat*)req.ptr)->st_size == strlen(test_dir + 4));'), (1394, 1, u'+  ASSERT(((struct stat*)req.ptr)->st_size == strlen(test_dir));'), (1399, 1, u'+  ASSERT(r == 0);'), (1401, 1, u'+  ASSERT(strcmp(req.ptr, test_dir + 4) == 0);'), (1403, 1, u'+  ASSERT(strcmp(req.ptr, test_dir) == 0);'), (1409, 1, u'+  ASSERT(r != -1);'), (1412, 1, u'+  ASSERT(r == 0);'), (1417, 1, u'+  ASSERT(r != -1);'), (1420, 1, u'+  ASSERT(r == 0);'), (1424, 1, u'+  ASSERT(r == 2);'), (1425, 1, u'+  ASSERT(readdir_req.result == 2);'), (1426, 1, u'+  ASSERT(readdir_req.ptr);'), (1427, 1, u'+  ASSERT(memcmp(readdir_req.ptr, "file1\\0file2\\0", 12) == 0'), (1430, 1, u'+  ASSERT(!readdir_req.ptr);'), (1434, 1, u'+  ASSERT(r == 0);'), (1438, 1, u'+  ASSERT(r == -1);'), (1442, 1, u'+  ASSERT(r == 2);'), (1443, 1, u'+  ASSERT(readdir_req.result == 2);'), (1444, 1, u'+  ASSERT(readdir_req.ptr);'), (1445, 1, u'+  ASSERT(memcmp(readdir_req.ptr, "file1\\0file2\\0", 12) == 0'), (1448, 1, u'+  ASSERT(!readdir_req.ptr);'), (1474, 1, u'+  ASSERT(r != -1);'), (1475, 1, u'+  ASSERT(req.result != -1);'), (1482, 1, u'+  ASSERT(r == 0);'), (1483, 1, u'+  ASSERT(req.result == 0);'), (1487, 1, u'+  ASSERT(r == 0);'), (1488, 1, u'+  ASSERT(req.result == 0);'), (1500, 1, u'+  ASSERT(r == 0);'), (1502, 1, u'+  ASSERT(utime_cb_count == 1);'), (1518, 1, u'+  ASSERT(r == 0);'), (1521, 1, u'+  ASSERT(r == 0);'), (1524, 1, u'+  ASSERT(r == 0);'), (1527, 1, u'+  ASSERT(r == 0);'), (1531, 1, u'+  ASSERT(r == 0);'), (1534, 1, u'+  ASSERT(r == 0);'), (1537, 1, u'+  ASSERT(r == 0);'), (1559, 1, u'+  ASSERT(r != -1);'), (1560, 1, u'+  ASSERT(req.result != -1);'), (1567, 1, u'+  ASSERT(r != -1);'), (1568, 1, u'+  ASSERT(req.result != -1);'), (1573, 1, u'+  ASSERT(r == 0);'), (1574, 1, u'+  ASSERT(req.result == 0);'), (1578, 1, u'+  ASSERT(r == 0);'), (1579, 1, u'+  ASSERT(req.result == 0);'), (1592, 1, u'+  ASSERT(r == 0);'), (1594, 1, u'+  ASSERT(futime_cb_count == 1);'), (1611, 1, u'+  ASSERT(r == -1);'), (1612, 1, u'+  ASSERT(req.result == -1);'), (1613, 1, u'+  ASSERT(uv_last_error(loop).code == UV_ENOENT);'), (1633, 1, u'+  ASSERT(r == 0);'), (1634, 1, u'+  ASSERT(req.result == 0);'), (1635, 1, u'+  ASSERT(req.ptr == NULL);'), (1639, 1, u'+  ASSERT(r == 0);'), (1641, 1, u'+  ASSERT(readdir_cb_count == 0);'), (1643, 1, u'+  ASSERT(readdir_cb_count == 1);'), (1661, 1, u'+  ASSERT(r == -1);'), (1662, 1, u'+  ASSERT(uv_last_error(loop).code == UV_ENOTDIR);'), (1666, 1, u'+  ASSERT(r == 0);'), (1668, 1, u'+  ASSERT(readdir_cb_count == 0);'), (1670, 1, u'+  ASSERT(readdir_cb_count == 1);'), (1686, 1, u'+  ASSERT(r != -1);'), (1687, 1, u'+  ASSERT(req.result != -1);'), (1688, 1, u'+  ASSERT(req.ptr == NULL);'), (1693, 1, u'+  ASSERT(r == 0);'), (1696, 1, u'+  ASSERT(r == 0);'), (1698, 1, u'+  ASSERT(open_cb_count == 0);'), (1700, 1, u'+  ASSERT(open_cb_count == 1);'), (1717, 1, u'+  ASSERT(r != -1);'), (1718, 1, u'+  ASSERT(open_req1.result != -1);'), (1723, 1, u'+  ASSERT(r != -1);'), (1724, 1, u'+  ASSERT(write_req.result != -1);'), (1728, 1, u'+  ASSERT(r != -1);'), (1729, 1, u'+  ASSERT(close_req.result != -1);'), (1733, 1, u'+  ASSERT(r != -1);'), (1734, 1, u'+  ASSERT(open_req1.result != -1);'), (1739, 1, u'+  ASSERT(r != -1);'), (1740, 1, u'+  ASSERT(write_req.result != -1);'), (1744, 1, u'+  ASSERT(r != -1);'), (1745, 1, u'+  ASSERT(close_req.result != -1);'), (1749, 1, u'+  ASSERT(r != -1);'), (1750, 1, u'+  ASSERT(open_req1.result != -1);'), (1756, 1, u'+  ASSERT(r == 26);'), (1757, 1, u'+  ASSERT(read_req.result == 26);'), (1758, 1, u'+  ASSERT(memcmp(buf,'), (1764, 1, u'+  ASSERT(r != -1);'), (1765, 1, u'+  ASSERT(close_req.result != -1);'), (1787, 1, u'+  ASSERT(r != -1);'), (1788, 1, u'+  ASSERT(open_req1.result != -1);'), (1793, 1, u'+  ASSERT(r != -1);'), (1794, 1, u'+  ASSERT(write_req.result != -1);'), (1798, 1, u'+  ASSERT(r != -1);'), (1799, 1, u'+  ASSERT(close_req.result != -1);'), (1804, 1, u'+  ASSERT(r != -1);'), (1805, 1, u'+  ASSERT(open_req1.result != -1);'), (1809, 1, u'+  ASSERT(r != -1);'), (1810, 1, u'+  ASSERT(close_req.result != -1);'), (1814, 1, u'+  ASSERT(r != -1);'), (1815, 1, u'+  ASSERT(rename_req.result != -1);'), (1819, 1, u'+  ASSERT(r != -1);'), (1820, 1, u'+  ASSERT(open_req1.result != -1);'), (1826, 1, u'+  ASSERT(r != -1);'), (1827, 1, u'+  ASSERT(read_req.result != -1);'), (1828, 1, u'+  ASSERT(strcmp(buf, test_buf) == 0);'), (1832, 1, u'+  ASSERT(r != -1);'), (1833, 1, u'+  ASSERT(close_req.result != -1);'), (1855, 1, u'+  ASSERT(r != -1);'), (1856, 1, u'+  ASSERT(open_req1.result != -1);'), (1861, 1, u'+  ASSERT(r != -1);'), (1862, 1, u'+  ASSERT(write_req.result != -1);'), (1866, 1, u'+  ASSERT(r != -1);'), (1867, 1, u'+  ASSERT(close_req.result != -1);'), (1871, 1, u'+  ASSERT(r != -1);'), (1872, 1, u'+  ASSERT(open_req1.result != -1);'), (1878, 1, u'+  ASSERT(r != -1);'), (1879, 1, u'+  ASSERT(read_req.result != -1);'), (1880, 1, u'+  ASSERT(strcmp(buf, test_buf) == 0);'), (1885, 1, u'+  ASSERT(r == 0);'), (1886, 1, u'+  ASSERT(read_req.result == 0);'), (1890, 1, u'+  ASSERT(r != -1);'), (1891, 1, u'+  ASSERT(close_req.result != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+  ASSERT(!r);'), (51, 1, u'+  ASSERT(match && !strcmp(match, path));'), (52, 1, u'+  ASSERT(size == strlen(buffer));'), (57, 1, u'+  ASSERT(r == -1);'), (60, 1, u'+  ASSERT(r == -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+  ASSERT(avg != NULL);'), (31, 1, u'+  ASSERT(avg[0] >= 0);'), (32, 1, u'+  ASSERT(avg[1] >= 0);'), (33, 1, u'+  ASSERT(avg[2] >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 1, u'+  ASSERT(free_mem > 0);'), (34, 1, u'+  ASSERT(total_mem > 0);'), (35, 1, u'+  ASSERT(total_mem > free_mem);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+  ASSERT(handle == getaddrinfo_handle);'), (56, 1, u'+      ASSERT(i == *data);'), (62, 1, u'+  ASSERT (i < CONCURRENT_COUNT);'), (81, 1, u'+  ASSERT(r == 0);'), (85, 1, u'+  ASSERT(getaddrinfo_cbs == 1);'), (109, 1, u'+    ASSERT(r == 0);'), (115, 1, u'+    ASSERT(callback_counts[i] == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(75, 1, u'+  ASSERT(r == 0);'), (87, 1, u'+  ASSERT(check_addr.sin_family == AF_INET);'), (88, 1, u'+  ASSERT(compare_addr.sin_family == AF_INET);'), (91, 1, u'+  ASSERT(memcmp(&check_addr.sin_addr,'), (96, 1, u'+  ASSERT(compare_port == 0 || check_addr.sin_port == compare_addr.sin_port);'), (99, 1, u'+  ASSERT(r == 0);'), (115, 1, u'+  ASSERT(status == 0);'), (118, 1, u'+  ASSERT(handle != NULL);'), (121, 1, u'+  ASSERT(r == 0);'), (127, 1, u'+  ASSERT(r == 0);'), (131, 1, u'+  ASSERT(r == 0);'), (137, 1, u'+  ASSERT(r == 0);'), (142, 1, u'+  ASSERT(r == 0);'), (150, 1, u'+  ASSERT(status == 0);'), (154, 1, u'+  ASSERT(r == 0);'), (160, 1, u'+  ASSERT(r == 0);'), (195, 1, u'+  ASSERT(r == 0);'), (201, 1, u'+  ASSERT(r == -1);'), (202, 1, u'+  ASSERT(uv_last_error(loop).code == UV_ENOTCONN);'), (216, 1, u'+  ASSERT(!r);'), (219, 1, u'+  ASSERT(!r);'), (224, 1, u'+  ASSERT(!r);'), (225, 1, u'+  ASSERT(sockname.sa_family == AF_INET);'), (227, 1, u'+  ASSERT(connect_port > 0);'), (240, 1, u'+  ASSERT(nread >= 0);'), (250, 1, u'+  ASSERT(r == 0);'), (285, 1, u'+  ASSERT(r == 0);'), (290, 1, u'+  ASSERT(r == 0);'), (302, 1, u'+  ASSERT(!r);'), (308, 1, u'+  ASSERT(!r);'), (322, 1, u'+  ASSERT(getsocknamecount == 3);'), (323, 1, u'+  ASSERT(getpeernamecount == 3);'), (340, 1, u'+  ASSERT(getsocknamecount == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+    ASSERT(diff > (uint64_t) 25 * NANOSEC / MILLISEC);'), (50, 1, u'+    ASSERT(diff < (uint64_t) 80 * NANOSEC / MILLISEC);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+  ASSERT(handle == &timer_handle);'), (41, 1, u'+  ASSERT(status == 0);'), (52, 1, u'+  ASSERT(handle == &idle_handle);'), (53, 1, u'+  ASSERT(status == 0);'), (64, 1, u'+  ASSERT(r == 0);'), (66, 1, u'+  ASSERT(r == 0);'), (69, 1, u'+  ASSERT(r == 0);'), (71, 1, u'+  ASSERT(r == 0);'), (74, 1, u'+  ASSERT(r == 0);'), (76, 1, u'+  ASSERT(idle_cb_called > 0);'), (77, 1, u'+  ASSERT(timer_cb_called == 1);'), (78, 1, u'+  ASSERT(close_cb_called == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(66, 1, u'+  ASSERT(pending == ctx.expected_type);'), (67, 1, u'+  ASSERT(handle == &ctx.channel);'), (68, 1, u'+  ASSERT(nread >= 0);'), (76, 1, u'+  ASSERT(r == 0);'), (79, 1, u'+  ASSERT(r == 0);'), (101, 1, u'+  ASSERT(r == 0);'), (104, 1, u'+  ASSERT(r == 0);'), (107, 1, u'+  ASSERT(r == 0);'), (109, 1, u'+  ASSERT(num_recv_handles == 1);'), (121, 1, u'+  ASSERT(r == 0);'), (124, 1, u'+  ASSERT(r == 0);'), (127, 1, u'+  ASSERT(r == 0);'), (140, 1, u'+  ASSERT(r == 0);'), (143, 1, u'+  ASSERT(r == 0);'), (146, 1, u'+  ASSERT(r == 0);'), (156, 1, u'+  ASSERT(status == 0);'), (168, 1, u'+  ASSERT(pending == UV_NAMED_PIPE || pending == UV_TCP);'), (169, 1, u'+  ASSERT(handle == &ctx.channel);'), (170, 1, u'+  ASSERT(nread >= 0);'), (180, 1, u'+  ASSERT(r == 0);'), (183, 1, u'+  ASSERT(r == 0);'), (190, 1, u'+  ASSERT(r == 0);'), (203, 1, u'+  ASSERT(r == 0);'), (206, 1, u'+  ASSERT(uv_is_readable((uv_stream_t*)&ctx.channel));'), (207, 1, u'+  ASSERT(uv_is_writable((uv_stream_t*)&ctx.channel));'), (208, 1, u'+  ASSERT(!uv_is_closing((uv_handle_t*)&ctx.channel));'), (211, 1, u'+  ASSERT(r == 0);'), (214, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 1, u'+    ASSERT(status == 0);'), (70, 1, u'+    ASSERT((uv_stream_t*)&tcp_server == server);'), (73, 1, u'+    ASSERT(conn);'), (75, 1, u'+    ASSERT(r == 0);'), (78, 1, u'+    ASSERT(r == 0);'), (90, 1, u'+  ASSERT(exit_status == 0);'), (118, 1, u'+    ASSERT(conn);'), (121, 1, u'+    ASSERT(r == 0);'), (126, 1, u'+    ASSERT(r == 0);'), (159, 1, u'+    ASSERT(nread > 0 && buf.base && pending != UV_UNKNOWN_HANDLE);'), (163, 1, u'+    ASSERT(pending == UV_TCP);'), (165, 1, u'+    ASSERT(r == 0);'), (168, 1, u'+    ASSERT(r == 0);'), (171, 1, u'+    ASSERT(r == 0);'), (176, 1, u'+    ASSERT(memcmp("hello\\n", buf.base, nread) == 0);'), (180, 1, u'+    ASSERT(r == 0);'), (186, 1, u'+    ASSERT(pending == UV_UNKNOWN_HANDLE);'), (206, 1, u'+  ASSERT(r == 0);'), (207, 1, u'+  ASSERT(channel->ipc);'), (211, 1, u'+  ASSERT(r == 0);'), (230, 1, u'+  ASSERT(r == 0);'), (235, 1, u'+  ASSERT(status == 0);'), (236, 1, u'+  ASSERT(req->handle == (uv_stream_t*)&tcp_connection);'), (250, 1, u'+  ASSERT(nread > 0);'), (251, 1, u'+  ASSERT(memcmp("hello again\\n", buf.base, nread) == 0);'), (252, 1, u'+  ASSERT(tcp == (uv_stream_t*)&tcp_connection);'), (287, 1, u'+  ASSERT(nread > 0 && buf.base && pending != UV_UNKNOWN_HANDLE);'), (291, 1, u'+  ASSERT(pending == UV_TCP);'), (293, 1, u'+  ASSERT(r == 0);'), (296, 1, u'+  ASSERT(r == 0);'), (299, 1, u'+  ASSERT(memcmp("hello\\n", buf.base, nread) == 0);'), (305, 1, u'+  ASSERT(r == 0);'), (308, 1, u'+  ASSERT(r == 0);'), (322, 1, u'+  ASSERT(r == 0);'), (331, 1, u'+  ASSERT(local_conn_accepted == 1);'), (332, 1, u'+  ASSERT(remote_conn_accepted == 1);'), (333, 1, u'+  ASSERT(read2_cb_called == 1);'), (334, 1, u'+  ASSERT(exit_cb_called == 1);'), (341, 1, u'+  ASSERT(local_conn_accepted == 1);'), (342, 1, u'+  ASSERT(remote_conn_accepted == 1);'), (343, 1, u'+  ASSERT(read2_cb_called == 1);'), (344, 1, u'+  ASSERT(exit_cb_called == 1);'), (351, 1, u'+  ASSERT(read2_cb_called == 1);'), (352, 1, u'+  ASSERT(tcp_write_cb_called == 1);'), (353, 1, u'+  ASSERT(tcp_read_cb_called == 1);'), (354, 1, u'+  ASSERT(exit_cb_called == 1);'), (366, 1, u'+  ASSERT(r == 0);'), (369, 1, u'+  ASSERT(r == 0);'), (372, 1, u'+  ASSERT(r == 0);'), (375, 1, u'+  ASSERT(r == 0);'), (376, 1, u'+  ASSERT(server.reqs_pending == 32);'), (389, 1, u'+  ASSERT(r == 0);'), (392, 1, u'+  ASSERT(r == 0);'), (395, 1, u'+  ASSERT(r == 0);'), (398, 1, u'+  ASSERT(r == 0);'), (399, 1, u'+  ASSERT(server.reqs_pending == 1);'), (424, 1, u'+  ASSERT((uv_handle_t*)&conn.conn == (uv_handle_t*)req->handle);'), (447, 1, u'+  ASSERT(nread > 0);'), (448, 1, u'+  ASSERT(memcmp("world\\n", buf.base, nread) == 0);'), (455, 1, u'+  ASSERT(r == 0);'), (464, 1, u'+  ASSERT(status == 0);'), (466, 1, u'+  ASSERT(r == 0);'), (479, 1, u'+    ASSERT(status == 0);'), (480, 1, u'+    ASSERT((uv_stream_t*)&tcp_server == server);'), (483, 1, u'+    ASSERT(r == 0);'), (486, 1, u'+    ASSERT(r == 0);'), (493, 1, u'+    ASSERT(r == 0);'), (505, 1, u'+  ASSERT(status == 0);'), (506, 1, u'+  ASSERT((uv_stream_t*)&tcp_server == server);'), (509, 1, u'+  ASSERT(conn);'), (512, 1, u'+  ASSERT(r == 0);'), (515, 1, u'+  ASSERT(r == 0);'), (521, 1, u'+  ASSERT(r == 0);'), (524, 1, u'+  ASSERT(r == 0);'), (541, 1, u'+  ASSERT(r == 0);'), (545, 1, u'+  ASSERT(uv_is_readable((uv_stream_t*) &channel));'), (546, 1, u'+  ASSERT(uv_is_writable((uv_stream_t*) &channel));'), (547, 1, u'+  ASSERT(!uv_is_closing((uv_handle_t*) &channel));'), (550, 1, u'+  ASSERT(r == 0);'), (553, 1, u'+  ASSERT(r == 0);'), (557, 1, u'+    ASSERT(r == 0);'), (563, 1, u'+  ASSERT(r == 0);'), (567, 1, u'+    ASSERT(r == 0);'), (571, 1, u'+  ASSERT(r == 0);'), (573, 1, u'+  ASSERT(connection_accepted == 1);'), (574, 1, u'+  ASSERT(close_cb_called == 3);'), (591, 1, u'+  ASSERT(r == 0);'), (595, 1, u'+  ASSERT(uv_is_readable((uv_stream_t*)&channel));'), (596, 1, u'+  ASSERT(uv_is_writable((uv_stream_t*)&channel));'), (597, 1, u'+  ASSERT(!uv_is_closing((uv_handle_t*)&channel));'), (600, 1, u'+  ASSERT(r == 0);'), (603, 1, u'+  ASSERT(r == 0);'), (606, 1, u'+  ASSERT(r == 0);'), (610, 1, u'+  ASSERT(r == 0);'), (614, 1, u'+  ASSERT(r == 0);'), (617, 1, u'+  ASSERT(r == 0);'), (619, 1, u'+  ASSERT(tcp_conn_read_cb_called == 1);'), (620, 1, u'+  ASSERT(tcp_conn_write_cb_called == 1);'), (621, 1, u'+  ASSERT(close_cb_called == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(111, 1, u'+  ASSERT(handle == &timer_handle);'), (112, 1, u'+  ASSERT(status == 0);'), (119, 1, u'+  ASSERT(handle == (uv_handle_t*)&idle_2_handle);'), (121, 1, u'+  ASSERT(idle_2_is_active);'), (131, 1, u'+  ASSERT(handle == &idle_2_handle);'), (132, 1, u'+  ASSERT(status == 0);'), (145, 1, u'+  ASSERT(handle != NULL);'), (146, 1, u'+  ASSERT(status == 0);'), (148, 1, u'+  ASSERT(idles_1_active > 0);'), (153, 1, u'+    ASSERT(r == 0);'), (155, 1, u'+    ASSERT(r == 0);'), (164, 1, u'+    ASSERT(r == 0);'), (173, 1, u'+  ASSERT(handle != NULL);'), (181, 1, u'+  ASSERT(handle == (uv_handle_t*)&prepare_1_handle);'), (189, 1, u'+  ASSERT(handle == (uv_handle_t*)&check_handle);'), (197, 1, u'+  ASSERT(handle == (uv_handle_t*)&prepare_2_handle);'), (208, 1, u'+  ASSERT(handle == &check_handle);'), (209, 1, u'+  ASSERT(status == 0);'), (215, 1, u'+      ASSERT(r == 0);'), (245, 1, u'+  ASSERT(handle == &prepare_2_handle);'), (246, 1, u'+  ASSERT(status == 0);'), (252, 1, u'+  ASSERT(loop_iteration % 2 != 0);'), (255, 1, u'+  ASSERT(r == 0);'), (266, 1, u'+  ASSERT(handle == &prepare_1_handle);'), (267, 1, u'+  ASSERT(status == 0);'), (271, 1, u'+    ASSERT(r == 0);'), (286, 1, u'+  ASSERT(r == 0);'), (288, 1, u'+  ASSERT(r == 0);'), (291, 1, u'+  ASSERT(r == 0);'), (293, 1, u'+  ASSERT(r == 0);'), (297, 1, u'+  ASSERT(r == 0);'), (302, 1, u'+    ASSERT(r == 0);'), (310, 1, u'+  ASSERT(r == 0);'), (312, 1, u'+  ASSERT(r == 0);'), (316, 1, u'+  ASSERT(r == 0);'), (318, 1, u'+  ASSERT(loop_iteration == ITERATIONS);'), (320, 1, u'+  ASSERT(prepare_1_cb_called == ITERATIONS);'), (321, 1, u'+  ASSERT(prepare_1_close_cb_called == 1);'), (323, 1, u'+  ASSERT(prepare_2_cb_called == floor(ITERATIONS / 2.0));'), (324, 1, u'+  ASSERT(prepare_2_close_cb_called == 1);'), (326, 1, u'+  ASSERT(check_cb_called == ITERATIONS);'), (327, 1, u'+  ASSERT(check_close_cb_called == 1);'), (330, 1, u'+  ASSERT(idle_1_close_cb_called == IDLE_COUNT);'), (332, 1, u'+  ASSERT(idle_2_close_cb_called == idle_2_cb_started);'), (333, 1, u'+  ASSERT(idle_2_is_active == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 1, u'+  ASSERT(handle == &prepare_handle);'), (34, 1, u'+  ASSERT(status == 0);'), (42, 1, u'+  ASSERT(handle == &timer_handle);'), (43, 1, u'+  ASSERT(status == 0);'), (60, 1, u'+  ASSERT(r != 0);'), (61, 1, u'+  ASSERT(timer_called == 1);'), (64, 1, u'+  ASSERT(r != 0);'), (65, 1, u'+  ASSERT(prepare_called == 3);'), (68, 1, u'+  ASSERT(r == 0);'), (69, 1, u'+  ASSERT(timer_called == 10);'), (70, 1, u'+  ASSERT(prepare_called == 10);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+  ASSERT(handle != NULL);'), (41, 1, u'+  ASSERT(status == 0);'), (52, 1, u'+  ASSERT(r == 0);'), (55, 1, u'+  ASSERT(r == 0);'), (58, 1, u'+  ASSERT(r == 0);'), (61, 1, u'+  ASSERT(r == 0);'), (66, 1, u'+  ASSERT(req != NULL);'), (67, 1, u'+  ASSERT(status == 0);'), (79, 1, u'+  ASSERT(connect_req != NULL);'), (82, 1, u'+  ASSERT(r == 0);'), (85, 1, u'+  ASSERT(r == 0);'), (97, 1, u'+  ASSERT(connection_cb_called == 1);'), (98, 1, u'+  ASSERT(connect_cb_called == 1);'), (99, 1, u'+  ASSERT(close_cb_called == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+  ASSERT(r == 0);'), (54, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 1, u'+  ASSERT(fd >= 0);'), (61, 1, u'+  ASSERT(r == 0);'), (71, 1, u'+    ASSERT(r == 0);'), (76, 1, u'+  ASSERT(read_count == 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(59, 1, u'+  ASSERT(NUM_PINGS == pinger->pongs);'), (68, 1, u'+  ASSERT(status == 0);'), (95, 1, u'+    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (107, 1, u'+    ASSERT(buf.base[i] == PING[pinger->state]);'), (133, 1, u'+  ASSERT(status == 0);'), (135, 1, u'+  ASSERT(uv_is_readable(req->handle));'), (136, 1, u'+  ASSERT(uv_is_writable(req->handle));'), (137, 1, u'+  ASSERT(!uv_is_closing((uv_handle_t *)req->handle));'), (158, 1, u'+  ASSERT(!r);'), (164, 1, u'+  ASSERT(!r);'), (167, 1, u'+  ASSERT(pinger_on_connect_count == 0);'), (183, 1, u'+  ASSERT(!r);'), (189, 1, u'+  ASSERT(!r);'), (192, 1, u'+  ASSERT(pinger_on_connect_count == 0);'), (207, 1, u'+  ASSERT(!r);'), (216, 1, u'+  ASSERT(pinger_on_connect_count == 0);'), (224, 1, u'+  ASSERT(completed_pingers == 1);'), (235, 1, u'+  ASSERT(completed_pingers == 1);'), (246, 1, u'+  ASSERT(completed_pingers == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+  ASSERT(handle != NULL);'), (49, 1, u'+  ASSERT(r == 0);'), (51, 1, u'+  ASSERT(r == 0);'), (54, 1, u'+  ASSERT(r == 0);'), (56, 1, u'+  ASSERT(r == -1);'), (58, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRINUSE);'), (61, 1, u'+  ASSERT(r == 0);'), (63, 1, u'+  ASSERT(r == -1);'), (65, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (72, 1, u'+  ASSERT(close_cb_called == 2);'), (84, 1, u'+  ASSERT(r == 0);'), (87, 1, u'+  ASSERT(r == -1);'), (88, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EACCES);'), (94, 1, u'+  ASSERT(close_cb_called == 1);'), (106, 1, u'+  ASSERT(r == 0);'), (108, 1, u'+  ASSERT(r == 0);'), (110, 1, u'+  ASSERT(r == -1);'), (112, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (118, 1, u'+  ASSERT(close_cb_called == 1);'), (130, 1, u'+  ASSERT(r == 0);'), (132, 1, u'+  ASSERT(r == -1);'), (134, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (140, 1, u'+  ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+  ASSERT(handle != NULL);'), (46, 1, u'+  ASSERT(status == -1);'), (47, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOENT);'), (54, 1, u'+  ASSERT(status == -1);'), (55, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOTSOCK ||'), (68, 1, u'+  ASSERT(r == 0);'), (73, 1, u'+  ASSERT(close_cb_called == 1);'), (74, 1, u'+  ASSERT(connect_cb_called == 1);'), (88, 1, u'+  ASSERT(r == 0);'), (93, 1, u'+  ASSERT(close_cb_called == 1);'), (94, 1, u'+  ASSERT(connect_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+  ASSERT(UV_OK == err.code);'), (42, 1, u'+  ASSERT(UV_OK == err.code);'), (46, 1, u'+  ASSERT(UV_OK == err.code);'), (47, 1, u'+  ASSERT(uptime > 0);'), (51, 1, u'+  ASSERT(UV_OK == err.code);'), (69, 1, u'+  ASSERT(UV_OK == err.code);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 1, u'+    ASSERT(r == 0);'), (69, 1, u'+  ASSERT(close_cb_called == NUM_SOCKETS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(94, 1, u'+  ASSERT(r == 0);'), (97, 1, u'+  ASSERT(flags >= 0);'), (99, 1, u'+  ASSERT(r >= 0);'), (111, 1, u'+  ASSERT(sock != INVALID_SOCKET);'), (113, 1, u'+  ASSERT(sock >= 0);'), (123, 1, u'+    ASSERT(r == 0);'), (128, 1, u'+  ASSERT(r == 0);'), (141, 1, u'+  ASSERT(r == 0);'), (151, 1, u'+  ASSERT(context != NULL);'), (166, 1, u'+  ASSERT(r == 0);'), (171, 1, u'+  ASSERT(r == 0);'), (182, 1, u'+      ASSERT(context->read == TRANSFER_BYTES);'), (184, 1, u'+      ASSERT(context->read == 0);'), (188, 1, u'+      ASSERT(context->sent == TRANSFER_BYTES);'), (190, 1, u'+      ASSERT(context->sent == 0);'), (211, 1, u'+  ASSERT(status == 0);'), (212, 1, u'+  ASSERT(events & context->events);'), (213, 1, u'+  ASSERT(!(events & ~context->events));'), (226, 1, u'+        ASSERT(r >= 0);'), (244, 1, u'+        ASSERT(r >= 0);'), (256, 1, u'+          ASSERT(got_eagain());'), (285, 1, u'+        ASSERT(0);'), (302, 1, u'+          ASSERT(send_bytes > 0);'), (307, 1, u'+            ASSERT(got_eagain());'), (312, 1, u'+          ASSERT(r > 0);'), (324, 1, u'+          ASSERT(send_bytes > 0);'), (329, 1, u'+            ASSERT(got_eagain());'), (334, 1, u'+          ASSERT(r > 0);'), (340, 1, u'+            ASSERT(send_bytes > 0);'), (347, 1, u'+          ASSERT(r > 0 || got_eagain());'), (378, 1, u'+          ASSERT(0);'), (389, 1, u'+      ASSERT(r == 0);'), (409, 1, u'+    ASSERT(uv_is_active((uv_handle_t*) handle));'), (411, 1, u'+    ASSERT(!uv_is_active((uv_handle_t*) handle));'), (421, 1, u'+  ASSERT(!uv_is_active((uv_handle_t*) timer));'), (424, 1, u'+  ASSERT(context->delayed_events != 0);'), (431, 1, u'+  ASSERT(r == 0);'), (441, 1, u'+  ASSERT(context != NULL);'), (448, 1, u'+  ASSERT(r == 0);'), (477, 1, u'+  ASSERT(sock != INVALID_SOCKET);'), (479, 1, u'+  ASSERT(sock >= 0);'), (489, 1, u'+  ASSERT(r == 0);'), (507, 1, u'+  ASSERT(r == 0);'), (510, 1, u'+  ASSERT(r == 0);'), (527, 1, u'+  ASSERT(r == 0);'), (530, 1, u'+  ASSERT(r == 0 || got_eagain());'), (541, 1, u'+    ASSERT(r == 0);'), (551, 1, u'+  ASSERT(r == 0);'), (554, 1, u'+  ASSERT(spurious_writable_wakeups == 0 ||'), (558, 1, u'+  ASSERT(closed_connections == NUM_CLIENTS * 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+  ASSERT(UV_OK == err.code);'), (35, 1, u'+  ASSERT(UV_OK == err.code);'), (38, 1, u'+  ASSERT(UV_OK == err.code);'), (40, 1, u'+  ASSERT(strcmp(buffer, title) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 1, u'+  ASSERT(close_cb_called == 0);'), (52, 1, u'+  ASSERT(close_cb_called == 1);'), (62, 1, u'+  ASSERT(0 && "fail_cb2 should not have been called");'), (72, 1, u'+  ASSERT(req == &shutdown_req);'), (78, 1, u'+  ASSERT(req == &write_req);'), (86, 1, u'+  ASSERT(req == &connect_req);'), (87, 1, u'+  ASSERT(status == 0);'), (95, 1, u'+  ASSERT(req == &connect_req);'), (96, 1, u'+  ASSERT(status == 0);'), (157, 1, u'+  ASSERT(h != NULL);'), (158, 1, u'+  ASSERT(status == 0);'), (250, 1, u'+  ASSERT(close_cb_called == 1);'), (263, 1, u'+  ASSERT(connect_cb_called == 1);'), (264, 1, u'+  ASSERT(shutdown_cb_called == 1);'), (278, 1, u'+  ASSERT(connect_cb_called == 1);'), (279, 1, u'+  ASSERT(write_cb_called == 1);'), (280, 1, u'+  ASSERT(shutdown_cb_called == 1);'), (322, 1, u'+  ASSERT(req_cb_called == 1);'), (359, 1, u'+  ASSERT(connect_cb_called == 1);'), (360, 1, u'+  ASSERT(shutdown_cb_called == 1);'), (373, 1, u'+  ASSERT(connect_cb_called == 1);'), (374, 1, u'+  ASSERT(write_cb_called == 1);'), (375, 1, u'+  ASSERT(shutdown_cb_called == 1);'), (395, 1, u'+  ASSERT(r == 0);'), (403, 1, u'+  ASSERT(r == 0);'), (409, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+  ASSERT(handle == &timer_handle);'), (31, 1, u'+  ASSERT(status == 0);'), (42, 1, u'+  ASSERT(r != 0);'), (43, 1, u'+  ASSERT(timer_called == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+  ASSERT(handle == &idle_handle);'), (33, 1, u'+  ASSERT(status == 0);'), (45, 1, u'+  ASSERT(idle_counter == NUM_TICKS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 1, u'+  ASSERT(c->posted == 0);'), (56, 1, u'+  ASSERT(0 == uv_sem_init(&wc.sem, 0));'), (57, 1, u'+  ASSERT(0 == uv_mutex_init(&wc.mutex));'), (58, 1, u'+  ASSERT(0 == uv_thread_create(&thread, worker, &wc));'), (62, 1, u'+  ASSERT(wc.posted == 1);'), (66, 1, u'+  ASSERT(0 == uv_thread_join(&thread));'), (81, 1, u'+  ASSERT(0 == uv_sem_init(&wc.sem, 0));'), (82, 1, u'+  ASSERT(0 == uv_mutex_init(&wc.mutex));'), (83, 1, u'+  ASSERT(0 == uv_thread_create(&thread, worker, &wc));'), (87, 1, u'+  ASSERT(0 == uv_thread_join(&thread));'), (98, 1, u'+  ASSERT(0 == uv_sem_init(&sem, 3));'), (101, 1, u'+  ASSERT(0 == uv_sem_trywait(&sem));'), (102, 1, u'+  ASSERT(-1 == uv_sem_trywait(&sem));'), (105, 1, u'+  ASSERT(0 == uv_sem_trywait(&sem));'), (106, 1, u'+  ASSERT(-1 == uv_sem_trywait(&sem));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+  ASSERT(req == &shutdown_req);'), (42, 1, u'+  ASSERT(status == 0 || (status == -1 && err == UV_ECANCELED));'), (55, 1, u'+  ASSERT(req == &connect_req);'), (56, 1, u'+  ASSERT(status == 0);'), (59, 1, u'+  ASSERT(r == 0);'), (60, 1, u'+  ASSERT(!uv_is_closing((uv_handle_t*) req->handle));'), (62, 1, u'+  ASSERT(uv_is_closing((uv_handle_t*) req->handle));'), (74, 1, u'+  ASSERT(r == 0);'), (76, 1, u'+  ASSERT(r == 0);'), (78, 1, u'+  ASSERT(r == 0);'), (80, 1, u'+  ASSERT(connect_cb_called == 1);'), (81, 1, u'+  ASSERT(shutdown_cb_called == 1);'), (82, 1, u'+  ASSERT(close_cb_called == 1);'), (94, 1, u'+  ASSERT(r == 0);'), (97, 1, u'+  ASSERT(r == 0);'), (99, 1, u'+  ASSERT(connect_cb_called == 1);'), (100, 1, u'+  ASSERT(shutdown_cb_called == 1);'), (101, 1, u'+  ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 1, u'+  ASSERT((uv_tcp_t*)t == &tcp);'), (56, 1, u'+    ASSERT(err.code == UV_EAGAIN);'), (62, 1, u'+    ASSERT(nread == 1);'), (63, 1, u'+    ASSERT(!got_eof);'), (64, 1, u"+    ASSERT(buf.base[0] == 'Q');"), (69, 1, u'+    ASSERT(err.code == UV_EOF);'), (80, 1, u'+  ASSERT(req == &shutdown_req);'), (82, 1, u'+  ASSERT(called_connect_cb == 1);'), (83, 1, u'+  ASSERT(!got_eof);'), (84, 1, u'+  ASSERT(called_tcp_close_cb == 0);'), (85, 1, u'+  ASSERT(called_timer_close_cb == 0);'), (86, 1, u'+  ASSERT(called_timer_cb == 0);'), (93, 1, u'+  ASSERT(status == 0);'), (94, 1, u'+  ASSERT(req == &connect_req);'), (109, 1, u'+  ASSERT(called_shutdown_cb == 0);'), (114, 1, u'+  ASSERT(handle == (uv_handle_t*) &tcp);'), (116, 1, u'+  ASSERT(called_connect_cb == 1);'), (117, 1, u'+  ASSERT(got_q);'), (118, 1, u'+  ASSERT(got_eof);'), (119, 1, u'+  ASSERT(called_timer_cb == 1);'), (126, 1, u'+  ASSERT(handle == (uv_handle_t*) &timer);'), (132, 1, u'+  ASSERT(handle == &timer);'), (139, 1, u'+  ASSERT(called_tcp_close_cb == 0);'), (160, 1, u'+  ASSERT(r == 0);'), (166, 1, u'+  ASSERT(!r);'), (169, 1, u'+  ASSERT(!r);'), (173, 1, u'+  ASSERT(called_connect_cb == 1);'), (174, 1, u'+  ASSERT(called_shutdown_cb == 1);'), (175, 1, u'+  ASSERT(got_eof);'), (176, 1, u'+  ASSERT(got_q);'), (177, 1, u'+  ASSERT(called_tcp_close_cb == 1);'), (178, 1, u'+  ASSERT(called_timer_close_cb == 1);'), (179, 1, u'+  ASSERT(called_timer_cb == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(59, 1, u'+  ASSERT(signum == SIGUSR1);'), (66, 1, u'+  ASSERT(signum == SIGUSR2);'), (81, 1, u'+  ASSERT(loop != NULL);'), (86, 1, u'+    ASSERT(r == 0);'), (88, 1, u'+    ASSERT(r == 0);'), (90, 1, u'+    ASSERT(r == 0);'), (92, 1, u'+    ASSERT(r == 0);'), (96, 1, u'+    ASSERT(r == 0);'), (98, 1, u'+    ASSERT(r == 0);'), (108, 1, u'+  ASSERT(r == 0);'), (113, 1, u'+    ASSERT(r == 0);'), (115, 1, u'+    ASSERT(r == 0);'), (119, 1, u'+    ASSERT(r == 0);'), (126, 1, u'+  ASSERT(r == 0);'), (139, 1, u'+  ASSERT(r == 0);'), (146, 1, u'+  ASSERT(0 && "signal_unexpected_cb should never be called");'), (159, 1, u'+    ASSERT(loop != NULL);'), (162, 1, u'+    ASSERT(r == 0);'), (165, 1, u'+    ASSERT(r == 0);'), (170, 1, u'+    ASSERT(r == 0);'), (186, 1, u'+  ASSERT(r == 0);'), (189, 1, u'+  ASSERT(r == 0);'), (196, 1, u'+    ASSERT(r == 0);'), (212, 1, u'+    ASSERT(r == 0);'), (220, 1, u'+  ASSERT(r == 0);'), (222, 1, u'+  ASSERT(r == 0);'), (236, 1, u'+  ASSERT(r == 0);'), (238, 1, u'+  ASSERT(r == 0);'), (243, 1, u'+    ASSERT(r == 0);'), (252, 1, u'+    ASSERT(r == 0);'), (259, 1, u'+  ASSERT(signal1_cb_counter == 4 * NUM_SIGNAL_HANDLING_THREADS);'), (260, 1, u'+  ASSERT(signal2_cb_counter == 2 * NUM_SIGNAL_HANDLING_THREADS);'), (264, 1, u'+  ASSERT(loop_creation_counter >= NUM_LOOP_CREATING_THREADS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 1, u'+  ASSERT(signum == ctx->signum);'), (63, 1, u'+      ASSERT(0);'), (82, 1, u'+  ASSERT(0 == uv_signal_init(loop, &ctx->handle));'), (83, 1, u'+  ASSERT(0 == uv_signal_start(&ctx->handle, signal_cb, signum));'), (90, 1, u'+  ASSERT(0 == uv_timer_init(loop, &ctx->handle));'), (91, 1, u'+  ASSERT(0 == uv_timer_start(&ctx->handle, timer_cb, 5, 5));'), (104, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (105, 1, u'+  ASSERT(tc.ncalls == NSIGNALS);'), (106, 1, u'+  ASSERT(sc.ncalls == NSIGNALS);'), (109, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (110, 1, u'+  ASSERT(tc.ncalls == NSIGNALS);'), (111, 1, u'+  ASSERT(sc.ncalls == NSIGNALS);'), (118, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (119, 1, u'+  ASSERT(tc.ncalls == NSIGNALS);'), (120, 1, u'+  ASSERT(sc.ncalls == NSIGNALS);'), (140, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (143, 1, u'+    ASSERT(sc[i].ncalls == NSIGNALS);'), (146, 1, u'+    ASSERT(tc[i].ncalls == NSIGNALS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 1, u'+  ASSERT(exit_status == 1);'), (59, 1, u'+  ASSERT(term_signal == 0);'), (68, 1, u'+  ASSERT(exit_status == -1);'), (69, 1, u'+  ASSERT(term_signal == 0);'), (80, 1, u'+  ASSERT(exit_status == 1);'), (82, 1, u'+  ASSERT(exit_status == 0);'), (84, 1, u'+  ASSERT(no_term_signal || term_signal == 15);'), (93, 1, u'+  ASSERT(err.code == UV_ESRCH);'), (115, 1, u'+    ASSERT(err.code == UV_EOF);'), (122, 1, u'+  ASSERT(status == 0);'), (130, 1, u'+  ASSERT(r == 0);'), (151, 1, u'+  ASSERT(0 == uv_spawn(uv_default_loop(), &process, options));'), (152, 1, u'+  ASSERT(0 != uv_is_active((uv_handle_t*)&process));'), (153, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (154, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOENT);'), (167, 1, u'+  ASSERT(r == 0);'), (170, 1, u'+  ASSERT(r == 0);'), (172, 1, u'+  ASSERT(exit_cb_called == 1);'), (173, 1, u'+  ASSERT(close_cb_called == 1);'), (195, 1, u'+  ASSERT(r == 0);'), (198, 1, u'+  ASSERT(r == 0);'), (201, 1, u'+  ASSERT(r == 0);'), (203, 1, u'+  ASSERT(exit_cb_called == 1);'), (204, 1, u'+  ASSERT(close_cb_called == 2); /* Once for process once for the pipe. */'), (206, 1, u'+  ASSERT(strcmp("hello world\\n", output) == 0);'), (226, 1, u'+  ASSERT(r != -1);'), (238, 1, u'+  ASSERT(r == 0);'), (241, 1, u'+  ASSERT(r == 0);'), (243, 1, u'+  ASSERT(exit_cb_called == 1);'), (244, 1, u'+  ASSERT(close_cb_called == 1);'), (248, 1, u'+  ASSERT(r == 12);'), (252, 1, u'+  ASSERT(r == 0);'), (256, 1, u'+  ASSERT(strcmp("hello world\\n", output) == 0);'), (287, 1, u'+  ASSERT(r == 0);'), (292, 1, u'+  ASSERT(r == 0);'), (295, 1, u'+  ASSERT(r == 0);'), (298, 1, u'+  ASSERT(r == 0);'), (300, 1, u'+  ASSERT(exit_cb_called == 1);'), (301, 1, u'+  ASSERT(close_cb_called == 3); /* Once for process twice for the pipe. */'), (302, 1, u'+  ASSERT(strcmp(buffer, output) == 0);'), (326, 1, u'+  ASSERT(r == 0);'), (329, 1, u'+  ASSERT(r == 0);'), (332, 1, u'+  ASSERT(r == 0);'), (334, 1, u'+  ASSERT(exit_cb_called == 1);'), (335, 1, u'+  ASSERT(close_cb_called == 2); /* Once for process once for the pipe. */'), (337, 1, u'+  ASSERT(strcmp("fourth stdio!\\n", output) == 0);'), (353, 1, u'+  ASSERT(r == 0);'), (356, 1, u'+  ASSERT(r == 0);'), (358, 1, u'+  ASSERT(exit_cb_called == 1);'), (359, 1, u'+  ASSERT(close_cb_called == 1);'), (372, 1, u'+  ASSERT(r == 0);'), (375, 1, u'+  ASSERT(r == 0);'), (378, 1, u'+  ASSERT(r == 0);'), (381, 1, u'+  ASSERT(r == 0);'), (383, 1, u'+  ASSERT(exit_cb_called == 1);'), (384, 1, u'+  ASSERT(close_cb_called == 2); /* Once for process and once for timer. */'), (406, 1, u'+  ASSERT(r == 0);'), (412, 1, u'+  ASSERT(r == 0);'), (415, 1, u'+  ASSERT(r == 0);'), (418, 1, u'+  ASSERT(r == 0);'), (420, 1, u'+  ASSERT(exit_cb_called == 1);'), (421, 1, u'+  ASSERT(close_cb_called == 2);'), (424, 1, u'+  ASSERT(strcmp("testval", output) == 0);'), (440, 1, u'+  ASSERT(r == 0);'), (445, 1, u'+  ASSERT(r == 0);'), (447, 1, u'+  ASSERT(exit_cb_called == 0);'), (450, 1, u'+  ASSERT(err.code == 0);'), (453, 1, u'+  ASSERT(err.code == 0);'), (471, 1, u'+  ASSERT(r == 0);'), (474, 1, u'+  ASSERT(r == 0);'), (477, 1, u'+  ASSERT(r == 0);'), (489, 1, u'+  ASSERT(r == 0);'), (493, 1, u'+  ASSERT(r == 0);'), (496, 1, u'+  ASSERT(r == 0);'), (499, 1, u'+  ASSERT(r == 0);'), (502, 1, u'+  ASSERT(r == 0);'), (505, 1, u'+  ASSERT(r == 0);'), (508, 1, u'+  ASSERT(r == 0);'), (510, 1, u'+  ASSERT(exit_cb_called == 1);'), (511, 1, u'+  ASSERT(close_cb_called == 5); /* process x 1, timer x 1, stdio x 3. */'), (538, 1, u'+  ASSERT(r == 0);'), (544, 1, u'+  ASSERT(r == 0);'), (547, 1, u'+  ASSERT(r == 0);'), (550, 1, u'+  ASSERT(r == 0);'), (552, 1, u'+  ASSERT(exit_cb_called == 0);'), (555, 1, u'+  ASSERT(r == 0);'), (557, 1, u'+  ASSERT(exit_cb_called == 1);'), (558, 1, u'+  ASSERT(strcmp(output, "TEST") == 0);'), (576, 1, u'+  ASSERT(r == 0);'), (582, 1, u'+  ASSERT(err.code == UV_OK);'), (586, 1, u'+  ASSERT(err.code == UV_OK);'), (589, 1, u'+  ASSERT(r == 0);'), (591, 1, u'+  ASSERT(exit_cb_called == 1);'), (592, 1, u'+  ASSERT(close_cb_called == 1);'), (626, 1, u'+  ASSERT(pipe_handle != INVALID_HANDLE_VALUE);'), (629, 1, u'+  ASSERT(r == 0);'), (632, 1, u'+  ASSERT(r == 0);'), (635, 1, u'+  ASSERT(r == 0);'), (637, 1, u'+  ASSERT(exit_cb_called == 1);'), (638, 1, u'+  ASSERT(close_cb_called == 2); /* Once for process once for the pipe. */'), (640, 1, u'+  ASSERT(strcmp("hello world\\n", output) == 0);'), (700, 1, u'+    ASSERT(wcscmp(test_str[i], cracked[i]) == 0);'), (709, 1, u'+  ASSERT(result.code == UV_OK);'), (711, 1, u'+  ASSERT(result.code == UV_OK);'), (716, 1, u'+  ASSERT(wcscmp(verbatim_output, L"cmd.exe /c c:\\\\path\\\\to\\\\node.exe --eval \\"require(\'c:\\\\\\\\path\\\\\\\\to\\\\\\\\test.js\')\\"") == 0);'), (717, 1, u'+  ASSERT(wcscmp(non_verbatim_output, L"cmd.exe /c \\"c:\\\\path\\\\to\\\\node.exe --eval \\\\\\"require(\'c:\\\\\\\\path\\\\\\\\to\\\\\\\\test.js\')\\\\\\"\\"") == 0);'), (760, 1, u'+  ASSERT(result.code == UV_OK);'), (766, 1, u'+  ASSERT(wcscmp(expected, env) == 0);'), (788, 1, u'+  ASSERT(pw != NULL);'), (794, 1, u'+  ASSERT(r == 0);'), (797, 1, u'+  ASSERT(r == 0);'), (799, 1, u'+  ASSERT(exit_cb_called == 1);'), (800, 1, u'+  ASSERT(close_cb_called == 1);'), (817, 1, u'+    ASSERT(pw != NULL);'), (819, 1, u'+    ASSERT(r == 0);'), (828, 1, u'+  ASSERT(r == 0);'), (831, 1, u'+  ASSERT(r == 0);'), (833, 1, u'+  ASSERT(exit_cb_called == 1);'), (834, 1, u'+  ASSERT(close_cb_called == 1);'), (849, 1, u'+    ASSERT(pw != NULL);'), (851, 1, u'+    ASSERT(r == 0);'), (860, 1, u'+  ASSERT(r == 0);'), (863, 1, u'+  ASSERT(r == 0);'), (865, 1, u'+  ASSERT(exit_cb_called == 1);'), (866, 1, u'+  ASSERT(close_cb_called == 1);'), (879, 1, u'+  ASSERT(0 && "should not have been called");'), (892, 1, u'+  ASSERT(r == -1);'), (893, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOTSUP);'), (896, 1, u'+  ASSERT(r == 0);'), (898, 1, u'+  ASSERT(close_cb_called == 0);'), (914, 1, u'+  ASSERT(r == -1);'), (915, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOTSUP);'), (918, 1, u'+  ASSERT(r == 0);'), (920, 1, u'+  ASSERT(close_cb_called == 0);'), (930, 1, u'+  ASSERT(0 == uv_spawn(uv_default_loop(), &process, options));'), (931, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (932, 1, u'+  ASSERT(0 == uv_is_closing((uv_handle_t*) &process));'), (934, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (935, 1, u'+  ASSERT(0 != uv_is_closing((uv_handle_t*) &process));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 1, u'+  ASSERT(exit_status == 0);'), (55, 1, u'+  ASSERT(term_signal == 0);'), (64, 1, u'+  ASSERT(r == 0);'), (84, 1, u'+    ASSERT(0);'), (99, 1, u'+  ASSERT(nread > 0 || uv_last_error(uv_default_loop()).code == UV_EOF);'), (104, 1, u'+      ASSERT(memcmp("hello world\\n", output, 12) == 0);'), (108, 1, u'+      ASSERT(r == 0);'), (136, 1, u'+  ASSERT(r == 0);'), (139, 1, u'+  ASSERT(r == 0);'), (142, 1, u'+  ASSERT(r == 0);'), (144, 1, u'+  ASSERT(on_read_cb_called > 1);'), (145, 1, u'+  ASSERT(after_write_cb_called == 1);'), (146, 1, u'+  ASSERT(exit_cb_called == 1);'), (147, 1, u'+  ASSERT(close_cb_called == 3);'), (148, 1, u'+  ASSERT(memcmp("hello world\\n", output, 12) == 0);'), (149, 1, u'+  ASSERT(output_used == 12);'), (164, 1, u'+  ASSERT(nread > 0);'), (165, 1, u'+  ASSERT(memcmp("hello world\\n", buf.base, nread) == 0);'), (176, 1, u'+  ASSERT(status == 0);'), (204, 1, u'+  ASSERT(UV_NAMED_PIPE == uv_guess_handle(0));'), (205, 1, u'+  ASSERT(UV_NAMED_PIPE == uv_guess_handle(1));'), (208, 1, u'+  ASSERT(r == 0);'), (210, 1, u'+  ASSERT(r == 0);'), (226, 1, u'+    ASSERT(r == 0);'), (231, 1, u'+  ASSERT(after_write_called == 7);'), (232, 1, u'+  ASSERT(on_pipe_read_called == 0);'), (233, 1, u'+  ASSERT(close_cb_called == 0);'), (240, 1, u'+  ASSERT(r == 0);'), (244, 1, u'+  ASSERT(after_write_called == 7);'), (245, 1, u'+  ASSERT(on_pipe_read_called == 1);'), (246, 1, u'+  ASSERT(close_cb_called == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+  ASSERT(handle != NULL);'), (43, 1, u'+  ASSERT(r == 0);'), (45, 1, u'+  ASSERT(r == 0);'), (48, 1, u'+  ASSERT(r == 0);'), (50, 1, u'+  ASSERT(r == 0);'), (53, 1, u'+  ASSERT(r == 0);'), (55, 1, u'+  ASSERT(r == -1);'), (57, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRINUSE);'), (64, 1, u'+  ASSERT(close_cb_called == 2);'), (77, 1, u'+  ASSERT(r == 0);'), (82, 1, u'+    ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRNOTAVAIL);'), (89, 1, u'+  ASSERT(close_cb_called == 1);'), (102, 1, u'+  ASSERT(r == 0);'), (104, 1, u'+  ASSERT(r == -1);'), (105, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRNOTAVAIL);'), (111, 1, u'+  ASSERT(close_cb_called == 1);'), (127, 1, u'+  ASSERT(r == 0);'), (129, 1, u'+  ASSERT(r == -1);'), (131, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (137, 1, u'+  ASSERT(close_cb_called == 1);'), (152, 1, u'+  ASSERT(r == 0);'), (154, 1, u'+  ASSERT(r == 0);'), (156, 1, u'+  ASSERT(r == -1);'), (158, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (164, 1, u'+  ASSERT(close_cb_called == 1);'), (178, 1, u'+  ASSERT(r == 0);'), (180, 1, u'+  ASSERT(r == 0);'), (192, 1, u'+  ASSERT(r == 0);'), (194, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+  ASSERT(handle != NULL);'), (43, 1, u'+  ASSERT(r == 0);'), (45, 1, u'+  ASSERT(r == 0);'), (48, 1, u'+  ASSERT(r == 0);'), (50, 1, u'+  ASSERT(r == 0);'), (53, 1, u'+  ASSERT(r == 0);'), (55, 1, u'+  ASSERT(r == -1);'), (57, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRINUSE);'), (64, 1, u'+  ASSERT(close_cb_called == 2);'), (77, 1, u'+  ASSERT(r == 0);'), (79, 1, u'+  ASSERT(r == -1);'), (80, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EADDRNOTAVAIL);'), (86, 1, u'+  ASSERT(close_cb_called == 1);'), (102, 1, u'+  ASSERT(r == 0);'), (104, 1, u'+  ASSERT(r == -1);'), (106, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (112, 1, u'+  ASSERT(close_cb_called == 1);'), (127, 1, u'+  ASSERT(r == 0);'), (129, 1, u'+  ASSERT(r == 0);'), (131, 1, u'+  ASSERT(r == -1);'), (133, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (139, 1, u'+  ASSERT(close_cb_called == 1);'), (153, 1, u'+  ASSERT(r == 0);'), (155, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+  ASSERT(status == -1);'), (41, 1, u'+  ASSERT(uv_last_error(req->handle->loop).code == UV_ECANCELED);'), (55, 1, u'+  ASSERT(0 && "should not be called");'), (67, 1, u'+  ASSERT(0 == uv_tcp_init(loop, &tcp_handle));'), (68, 1, u'+  ASSERT(0 == uv_tcp_connect(&connect_req, &tcp_handle, addr, connect_cb));'), (69, 1, u'+  ASSERT(0 == uv_timer_init(loop, &timer1_handle));'), (70, 1, u'+  ASSERT(0 == uv_timer_start(&timer1_handle, timer1_cb, 50, 0));'), (71, 1, u'+  ASSERT(0 == uv_timer_init(loop, &timer2_handle));'), (72, 1, u'+  ASSERT(0 == uv_timer_start(&timer2_handle, timer2_cb, 86400 * 1000, 0));'), (73, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (75, 1, u'+  ASSERT(connect_cb_called == 1);'), (76, 1, u'+  ASSERT(timer1_cb_called == 1);'), (77, 1, u'+  ASSERT(close_cb_called == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+    ASSERT(req != NULL);'), (52, 1, u'+    ASSERT(r == 0);'), (61, 1, u'+  ASSERT(close_cb_called == 0);'), (62, 1, u'+  ASSERT(req->handle == (uv_stream_t*)&tcp_handle);'), (69, 1, u'+  ASSERT(handle == (uv_handle_t*)&tcp_handle);'), (75, 1, u'+  ASSERT(status == 0);'), (83, 1, u'+  ASSERT(r == 0);'), (86, 1, u'+  ASSERT(r == 0);'), (89, 1, u'+  ASSERT(r == 0);'), (109, 1, u'+  ASSERT(r == 0);'), (115, 1, u'+  ASSERT(r == 0);'), (117, 1, u'+  ASSERT(write_cb_called == 0);'), (118, 1, u'+  ASSERT(close_cb_called == 0);'), (121, 1, u'+  ASSERT(r == 0);'), (125, 1, u'+  ASSERT(write_cb_called == NUM_WRITE_REQS);'), (126, 1, u'+  ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+  ASSERT(status == -1);'), (47, 1, u'+  ASSERT(status == -1);'), (75, 1, u'+  ASSERT(r == 0);'), (78, 1, u'+  ASSERT(r == -1);'), (79, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EBADF);'), (82, 1, u'+  ASSERT(r == 0);'), (85, 1, u'+  ASSERT(r == 0);'), (88, 1, u'+  ASSERT(r == 0);'), (90, 1, u'+  ASSERT(connect_cb_called == 1);'), (91, 1, u'+  ASSERT(write_cb_called == 1);'), (92, 1, u'+  ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+  ASSERT(handle != NULL);'), (41, 1, u'+  ASSERT(handle != NULL);'), (56, 1, u'+  ASSERT(r == 0);'), (58, 1, u'+  ASSERT(r == -1);'), (60, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (66, 1, u'+  ASSERT(connect_cb_called == 0);'), (67, 1, u'+  ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+  ASSERT(req == &connect_req);'), (42, 1, u'+  ASSERT(status == -1);'), (48, 1, u'+  ASSERT(handle == &timer);'), (55, 1, u'+  ASSERT(handle == (uv_handle_t*)&conn || handle == (uv_handle_t*)&timer);'), (70, 1, u'+  ASSERT(r == 0);'), (73, 1, u'+  ASSERT(r == 0);'), (76, 1, u'+  ASSERT(r == 0);'), (79, 1, u'+  ASSERT(r == 0);'), (82, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 1, u'+  ASSERT(handle != NULL);'), (39, 1, u'+  ASSERT(handle != NULL);'), (54, 1, u'+  ASSERT(r == 0);'), (56, 1, u'+  ASSERT(r == -1);'), (58, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (64, 1, u'+  ASSERT(connect_cb_called == 0);'), (65, 1, u'+  ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 1, u'+  ASSERT(r == 0);'), (40, 1, u'+  ASSERT(r == 0);'), (43, 1, u'+  ASSERT(r == 0);'), (48, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+    ASSERT(r == 0);'), (56, 1, u'+  ASSERT(sock != INVALID_SOCKET);'), (58, 1, u'+  ASSERT(sock >= 0);'), (66, 1, u'+    ASSERT(r == 0);'), (76, 1, u'+  ASSERT(suggested_size <= sizeof slab);'), (82, 1, u'+  ASSERT(handle != NULL);'), (88, 1, u'+  ASSERT(req == &shutdown_req);'), (89, 1, u'+  ASSERT(status == 0);'), (97, 1, u'+  ASSERT(tcp != NULL);'), (100, 1, u'+    ASSERT(nread == 4);'), (101, 1, u'+    ASSERT(memcmp("PING", buf.base, nread) == 0);'), (104, 1, u'+    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (112, 1, u'+  ASSERT(req != NULL);'), (117, 1, u'+    ASSERT(0);'), (129, 1, u'+  ASSERT(req == &connect_req);'), (130, 1, u'+  ASSERT(status == 0);'), (136, 1, u'+  ASSERT(r == 0);'), (140, 1, u'+  ASSERT(r == 0);'), (144, 1, u'+  ASSERT(r == 0);'), (158, 1, u'+  ASSERT(r == 0);'), (161, 1, u'+  ASSERT(r == 0);'), (164, 1, u'+  ASSERT(r == 0);'), (168, 1, u'+  ASSERT(shutdown_cb_called == 1);'), (169, 1, u'+  ASSERT(connect_cb_called == 1);'), (170, 1, u'+  ASSERT(write_cb_called == 1);'), (171, 1, u'+  ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+  ASSERT(0 && "fail_cb called");'), (43, 1, u'+  ASSERT(0 == uv_write(&write_req,'), (48, 1, u'+  ASSERT(0 == uv_read_stop((uv_stream_t*) &tcp_handle));'), (53, 1, u'+  ASSERT(0 == status);'), (54, 1, u'+  ASSERT(0 == uv_timer_start(&timer_handle, timer_cb, 50, 0));'), (55, 1, u'+  ASSERT(0 == uv_read_start((uv_stream_t*) &tcp_handle,'), (66, 1, u'+  ASSERT(0 == uv_timer_init(uv_default_loop(), &timer_handle));'), (67, 1, u'+  ASSERT(0 == uv_tcp_init(uv_default_loop(), &tcp_handle));'), (68, 1, u'+  ASSERT(0 == uv_tcp_connect(&connect_req, &tcp_handle, addr, connect_cb));'), (69, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 1, u'+    ASSERT(0 && "bad handle in close_cb");'), (66, 1, u'+  ASSERT(r == 0);'), (69, 1, u'+  ASSERT(r == 0);'), (80, 1, u'+  ASSERT(status == 0);'), (84, 1, u'+  ASSERT(r == 0);'), (89, 1, u'+  ASSERT(status == 0);'), (95, 1, u'+  ASSERT(status == 0);'), (110, 1, u'+  ASSERT(r == 0);'), (113, 1, u'+  ASSERT(r == 0);'), (116, 1, u'+  ASSERT(r == 0);'), (119, 1, u'+  ASSERT(r == 0);'), (122, 1, u'+  ASSERT(r == 0);'), (124, 1, u'+  ASSERT(connect_cb_called == 1);'), (125, 1, u'+  ASSERT(write_cb_called == 1);'), (126, 1, u'+  ASSERT(shutdown_cb_called == 1);'), (127, 1, u'+  ASSERT(conn_close_cb_called == 1);'), (128, 1, u'+  ASSERT(timer_close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(51, 1, u'+  ASSERT(0 && "alloc_cb should not have been called");'), (58, 1, u'+  ASSERT(0 && "read_cb should not have been called");'), (63, 1, u'+  ASSERT(req->handle == (uv_stream_t*) &client_handle);'), (64, 1, u'+  ASSERT(0 == status);'), (69, 1, u'+  ASSERT(req->handle == (uv_stream_t*) &peer_handle);'), (70, 1, u'+  ASSERT(0 == status);'), (79, 1, u'+  ASSERT(0 == status);'), (80, 1, u'+  ASSERT(0 == uv_accept(handle, (uv_stream_t*) &peer_handle));'), (81, 1, u'+  ASSERT(0 == uv_read_start((uv_stream_t*) &peer_handle, alloc_cb, read_cb));'), (82, 1, u'+  ASSERT(0 == uv_write(&write_req, (uv_stream_t*) &peer_handle,'), (94, 1, u'+  ASSERT(0 == uv_timer_init(loop, &timer_handle));'), (95, 1, u'+  ASSERT(0 == uv_timer_start(&timer_handle, timer_cb, 1000, 0));'), (96, 1, u'+  ASSERT(0 == uv_check_init(loop, &check_handle));'), (97, 1, u'+  ASSERT(0 == uv_check_start(&check_handle, check_cb));'), (98, 1, u'+  ASSERT(0 == uv_tcp_init(loop, &server_handle));'), (99, 1, u'+  ASSERT(0 == uv_tcp_init(loop, &client_handle));'), (100, 1, u'+  ASSERT(0 == uv_tcp_init(loop, &peer_handle));'), (101, 1, u'+  ASSERT(0 == uv_tcp_bind(&server_handle, addr));'), (102, 1, u'+  ASSERT(0 == uv_listen((uv_stream_t*) &server_handle, 1, connection_cb));'), (103, 1, u'+  ASSERT(0 == uv_tcp_connect(&connect_req, &client_handle, addr, connect_cb));'), (104, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (110, 1, u'+  ASSERT(ticks <= 20);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 1, u'+  ASSERT(server == (uv_stream_t*)&tcp_server);'), (49, 1, u'+  ASSERT(status == 0);'), (52, 1, u'+  ASSERT(r == 0);'), (55, 1, u'+  ASSERT(r == 0);'), (58, 1, u'+  ASSERT(r == 0);'), (64, 1, u'+  ASSERT(r == 0);'), (77, 1, u'+    ASSERT(uv_last_error(stream->loop).code == UV_ECONNRESET ||'), (89, 1, u'+  ASSERT(req == &connect_req);'), (90, 1, u'+  ASSERT(status == 0);'), (98, 1, u'+  ASSERT(status == 0);'), (108, 1, u'+  ASSERT(loop != NULL);'), (111, 1, u'+  ASSERT(r == 0);'), (114, 1, u'+  ASSERT(r == 0);'), (117, 1, u'+  ASSERT(r == 0);'), (120, 1, u'+  ASSERT(r == 0);'), (126, 1, u'+  ASSERT(r == 0);'), (129, 1, u'+  ASSERT(r == 0);'), (131, 1, u'+  ASSERT(write_cb_called > 0);'), (132, 1, u'+  ASSERT(read_cb_called > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 1, u'+  ASSERT(handle != NULL);'), (63, 1, u'+  ASSERT(req == &shutdown_req);'), (64, 1, u'+  ASSERT(status == 0);'), (69, 1, u'+  ASSERT(tcp->write_queue_size == 0);'), (75, 1, u'+  ASSERT(write_cb_called == WRITES);'), (80, 1, u'+  ASSERT(tcp != NULL);'), (86, 1, u'+    ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);'), (96, 1, u'+  ASSERT(req != NULL);'), (101, 1, u'+    ASSERT(0);'), (114, 1, u'+  ASSERT(req == &connect_req);'), (115, 1, u'+  ASSERT(status == 0);'), (130, 1, u'+    ASSERT(r == 0);'), (135, 1, u'+  ASSERT(r == 0);'), (139, 1, u'+  ASSERT(r == 0);'), (149, 1, u'+  ASSERT(send_buffer != NULL);'), (152, 1, u'+  ASSERT(r == 0);'), (155, 1, u'+  ASSERT(r == 0);'), (159, 1, u'+  ASSERT(shutdown_cb_called == 1);'), (160, 1, u'+  ASSERT(connect_cb_called == 1);'), (161, 1, u'+  ASSERT(write_cb_called == WRITES);'), (162, 1, u'+  ASSERT(close_cb_called == 1);'), (163, 1, u'+  ASSERT(bytes_sent == TOTAL_BYTES);'), (164, 1, u'+  ASSERT(bytes_sent_done == TOTAL_BYTES);'), (165, 1, u'+  ASSERT(bytes_received_done == TOTAL_BYTES);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(69, 1, u'+  ASSERT(r == 0);'), (78, 1, u'+  ASSERT(status == 0);'), (92, 1, u'+  ASSERT(r == 0);'), (115, 1, u'+  ASSERT(loop != NULL);'), (132, 1, u'+  ASSERT(r == 0);'), (140, 1, u'+  ASSERT(arg == (void *) 42);'), (150, 1, u'+  ASSERT(r == 0);'), (153, 1, u'+  ASSERT(r == 0);'), (155, 1, u'+  ASSERT(thread_called == 1);'), (173, 1, u'+    ASSERT(r == 0);'), (178, 1, u'+    ASSERT(r == 0);'), (179, 1, u'+    ASSERT(threads[i].thread_called);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(73, 1, u'+  ASSERT(0 == uv_cond_init(&signal_cond));'), (74, 1, u'+  ASSERT(0 == uv_mutex_init(&signal_mutex));'), (75, 1, u'+  ASSERT(0 == uv_mutex_init(&wait_mutex));'), (82, 1, u'+    ASSERT(req != NULL);'), (83, 1, u'+    ASSERT(0 == uv_queue_work(uv_default_loop(), req, work_cb, done_cb));'), (90, 1, u'+      ASSERT(0 == uv_cancel((uv_req_t*) req));'), (104, 1, u'+  ASSERT(done_cb_called == num_threads + 1);  /* +1 == cancelled work req. */'), (105, 1, u'+  ASSERT(work_cb_called == num_threads);'), (114, 1, u'+  ASSERT(req->errorno == UV_ECANCELED);'), (123, 1, u'+  ASSERT(UV_ECANCELED == uv_last_error(req->loop).code);'), (124, 1, u'+  ASSERT(UV_ECANCELED == status);'), (130, 1, u'+  ASSERT(0 && "work2_cb called");'), (135, 1, u'+  ASSERT(uv_last_error(req->loop).code == UV_ECANCELED);'), (136, 1, u'+  ASSERT(status == -1);'), (150, 1, u'+    ASSERT(0 == uv_cancel(req));'), (180, 1, u'+  ASSERT(r == 0);'), (183, 1, u'+  ASSERT(r == 0);'), (186, 1, u'+  ASSERT(r == 0);'), (189, 1, u'+  ASSERT(r == 0);'), (191, 1, u'+  ASSERT(0 == uv_timer_init(loop, &ci.timer_handle));'), (192, 1, u'+  ASSERT(0 == uv_timer_start(&ci.timer_handle, timer_cb, 10, 0));'), (193, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (194, 1, u'+  ASSERT(1 == timer_cb_called);'), (214, 1, u'+    ASSERT(0 == uv_queue_work(loop, reqs + i, work2_cb, done2_cb));'), (216, 1, u'+  ASSERT(0 == uv_timer_init(loop, &ci.timer_handle));'), (217, 1, u'+  ASSERT(0 == uv_timer_start(&ci.timer_handle, timer_cb, 10, 0));'), (218, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (219, 1, u'+  ASSERT(1 == timer_cb_called);'), (220, 1, u'+  ASSERT(ARRAY_SIZE(reqs) == done2_cb_called);'), (241, 1, u'+  ASSERT(0 == uv_fs_chmod(loop, reqs + n++, "/", 0, fs_cb));'), (242, 1, u'+  ASSERT(0 == uv_fs_chown(loop, reqs + n++, "/", 0, 0, fs_cb));'), (243, 1, u'+  ASSERT(0 == uv_fs_close(loop, reqs + n++, 0, fs_cb));'), (244, 1, u'+  ASSERT(0 == uv_fs_fchmod(loop, reqs + n++, 0, 0, fs_cb));'), (245, 1, u'+  ASSERT(0 == uv_fs_fchown(loop, reqs + n++, 0, 0, 0, fs_cb));'), (246, 1, u'+  ASSERT(0 == uv_fs_fdatasync(loop, reqs + n++, 0, fs_cb));'), (247, 1, u'+  ASSERT(0 == uv_fs_fstat(loop, reqs + n++, 0, fs_cb));'), (248, 1, u'+  ASSERT(0 == uv_fs_fsync(loop, reqs + n++, 0, fs_cb));'), (249, 1, u'+  ASSERT(0 == uv_fs_ftruncate(loop, reqs + n++, 0, 0, fs_cb));'), (250, 1, u'+  ASSERT(0 == uv_fs_futime(loop, reqs + n++, 0, 0, 0, fs_cb));'), (251, 1, u'+  ASSERT(0 == uv_fs_link(loop, reqs + n++, "/", "/", fs_cb));'), (252, 1, u'+  ASSERT(0 == uv_fs_lstat(loop, reqs + n++, "/", fs_cb));'), (253, 1, u'+  ASSERT(0 == uv_fs_mkdir(loop, reqs + n++, "/", 0, fs_cb));'), (254, 1, u'+  ASSERT(0 == uv_fs_open(loop, reqs + n++, "/", 0, 0, fs_cb));'), (255, 1, u'+  ASSERT(0 == uv_fs_read(loop, reqs + n++, 0, NULL, 0, 0, fs_cb));'), (256, 1, u'+  ASSERT(0 == uv_fs_readdir(loop, reqs + n++, "/", 0, fs_cb));'), (257, 1, u'+  ASSERT(0 == uv_fs_readlink(loop, reqs + n++, "/", fs_cb));'), (258, 1, u'+  ASSERT(0 == uv_fs_rename(loop, reqs + n++, "/", "/", fs_cb));'), (259, 1, u'+  ASSERT(0 == uv_fs_mkdir(loop, reqs + n++, "/", 0, fs_cb));'), (260, 1, u'+  ASSERT(0 == uv_fs_sendfile(loop, reqs + n++, 0, 0, 0, 0, fs_cb));'), (261, 1, u'+  ASSERT(0 == uv_fs_stat(loop, reqs + n++, "/", fs_cb));'), (262, 1, u'+  ASSERT(0 == uv_fs_symlink(loop, reqs + n++, "/", "/", 0, fs_cb));'), (263, 1, u'+  ASSERT(0 == uv_fs_unlink(loop, reqs + n++, "/", fs_cb));'), (264, 1, u'+  ASSERT(0 == uv_fs_utime(loop, reqs + n++, "/", 0, 0, fs_cb));'), (265, 1, u'+  ASSERT(0 == uv_fs_write(loop, reqs + n++, 0, NULL, 0, 0, fs_cb));'), (266, 1, u'+  ASSERT(n == ARRAY_SIZE(reqs));'), (268, 1, u'+  ASSERT(0 == uv_timer_init(loop, &ci.timer_handle));'), (269, 1, u'+  ASSERT(0 == uv_timer_start(&ci.timer_handle, timer_cb, 10, 0));'), (270, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (271, 1, u'+  ASSERT(n == fs_cb_called);'), (272, 1, u'+  ASSERT(1 == timer_cb_called);'), (290, 1, u'+    ASSERT(0 == uv_queue_work(loop, &req, nop_work_cb, nop_done_cb));'), (296, 1, u'+    ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (305, 1, u'+  ASSERT(req.data == NULL);'), (306, 1, u'+  ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));'), (307, 1, u'+  ASSERT(req.data != NULL);  /* Should have been updated by nop_done_cb(). */')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+  ASSERT(req == &work_req);'), (33, 1, u'+  ASSERT(req->data == &data);'), (39, 1, u'+  ASSERT(status == 0);'), (40, 1, u'+  ASSERT(req == &work_req);'), (41, 1, u'+  ASSERT(req->data == &data);'), (51, 1, u'+  ASSERT(r == 0);'), (54, 1, u'+  ASSERT(work_cb_count == 1);'), (55, 1, u'+  ASSERT(after_work_cb_count == 1);'), (67, 1, u'+  ASSERT(r == -1);'), (70, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (72, 1, u'+  ASSERT(work_cb_count == 0);'), (73, 1, u'+  ASSERT(after_work_cb_count == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+  ASSERT(handle != NULL);'), (47, 1, u'+  ASSERT(handle == &repeat_1);'), (48, 1, u'+  ASSERT(status == 0);'), (50, 1, u'+  ASSERT(uv_timer_get_repeat((uv_timer_t*)handle) == 50);'), (58, 1, u'+  ASSERT(r == 0);'), (71, 1, u'+  ASSERT(handle == &repeat_2);'), (72, 1, u'+  ASSERT(status == 0);'), (73, 1, u'+  ASSERT(repeat_2_cb_allowed);'), (81, 1, u'+    ASSERT(!uv_is_active((uv_handle_t*)handle));'), (88, 1, u'+  ASSERT(uv_timer_get_repeat(&repeat_2) == 100);'), (99, 1, u'+  ASSERT(0 < start_time);'), (103, 1, u'+  ASSERT(r == 0);'), (105, 1, u'+  ASSERT(r == -1);'), (106, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EINVAL);'), (111, 1, u'+  ASSERT(r == 0);'), (113, 1, u'+  ASSERT(r == 0);'), (114, 1, u'+  ASSERT(uv_timer_get_repeat(&repeat_1) == 0);'), (118, 1, u'+  ASSERT(uv_timer_get_repeat(&repeat_1) == 50);'), (125, 1, u'+  ASSERT(r == 0);'), (127, 1, u'+  ASSERT(r == 0);'), (128, 1, u'+  ASSERT(uv_timer_get_repeat(&repeat_2) == 100);'), (132, 1, u'+  ASSERT(repeat_1_cb_called == 10);'), (133, 1, u'+  ASSERT(repeat_2_cb_called == 2);'), (134, 1, u'+  ASSERT(close_cb_called == 2);'), (138, 1, u'+  ASSERT(700 <= uv_now(uv_default_loop()) - start_time);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+  ASSERT(handle != NULL);'), (41, 1, u'+  ASSERT(!uv_is_active(handle));'), (50, 1, u'+  ASSERT(handle != NULL);'), (51, 1, u'+  ASSERT(status == 0);'), (52, 1, u'+  ASSERT(!uv_is_active((uv_handle_t*)handle));'), (66, 1, u'+  ASSERT(handle != NULL);'), (75, 1, u'+  ASSERT(handle != NULL);'), (76, 1, u'+  ASSERT(status == 0);'), (77, 1, u'+  ASSERT(uv_is_active((uv_handle_t*)handle));'), (100, 1, u'+  ASSERT(0 < start_time);'), (106, 1, u'+    ASSERT(r == 0);'), (108, 1, u'+    ASSERT(r == 0);'), (113, 1, u'+  ASSERT(r == 0);'), (115, 1, u'+  ASSERT(r == 0);'), (119, 1, u'+  ASSERT(r == 0);'), (121, 1, u'+  ASSERT(r == 0);'), (123, 1, u'+  ASSERT(r == 0);'), (128, 1, u'+  ASSERT(once_cb_called == 10);'), (129, 1, u'+  ASSERT(once_close_cb_called == 10);'), (131, 1, u'+  ASSERT(repeat_cb_called == 5);'), (132, 1, u'+  ASSERT(repeat_close_cb_called == 1);'), (134, 1, u'+  ASSERT(500 <= uv_now(uv_default_loop()) - start_time);'), (146, 1, u'+  ASSERT(r == 0);'), (148, 1, u'+  ASSERT(r == 0);'), (150, 1, u'+  ASSERT(r == 0);'), (152, 1, u'+  ASSERT(r == 0);'), (154, 1, u'+  ASSERT(once_cb_called == 1);'), (164, 1, u'+  ASSERT(0 == uv_timer_init(uv_default_loop(), &handle));'), (165, 1, u'+  ASSERT(0 == uv_timer_get_repeat(&handle));'), (166, 1, u'+  ASSERT(!uv_is_active((uv_handle_t*)&handle));'), (174, 1, u'+  ASSERT(order_cb_called++ == *(int*)handle->data);'), (179, 1, u'+  ASSERT(order_cb_called++ == *(int*)handle->data);'), (191, 1, u'+  ASSERT(0 == uv_timer_init(uv_default_loop(), &handle_a));'), (192, 1, u'+  ASSERT(0 == uv_timer_init(uv_default_loop(), &handle_b));'), (196, 1, u'+  ASSERT(0 == uv_timer_start(&handle_a, order_cb_a, 0, 0));'), (198, 1, u'+  ASSERT(0 == uv_timer_start(&handle_b, order_cb_b, 0, 0));'), (199, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (201, 1, u'+  ASSERT(order_cb_called == 2);'), (203, 1, u'+  ASSERT(0 == uv_timer_stop(&handle_a));'), (204, 1, u'+  ASSERT(0 == uv_timer_stop(&handle_b));'), (209, 1, u'+  ASSERT(0 == uv_timer_start(&handle_b, order_cb_b, 0, 0));'), (212, 1, u'+  ASSERT(0 == uv_timer_start(&handle_a, order_cb_a, 0, 0));'), (213, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (215, 1, u'+  ASSERT(order_cb_called == 2);'), (223, 1, u'+  ASSERT(handle == &tiny_timer);'), (231, 1, u'+  ASSERT(0 == uv_timer_init(uv_default_loop(), &tiny_timer));'), (232, 1, u'+  ASSERT(0 == uv_timer_init(uv_default_loop(), &huge_timer1));'), (233, 1, u'+  ASSERT(0 == uv_timer_init(uv_default_loop(), &huge_timer2));'), (234, 1, u'+  ASSERT(0 == uv_timer_start(&tiny_timer, tiny_timer_cb, 1, 0));'), (235, 1, u'+  ASSERT(0 == uv_timer_start(&huge_timer1, tiny_timer_cb, 0xffffffffffffLL, 0));'), (236, 1, u'+  ASSERT(0 == uv_timer_start(&huge_timer2, tiny_timer_cb, (uint64_t) -1, 0));'), (237, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));'), (247, 1, u'+    ASSERT(handle == &huge_timer1);'), (249, 1, u'+    ASSERT(handle == &tiny_timer);'), (259, 1, u'+  ASSERT(0 == uv_timer_init(uv_default_loop(), &tiny_timer));'), (260, 1, u'+  ASSERT(0 == uv_timer_init(uv_default_loop(), &huge_timer1));'), (261, 1, u'+  ASSERT(0 == uv_timer_start(&tiny_timer, huge_repeat_cb, 2, 2));'), (262, 1, u'+  ASSERT(0 == uv_timer_start(&huge_timer1, huge_repeat_cb, 1, (uint64_t) -1));'), (263, 1, u'+  ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 1, u'+  ASSERT(handle != INVALID_HANDLE_VALUE);'), (63, 1, u'+  ASSERT(handle != INVALID_HANDLE_VALUE);'), (76, 1, u'+  ASSERT(ttyin_fd >= 0);'), (77, 1, u'+  ASSERT(ttyout_fd >= 0);'), (79, 1, u'+  ASSERT(UV_UNKNOWN_HANDLE == uv_guess_handle(-1));'), (81, 1, u'+  ASSERT(UV_TTY == uv_guess_handle(ttyin_fd));'), (82, 1, u'+  ASSERT(UV_TTY == uv_guess_handle(ttyout_fd));'), (85, 1, u'+  ASSERT(r == 0);'), (88, 1, u'+  ASSERT(r == 0);'), (91, 1, u'+  ASSERT(r == 0);'), (99, 1, u'+  ASSERT(width > 10);'), (100, 1, u'+  ASSERT(height > 10);'), (104, 1, u'+  ASSERT(r == 0);'), (108, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+  ASSERT((uv_udp_t*)(handle) == &handle_)'), (33, 1, u'+  ASSERT((req) == &req_);'), (52, 1, u'+  ASSERT(status == -1);'), (53, 1, u'+  ASSERT(uv_last_error(uv_default_loop()).code == UV_EMSGSIZE);'), (69, 1, u'+  ASSERT(r == 0);'), (75, 1, u'+  ASSERT(r == 0);'), (77, 1, u'+  ASSERT(close_cb_called == 0);'), (78, 1, u'+  ASSERT(send_cb_called == 0);'), (82, 1, u'+  ASSERT(send_cb_called == 1);'), (83, 1, u'+  ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+  ASSERT((uv_udp_t*)(handle) == &server     \\'), (35, 1, u'+  ASSERT((req) == &req_);'), (63, 1, u'+  ASSERT(status == 0);'), (73, 1, u'+  ASSERT(0 && "this function should not have been called");'), (83, 1, u'+  ASSERT(nread >= 0);'), (106, 1, u'+  ASSERT(r == 0);'), (109, 1, u'+  ASSERT(r == 0);'), (112, 1, u'+  ASSERT(r == 0);'), (115, 1, u'+  ASSERT(r == 0);'), (121, 1, u'+  ASSERT(r == 0);'), (124, 1, u'+  ASSERT(r == 0);'), (127, 1, u'+  ASSERT(r == 0);'), (129, 1, u'+  ASSERT(close_cb_called == 0);'), (130, 1, u'+  ASSERT(send_cb_called == 0);'), (131, 1, u'+  ASSERT(recv_cb_called == 0);'), (135, 1, u'+  ASSERT(close_cb_called == 3);'), (144, 1, u'+  ASSERT(recv_cb_called == 1);'), (145, 1, u'+  ASSERT(send_cb_called == 1);'), (154, 1, u'+  ASSERT(recv_cb_called == 0);'), (155, 1, u'+  ASSERT(send_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+  ASSERT((uv_udp_t*)(handle) == &server || (uv_udp_t*)(handle) == &client)'), (45, 1, u'+  ASSERT(suggested_size <= sizeof slab);'), (58, 1, u'+  ASSERT(req != NULL);'), (59, 1, u'+  ASSERT(status == 0);'), (74, 1, u'+  ASSERT(flags == 0);'), (79, 1, u'+    ASSERT(0 && "unexpected error");'), (85, 1, u'+    ASSERT(addr == NULL);'), (89, 1, u'+  ASSERT(addr != NULL);'), (90, 1, u'+  ASSERT(nread == 4);'), (91, 1, u'+  ASSERT(!memcmp("PING", buf.base, nread));'), (105, 1, u'+  ASSERT(r == 0);'), (108, 1, u'+  ASSERT(r == 0);'), (112, 1, u'+  ASSERT(r == 0);'), (116, 1, u'+  ASSERT(r == 0);'), (119, 1, u'+  ASSERT(r == 0);'), (125, 1, u'+  ASSERT(r == 0);'), (127, 1, u'+  ASSERT(close_cb_called == 0);'), (128, 1, u'+  ASSERT(cl_recv_cb_called == 0);'), (129, 1, u'+  ASSERT(sv_send_cb_called == 0);'), (134, 1, u'+  ASSERT(cl_recv_cb_called == 1);'), (135, 1, u'+  ASSERT(sv_send_cb_called == 1);'), (136, 1, u'+  ASSERT(close_cb_called == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+  ASSERT((uv_udp_t*)(handle) == &server || (uv_udp_t*)(handle) == &client)'), (46, 1, u'+  ASSERT(req != NULL);'), (47, 1, u'+  ASSERT(status == 0);'), (63, 1, u'+  ASSERT(r == 0);'), (66, 1, u'+  ASSERT(r == 0);'), (69, 1, u'+  ASSERT(r == 0);'), (74, 1, u'+  ASSERT(r == 0);'), (76, 1, u'+  ASSERT(close_cb_called == 0);'), (77, 1, u'+  ASSERT(sv_send_cb_called == 0);'), (82, 1, u'+  ASSERT(sv_send_cb_called == 1);'), (83, 1, u'+  ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+    ASSERT(r == 0);'), (52, 1, u'+  ASSERT(sock != INVALID_SOCKET);'), (54, 1, u'+  ASSERT(sock >= 0);'), (62, 1, u'+    ASSERT(r == 0);'), (72, 1, u'+  ASSERT(suggested_size <= sizeof slab);'), (78, 1, u'+  ASSERT(handle != NULL);'), (91, 1, u'+    ASSERT(0 && "unexpected error");'), (97, 1, u'+    ASSERT(addr == NULL);'), (101, 1, u'+  ASSERT(flags == 0);'), (103, 1, u'+  ASSERT(addr != NULL);'), (104, 1, u'+  ASSERT(nread == 4);'), (105, 1, u'+  ASSERT(memcmp("PING", buf.base, nread) == 0);'), (108, 1, u'+  ASSERT(r == 0);'), (115, 1, u'+  ASSERT(req != NULL);'), (116, 1, u'+  ASSERT(status == 0);'), (133, 1, u'+  ASSERT(r == 0);'), (136, 1, u'+  ASSERT(r == 0);'), (139, 1, u'+  ASSERT(r == 0);'), (142, 1, u'+  ASSERT(r == 0);'), (145, 1, u'+  ASSERT(r == 0);'), (149, 1, u'+  ASSERT(send_cb_called == 1);'), (150, 1, u'+  ASSERT(close_cb_called == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+  ASSERT(r == 0);'), (44, 1, u'+  ASSERT(r == 0);'), (50, 1, u'+  ASSERT(r == 0);'), (55, 1, u'+    ASSERT(r == 0);'), (60, 1, u'+    ASSERT(r == -1);'), (61, 1, u'+    ASSERT(uv_last_error(loop).code == UV_EINVAL);'), (68, 1, u'+  ASSERT(r == 0);'), (73, 1, u'+    ASSERT(r == 0);'), (78, 1, u'+  ASSERT(r == -1);'), (79, 1, u'+  ASSERT(uv_last_error(loop).code == UV_EINVAL);'), (83, 1, u'+  ASSERT(r == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+  ASSERT((uv_udp_t*)(handle) == &server || (uv_udp_t*)(handle) == &client)'), (48, 1, u'+  ASSERT(suggested_size <= sizeof slab);'), (56, 1, u'+  ASSERT(uv_is_closing(handle));'), (67, 1, u'+  ASSERT(flags == 0);'), (70, 1, u'+    ASSERT(0 && "unexpected error");'), (76, 1, u'+    ASSERT(addr == NULL);'), (80, 1, u'+  ASSERT(addr != NULL);'), (81, 1, u'+  ASSERT(nread == 4);'), (82, 1, u'+  ASSERT(!memcmp("PONG", buf.base, nread));'), (93, 1, u'+  ASSERT(req != NULL);'), (94, 1, u'+  ASSERT(status == 0);'), (98, 1, u'+  ASSERT(r == 0);'), (105, 1, u'+  ASSERT(req != NULL);'), (106, 1, u'+  ASSERT(status == 0);'), (125, 1, u'+    ASSERT(0 && "unexpected error");'), (131, 1, u'+    ASSERT(addr == NULL);'), (136, 1, u'+  ASSERT(flags == 0);'), (138, 1, u'+  ASSERT(addr != NULL);'), (139, 1, u'+  ASSERT(nread == 4);'), (140, 1, u'+  ASSERT(!memcmp("PING", buf.base, nread));'), (147, 1, u'+  ASSERT(r == 0);'), (150, 1, u'+  ASSERT(req != NULL);'), (160, 1, u'+  ASSERT(r == 0);'), (175, 1, u'+  ASSERT(r == 0);'), (178, 1, u'+  ASSERT(r == 0);'), (181, 1, u'+  ASSERT(r == 0);'), (186, 1, u'+  ASSERT(r == 0);'), (192, 1, u'+  ASSERT(r == 0);'), (194, 1, u'+  ASSERT(close_cb_called == 0);'), (195, 1, u'+  ASSERT(cl_send_cb_called == 0);'), (196, 1, u'+  ASSERT(cl_recv_cb_called == 0);'), (197, 1, u'+  ASSERT(sv_send_cb_called == 0);'), (198, 1, u'+  ASSERT(sv_recv_cb_called == 0);'), (202, 1, u'+  ASSERT(cl_send_cb_called == 1);'), (203, 1, u'+  ASSERT(cl_recv_cb_called == 1);'), (204, 1, u'+  ASSERT(sv_send_cb_called == 1);'), (205, 1, u'+  ASSERT(sv_recv_cb_called == 1);'), (206, 1, u'+  ASSERT(close_cb_called == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 1, u'+    ASSERT(r == 0);'), (37, 1, u'+    ASSERT(memeq(dst, "A", 1));'), (43, 1, u'+    ASSERT(r == 0);'), (44, 1, u'+    ASSERT(memeq(dst, "", 1));'), (50, 1, u'+    ASSERT(r == 1);'), (51, 1, u'+    ASSERT(memeq(dst, "B", 2));'), (57, 1, u'+    ASSERT(r == 2);'), (58, 1, u'+    ASSERT(memeq(dst, "CD", 3));'), (71, 1, u'+    ASSERT(r == 1);'), (72, 1, u'+    ASSERT(memeq(dst, "A", 2));'), (78, 1, u'+    ASSERT(r == 1);'), (79, 1, u'+    ASSERT(memeq(dst, "A", 2));'), (85, 1, u'+    ASSERT(r == 2);'), (86, 1, u'+    ASSERT(memeq(dst, "AB", 3));'), (92, 1, u'+    ASSERT(r == 4);'), (93, 1, u'+    ASSERT(memeq(dst, "ABCD", 5));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+  ASSERT(arg == (void*)magic_cookie);'), (39, 1, u'+    ASSERT(0 && "unexpected handle");'), (45, 1, u'+  ASSERT(handle == &timer);'), (46, 1, u'+  ASSERT(status == 0);'), (60, 1, u'+  ASSERT(r == 0);'), (63, 1, u'+  ASSERT(r == 0);'), (66, 1, u'+  ASSERT(seen_timer_handle == 0);'), (68, 1, u'+  ASSERT(r == 0);'), (69, 1, u'+  ASSERT(seen_timer_handle == 1);'), (74, 1, u'+  ASSERT(seen_timer_handle == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-Assert_compileTime(PROVIDERS_COUNT == (sizeof(PROVIDERS) / sizeof(RandomSeed_Provider)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(i > 0);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: RandomSeed_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(i > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(i > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(store->links[i]->linkAddr == (uintptr_t)store->links[i]);'), (4, 1, u'+        Assert_true(link->linkAddr == (uintptr_t)link);'), (5, 1, u'+        Assert_true(link->cannonicalLabel != 1 || link == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: verifyLinks
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(store->links[i]->linkAddr == (uintptr_t)store->links[i]);'), (4, 1, u'+        Assert_true(link->linkAddr == (uintptr_t)link);'), (5, 1, u'+        Assert_true(link->cannonicalLabel != 1 || link == store->selfLink || !store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(store->links[i]->linkAddr == (uintptr_t)store->links[i]);'), (4, 1, u'+        Assert_true(link->linkAddr == (uintptr_t)link);'), (5, 1, u'+        Assert_true(link->cannonicalLabel != 1 || link == store->selfLink || !store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true((parent != child && cannonicalLabel != 1) || store->selfLink == NULL);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true((parent != child && cannonicalLabel != 1) || store->selfLink == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true((parent != child && cannonicalLabel != 1) || store->selfLink == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    Assert_true(store->linkCount < LINK_CAPACITY);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: getLink
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    Assert_true(store->linkCount < LINK_CAPACITY);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    Assert_true(store->linkCount < LINK_CAPACITY);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-         Assert_true(link->child == node);'), (3, 2, u'-         Assert_true(RB_FIND(PeerRBTree, &link->parent->peerTree, (struct Node_Linkx*)link));'), (4, 1, u'+        Assert_true(link->linkAddr == (uintptr_t)link);'), (5, 1, u'+        Assert_true(!link->nextPeer || (char*)link->parent <= (char*)link->nextPeer->parent);'), (6, 1, u'+        Assert_true(link->child == node);'), (7, 1, u'+        Assert_true(RB_FIND(PeerRBTree, &link->parent->peerTree, link));'), (11, 2, u'-        Assert_true(linkx->link.parent == node);'), (15, 1, u'+        Assert_true(link->linkAddr == (uintptr_t)link);'), (16, 1, u'+        Assert_true(link->parent == node);'), (17, 1, u'+        Assert_true(!lastLink || link->cannonicalLabel != lastLink->cannonicalLabel);')]
===========================================
===========================================
Total add: 11
Total del: 6
Header: verifyNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-         Assert_true(link->child == node);'), (3, 2, u'-         Assert_true(RB_FIND(PeerRBTree, &link->parent->peerTree, (struct Node_Linkx*)link));'), (4, 1, u'+        Assert_true(link->linkAddr == (uintptr_t)link);'), (5, 1, u'+        Assert_true(!link->nextPeer || (char*)link->parent <= (char*)link->nextPeer->parent);'), (6, 1, u'+        Assert_true(link->child == node);'), (7, 1, u'+        Assert_true(RB_FIND(PeerRBTree, &link->parent->peerTree, link));'), (11, 2, u'-        Assert_true(linkx->link.parent == node);'), (15, 1, u'+        Assert_true(link->linkAddr == (uintptr_t)link);'), (16, 1, u'+        Assert_true(link->parent == node);'), (17, 1, u'+        Assert_true(!lastLink || link->cannonicalLabel != lastLink->cannonicalLabel);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-         Assert_true(link->child == node);'), (3, 2, u'-         Assert_true(RB_FIND(PeerRBTree, &link->parent->peerTree, (struct Node_Linkx*)link));'), (4, 1, u'+        Assert_true(link->linkAddr == (uintptr_t)link);'), (5, 1, u'+        Assert_true(!link->nextPeer || (char*)link->parent <= (char*)link->nextPeer->parent);'), (6, 1, u'+        Assert_true(link->child == node);'), (7, 1, u'+        Assert_true(RB_FIND(PeerRBTree, &link->parent->peerTree, link));'), (11, 2, u'-        Assert_true(linkx->link.parent == node);'), (15, 1, u'+        Assert_true(link->linkAddr == (uintptr_t)link);'), (16, 1, u'+        Assert_true(link->parent == node);'), (17, 1, u'+        Assert_true(!lastLink || link->cannonicalLabel != lastLink->cannonicalLabel);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        Assert_true(current);'), (26, 1, u'+    Assert_true(current);'), (30, 2, u'-        Assert_true(RB_FIND(PeerRBTree, &parent->peerTree, (struct Node_Linkx*)link));')]
===========================================
===========================================
Total add: 12
Total del: 15
Header: unlinkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        Assert_true(current);'), (26, 1, u'+    Assert_true(current);'), (30, 2, u'-        Assert_true(RB_FIND(PeerRBTree, &parent->peerTree, (struct Node_Linkx*)link));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        Assert_true(current);'), (26, 1, u'+    Assert_true(current);'), (30, 2, u'-        Assert_true(RB_FIND(PeerRBTree, &parent->peerTree, (struct Node_Linkx*)link));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(nextLink != link || link == store->selfLink);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(nextLink != link || link == store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        Assert_true(nextLink != link || link == store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_equals(scheme, node->encodingScheme));'), (3, 1, u'+    Assert_true(EncodingScheme_equals(scheme, node->encodingScheme));//TODO'), (11, 2, u'-    Assert_true(path != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Total add: 33
Total del: 9
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_equals(scheme, node->encodingScheme));'), (3, 1, u'+    Assert_true(EncodingScheme_equals(scheme, node->encodingScheme));//TODO'), (11, 2, u'-    Assert_true(path != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_equals(scheme, node->encodingScheme));'), (3, 1, u'+    Assert_true(EncodingScheme_equals(scheme, node->encodingScheme));//TODO'), (11, 2, u'-    Assert_true(path != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            Assert_true(0);')]
===========================================
===========================================
Total add: 1
Total del: 5
Header: insertReversePeer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-            Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        Assert_true(current);'), (15, 2, u'-    Assert_true(current);')]
===========================================
===========================================
Total add: 8
Total del: 4
Header: unlinkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        Assert_true(current);'), (15, 2, u'-    Assert_true(current);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        Assert_true(current);'), (15, 2, u'-    Assert_true(current);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_true(RB_FIND(PeerRBTree, &parent->peerTree, (struct Node_Linkx*)link));')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: unlinkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_true(RB_FIND(PeerRBTree, &parent->peerTree, (struct Node_Linkx*)link));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        Assert_true(RB_FIND(PeerRBTree, &parent->peerTree, (struct Node_Linkx*)link));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-                Assert_true(0);//TODO: remove')]
===========================================
===========================================
Total add: 11
Total del: 8
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-                Assert_true(0);//TODO: remove')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-                Assert_true(0);//TODO: remove')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!alloc || alloc->free == pipe->alloc->free);'), (3, 1, u'+    Assert_true(!alloc || alloc->fileName == pipe->alloc->fileName);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!alloc || alloc->free == pipe->alloc->free);'), (3, 1, u'+    Assert_true(!alloc || alloc->fileName == pipe->alloc->fileName);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!alloc || alloc->free == pipe->alloc->free);'), (3, 1, u'+    Assert_true(!alloc || alloc->fileName == pipe->alloc->fileName);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(nextLink->child->scheme);'), (3, 1, u'+        Assert_true(nextLink->child->encodingScheme);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(nextLink->child->scheme);'), (3, 1, u'+        Assert_true(nextLink->child->encodingScheme);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(nextLink->child->scheme);'), (3, 1, u'+        Assert_true(nextLink->child->encodingScheme);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_equals(scheme, node->scheme));'), (3, 1, u'+    Assert_true(EncodingScheme_equals(scheme, node->encodingScheme));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_equals(scheme, node->scheme));'), (3, 1, u'+    Assert_true(EncodingScheme_equals(scheme, node->encodingScheme));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(EncodingScheme_equals(scheme, node->scheme));'), (3, 1, u'+    Assert_true(EncodingScheme_equals(scheme, node->encodingScheme));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(nextLink != link);'), (3, 1, u'+        Assert_true(nextLink != link || link == store->selfLink);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(nextLink != link);'), (3, 1, u'+        Assert_true(nextLink != link || link == store->selfLink);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(nextLink != link);'), (3, 1, u'+        Assert_true(nextLink != link || link == store->selfLink);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(node->node.version);'), (7, 1, u'+    Assert_true(node->version);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(node->node.version);'), (7, 1, u'+    Assert_true(node->version);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(node->node.version);'), (7, 1, u'+    Assert_true(node->version);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_failure("%s:%d Fatal error: [%s] totalBytes [%lu] remaining [%lu]",'), (3, 1, u'+    Assert_failure("%s:%d Fatal error: [%s] totalBytes [%ld] remaining [%ld]",')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: failure
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_failure("%s:%d Fatal error: [%s] totalBytes [%lu] remaining [%lu]",'), (3, 1, u'+    Assert_failure("%s:%d Fatal error: [%s] totalBytes [%ld] remaining [%ld]",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_failure("%s:%d Fatal error: [%s] totalBytes [%lu] remaining [%lu]",'), (3, 1, u'+    Assert_failure("%s:%d Fatal error: [%s] totalBytes [%ld] remaining [%ld]",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(origLoc->size <= context->allocatedHere);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: allocatorRealloc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(origLoc->size <= context->allocatedHere);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(origLoc->size <= context->allocatedHere);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+                Assert_true(0);//TODO: remove')]
===========================================
===========================================
Total add: 14
Total del: 0
Header: linkNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+                Assert_true(0);//TODO: remove')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+                Assert_true(0);//TODO: remove')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(path != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: NodeStore_discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(path != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(path != EncodingScheme_convertLabel_INVALID);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-    Assert_true(schemeNum > -1);')]
===========================================
===========================================
Total add: 3
Total del: 10
Header: handleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-    Assert_true(schemeNum > -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-    Assert_true(schemeNum > -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+        Assert_true(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);'), (27, 1, u'+        Assert_true(nextLink != link);'), (29, 1, u'+        Assert_true(nextLink->child->scheme);')]
===========================================
===========================================
Total add: 28
Total del: 4
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+        Assert_true(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);'), (27, 1, u'+        Assert_true(nextLink != link);'), (29, 1, u'+        Assert_true(nextLink->child->scheme);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+        Assert_true(tmpl.cannonicalLabel != EncodingScheme_convertLabel_INVALID);'), (27, 1, u'+        Assert_true(nextLink != link);'), (29, 1, u'+        Assert_true(nextLink->child->scheme);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(tmpl.labelFragment);/// TODO remove this'), (5, 1, u'+    Assert_true(tmpl.cannonicalLabel);/// TODO remove this')]
===========================================
===========================================
Total add: 10
Total del: 7
Header: findClosest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(tmpl.labelFragment);/// TODO remove this'), (5, 1, u'+    Assert_true(tmpl.cannonicalLabel);/// TODO remove this')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(tmpl.labelFragment);/// TODO remove this'), (5, 1, u'+    Assert_true(tmpl.cannonicalLabel);/// TODO remove this')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    Assert_true(node->node.version);'), (5, 1, u'+    Assert_true(EncodingScheme_equals(scheme, node->scheme));')]
===========================================
===========================================
Total add: 7
Total del: 5
Header: discoverNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    Assert_true(node->node.version);'), (5, 1, u'+    Assert_true(EncodingScheme_equals(scheme, node->scheme));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    Assert_true(node->node.version);'), (5, 1, u'+    Assert_true(EncodingScheme_equals(scheme, node->scheme));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(store->nodes[i].address.path != 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: NodeStore_getNodesByAddr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(store->nodes[i].address.path != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(store->nodes[i].address.path != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            Assert_true(out->nodes[outIndex]->address.path != 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: NodeStore_getNodesByAddr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            Assert_true(out->nodes[outIndex]->address.path != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            Assert_true(out->nodes[outIndex]->address.path != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+                Assert_true(nodeList->nodes[i]->address.path != 0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: refreshReach
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+                Assert_true(nodeList->nodes[i]->address.path != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+                Assert_true(nodeList->nodes[i]->address.path != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(EncodingScheme_isSane(list));')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: EncodingScheme_serialize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(EncodingScheme_isSane(list));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(EncodingScheme_isSane(list));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+                Assert_true(next.prefix == 0);'), (6, 1, u'+                Assert_true(next.prefix >> next.prefixLen == 0);')]
===========================================
===========================================
Total add: 14
Total del: 4
Header: EncodingScheme_deserialize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+                Assert_true(next.prefix == 0);'), (6, 1, u'+                Assert_true(next.prefix >> next.prefixLen == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+                Assert_true(next.prefix == 0);'), (6, 1, u'+                Assert_true(next.prefix >> next.prefixLen == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(data->bytes, "\\x0f\\xfc\\xff\\x29\\xf8\\xff\\x7f\\x09\\xfe\\xff\\x07", 11));'), (3, 1, u'+    Assert_always(!Bits_memcmp(data->bytes, "\\x4f\\xf4\\xff\\x29\\xd9\\xff\\x7f\\x89\\xee\\xff\\x07", 11));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encoding
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(data->bytes, "\\x0f\\xfc\\xff\\x29\\xf8\\xff\\x7f\\x09\\xfe\\xff\\x07", 11));'), (3, 1, u'+    Assert_always(!Bits_memcmp(data->bytes, "\\x4f\\xf4\\xff\\x29\\xd9\\xff\\x7f\\x89\\xee\\xff\\x07", 11));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(data->bytes, "\\x0f\\xfc\\xff\\x29\\xf8\\xff\\x7f\\x09\\xfe\\xff\\x07", 11));'), (3, 1, u'+    Assert_always(!Bits_memcmp(data->bytes, "\\x4f\\xf4\\xff\\x29\\xd9\\xff\\x7f\\x89\\xee\\xff\\x07", 11));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-    Assert_true(schemeNum > -1);')]
===========================================
===========================================
Total add: 0
Total del: 18
Header: handleQuery
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-    Assert_true(schemeNum > -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-    Assert_true(schemeNum > -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(91, 1, u'+                Assert_true(0);'), (105, 1, u'+                Assert_true(0);'), (113, 1, u'+                Assert_true(bytesWritten == from->bytes);'), (131, 1, u'+                    Assert_true(0);'), (147, 1, u'+                Assert_true(from->bytes <= 2042);'), (189, 1, u'+                Assert_true(0);'), (196, 1, u'+                Assert_true(bytes == from->bytes);')]
===========================================
===========================================
Total add: 179
Total del: 30
Header: setEnabled
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(91, 1, u'+                Assert_true(0);'), (105, 1, u'+                Assert_true(0);'), (113, 1, u'+                Assert_true(bytesWritten == from->bytes);'), (131, 1, u'+                    Assert_true(0);'), (147, 1, u'+                Assert_true(from->bytes <= 2042);'), (189, 1, u'+                Assert_true(0);'), (196, 1, u'+                Assert_true(bytes == from->bytes);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(91, 1, u'+                Assert_true(0);'), (105, 1, u'+                Assert_true(0);'), (113, 1, u'+                Assert_true(bytesWritten == from->bytes);'), (131, 1, u'+                    Assert_true(0);'), (147, 1, u'+                Assert_true(from->bytes <= 2042);'), (189, 1, u'+                Assert_true(0);'), (196, 1, u'+                Assert_true(bytes == from->bytes);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    WinFail_assert(eh, (tc->tap.ol.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL)) != NULL);'), (7, 1, u'+    WinFail_assert(eh, (tc->pipe.ol.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL)) != NULL);')]
===========================================
===========================================
Total add: 10
Total del: 1
Header: TAPInterface_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    WinFail_assert(eh, (tc->tap.ol.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL)) != NULL);'), (7, 1, u'+    WinFail_assert(eh, (tc->pipe.ol.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL)) != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    WinFail_assert(eh, (tc->tap.ol.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL)) != NULL);'), (7, 1, u'+    WinFail_assert(eh, (tc->pipe.ol.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL)) != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: incomingTunC
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: incomingTunB
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: incomingTunA
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: incomingTunB
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: incomingTunA
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);'), (4, 1, u'+    Assert_true(TUNMessageType_pop(msg, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(message) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: messageToTun
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(message) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNMessageType_pop(message) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(message, NULL) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(!Sockaddr_parse("::", &rainflyAddr));'), (9, 1, u'+    Assert_true(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: Core_main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(!Sockaddr_parse("::", &rainflyAddr));'), (9, 1, u'+    Assert_true(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(!Sockaddr_parse("::", &rainflyAddr));'), (9, 1, u'+    Assert_true(!Sockaddr_parse("[fc00::1]:53", &rainflyAddr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(uh->sourceAndDestPorts == 0);'), (3, 1, u'+    Assert_always(uh->srcPort_be == 0);'), (4, 1, u'+    Assert_always(uh->destPort_be == 0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: responseWithIpCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(uh->sourceAndDestPorts == 0);'), (3, 1, u'+    Assert_always(uh->srcPort_be == 0);'), (4, 1, u'+    Assert_always(uh->destPort_be == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(uh->sourceAndDestPorts == 0);'), (3, 1, u'+    Assert_always(uh->srcPort_be == 0);'), (4, 1, u'+    Assert_always(uh->destPort_be == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+                Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
Total add: 9
Total del: 1
Header: NodeStore_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+                Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+                Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-                Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
Total add: 0
Total del: 13
Header: NodeStore_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-                Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-                Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-       Assert_true(store->headers[i].addressPrefix == Address_getPrefix(&store->nodes[i].address));'), (4, 2, u'-       Assert_true(!(!Bits_memcmp(&store->nodes[i].address.ip6, &addr->ip6, 16)'), (9, 1, u'+           Assert_true(store->headers[i].addressPrefix =='), (11, 1, u'+           Assert_true(!(!Bits_memcmp(&store->nodes[i].address.ip6, &addr->ip6, 16)'), (14, 1, u'+        Assert_true(store->pub.size < store->capacity || worstNode != -1);')]
===========================================
===========================================
Total add: 9
Total del: 5
Header: NodeStore_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-       Assert_true(store->headers[i].addressPrefix == Address_getPrefix(&store->nodes[i].address));'), (4, 2, u'-       Assert_true(!(!Bits_memcmp(&store->nodes[i].address.ip6, &addr->ip6, 16)'), (9, 1, u'+           Assert_true(store->headers[i].addressPrefix =='), (11, 1, u'+           Assert_true(!(!Bits_memcmp(&store->nodes[i].address.ip6, &addr->ip6, 16)'), (14, 1, u'+        Assert_true(store->pub.size < store->capacity || worstNode != -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-       Assert_true(store->headers[i].addressPrefix == Address_getPrefix(&store->nodes[i].address));'), (4, 2, u'-       Assert_true(!(!Bits_memcmp(&store->nodes[i].address.ip6, &addr->ip6, 16)'), (9, 1, u'+           Assert_true(store->headers[i].addressPrefix =='), (11, 1, u'+           Assert_true(!(!Bits_memcmp(&store->nodes[i].address.ip6, &addr->ip6, 16)'), (14, 1, u'+        Assert_true(store->pub.size < store->capacity || worstNode != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+    Assert_true(false);')]
===========================================
===========================================
Total add: 59
Total del: 11
Header: setUp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+    Assert_true(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+    Assert_true(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    Assert_true(schemeNum > -1);')]
===========================================
===========================================
Total add: 18
Total del: 0
Header: handleQuery
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    Assert_true(schemeNum > -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+    Assert_true(schemeNum > -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_always(NodeStore_addNode(store, randomIp(0x155), 1, Version_CURRENT_PROTOCOL) == NULL);'), (8, 1, u'+    Assert_always(NodeStore_addNode(store, randomIp(0x15), 1, Version_CURRENT_PROTOCOL) != NULL);')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: test_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_always(NodeStore_addNode(store, randomIp(0x155), 1, Version_CURRENT_PROTOCOL) == NULL);'), (8, 1, u'+    Assert_always(NodeStore_addNode(store, randomIp(0x15), 1, Version_CURRENT_PROTOCOL) != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_always(NodeStore_addNode(store, randomIp(0x155), 1, Version_CURRENT_PROTOCOL) == NULL);'), (8, 1, u'+    Assert_always(NodeStore_addNode(store, randomIp(0x15), 1, Version_CURRENT_PROTOCOL) != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+                Assert_true(store->nodes[i].address.path == path);')]
===========================================
===========================================
Total add: 4
Total del: 6
Header: NodeStore_brokenPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+                Assert_true(store->nodes[i].address.path == path);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+                Assert_true(store->nodes[i].address.path == path);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_brokenPath(b->path, store)==1);'), (5, 1, u'+    Assert_always(NodeStore_brokenPath(b->path, store)==2);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: test_brokenPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_brokenPath(b->path, store)==1);'), (5, 1, u'+    Assert_always(NodeStore_brokenPath(b->path, store)==2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(NodeStore_brokenPath(b->path, store)==1);'), (5, 1, u'+    Assert_always(NodeStore_brokenPath(b->path, store)==2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("0.0.0.0", &addr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: AdminTestFramework_setUp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("0.0.0.0", &addr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!Sockaddr_parse("0.0.0.0", &addr));'), (3, 1, u'+    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Address_isSameIp(&closest->nodes[0]->address, near2));'), (3, 2, u'-    Assert_always(Address_isSameIp(&closest->nodes[1]->address, near1));'), (17, 1, u'+    Assert_always(Address_isSameIp(&closest->nodes[0]->address, twoHop));'), (18, 1, u'+    Assert_always(Address_isSameIp(&closest->nodes[1]->address, oneHop));')]
===========================================
===========================================
Total add: 2
Total del: 15
Header: test_getClosestNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Address_isSameIp(&closest->nodes[0]->address, near2));'), (3, 2, u'-    Assert_always(Address_isSameIp(&closest->nodes[1]->address, near1));'), (17, 1, u'+    Assert_always(Address_isSameIp(&closest->nodes[0]->address, twoHop));'), (18, 1, u'+    Assert_always(Address_isSameIp(&closest->nodes[1]->address, oneHop));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Address_isSameIp(&closest->nodes[0]->address, near2));'), (3, 2, u'-    Assert_always(Address_isSameIp(&closest->nodes[1]->address, near1));'), (17, 1, u'+    Assert_always(Address_isSameIp(&closest->nodes[0]->address, twoHop));'), (18, 1, u'+    Assert_always(Address_isSameIp(&closest->nodes[1]->address, oneHop));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_always(LabelSplicer_isOneHop(list->nodes[i]->address.path));'), (8, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[0]->address, oneHop2));'), (9, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[1]->address, oneHop1));'), (10, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[2]->address, oneHop3));'), (14, 2, u'-    Assert_always(list->size == 2);'), (15, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[0]->address, oneHop1));'), (16, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[1]->address, oneHop3));'), (19, 1, u'+    Assert_always(list->size == 1);')]
===========================================
===========================================
Total add: 6
Total del: 11
Header: test_getPeers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_always(LabelSplicer_isOneHop(list->nodes[i]->address.path));'), (8, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[0]->address, oneHop2));'), (9, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[1]->address, oneHop1));'), (10, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[2]->address, oneHop3));'), (14, 2, u'-    Assert_always(list->size == 2);'), (15, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[0]->address, oneHop1));'), (16, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[1]->address, oneHop3));'), (19, 1, u'+    Assert_always(list->size == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_always(LabelSplicer_isOneHop(list->nodes[i]->address.path));'), (8, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[0]->address, oneHop2));'), (9, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[1]->address, oneHop1));'), (10, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[2]->address, oneHop3));'), (14, 2, u'-    Assert_always(list->size == 2);'), (15, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[0]->address, oneHop1));'), (16, 2, u'-    Assert_always(Address_isSameIp(&list->nodes[1]->address, oneHop3));'), (19, 1, u'+    Assert_always(list->size == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_always( (Address_getPrefix(myAddr) ^ Address_getPrefix(target)) >'), (23, 1, u'+    Assert_always(best != NULL);'), (24, 1, u'+    Assert_always(Address_isSameIp(&best->address, b));'), (29, 2, u'-    Assert_always(Address_isSameIp(&best->address, near));'), (30, 1, u'+    Assert_always(Address_isSameIp(&best->address, a));')]
===========================================
===========================================
Total add: 14
Total del: 14
Header: test_getBest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_always( (Address_getPrefix(myAddr) ^ Address_getPrefix(target)) >'), (23, 1, u'+    Assert_always(best != NULL);'), (24, 1, u'+    Assert_always(Address_isSameIp(&best->address, b));'), (29, 2, u'-    Assert_always(Address_isSameIp(&best->address, near));'), (30, 1, u'+    Assert_always(Address_isSameIp(&best->address, a));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_always( (Address_getPrefix(myAddr) ^ Address_getPrefix(target)) >'), (23, 1, u'+    Assert_always(best != NULL);'), (24, 1, u'+    Assert_always(Address_isSameIp(&best->address, b));'), (29, 2, u'-    Assert_always(Address_isSameIp(&best->address, near));'), (30, 1, u'+    Assert_always(Address_isSameIp(&best->address, a));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(node >= store->nodes && node < store->nodes + store->size);'), (7, 1, u'+    Assert_true(node >= store->nodes && node < store->nodes + store->pub.size);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: NodeStore_getNodeByNetworkAddr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(node >= store->nodes && node < store->nodes + store->size);'), (7, 1, u'+    Assert_true(node >= store->nodes && node < store->nodes + store->pub.size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(node >= store->nodes && node < store->nodes + store->size);'), (7, 1, u'+    Assert_true(node >= store->nodes && node < store->nodes + store->pub.size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+Assert_compileTime(PROVIDERS_COUNT == (sizeof(PROVIDERS) / sizeof(RandomSeed_Provider)));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: static RandomSeed_Provider PROVIDERS[] = {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+Assert_compileTime(PROVIDERS_COUNT == (sizeof(PROVIDERS) / sizeof(RandomSeed_Provider)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+Assert_compileTime(PROVIDERS_COUNT == (sizeof(PROVIDERS) / sizeof(RandomSeed_Provider)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+Assert_compileTime(sizeof(struct RandomSeed_Buffer) == RandomSeed_Buffer_SIZE);')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: struct RandomSeed_pvt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+Assert_compileTime(sizeof(struct RandomSeed_Buffer) == RandomSeed_Buffer_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+Assert_compileTime(sizeof(struct RandomSeed_Buffer) == RandomSeed_Buffer_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(sizeof(buff.output) == 64);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: get
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(sizeof(buff.output) == 64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(sizeof(buff.output) == 64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_always(NodeStore_getNodeByNetworkAddr(0x15,store)==NULL);'), (10, 1, u'+    Assert_always(NodeStore_getNodeByNetworkAddr(0x15,store)->address.path == 0x15);')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: test_getNodeByNetworkAddr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_always(NodeStore_getNodeByNetworkAddr(0x15,store)==NULL);'), (10, 1, u'+    Assert_always(NodeStore_getNodeByNetworkAddr(0x15,store)->address.path == 0x15);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_always(NodeStore_getNodeByNetworkAddr(0x15,store)==NULL);'), (10, 1, u'+    Assert_always(NodeStore_getNodeByNetworkAddr(0x15,store)->address.path == 0x15);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_always(NodeStore_addNode(store, myAddr, 0, Version_CURRENT_PROTOCOL) == NULL);'), (6, 1, u'+    Assert_always(NodeStore_addNode(store, myAddr, 1, Version_CURRENT_PROTOCOL) == NULL);'), (8, 2, u'-    Assert_always(NodeStore_addNode(store, randomAddress(), 0, Version_CURRENT_PROTOCOL) != NULL);'), (9, 1, u'+    Assert_always(NodeStore_addNode(store, randomIp(0x155), 1, Version_CURRENT_PROTOCOL) != NULL);'), (15, 1, u'+    Assert_always( Address_isSameIp(&node->address, &NodeStore_dumpTable(store,1)->address) );')]
===========================================
===========================================
Total add: 7
Total del: 4
Header: test_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_always(NodeStore_addNode(store, myAddr, 0, Version_CURRENT_PROTOCOL) == NULL);'), (6, 1, u'+    Assert_always(NodeStore_addNode(store, myAddr, 1, Version_CURRENT_PROTOCOL) == NULL);'), (8, 2, u'-    Assert_always(NodeStore_addNode(store, randomAddress(), 0, Version_CURRENT_PROTOCOL) != NULL);'), (9, 1, u'+    Assert_always(NodeStore_addNode(store, randomIp(0x155), 1, Version_CURRENT_PROTOCOL) != NULL);'), (15, 1, u'+    Assert_always( Address_isSameIp(&node->address, &NodeStore_dumpTable(store,1)->address) );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_always(NodeStore_addNode(store, myAddr, 0, Version_CURRENT_PROTOCOL) == NULL);'), (6, 1, u'+    Assert_always(NodeStore_addNode(store, myAddr, 1, Version_CURRENT_PROTOCOL) == NULL);'), (8, 2, u'-    Assert_always(NodeStore_addNode(store, randomAddress(), 0, Version_CURRENT_PROTOCOL) != NULL);'), (9, 1, u'+    Assert_always(NodeStore_addNode(store, randomIp(0x155), 1, Version_CURRENT_PROTOCOL) != NULL);'), (15, 1, u'+    Assert_always( Address_isSameIp(&node->address, &NodeStore_dumpTable(store,1)->address) );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+    Assert_always(closest != NULL);'), (22, 1, u'+    Assert_always(closest->size == 2);'), (23, 1, u'+    Assert_always(Address_isSameIp(&closest->nodes[0]->address, near2));'), (24, 1, u'+    Assert_always(Address_isSameIp(&closest->nodes[1]->address, near1));')]
===========================================
===========================================
Total add: 35
Total del: 1
Header: test_getClosestNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+    Assert_always(closest != NULL);'), (22, 1, u'+    Assert_always(closest->size == 2);'), (23, 1, u'+    Assert_always(Address_isSameIp(&closest->nodes[0]->address, near2));'), (24, 1, u'+    Assert_always(Address_isSameIp(&closest->nodes[1]->address, near1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+    Assert_always(closest != NULL);'), (22, 1, u'+    Assert_always(closest->size == 2);'), (23, 1, u'+    Assert_always(Address_isSameIp(&closest->nodes[0]->address, near2));'), (24, 1, u'+    Assert_always(Address_isSameIp(&closest->nodes[1]->address, near1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    Assert_always(LabelSplicer_routesThrough(c->path, b->path));'), (18, 1, u'+    Assert_always(NodeStore_dumpTable(store, 2)->reach == 10);')]
===========================================
===========================================
Total add: 16
Total del: 1
Header: test_updateReach
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    Assert_always(LabelSplicer_routesThrough(c->path, b->path));'), (18, 1, u'+    Assert_always(NodeStore_dumpTable(store, 2)->reach == 10);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    Assert_always(LabelSplicer_routesThrough(c->path, b->path));'), (18, 1, u'+    Assert_always(NodeStore_dumpTable(store, 2)->reach == 10);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    Assert_always(store->size == 4);'), (9, 1, u'+    Assert_always(NodeStore_nonZeroNodes(store)==4);'), (14, 1, u'+    Assert_always(NodeStore_nonZeroNodes(store)==3);')]
===========================================
===========================================
Total add: 12
Total del: 1
Header: test_nonZeroNodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    Assert_always(store->size == 4);'), (9, 1, u'+    Assert_always(NodeStore_nonZeroNodes(store)==4);'), (14, 1, u'+    Assert_always(NodeStore_nonZeroNodes(store)==3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    Assert_always(store->size == 4);'), (9, 1, u'+    Assert_always(NodeStore_nonZeroNodes(store)==4);'), (14, 1, u'+    Assert_always(NodeStore_nonZeroNodes(store)==3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_always(LabelSplicer_routesThrough(c->path, b->path));'), (16, 1, u'+    Assert_always(NodeStore_brokenPath(b->path, store)==1);'), (18, 1, u'+    Assert_always(NodeStore_nonZeroNodes(store)==1);')]
===========================================
===========================================
Total add: 16
Total del: 1
Header: test_brokenPath
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_always(LabelSplicer_routesThrough(c->path, b->path));'), (16, 1, u'+    Assert_always(NodeStore_brokenPath(b->path, store)==1);'), (18, 1, u'+    Assert_always(NodeStore_nonZeroNodes(store)==1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_always(LabelSplicer_routesThrough(c->path, b->path));'), (16, 1, u'+    Assert_always(NodeStore_brokenPath(b->path, store)==1);'), (18, 1, u'+    Assert_always(NodeStore_nonZeroNodes(store)==1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    Assert_always(Address_isSameIp(&orig->address, &test->address));'), (11, 1, u'+    Assert_always(NodeStore_dumpTable(store, -1) == NULL);'), (12, 1, u'+    Assert_always(NodeStore_dumpTable(store, 3) == NULL);')]
===========================================
===========================================
Total add: 10
Total del: 1
Header: test_dumpTable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    Assert_always(Address_isSameIp(&orig->address, &test->address));'), (11, 1, u'+    Assert_always(NodeStore_dumpTable(store, -1) == NULL);'), (12, 1, u'+    Assert_always(NodeStore_dumpTable(store, 3) == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    Assert_always(Address_isSameIp(&orig->address, &test->address));'), (11, 1, u'+    Assert_always(NodeStore_dumpTable(store, -1) == NULL);'), (12, 1, u'+    Assert_always(NodeStore_dumpTable(store, 3) == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(target) == 4);'), (15, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(oneHop1->path) == 4);'), (16, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(oneHop2->path) == 4);'), (17, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(oneHop3->path) == 4);'), (18, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(twoHop->path) == 4);'), (21, 1, u'+    Assert_always(LabelSplicer_isOneHop(oneHop1->path));'), (22, 1, u'+    Assert_always(LabelSplicer_isOneHop(oneHop2->path));'), (23, 1, u'+    Assert_always(LabelSplicer_isOneHop(oneHop3->path));'), (24, 1, u'+    Assert_always(!LabelSplicer_isOneHop(twoHop->path));'), (28, 1, u'+    Assert_always(list != NULL);'), (29, 1, u'+    Assert_always(list->size == 0);'), (39, 1, u'+    Assert_always(list->size == 3);'), (43, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[0]->address, oneHop2));'), (44, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[1]->address, oneHop1));'), (45, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[2]->address, oneHop3));'), (49, 1, u'+    Assert_always(list->size == 2);'), (50, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[0]->address, oneHop1));'), (51, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[1]->address, oneHop3));')]
===========================================
===========================================
Total add: 49
Total del: 1
Header: test_getPeers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(target) == 4);'), (15, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(oneHop1->path) == 4);'), (16, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(oneHop2->path) == 4);'), (17, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(oneHop3->path) == 4);'), (18, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(twoHop->path) == 4);'), (21, 1, u'+    Assert_always(LabelSplicer_isOneHop(oneHop1->path));'), (22, 1, u'+    Assert_always(LabelSplicer_isOneHop(oneHop2->path));'), (23, 1, u'+    Assert_always(LabelSplicer_isOneHop(oneHop3->path));'), (24, 1, u'+    Assert_always(!LabelSplicer_isOneHop(twoHop->path));'), (28, 1, u'+    Assert_always(list != NULL);'), (29, 1, u'+    Assert_always(list->size == 0);'), (39, 1, u'+    Assert_always(list->size == 3);'), (43, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[0]->address, oneHop2));'), (44, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[1]->address, oneHop1));'), (45, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[2]->address, oneHop3));'), (49, 1, u'+    Assert_always(list->size == 2);'), (50, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[0]->address, oneHop1));'), (51, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[1]->address, oneHop3));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(target) == 4);'), (15, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(oneHop1->path) == 4);'), (16, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(oneHop2->path) == 4);'), (17, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(oneHop3->path) == 4);'), (18, 1, u'+    Assert_always(NumberCompress_bitsUsedForLabel(twoHop->path) == 4);'), (21, 1, u'+    Assert_always(LabelSplicer_isOneHop(oneHop1->path));'), (22, 1, u'+    Assert_always(LabelSplicer_isOneHop(oneHop2->path));'), (23, 1, u'+    Assert_always(LabelSplicer_isOneHop(oneHop3->path));'), (24, 1, u'+    Assert_always(!LabelSplicer_isOneHop(twoHop->path));'), (28, 1, u'+    Assert_always(list != NULL);'), (29, 1, u'+    Assert_always(list->size == 0);'), (39, 1, u'+    Assert_always(list->size == 3);'), (43, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[0]->address, oneHop2));'), (44, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[1]->address, oneHop1));'), (45, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[2]->address, oneHop3));'), (49, 1, u'+    Assert_always(list->size == 2);'), (50, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[0]->address, oneHop1));'), (51, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[1]->address, oneHop3));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_always( (Address_getPrefix(myAddr) ^ Address_getPrefix(target)) >'), (19, 1, u'+    Assert_always(best != NULL);'), (20, 1, u'+    Assert_always(Address_isSameIp(&best->address, near));')]
===========================================
===========================================
Total add: 18
Total del: 1
Header: test_getBest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_always( (Address_getPrefix(myAddr) ^ Address_getPrefix(target)) >'), (19, 1, u'+    Assert_always(best != NULL);'), (20, 1, u'+    Assert_always(Address_isSameIp(&best->address, near));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_always( (Address_getPrefix(myAddr) ^ Address_getPrefix(target)) >'), (19, 1, u'+    Assert_always(best != NULL);'), (20, 1, u'+    Assert_always(Address_isSameIp(&best->address, near));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(node >= store->nodes && node < store->nodes + store->size);'), (7, 1, u'+    Assert_true(node >= store->nodes && node < store->nodes + store->pub.size);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: NodeStore_getNodeByNetworkAddr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(node >= store->nodes && node < store->nodes + store->size);'), (7, 1, u'+    Assert_true(node >= store->nodes && node < store->nodes + store->pub.size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(node >= store->nodes && node < store->nodes + store->size);'), (7, 1, u'+    Assert_true(node >= store->nodes && node < store->nodes + store->pub.size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list != NULL);'), (4, 2, u'-    Assert_always(Address_isSame(&list->nodes[0]->address, otherAddr));'), (5, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (11, 1, u'+    Assert_always(list->size == 2);'), (12, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (13, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[1]->address, otherAddr));'), (17, 1, u'+    Assert_always(list->size == 1);')]
===========================================
===========================================
Total add: 21
Total del: 2
Header: test_getNodesByAddr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list != NULL);'), (4, 2, u'-    Assert_always(Address_isSame(&list->nodes[0]->address, otherAddr));'), (5, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (11, 1, u'+    Assert_always(list->size == 2);'), (12, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (13, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[1]->address, otherAddr));'), (17, 1, u'+    Assert_always(list->size == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(list != NULL);'), (4, 2, u'-    Assert_always(Address_isSame(&list->nodes[0]->address, otherAddr));'), (5, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (11, 1, u'+    Assert_always(list->size == 2);'), (12, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[0]->address, otherAddr));'), (13, 1, u'+    Assert_always(Address_isSameIp(&list->nodes[1]->address, otherAddr));'), (17, 1, u'+    Assert_always(list->size == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        default: Assert_always(!"Unsupported ethertype");'), (7, 1, u'+        Assert_always(!"Unsupported ethertype");')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        default: Assert_always(!"Unsupported ethertype");'), (7, 1, u'+        Assert_always(!"Unsupported ethertype");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        default: Assert_always(!"Unsupported ethertype");'), (7, 1, u'+        Assert_always(!"Unsupported ethertype");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        default Assert_always(!"Unsupported ethertype");'), (3, 1, u'+        default: Assert_always(!"Unsupported ethertype");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        default Assert_always(!"Unsupported ethertype");'), (3, 1, u'+        default: Assert_always(!"Unsupported ethertype");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        default Assert_always(!"Unsupported ethertype");'), (3, 1, u'+        default: Assert_always(!"Unsupported ethertype");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!context->lastSibling);'), (3, 2, u'-    Assert_true(!context->adoptions || !context->adoptions->parents);'), (38, 2, u'-        Assert_true(found);')]
===========================================
===========================================
Total add: 11
Total del: 28
Header: freeAllocator
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!context->lastSibling);'), (3, 2, u'-    Assert_true(!context->adoptions || !context->adoptions->parents);'), (38, 2, u'-        Assert_true(found);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!context->lastSibling);'), (3, 2, u'-    Assert_true(!context->adoptions || !context->adoptions->parents);'), (38, 2, u'-        Assert_true(found);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_always(!context->nextSibling);')]
===========================================
===========================================
Total add: 1
Total del: 24
Header: disconnectAllocator
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_always(!context->nextSibling);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_always(!context->nextSibling);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(LabelSplicer_routesThrough(dest, 1));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: routesThrough
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(LabelSplicer_routesThrough(dest, 1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(LabelSplicer_routesThrough(dest, 1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(Bits_log2x64(1)==0);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(Bits_log2x64(1)==0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(Bits_log2x64(1)==0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(node >= store->nodes && node < store->nodes + store->size);'), (7, 1, u'+    Assert_true(node >= store->nodes && node < store->nodes + store->pub.size);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: NodeStore_getNodeByNetworkAddr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(node >= store->nodes && node < store->nodes + store->size);'), (7, 1, u'+    Assert_true(node >= store->nodes && node < store->nodes + store->pub.size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(node >= store->nodes && node < store->nodes + store->size);'), (7, 1, u'+    Assert_true(node >= store->nodes && node < store->nodes + store->pub.size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!context->lastSibling);'), (3, 2, u'-    Assert_true(!context->adoptions || !context->adoptions->parents);'), (38, 2, u'-        Assert_true(found);')]
===========================================
===========================================
Total add: 11
Total del: 28
Header: freeAllocator
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!context->lastSibling);'), (3, 2, u'-    Assert_true(!context->adoptions || !context->adoptions->parents);'), (38, 2, u'-        Assert_true(found);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!context->lastSibling);'), (3, 2, u'-    Assert_true(!context->adoptions || !context->adoptions->parents);'), (38, 2, u'-        Assert_true(found);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_always(!context->nextSibling);')]
===========================================
===========================================
Total add: 1
Total del: 24
Header: disconnectAllocator
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_always(!context->nextSibling);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_always(!context->nextSibling);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(alloc->beginCanary == context->canary'), (12, 1, u'+        Assert_failure("%s:%d Fatal error: invalid [%s] canary",')]
===========================================
===========================================
Total add: 10
Total del: 2
Header: checkCanaries
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(alloc->beginCanary == context->canary'), (12, 1, u'+        Assert_failure("%s:%d Fatal error: invalid [%s] canary",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(alloc->beginCanary == context->canary'), (12, 1, u'+        Assert_failure("%s:%d Fatal error: invalid [%s] canary",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+                Assert_true(!removeJob(job));')]
===========================================
===========================================
Total add: 9
Total del: 5
Header: freeAllocator
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+                Assert_true(!removeJob(job));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+                Assert_true(!removeJob(job));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-    Assert_true(node);')]
===========================================
===========================================
Total add: 313
Total del: 92
Header: handleReply
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-    Assert_true(node);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-    Assert_true(node);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_always(count == 0);'), (8, 2, u'-    Assert_always(out == NULL);'), (10, 1, u'+    Assert_always(List_size(users) == -1);'), (14, 2, u'-    Assert_always(count == 1);'), (15, 2, u'-    Assert_always(out != NULL);'), (16, 2, u'-    Assert_always(String_equals(String_CONST("user1"),out[0]));'), (18, 1, u'+    Assert_always(List_size(users) == 1);'), (19, 1, u'+    Assert_always(String_equals(String_CONST("user1"),List_getString(users,0)));'), (23, 2, u'-    Assert_always(count == 2);'), (24, 2, u'-    Assert_always(out != NULL);'), (25, 2, u'-    Assert_always(String_equals(String_CONST("user1"),out[0]));'), (26, 2, u'-    Assert_always(String_equals(String_CONST("user2"),out[1]));'), (28, 1, u'+    Assert_always(List_size(users) == 2);'), (29, 1, u'+    Assert_always(String_equals(String_CONST("user2"),List_getString(users,0)));'), (30, 1, u'+    Assert_always(String_equals(String_CONST("user1"),List_getString(users,1)));')]
===========================================
===========================================
Total add: 10
Total del: 14
Header: testGetUsers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_always(count == 0);'), (8, 2, u'-    Assert_always(out == NULL);'), (10, 1, u'+    Assert_always(List_size(users) == -1);'), (14, 2, u'-    Assert_always(count == 1);'), (15, 2, u'-    Assert_always(out != NULL);'), (16, 2, u'-    Assert_always(String_equals(String_CONST("user1"),out[0]));'), (18, 1, u'+    Assert_always(List_size(users) == 1);'), (19, 1, u'+    Assert_always(String_equals(String_CONST("user1"),List_getString(users,0)));'), (23, 2, u'-    Assert_always(count == 2);'), (24, 2, u'-    Assert_always(out != NULL);'), (25, 2, u'-    Assert_always(String_equals(String_CONST("user1"),out[0]));'), (26, 2, u'-    Assert_always(String_equals(String_CONST("user2"),out[1]));'), (28, 1, u'+    Assert_always(List_size(users) == 2);'), (29, 1, u'+    Assert_always(String_equals(String_CONST("user2"),List_getString(users,0)));'), (30, 1, u'+    Assert_always(String_equals(String_CONST("user1"),List_getString(users,1)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_always(count == 0);'), (8, 2, u'-    Assert_always(out == NULL);'), (10, 1, u'+    Assert_always(List_size(users) == -1);'), (14, 2, u'-    Assert_always(count == 1);'), (15, 2, u'-    Assert_always(out != NULL);'), (16, 2, u'-    Assert_always(String_equals(String_CONST("user1"),out[0]));'), (18, 1, u'+    Assert_always(List_size(users) == 1);'), (19, 1, u'+    Assert_always(String_equals(String_CONST("user1"),List_getString(users,0)));'), (23, 2, u'-    Assert_always(count == 2);'), (24, 2, u'-    Assert_always(out != NULL);'), (25, 2, u'-    Assert_always(String_equals(String_CONST("user1"),out[0]));'), (26, 2, u'-    Assert_always(String_equals(String_CONST("user2"),out[1]));'), (28, 1, u'+    Assert_always(List_size(users) == 2);'), (29, 1, u'+    Assert_always(String_equals(String_CONST("user2"),List_getString(users,0)));'), (30, 1, u'+    Assert_always(String_equals(String_CONST("user1"),List_getString(users,1)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        Assert_true(wrapper->nextNonce == 0);')]
===========================================
===========================================
Total add: 18
Total del: 0
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        Assert_true(wrapper->nextNonce == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        Assert_true(wrapper->nextNonce == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        Assert_true(wrapper->nextNonce == 2);')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        Assert_true(wrapper->nextNonce == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        Assert_true(wrapper->nextNonce == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(message->length + message->padding <= BUFFER_SIZE);'), (7, 1, u'+        Assert_always(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: sendMessageToIf2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(message->length + message->padding <= BUFFER_SIZE);'), (7, 1, u'+        Assert_always(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(message->length + message->padding <= BUFFER_SIZE);'), (7, 1, u'+        Assert_always(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(message->length + message->padding <= BUFFER_SIZE);'), (7, 1, u'+        Assert_always(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: sendMessageToIf1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(message->length + message->padding <= BUFFER_SIZE);'), (7, 1, u'+        Assert_always(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(message->length + message->padding <= BUFFER_SIZE);'), (7, 1, u'+        Assert_always(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(if1Msg);'), (7, 1, u'+        Assert_always(if1Msg);'), (10, 1, u'+            Assert_always(0);'), (13, 1, u'+        Assert_always(!if1Msg);')]
===========================================
===========================================
Total add: 8
Total del: 4
Header: sendToIf1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(if1Msg);'), (7, 1, u'+        Assert_always(if1Msg);'), (10, 1, u'+            Assert_always(0);'), (13, 1, u'+        Assert_always(!if1Msg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(if1Msg);'), (7, 1, u'+        Assert_always(if1Msg);'), (10, 1, u'+            Assert_always(0);'), (13, 1, u'+        Assert_always(!if1Msg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(if2Msg);'), (7, 1, u'+        Assert_always(if2Msg);'), (10, 1, u'+            Assert_always(0);'), (13, 1, u'+        Assert_always(!if2Msg);')]
===========================================
===========================================
Total add: 8
Total del: 4
Header: sendToIf2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(if2Msg);'), (7, 1, u'+        Assert_always(if2Msg);'), (10, 1, u'+            Assert_always(0);'), (13, 1, u'+        Assert_always(!if2Msg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(if2Msg);'), (7, 1, u'+        Assert_always(if2Msg);'), (10, 1, u'+            Assert_always(0);'), (13, 1, u'+        Assert_always(!if2Msg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: outgoingFromCryptoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_true(message->bytes == (uint8_t*)dtHeader->switchHeader);')]
===========================================
===========================================
Total add: 1
Total del: 7
Header: sendToSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_true(message->bytes == (uint8_t*)dtHeader->switchHeader);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_true(message->bytes == (uint8_t*)dtHeader->switchHeader);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(message->length > 0 && "Empty packet during handshake");')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(message->length > 0 && "Empty packet during handshake");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(message->length > 0 && "Empty packet during handshake");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-        Assert_true(wrapper->nextNonce == 0);'), (13, 2, u'-        Assert_true(wrapper->nextNonce == 0);'), (21, 1, u'+    Assert_true(wrapper->nextNonce == 0);')]
===========================================
===========================================
Total add: 7
Total del: 11
Header: genReverseHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-        Assert_true(wrapper->nextNonce == 0);'), (13, 2, u'-        Assert_true(wrapper->nextNonce == 0);'), (21, 1, u'+    Assert_true(wrapper->nextNonce == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-        Assert_true(wrapper->nextNonce == 0);'), (13, 2, u'-        Assert_true(wrapper->nextNonce == 0);'), (21, 1, u'+    Assert_true(wrapper->nextNonce == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-        Assert_always(!"wtf why are we communicating with a v0 node?!");')]
===========================================
===========================================
Total add: 18
Total del: 16
Header: sendToSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-        Assert_always(!"wtf why are we communicating with a v0 node?!");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-        Assert_always(!"wtf why are we communicating with a v0 node?!");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+        Assert_always(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeA);'), (3, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeB);'), (4, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeC);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeA);'), (3, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeB);'), (4, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeC);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeA);'), (3, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeB);'), (4, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeC);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeA);'), (3, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeB);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeA);'), (3, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeB);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeA);'), (3, 1, u'+    TestFramework_assertLastMessageUnaltered(tn->nodeB);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(req->msg->length == req->length);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: sendComplete
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(req->msg->length == req->length);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(req->msg->length == req->length);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Allocator_cancelOnFree(si1->onFree));'), (3, 2, u'-    Assert_true(Allocator_cancelOnFree(si2->onFree));'), (4, 1, u'+    Assert_true(Allocator_cancelOnFree(si1->onFree) > -1);'), (5, 1, u'+    Assert_true(Allocator_cancelOnFree(si2->onFree) > -1);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: SwitchCore_swapInterfaces
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Allocator_cancelOnFree(si1->onFree));'), (3, 2, u'-    Assert_true(Allocator_cancelOnFree(si2->onFree));'), (4, 1, u'+    Assert_true(Allocator_cancelOnFree(si1->onFree) > -1);'), (5, 1, u'+    Assert_true(Allocator_cancelOnFree(si2->onFree) > -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(Allocator_cancelOnFree(si1->onFree));'), (3, 2, u'-    Assert_true(Allocator_cancelOnFree(si2->onFree));'), (4, 1, u'+    Assert_true(Allocator_cancelOnFree(si1->onFree) > -1);'), (5, 1, u'+    Assert_true(Allocator_cancelOnFree(si2->onFree) > -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_failure("%s:%d Fatal error: [%s] spaceAvailable [%lu]",'), (3, 1, u'+    Assert_failure("%s:%d Fatal error: [%s] totalBytes [%lu] remaining [%lu]",')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: failure
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_failure("%s:%d Fatal error: [%s] spaceAvailable [%lu]",'), (3, 1, u'+    Assert_failure("%s:%d Fatal error: [%s] totalBytes [%lu] remaining [%lu]",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_failure("%s:%d Fatal error: [%s] spaceAvailable [%lu]",'), (3, 1, u'+    Assert_failure("%s:%d Fatal error: [%s] totalBytes [%lu] remaining [%lu]",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+            Assert_true(!removeJob(job));')]
===========================================
===========================================
Total add: 16
Total del: 11
Header: realFreeAllocator
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+            Assert_true(!removeJob(job));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+            Assert_true(!removeJob(job));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(!ctx->running); // double begin')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: EventBase_beginLoop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(!ctx->running); // double begin')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(!ctx->running); // double begin')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(!alloc || alloc->free == pipe->alloc->free);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: incoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(!alloc || alloc->free == pipe->alloc->free);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(!alloc || alloc->free == pipe->alloc->free);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(alloc && alloc->free == pipe->pub.base->bufferAlloc->free);'), (4, 1, u'+        Assert_true(alloc);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: incoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(alloc && alloc->free == pipe->pub.base->bufferAlloc->free);'), (4, 1, u'+        Assert_true(alloc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(alloc && alloc->free == pipe->pub.base->bufferAlloc->free);'), (4, 1, u'+        Assert_true(alloc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    Assert_true(alloc->free == context->alloc->free);')]
===========================================
===========================================
Total add: 5
Total del: 4
Header: incoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    Assert_true(alloc->free == context->alloc->free);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    Assert_true(alloc->free == context->alloc->free);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always((bytesUsed = MallocAllocator_bytesAllocated(alloc)) == 0);'), (4, 1, u'+    Assert_always(bytesUsed == ALLOCATION_SIZE + sizeof(struct MallocAllocator_FirstCtx));')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always((bytesUsed = MallocAllocator_bytesAllocated(alloc)) == 0);'), (4, 1, u'+    Assert_always(bytesUsed == ALLOCATION_SIZE + sizeof(struct MallocAllocator_FirstCtx));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always((bytesUsed = MallocAllocator_bytesAllocated(alloc)) == 0);'), (4, 1, u'+    Assert_always(bytesUsed == ALLOCATION_SIZE + sizeof(struct MallocAllocator_FirstCtx));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_true(!Sockaddr_parse("fd00::1", &ss));')]
===========================================
===========================================
Total add: 13
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_true(!Sockaddr_parse("fd00::1", &ss));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_true(!Sockaddr_parse("fd00::1", &ss));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(alloc->free == pipe->pub.base->bufferAlloc->free);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: incoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(alloc->free == pipe->pub.base->bufferAlloc->free);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(alloc->free == pipe->pub.base->bufferAlloc->free);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(alloc && alloc->free == pipe->pub.base->bufferAlloc->free);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: incoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(alloc && alloc->free == pipe->pub.base->bufferAlloc->free);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_true(alloc && alloc->free == pipe->pub.base->bufferAlloc->free);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+Assert_compileTime(sizeof(NET_LUID) == 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->length >= 4);'), (3, 1, u'+    Assert_true(msg->length >= 4);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->length >= 4);'), (3, 1, u'+    Assert_true(msg->length >= 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->length >= 4);'), (3, 1, u'+    Assert_true(msg->length >= 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        default Assert_always(!"Unsupported ethertype");'), (11, 1, u'+        Assert_always(!"Unsupported ethertype");')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        default Assert_always(!"Unsupported ethertype");'), (11, 1, u'+        Assert_always(!"Unsupported ethertype");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        default Assert_always(!"Unsupported ethertype");'), (11, 1, u'+        Assert_always(!"Unsupported ethertype");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_failure("%s:%d Fatal error: [%s] spaceAvailable [%" PRIu64 "]",'), (4, 1, u'+    Assert_failure("%s:%d Fatal error: [%s] spaceAvailable [%lu]",')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: failure
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_failure("%s:%d Fatal error: [%s] spaceAvailable [%" PRIu64 "]",'), (4, 1, u'+    Assert_failure("%s:%d Fatal error: [%s] spaceAvailable [%lu]",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_failure("%s:%d Fatal error: [%s] spaceAvailable [%" PRIu64 "]",'), (4, 1, u'+    Assert_failure("%s:%d Fatal error: [%s] spaceAvailable [%lu]",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(EventBase_eventCount(eventBase) == 0);'), (4, 1, u'+    Assert_true(EventBase_eventCount(eventBase) == 2);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(EventBase_eventCount(eventBase) == 0);'), (4, 1, u'+    Assert_true(EventBase_eventCount(eventBase) == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(EventBase_eventCount(eventBase) == 0);'), (4, 1, u'+    Assert_true(EventBase_eventCount(eventBase) == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(EventBase_eventCount(eventBase) == 0);'), (5, 1, u'+    Assert_true(EventBase_eventCount(eventBase) == 2);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(EventBase_eventCount(eventBase) == 0);'), (5, 1, u'+    Assert_true(EventBase_eventCount(eventBase) == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(EventBase_eventCount(eventBase) == 0);'), (5, 1, u'+    Assert_true(EventBase_eventCount(eventBase) == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_always(!context->nextSibling);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: disconnectAllocator
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_always(!context->nextSibling);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        Assert_always(!context->nextSibling);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    Assert_true(0);')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: getParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_true(!Pipe_createUniPipe(pipeToAngel) && !Pipe_createUniPipe(pipeFromAngel));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    Assert_true(!context->lastSibling);'), (14, 1, u'+    Assert_true(!context->adoptions || !context->adoptions->parents);')]
===========================================
===========================================
Total add: 9
Total del: 3
Header: newAllocation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    Assert_true(!context->lastSibling);'), (14, 1, u'+    Assert_true(!context->adoptions || !context->adoptions->parents);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    Assert_true(!context->lastSibling);'), (14, 1, u'+    Assert_true(!context->adoptions || !context->adoptions->parents);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+        Assert_true(found);')]
===========================================
===========================================
Total add: 22
Total del: 13
Header: freeAllocator
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+        Assert_true(found);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+        Assert_true(found);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    Assert_true(req->pipe->queueLen >= 0);')]
===========================================
===========================================
Total add: 66
Total del: 27
Header: struct Pipe_WriteRequest_pvt {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    Assert_true(req->pipe->queueLen >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    Assert_true(req->pipe->queueLen >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(!Pipe_createUniPipe(fds));'), (9, 1, u'+    Assert_true(!Process_spawn(path, args, eb, alloc));'), (11, 2, u'-    Assert_true(!Process_spawn(path, args));'), (16, 2, u'-    Assert_true(len == strlen(MESSAGE));'), (17, 2, u'-    Assert_true(!strcmp(MESSAGE, output));')]
===========================================
===========================================
Total add: 4
Total del: 10
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(!Pipe_createUniPipe(fds));'), (9, 1, u'+    Assert_true(!Process_spawn(path, args, eb, alloc));'), (11, 2, u'-    Assert_true(!Process_spawn(path, args));'), (16, 2, u'-    Assert_true(len == strlen(MESSAGE));'), (17, 2, u'-    Assert_true(!strcmp(MESSAGE, output));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(!Pipe_createUniPipe(fds));'), (9, 1, u'+    Assert_true(!Process_spawn(path, args, eb, alloc));'), (11, 2, u'-    Assert_true(!Process_spawn(path, args));'), (16, 2, u'-    Assert_true(len == strlen(MESSAGE));'), (17, 2, u'-    Assert_true(!strcmp(MESSAGE, output));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            Assert_always(!"Unsupported auth type.");')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: hashPassword
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            Assert_always(!"Unsupported auth type.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            Assert_always(!"Unsupported auth type.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        Assert_failure("Test failed.\\n"')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: testHello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        Assert_failure("Test failed.\\n"')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+        Assert_failure("Test failed.\\n"')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    Assert_always(r->bytesRead(r) == 128+128+128+512+256+300+128);'), (18, 1, u'+    Assert_always(r->bytesRead == 128+128+128+512+256+300+128);')]
===========================================
===========================================
Total add: 8
Total del: 8
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    Assert_always(r->bytesRead(r) == 128+128+128+512+256+300+128);'), (18, 1, u'+    Assert_always(r->bytesRead == 128+128+128+512+256+300+128);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    Assert_always(r->bytesRead(r) == 128+128+128+512+256+300+128);'), (18, 1, u'+    Assert_always(r->bytesRead == 128+128+128+512+256+300+128);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_always(!"Unimplemented");')]
===========================================
===========================================
Total add: 8
Total del: 4
Header: onFree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_always(!"Unimplemented");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_always(!"Unimplemented");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    Assert_failure("%s:%d Fatal error: [%s] spaceAvailable [%" PRIu64 "]",')]
===========================================
===========================================
Total add: 2
Total del: 6
Header: failure
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    Assert_failure("%s:%d Fatal error: [%s] spaceAvailable [%" PRIu64 "]",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    Assert_failure("%s:%d Fatal error: [%s] spaceAvailable [%" PRIu64 "]",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(if1->allocator->notOnFree(si1->onFree, if1->allocator));'), (3, 2, u'-    Assert_true(if2->allocator->notOnFree(si2->onFree, if2->allocator));'), (4, 1, u'+    Assert_true(Allocator_cancelOnFree(si1->onFree));'), (5, 1, u'+    Assert_true(Allocator_cancelOnFree(si2->onFree));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: SwitchCore_swapInterfaces
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(if1->allocator->notOnFree(si1->onFree, if1->allocator));'), (3, 2, u'-    Assert_true(if2->allocator->notOnFree(si2->onFree, if2->allocator));'), (4, 1, u'+    Assert_true(Allocator_cancelOnFree(si1->onFree));'), (5, 1, u'+    Assert_true(Allocator_cancelOnFree(si2->onFree));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(if1->allocator->notOnFree(si1->onFree, if1->allocator));'), (3, 2, u'-    Assert_true(if2->allocator->notOnFree(si2->onFree, if2->allocator));'), (4, 1, u'+    Assert_true(Allocator_cancelOnFree(si1->onFree));'), (5, 1, u'+    Assert_true(Allocator_cancelOnFree(si2->onFree));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+void Assert_failure(const char* format, ...)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_true(len == strlen(MESSAGE));'), (7, 1, u'+    Assert_true(!strcmp(MESSAGE, output));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_true(len == strlen(MESSAGE));'), (7, 1, u'+    Assert_true(!strcmp(MESSAGE, output));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_true(len == strlen(MESSAGE));'), (7, 1, u'+    Assert_true(!strcmp(MESSAGE, output));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    Assert_always(!"Unimplemented");')]
===========================================
===========================================
Total add: 11
Total del: 11
Header: childAllocator
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    Assert_always(!"Unimplemented");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    Assert_always(!"Unimplemented");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(len == strlen(MESSAGE));'), (4, 2, u'-    Assert_true(!strcmp(MESSAGE, output));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(len == strlen(MESSAGE));'), (4, 2, u'-    Assert_true(!strcmp(MESSAGE, output));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(len == strlen(MESSAGE));'), (4, 2, u'-    Assert_true(!strcmp(MESSAGE, output));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(node);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: handleReply
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(node);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(node);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(123, 2, u'-                    Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
Total add: 61
Total del: 56
Header: NodeStore_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(123, 2, u'-                    Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(123, 2, u'-                    Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+                Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));'), (52, 1, u'+       Assert_true(store->headers[i].addressPrefix == Address_getPrefix(&store->nodes[i].address));'), (53, 1, u'+       Assert_true(!(!Bits_memcmp(&store->nodes[i].address.ip6, &addr->ip6, 16)')]
===========================================
===========================================
Total add: 22
Total del: 40
Header: NodeStore_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+                Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));'), (52, 1, u'+       Assert_true(store->headers[i].addressPrefix == Address_getPrefix(&store->nodes[i].address));'), (53, 1, u'+       Assert_true(!(!Bits_memcmp(&store->nodes[i].address.ip6, &addr->ip6, 16)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+                Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));'), (52, 1, u'+       Assert_true(store->headers[i].addressPrefix == Address_getPrefix(&store->nodes[i].address));'), (53, 1, u'+       Assert_true(!(!Bits_memcmp(&store->nodes[i].address.ip6, &addr->ip6, 16)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-        Assert_always(vl->length == vl2->length && vl->length == count);'), (40, 2, u'-            Assert_always(vl2->versions[i] == vl->versions[i]);'), (41, 1, u'+            Assert_always(vl->length == vl2->length && vl->length == count);'), (44, 1, u'+                Assert_always(vl2->versions[i] == vl->versions[i]);')]
===========================================
===========================================
Total add: 21
Total del: 19
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-        Assert_always(vl->length == vl2->length && vl->length == count);'), (40, 2, u'-            Assert_always(vl2->versions[i] == vl->versions[i]);'), (41, 1, u'+            Assert_always(vl->length == vl2->length && vl->length == count);'), (44, 1, u'+                Assert_always(vl2->versions[i] == vl->versions[i]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-        Assert_always(vl->length == vl2->length && vl->length == count);'), (40, 2, u'-            Assert_always(vl2->versions[i] == vl->versions[i]);'), (41, 1, u'+            Assert_always(vl->length == vl2->length && vl->length == count);'), (44, 1, u'+                Assert_always(vl2->versions[i] == vl->versions[i]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_always(!"wtf why are we communicating with a v0 node?!");')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: sendToSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_always(!"wtf why are we communicating with a v0 node?!");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_always(!"wtf why are we communicating with a v0 node?!");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(dt->switchInterface.receiverContext);'), (3, 1, u'+    Assert_always(!dt->switchInterface.receiverContext);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(dt->switchInterface.receiverContext);'), (3, 1, u'+    Assert_always(!dt->switchInterface.receiverContext);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(dt->switchInterface.receiverContext);'), (3, 1, u'+    Assert_always(!dt->switchInterface.receiverContext);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_always(!CanaryAllocator_isOverflow(ctx));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: CanaryAllocator_isOverflow
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_always(!CanaryAllocator_isOverflow(ctx));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_always(!CanaryAllocator_isOverflow(ctx));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    Assert_always(!CanaryAllocator_isOverflow(ctx));')]
===========================================
===========================================
Total add: 19
Total del: 10
Header: newAllocation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    Assert_always(!CanaryAllocator_isOverflow(ctx));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    Assert_always(!CanaryAllocator_isOverflow(ctx));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            Assert_always(ctx->canaryCount > i + 1 && *ctx->canaries[i + 1] == ctx->canaryValue);'), (23, 1, u'+    Assert_true(0);')]
===========================================
===========================================
Total add: 10
Total del: 10
Header: allocatorRealloc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            Assert_always(ctx->canaryCount > i + 1 && *ctx->canaries[i + 1] == ctx->canaryValue);'), (23, 1, u'+    Assert_true(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-            Assert_always(ctx->canaryCount > i + 1 && *ctx->canaries[i + 1] == ctx->canaryValue);'), (23, 1, u'+    Assert_true(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(count == EventBase_eventCount(eventBase));')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: Waiter_getData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(count == EventBase_eventCount(eventBase));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_always(count == EventBase_eventCount(eventBase));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(EventBase_eventCount(eventBase) == 0);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(EventBase_eventCount(eventBase) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(EventBase_eventCount(eventBase) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->length >= 4);')]
===========================================
===========================================
Total add: 1
Total del: 10
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->length >= 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->length >= 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(txid && txid->len >= 4);'), (11, 1, u'+    Assert_true(txid && txid->len >= admin->addrLen);')]
===========================================
===========================================
Total add: 16
Total del: 8
Header: Admin_sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(txid && txid->len >= 4);'), (11, 1, u'+    Assert_true(txid && txid->len >= admin->addrLen);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(txid && txid->len >= 4);'), (11, 1, u'+    Assert_true(txid && txid->len >= admin->addrLen);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(message->length >= 4);'), (10, 1, u'+    Assert_true(message->length >= (int)admin->addrLen);')]
===========================================
===========================================
Total add: 9
Total del: 26
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(message->length >= 4);'), (10, 1, u'+    Assert_true(message->length >= (int)admin->addrLen);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(message->length >= 4);'), (10, 1, u'+    Assert_true(message->length >= (int)admin->addrLen);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(!StandardBencSerializer_get()->parseDictionary(reader, tempAlloc, config));'), (9, 2, u'-    Assert_true(bind);')]
===========================================
===========================================
Total add: 1
Total del: 10
Header: initAngel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(!StandardBencSerializer_get()->parseDictionary(reader, tempAlloc, config));'), (9, 2, u'-    Assert_true(bind);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(!StandardBencSerializer_get()->parseDictionary(reader, tempAlloc, config));'), (9, 2, u'-    Assert_true(bind);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_true(!Sockaddr_parse("0.0.0.0", &addr));')]
===========================================
===========================================
Total add: 9
Total del: 6
Header: AdminTestFramework_setUp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_true(!Sockaddr_parse("0.0.0.0", &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    Assert_true(!Sockaddr_parse("0.0.0.0", &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(!evutil_parse_sockaddr_port(addrStr->bytes, (struct sockaddr*) &addr, &addrLen));')]
===========================================
===========================================
Total add: 1
Total del: 6
Header: AdminTestFramework_setUp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(!evutil_parse_sockaddr_port(addrStr->bytes, (struct sockaddr*) &addr, &addrLen));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_true(!evutil_parse_sockaddr_port(addrStr->bytes, (struct sockaddr*) &addr, &addrLen));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    Assert_true(!Sockaddr_parse("0.0.0.0", &ss));'), (12, 1, u'+    Assert_true(4 == Sockaddr_getAddress(dest, &addr));')]
===========================================
===========================================
Total add: 7
Total del: 4
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    Assert_true(!Sockaddr_parse("0.0.0.0", &ss));'), (12, 1, u'+    Assert_true(4 == Sockaddr_getAddress(dest, &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    Assert_true(!Sockaddr_parse("0.0.0.0", &ss));'), (12, 1, u'+    Assert_true(4 == Sockaddr_getAddress(dest, &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(!Sockaddr_parse("[fd00::1]", &addr));')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(!Sockaddr_parse("[fd00::1]", &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    Assert_true(!Sockaddr_parse("[fd00::1]", &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_true(16 == Sockaddr_getAddress(dest, &addrBytes));')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_true(16 == Sockaddr_getAddress(dest, &addrBytes));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_true(16 == Sockaddr_getAddress(dest, &addrBytes));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
Total add: 4
Total del: 7
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(!Sockaddr_parse("127.0.0.1", &addr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        Assert_always(evutil_inet_ntop(AF_INET6, conn->connectionIp6, ip6, 40));'), (8, 1, u'+        Assert_true(16 == Sockaddr_getAddress(addr, &address));'), (16, 2, u'-        Assert_always(evutil_inet_ntop(AF_INET, conn->connectionIp4, ip4, 16));'), (20, 1, u'+        Assert_true(4 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
Total add: 12
Total del: 6
Header: showConn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        Assert_always(evutil_inet_ntop(AF_INET6, conn->connectionIp6, ip6, 40));'), (8, 1, u'+        Assert_true(16 == Sockaddr_getAddress(addr, &address));'), (16, 2, u'-        Assert_always(evutil_inet_ntop(AF_INET, conn->connectionIp4, ip4, 16));'), (20, 1, u'+        Assert_true(4 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-        Assert_always(evutil_inet_ntop(AF_INET6, conn->connectionIp6, ip6, 40));'), (8, 1, u'+        Assert_true(16 == Sockaddr_getAddress(addr, &address));'), (16, 2, u'-        Assert_always(evutil_inet_ntop(AF_INET, conn->connectionIp4, ip4, 16));'), (20, 1, u'+        Assert_true(4 == Sockaddr_getAddress(addr, &address));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+Assert_compileTime(sizeof(union Admin_TxidPrefix) == Admin_TxidPrefix_SIZE);')]
===========================================
===========================================
Total add: 31
Total del: 1
Header: struct Function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+Assert_compileTime(sizeof(union Admin_TxidPrefix) == Admin_TxidPrefix_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+Assert_compileTime(sizeof(union Admin_TxidPrefix) == Admin_TxidPrefix_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-Assert_compileTime(sizeof(union Admin_TxidPrefix) == Admin_TxidPrefix_SIZE);')]
===========================================
===========================================
Total add: 1
Total del: 31
Header: struct Function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-Assert_compileTime(sizeof(union Admin_TxidPrefix) == Admin_TxidPrefix_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-Assert_compileTime(sizeof(union Admin_TxidPrefix) == Admin_TxidPrefix_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    Assert_compileTime(sizeof(addr) == sizeof(struct sockaddr_ll));')]
===========================================
===========================================
Total add: 1
Total del: 9
Header: handleEvent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    Assert_compileTime(sizeof(addr) == sizeof(struct sockaddr_ll));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    Assert_compileTime(sizeof(addr) == sizeof(struct sockaddr_ll));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    Assert_true(pad < 8);')]
===========================================
===========================================
Total add: 14
Total del: 2
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    Assert_true(pad < 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    Assert_true(pad < 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_compileTime(sizeof(addr) == sizeof(struct sockaddr_ll));')]
===========================================
===========================================
Total add: 9
Total del: 1
Header: handleEvent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_compileTime(sizeof(addr) == sizeof(struct sockaddr_ll));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_compileTime(sizeof(addr) == sizeof(struct sockaddr_ll));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(addrLen == SOCKADDR_LL_LEN);')]
===========================================
===========================================
Total add: 9
Total del: 15
Header: handleEvent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(addrLen == SOCKADDR_LL_LEN);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(addrLen == SOCKADDR_LL_LEN);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_true(addrLen == SOCKADDR_LL_LEN);'), (17, 1, u'+    Assert_true(addrLen == SOCKADDR_LL_LEN);')]
===========================================
===========================================
Total add: 22
Total del: 18
Header: handleEvent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_true(addrLen == SOCKADDR_LL_LEN);'), (17, 1, u'+    Assert_true(addrLen == SOCKADDR_LL_LEN);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    Assert_true(addrLen == SOCKADDR_LL_LEN);'), (17, 1, u'+    Assert_true(addrLen == SOCKADDR_LL_LEN);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(strstr(path, "/Process_test"));'), (3, 2, u"-    Assert_true(path[0] == '/');"), (5, 1, u'+        Assert_true(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (6, 1, u'+        Assert_true(strstr(path, ".exe"));'), (8, 1, u"+        Assert_true(path[0] == '/');")]
===========================================
===========================================
Total add: 6
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(strstr(path, "/Process_test"));'), (3, 2, u"-    Assert_true(path[0] == '/');"), (5, 1, u'+        Assert_true(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (6, 1, u'+        Assert_true(strstr(path, ".exe"));'), (8, 1, u"+        Assert_true(path[0] == '/');")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(strstr(path, "/Process_test"));'), (3, 2, u"-    Assert_true(path[0] == '/');"), (5, 1, u'+        Assert_true(strstr(path, ":\\\\") == path + 1); /* C:\\ */'), (6, 1, u'+        Assert_true(strstr(path, ".exe"));'), (8, 1, u"+        Assert_true(path[0] == '/');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-    Assert_true(!"Couldn\'t setup UDP");')]
===========================================
===========================================
Total add: 6
Total del: 13
Header: setupUDP
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-    Assert_true(!"Couldn\'t setup UDP");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-    Assert_true(!"Couldn\'t setup UDP");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_true(udp);')]
===========================================
===========================================
Total add: 9
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_true(udp);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+    Assert_true(udp);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_always(!Bits_memcmp(header->sourceAddr, testAddrA, 16));')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: receiveMessageTUN
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_always(!Bits_memcmp(header->sourceAddr, testAddrA, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_always(!Bits_memcmp(header->sourceAddr, testAddrA, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(header->sourceAddr[0] == 0xfc);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: receiveMessageTUN
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(header->sourceAddr[0] == 0xfc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(header->sourceAddr[0] == 0xfc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(header->sourceAddr, testAddrA, 16));'), (5, 1, u'+        Assert_always(header->sourceAddr[0] == 0xfc);')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: receiveMessageTUN
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(header->sourceAddr, testAddrA, 16));'), (5, 1, u'+        Assert_always(header->sourceAddr[0] == 0xfc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!Bits_memcmp(header->sourceAddr, testAddrA, 16));'), (5, 1, u'+        Assert_always(header->sourceAddr[0] == 0xfc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingTunC
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingTunB
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingTunA
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingTunB
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingTunA
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(message) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(message) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: messageToTun
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(message) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(message) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(TUNInterface_popMessageType(message) == Ethernet_TYPE_IP6);'), (3, 1, u'+    Assert_true(TUNMessageType_pop(message) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length == Headers_IP6Header_SIZE + Headers_UDPHeader_SIZE + 12);')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: receiveMessageTUN
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length == Headers_IP6Header_SIZE + Headers_UDPHeader_SIZE + 12);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(msg->length == Headers_IP6Header_SIZE + Headers_UDPHeader_SIZE + 12);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ethertype == Ethernet_TYPE_IP4);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: receiveMessageTUN
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ethertype == Ethernet_TYPE_IP4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ethertype == Ethernet_TYPE_IP4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ethertype == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: receiveMessageTUN
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ethertype == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ethertype == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(ep->switchIf.senderContext == ep);'), (5, 2, u'-    Assert_true(ep->internal.sendMessage);')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: sendFromSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(ep->switchIf.senderContext == ep);'), (5, 2, u'-    Assert_true(ep->internal.sendMessage);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(ep->switchIf.senderContext == ep);'), (5, 2, u'-    Assert_true(ep->internal.sendMessage);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_true(index >= 0);')]
===========================================
===========================================
Total add: 5
Total del: 32
Header: closeInterface
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_true(index >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_true(index >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!SwitchCore_addInterface(&ep->switchIf, 0, &ep->switchLabel, ic->switchCore));')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: registerPeer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!SwitchCore_addInterface(&ep->switchIf, 0, &ep->switchLabel, ic->switchCore));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!SwitchCore_addInterface(&ep->switchIf, 0, &ep->switchLabel, ic->switchCore));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_always(ethertype == Ethernet_TYPE_IP4);')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: receiveMessageTUN
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_always(ethertype == Ethernet_TYPE_IP4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_always(ethertype == Ethernet_TYPE_IP4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_always(ethertype == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: receiveMessageTUN
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_always(ethertype == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    Assert_always(ethertype == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(ep->switchIf.senderContext == ep);'), (6, 1, u'+    Assert_true(ep->internal.sendMessage);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: sendFromSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(ep->switchIf.senderContext == ep);'), (6, 1, u'+    Assert_true(ep->internal.sendMessage);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(ep->switchIf.senderContext == ep);'), (6, 1, u'+    Assert_true(ep->internal.sendMessage);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    Assert_true(!SwitchCore_addInterface(&ep->switchIf, 0, &ep->switchLabel, ic->switchCore));')]
===========================================
===========================================
Total add: 4
Total del: 6
Header: registerPeer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    Assert_true(!SwitchCore_addInterface(&ep->switchIf, 0, &ep->switchLabel, ic->switchCore));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    Assert_true(!SwitchCore_addInterface(&ep->switchIf, 0, &ep->switchLabel, ic->switchCore));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ethertype == Ethernet_TYPE_IP4);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: receiveMessageTUN
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ethertype == Ethernet_TYPE_IP4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ethertype == Ethernet_TYPE_IP4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ethertype == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: receiveMessageTUN
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ethertype == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(ethertype == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(ep->switchIf.senderContext == ep);'), (5, 2, u'-    Assert_true(ep->internal.sendMessage);')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: sendFromSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(ep->switchIf.senderContext == ep);'), (5, 2, u'-    Assert_true(ep->internal.sendMessage);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(ep->switchIf.senderContext == ep);'), (5, 2, u'-    Assert_true(ep->internal.sendMessage);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!SwitchCore_addInterface(&ep->switchIf, 0, &ep->switchLabel, ic->switchCore));')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: registerPeer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!SwitchCore_addInterface(&ep->switchIf, 0, &ep->switchLabel, ic->switchCore));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!SwitchCore_addInterface(&ep->switchIf, 0, &ep->switchLabel, ic->switchCore));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(&context->interface == ethIf);')]
===========================================
===========================================
Total add: 2
Total del: 5
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(&context->interface == ethIf);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(&context->interface == ethIf);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(registerInterfaceCalls == 1);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(registerInterfaceCalls == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(registerInterfaceCalls == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-Assert_compileTime(sizeof(struct MapKey) == InterfaceController_KEY_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(!SwitchCore_addInterface(&ep->switchIf, 0, &ep->switchLabel, ic->switchCore));')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: insertEndpoint
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(!SwitchCore_addInterface(&ep->switchIf, 0, &ep->switchLabel, ic->switchCore));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_true(!SwitchCore_addInterface(&ep->switchIf, 0, &ep->switchLabel, ic->switchCore));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: incomingTunC
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: incomingTunB
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: incomingTunA
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: incomingTunB
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: incomingTunA
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(msg) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(message) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: messageToTun
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(message) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(TUNInterface_popMessageType(message) == Ethernet_TYPE_IP6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(&context->interface == iface);'), (5, 1, u'+    Assert_true(&context->pub.generic == iface);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(&context->interface == iface);'), (5, 1, u'+    Assert_true(&context->pub.generic == iface);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(&context->interface == iface);'), (5, 1, u'+    Assert_true(&context->pub.generic == iface);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (9, 2, u'-            Assert_true(!Bits_memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));')]
===========================================
===========================================
Total add: 1
Total del: 6
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (9, 2, u'-            Assert_true(!Bits_memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (9, 2, u'-            Assert_true(!Bits_memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->padding >= sizeof(union Headers_CryptoAuth) || !"not enough padding");')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->padding >= sizeof(union Headers_CryptoAuth) || !"not enough padding");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(message->padding >= sizeof(union Headers_CryptoAuth) || !"not enough padding");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(message->length == strlen(expectedResponse));'), (3, 1, u'+    Assert_always(message->length == (int32_t) strlen(expectedResponse));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: responseWithIpCallback
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(message->length == strlen(expectedResponse));'), (3, 1, u'+    Assert_always(message->length == (int32_t) strlen(expectedResponse));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(message->length == strlen(expectedResponse));'), (3, 1, u'+    Assert_always(message->length == (int32_t) strlen(expectedResponse));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-        Assert_true(context->ip6Header == ip6);'), (40, 1, u'+        Assert_true(!Bits_memcmp(header->sourceAddr, context->myAddr.ip6.bytes, 16));')]
===========================================
===========================================
Total add: 23
Total del: 16
Header: core
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-        Assert_true(context->ip6Header == ip6);'), (40, 1, u'+        Assert_true(!Bits_memcmp(header->sourceAddr, context->myAddr.ip6.bytes, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-        Assert_true(context->ip6Header == ip6);'), (40, 1, u'+        Assert_true(!Bits_memcmp(header->sourceAddr, context->myAddr.ip6.bytes, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 2, u'-            Assert_always(false);')]
===========================================
===========================================
Total add: 23
Total del: 28
Header: outgoingFromCryptoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 2, u'-            Assert_always(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 2, u'-            Assert_always(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(false);'), (4, 1, u'+        Assert_always(false);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(false);'), (4, 1, u'+        Assert_always(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(false);'), (4, 1, u'+        Assert_always(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0 == memcmp("d6:cookie", ctx->slowClient.buf, 9));'), (3, 1, u'+        Assert_always(0 == Bits_memcmp("d6:cookie", ctx->slowClient.buf, 9));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: slowClientIncoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0 == memcmp("d6:cookie", ctx->slowClient.buf, 9));'), (3, 1, u'+        Assert_always(0 == Bits_memcmp("d6:cookie", ctx->slowClient.buf, 9));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_always(0 == memcmp("d6:cookie", ctx->slowClient.buf, 9));'), (3, 1, u'+        Assert_always(0 == Bits_memcmp("d6:cookie", ctx->slowClient.buf, 9));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(!memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));'), (3, 1, u'+            Assert_true(!Bits_memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(!memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));'), (3, 1, u'+            Assert_true(!Bits_memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            Assert_true(!memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));'), (3, 1, u'+            Assert_true(!Bits_memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!memcmp(expected, output, 56));'), (3, 1, u'+    Assert_always(!Bits_memcmp(expected, output, 56));'), (6, 2, u'-    Assert_always(m.length == 12 && !memcmp(m.bytes, "hello world", m.length));'), (7, 1, u'+    Assert_always(m.length == 12 && !Bits_memcmp(m.bytes, "hello world", m.length));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: encryptRndNonceTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!memcmp(expected, output, 56));'), (3, 1, u'+    Assert_always(!Bits_memcmp(expected, output, 56));'), (6, 2, u'-    Assert_always(m.length == 12 && !memcmp(m.bytes, "hello world", m.length));'), (7, 1, u'+    Assert_always(m.length == 12 && !Bits_memcmp(m.bytes, "hello world", m.length));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!memcmp(expected, output, 56));'), (3, 1, u'+    Assert_always(!Bits_memcmp(expected, output, 56));'), (6, 2, u'-    Assert_always(m.length == 12 && !memcmp(m.bytes, "hello world", m.length));'), (7, 1, u'+    Assert_always(m.length == 12 && !Bits_memcmp(m.bytes, "hello world", m.length));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(ca->publicKey, publicKey, 32) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(ca->publicKey, publicKey, 32) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: createNew
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(ca->publicKey, publicKey, 32) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(ca->publicKey, publicKey, 32) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(ca->publicKey, publicKey, 32) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(ca->publicKey, publicKey, 32) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(hello, finalOut->bytes, 12) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: receiveHelloWithNoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(hello, finalOut->bytes, 12) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(hello, finalOut->bytes, 12) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));'), (3, 1, u'+    Assert_always(!Bits_memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: repeatHello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));'), (3, 1, u'+    Assert_always(!Bits_memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));'), (3, 1, u'+    Assert_always(!Bits_memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(hello, finalOut->bytes, 12) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: repeatHello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(hello, finalOut->bytes, 12) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(hello, finalOut->bytes, 12) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_true(!memcmp(realAddr, addr->ip6.bytes, 16));'), (3, 1, u'+                    Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NodeStore_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_true(!memcmp(realAddr, addr->ip6.bytes, 16));'), (3, 1, u'+                    Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    Assert_true(!memcmp(realAddr, addr->ip6.bytes, 16));'), (3, 1, u'+                    Assert_true(!Bits_memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    #define CMP(x) Assert_always(!memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x'), (3, 1, u'+    #define CMP(x) Assert_always(!Bits_memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    #define CMP(x) Assert_always(!memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x'), (3, 1, u'+    #define CMP(x) Assert_always(!Bits_memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    #define CMP(x) Assert_always(!memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x'), (3, 1, u'+    #define CMP(x) Assert_always(!Bits_memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+Assert_compileTime(sizeof(struct MapKey) == InterfaceController_KEY_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            Assert_true(i == 0 || thisEp == ep);')]
===========================================
===========================================
Total add: 3
Total del: 11
Header: moveEndpointIfNeeded
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            Assert_true(i == 0 || thisEp == ep);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            Assert_true(i == 0 || thisEp == ep);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-            Assert_true(&ep->internal == ic->imap->interfaces[index]);'), (11, 2, u'-            Assert_true(!memcmp(key, ep->key, InterfaceController_KEY_SIZE));'), (12, 1, u'+            Assert_true(!Bits_memcmp(key, &ep->key, InterfaceController_KEY_SIZE));')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: getEndpoint
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-            Assert_true(&ep->internal == ic->imap->interfaces[index]);'), (11, 2, u'-            Assert_true(!memcmp(key, ep->key, InterfaceController_KEY_SIZE));'), (12, 1, u'+            Assert_true(!Bits_memcmp(key, &ep->key, InterfaceController_KEY_SIZE));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-            Assert_true(&ep->internal == ic->imap->interfaces[index]);'), (11, 2, u'-            Assert_true(!memcmp(key, ep->key, InterfaceController_KEY_SIZE));'), (12, 1, u'+            Assert_true(!Bits_memcmp(key, &ep->key, InterfaceController_KEY_SIZE));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == memcmp(address.key, publicKey, 32));'), (3, 1, u'+    Assert_always(0 == Bits_memcmp(address.key, publicKey, 32));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == memcmp(address.key, publicKey, 32));'), (3, 1, u'+    Assert_always(0 == Bits_memcmp(address.key, publicKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == memcmp(address.key, publicKey, 32));'), (3, 1, u'+    Assert_always(0 == Bits_memcmp(address.key, publicKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity == &IpTunnel_IDENTITY);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: IpTunnel_allowConnection
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity == &IpTunnel_IDENTITY);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity == &IpTunnel_IDENTITY);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity == &IpTunnel_IDENTITY);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: IpTunnel_connectTo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity == &IpTunnel_IDENTITY);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity == &IpTunnel_IDENTITY);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity == &IpTunnel_IDENTITY);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: IpTunnel_removeConnection
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity == &IpTunnel_IDENTITY);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity == &IpTunnel_IDENTITY);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity = &IpTunnel_IDENTITY);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: incomingFromTun
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity = &IpTunnel_IDENTITY);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity = &IpTunnel_IDENTITY);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity = &IpTunnel_IDENTITY);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: incomingFromNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity = &IpTunnel_IDENTITY);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->identity = &IpTunnel_IDENTITY);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(bytes, bytes2, 32) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(bytes, bytes2, 32) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(bytes, bytes2, 32) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(bytes, bytes2, 32) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(bytes, bytes2, 32) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(memcmp(bytes, bytes2, 32) == 0);'), (3, 1, u'+    Assert_always(Bits_memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!pipe(fds));'), (3, 1, u'+    Assert_true(!Pipe_createUniPipe(fds));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!pipe(fds));'), (3, 1, u'+    Assert_true(!Pipe_createUniPipe(fds));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!pipe(fds));'), (3, 1, u'+    Assert_true(!Pipe_createUniPipe(fds));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+            Assert_always(false);'), (60, 1, u'+            Assert_always(false);')]
===========================================
===========================================
Total add: 53
Total del: 4
Header: incomingFromRouter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+            Assert_always(false);'), (60, 1, u'+            Assert_always(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+            Assert_always(false);'), (60, 1, u'+            Assert_always(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 2, u'-        Assert_always(index == Map_OfLongsByInteger_indexForHandle(handle, map));'), (48, 1, u'+                        Assert_true(!"map out of order");'), (55, 1, u'+                Assert_true(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    Assert_true(false);'), (31, 2, u'-    Assert_true(false);')]
===========================================
===========================================
Total add: 4
Total del: 23
Header: incomingFromRouter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    Assert_true(false);'), (31, 2, u'-    Assert_true(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    Assert_true(false);'), (31, 2, u'-    Assert_true(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_always(n);')]
===========================================
===========================================
Total add: 1
Total del: 5
Header: handleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_always(n);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_always(n);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_always(n);')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: handleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_always(n);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_always(n);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(false);')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+        Assert_true(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!pipe(pipeToAngel) && !pipe(pipeFromAngel));'), (3, 1, u'+    Assert_true(!Pipe_createUniPipe(pipeToAngel) && !Pipe_createUniPipe(pipeFromAngel));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: spawnAngel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!pipe(pipeToAngel) && !pipe(pipeFromAngel));'), (3, 1, u'+    Assert_true(!Pipe_createUniPipe(pipeToAngel) && !Pipe_createUniPipe(pipeFromAngel));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!pipe(pipeToAngel) && !pipe(pipeFromAngel));'), (3, 1, u'+    Assert_true(!Pipe_createUniPipe(pipeToAngel) && !Pipe_createUniPipe(pipeFromAngel));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_always(c == Endian_hostToBigEndian16(sc));'), (3, 1, u'+        Assert_always(c == Endian_hostToLittleEndian16(c));'), (4, 1, u'+        Assert_always(c == Endian_hostToLittleEndian16(c));'), (7, 2, u'-        Assert_always(a == Endian_littleEndianToHost32(a));'), (8, 1, u'+        Assert_always(a == Endian_hostToBigEndian32(sa));'), (9, 1, u'+        Assert_always(a == Endian_hostToLittleEndian32(a));'), (10, 1, u'+        Assert_always(a == Endian_hostToLittleEndian32(a));'), (13, 1, u'+        Assert_always(b == Endian_hostToBigEndian64(sb));'), (14, 1, u'+        Assert_always(b == Endian_hostToLittleEndian64(b));'), (15, 1, u'+        Assert_always(b == Endian_hostToLittleEndian64(b));'), (18, 1, u'+        Assert_always(c == Endian_hostToBigEndian16(c));'), (19, 1, u'+        Assert_always(c == Endian_hostToLittleEndian16(sc));'), (20, 1, u'+        Assert_always(c == Endian_hostToLittleEndian16(sc));'), (23, 2, u'-        Assert_always(a == Endian_littleEndianToHost32(sa));'), (24, 1, u'+        Assert_always(a == Endian_hostToBigEndian32(a));'), (25, 1, u'+        Assert_always(a == Endian_hostToLittleEndian32(sa));'), (26, 1, u'+        Assert_always(a == Endian_hostToLittleEndian32(sa));'), (29, 1, u'+        Assert_always(b == Endian_hostToBigEndian64(b));'), (30, 1, u'+        Assert_always(b == Endian_hostToLittleEndian64(sb));'), (31, 1, u'+        Assert_always(b == Endian_hostToLittleEndian64(sb));')]
===========================================
===========================================
Total add: 22
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_always(c == Endian_hostToBigEndian16(sc));'), (3, 1, u'+        Assert_always(c == Endian_hostToLittleEndian16(c));'), (4, 1, u'+        Assert_always(c == Endian_hostToLittleEndian16(c));'), (7, 2, u'-        Assert_always(a == Endian_littleEndianToHost32(a));'), (8, 1, u'+        Assert_always(a == Endian_hostToBigEndian32(sa));'), (9, 1, u'+        Assert_always(a == Endian_hostToLittleEndian32(a));'), (10, 1, u'+        Assert_always(a == Endian_hostToLittleEndian32(a));'), (13, 1, u'+        Assert_always(b == Endian_hostToBigEndian64(sb));'), (14, 1, u'+        Assert_always(b == Endian_hostToLittleEndian64(b));'), (15, 1, u'+        Assert_always(b == Endian_hostToLittleEndian64(b));'), (18, 1, u'+        Assert_always(c == Endian_hostToBigEndian16(c));'), (19, 1, u'+        Assert_always(c == Endian_hostToLittleEndian16(sc));'), (20, 1, u'+        Assert_always(c == Endian_hostToLittleEndian16(sc));'), (23, 2, u'-        Assert_always(a == Endian_littleEndianToHost32(sa));'), (24, 1, u'+        Assert_always(a == Endian_hostToBigEndian32(a));'), (25, 1, u'+        Assert_always(a == Endian_hostToLittleEndian32(sa));'), (26, 1, u'+        Assert_always(a == Endian_hostToLittleEndian32(sa));'), (29, 1, u'+        Assert_always(b == Endian_hostToBigEndian64(b));'), (30, 1, u'+        Assert_always(b == Endian_hostToLittleEndian64(sb));'), (31, 1, u'+        Assert_always(b == Endian_hostToLittleEndian64(sb));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        Assert_always(c == Endian_hostToBigEndian16(sc));'), (3, 1, u'+        Assert_always(c == Endian_hostToLittleEndian16(c));'), (4, 1, u'+        Assert_always(c == Endian_hostToLittleEndian16(c));'), (7, 2, u'-        Assert_always(a == Endian_littleEndianToHost32(a));'), (8, 1, u'+        Assert_always(a == Endian_hostToBigEndian32(sa));'), (9, 1, u'+        Assert_always(a == Endian_hostToLittleEndian32(a));'), (10, 1, u'+        Assert_always(a == Endian_hostToLittleEndian32(a));'), (13, 1, u'+        Assert_always(b == Endian_hostToBigEndian64(sb));'), (14, 1, u'+        Assert_always(b == Endian_hostToLittleEndian64(b));'), (15, 1, u'+        Assert_always(b == Endian_hostToLittleEndian64(b));'), (18, 1, u'+        Assert_always(c == Endian_hostToBigEndian16(c));'), (19, 1, u'+        Assert_always(c == Endian_hostToLittleEndian16(sc));'), (20, 1, u'+        Assert_always(c == Endian_hostToLittleEndian16(sc));'), (23, 2, u'-        Assert_always(a == Endian_littleEndianToHost32(sa));'), (24, 1, u'+        Assert_always(a == Endian_hostToBigEndian32(a));'), (25, 1, u'+        Assert_always(a == Endian_hostToLittleEndian32(sa));'), (26, 1, u'+        Assert_always(a == Endian_hostToLittleEndian32(sa));'), (29, 1, u'+        Assert_always(b == Endian_hostToBigEndian64(b));'), (30, 1, u'+        Assert_always(b == Endian_hostToLittleEndian64(sb));'), (31, 1, u'+        Assert_always(b == Endian_hostToLittleEndian64(sb));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(c == Endian_byteSwap16(sc));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(c == Endian_byteSwap16(sc));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_always(c == Endian_byteSwap16(sc));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->nextConnectionNumber < (UINT32_MAX >> 2));'), (5, 1, u'+    Assert_true(context->nextConnectionNumber < (UINT32_MAX >> 1));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: newConnection
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->nextConnectionNumber < (UINT32_MAX >> 2));'), (5, 1, u'+    Assert_true(context->nextConnectionNumber < (UINT32_MAX >> 1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_true(context->nextConnectionNumber < (UINT32_MAX >> 2));'), (5, 1, u'+    Assert_true(context->nextConnectionNumber < (UINT32_MAX >> 1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!strcmp("d5:error37:publicKey must be 52 characters long.e",'), (3, 1, u'+    Assert_always(!strcmp("d5:error30:key must be 52 characters longe",')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!strcmp("d5:error37:publicKey must be 52 characters long.e",'), (3, 1, u'+    Assert_always(!strcmp("d5:error30:key must be 52 characters longe",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(!strcmp("d5:error37:publicKey must be 52 characters long.e",'), (3, 1, u'+    Assert_always(!strcmp("d5:error30:key must be 52 characters longe",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(ctx.message);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: InterfaceWaiter_waitForData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(ctx.message);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(ctx.message);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 2, u'-Assert_compileTime(sizeof(struct Admin_MessageHeader) == Admin_MessageHeader_SIZE);')]
===========================================
===========================================
Total add: 0
Total del: 71
Header: struct Function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 2, u'-Assert_compileTime(sizeof(struct Admin_MessageHeader) == Admin_MessageHeader_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 2, u'-Assert_compileTime(sizeof(struct Admin_MessageHeader) == Admin_MessageHeader_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+    Assert_true(channelNum < Angel_MAX_CONNECTIONS);'), (53, 2, u'-    Assert_compileTime(AngelChan_MAX_API_REQUEST_SIZE == AngelChan_MAX_MESSAGE_SIZE);'), (55, 2, u'-    Assert_true(length <= AngelChan_MAX_MESSAGE_SIZE);')]
===========================================
===========================================
Total add: 14
Total del: 51
Header: adminChannelFindById
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+    Assert_true(channelNum < Angel_MAX_CONNECTIONS);'), (53, 2, u'-    Assert_compileTime(AngelChan_MAX_API_REQUEST_SIZE == AngelChan_MAX_MESSAGE_SIZE);'), (55, 2, u'-    Assert_true(length <= AngelChan_MAX_MESSAGE_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+    Assert_true(channelNum < Angel_MAX_CONNECTIONS);'), (53, 2, u'-    Assert_compileTime(AngelChan_MAX_API_REQUEST_SIZE == AngelChan_MAX_MESSAGE_SIZE);'), (55, 2, u'-    Assert_true(length <= AngelChan_MAX_MESSAGE_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(txid);'), (3, 1, u'+    Assert_true(txid && txid->len >= 4);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: Admin_sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(txid);'), (3, 1, u'+    Assert_true(txid && txid->len >= 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(txid);'), (3, 1, u'+    Assert_true(txid && txid->len >= 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-    Assert_true(*have < bufSize);'), (34, 2, u'-    Assert_true(maxRead > 0);'), (40, 2, u'-    Assert_always(maxRead > 0);'), (41, 2, u'-    Assert_always(maxRead <= INT_MAX);'), (59, 2, u'-    Assert_always(amount > 0);'), (60, 2, u'-    Assert_true(amount <= (ssize_t) maxRead);'), (63, 2, u'-    Assert_true(*have <= bufSize);'), (71, 2, u'-    Assert_true(admin->messageHeader.length > 0);'), (74, 2, u'-        Assert_true(NULL == channel->allocator);'), (78, 2, u'-        Assert_true(0 == channel->bufferLen);'), (81, 2, u'-    Assert_true(channel->bufferLen < AngelChan_MAX_API_REQUEST_SIZE);'), (102, 1, u'+    Assert_true(message->length >= 4);'), (115, 2, u'-    Assert_true(admin->messageHeader.length > 0);')]
===========================================
===========================================
Total add: 28
Total del: 496
Header: inFromChildDecode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-    Assert_true(*have < bufSize);'), (34, 2, u'-    Assert_true(maxRead > 0);'), (40, 2, u'-    Assert_always(maxRead > 0);'), (41, 2, u'-    Assert_always(maxRead <= INT_MAX);'), (59, 2, u'-    Assert_always(amount > 0);'), (60, 2, u'-    Assert_true(amount <= (ssize_t) maxRead);'), (63, 2, u'-    Assert_true(*have <= bufSize);'), (71, 2, u'-    Assert_true(admin->messageHeader.length > 0);'), (74, 2, u'-        Assert_true(NULL == channel->allocator);'), (78, 2, u'-        Assert_true(0 == channel->bufferLen);'), (81, 2, u'-    Assert_true(channel->bufferLen < AngelChan_MAX_API_REQUEST_SIZE);'), (102, 1, u'+    Assert_true(message->length >= 4);'), (115, 2, u'-    Assert_true(admin->messageHeader.length > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-    Assert_true(*have < bufSize);'), (34, 2, u'-    Assert_true(maxRead > 0);'), (40, 2, u'-    Assert_always(maxRead > 0);'), (41, 2, u'-    Assert_always(maxRead <= INT_MAX);'), (59, 2, u'-    Assert_always(amount > 0);'), (60, 2, u'-    Assert_true(amount <= (ssize_t) maxRead);'), (63, 2, u'-    Assert_true(*have <= bufSize);'), (71, 2, u'-    Assert_true(admin->messageHeader.length > 0);'), (74, 2, u'-        Assert_true(NULL == channel->allocator);'), (78, 2, u'-        Assert_true(0 == channel->bufferLen);'), (81, 2, u'-    Assert_true(channel->bufferLen < AngelChan_MAX_API_REQUEST_SIZE);'), (102, 1, u'+    Assert_true(message->length >= 4);'), (115, 2, u'-    Assert_true(admin->messageHeader.length > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-    Assert_true(oldAmount < totalExpected);')]
===========================================
===========================================
Total add: 15
Total del: 53
Header: struct AngelContext
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-    Assert_true(oldAmount < totalExpected);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-    Assert_true(oldAmount < totalExpected);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    Assert_true(message->length >= 4);')]
===========================================
===========================================
Total add: 15
Total del: 33
Header: handleMessageForAngel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    Assert_true(message->length >= 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    Assert_true(message->length >= 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-    Assert_always(String_equals(password, retPassword));'), (38, 1, u'+    Assert_true(!evutil_parse_sockaddr_port(addrStr->bytes, (struct sockaddr*) &addr, &addrLen));')]
===========================================
===========================================
Total add: 17
Total del: 18
Header: AdminTestFramework_setUp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-    Assert_always(String_equals(password, retPassword));'), (38, 1, u'+    Assert_true(!evutil_parse_sockaddr_port(addrStr->bytes, (struct sockaddr*) &addr, &addrLen));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-    Assert_always(String_equals(password, retPassword));'), (38, 1, u'+    Assert_true(!evutil_parse_sockaddr_port(addrStr->bytes, (struct sockaddr*) &addr, &addrLen));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_always(toAngelF != NULL);')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: Core_main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_always(toAngelF != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_always(toAngelF != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_always(toAngelF != NULL);')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_always(toAngelF != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    Assert_always(toAngelF != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(addrLen == SOCKADDR_LL_LEN);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: handleEvent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(addrLen == SOCKADDR_LL_LEN);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(addrLen == SOCKADDR_LL_LEN);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(addrLen == sizeof(addr) - 2); // XXX: because of the 2 nulls in sll_addr?')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: handleEvent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(addrLen == sizeof(addr) - 2); // XXX: because of the 2 nulls in sll_addr?')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(addrLen == sizeof(addr) - 2); // XXX: because of the 2 nulls in sll_addr?')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(addrLen == sizeof(struct sockaddr_ll));'), (13, 1, u'+    Assert_true(addrLen == sizeof(addr) - 2); // XXX: because of the 2 nulls in sll_addr?')]
===========================================
===========================================
Total add: 16
Total del: 2
Header: printf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(addrLen == sizeof(struct sockaddr_ll));'), (13, 1, u'+    Assert_true(addrLen == sizeof(addr) - 2); // XXX: because of the 2 nulls in sll_addr?')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    Assert_true(addrLen == sizeof(struct sockaddr_ll));'), (13, 1, u'+    Assert_true(addrLen == sizeof(addr) - 2); // XXX: because of the 2 nulls in sll_addr?')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u"+    Assert_true(key[6] == 'e' && key[7] == 'n');")]
===========================================
===========================================
Total add: 3
Total del: 19
Header: sockaddrForKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u"+    Assert_true(key[6] == 'e' && key[7] == 'n');")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u"+    Assert_true(key[6] == 'e' && key[7] == 'n');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    Assert_true(addrLen == sizeof(struct sockaddr_ll));')]
===========================================
===========================================
Total add: 2
Total del: 5
Header: handleEvent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    Assert_true(addrLen == sizeof(struct sockaddr_ll));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    Assert_true(addrLen == sizeof(struct sockaddr_ll));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-    Assert_true(&context->interface == iface);'), (27, 1, u'+    Assert_true(&context->interface == ethIf);')]
===========================================
===========================================
Total add: 40
Total del: 11
Header: sockaddrForKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-    Assert_true(&context->interface == iface);'), (27, 1, u'+    Assert_true(&context->interface == ethIf);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-    Assert_true(&context->interface == iface);'), (27, 1, u'+    Assert_true(&context->interface == ethIf);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_compileTime(MAX_API_REQUEST_SIZE == MAX_MESSAGE_SIZE);'), (6, 1, u'+    Assert_compileTime(AngelChan_MAX_API_REQUEST_SIZE == AngelChan_MAX_MESSAGE_SIZE);'), (8, 2, u'-    Assert_true(length <= MAX_MESSAGE_SIZE);'), (9, 1, u'+    Assert_true(length <= AngelChan_MAX_MESSAGE_SIZE);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: adminChannelSendData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_compileTime(MAX_API_REQUEST_SIZE == MAX_MESSAGE_SIZE);'), (6, 1, u'+    Assert_compileTime(AngelChan_MAX_API_REQUEST_SIZE == AngelChan_MAX_MESSAGE_SIZE);'), (8, 2, u'-    Assert_true(length <= MAX_MESSAGE_SIZE);'), (9, 1, u'+    Assert_true(length <= AngelChan_MAX_MESSAGE_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    Assert_compileTime(MAX_API_REQUEST_SIZE == MAX_MESSAGE_SIZE);'), (6, 1, u'+    Assert_compileTime(AngelChan_MAX_API_REQUEST_SIZE == AngelChan_MAX_MESSAGE_SIZE);'), (8, 2, u'-    Assert_true(length <= MAX_MESSAGE_SIZE);'), (9, 1, u'+    Assert_true(length <= AngelChan_MAX_MESSAGE_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(channel->bufferLen < MAX_API_REQUEST_SIZE);'), (3, 1, u'+    Assert_true(channel->bufferLen < AngelChan_MAX_API_REQUEST_SIZE);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: inFromChildRead
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(channel->bufferLen < MAX_API_REQUEST_SIZE);'), (3, 1, u'+    Assert_true(channel->bufferLen < AngelChan_MAX_API_REQUEST_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(channel->bufferLen < MAX_API_REQUEST_SIZE);'), (3, 1, u'+    Assert_true(channel->bufferLen < AngelChan_MAX_API_REQUEST_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+Assert_compileTime(sizeof(struct RouteMessage) == 172);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: struct RouteMessage {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+Assert_compileTime(sizeof(struct RouteMessage) == 172);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+Assert_compileTime(sizeof(struct RouteMessage) == 172);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_always(!memcmp(ifr, ifr2, sizeof(struct lifreq)));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: Bits_memcpy
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_always(!memcmp(ifr, ifr2, sizeof(struct lifreq)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_always(!memcmp(ifr, ifr2, sizeof(struct lifreq)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(!memcmp(ifr, ifr2, sizeof(struct lifreq));'), (3, 1, u'+Assert_always(!memcmp(ifr, ifr2, sizeof(struct lifreq)));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Bits_memcpy
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(!memcmp(ifr, ifr2, sizeof(struct lifreq));'), (3, 1, u'+Assert_always(!memcmp(ifr, ifr2, sizeof(struct lifreq)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(!memcmp(ifr, ifr2, sizeof(struct lifreq));'), (3, 1, u'+Assert_always(!memcmp(ifr, ifr2, sizeof(struct lifreq)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+assert(!memcmp(ifr, ifr2, sizeof(struct lifreq));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: TUNConfigurator_configure
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+assert(!memcmp(ifr, ifr2, sizeof(struct lifreq));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+assert(!memcmp(ifr, ifr2, sizeof(struct lifreq));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-    Assert_always(String_equals(password, retPassword));'), (32, 2, u'-    Assert_always(client);')]
===========================================
===========================================
Total add: 4
Total del: 28
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-    Assert_always(String_equals(password, retPassword));'), (32, 2, u'-    Assert_always(client);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-    Assert_always(String_equals(password, retPassword));'), (32, 2, u'-    Assert_always(client);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(amount <= maxRead);'), (3, 1, u'+    Assert_true(amount <= (ssize_t) maxRead);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: inFromChildFillBuffer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(amount <= maxRead);'), (3, 1, u'+    Assert_true(amount <= (ssize_t) maxRead);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(amount <= maxRead);'), (3, 1, u'+    Assert_true(amount <= (ssize_t) maxRead);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 1, u'+Assert_compileTime(sizeof(struct Admin_MessageHeader) == Admin_MessageHeader_SIZE);'), (88, 1, u'+Assert_compileTime(sizeof(union Admin_TxidPrefix) == Admin_TxidPrefix_SIZE);')]
===========================================
===========================================
Total add: 103
Total del: 0
Header: struct Function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 1, u'+Assert_compileTime(sizeof(struct Admin_MessageHeader) == Admin_MessageHeader_SIZE);'), (88, 1, u'+Assert_compileTime(sizeof(union Admin_TxidPrefix) == Admin_TxidPrefix_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 1, u'+Assert_compileTime(sizeof(struct Admin_MessageHeader) == Admin_MessageHeader_SIZE);'), (88, 1, u'+Assert_compileTime(sizeof(union Admin_TxidPrefix) == Admin_TxidPrefix_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-    Assert_compileTime(TXID_LEN == 4);')]
===========================================
===========================================
Total add: 91
Total del: 35
Header: incomingFromParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-    Assert_compileTime(TXID_LEN == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-    Assert_compileTime(TXID_LEN == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_compileTime(TXID_LEN == 4);')]
===========================================
===========================================
Total add: 6
Total del: 13
Header: incomingFromClient
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_compileTime(TXID_LEN == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-        Assert_compileTime(TXID_LEN == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(!((uintptr_t)buffer % 2));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: Checksum_engine
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(!((uintptr_t)buffer % 2));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(!((uintptr_t)buffer % 2));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(label == ep->switchLabel);')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: onPingResponse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(label == ep->switchLabel);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_true(label == ep->switchLabel);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(79, 1, u'+    Assert_always(0 == memcmp(address.key, publicKey, 32));'), (80, 1, u'+    Assert_always(0 == strcmp(publicKeyBase32, (char*) publicKeyBase32Out));'), (81, 1, u'+    Assert_always(0 == strcmp(ipv6, (char*) addressOut));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(!((uintptr_t)dmessage->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: handleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(!((uintptr_t)dmessage->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(!((uintptr_t)dmessage->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == NumberCompress_getDecompressed(rev_label, NumberCompress_bitsUsedForLabel(rev_label)));'), (3, 1, u'+    Assert_always(0 == NumberCompress_getDecompressed(rev_label,'), (6, 2, u'-    Assert_always(rev_label == NumberCompress_getCompressed(0, NumberCompress_bitsUsedForLabel(rev_label)));'), (8, 1, u'+    Assert_always(rev_label == out);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: reconnectionNewEndpointTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == NumberCompress_getDecompressed(rev_label, NumberCompress_bitsUsedForLabel(rev_label)));'), (3, 1, u'+    Assert_always(0 == NumberCompress_getDecompressed(rev_label,'), (6, 2, u'-    Assert_always(rev_label == NumberCompress_getCompressed(0, NumberCompress_bitsUsedForLabel(rev_label)));'), (8, 1, u'+    Assert_always(rev_label == out);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(0 == NumberCompress_getDecompressed(rev_label, NumberCompress_bitsUsedForLabel(rev_label)));'), (3, 1, u'+    Assert_always(0 == NumberCompress_getDecompressed(rev_label,'), (6, 2, u'-    Assert_always(rev_label == NumberCompress_getCompressed(0, NumberCompress_bitsUsedForLabel(rev_label)));'), (8, 1, u'+    Assert_always(rev_label == out);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_compileTime(sizeof(struct ErrorPacket) == Headers_SwitchHeader_SIZE + sizeof(struct Control));'), (3, 1, u'+Assert_compileTime(')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: struct ErrorPacket {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_compileTime(sizeof(struct ErrorPacket) == Headers_SwitchHeader_SIZE + sizeof(struct Control));'), (3, 1, u'+Assert_compileTime(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_compileTime(sizeof(struct ErrorPacket) == Headers_SwitchHeader_SIZE + sizeof(struct Control));'), (3, 1, u'+Assert_compileTime(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_bitReverse64(Endian_byteSwap64(Bits_bitReverse64(x))) == Endian_byteSwap64(x));'), (3, 1, u'+    Assert_always(')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_bitReverse64(Endian_byteSwap64(Bits_bitReverse64(x))) == Endian_byteSwap64(x));'), (3, 1, u'+    Assert_always(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_always(Bits_bitReverse64(Endian_byteSwap64(Bits_bitReverse64(x))) == Endian_byteSwap64(x));'), (3, 1, u'+    Assert_always(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-            Assert_always(1 == label);'), (16, 2, u'-            Assert_always(4 == bits);'), (18, 2, u'-        Assert_always(bits == NumberCompress_4_bitsUsedForLabel(label));'), (19, 2, u'-        Assert_always(i == NumberCompress_4_getDecompressed(label, bits));'), (24, 2, u'-        Assert_always(bits == NumberCompress_4_bitsUsedForLabel(label));'), (25, 2, u'-        Assert_always(i == NumberCompress_4_getDecompressed(label, bits));'), (36, 2, u'-            Assert_always(1 == label);'), (37, 2, u'-            Assert_always(4 == bits);'), (39, 2, u'-        Assert_always(bits == NumberCompress_8_bitsUsedForLabel(label));'), (40, 2, u'-        Assert_always(i == NumberCompress_8_getDecompressed(label, bits));'), (52, 2, u'-        Assert_always(bits == NumberCompress_8_bitsUsedForLabel(label));'), (53, 2, u'-        Assert_always(i == NumberCompress_8_getDecompressed(label, bits));'), (55, 1, u'+                Assert_always(1 == label);'), (59, 1, u'+            Assert_always(bits == bitsUsedForLabel(label));'), (60, 1, u'+            Assert_always(i == getDecompressed(label, bits));'), (70, 2, u'-            Assert_always(1 == label);'), (73, 1, u'+        Assert_always(1 == bitWidths[bits]);'), (76, 1, u'+            Assert_always(1 == getDecompressed(label, 4));'), (79, 1, u'+            Assert_always(i < nInterfaces);'), (81, 2, u'-        Assert_always(bits == NumberCompress_dyn_bitsUsedForLabel(label));'), (82, 2, u'-        Assert_always(i == NumberCompress_dyn_getDecompressed(label, bits));'), (86, 2, u'-        Assert_always(bits == NumberCompress_dyn_bitsUsedForLabel(label));'), (87, 2, u'-        Assert_always(i == NumberCompress_dyn_getDecompressed(label, bits));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(!strcmp((char*)hexBuffer, "00000000000000000000000068656c6c6f20776f726c6400"));'), (5, 1, u'+    Assert_always(!strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));'), (11, 1, u'+    Assert_always(0 == NumberCompress_getDecompressed(rev_label, NumberCompress_bitsUsedForLabel(rev_label)));'), (13, 1, u'+    Assert_always(rev_label == NumberCompress_getCompressed(0, NumberCompress_bitsUsedForLabel(rev_label)));')]
===========================================
===========================================
Total add: 10
Total del: 2
Header: reconnectionNewEndpointTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(!strcmp((char*)hexBuffer, "00000000000000000000000068656c6c6f20776f726c6400"));'), (5, 1, u'+    Assert_always(!strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));'), (11, 1, u'+    Assert_always(0 == NumberCompress_getDecompressed(rev_label, NumberCompress_bitsUsedForLabel(rev_label)));'), (13, 1, u'+    Assert_always(rev_label == NumberCompress_getCompressed(0, NumberCompress_bitsUsedForLabel(rev_label)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    Assert_always(!strcmp((char*)hexBuffer, "00000000000000000000000068656c6c6f20776f726c6400"));'), (5, 1, u'+    Assert_always(!strcmp((char*)hexBuffer+16, "0000000068656c6c6f20776f726c6400"));'), (11, 1, u'+    Assert_always(0 == NumberCompress_getDecompressed(rev_label, NumberCompress_bitsUsedForLabel(rev_label)));'), (13, 1, u'+    Assert_always(rev_label == NumberCompress_getCompressed(0, NumberCompress_bitsUsedForLabel(rev_label)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(destIndex < NumberCompress_INTERFACES);'), (3, 1, u'+    Assert_true(sourceIndex < NumberCompress_INTERFACES);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(destIndex < NumberCompress_INTERFACES);'), (3, 1, u'+    Assert_true(sourceIndex < NumberCompress_INTERFACES);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(destIndex < NumberCompress_INTERFACES);'), (3, 1, u'+    Assert_true(sourceIndex < NumberCompress_INTERFACES);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(bits == 4);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(bits == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        Assert_true(bits == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    Assert_always(LabelSplicer_isOneHop(4));'), (10, 1, u'+    Assert_always(LabelSplicer_isOneHop(routeToInterface(0)));')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: splice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    Assert_always(LabelSplicer_isOneHop(4));'), (10, 1, u'+    Assert_always(LabelSplicer_isOneHop(routeToInterface(0)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    Assert_always(LabelSplicer_isOneHop(4));'), (10, 1, u'+    Assert_always(LabelSplicer_isOneHop(routeToInterface(0)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_always(Bits_bitReverse64(Endian_byteSwap64(Bits_bitReverse64(x))) == Endian_byteSwap64(x));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_always(Bits_bitReverse64(Endian_byteSwap64(Bits_bitReverse64(x))) == Endian_byteSwap64(x));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    Assert_always(Bits_bitReverse64(Endian_byteSwap64(Bits_bitReverse64(x))) == Endian_byteSwap64(x));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!((uintptr_t)sourceAndDestAddrs % 4));'), (3, 2, u'-    Assert_true(!((uintptr_t)packetHeaderAndContent % 4));'), (4, 1, u'+    Assert_true(!((uintptr_t)sourceAndDestAddrs % 2));'), (5, 1, u'+    Assert_true(!((uintptr_t)packetHeaderAndContent % 2));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ip6PacketChecksum
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!((uintptr_t)sourceAndDestAddrs % 4));'), (3, 2, u'-    Assert_true(!((uintptr_t)packetHeaderAndContent % 4));'), (4, 1, u'+    Assert_true(!((uintptr_t)sourceAndDestAddrs % 2));'), (5, 1, u'+    Assert_true(!((uintptr_t)packetHeaderAndContent % 2));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_true(!((uintptr_t)sourceAndDestAddrs % 4));'), (3, 2, u'-    Assert_true(!((uintptr_t)packetHeaderAndContent % 4));'), (4, 1, u'+    Assert_true(!((uintptr_t)sourceAndDestAddrs % 2));'), (5, 1, u'+    Assert_true(!((uintptr_t)packetHeaderAndContent % 2));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(!((uintptr_t)sourceAndDestAddrs % 4));'), (3, 1, u'+    Assert_true(!((uintptr_t)packetHeaderAndContent % 4));')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: ip6PacketChecksum
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(!((uintptr_t)sourceAndDestAddrs % 4));'), (3, 1, u'+    Assert_true(!((uintptr_t)packetHeaderAndContent % 4));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    Assert_true(!((uintptr_t)sourceAndDestAddrs % 4));'), (3, 1, u'+    Assert_true(!((uintptr_t)packetHeaderAndContent % 4));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(entry->val->type == Object_DICT);'), (3, 1, u'+        Assert_true(entry->val->type == Object_DICT);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: checkArgs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(entry->val->type == Object_DICT);'), (3, 1, u'+        Assert_true(entry->val->type == Object_DICT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(entry->val->type == Object_DICT);'), (3, 1, u'+        Assert_true(entry->val->type == Object_DICT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_assertTrue(TXID_LEN == 4);'), (3, 1, u'+    Assert_compileTime(TXID_LEN == 4);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingFromParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_assertTrue(TXID_LEN == 4);'), (3, 1, u'+    Assert_compileTime(TXID_LEN == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    Assert_assertTrue(TXID_LEN == 4);'), (3, 1, u'+    Assert_compileTime(TXID_LEN == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_assertTrue(TXID_LEN == 4);'), (3, 1, u'+        Assert_compileTime(TXID_LEN == 4);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingFromClient
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_assertTrue(TXID_LEN == 4);'), (3, 1, u'+        Assert_compileTime(TXID_LEN == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        Assert_assertTrue(TXID_LEN == 4);'), (3, 1, u'+        Assert_compileTime(TXID_LEN == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(txid);'), (3, 1, u'+    Assert_true(txid);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Admin_sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(txid);'), (3, 1, u'+    Assert_true(txid);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(txid);'), (3, 1, u'+    Assert_true(txid);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(String_equals(password, retPassword));'), (3, 1, u'+    Assert_always(String_equals(password, retPassword));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(String_equals(password, retPassword));'), (3, 1, u'+    Assert_always(String_equals(password, retPassword));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(String_equals(password, retPassword));'), (3, 1, u'+    Assert_always(String_equals(password, retPassword));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(client);'), (3, 1, u'+    Assert_always(client);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(client);'), (3, 1, u'+    Assert_always(client);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(client);'), (3, 1, u'+    Assert_always(client);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!res->err);'), (3, 2, u'-    assert(Dict_getInt(res->responseDict, String_CONST("called!")));'), (4, 2, u'-    assert(ctx.called);'), (5, 1, u'+    Assert_always(!res->err);'), (6, 1, u'+    Assert_always(Dict_getInt(res->responseDict, String_CONST("called!")));'), (7, 1, u'+    Assert_always(ctx.called);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!res->err);'), (3, 2, u'-    assert(Dict_getInt(res->responseDict, String_CONST("called!")));'), (4, 2, u'-    assert(ctx.called);'), (5, 1, u'+    Assert_always(!res->err);'), (6, 1, u'+    Assert_always(Dict_getInt(res->responseDict, String_CONST("called!")));'), (7, 1, u'+    Assert_always(ctx.called);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!res->err);'), (3, 2, u'-    assert(Dict_getInt(res->responseDict, String_CONST("called!")));'), (4, 2, u'-    assert(ctx.called);'), (5, 1, u'+    Assert_always(!res->err);'), (6, 1, u'+    Assert_always(Dict_getInt(res->responseDict, String_CONST("called!")));'), (7, 1, u'+    Assert_always(ctx.called);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(argc > 0);'), (3, 1, u'+    Assert_true(argc > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(argc > 0);'), (3, 1, u'+    Assert_true(argc > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(argc > 0);'), (3, 1, u'+    Assert_true(argc > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(msg->padding >= 16);'), (3, 1, u'+    Assert_true(msg->padding >= 16);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decryptRndNonce
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(msg->padding >= 16);'), (3, 1, u'+    Assert_true(msg->padding >= 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(msg->padding >= 16);'), (3, 1, u'+    Assert_true(msg->padding >= 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(msg->padding >= 32);'), (3, 1, u'+    Assert_true(msg->padding >= 32);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encryptRndNonce
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(msg->padding >= 32);'), (3, 1, u'+    Assert_true(msg->padding >= 32);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(msg->padding >= 32);'), (3, 1, u'+    Assert_true(msg->padding >= 32);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(wrapper->nextNonce == 0);'), (3, 1, u'+        Assert_true(wrapper->nextNonce == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: genReverseHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(wrapper->nextNonce == 0);'), (3, 1, u'+        Assert_true(wrapper->nextNonce == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(wrapper->nextNonce == 0);'), (3, 1, u'+        Assert_true(wrapper->nextNonce == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(wrapper->nextNonce == 0);'), (3, 1, u'+        Assert_true(wrapper->nextNonce == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: genReverseHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(wrapper->nextNonce == 0);'), (3, 1, u'+        Assert_true(wrapper->nextNonce == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(wrapper->nextNonce == 0);'), (3, 1, u'+        Assert_true(wrapper->nextNonce == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->padding >= sizeof(union Headers_CryptoAuth) || !"not enough padding");'), (3, 1, u'+    Assert_true(message->padding >= sizeof(union Headers_CryptoAuth) || !"not enough padding");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->padding >= sizeof(union Headers_CryptoAuth) || !"not enough padding");'), (3, 1, u'+    Assert_true(message->padding >= sizeof(union Headers_CryptoAuth) || !"not enough padding");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->padding >= sizeof(union Headers_CryptoAuth) || !"not enough padding");'), (3, 1, u'+    Assert_true(message->padding >= sizeof(union Headers_CryptoAuth) || !"not enough padding");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (3, 2, u'-            assert(!Bits_isZero(wrapper->secret, 32));'), (4, 1, u'+            Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (5, 1, u'+            Assert_true(!Bits_isZero(wrapper->secret, 32));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (3, 2, u'-            assert(!Bits_isZero(wrapper->secret, 32));'), (4, 1, u'+            Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (5, 1, u'+            Assert_true(!Bits_isZero(wrapper->secret, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (3, 2, u'-            assert(!Bits_isZero(wrapper->secret, 32));'), (4, 1, u'+            Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (5, 1, u'+            Assert_true(!Bits_isZero(wrapper->secret, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+            Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (6, 2, u'-            assert(!memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));'), (7, 1, u'+            Assert_true(!memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+            Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (6, 2, u'-            assert(!memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));'), (7, 1, u'+            Assert_true(!memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+            Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (6, 2, u'-            assert(!memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));'), (7, 1, u'+            Assert_true(!memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+        Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+        Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+        Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->padding >= 36 || !"not enough padding");'), (3, 1, u'+    Assert_true(message->padding >= 36 || !"not enough padding");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encryptMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->padding >= 36 || !"not enough padding");'), (3, 1, u'+    Assert_true(message->padding >= 36 || !"not enough padding");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->padding >= 36 || !"not enough padding");'), (3, 1, u'+    Assert_true(message->padding >= 36 || !"not enough padding");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!((uintptr_t)message->bytes % 4) || !"alignment fault");'), (3, 1, u'+        Assert_true(!((uintptr_t)message->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!((uintptr_t)message->bytes % 4) || !"alignment fault");'), (3, 1, u'+        Assert_true(!((uintptr_t)message->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!((uintptr_t)message->bytes % 4) || !"alignment fault");'), (3, 1, u'+        Assert_true(!((uintptr_t)message->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+        Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+        Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+        Assert_true(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(received->padding >= 12 || "need at least 12 bytes of padding in incoming message");'), (3, 1, u'+    Assert_true(received->padding >= 12 || "need at least 12 bytes of padding in incoming message");'), (5, 2, u'-        assert(!((uintptr_t)received->bytes % 4) || !"alignment fault");'), (6, 1, u'+        Assert_true(!((uintptr_t)received->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(received->padding >= 12 || "need at least 12 bytes of padding in incoming message");'), (3, 1, u'+    Assert_true(received->padding >= 12 || "need at least 12 bytes of padding in incoming message");'), (5, 2, u'-        assert(!((uintptr_t)received->bytes % 4) || !"alignment fault");'), (6, 1, u'+        Assert_true(!((uintptr_t)received->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(received->padding >= 12 || "need at least 12 bytes of padding in incoming message");'), (3, 1, u'+    Assert_true(received->padding >= 12 || "need at least 12 bytes of padding in incoming message");'), (5, 2, u'-        assert(!((uintptr_t)received->bytes % 4) || !"alignment fault");'), (6, 1, u'+        Assert_true(!((uintptr_t)received->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->length + message->padding <= BUFFER_SIZE);'), (3, 1, u'+    Assert_always(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendMessageToIf2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->length + message->padding <= BUFFER_SIZE);'), (3, 1, u'+    Assert_always(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->length + message->padding <= BUFFER_SIZE);'), (3, 1, u'+    Assert_always(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->length + message->padding <= BUFFER_SIZE);'), (3, 1, u'+    Assert_always(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendMessageToIf1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->length + message->padding <= BUFFER_SIZE);'), (3, 1, u'+    Assert_always(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->length + message->padding <= BUFFER_SIZE);'), (3, 1, u'+    Assert_always(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(if1Msg);'), (3, 1, u'+    Assert_always(if1Msg);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendToIf1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(if1Msg);'), (3, 1, u'+    Assert_always(if1Msg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(if1Msg);'), (3, 1, u'+    Assert_always(if1Msg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(if2Msg);'), (3, 1, u'+    Assert_always(if2Msg);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendToIf2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(if2Msg);'), (3, 1, u'+    Assert_always(if2Msg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(if2Msg);'), (3, 1, u'+    Assert_always(if2Msg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!memcmp(expected, output, 56));'), (3, 1, u'+    Assert_always(!memcmp(expected, output, 56));'), (5, 2, u'-    assert(!Exports_decryptRndNonce(nonce, &m, secret));'), (6, 2, u'-    assert(m.length == 12 && !memcmp(m.bytes, "hello world", m.length));'), (7, 1, u'+    Assert_always(!Exports_decryptRndNonce(nonce, &m, secret));'), (8, 1, u'+    Assert_always(m.length == 12 && !memcmp(m.bytes, "hello world", m.length));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: encryptRndNonceTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!memcmp(expected, output, 56));'), (3, 1, u'+    Assert_always(!memcmp(expected, output, 56));'), (5, 2, u'-    assert(!Exports_decryptRndNonce(nonce, &m, secret));'), (6, 2, u'-    assert(m.length == 12 && !memcmp(m.bytes, "hello world", m.length));'), (7, 1, u'+    Assert_always(!Exports_decryptRndNonce(nonce, &m, secret));'), (8, 1, u'+    Assert_always(m.length == 12 && !memcmp(m.bytes, "hello world", m.length));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!memcmp(expected, output, 56));'), (3, 1, u'+    Assert_always(!memcmp(expected, output, 56));'), (5, 2, u'-    assert(!Exports_decryptRndNonce(nonce, &m, secret));'), (6, 2, u'-    assert(m.length == 12 && !memcmp(m.bytes, "hello world", m.length));'), (7, 1, u'+    Assert_always(!Exports_decryptRndNonce(nonce, &m, secret));'), (8, 1, u'+    Assert_always(m.length == 12 && !memcmp(m.bytes, "hello world", m.length));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(memcmp(ca->publicKey, publicKey, 32) == 0);'), (3, 1, u'+    Assert_always(memcmp(ca->publicKey, publicKey, 32) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: createNew
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(memcmp(ca->publicKey, publicKey, 32) == 0);'), (3, 1, u'+    Assert_always(memcmp(ca->publicKey, publicKey, 32) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(memcmp(ca->publicKey, publicKey, 32) == 0);'), (3, 1, u'+    Assert_always(memcmp(ca->publicKey, publicKey, 32) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(strlen((char*)expectedOutput) == 264);'), (3, 1, u'+    Assert_always(strlen((char*)expectedOutput) == 264);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: testHello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(strlen((char*)expectedOutput) == 264);'), (3, 1, u'+    Assert_always(strlen((char*)expectedOutput) == 264);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(strlen((char*)expectedOutput) == 264);'), (3, 1, u'+    Assert_always(strlen((char*)expectedOutput) == 264);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);'), (3, 1, u'+    Assert_always(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: testHello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);'), (3, 1, u'+    Assert_always(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);'), (3, 1, u'+    Assert_always(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);'), (3, 1, u'+    Assert_always(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: receiveHelloWithNoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);'), (3, 1, u'+    Assert_always(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);'), (3, 1, u'+    Assert_always(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(finalOut);'), (3, 2, u'-    assert(finalOut->length == 12);'), (4, 2, u'-    assert(memcmp(hello, finalOut->bytes, 12) == 0);'), (5, 1, u'+    Assert_always(finalOut);'), (6, 1, u'+    Assert_always(finalOut->length == 12);'), (7, 1, u'+    Assert_always(memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: receiveHelloWithNoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(finalOut);'), (3, 2, u'-    assert(finalOut->length == 12);'), (4, 2, u'-    assert(memcmp(hello, finalOut->bytes, 12) == 0);'), (5, 1, u'+    Assert_always(finalOut);'), (6, 1, u'+    Assert_always(finalOut->length == 12);'), (7, 1, u'+    Assert_always(memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(finalOut);'), (3, 2, u'-    assert(finalOut->length == 12);'), (4, 2, u'-    assert(memcmp(hello, finalOut->bytes, 12) == 0);'), (5, 1, u'+    Assert_always(finalOut);'), (6, 1, u'+    Assert_always(finalOut->length == 12);'), (7, 1, u'+    Assert_always(memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));'), (3, 1, u'+    Assert_always(!memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: repeatHello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));'), (3, 1, u'+    Assert_always(!memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));'), (3, 1, u'+    Assert_always(!memcmp(msg2.bytes, "\\0\\0\\0\\1", 4));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(finalOut);'), (3, 2, u'-    assert(finalOut->length == 12);'), (4, 2, u'-    assert(memcmp(hello, finalOut->bytes, 12) == 0);'), (5, 1, u'+    Assert_always(finalOut);'), (6, 1, u'+    Assert_always(finalOut->length == 12);'), (7, 1, u'+    Assert_always(memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: repeatHello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(finalOut);'), (3, 2, u'-    assert(finalOut->length == 12);'), (4, 2, u'-    assert(memcmp(hello, finalOut->bytes, 12) == 0);'), (5, 1, u'+    Assert_always(finalOut);'), (6, 1, u'+    Assert_always(finalOut->length == 12);'), (7, 1, u'+    Assert_always(memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(finalOut);'), (3, 2, u'-    assert(finalOut->length == 12);'), (4, 2, u'-    assert(memcmp(hello, finalOut->bytes, 12) == 0);'), (5, 1, u'+    Assert_always(finalOut);'), (6, 1, u'+    Assert_always(finalOut->length == 12);'), (7, 1, u'+    Assert_always(memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(out[i] != out[j]);'), (3, 1, u'+            Assert_always(out[i] != out[j]);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(out[i] != out[j]);'), (3, 1, u'+            Assert_always(out[i] != out[j]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(out[i] != out[j]);'), (3, 1, u'+            Assert_always(out[i] != out[j]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(module != NULL);'), (3, 1, u'+    Assert_true(module != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: dhtModuleHandleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(module != NULL);'), (3, 1, u'+    Assert_true(module != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(module != NULL);'), (3, 1, u'+    Assert_true(module != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(store->labelSum > 0);'), (3, 1, u'+    Assert_true(store->labelSum > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: replaceNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(store->labelSum > 0);'), (3, 1, u'+    Assert_true(store->labelSum > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(store->labelSum > 0);'), (3, 1, u'+    Assert_true(store->labelSum > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(false);'), (3, 1, u'+        Assert_true(false);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NodeStore_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(false);'), (3, 1, u'+        Assert_true(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(false);'), (3, 1, u'+        Assert_true(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(!memcmp(realAddr, addr->ip6.bytes, 16));'), (3, 1, u'+                    Assert_true(!memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NodeStore_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(!memcmp(realAddr, addr->ip6.bytes, 16));'), (3, 1, u'+                    Assert_true(!memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(!memcmp(realAddr, addr->ip6.bytes, 16));'), (3, 1, u'+                    Assert_true(!memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(node >= store->nodes && node < store->nodes + store->size);'), (3, 1, u'+    Assert_true(node >= store->nodes && node < store->nodes + store->size);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NodeStore_remove
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(node >= store->nodes && node < store->nodes + store->size);'), (3, 1, u'+    Assert_true(node >= store->nodes && node < store->nodes + store->size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(node >= store->nodes && node < store->nodes + store->size);'), (3, 1, u'+    Assert_true(node >= store->nodes && node < store->nodes + store->size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(outMessage != NULL);'), (3, 2, u'-    assert(outMessage->replyTo != NULL);'), (4, 1, u'+    Assert_always(outMessage != NULL);'), (5, 1, u'+    Assert_always(outMessage->replyTo != NULL);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: testQuery
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(outMessage != NULL);'), (3, 2, u'-    assert(outMessage->replyTo != NULL);'), (4, 1, u'+    Assert_always(outMessage != NULL);'), (5, 1, u'+    Assert_always(outMessage->replyTo != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(outMessage != NULL);'), (3, 2, u'-    assert(outMessage->replyTo != NULL);'), (4, 1, u'+    Assert_always(outMessage != NULL);'), (5, 1, u'+    Assert_always(outMessage->replyTo != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(outMessage->length == strlen(expectedResponse));'), (3, 2, u'-    assert(memcmp(outMessage->bytes, expectedResponse, strlen(expectedResponse)) == 0);'), (4, 1, u'+    Assert_always(outMessage->length == strlen(expectedResponse));'), (5, 1, u'+    Assert_always(memcmp(outMessage->bytes, expectedResponse, strlen(expectedResponse)) == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: testQuery
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(outMessage->length == strlen(expectedResponse));'), (3, 2, u'-    assert(memcmp(outMessage->bytes, expectedResponse, strlen(expectedResponse)) == 0);'), (4, 1, u'+    Assert_always(outMessage->length == strlen(expectedResponse));'), (5, 1, u'+    Assert_always(memcmp(outMessage->bytes, expectedResponse, strlen(expectedResponse)) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(outMessage->length == strlen(expectedResponse));'), (3, 2, u'-    assert(memcmp(outMessage->bytes, expectedResponse, strlen(expectedResponse)) == 0);'), (4, 1, u'+    Assert_always(outMessage->length == strlen(expectedResponse));'), (5, 1, u'+    Assert_always(memcmp(outMessage->bytes, expectedResponse, strlen(expectedResponse)) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(outMessage != NULL);'), (3, 1, u'+    Assert_always(outMessage != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: testSearch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(outMessage != NULL);'), (3, 1, u'+    Assert_always(outMessage != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(outMessage != NULL);'), (3, 1, u'+    Assert_always(outMessage != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(outMessage->length == strlen(EXPECTED_OUTPUT("xx")));'), (3, 2, u'-    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("8\\x00"), outMessage->length) == 0);'), (5, 1, u'+    Assert_always(outMessage->length == strlen(EXPECTED_OUTPUT("xx")));'), (6, 1, u'+    Assert_always(memcmp(outMessage->bytes, EXPECTED_OUTPUT("8\\x00"), outMessage->length) == 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: testSearch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(outMessage->length == strlen(EXPECTED_OUTPUT("xx")));'), (3, 2, u'-    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("8\\x00"), outMessage->length) == 0);'), (5, 1, u'+    Assert_always(outMessage->length == strlen(EXPECTED_OUTPUT("xx")));'), (6, 1, u'+    Assert_always(memcmp(outMessage->bytes, EXPECTED_OUTPUT("8\\x00"), outMessage->length) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(outMessage->length == strlen(EXPECTED_OUTPUT("xx")));'), (3, 2, u'-    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("8\\x00"), outMessage->length) == 0);'), (5, 1, u'+    Assert_always(outMessage->length == strlen(EXPECTED_OUTPUT("xx")));'), (6, 1, u'+    Assert_always(memcmp(outMessage->bytes, EXPECTED_OUTPUT("8\\x00"), outMessage->length) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(strcmp((char*) &outMessage->address->networkAddress_be, " 00011  ") == 0);'), (3, 1, u'+    Assert_always(strcmp((char*) &outMessage->address->networkAddress_be, " 00011  ") == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: testSearch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(strcmp((char*) &outMessage->address->networkAddress_be, " 00011  ") == 0);'), (3, 1, u'+    Assert_always(strcmp((char*) &outMessage->address->networkAddress_be, " 00011  ") == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(strcmp((char*) &outMessage->address->networkAddress_be, " 00011  ") == 0);'), (3, 1, u'+    Assert_always(strcmp((char*) &outMessage->address->networkAddress_be, " 00011  ") == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(callbackMessage != NULL);'), (3, 1, u'+    Assert_always(callbackMessage != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: testSearch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(callbackMessage != NULL);'), (3, 1, u'+    Assert_always(callbackMessage != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(callbackMessage != NULL);'), (3, 1, u'+    Assert_always(callbackMessage != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(node1->reach == 1601894175);'), (3, 1, u'+    Assert_always(node1->reach == 1601894175);'), (6, 2, u'-    assert(outMessage != NULL);'), (7, 1, u'+    Assert_always(outMessage != NULL);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: testSearch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(node1->reach == 1601894175);'), (3, 1, u'+    Assert_always(node1->reach == 1601894175);'), (6, 2, u'-    assert(outMessage != NULL);'), (7, 1, u'+    Assert_always(outMessage != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(node1->reach == 1601894175);'), (3, 1, u'+    Assert_always(node1->reach == 1601894175);'), (6, 2, u'-    assert(outMessage != NULL);'), (7, 1, u'+    Assert_always(outMessage != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(i == 0 || thisEp == ep);'), (3, 1, u'+            Assert_true(i == 0 || thisEp == ep);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: moveEndpointIfNeeded
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(i == 0 || thisEp == ep);'), (3, 1, u'+            Assert_true(i == 0 || thisEp == ep);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(i == 0 || thisEp == ep);'), (3, 1, u'+            Assert_true(i == 0 || thisEp == ep);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ep->switchIf.senderContext == ep);'), (3, 2, u'-    assert(ep->internal.sendMessage);'), (4, 1, u'+    Assert_true(ep->switchIf.senderContext == ep);'), (5, 1, u'+    Assert_true(ep->internal.sendMessage);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: sendFromSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ep->switchIf.senderContext == ep);'), (3, 2, u'-    assert(ep->internal.sendMessage);'), (4, 1, u'+    Assert_true(ep->switchIf.senderContext == ep);'), (5, 1, u'+    Assert_true(ep->internal.sendMessage);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ep->switchIf.senderContext == ep);'), (3, 2, u'-    assert(ep->internal.sendMessage);'), (4, 1, u'+    Assert_true(ep->switchIf.senderContext == ep);'), (5, 1, u'+    Assert_true(ep->internal.sendMessage);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(index >= 0);'), (3, 1, u'+    Assert_true(index >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: closeInterface
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(index >= 0);'), (3, 1, u'+    Assert_true(index >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(index >= 0);'), (3, 1, u'+    Assert_true(index >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ep->external);'), (3, 1, u'+    Assert_true(ep->external);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ep->external);'), (3, 1, u'+    Assert_true(ep->external);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ep->external);'), (3, 1, u'+    Assert_true(ep->external);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(ep->external || !"Entry was not removed from the map but was null.");'), (3, 2, u'-            assert(&ep->internal == ic->imap->interfaces[index]);'), (4, 2, u'-            assert(!memcmp(key, ep->key, InterfaceController_KEY_SIZE));'), (5, 1, u'+            Assert_true(ep->external || !"Entry was not removed from the map but was null.");'), (6, 1, u'+            Assert_true(&ep->internal == ic->imap->interfaces[index]);'), (7, 1, u'+            Assert_true(!memcmp(key, ep->key, InterfaceController_KEY_SIZE));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: getEndpoint
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(ep->external || !"Entry was not removed from the map but was null.");'), (3, 2, u'-            assert(&ep->internal == ic->imap->interfaces[index]);'), (4, 2, u'-            assert(!memcmp(key, ep->key, InterfaceController_KEY_SIZE));'), (5, 1, u'+            Assert_true(ep->external || !"Entry was not removed from the map but was null.");'), (6, 1, u'+            Assert_true(&ep->internal == ic->imap->interfaces[index]);'), (7, 1, u'+            Assert_true(!memcmp(key, ep->key, InterfaceController_KEY_SIZE));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(ep->external || !"Entry was not removed from the map but was null.");'), (3, 2, u'-            assert(&ep->internal == ic->imap->interfaces[index]);'), (4, 2, u'-            assert(!memcmp(key, ep->key, InterfaceController_KEY_SIZE));'), (5, 1, u'+            Assert_true(ep->external || !"Entry was not removed from the map but was null.");'), (6, 1, u'+            Assert_true(&ep->internal == ic->imap->interfaces[index]);'), (7, 1, u'+            Assert_true(!memcmp(key, ep->key, InterfaceController_KEY_SIZE));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(&context->interface == iface);'), (3, 1, u'+    Assert_true(&context->interface == iface);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(&context->interface == iface);'), (3, 1, u'+    Assert_true(&context->interface == iface);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(&context->interface == iface);'), (3, 1, u'+    Assert_true(&context->interface == iface);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(message);'), (3, 2, u'-        assert(message->length == 24);'), (4, 1, u'+        Assert_always(message);'), (5, 1, u'+        Assert_always(message->length == 24);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: reconnectionNewEndpointTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(message);'), (3, 2, u'-        assert(message->length == 24);'), (4, 1, u'+        Assert_always(message);'), (5, 1, u'+        Assert_always(message->length == 24);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(message);'), (3, 2, u'-        assert(message->length == 24);'), (4, 1, u'+        Assert_always(message);'), (5, 1, u'+        Assert_always(message->length == 24);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!strcmp((char*)hexBuffer, "00000000000000000000000068656c6c6f20776f726c6400"));'), (3, 1, u'+    Assert_always(!strcmp((char*)hexBuffer, "00000000000000000000000068656c6c6f20776f726c6400"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: reconnectionNewEndpointTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!strcmp((char*)hexBuffer, "00000000000000000000000068656c6c6f20776f726c6400"));'), (3, 1, u'+    Assert_always(!strcmp((char*)hexBuffer, "00000000000000000000000068656c6c6f20776f726c6400"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!strcmp((char*)hexBuffer, "00000000000000000000000068656c6c6f20776f726c6400"));'), (3, 1, u'+    Assert_always(!strcmp((char*)hexBuffer, "00000000000000000000000068656c6c6f20776f726c6400"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(r->bytesRead(r) == 128+128+128+512+256+300+128);'), (3, 1, u'+    Assert_always(r->bytesRead(r) == 128+128+128+512+256+300+128);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(r->bytesRead(r) == 128+128+128+512+256+300+128);'), (3, 1, u'+    Assert_always(r->bytesRead(r) == 128+128+128+512+256+300+128);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(r->bytesRead(r) == 128+128+128+512+256+300+128);'), (3, 1, u'+    Assert_always(r->bytesRead(r) == 128+128+128+512+256+300+128);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    #define CMP(x) assert(!memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x'), (3, 1, u'+    #define CMP(x) Assert_always(!memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    #define CMP(x) assert(!memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x'), (3, 1, u'+    #define CMP(x) Assert_always(!memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    #define CMP(x) assert(!memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x'), (3, 1, u'+    #define CMP(x) Assert_always(!memcmp(ptr1, ptr2, x)); ptr1 += x; ptr2 += x')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((bytesUsed = MallocAllocator_bytesAllocated(alloc)) == 0);'), (3, 1, u'+    Assert_always((bytesUsed = MallocAllocator_bytesAllocated(alloc)) == 0);'), (6, 2, u'-    assert(MallocAllocator_bytesAllocated(alloc) == bytesUsed);'), (7, 1, u'+    Assert_always(MallocAllocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((bytesUsed = MallocAllocator_bytesAllocated(alloc)) == 0);'), (3, 1, u'+    Assert_always((bytesUsed = MallocAllocator_bytesAllocated(alloc)) == 0);'), (6, 2, u'-    assert(MallocAllocator_bytesAllocated(alloc) == bytesUsed);'), (7, 1, u'+    Assert_always(MallocAllocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert((bytesUsed = MallocAllocator_bytesAllocated(alloc)) == 0);'), (3, 1, u'+    Assert_always((bytesUsed = MallocAllocator_bytesAllocated(alloc)) == 0);'), (6, 2, u'-    assert(MallocAllocator_bytesAllocated(alloc) == bytesUsed);'), (7, 1, u'+    Assert_always(MallocAllocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MallocAllocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_always(MallocAllocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MallocAllocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_always(MallocAllocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MallocAllocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_always(MallocAllocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MallocAllocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_always(MallocAllocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MallocAllocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_always(MallocAllocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MallocAllocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_always(MallocAllocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MallocAllocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_always(MallocAllocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MallocAllocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_always(MallocAllocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(MallocAllocator_bytesAllocated(alloc) == bytesUsed);'), (3, 1, u'+    Assert_always(MallocAllocator_bytesAllocated(alloc) == bytesUsed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(context->ip6Header == ip6);'), (3, 1, u'+        Assert_true(context->ip6Header == ip6);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: outgoingFromMe
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(context->ip6Header == ip6);'), (3, 1, u'+        Assert_true(context->ip6Header == ip6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(context->ip6Header == ip6);'), (3, 1, u'+        Assert_true(context->ip6Header == ip6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(false);'), (3, 1, u'+    Assert_true(false);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: incomingFromCryptoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(false);'), (3, 1, u'+    Assert_true(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(false);'), (3, 1, u'+    Assert_true(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(false);'), (3, 1, u'+    Assert_true(false);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: outgoingFromCryptoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(false);'), (3, 1, u'+    Assert_true(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(false);'), (3, 1, u'+    Assert_true(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Headers_getMessageType(switchHeader) == Headers_SwitchHeader_TYPE_CONTROL);'), (3, 1, u'+    Assert_true(Headers_getMessageType(switchHeader) == Headers_SwitchHeader_TYPE_CONTROL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Headers_getMessageType(switchHeader) == Headers_SwitchHeader_TYPE_CONTROL);'), (3, 1, u'+    Assert_true(Headers_getMessageType(switchHeader) == Headers_SwitchHeader_TYPE_CONTROL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Headers_getMessageType(switchHeader) == Headers_SwitchHeader_TYPE_CONTROL);'), (3, 1, u'+    Assert_true(Headers_getMessageType(switchHeader) == Headers_SwitchHeader_TYPE_CONTROL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(data->len < (BUFFER_SZ / 2));'), (3, 1, u'+    Assert_true(data->len < (BUFFER_SZ / 2));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendPing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(data->len < (BUFFER_SZ / 2));'), (3, 1, u'+    Assert_true(data->len < (BUFFER_SZ / 2));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(data->len < (BUFFER_SZ / 2));'), (3, 1, u'+    Assert_true(data->len < (BUFFER_SZ / 2));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_assertTrue(sizeof(struct ErrorPacket) == Headers_SwitchHeader_SIZE + sizeof(struct Control));'), (3, 1, u'+Assert_compileTime(sizeof(struct ErrorPacket) == Headers_SwitchHeader_SIZE + sizeof(struct Control));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct ErrorPacket {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_assertTrue(sizeof(struct ErrorPacket) == Headers_SwitchHeader_SIZE + sizeof(struct Control));'), (3, 1, u'+Assert_compileTime(sizeof(struct ErrorPacket) == Headers_SwitchHeader_SIZE + sizeof(struct Control));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-Assert_assertTrue(sizeof(struct ErrorPacket) == Headers_SwitchHeader_SIZE + sizeof(struct Control));'), (3, 1, u'+Assert_compileTime(sizeof(struct ErrorPacket) == Headers_SwitchHeader_SIZE + sizeof(struct Control));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(if1->allocator->notOnFree(si1->onFree, if1->allocator));'), (3, 2, u'-    assert(if2->allocator->notOnFree(si2->onFree, if2->allocator));'), (4, 1, u'+    Assert_true(if1->allocator->notOnFree(si1->onFree, if1->allocator));'), (5, 1, u'+    Assert_true(if2->allocator->notOnFree(si2->onFree, if2->allocator));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: SwitchCore_swapInterfaces
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(if1->allocator->notOnFree(si1->onFree, if1->allocator));'), (3, 2, u'-    assert(if2->allocator->notOnFree(si2->onFree, if2->allocator));'), (4, 1, u'+    Assert_true(if1->allocator->notOnFree(si1->onFree, if1->allocator));'), (5, 1, u'+    Assert_true(if2->allocator->notOnFree(si2->onFree, if2->allocator));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(if1->allocator->notOnFree(si1->onFree, if1->allocator));'), (3, 2, u'-    assert(if2->allocator->notOnFree(si2->onFree, if2->allocator));'), (4, 1, u'+    Assert_true(if1->allocator->notOnFree(si1->onFree, if1->allocator));'), (5, 1, u'+    Assert_true(if2->allocator->notOnFree(si2->onFree, if2->allocator));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(expected == out);'), (3, 1, u'+    Assert_always(expected == out);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: splice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(expected == out);'), (3, 1, u'+    Assert_always(expected == out);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(expected == out);'), (3, 1, u'+    Assert_always(expected == out);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(LabelSplicer_isOneHop(4));'), (3, 1, u'+    Assert_always(LabelSplicer_isOneHop(4));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: isOneHop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(LabelSplicer_isOneHop(4));'), (3, 1, u'+    Assert_always(LabelSplicer_isOneHop(4));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(LabelSplicer_isOneHop(4));'), (3, 1, u'+    Assert_always(LabelSplicer_isOneHop(4));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Base32_encode(base32, 64, bytes, 32) == 52);'), (3, 1, u'+    Assert_always(Base32_encode(base32, 64, bytes, 32) == 52);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Base32_encode(base32, 64, bytes, 32) == 52);'), (3, 1, u'+    Assert_always(Base32_encode(base32, 64, bytes, 32) == 52);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Base32_encode(base32, 64, bytes, 32) == 52);'), (3, 1, u'+    Assert_always(Base32_encode(base32, 64, bytes, 32) == 52);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Base32_decode(bytes2, 32, base32, 52) == 32);'), (3, 1, u'+    Assert_always(Base32_decode(bytes2, 32, base32, 52) == 32);'), (5, 2, u'-    assert(memcmp(bytes, bytes2, 32) == 0);'), (6, 1, u'+    Assert_always(memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Base32_decode(bytes2, 32, base32, 52) == 32);'), (3, 1, u'+    Assert_always(Base32_decode(bytes2, 32, base32, 52) == 32);'), (5, 2, u'-    assert(memcmp(bytes, bytes2, 32) == 0);'), (6, 1, u'+    Assert_always(memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Base32_decode(bytes2, 32, base32, 52) == 32);'), (3, 1, u'+    Assert_always(Base32_decode(bytes2, 32, base32, 52) == 32);'), (5, 2, u'-    assert(memcmp(bytes, bytes2, 32) == 0);'), (6, 1, u'+    Assert_always(memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Bits_bitReverse64(Bits_bitReverse64(x)) == x);'), (3, 2, u'-    assert(Bits_bitReverse64(1) == ((uint64_t)1)<<63);'), (4, 2, u'-    assert(Bits_bitReverse64(0) == 0);'), (5, 1, u'+    Assert_always(Bits_bitReverse64(Bits_bitReverse64(x)) == x);'), (6, 1, u'+    Assert_always(Bits_bitReverse64(1) == ((uint64_t)1)<<63);'), (7, 1, u'+    Assert_always(Bits_bitReverse64(0) == 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Bits_bitReverse64(Bits_bitReverse64(x)) == x);'), (3, 2, u'-    assert(Bits_bitReverse64(1) == ((uint64_t)1)<<63);'), (4, 2, u'-    assert(Bits_bitReverse64(0) == 0);'), (5, 1, u'+    Assert_always(Bits_bitReverse64(Bits_bitReverse64(x)) == x);'), (6, 1, u'+    Assert_always(Bits_bitReverse64(1) == ((uint64_t)1)<<63);'), (7, 1, u'+    Assert_always(Bits_bitReverse64(0) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Bits_bitReverse64(Bits_bitReverse64(x)) == x);'), (3, 2, u'-    assert(Bits_bitReverse64(1) == ((uint64_t)1)<<63);'), (4, 2, u'-    assert(Bits_bitReverse64(0) == 0);'), (5, 1, u'+    Assert_always(Bits_bitReverse64(Bits_bitReverse64(x)) == x);'), (6, 1, u'+    Assert_always(Bits_bitReverse64(1) == ((uint64_t)1)<<63);'), (7, 1, u'+    Assert_always(Bits_bitReverse64(0) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(checksum == calcatedSum);'), (3, 1, u'+    Assert_always(checksum == calcatedSum);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: checksumAlgorithmTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(checksum == calcatedSum);'), (3, 1, u'+    Assert_always(checksum == calcatedSum);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(checksum == calcatedSum);'), (3, 1, u'+    Assert_always(checksum == calcatedSum);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(udp6Checksum == calcatedSum);'), (3, 1, u'+    Assert_always(udp6Checksum == calcatedSum);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: udp6ChecksumTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(udp6Checksum == calcatedSum);'), (3, 1, u'+    Assert_always(udp6Checksum == calcatedSum);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(udp6Checksum == calcatedSum);'), (3, 1, u'+    Assert_always(udp6Checksum == calcatedSum);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(checksum == calcatedSum);'), (3, 1, u'+    Assert_always(checksum == calcatedSum);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: icmp6ChecksumTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(checksum == calcatedSum);'), (3, 1, u'+    Assert_always(checksum == calcatedSum);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(checksum == calcatedSum);'), (3, 1, u'+    Assert_always(checksum == calcatedSum);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(c == Endian_bigEndianToHost16(sc));'), (3, 2, u'-        assert(a == Endian_bigEndianToHost32(sa));'), (4, 2, u'-        assert(a == Endian_littleEndianToHost32(a));'), (5, 2, u'-        assert(b == Endian_bigEndianToHost64(sb));'), (6, 1, u'+        Assert_always(c == Endian_bigEndianToHost16(sc));'), (7, 1, u'+        Assert_always(a == Endian_bigEndianToHost32(sa));'), (8, 1, u'+        Assert_always(a == Endian_littleEndianToHost32(a));'), (9, 1, u'+        Assert_always(b == Endian_bigEndianToHost64(sb));'), (11, 2, u'-        assert(c == Endian_bigEndianToHost16(c));'), (12, 2, u'-        assert(a == Endian_bigEndianToHost32(a));'), (13, 2, u'-        assert(a == Endian_littleEndianToHost32(sa));'), (14, 2, u'-        assert(b == Endian_bigEndianToHost64(b));'), (15, 1, u'+        Assert_always(c == Endian_bigEndianToHost16(c));'), (16, 1, u'+        Assert_always(a == Endian_bigEndianToHost32(a));'), (17, 1, u'+        Assert_always(a == Endian_littleEndianToHost32(sa));'), (18, 1, u'+        Assert_always(b == Endian_bigEndianToHost64(b));'), (21, 2, u'-    assert(b == Endian_byteSwap64(sb));'), (22, 2, u'-    assert(a == Endian_byteSwap32(sa));'), (23, 1, u'+    Assert_always(b == Endian_byteSwap64(sb));'), (24, 1, u'+    Assert_always(a == Endian_byteSwap32(sa));')]
===========================================
===========================================
Total add: 10
Total del: 10
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(c == Endian_bigEndianToHost16(sc));'), (3, 2, u'-        assert(a == Endian_bigEndianToHost32(sa));'), (4, 2, u'-        assert(a == Endian_littleEndianToHost32(a));'), (5, 2, u'-        assert(b == Endian_bigEndianToHost64(sb));'), (6, 1, u'+        Assert_always(c == Endian_bigEndianToHost16(sc));'), (7, 1, u'+        Assert_always(a == Endian_bigEndianToHost32(sa));'), (8, 1, u'+        Assert_always(a == Endian_littleEndianToHost32(a));'), (9, 1, u'+        Assert_always(b == Endian_bigEndianToHost64(sb));'), (11, 2, u'-        assert(c == Endian_bigEndianToHost16(c));'), (12, 2, u'-        assert(a == Endian_bigEndianToHost32(a));'), (13, 2, u'-        assert(a == Endian_littleEndianToHost32(sa));'), (14, 2, u'-        assert(b == Endian_bigEndianToHost64(b));'), (15, 1, u'+        Assert_always(c == Endian_bigEndianToHost16(c));'), (16, 1, u'+        Assert_always(a == Endian_bigEndianToHost32(a));'), (17, 1, u'+        Assert_always(a == Endian_littleEndianToHost32(sa));'), (18, 1, u'+        Assert_always(b == Endian_bigEndianToHost64(b));'), (21, 2, u'-    assert(b == Endian_byteSwap64(sb));'), (22, 2, u'-    assert(a == Endian_byteSwap32(sa));'), (23, 1, u'+    Assert_always(b == Endian_byteSwap64(sb));'), (24, 1, u'+    Assert_always(a == Endian_byteSwap32(sa));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(c == Endian_bigEndianToHost16(sc));'), (3, 2, u'-        assert(a == Endian_bigEndianToHost32(sa));'), (4, 2, u'-        assert(a == Endian_littleEndianToHost32(a));'), (5, 2, u'-        assert(b == Endian_bigEndianToHost64(sb));'), (6, 1, u'+        Assert_always(c == Endian_bigEndianToHost16(sc));'), (7, 1, u'+        Assert_always(a == Endian_bigEndianToHost32(sa));'), (8, 1, u'+        Assert_always(a == Endian_littleEndianToHost32(a));'), (9, 1, u'+        Assert_always(b == Endian_bigEndianToHost64(sb));'), (11, 2, u'-        assert(c == Endian_bigEndianToHost16(c));'), (12, 2, u'-        assert(a == Endian_bigEndianToHost32(a));'), (13, 2, u'-        assert(a == Endian_littleEndianToHost32(sa));'), (14, 2, u'-        assert(b == Endian_bigEndianToHost64(b));'), (15, 1, u'+        Assert_always(c == Endian_bigEndianToHost16(c));'), (16, 1, u'+        Assert_always(a == Endian_bigEndianToHost32(a));'), (17, 1, u'+        Assert_always(a == Endian_littleEndianToHost32(sa));'), (18, 1, u'+        Assert_always(b == Endian_bigEndianToHost64(b));'), (21, 2, u'-    assert(b == Endian_byteSwap64(sb));'), (22, 2, u'-    assert(a == Endian_byteSwap32(sa));'), (23, 1, u'+    Assert_always(b == Endian_byteSwap64(sb));'), (24, 1, u'+    Assert_always(a == Endian_byteSwap32(sa));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Hex_encode(hex, 65, bytes, 32) == 64);'), (3, 1, u'+    Assert_always(Hex_encode(hex, 65, bytes, 32) == 64);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Hex_encode(hex, 65, bytes, 32) == 64);'), (3, 1, u'+    Assert_always(Hex_encode(hex, 65, bytes, 32) == 64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Hex_encode(hex, 65, bytes, 32) == 64);'), (3, 1, u'+    Assert_always(Hex_encode(hex, 65, bytes, 32) == 64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Hex_decode(bytes2, 32, hex, 64) == 32);'), (3, 1, u'+    Assert_always(Hex_decode(bytes2, 32, hex, 64) == 32);'), (5, 2, u'-    assert(memcmp(bytes, bytes2, 32) == 0);'), (6, 1, u'+    Assert_always(memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Hex_decode(bytes2, 32, hex, 64) == 32);'), (3, 1, u'+    Assert_always(Hex_decode(bytes2, 32, hex, 64) == 32);'), (5, 2, u'-    assert(memcmp(bytes, bytes2, 32) == 0);'), (6, 1, u'+    Assert_always(memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Hex_decode(bytes2, 32, hex, 64) == 32);'), (3, 1, u'+    Assert_always(Hex_decode(bytes2, 32, hex, 64) == 32);'), (5, 2, u'-    assert(memcmp(bytes, bytes2, 32) == 0);'), (6, 1, u'+    Assert_always(memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!LabelSplicer_isOneHop(4));'), (3, 1, u'+    assert(LabelSplicer_isOneHop(4));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: isOneHop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!LabelSplicer_isOneHop(4));'), (3, 1, u'+    assert(LabelSplicer_isOneHop(4));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!LabelSplicer_isOneHop(4));'), (3, 1, u'+    assert(LabelSplicer_isOneHop(4));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1, 2, u'-    assert(index != -1);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: runTest_dontReplaceMostRecentlyUsed
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1, 2, u'-    assert(index != -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1, 2, u'-    assert(index != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(context->ip6Header == ip6);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: outgoingFromMe
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(context->ip6Header == ip6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(context->ip6Header == ip6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    Assert_assertTrue(TXID_LEN == 4);')]
===========================================
===========================================
Total add: 25
Total del: 11
Header: incomingFromParent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    Assert_assertTrue(TXID_LEN == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+    Assert_assertTrue(TXID_LEN == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        Assert_assertTrue(TXID_LEN == 4);')]
===========================================
===========================================
Total add: 11
Total del: 4
Header: incomingFromClient
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        Assert_assertTrue(TXID_LEN == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+        Assert_assertTrue(TXID_LEN == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    assert(txid);')]
===========================================
===========================================
Total add: 7
Total del: 5
Header: Admin_sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    assert(txid);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    assert(txid);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    assert(expected == out);'), (20, 1, u'+    assert(!LabelSplicer_isOneHop(4));')]
===========================================
===========================================
Total add: 5
Total del: 8
Header: splice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    assert(expected == out);'), (20, 1, u'+    assert(!LabelSplicer_isOneHop(4));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    assert(expected == out);'), (20, 1, u'+    assert(!LabelSplicer_isOneHop(4));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+Assert_assertTrue(sizeof(struct ErrorPacket) == Headers_SwitchHeader_SIZE + sizeof(struct Control));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: struct ErrorPacket {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+Assert_assertTrue(sizeof(struct ErrorPacket) == Headers_SwitchHeader_SIZE + sizeof(struct Control));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+Assert_assertTrue(sizeof(struct ErrorPacket) == Headers_SwitchHeader_SIZE + sizeof(struct Control));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ep->internal.sendMessage);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: sendFromSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ep->internal.sendMessage);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ep->internal.sendMessage);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ep->switchIf.senderContext == ep);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: sendFromSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ep->switchIf.senderContext == ep);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ep->switchIf.senderContext == ep);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert(&ep->internal == ic->imap->interfaces[index]);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: getEndpoint
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert(&ep->internal == ic->imap->interfaces[index]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert(&ep->internal == ic->imap->interfaces[index]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ep->external);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ep->external);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ep->external);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(index > 0);'), (3, 1, u'+    assert(index >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: closeInterface
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(index > 0);'), (3, 1, u'+    assert(index >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(index > 0);'), (3, 1, u'+    assert(index >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(index > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: closeInterface
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(index > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(index > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(i == 0);'), (3, 1, u'+            assert(i == 0 || thisEp == ep);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: moveEndpointIfNeeded
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(i == 0);'), (3, 1, u'+            assert(i == 0 || thisEp == ep);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(i == 0);'), (3, 1, u'+            assert(i == 0 || thisEp == ep);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            assert(i == 0);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: moveEndpointIfNeeded
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            assert(i == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            assert(i == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+    assert(!memcmp(expected, output, 56));'), (28, 1, u'+    assert(m.length == 12 && !memcmp(m.bytes, "hello world", m.length));')]
===========================================
===========================================
Total add: 20
Total del: 4
Header: encryptRndNonceTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+    assert(!memcmp(expected, output, 56));'), (28, 1, u'+    assert(m.length == 12 && !memcmp(m.bytes, "hello world", m.length));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+    assert(!memcmp(expected, output, 56));'), (28, 1, u'+    assert(m.length == 12 && !memcmp(m.bytes, "hello world", m.length));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(!Exports_decryptRndNonce(nonce, &m, secret));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: encryptRndNonceTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(!Exports_decryptRndNonce(nonce, &m, secret));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(!Exports_decryptRndNonce(nonce, &m, secret));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(Headers_getPriority(destinationSwitchHeader) == 0);')]
===========================================
===========================================
Total add: 0
Total del: 3
Header: sendToSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(Headers_getPriority(destinationSwitchHeader) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(Headers_getPriority(destinationSwitchHeader) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!memcmp(actual, expectedOutput, 264));')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: testHello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!memcmp(actual, expectedOutput, 264));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!memcmp(actual, expectedOutput, 264));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    assert(!memcmp(msg.bytes, "\\0\\0\\0\\0", 4));'), (8, 1, u'+    assert(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);'), (10, 1, u'+    assert(!memcmp(actual, expectedOutput, 264));'), (56, 1, u'+    assert(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);')]
===========================================
===========================================
Total add: 52
Total del: 13
Header: hello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    assert(!memcmp(msg.bytes, "\\0\\0\\0\\0", 4));'), (8, 1, u'+    assert(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);'), (10, 1, u'+    assert(!memcmp(actual, expectedOutput, 264));'), (56, 1, u'+    assert(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    assert(!memcmp(msg.bytes, "\\0\\0\\0\\0", 4));'), (8, 1, u'+    assert(Hex_encode(actual, 265, outMessage->bytes, outMessage->length) > 0);'), (10, 1, u'+    assert(!memcmp(actual, expectedOutput, 264));'), (56, 1, u'+    assert(Hex_decode(message, 132, messageHex, strlen((char*)messageHex)) > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-        assert(c == Endian_bigEndianToHost16(c_be));'), (19, 2, u'-        assert(a == Endian_bigEndianToHost32(a_be));'), (20, 2, u'-        assert(b == Endian_bigEndianToHost64(b_be));'), (22, 1, u'+        assert(c == Endian_bigEndianToHost16(sc));'), (23, 1, u'+        assert(a == Endian_bigEndianToHost32(sa));'), (24, 1, u'+        assert(a == Endian_littleEndianToHost32(a));'), (25, 1, u'+        assert(b == Endian_bigEndianToHost64(sb));'), (27, 1, u'+        assert(c == Endian_bigEndianToHost16(c));'), (28, 1, u'+        assert(a == Endian_bigEndianToHost32(a));'), (29, 1, u'+        assert(a == Endian_littleEndianToHost32(sa));'), (30, 1, u'+        assert(b == Endian_bigEndianToHost64(b));'), (33, 2, u'-    assert(b == Endian_byteSwap64_manual(b_be));'), (35, 2, u'-        assert(b == Endian_byteSwap64_bswap_64(b_be));'), (38, 2, u'-        assert(b == Endian_byteSwap64_OSSwapInt64(b_be));'), (40, 1, u'+    assert(b == Endian_byteSwap64(sb));'), (41, 1, u'+    assert(a == Endian_byteSwap32(sa));')]
===========================================
===========================================
Total add: 18
Total del: 17
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-        assert(c == Endian_bigEndianToHost16(c_be));'), (19, 2, u'-        assert(a == Endian_bigEndianToHost32(a_be));'), (20, 2, u'-        assert(b == Endian_bigEndianToHost64(b_be));'), (22, 1, u'+        assert(c == Endian_bigEndianToHost16(sc));'), (23, 1, u'+        assert(a == Endian_bigEndianToHost32(sa));'), (24, 1, u'+        assert(a == Endian_littleEndianToHost32(a));'), (25, 1, u'+        assert(b == Endian_bigEndianToHost64(sb));'), (27, 1, u'+        assert(c == Endian_bigEndianToHost16(c));'), (28, 1, u'+        assert(a == Endian_bigEndianToHost32(a));'), (29, 1, u'+        assert(a == Endian_littleEndianToHost32(sa));'), (30, 1, u'+        assert(b == Endian_bigEndianToHost64(b));'), (33, 2, u'-    assert(b == Endian_byteSwap64_manual(b_be));'), (35, 2, u'-        assert(b == Endian_byteSwap64_bswap_64(b_be));'), (38, 2, u'-        assert(b == Endian_byteSwap64_OSSwapInt64(b_be));'), (40, 1, u'+    assert(b == Endian_byteSwap64(sb));'), (41, 1, u'+    assert(a == Endian_byteSwap32(sa));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-        assert(c == Endian_bigEndianToHost16(c_be));'), (19, 2, u'-        assert(a == Endian_bigEndianToHost32(a_be));'), (20, 2, u'-        assert(b == Endian_bigEndianToHost64(b_be));'), (22, 1, u'+        assert(c == Endian_bigEndianToHost16(sc));'), (23, 1, u'+        assert(a == Endian_bigEndianToHost32(sa));'), (24, 1, u'+        assert(a == Endian_littleEndianToHost32(a));'), (25, 1, u'+        assert(b == Endian_bigEndianToHost64(sb));'), (27, 1, u'+        assert(c == Endian_bigEndianToHost16(c));'), (28, 1, u'+        assert(a == Endian_bigEndianToHost32(a));'), (29, 1, u'+        assert(a == Endian_littleEndianToHost32(sa));'), (30, 1, u'+        assert(b == Endian_bigEndianToHost64(b));'), (33, 2, u'-    assert(b == Endian_byteSwap64_manual(b_be));'), (35, 2, u'-        assert(b == Endian_byteSwap64_bswap_64(b_be));'), (38, 2, u'-        assert(b == Endian_byteSwap64_OSSwapInt64(b_be));'), (40, 1, u'+    assert(b == Endian_byteSwap64(sb));'), (41, 1, u'+    assert(a == Endian_byteSwap32(sa));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(store->labelSum > 0);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: replaceNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(store->labelSum > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(store->labelSum > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(finalOut->length == 13);'), (3, 2, u'-    assert(memcmp(hello, finalOut->bytes, 13) == 0);'), (4, 1, u'+    assert(finalOut->length == 12);'), (5, 1, u'+    assert(memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: repeatHello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(finalOut->length == 13);'), (3, 2, u'-    assert(memcmp(hello, finalOut->bytes, 13) == 0);'), (4, 1, u'+    assert(finalOut->length == 12);'), (5, 1, u'+    assert(memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(finalOut->length == 13);'), (3, 2, u'-    assert(memcmp(hello, finalOut->bytes, 13) == 0);'), (4, 1, u'+    assert(finalOut->length == 12);'), (5, 1, u'+    assert(memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(b == Endian_byteSwap64_OSSwapInt64(b_be));')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(b == Endian_byteSwap64_OSSwapInt64(b_be));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(b == Endian_byteSwap64_OSSwapInt64(b_be));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    assert(a == Endian_bigEndianToHost32(a_be));'), (12, 2, u'-    assert(b == Endian_bigEndianToHost64(b_be));'), (13, 2, u'-    assert(c == Endian_bigEndianToHost16(c_be));'), (14, 1, u'+        assert(c == Endian_bigEndianToHost16(c_be));'), (15, 1, u'+        assert(a == Endian_bigEndianToHost32(a_be));'), (16, 1, u'+        assert(b == Endian_bigEndianToHost64(b_be));'), (19, 1, u'+    assert(b == Endian_byteSwap64_manual(b_be));'), (21, 1, u'+        assert(b == Endian_byteSwap64_bswap_64(b_be));')]
===========================================
===========================================
Total add: 15
Total del: 5
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    assert(a == Endian_bigEndianToHost32(a_be));'), (12, 2, u'-    assert(b == Endian_bigEndianToHost64(b_be));'), (13, 2, u'-    assert(c == Endian_bigEndianToHost16(c_be));'), (14, 1, u'+        assert(c == Endian_bigEndianToHost16(c_be));'), (15, 1, u'+        assert(a == Endian_bigEndianToHost32(a_be));'), (16, 1, u'+        assert(b == Endian_bigEndianToHost64(b_be));'), (19, 1, u'+    assert(b == Endian_byteSwap64_manual(b_be));'), (21, 1, u'+        assert(b == Endian_byteSwap64_bswap_64(b_be));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    assert(a == Endian_bigEndianToHost32(a_be));'), (12, 2, u'-    assert(b == Endian_bigEndianToHost64(b_be));'), (13, 2, u'-    assert(c == Endian_bigEndianToHost16(c_be));'), (14, 1, u'+        assert(c == Endian_bigEndianToHost16(c_be));'), (15, 1, u'+        assert(a == Endian_bigEndianToHost32(a_be));'), (16, 1, u'+        assert(b == Endian_bigEndianToHost64(b_be));'), (19, 1, u'+    assert(b == Endian_byteSwap64_manual(b_be));'), (21, 1, u'+        assert(b == Endian_byteSwap64_bswap_64(b_be));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+    assert(buff = evbuffer_new());')]
===========================================
===========================================
Total add: 21
Total del: 6
Header: handleApiEvent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+    assert(buff = evbuffer_new());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+    assert(buff = evbuffer_new());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(finalOut->length == 13);'), (3, 2, u'-    assert(memcmp(hello, finalOut->bytes, 13) == 0);'), (4, 1, u'+    assert(finalOut->length == 12);'), (5, 1, u'+    assert(memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: hello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(finalOut->length == 13);'), (3, 2, u'-    assert(memcmp(hello, finalOut->bytes, 13) == 0);'), (4, 1, u'+    assert(finalOut->length == 12);'), (5, 1, u'+    assert(memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(finalOut->length == 13);'), (3, 2, u'-    assert(memcmp(hello, finalOut->bytes, 13) == 0);'), (4, 1, u'+    assert(finalOut->length == 12);'), (5, 1, u'+    assert(memcmp(hello, finalOut->bytes, 12) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-            assert(!"1 hop message, this should have been handled elsewhere.\\n");')]
===========================================
===========================================
Total add: 3
Total del: 7
Header: core
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-            assert(!"1 hop message, this should have been handled elsewhere.\\n");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-            assert(!"1 hop message, this should have been handled elsewhere.\\n");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+            assert(!"1 hop message, this should have been handled elsewhere.\\n");')]
===========================================
===========================================
Total add: 20
Total del: 8
Header: core
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+            assert(!"1 hop message, this should have been handled elsewhere.\\n");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+            assert(!"1 hop message, this should have been handled elsewhere.\\n");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(!((uintptr_t)message->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(!((uintptr_t)message->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(!((uintptr_t)message->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(!((uintptr_t)received->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(!((uintptr_t)received->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(!((uintptr_t)received->bytes % 4) || !"alignment fault");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(!memcmp(msg.bytes, "\\0\\0\\0\\0", 4));'), (18, 1, u'+    assert(finalOut);'), (19, 1, u'+    assert(finalOut->length == 13);'), (20, 1, u'+    assert(memcmp(hello, finalOut->bytes, 13) == 0);')]
===========================================
===========================================
Total add: 61
Total del: 0
Header: hello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(!memcmp(msg.bytes, "\\0\\0\\0\\0", 4));'), (18, 1, u'+    assert(finalOut);'), (19, 1, u'+    assert(finalOut->length == 13);'), (20, 1, u'+    assert(memcmp(hello, finalOut->bytes, 13) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(!memcmp(msg.bytes, "\\0\\0\\0\\0", 4));'), (18, 1, u'+    assert(finalOut);'), (19, 1, u'+    assert(finalOut->length == 13);'), (20, 1, u'+    assert(memcmp(hello, finalOut->bytes, 13) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+                    assert(!memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: NodeStore_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+                    assert(!memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+                    assert(!memcmp(realAddr, addr->ip6.bytes, 16));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(Headers_getPriority(destinationSwitchHeader) == 0);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: sendToSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(Headers_getPriority(destinationSwitchHeader) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(Headers_getPriority(destinationSwitchHeader) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-                        assert(!n);')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: NodeStore_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-                        assert(!n);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-                        assert(!n);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+                        assert(!n);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: NodeStore_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+                        assert(!n);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+                        assert(!n);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!isZero(header->handshake.encryptedTempKey, 32));'), (3, 2, u'-            assert(!isZero(wrapper->secret, 32));'), (4, 1, u'+            assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (5, 1, u'+            assert(!Bits_isZero(wrapper->secret, 32));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!isZero(header->handshake.encryptedTempKey, 32));'), (3, 2, u'-            assert(!isZero(wrapper->secret, 32));'), (4, 1, u'+            assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (5, 1, u'+            assert(!Bits_isZero(wrapper->secret, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!isZero(header->handshake.encryptedTempKey, 32));'), (3, 2, u'-            assert(!isZero(wrapper->secret, 32));'), (4, 1, u'+            assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));'), (5, 1, u'+            assert(!Bits_isZero(wrapper->secret, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+            assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+            assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(!isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+            assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+        assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+        assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+        assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+        assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+        assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!isZero(header->handshake.encryptedTempKey, 32));'), (3, 1, u'+        assert(!Bits_isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+            assert(!"Somebody connected to us and we don\'t know their key!\\n");')]
===========================================
===========================================
Total add: 17
Total del: 3
Header: receivedFromCryptoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+            assert(!"Somebody connected to us and we don\'t know their key!\\n");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+            assert(!"Somebody connected to us and we don\'t know their key!\\n");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(false);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: NodeStore_addNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Total add: 0
Total del: 3
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(!wrapper->authenticatePackets);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CryptoAuth_getSession
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(!wrapper->authenticatePackets);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(!wrapper->authenticatePackets);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!context->contentSmInside->sendMessage(&message, context->contentSmInside));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!context->contentSmInside->sendMessage(&message, context->contentSmInside));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!context->contentSmInside->sendMessage(&message, context->contentSmInside));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            assert(!memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            assert(!memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            assert(!memcmp(header->handshake.encryptedTempKey, myTempPubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(if1Msg);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: sendToIf1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(if1Msg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(if1Msg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(if2Msg);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: sendToIf2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(if2Msg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(if2Msg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            assert(!isZero(header->handshake.encryptedTempKey, 32));'), (4, 1, u'+            assert(!isZero(wrapper->secret, 32));')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            assert(!isZero(header->handshake.encryptedTempKey, 32));'), (4, 1, u'+            assert(!isZero(wrapper->secret, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+            assert(!isZero(header->handshake.encryptedTempKey, 32));'), (4, 1, u'+            assert(!isZero(wrapper->secret, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+            assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: encryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+            assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+            assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        assert(!isZero(header->handshake.encryptedTempKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(finalOut);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: hello
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(finalOut);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(finalOut);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!context->contentSmInside->sendMessage(message, context->contentSmInside));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ip6FromTun
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!context->contentSmInside->sendMessage(message, context->contentSmInside));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!context->contentSmInside->sendMessage(message, context->contentSmInside));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("\\x00\\x07"), outMessage->length) == 0);'), (3, 1, u'+    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("8\\x00"), outMessage->length) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: testSearch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("\\x00\\x07"), outMessage->length) == 0);'), (3, 1, u'+    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("8\\x00"), outMessage->length) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("\\x00\\x07"), outMessage->length) == 0);'), (3, 1, u'+    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("8\\x00"), outMessage->length) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(!wrapper->authenticatePackets);'), (3, 1, u'+    assert(!wrapper->authenticatePackets);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CryptoAuth_getSession
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(!wrapper->authenticatePackets);'), (3, 1, u'+    assert(!wrapper->authenticatePackets);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(!wrapper->authenticatePackets);'), (3, 1, u'+    assert(!wrapper->authenticatePackets);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(memcmp(hello, finalOut->bytes, 13) == 0)'), (3, 1, u'+    assert(memcmp(hello, finalOut->bytes, 13) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handshake1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(memcmp(hello, finalOut->bytes, 13) == 0)'), (3, 1, u'+    assert(memcmp(hello, finalOut->bytes, 13) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(memcmp(hello, finalOut->bytes, 13) == 0)'), (3, 1, u'+    assert(memcmp(hello, finalOut->bytes, 13) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(strcmp((char*) outMessage->address->networkAddress, " 00011  ") == 0);'), (3, 1, u'+    assert(strcmp((char*) &outMessage->address->networkAddress_be, " 00011  ") == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: testSearch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(strcmp((char*) outMessage->address->networkAddress, " 00011  ") == 0);'), (3, 1, u'+    assert(strcmp((char*) &outMessage->address->networkAddress_be, " 00011  ") == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(strcmp((char*) outMessage->address->networkAddress, " 00011  ") == 0);'), (3, 1, u'+    assert(strcmp((char*) &outMessage->address->networkAddress_be, " 00011  ") == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Message_shift(message, 48 - (int32_t) sizeof(union Headers_CryptoAuth)));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decryptHandshake
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Message_shift(message, 48 - (int32_t) sizeof(union Headers_CryptoAuth)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(Message_shift(message, 48 - (int32_t) sizeof(union Headers_CryptoAuth)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->length + message->padding == 400);'), (3, 1, u'+    assert(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendMessageToIf2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->length + message->padding == 400);'), (3, 1, u'+    assert(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->length + message->padding == 400);'), (3, 1, u'+    assert(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->length + message->padding == 400);'), (3, 1, u'+    assert(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sendMessageToIf1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->length + message->padding == 400);'), (3, 1, u'+    assert(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message->length + message->padding == 400);'), (3, 1, u'+    assert(message->length + message->padding <= BUFFER_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(wrapper->nextNonce == 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: if
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(wrapper->nextNonce == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(wrapper->nextNonce == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(wrapper->nextNonce == 0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: printf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(wrapper->nextNonce == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(wrapper->nextNonce == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-Assert_assertTrue(sizeof(struct UDPHeader) == 8);')]
===========================================
===========================================
Total add: 1
Total del: 8
Header: context = context;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-Assert_assertTrue(sizeof(struct UDPHeader) == 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-Assert_assertTrue(sizeof(struct UDPHeader) == 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        assert(message->padding >= Headers_SwitchHeader_SIZE);')]
===========================================
===========================================
Total add: 4
Total del: 7
Header: sendToSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        assert(message->padding >= Headers_SwitchHeader_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-        assert(message->padding >= Headers_SwitchHeader_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-        assert(!"udpBindTo() can only be used once "')]
===========================================
===========================================
Total add: 159
Total del: 79
Header: serverFirstIncoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-        assert(!"udpBindTo() can only be used once "')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-        assert(!"udpBindTo() can only be used once "')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message.length == 43);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: handleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message.length == 43);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message.length == 43);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message.length == 51);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: assert
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message.length == 51);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message.length == 51);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120+40+120+12);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: sendToSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120+40+120+12);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120+40+120+12);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120+40+120);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: sendToSwitchFromCryptoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120+40+120);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120+40+120);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120+40);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: sendToRouter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120+40);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120+40);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120+40);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decryptedIncoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120+40);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120+40);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: outgoingFromMe
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(message->length == 51+120);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(hex && hex->len == 64);'), (6, 1, u'+    assert(Hex_encode(hex, 65, bytes, 32) == 64);'), (12, 1, u'+    assert(Hex_decode(bytes2, 32, hex, 64) == 32);'), (15, 2, u'-    assert(bytes2 && bytes2->len == 32);'), (16, 2, u'-    assert(memcmp(bytes, bytes2->bytes, 32) == 0);'), (17, 1, u'+    assert(memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
Total add: 8
Total del: 6
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(hex && hex->len == 64);'), (6, 1, u'+    assert(Hex_encode(hex, 65, bytes, 32) == 64);'), (12, 1, u'+    assert(Hex_decode(bytes2, 32, hex, 64) == 32);'), (15, 2, u'-    assert(bytes2 && bytes2->len == 32);'), (16, 2, u'-    assert(memcmp(bytes, bytes2->bytes, 32) == 0);'), (17, 1, u'+    assert(memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(hex && hex->len == 64);'), (6, 1, u'+    assert(Hex_encode(hex, 65, bytes, 32) == 64);'), (12, 1, u'+    assert(Hex_decode(bytes2, 32, hex, 64) == 32);'), (15, 2, u'-    assert(bytes2 && bytes2->len == 32);'), (16, 2, u'-    assert(memcmp(bytes, bytes2->bytes, 32) == 0);'), (17, 1, u'+    assert(memcmp(bytes, bytes2, 32) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+Assert_assertTrue(sizeof(struct UDPHeader) == 8);')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: context = context;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+Assert_assertTrue(sizeof(struct UDPHeader) == 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+Assert_assertTrue(sizeof(struct UDPHeader) == 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+assert(message.length == 43);'), (38, 1, u'+assert(message.length == 51);'), (41, 1, u'+    assert(!context->contentSmInside->sendMessage(&message, context->contentSmInside));')]
===========================================
===========================================
Total add: 37
Total del: 3
Header: handleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+assert(message.length == 43);'), (38, 1, u'+assert(message.length == 51);'), (41, 1, u'+    assert(!context->contentSmInside->sendMessage(&message, context->contentSmInside));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+assert(message.length == 43);'), (38, 1, u'+assert(message.length == 51);'), (41, 1, u'+    assert(!context->contentSmInside->sendMessage(&message, context->contentSmInside));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_assertTrue(sizeof(struct UDPHeader) == 8);')]
===========================================
===========================================
Total add: 0
Total del: 7
Header: isRouterTraffic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_assertTrue(sizeof(struct UDPHeader) == 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    Assert_assertTrue(sizeof(struct UDPHeader) == 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+assert(message->length == 51+120+40+120+12);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: sendToSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+assert(message->length == 51+120+40+120+12);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+assert(message->length == 51+120+40+120+12);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+assert(message->length == 51+120+40+120);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: sendToSwitchFromCryptoAuth
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+assert(message->length == 51+120+40+120);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+assert(message->length == 51+120+40+120);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+assert(message->length == 51+120+40);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: sendToRouter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+assert(message->length == 51+120+40);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+assert(message->length == 51+120+40);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+assert(message->length == 51+120+40);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: decryptedIncoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+assert(message->length == 51+120+40);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+assert(message->length == 51+120+40);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+assert(message->length == 51+120);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: outgoingFromMe
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+assert(message->length == 51+120);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+assert(message->length == 51+120);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(sizeof(struct UDPHeader) == 8);'), (3, 1, u'+    Assert_assertTrue(sizeof(struct UDPHeader) == 8);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: isRouterTraffic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(sizeof(struct UDPHeader) == 8);'), (3, 1, u'+    Assert_assertTrue(sizeof(struct UDPHeader) == 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT(sizeof(struct UDPHeader) == 8);'), (3, 1, u'+    Assert_assertTrue(sizeof(struct UDPHeader) == 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 2, u'-    assert(addrLength <= sizeof(struct sockaddr_storage));'), (71, 2, u'-    assert(rc <= MAX_MESSAGE_SIZE);')]
===========================================
===========================================
Total add: 25
Total del: 197
Header: incomingFromSwitch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 2, u'-    assert(addrLength <= sizeof(struct sockaddr_storage));'), (71, 2, u'-    assert(rc <= MAX_MESSAGE_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(70, 2, u'-    assert(addrLength <= sizeof(struct sockaddr_storage));'), (71, 2, u'-    assert(rc <= MAX_MESSAGE_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(strcmp(outMessage->peerAddress, "000016") == 0);'), (9, 1, u'+    assert(strcmp((char*) outMessage->address->networkAddress, " 00011  ") == 0);')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: testSearch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(strcmp(outMessage->peerAddress, "000016") == 0);'), (9, 1, u'+    assert(strcmp((char*) outMessage->address->networkAddress, " 00011  ") == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(strcmp(outMessage->peerAddress, "000016") == 0);'), (9, 1, u'+    assert(strcmp((char*) outMessage->address->networkAddress, " 00011  ") == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    assert(node1->reach == 505306882);'), (10, 1, u'+    assert(node1->reach == 1601894175);')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: testSearch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    assert(node1->reach == 505306882);'), (10, 1, u'+    assert(node1->reach == 1601894175);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    assert(node1->reach == 505306882);'), (10, 1, u'+    assert(node1->reach == 1601894175);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    assert(newMembersList[memberCount] == NULL);'), (23, 2, u'-    assert(newMembersList[memberCount] == NULL);')]
===========================================
===========================================
Total add: 6
Total del: 21
Header: DHTModules_register
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    assert(newMembersList[memberCount] == NULL);'), (23, 2, u'-    assert(newMembersList[memberCount] == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    assert(newMembersList[memberCount] == NULL);'), (23, 2, u'-    assert(newMembersList[memberCount] == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(msg->padding >= 16 && msg->length >= 16);'), (6, 1, u'+    assert(msg->padding >= 16);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: decryptRndNonce
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(msg->padding >= 16 && msg->length >= 16);'), (6, 1, u'+    assert(msg->padding >= 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(msg->padding >= 16 && msg->length >= 16);'), (6, 1, u'+    assert(msg->padding >= 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 1, u'+    assert(52 == Base32_encode(base32PubKey, 53, pubKey, 32));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    assert(addr.ss_family == AF_INET || NULL == "Scanning to map interface to address doesn\'t "')]
===========================================
===========================================
Total add: 18
Total del: 11
Header: UDPInterface_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    assert(addr.ss_family == AF_INET || NULL == "Scanning to map interface to address doesn\'t "')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-    assert(addr.ss_family == AF_INET || NULL == "Scanning to map interface to address doesn\'t "')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-assert(message->length + message->padding == 400);'), (8, 1, u'+    assert(message->length + message->padding == 400);')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: sendMessageToIf2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-assert(message->length + message->padding == 400);'), (8, 1, u'+    assert(message->length + message->padding == 400);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-assert(message->length + message->padding == 400);'), (8, 1, u'+    assert(message->length + message->padding == 400);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-assert(message->length + message->padding == 400);'), (8, 1, u'+    assert(message->length + message->padding == 400);')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: sendMessageToIf1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-assert(message->length + message->padding == 400);'), (8, 1, u'+    assert(message->length + message->padding == 400);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-assert(message->length + message->padding == 400);'), (8, 1, u'+    assert(message->length + message->padding == 400);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    assert(received->padding >= 12 || "need at least 12 bytes of padding in incoming message");')]
===========================================
===========================================
Total add: 30
Total del: 31
Header: checkNonce
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    assert(received->padding >= 12 || "need at least 12 bytes of padding in incoming message");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    assert(received->padding >= 12 || "need at least 12 bytes of padding in incoming message");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    assert(Message_shift(&content, 48 + 4 - (int32_t)sizeof(union Headers_CryptoAuth)));'), (21, 1, u'+    assert(Message_shift(message, 48 - (int32_t) sizeof(union Headers_CryptoAuth)));')]
===========================================
===========================================
Total add: 6
Total del: 10
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    assert(Message_shift(&content, 48 + 4 - (int32_t)sizeof(union Headers_CryptoAuth)));'), (21, 1, u'+    assert(Message_shift(message, 48 - (int32_t) sizeof(union Headers_CryptoAuth)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    assert(Message_shift(&content, 48 + 4 - (int32_t)sizeof(union Headers_CryptoAuth)));'), (21, 1, u'+    assert(Message_shift(message, 48 - (int32_t) sizeof(union Headers_CryptoAuth)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+    assert(msg->padding >= 16 && msg->length >= 16);')]
===========================================
===========================================
Total add: 16
Total del: 12
Header: CryptoAuth_addUser
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+    assert(msg->padding >= 16 && msg->length >= 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+    assert(msg->padding >= 16 && msg->length >= 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(encryptKey(header, sharedSecret, myTempPubKey) == 0);'), (20, 1, u'+        assert(message->padding >= 36 || !"not enough padding");')]
===========================================
===========================================
Total add: 32
Total del: 5
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(encryptKey(header, sharedSecret, myTempPubKey) == 0);'), (20, 1, u'+        assert(message->padding >= 36 || !"not enough padding");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(encryptKey(header, sharedSecret, myTempPubKey) == 0);'), (20, 1, u'+        assert(message->padding >= 36 || !"not enough padding");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+    assert(received->padding >= 12 || "need at least 12 bytes of padding in incoming message");'), (165, 1, u'+    assert(Message_shift(&content, 48 + 4 - (int32_t)sizeof(union Headers_CryptoAuth)));')]
===========================================
===========================================
Total add: 96
Total del: 90
Header: receiveMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+    assert(received->padding >= 12 || "need at least 12 bytes of padding in incoming message");'), (165, 1, u'+    assert(Message_shift(&content, 48 + 4 - (int32_t)sizeof(union Headers_CryptoAuth)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+    assert(received->padding >= 12 || "need at least 12 bytes of padding in incoming message");'), (165, 1, u'+    assert(Message_shift(&content, 48 + 4 - (int32_t)sizeof(union Headers_CryptoAuth)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(strcmp(outMessage->peerAddress, "000014") == 0);'), (6, 1, u'+    assert(strcmp(outMessage->peerAddress, "000016") == 0);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: testSearch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(strcmp(outMessage->peerAddress, "000014") == 0);'), (6, 1, u'+    assert(strcmp(outMessage->peerAddress, "000016") == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(strcmp(outMessage->peerAddress, "000014") == 0);'), (6, 1, u'+    assert(strcmp(outMessage->peerAddress, "000016") == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(node1->reach == 23808);'), (7, 1, u'+    assert(node1->reach == 505306882);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: testSearch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(node1->reach == 23808);'), (7, 1, u'+    assert(node1->reach == 505306882);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(node1->reach == 23808);'), (7, 1, u'+    assert(node1->reach == 505306882);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    assert(node1->reach == 23808);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: testSearch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    assert(node1->reach == 23808);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    assert(node1->reach == 23808);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("\\x00\\x06"), outMessage->length) == 0);'), (10, 1, u'+    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("\\x00\\x07"), outMessage->length) == 0);')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: testSearch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("\\x00\\x06"), outMessage->length) == 0);'), (10, 1, u'+    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("\\x00\\x07"), outMessage->length) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("\\x00\\x06"), outMessage->length) == 0);'), (10, 1, u'+    assert(memcmp(outMessage->bytes, EXPECTED_OUTPUT("\\x00\\x07"), outMessage->length) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(target != NULL);'), (3, 2, u'-assert(id != NULL);'), (7, 2, u'-    assert(token != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: genToken
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(target != NULL);'), (3, 2, u'-assert(id != NULL);'), (7, 2, u'-    assert(token != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(target != NULL);'), (3, 2, u'-assert(id != NULL);'), (7, 2, u'-    assert(token != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message);'), (3, 2, u'-    assert(registry);'), (6, 2, u'-    assert(registry->members);'), (7, 2, u'-    assert(registry->memberCount);')]
===========================================
===========================================
Total add: 0
Total del: 6
Header: DHTModules_handleIncoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message);'), (3, 2, u'-    assert(registry);'), (6, 2, u'-    assert(registry->members);'), (7, 2, u'-    assert(registry->memberCount);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(message);'), (3, 2, u'-    assert(registry);'), (6, 2, u'-    assert(registry->members);'), (7, 2, u'-    assert(registry->memberCount);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(context == context->module.context);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: SerializationModule_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(context == context->module.context);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(context == context->module.context);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+assert(target != NULL);'), (40, 1, u'+assert(id != NULL);'), (43, 1, u'+    assert(token != NULL);')]
===========================================
===========================================
Total add: 35
Total del: 36
Header: SHA1Store_register
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+assert(target != NULL);'), (40, 1, u'+assert(id != NULL);'), (43, 1, u'+    assert(token != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+assert(target != NULL);'), (40, 1, u'+assert(id != NULL);'), (43, 1, u'+    assert(token != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(message);'), (3, 1, u'+    assert(registry);'), (6, 1, u'+    assert(registry->members);'), (7, 1, u'+    assert(registry->memberCount);')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: DHTModules_handleIncoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(message);'), (3, 1, u'+    assert(registry);'), (6, 1, u'+    assert(registry->members);'), (7, 1, u'+    assert(registry->memberCount);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(message);'), (3, 1, u'+    assert(registry);'), (6, 1, u'+    assert(registry->members);'), (7, 1, u'+    assert(registry->memberCount);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+    assert(context == context->module.context);')]
===========================================
===========================================
Total add: 13
Total del: 22
Header: handleIncoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+    assert(context == context->module.context);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+    assert(context == context->module.context);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+        assert(message.replyTo != NULL);'), (37, 1, u'+            assert(tid != NULL);'), (38, 1, u'+            assert(memcmp(tid->bytes, transactionId->bytes, transactionId->len) == 0);'), (41, 1, u'+            assert(tid == NULL);'), (56, 1, u'+        assert(transactionId->len < MAX_TRANSACTION_ID_SIZE);')]
===========================================
===========================================
Total add: 30
Total del: 25
Header: sendMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+        assert(message.replyTo != NULL);'), (37, 1, u'+            assert(tid != NULL);'), (38, 1, u'+            assert(memcmp(tid->bytes, transactionId->bytes, transactionId->len) == 0);'), (41, 1, u'+            assert(tid == NULL);'), (56, 1, u'+        assert(transactionId->len < MAX_TRANSACTION_ID_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+        assert(message.replyTo != NULL);'), (37, 1, u'+            assert(tid != NULL);'), (38, 1, u'+            assert(memcmp(tid->bytes, transactionId->bytes, transactionId->len) == 0);'), (41, 1, u'+            assert(tid == NULL);'), (56, 1, u'+        assert(transactionId->len < MAX_TRANSACTION_ID_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(message.replyTo != NULL);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: send_error
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(message.replyTo != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(message.replyTo != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(localModule.handleOutgoing == NULL);')]
===========================================
===========================================
Total add: 0
Total del: 5
Header: LegacyConnectorModule_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(localModule.handleOutgoing == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(localModule.handleOutgoing == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(vcontext != NULL);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: handleIncoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(vcontext != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(vcontext != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(modulePtr != NULL);'), (4, 2, u'-        assert(module != NULL);')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: DHTModules_handleIncoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(modulePtr != NULL);'), (4, 2, u'-        assert(module != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(modulePtr != NULL);'), (4, 2, u'-        assert(module != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(context != NULL);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: handleIncomingDHT
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(context != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-assert(context != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+assert(context != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: handleIncomingDHT
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+assert(context != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+assert(context != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(modulePtr != NULL);'), (4, 1, u'+        assert(module != NULL);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: DHTModules_handleIncoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(modulePtr != NULL);'), (4, 1, u'+        assert(module != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(modulePtr != NULL);'), (4, 1, u'+        assert(module != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(module != NULL);')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: dhtModuleHandleOutgoing
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(module != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(module != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(vcontext != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: handleIncoming
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(vcontext != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(vcontext != NULL);')]
===========================================
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
1518
Mismatch count:5052
Normal count:37784
