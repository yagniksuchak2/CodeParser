projects/top_C/ccv
Going to process projects/top_C/ccv/all_log.txt 
---------- ccv ------------

===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(count_per_partition % 4 == 0);')]
===========================================
===========================================
Total add: 15
Total del: 2
Header: _ccv_convnet_convolutional_forward_propagate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(count_per_partition % 4 == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(count_per_partition % 4 == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\tassert(context->image_net.convnet);'), (5, 2, u'-\tassert(context->image_net.words);'), (7, 1, u'+\tassert(context->image_net[0].convnet);'), (9, 1, u'+\tassert(context->image_net[0].words);'), (11, 1, u'+\tassert(context->image_net[1].convnet);'), (13, 1, u'+\tassert(context->image_net[1].words);')]
===========================================
===========================================
Total add: 8
Total del: 4
Header: uri_convnet_classify_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\tassert(context->image_net.convnet);'), (5, 2, u'-\tassert(context->image_net.words);'), (7, 1, u'+\tassert(context->image_net[0].convnet);'), (9, 1, u'+\tassert(context->image_net[0].words);'), (11, 1, u'+\tassert(context->image_net[1].convnet);'), (13, 1, u'+\tassert(context->image_net[1].words);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\tassert(context->image_net.convnet);'), (5, 2, u'-\tassert(context->image_net.words);'), (7, 1, u'+\tassert(context->image_net[0].convnet);'), (9, 1, u'+\tassert(context->image_net[0].words);'), (11, 1, u'+\tassert(context->image_net[1].convnet);'), (13, 1, u'+\tassert(context->image_net[1].words);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(0 && "You need a BLAS compatible library for this function, e.g. libatlas.");')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: ccv_gemm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(0 && "You need a BLAS compatible library for this function, e.g. libatlas.");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(0 && "You need a BLAS compatible library for this function, e.g. libatlas.");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t\tassert(x == 0 || y == 0);')]
===========================================
===========================================
Total add: 2
Total del: 18
Header: uri_convnet_classify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t\tassert(x == 0 || y == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t\tassert(x == 0 || y == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(b[j + 1]->rows == out_rows && b[j + 1]->cols == out_cols);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_convnet_classify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(b[j + 1]->rows == out_rows && b[j + 1]->cols == out_cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(b[j + 1]->rows == out_rows && b[j + 1]->cols == out_cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\tassert(scan >= 0 && scan < convnet->count);'), (9, 1, u'+\tassert(full_connect >= 0 && full_connect < convnet->count);'), (20, 2, u'-\tassert(last >= 0);'), (28, 2, u'-\tassert(last >= 0 && last < convnet->count);')]
===========================================
===========================================
Total add: 6
Total del: 19
Header: ccv_convnet_classify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\tassert(scan >= 0 && scan < convnet->count);'), (9, 1, u'+\tassert(full_connect >= 0 && full_connect < convnet->count);'), (20, 2, u'-\tassert(last >= 0);'), (28, 2, u'-\tassert(last >= 0 && last < convnet->count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\tassert(scan >= 0 && scan < convnet->count);'), (9, 1, u'+\tassert(full_connect >= 0 && full_connect < convnet->count);'), (20, 2, u'-\tassert(last >= 0);'), (28, 2, u'-\tassert(last >= 0 && last < convnet->count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(a[i]->rows == convnet->input.height);'), (3, 2, u'-\t\tassert(a[i]->cols == convnet->input.width);'), (29, 1, u'+\t\tassert(a[i]->rows == convnet->input.height || a[i]->cols == convnet->input.width);'), (30, 1, u'+\t\tassert(a[i]->rows >= convnet->input.height && a[i]->cols >= convnet->input.width);'), (34, 1, u'+\t\tassert(rows == convnet->input.height || cols == convnet->input.width);'), (35, 1, u'+\t\tassert(rows <= a[i]->rows && cols <= a[i]->cols);')]
===========================================
===========================================
Total add: 53
Total del: 59
Header: ccv_convnet_classify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(a[i]->rows == convnet->input.height);'), (3, 2, u'-\t\tassert(a[i]->cols == convnet->input.width);'), (29, 1, u'+\t\tassert(a[i]->rows == convnet->input.height || a[i]->cols == convnet->input.width);'), (30, 1, u'+\t\tassert(a[i]->rows >= convnet->input.height && a[i]->cols >= convnet->input.width);'), (34, 1, u'+\t\tassert(rows == convnet->input.height || cols == convnet->input.width);'), (35, 1, u'+\t\tassert(rows <= a[i]->rows && cols <= a[i]->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(a[i]->rows == convnet->input.height);'), (3, 2, u'-\t\tassert(a[i]->cols == convnet->input.width);'), (29, 1, u'+\t\tassert(a[i]->rows == convnet->input.height || a[i]->cols == convnet->input.width);'), (30, 1, u'+\t\tassert(a[i]->rows >= convnet->input.height && a[i]->cols >= convnet->input.width);'), (34, 1, u'+\t\tassert(rows == convnet->input.height || cols == convnet->input.width);'), (35, 1, u'+\t\tassert(rows <= a[i]->rows && cols <= a[i]->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\t\tassert(id >= 0);'), (13, 1, u'+\t\t\tassert(max_idx >= 0);')]
===========================================
===========================================
Total add: 8
Total del: 8
Header: ccv_convnet_classify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\t\tassert(id >= 0);'), (13, 1, u'+\t\t\tassert(max_idx >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\t\tassert(id >= 0);'), (13, 1, u'+\t\t\tassert(max_idx >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-\t\tassert(x == 0 || y == 0);')]
===========================================
===========================================
Total add: 3
Total del: 14
Header: ccv_convnet_input_formation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-\t\tassert(x == 0 || y == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-\t\tassert(x == 0 || y == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(image != 0);'), (18, 2, u'-\t\tassert(x == 0 || y == 0);'), (75, 1, u'+\t\t\t\tassert(image != 0);')]
===========================================
===========================================
Total add: 95
Total del: 32
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(image != 0);'), (18, 2, u'-\t\tassert(x == 0 || y == 0);'), (75, 1, u'+\t\t\t\tassert(image != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(image != 0);'), (18, 2, u'-\t\tassert(x == 0 || y == 0);'), (75, 1, u'+\t\t\t\tassert(image != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert((layer->input.matrix.rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (3, 2, u'-\t\t\tassert((layer->input.matrix.cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);'), (6, 1, u'+\t\t\tassert((input_rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (7, 1, u'+\t\t\tassert((input_cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: _ccv_convnet_layer_deduce_output_format
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert((layer->input.matrix.rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (3, 2, u'-\t\t\tassert((layer->input.matrix.cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);'), (6, 1, u'+\t\t\tassert((input_rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (7, 1, u'+\t\t\tassert((input_cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert((layer->input.matrix.rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (3, 2, u'-\t\t\tassert((layer->input.matrix.cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);'), (6, 1, u'+\t\t\tassert((input_rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (7, 1, u'+\t\t\tassert((input_cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert((layer->input.matrix.rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (3, 2, u'-\t\t\tassert((layer->input.matrix.cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (6, 1, u'+\t\t\tassert((input_rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (7, 1, u'+\t\t\tassert((input_cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: _ccv_convnet_layer_deduce_output_format
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert((layer->input.matrix.rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (3, 2, u'-\t\t\tassert((layer->input.matrix.cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (6, 1, u'+\t\t\tassert((input_rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (7, 1, u'+\t\t\tassert((input_cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert((layer->input.matrix.rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (3, 2, u'-\t\t\tassert((layer->input.matrix.cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (6, 1, u'+\t\t\tassert((input_rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (7, 1, u'+\t\t\tassert((input_cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);'), (17, 2, u'-\t\tassert(tops <= rank->rows);'), (19, 1, u'+\t\tassert(tops <= softmax->cols);')]
===========================================
===========================================
Total add: 15
Total del: 2
Header: ccv_convnet_classify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);'), (17, 2, u'-\t\tassert(tops <= rank->rows);'), (19, 1, u'+\t\tassert(tops <= softmax->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);'), (17, 2, u'-\t\tassert(tops <= rank->rows);'), (19, 1, u'+\t\tassert(tops <= softmax->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\tassert(last >= 0);'), (18, 1, u'+\tassert(last >= 0 && last < convnet->count);')]
===========================================
===========================================
Total add: 17
Total del: 0
Header: ccv_convnet_classify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\tassert(last >= 0);'), (18, 1, u'+\tassert(last >= 0 && last < convnet->count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\tassert(last >= 0);'), (18, 1, u'+\tassert(last >= 0 && last < convnet->count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(multi >= 0 && multi < convnet->count);'), (79, 2, u'-\t\t\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);')]
===========================================
===========================================
Total add: 79
Total del: 14
Header: ccv_convnet_classify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(multi >= 0 && multi < convnet->count);'), (79, 2, u'-\t\t\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(multi >= 0 && multi < convnet->count);'), (79, 2, u'-\t\t\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\t\t\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);')]
===========================================
===========================================
Total add: 5
Total del: 27
Header: ccv_convnet_classify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\t\t\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\t\t\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert(batch == 1);'), (20, 1, u'+\t\tassert(CCV_GET_CHANNEL(a[i]->type) == convnet->channels);'), (21, 1, u'+\t\tassert(a[i]->rows == convnet->input.height);'), (22, 1, u'+\t\tassert(a[i]->cols == convnet->input.width);'), (52, 1, u'+\t\tassert(multi >= 0 && multi < convnet->count);'), (68, 1, u'+\t\t\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);'), (90, 1, u'+\t\t\t\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);'), (113, 1, u'+\t\tassert(tops <= rank->rows);'), (121, 1, u'+\t\t\tassert(id >= 0);')]
===========================================
===========================================
Total add: 117
Total del: 10
Header: ccv_convnet_classify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert(batch == 1);'), (20, 1, u'+\t\tassert(CCV_GET_CHANNEL(a[i]->type) == convnet->channels);'), (21, 1, u'+\t\tassert(a[i]->rows == convnet->input.height);'), (22, 1, u'+\t\tassert(a[i]->cols == convnet->input.width);'), (52, 1, u'+\t\tassert(multi >= 0 && multi < convnet->count);'), (68, 1, u'+\t\t\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);'), (90, 1, u'+\t\t\t\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);'), (113, 1, u'+\t\tassert(tops <= rank->rows);'), (121, 1, u'+\t\t\tassert(id >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert(batch == 1);'), (20, 1, u'+\t\tassert(CCV_GET_CHANNEL(a[i]->type) == convnet->channels);'), (21, 1, u'+\t\tassert(a[i]->rows == convnet->input.height);'), (22, 1, u'+\t\tassert(a[i]->cols == convnet->input.width);'), (52, 1, u'+\t\tassert(multi >= 0 && multi < convnet->count);'), (68, 1, u'+\t\t\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);'), (90, 1, u'+\t\t\t\t\t\tassert(layer->type == CCV_CONVNET_FULL_CONNECT);'), (113, 1, u'+\t\tassert(tops <= rank->rows);'), (121, 1, u'+\t\t\tassert(id >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\tassert(params[i].input.matrix.channels % params[i].input.matrix.partition == 0);'), (4, 1, u'+\t\t\t\tassert(params[i].output.convolutional.count % params[i].output.convolutional.partition == 0);'), (5, 1, u'+\t\t\t\tassert(params[i].output.convolutional.partition % params[i].input.matrix.partition == 0);'), (6, 1, u'+\t\t\t\tassert(params[i].output.convolutional.partition >= params[i].input.matrix.partition);')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: ccv_convnet_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\tassert(params[i].input.matrix.channels % params[i].input.matrix.partition == 0);'), (4, 1, u'+\t\t\t\tassert(params[i].output.convolutional.count % params[i].output.convolutional.partition == 0);'), (5, 1, u'+\t\t\t\tassert(params[i].output.convolutional.partition % params[i].input.matrix.partition == 0);'), (6, 1, u'+\t\t\t\tassert(params[i].output.convolutional.partition >= params[i].input.matrix.partition);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\tassert(params[i].input.matrix.channels % params[i].input.matrix.partition == 0);'), (4, 1, u'+\t\t\t\tassert(params[i].output.convolutional.count % params[i].output.convolutional.partition == 0);'), (5, 1, u'+\t\t\t\tassert(params[i].output.convolutional.partition % params[i].input.matrix.partition == 0);'), (6, 1, u'+\t\t\t\tassert(params[i].output.convolutional.partition >= params[i].input.matrix.partition);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(hfz > 0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ccv_blur
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(hfz > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(hfz > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(fsz > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_blur
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(fsz > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(fsz > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(ch > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_blur
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(ch > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(ch > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->rows == a->cols);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: ccv_eigen
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->rows == a->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->rows == a->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tassert(a->rows > 0 && a->cols > 0);')]
===========================================
===========================================
Total add: 8
Total del: 3
Header: ccv_eigen
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tassert(a->rows > 0 && a->cols > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tassert(a->rows > 0 && a->cols > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->rows == a->cols);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_eigen
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->rows == a->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->rows == a->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\'), (3, 1, u'+\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\'), (3, 1, u'+\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\'), (3, 1, u'+\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\'), (3, 1, u'+\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\'), (3, 1, u'+\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\'), (3, 1, u'+\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(z[k + 1] >= a->cols - 1); \\')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(z[k + 1] >= a->cols - 1); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(z[k + 1] >= a->cols - 1); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\'), (3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) - 1); \\')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\'), (3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) - 1); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\'), (3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) - 1); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\'), (3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) - 1); \\')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\'), (3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) - 1); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\'), (3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) - 1); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\'), (3, 1, u'+\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\'), (3, 1, u'+\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\'), (3, 1, u'+\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\'), (3, 1, u'+\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\'), (3, 1, u'+\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\'), (3, 1, u'+\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(z[k + 1] >= db->rows - 1); \\')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(z[k + 1] >= db->rows - 1); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(z[k + 1] >= db->rows - 1); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\'), (3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) - 1); \\')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\'), (3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) - 1); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\'), (3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) - 1); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\'), (3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) - 1); \\')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\'), (3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) - 1); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\'), (3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) - 1); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(db);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_normalize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(db);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(db);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(dtheta && dm);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_gradient
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(dtheta && dm);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(dtheta && dm);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(pnum > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_bbf_genetic_optimize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(pnum > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(pnum > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(s > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_bbf_read_classifier_cascade
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(s > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(s > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tassert(0);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: _ccv_convnet_layer_deduce_output_format
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tassert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tassert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->cols > 0 && b->cols > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_resample_area_8u
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->cols > 0 && b->cols > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->cols > 0 && b->cols > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->cols > 0 && b->cols > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_resample_area
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->cols > 0 && b->cols > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->cols > 0 && b->cols > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(b->cols > 0 && b->step > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_resample_cubic_float_only
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(b->cols > 0 && b->step > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(b->cols > 0 && b->step > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(b->cols > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_resample_cubic_integer_only
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(b->cols > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(b->cols > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(rows > 0 && cols > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_resample
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(rows > 0 && cols > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(rows > 0 && cols > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->cols > 0 && cols0 > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_sample_up
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->cols > 0 && cols0 > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->cols > 0 && cols0 > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(n > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_swt_break_words
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(n > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(n > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(all_words);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_swt_detect_words
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(all_words);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(all_words);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(mat->prime >= 0 && mat->prime < sizeof(_ccv_get_sparse_prime) / sizeof(int));'), (5, 1, u'+\tassert(mat->prime >= 0 && mat->prime < sizeof(_ccv_get_sparse_prime) / sizeof(int));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: _ccv_sparse_matrix_expand
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(mat->prime >= 0 && mat->prime < sizeof(_ccv_get_sparse_prime) / sizeof(int));'), (5, 1, u'+\tassert(mat->prime >= 0 && mat->prime < sizeof(_ccv_get_sparse_prime) / sizeof(int));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(mat->prime >= 0 && mat->prime < sizeof(_ccv_get_sparse_prime) / sizeof(int));'), (5, 1, u'+\tassert(mat->prime >= 0 && mat->prime < sizeof(_ccv_get_sparse_prime) / sizeof(int));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(new_length > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_sparse_matrix_expand
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(new_length > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(new_length > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\tassert(convnet->mean_activity->rows == convnet->rows);'), (7, 2, u'-\t\tassert(convnet->mean_activity->cols == convnet->cols);'), (8, 1, u'+\t\tassert(convnet->mean_activity->rows == convnet->input.height);'), (9, 1, u'+\t\tassert(convnet->mean_activity->cols == convnet->input.width);')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: ccv_convnet_write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\tassert(convnet->mean_activity->rows == convnet->rows);'), (7, 2, u'-\t\tassert(convnet->mean_activity->cols == convnet->cols);'), (8, 1, u'+\t\tassert(convnet->mean_activity->rows == convnet->input.height);'), (9, 1, u'+\t\tassert(convnet->mean_activity->cols == convnet->input.width);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\tassert(convnet->mean_activity->rows == convnet->rows);'), (7, 2, u'-\t\tassert(convnet->mean_activity->cols == convnet->cols);'), (8, 1, u'+\t\tassert(convnet->mean_activity->rows == convnet->input.height);'), (9, 1, u'+\t\tassert(convnet->mean_activity->cols == convnet->input.width);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t\t\tassert(input.height != 0 && input.width != 0);')]
===========================================
===========================================
Total add: 16
Total del: 1
Header: ccv_convnet_read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t\t\tassert(input.height != 0 && input.width != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t\t\tassert(input.height != 0 && input.width != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(da->rows == db->rows && da->cols == db->cols && CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL(da->type) == CCV_GET_CHANNEL(db->type));'), (3, 1, u'+\tassert(da->rows == db->rows && da->cols == db->cols && CCV_GET_CHANNEL(da->type) == CCV_GET_CHANNEL(db->type));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_add
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(da->rows == db->rows && da->cols == db->cols && CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL(da->type) == CCV_GET_CHANNEL(db->type));'), (3, 1, u'+\tassert(da->rows == db->rows && da->cols == db->cols && CCV_GET_CHANNEL(da->type) == CCV_GET_CHANNEL(db->type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(da->rows == db->rows && da->cols == db->cols && CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL(da->type) == CCV_GET_CHANNEL(db->type));'), (3, 1, u'+\tassert(da->rows == db->rows && da->cols == db->cols && CCV_GET_CHANNEL(da->type) == CCV_GET_CHANNEL(db->type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare_v2(db, convnet_params_insert_qs, sizeof(convnet_params_insert_qs), &convnet_params_insert_stmt, 0));'), (8, 1, u'+\t\tassert(convnet->mean_activity->rows == convnet->rows);'), (9, 1, u'+\t\tassert(convnet->mean_activity->cols == convnet->cols);'), (10, 1, u'+\t\tassert(CCV_GET_CHANNEL(convnet->mean_activity->type) == convnet->channels);'), (11, 1, u'+\t\tassert(CCV_GET_DATA_TYPE(convnet->mean_activity->type) == CCV_32F);'), (13, 1, u'+\t\tassert(SQLITE_DONE == sqlite3_step(convnet_params_insert_stmt));')]
===========================================
===========================================
Total add: 16
Total del: 0
Header: ccv_convnet_write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare_v2(db, convnet_params_insert_qs, sizeof(convnet_params_insert_qs), &convnet_params_insert_stmt, 0));'), (8, 1, u'+\t\tassert(convnet->mean_activity->rows == convnet->rows);'), (9, 1, u'+\t\tassert(convnet->mean_activity->cols == convnet->cols);'), (10, 1, u'+\t\tassert(CCV_GET_CHANNEL(convnet->mean_activity->type) == convnet->channels);'), (11, 1, u'+\t\tassert(CCV_GET_DATA_TYPE(convnet->mean_activity->type) == CCV_32F);'), (13, 1, u'+\t\tassert(SQLITE_DONE == sqlite3_step(convnet_params_insert_stmt));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare_v2(db, convnet_params_insert_qs, sizeof(convnet_params_insert_qs), &convnet_params_insert_stmt, 0));'), (8, 1, u'+\t\tassert(convnet->mean_activity->rows == convnet->rows);'), (9, 1, u'+\t\tassert(convnet->mean_activity->cols == convnet->cols);'), (10, 1, u'+\t\tassert(CCV_GET_CHANNEL(convnet->mean_activity->type) == convnet->channels);'), (11, 1, u'+\t\tassert(CCV_GET_DATA_TYPE(convnet->mean_activity->type) == CCV_32F);'), (13, 1, u'+\t\tassert(SQLITE_DONE == sqlite3_step(convnet_params_insert_stmt));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == 1);'), (8, 1, u'+\tassert(a->rows == a->cols);'), (13, 1, u'+\tassert(CCV_GET_DATA_TYPE(dvector->type) == CCV_GET_DATA_TYPE(dlambda->type));')]
===========================================
===========================================
Total add: 88
Total del: 1
Header: ccv_solve
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == 1);'), (8, 1, u'+\tassert(a->rows == a->cols);'), (13, 1, u'+\tassert(CCV_GET_DATA_TYPE(dvector->type) == CCV_GET_DATA_TYPE(dlambda->type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == 1);'), (8, 1, u'+\tassert(a->rows == a->cols);'), (13, 1, u'+\tassert(CCV_GET_DATA_TYPE(dvector->type) == CCV_GET_DATA_TYPE(dlambda->type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(0 && "ccv_convnet_supervised_train requires GSL library support");')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: ccv_convnet_supervised_train
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(0 && "ccv_convnet_supervised_train requires GSL library support");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(0 && "ccv_convnet_supervised_train requires GSL library support");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_params_insert_qs, sizeof(layer_params_insert_qs), &layer_params_insert_stmt, 0));'), (3, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare_v2(db, layer_params_insert_qs, sizeof(layer_params_insert_qs), &layer_params_insert_stmt, 0));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_convnet_write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_params_insert_qs, sizeof(layer_params_insert_qs), &layer_params_insert_stmt, 0));'), (3, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare_v2(db, layer_params_insert_qs, sizeof(layer_params_insert_qs), &layer_params_insert_stmt, 0));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_params_insert_qs, sizeof(layer_params_insert_qs), &layer_params_insert_stmt, 0));'), (3, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare_v2(db, layer_params_insert_qs, sizeof(layer_params_insert_qs), &layer_params_insert_stmt, 0));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_data_insert_qs, sizeof(layer_data_insert_qs), &layer_data_insert_stmt, 0));'), (3, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare_v2(db, layer_data_insert_qs, sizeof(layer_data_insert_qs), &layer_data_insert_stmt, 0));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_convnet_write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_data_insert_qs, sizeof(layer_data_insert_qs), &layer_data_insert_stmt, 0));'), (3, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare_v2(db, layer_data_insert_qs, sizeof(layer_data_insert_qs), &layer_data_insert_stmt, 0));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_data_insert_qs, sizeof(layer_data_insert_qs), &layer_data_insert_stmt, 0));'), (3, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare_v2(db, layer_data_insert_qs, sizeof(layer_data_insert_qs), &layer_data_insert_stmt, 0));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_params_qs, sizeof(layer_params_qs), &layer_params_stmt, 0));'), (84, 2, u'-\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_data_qs, sizeof(layer_data_qs), &layer_data_stmt, 0));')]
===========================================
===========================================
Total add: 69
Total del: 65
Header: ccv_convnet_read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_params_qs, sizeof(layer_params_qs), &layer_params_stmt, 0));'), (84, 2, u'-\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_data_qs, sizeof(layer_data_qs), &layer_data_stmt, 0));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_params_qs, sizeof(layer_params_qs), &layer_params_stmt, 0));'), (84, 2, u'-\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_data_qs, sizeof(layer_data_qs), &layer_data_stmt, 0));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 2, u'-\tassert(argc == 2);'), (56, 1, u'+\tassert(r0 && "train-list doesn\'t exists");'), (58, 1, u'+\tassert(r1 && "test-list doesn\'t exists");')]
===========================================
===========================================
Total add: 85
Total del: 13
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 2, u'-\tassert(argc == 2);'), (56, 1, u'+\tassert(r0 && "train-list doesn\'t exists");'), (58, 1, u'+\tassert(r1 && "test-list doesn\'t exists");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 2, u'-\tassert(argc == 2);'), (56, 1, u'+\tassert(r0 && "train-list doesn\'t exists");'), (58, 1, u'+\tassert(r1 && "test-list doesn\'t exists");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\tassert(SQLITE_OK == sqlite3_exec(db, layer_create_table_qs, 0, 0, 0));'), (25, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_params_insert_qs, sizeof(layer_params_insert_qs), &layer_params_insert_stmt, 0));'), (30, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_data_insert_qs, sizeof(layer_data_insert_qs), &layer_data_insert_stmt, 0));'), (68, 1, u'+\t\t\tassert(SQLITE_DONE == sqlite3_step(layer_params_insert_stmt));'), (77, 1, u'+\t\t\t\tassert(SQLITE_DONE == sqlite3_step(layer_data_insert_stmt));'), (101, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_params_qs, sizeof(layer_params_qs), &layer_params_stmt, 0));'), (146, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_data_qs, sizeof(layer_data_qs), &layer_data_stmt, 0));')]
===========================================
===========================================
Total add: 170
Total del: 1
Header: ccv_convnet_write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\tassert(SQLITE_OK == sqlite3_exec(db, layer_create_table_qs, 0, 0, 0));'), (25, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_params_insert_qs, sizeof(layer_params_insert_qs), &layer_params_insert_stmt, 0));'), (30, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_data_insert_qs, sizeof(layer_data_insert_qs), &layer_data_insert_stmt, 0));'), (68, 1, u'+\t\t\tassert(SQLITE_DONE == sqlite3_step(layer_params_insert_stmt));'), (77, 1, u'+\t\t\t\tassert(SQLITE_DONE == sqlite3_step(layer_data_insert_stmt));'), (101, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_params_qs, sizeof(layer_params_qs), &layer_params_stmt, 0));'), (146, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_data_qs, sizeof(layer_data_qs), &layer_data_stmt, 0));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\tassert(SQLITE_OK == sqlite3_exec(db, layer_create_table_qs, 0, 0, 0));'), (25, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_params_insert_qs, sizeof(layer_params_insert_qs), &layer_params_insert_stmt, 0));'), (30, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_data_insert_qs, sizeof(layer_data_insert_qs), &layer_data_insert_stmt, 0));'), (68, 1, u'+\t\t\tassert(SQLITE_DONE == sqlite3_step(layer_params_insert_stmt));'), (77, 1, u'+\t\t\t\tassert(SQLITE_DONE == sqlite3_step(layer_data_insert_stmt));'), (101, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_params_qs, sizeof(layer_params_qs), &layer_params_stmt, 0));'), (146, 1, u'+\t\tassert(SQLITE_OK == sqlite3_prepare(db, layer_data_qs, sizeof(layer_data_qs), &layer_data_stmt, 0));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6097, 1, u'+#define SQLITE_TESTCTRL_ASSERT                  12'), (7872, 1, u'+# define ALWAYS(X)      ((X)?1:(assert(0),0))'), (7873, 1, u'+# define NEVER(X)       ((X)?(assert(0),1):0)'), (9251, 1, u'+SQLITE_PRIVATE   int sqlite3VdbeAssertMayAbort(Vdbe *, int);'), (13052, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (13925, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (13935, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (13947, 1, u'+  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );'), (14002, 1, u'+      assert( (op-SQLITE_DBSTATUS_LOOKASIDE_HIT)>=0 );'), (14003, 1, u'+      assert( (op-SQLITE_DBSTATUS_LOOKASIDE_HIT)<3 );'), (14109, 1, u'+      assert( SQLITE_DBSTATUS_CACHE_MISS==SQLITE_DBSTATUS_CACHE_HIT+1 );'), (14110, 1, u'+      assert( SQLITE_DBSTATUS_CACHE_WRITE==SQLITE_DBSTATUS_CACHE_HIT+2 );'), (15462, 1, u'+  assert( rc==SQLITE_OK || pFile->pMethods==0 );'), (15467, 1, u'+  assert( dirSync==0 || dirSync==1 );'), (15549, 1, u'+  assert( pFile );'), (15603, 1, u'+  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) );'), (15640, 1, u'+  assert(vfsList);'), (15944, 1, u'+  assert( nByte>0 );'), (15971, 1, u'+  assert( pPrior!=0 );'), (16015, 1, u'+  assert( pPrior!=0 && nByte>0 );'), (16016, 1, u'+  assert( nByte==ROUND8(nByte) ); /* EV: R-46199-30249 */'), (16247, 1, u'+    assert( mem.nCurrent[i]>=0 );'), (16265, 1, u'+  assert( p->iForeGuard==(int)FOREGUARD );'), (16269, 1, u'+  assert( pInt[nReserve/sizeof(int)]==(int)REARGUARD );'), (16274, 1, u'+  while( nReserve-- > p->iSize ) assert( pU8[nReserve]==0x65 );'), (16295, 1, u'+  assert( (sizeof(struct MemBlockHdr)&7) == 0 );'), (16356, 1, u'+  assert( mem.disallow==0 );'), (16381, 1, u'+      assert(pBt[0]);'), (16410, 1, u'+  assert( sqlite3GlobalConfig.bMemstat || sqlite3GlobalConfig.bCoreMutex==0'), (16417, 1, u'+    assert( pHdr->pPrev->pNext==pHdr );'), (16420, 1, u'+    assert( mem.pFirst==pHdr );'), (16424, 1, u'+    assert( pHdr->pNext->pPrev==pHdr );'), (16427, 1, u'+    assert( mem.pLast==pHdr );'), (16451, 1, u'+  assert( mem.disallow==0 );'), (16452, 1, u'+  assert( (nByte & 7)==0 );     /* EV: R-46199-30249 */'), (16490, 1, u'+    assert( pHdr->iForeGuard==FOREGUARD );'), (16509, 1, u'+    assert( pHdr->iForeGuard==FOREGUARD );         /* Allocation is valid */'), (16531, 1, u'+    assert( pHdr->iForeGuard==FOREGUARD );         /* Allocation is valid */'), (16785, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16804, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16805, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (16806, 1, u'+  assert( i>=1 );'), (16808, 1, u'+  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (16809, 1, u'+  assert( size>=2 );'), (16823, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16838, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16839, 1, u'+  assert( i>=1 );'), (16840, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x & 1)==0 );'), (16842, 1, u'+  assert( size==mem3.aPool[i+size-1].u.hdr.prevSize );'), (16843, 1, u'+  assert( size>=2 );'), (16873, 1, u'+    assert( sqlite3_mutex_held(mem3.mutex) );'), (16889, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16890, 1, u'+  assert( i>=1 );'), (16891, 1, u'+  assert( mem3.aPool[i-1].u.hdr.size4x/4==nBlock );'), (16892, 1, u'+  assert( mem3.aPool[i+nBlock-1].u.hdr.prevSize==nBlock );'), (16906, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16907, 1, u'+  assert( mem3.szMaster>=nBlock );'), (16919, 1, u'+    assert( newi > mem3.iMaster+1 );'), (16953, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16957, 1, u'+    assert( (size&1)==0 );'), (16960, 1, u'+      assert( i > mem3.aPool[i-1].u.hdr.prevSize );'), (16994, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (16995, 1, u'+  assert( sizeof(Mem3Block)==8 );'), (17001, 1, u'+  assert( nBlock>=2 );'), (17075, 1, u'+  assert( sqlite3_mutex_held(mem3.mutex) );'), (17076, 1, u'+  assert( p>mem3.aPool && p<&mem3.aPool[mem3.nPool] );'), (17078, 1, u'+  assert( (mem3.aPool[i-1].u.hdr.size4x&1)==1 );'), (17080, 1, u'+  assert( i+size<=mem3.nPool+1 );'), (17116, 1, u'+  assert( (pBlock[-1].u.hdr.size4x&1)!=0 );'), (17136, 1, u'+  assert( nBytes>0 );          /* malloc.c filters out 0 byte requests */'), (17147, 1, u'+  assert( pPrior );'), (17194, 1, u'+  assert( sizeof(Mem3Block)==8 );'), (17245, 1, u'+      assert( 0 );'), (17250, 1, u'+      assert( 0 );'), (17255, 1, u'+      assert( 0 );'), (17473, 1, u'+  assert( i>=0 && i<mem5.nBlock );'), (17474, 1, u'+  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (17475, 1, u'+  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (17495, 1, u'+  assert( sqlite3_mutex_held(mem5.mutex) );'), (17496, 1, u'+  assert( i>=0 && i<mem5.nBlock );'), (17497, 1, u'+  assert( iLogsize>=0 && iLogsize<=LOGMAX );'), (17498, 1, u'+  assert( (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize );'), (17503, 1, u'+    assert( x<mem5.nBlock );'), (17530, 1, u'+    assert( i>=0 && i<mem5.nBlock );'), (17553, 1, u'+  assert( nByte>0 );'), (17619, 1, u'+  assert( iBlock>=0 && iBlock<mem5.nBlock );'), (17620, 1, u'+  assert( ((u8 *)pOld-mem5.zPool)%mem5.szAtom==0 );'), (17621, 1, u'+  assert( (mem5.aCtrl[iBlock] & CTRL_FREE)==0 );'), (17625, 1, u'+  assert( iBlock+size-1<(u32)mem5.nBlock );'), (17629, 1, u'+  assert( mem5.currentCount>0 );'), (17630, 1, u'+  assert( mem5.currentOut>=(size*mem5.szAtom) );'), (17633, 1, u'+  assert( mem5.currentOut>0 || mem5.currentCount==0 );'), (17634, 1, u'+  assert( mem5.currentCount>0 || mem5.currentOut==0 );'), (17644, 1, u'+    assert( iBuddy>=0 );'), (17682, 1, u'+  assert( pPrior!=0 );'), (17703, 1, u'+  assert( pPrior!=0 );'), (17704, 1, u'+  assert( (nBytes&(nBytes-1))==0 );  /* EV: R-46199-30249 */'), (17705, 1, u'+  assert( nBytes>=0 );'), (17776, 1, u'+  assert( (sizeof(Mem5Link)&(sizeof(Mem5Link)-1))==0 );'), (17780, 1, u'+  assert( zByte!=0 );  /* sqlite3_config() does not allow otherwise */'), (17805, 1, u'+    assert((iOffset+nAlloc)>mem5.nBlock);'), (17982, 1, u'+  assert( GLOBAL(int, mutexIsInit) );'), (18167, 1, u'+      assert( id-2 >= 0 );'), (18168, 1, u'+      assert( id-2 < (int)(sizeof(aStatic)/sizeof(aStatic[0])) );'), (18182, 1, u'+  assert( p->cnt==0 );'), (18183, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (18200, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) );'), (18205, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) );'), (18218, 1, u'+  assert( debugMutexHeld(pX) );'), (18220, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) );'), (18424, 1, u'+      assert( iType-2 >= 0 );'), (18425, 1, u'+      assert( iType-2 < ArraySize(staticMutexes) );'), (18443, 1, u'+  assert( p->nRef==0 );'), (18444, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (18461, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (18480, 1, u'+      assert( p->nRef==0 );'), (18490, 1, u'+  assert( p->nRef>0 || p->owner==0 );'), (18504, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );'), (18523, 1, u'+      assert( p->nRef==0 );'), (18560, 1, u'+  assert( pthreadMutexHeld(p) );'), (18565, 1, u'+  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (18817, 1, u'+      assert( winMutex_isInit==1 );'), (18818, 1, u'+      assert( iType-2 >= 0 );'), (18819, 1, u'+      assert( iType-2 < ArraySize(winMutex_staticMutexes) );'), (18837, 1, u'+  assert( p );'), (18838, 1, u'+  assert( p->nRef==0 && p->owner==0 );'), (18839, 1, u'+  assert( p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE );'), (18858, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld2(p, tid) );'), (18862, 1, u'+  assert( p->nRef>0 || p->owner==0 );'), (18875, 1, u'+  assert( p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld2(p, tid) );'), (18913, 1, u'+  assert( p->nRef>0 );'), (18914, 1, u'+  assert( p->owner==tid );'), (18917, 1, u'+  assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );'), (19214, 1, u'+  assert( sqlite3_mutex_held(mem0.mutex) );'), (19264, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(p) );  /* IMP: R-04675-44850 */'), (19301, 1, u'+  assert( n>0 );'), (19323, 1, u'+  assert( sqlite3_mutex_notheld(mem0.mutex) );'), (19331, 1, u'+  assert( scratchAllocOut<=1 );'), (19345, 1, u'+    assert( scratchAllocOut>=1 && scratchAllocOut<=2 );'), (19357, 1, u'+      assert( mem0.nScratchFree <= (u32)sqlite3GlobalConfig.nScratch );'), (19362, 1, u'+      assert( sqlite3MemdebugHasType(p, MEMTYPE_SCRATCH) );'), (19363, 1, u'+      assert( sqlite3MemdebugNoType(p, ~MEMTYPE_SCRATCH) );'), (19396, 1, u'+  assert( sqlite3MemdebugHasType(p, MEMTYPE_HEAP) );'), (19397, 1, u'+  assert( sqlite3MemdebugNoType(p, MEMTYPE_DB) );'), (19401, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (19405, 1, u'+    assert( sqlite3MemdebugHasType(p, MEMTYPE_DB) );'), (19406, 1, u'+    assert( sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) );'), (19407, 1, u'+    assert( db!=0 || sqlite3MemdebugNoType(p, MEMTYPE_LOOKASIDE) );'), (19417, 1, u'+  assert( sqlite3MemdebugNoType(p, MEMTYPE_DB) );'), (19418, 1, u'+  assert( sqlite3MemdebugHasType(p, MEMTYPE_HEAP) );'), (19435, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (19454, 1, u'+  assert( sqlite3MemdebugHasType(p, MEMTYPE_DB) );'), (19455, 1, u'+  assert( sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) );'), (19456, 1, u'+  assert( db!=0 || sqlite3MemdebugNoType(p, MEMTYPE_LOOKASIDE) );'), (19493, 1, u'+    assert( sqlite3MemdebugHasType(pOld, MEMTYPE_HEAP) );'), (19494, 1, u'+    assert( sqlite3MemdebugNoType(pOld, ~MEMTYPE_HEAP) );'), (19508, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pNew) ); /* IMP: R-04675-44850 */'), (19567, 1, u'+  assert( db==0 || sqlite3_mutex_held(db->mutex) );'), (19568, 1, u'+  assert( db==0 || db->pnBytesFreed==0 );'), (19611, 1, u'+  assert( db!=0 );'), (19612, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (19627, 1, u'+      assert( sqlite3MemdebugHasType(p, MEMTYPE_DB) );'), (19628, 1, u'+      assert( sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) );'), (19669, 1, u'+  assert( (n&0x7fffffff)==n );'), (19681, 1, u'+  assert( (n&0x7fffffff)==n );'), (19725, 1, u'+  assert( !db || sqlite3_mutex_held(db->mutex) );'), (20234, 1, u'+          assert( precision>0 );'), (20244, 1, u'+          assert( bufpt>zOut );'), (20376, 1, u'+        assert( k>=0 && k<pSrc->nSrc );'), (20386, 1, u'+        assert( xtype==etINVALID );'), (20420, 1, u'+  assert( z!=0 || N==0 );'), (20426, 1, u'+  assert( p->zText!=0 || p->nChar==0 );'), (20465, 1, u'+  assert( p->zText );'), (20529, 1, u'+  assert( db!=0 );'), (21034, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (21035, 1, u'+  assert( pMem->flags&MEM_Str );'), (21036, 1, u'+  assert( pMem->enc!=desiredEnc );'), (21037, 1, u'+  assert( pMem->enc!=0 );'), (21038, 1, u'+  assert( pMem->n>=0 );'), (21057, 1, u'+      assert( rc==SQLITE_NOMEM );'), (21112, 1, u'+      assert( desiredEnc==SQLITE_UTF16BE );'), (21122, 1, u'+    assert( desiredEnc==SQLITE_UTF8 );'), (21139, 1, u'+  assert( (pMem->n+(desiredEnc==SQLITE_UTF8?1:2))<=len );'), (21172, 1, u'+  assert( pMem->n>=0 );'), (21215, 1, u'+  assert( z<=zTerm );'), (21270, 1, u'+  assert( (m.flags & MEM_Term)!=0 || db->mallocFailed );'), (21271, 1, u'+  assert( (m.flags & MEM_Str)!=0 || db->mallocFailed );'), (21272, 1, u'+  assert( (m.flags & MEM_Dyn)!=0 || db->mallocFailed );'), (21273, 1, u'+  assert( m.z || db->mallocFailed );'), (21318, 1, u'+    assert( n>0 && n<=4 );'), (21325, 1, u'+    assert( c==t );'), (21326, 1, u'+    assert( (z-zBuf)==n );'), (21333, 1, u'+    assert( n>0 && n<=4 );'), (21337, 1, u'+    assert( c==i );'), (21338, 1, u'+    assert( (z-zBuf)==n );'), (21345, 1, u'+    assert( n>0 && n<=4 );'), (21349, 1, u'+    assert( c==i );'), (21350, 1, u'+    assert( (z-zBuf)==n );'), (21553, 1, u'+    assert( z[i] );'), (21634, 1, u'+  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (21642, 1, u'+    assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (21845, 1, u'+  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (21850, 1, u'+    assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (21886, 1, u'+    assert( u<=LARGEST_INT64 );'), (21893, 1, u'+      assert( u<=LARGEST_INT64 );'), (21901, 1, u'+      assert( u-1==LARGEST_INT64 );'), (22007, 1, u'+  assert( n<=9 );'), (22078, 1, u'+  assert( SLOT_2_0 == ((0x7f<<14) | (0x7f)) );'), (22079, 1, u'+  assert( SLOT_4_2_0 == ((0xfU<<28) | (0x7f<<14) | (0x7f)) );'), (22284, 1, u'+    assert( n>3 && n<=9 );'), (22336, 1, u'+    assert( n>5 && n<=9 );'), (22378, 1, u"+  assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );"), (22513, 1, u'+  assert( iA1*iB0==0 || iA0*iB1==0 );'), (22621, 1, u'+  assert( sizeof(x)==8 && sizeof(a)==8 );'), (22670, 1, u'+  assert( pNew!=0 );'), (22684, 1, u'+  assert( pH!=0 );'), (22703, 1, u'+  assert( nKey>=0 );'), (22838, 1, u'+    assert( pEntry->count>=0 );'), (22843, 1, u'+    assert( pH->first==0 );'), (22844, 1, u'+    assert( pH->count==0 );'), (22857, 1, u'+  assert( pH!=0 );'), (22858, 1, u'+  assert( pKey!=0 );'), (22859, 1, u'+  assert( nKey>=0 );'), (22888, 1, u'+  assert( pH!=0 );'), (22889, 1, u'+  assert( pKey!=0 );'), (22890, 1, u'+  assert( nKey>=0 );'), (22904, 1, u'+      assert(nKey==elem->nKey);'), (22917, 1, u'+      assert( pH->htsize>0 );'), (23997, 1, u'+    assert( 0 );'), (23999, 1, u'+  assert( p->l_whence==SEEK_SET );'), (24016, 1, u'+      assert( 0 );'), (24208, 1, u"+  assert( zAbsoluteName[0]=='/' );"), (24247, 1, u'+  assert( pId->nRef>0 );'), (24252, 1, u'+    assert( *pp==pId );'), (24512, 1, u'+  assert( unixMutexHeld() );'), (24516, 1, u'+      assert( pInode->pShmNode==0 );'), (24519, 1, u'+        assert( pInode->pPrev->pNext==pInode );'), (24522, 1, u'+        assert( inodeList==pInode );'), (24526, 1, u'+        assert( pInode->pNext->pPrev==pInode );'), (24554, 1, u'+  assert( unixMutexHeld() );'), (24682, 1, u'+  assert( pFile );'), (24737, 1, u'+  assert( unixMutexHeld() );'), (24738, 1, u'+  assert( pInode!=0 );'), (24744, 1, u'+      assert( pInode->nLock==0 );'), (24831, 1, u'+  assert( pFile );'), (24851, 1, u'+  assert( pFile->eFileLock!=NO_LOCK || eFileLock==SHARED_LOCK );'), (24852, 1, u'+  assert( eFileLock!=PENDING_LOCK );'), (24853, 1, u'+  assert( eFileLock!=RESERVED_LOCK || pFile->eFileLock==SHARED_LOCK );'), (24876, 1, u'+    assert( eFileLock==SHARED_LOCK );'), (24877, 1, u'+    assert( pFile->eFileLock==0 );'), (24878, 1, u'+    assert( pInode->nShared>0 );'), (24912, 1, u'+    assert( pInode->nShared==0 );'), (24913, 1, u'+    assert( pInode->eFileLock==0 );'), (24914, 1, u'+    assert( rc==SQLITE_OK );'), (24953, 1, u'+    assert( 0!=pFile->eFileLock );'), (24956, 1, u'+    assert( eFileLock==RESERVED_LOCK || eFileLock==EXCLUSIVE_LOCK );'), (25039, 1, u'+  assert( pFile );'), (25044, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (25050, 1, u'+  assert( pInode->nShared!=0 );'), (25052, 1, u'+    assert( pInode->eFileLock==pFile->eFileLock );'), (25079, 1, u'+      assert( handleNFSUnlock==0 );'), (25145, 1, u'+    lock.l_len = 2L;  assert( PENDING_BYTE+1==RESERVED_BYTE );'), (25179, 1, u'+    assert( pInode->nLock>=0 );'), (25200, 1, u'+  assert( eFileLock==SHARED_LOCK || ((unixFile *)id)->nFetchOut==0 );'), (25258, 1, u'+  assert( pFile->pInode->nLock>0 || pFile->pInode->bProcessLock==0 );'), (25362, 1, u'+  assert( pFile );'), (25461, 1, u'+  assert( pFile );'), (25464, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (25480, 1, u'+  assert( eFileLock==NO_LOCK );'), (25558, 1, u'+  assert( pFile );'), (25637, 1, u'+  assert( pFile );'), (25680, 1, u'+  assert( pFile );'), (25683, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (25750, 1, u'+  assert( pFile );'), (25849, 1, u'+  assert( pFile );'), (25850, 1, u'+  assert( pSem );'), (25853, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (25886, 1, u'+    assert( pFile );'), (25995, 1, u'+  assert( pFile );'), (26063, 1, u'+  assert( pFile );'), (26083, 1, u'+  assert( pFile->eFileLock!=NO_LOCK || eFileLock==SHARED_LOCK );'), (26084, 1, u'+  assert( eFileLock!=PENDING_LOCK );'), (26085, 1, u'+  assert( eFileLock!=RESERVED_LOCK || pFile->eFileLock==SHARED_LOCK );'), (26108, 1, u'+    assert( eFileLock==SHARED_LOCK );'), (26109, 1, u'+    assert( pFile->eFileLock==0 );'), (26110, 1, u'+    assert( pInode->nShared>0 );'), (26139, 1, u'+    assert( pInode->nShared==0 );'), (26140, 1, u'+    assert( pInode->eFileLock==0 );'), (26179, 1, u'+    assert( 0!=pFile->eFileLock );'), (26249, 1, u'+  assert( pFile );'), (26254, 1, u'+  assert( eFileLock<=SHARED_LOCK );'), (26260, 1, u'+  assert( pInode->nShared!=0 );'), (26262, 1, u'+    assert( pInode->eFileLock==pFile->eFileLock );'), (26276, 1, u'+    assert( pFile->inNormalWrite==0'), (26327, 1, u'+      assert( pInode->nLock>=0 );'), (26428, 1, u'+  assert( cnt==(cnt&0x1ffff) );'), (26429, 1, u'+  assert( id->h>2 );'), (26483, 1, u'+  assert( id );'), (26484, 1, u'+  assert( offset>=0 );'), (26485, 1, u'+  assert( amt>0 );'), (26490, 1, u'+  assert( pFile->pUnused==0'), (26543, 1, u'+  assert( nBuf==(nBuf&0x1ffff) );'), (26544, 1, u'+  assert( fd>2 );'), (26597, 1, u'+  assert( id );'), (26598, 1, u'+  assert( amt>0 );'), (26603, 1, u'+  assert( pFile->pUnused==0'), (26856, 1, u'+  assert((flags&0x0F)==SQLITE_SYNC_NORMAL'), (26865, 1, u'+  assert( pFile );'), (26900, 1, u'+  assert( pFile );'), (26950, 1, u'+  assert( id );'), (27366, 1, u'+  assert( sqlite3_mutex_held(pShmNode->mutex) || pShmNode->nRef==0 );'), (27369, 1, u'+  assert( n==1 || lockType!=F_RDLCK );'), (27372, 1, u'+  assert( n>=1 && n<SQLITE_SHM_NLOCK );'), (27401, 1, u'+      assert( lockType==F_WRLCK );'), (27412, 1, u'+      assert( lockType==F_WRLCK );'), (27433, 1, u'+  assert( unixMutexHeld() );'), (27436, 1, u'+    assert( p->pInode==pFd->pInode );'), (27502, 1, u'+  assert( pDbFd->pShm==0 );'), (27655, 1, u'+  assert( szRegion==pShmNode->szRegion || pShmNode->nRegion==0 );'), (27656, 1, u'+  assert( pShmNode->pInode==pDbFd->pInode );'), (27657, 1, u'+  assert( pShmNode->h>=0 || pDbFd->pInode->bProcessLock==1 );'), (27658, 1, u'+  assert( pShmNode->h<0 || pDbFd->pInode->bProcessLock==0 );'), (27697, 1, u'+          assert( (nByte % pgsz)==0 );'), (27774, 1, u'+  assert( pShmNode==pDbFd->pInode->pShmNode );'), (27775, 1, u'+  assert( pShmNode->pInode==pDbFd->pInode );'), (27776, 1, u'+  assert( ofst>=0 && ofst+n<=SQLITE_SHM_NLOCK );'), (27777, 1, u'+  assert( n>=1 );'), (27778, 1, u'+  assert( flags==(SQLITE_SHM_LOCK | SQLITE_SHM_SHARED)'), (27782, 1, u'+  assert( n==1 || (flags & SQLITE_SHM_EXCLUSIVE)!=0 );'), (27783, 1, u'+  assert( pShmNode->h>=0 || pDbFd->pInode->bProcessLock==1 );'), (27784, 1, u'+  assert( pShmNode->h<0 || pDbFd->pInode->bProcessLock==0 );'), (27787, 1, u'+  assert( n>1 || mask==(1<<ofst) );'), (27795, 1, u'+      assert( (pX->exclMask & (p->exclMask|p->sharedMask))==0 );'), (27856, 1, u'+        assert( (p->sharedMask & mask)==0 );'), (27902, 1, u'+  assert( pShmNode==pDbFd->pInode->pShmNode );'), (27903, 1, u'+  assert( pShmNode->pInode==pDbFd->pInode );'), (27919, 1, u'+  assert( pShmNode->nRef>0 );'), (27943, 1, u'+  assert( pFd->nFetchOut==0 );'), (27991, 1, u'+  assert( pFd->nFetchOut==0 );'), (27992, 1, u'+  assert( nNew>pFd->mmapSize );'), (27993, 1, u'+  assert( nNew<=pFd->mmapSizeMax );'), (27994, 1, u'+  assert( nNew>0 );'), (27995, 1, u'+  assert( pFd->mmapSizeActual>=pFd->mmapSize );'), (27996, 1, u'+  assert( MAP_FAILED!=0 );'), (28070, 1, u'+  assert( nMap>=0 || pFd->nFetchOut==0 );'), (28148, 1, u'+  assert( (p==0)==(pFd->nFetchOut==0) );'), (28151, 1, u'+  assert( p==0 || p==&((u8 *)pFd->pMapRegion)[iOff] );'), (28159, 1, u'+  assert( pFd->nFetchOut>=0 );'), (28471, 1, u'+  assert( pNew->pInode==NULL );'), (28478, 1, u"+  assert( zFilename==0 || zFilename[0]=='/'"), (28481, 1, u"+  assert( zFilename==0 || zFilename[0]=='/' );"), (28485, 1, u'+  assert( zFilename!=0 || (ctrlFlags & UNIXFILE_NOLOCK)!=0 );'), (28589, 1, u'+    assert( zFilename!=0 );'), (28838, 1, u'+      assert( nDb>0 );'), (28839, 1, u"+      assert( zPath[nDb]!='\\n' );"), (28931, 1, u'+  assert((isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly));'), (28932, 1, u'+  assert(isCreate==0 || isReadWrite);'), (28933, 1, u'+  assert(isExclusive==0 || isCreate);'), (28934, 1, u'+  assert(isDelete==0 || isCreate);'), (28938, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_DB );'), (28939, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_JOURNAL );'), (28940, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MASTER_JOURNAL );'), (28941, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_WAL );'), (28944, 1, u'+  assert( eType==SQLITE_OPEN_MAIN_DB      || eType==SQLITE_OPEN_TEMP_DB'), (28968, 1, u'+    assert( (flags & SQLITE_OPEN_URI) || zName[strlen(zName)+1]==0 );'), (28972, 1, u'+    assert(isDelete && !syncDir);'), (28981, 1, u'+    assert( zName[strlen(zName)+1]==0 );'), (29000, 1, u'+      assert( !p->pUnused );'), (29001, 1, u'+      assert( eType==SQLITE_OPEN_WAL || eType==SQLITE_OPEN_MAIN_JOURNAL );'), (29028, 1, u'+  assert( fd>=0 );'), (29201, 1, u'+      assert(!"Invalid flags argument");'), (29237, 1, u'+  assert( pVfs->mxPathname==MAX_PATHNAME );'), (29322, 1, u'+  assert((size_t)nBuf>=(sizeof(time_t)+sizeof(int)));'), (29347, 1, u'+      assert( sizeof(t)+sizeof(pid)<=(size_t)nBuf );'), (29690, 1, u'+  assert(lockPath!=NULL);'), (29821, 1, u'+  assert(PROXY_HOSTIDLEN == sizeof(uuid_t));'), (29951, 1, u'+      assert( nTries>1 );'), (29977, 1, u'+      assert( nTries==3 );'), (30277, 1, u'+  assert( (int)strlen(conchPath) == len+7 );'), (30327, 1, u'+    assert( (int)strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (30338, 1, u'+    assert( strlen((char*)pFile->lockingContext)<=MAXPATHLEN );'), (30489, 1, u'+      assert( 0 );  /* The call assures that only valid opcodes are sent */'), (30734, 1, u'+  assert( ArraySize(aSyscall)==24 );'), (31346, 1, u'+#define winMemAssertMagic1() assert( win_mem_data.magic1==WINMEM_MAGIC1 )'), (31347, 1, u'+#define winMemAssertMagic2() assert( win_mem_data.magic2==WINMEM_MAGIC2 )'), (31348, 1, u'+#define winMemAssertMagic()  winMemAssertMagic1(); winMemAssertMagic2();'), (31350, 1, u'+#define winMemAssertMagic()'), (32113, 1, u'+  winMemAssertMagic();'), (32115, 1, u'+  assert( hHeap!=0 );'), (32116, 1, u'+  assert( hHeap!=INVALID_HANDLE_VALUE );'), (32118, 1, u'+  assert( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (32156, 1, u'+  winMemAssertMagic();'), (32165, 1, u'+    assert( winMemGetHeap()!=NULL );'), (32166, 1, u'+    assert( winMemGetOwned() );'), (32167, 1, u'+    assert( sqlite3_memory_used()==0 );'), (32169, 1, u'+    assert( winMemGetHeap()==NULL );'), (32170, 1, u'+    assert( !winMemGetOwned() );'), (32171, 1, u'+    assert( sqlite3_memory_used()==0 );'), (32173, 1, u'+    assert( rc!=SQLITE_OK || winMemGetHeap()!=NULL );'), (32174, 1, u'+    assert( rc!=SQLITE_OK || winMemGetOwned() );'), (32175, 1, u'+    assert( rc!=SQLITE_OK || sqlite3_memory_used()==0 );'), (32197, 1, u'+  assert( nMin==-1 || nMin==0 || nMin<SQLITE_WIN32_DBG_BUF_SIZE );'), (32239, 1, u'+  assert( sleepObj!=NULL );'), (32290, 1, u'+  winMemAssertMagic();'), (32292, 1, u'+  assert( hHeap!=0 );'), (32293, 1, u'+  assert( hHeap!=INVALID_HANDLE_VALUE );'), (32295, 1, u'+  assert( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (32297, 1, u'+  assert( nBytes>=0 );'), (32312, 1, u'+  winMemAssertMagic();'), (32314, 1, u'+  assert( hHeap!=0 );'), (32315, 1, u'+  assert( hHeap!=INVALID_HANDLE_VALUE );'), (32317, 1, u'+  assert( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, pPrior) );'), (32333, 1, u'+  winMemAssertMagic();'), (32335, 1, u'+  assert( hHeap!=0 );'), (32336, 1, u'+  assert( hHeap!=INVALID_HANDLE_VALUE );'), (32338, 1, u'+  assert( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, pPrior) );'), (32340, 1, u'+  assert( nBytes>=0 );'), (32361, 1, u'+  winMemAssertMagic();'), (32363, 1, u'+  assert( hHeap!=0 );'), (32364, 1, u'+  assert( hHeap!=INVALID_HANDLE_VALUE );'), (32366, 1, u'+  assert( osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, p) );'), (32392, 1, u'+  assert( pWinMemData->magic1==WINMEM_MAGIC1 );'), (32393, 1, u'+  assert( pWinMemData->magic2==WINMEM_MAGIC2 );'), (32414, 1, u'+    assert( pWinMemData->bOwned );'), (32424, 1, u'+  assert( !pWinMemData->bOwned );'), (32426, 1, u'+  assert( pWinMemData->hHeap!=0 );'), (32427, 1, u'+  assert( pWinMemData->hHeap!=INVALID_HANDLE_VALUE );'), (32429, 1, u'+  assert( osHeapValidate(pWinMemData->hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (32441, 1, u'+  assert( pWinMemData->magic1==WINMEM_MAGIC1 );'), (32442, 1, u'+  assert( pWinMemData->magic2==WINMEM_MAGIC2 );'), (32445, 1, u'+    assert( pWinMemData->hHeap!=INVALID_HANDLE_VALUE );'), (32447, 1, u'+    assert( osHeapValidate(pWinMemData->hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) );'), (32649, 1, u'+  assert( !ppDirectory || type==SQLITE_WIN32_DATA_DIRECTORY_TYPE'), (32652, 1, u'+  assert( !ppDirectory || sqlite3MemdebugHasType(*ppDirectory, MEMTYPE_HEAP) );'), (32776, 1, u'+  assert( errcode!=SQLITE_OK );'), (33108, 1, u'+      assert(nNumberOfBytesToUnlockLow == (DWORD)SHARED_SIZE);'), (33116, 1, u'+      assert(nNumberOfBytesToUnlockLow == (DWORD)SHARED_SIZE'), (33311, 1, u'+  assert( id!=0 );'), (33313, 1, u'+  assert( pFile->pShm==0 );'), (33315, 1, u'+  assert( pFile->h!=NULL && pFile->h!=INVALID_HANDLE_VALUE );'), (33369, 1, u'+  assert( id!=0 );'), (33370, 1, u'+  assert( amt>0 );'), (33371, 1, u'+  assert( offset>=0 );'), (33440, 1, u'+  assert( amt>0 );'), (33441, 1, u'+  assert( pFile );'), (33495, 1, u'+      assert( nWrite==0 || nWrite<=(DWORD)nRem );'), (33539, 1, u'+  assert( pFile );'), (33608, 1, u'+  assert( pFile );'), (33610, 1, u'+  assert((flags&0x0F)==SQLITE_SYNC_NORMAL'), (33659, 1, u'+  assert( id!=0 );'), (33660, 1, u'+  assert( pSize!=0 );'), (33823, 1, u'+  assert( id!=0 );'), (33838, 1, u'+  assert( pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK );'), (33839, 1, u'+  assert( locktype!=PENDING_LOCK );'), (33840, 1, u'+  assert( locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK );'), (33873, 1, u'+    assert( pFile->locktype==NO_LOCK );'), (33885, 1, u'+    assert( pFile->locktype==SHARED_LOCK );'), (33904, 1, u'+    assert( pFile->locktype>=SHARED_LOCK );'), (33952, 1, u'+  assert( id!=0 );'), (33985, 1, u'+  assert( pFile!=0 );'), (33986, 1, u'+  assert( locktype<=SHARED_LOCK );'), (34293, 1, u'+  assert( sqlite3_mutex_held(pFile->mutex) || pFile->nRef==0 );'), (34335, 1, u'+  assert( winShmMutexHeld() );'), (34388, 1, u'+  assert( pDbFd->pShm==0 );    /* Not previously opened */'), (34520, 1, u'+  assert( pShmNode->nRef>0 );'), (34546, 1, u'+  assert( ofst>=0 && ofst+n<=SQLITE_SHM_NLOCK );'), (34547, 1, u'+  assert( n>=1 );'), (34548, 1, u'+  assert( flags==(SQLITE_SHM_LOCK | SQLITE_SHM_SHARED)'), (34552, 1, u'+  assert( n==1 || (flags & SQLITE_SHM_EXCLUSIVE)!=0 );'), (34555, 1, u'+  assert( n>1 || mask==(1<<ofst) );'), (34563, 1, u'+      assert( (pX->exclMask & (p->exclMask|p->sharedMask))==0 );'), (34624, 1, u'+        assert( (p->sharedMask & mask)==0 );'), (34690, 1, u'+  assert( szRegion==pShmNode->szRegion || pShmNode->nRegion==0 );'), (34811, 1, u'+  assert( pFile!=0 );'), (34864, 1, u'+  assert( nMap>=0 || pFd->nFetchOut==0 );'), (34916, 1, u'+    assert( (nMap % winSysInfo.dwPageSize)==0 );'), (34917, 1, u'+    assert( sizeof(SIZE_T)==sizeof(sqlite3_int64) || nMap<=0xffffffff );'), (35005, 1, u'+  assert( (p==0)==(pFd->nFetchOut==0) );'), (35008, 1, u'+  assert( p==0 || p==&((u8 *)pFd->pMapRegion)[iOff] );'), (35023, 1, u'+  assert( pFd->nFetchOut>=0 );'), (35167, 1, u'+  assert( nDir>0 );'), (35449, 1, u'+  assert((isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly));'), (35450, 1, u'+  assert(isCreate==0 || isReadWrite);'), (35451, 1, u'+  assert(isExclusive==0 || isCreate);'), (35452, 1, u'+  assert(isDelete==0 || isCreate);'), (35456, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_DB );'), (35457, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_JOURNAL );'), (35458, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MASTER_JOURNAL );'), (35459, 1, u'+  assert( (!isDelete && zName) || eType!=SQLITE_OPEN_WAL );'), (35462, 1, u'+  assert( eType==SQLITE_OPEN_MAIN_DB      || eType==SQLITE_OPEN_TEMP_DB'), (35468, 1, u'+  assert( pFile!=0 );'), (35483, 1, u'+    assert( isDelete && !isOpenJournal );'), (35496, 1, u'+  assert( (eType!=SQLITE_OPEN_MAIN_DB) || (flags & SQLITE_OPEN_URI) ||'), (35859, 1, u'+      assert(!"Invalid flags argument");'), (35929, 1, u'+  assert( nFull>=pVfs->mxPathname );'), (36366, 1, u'+  assert( ArraySize(aSyscall)==76 );'), (36375, 1, u'+  assert( winSysInfo.dwAllocationGranularity>0 );'), (36376, 1, u'+  assert( winSysInfo.dwPageSize>0 );'), (36515, 1, u'+  assert( sizeof(*p)==BITVEC_SZ );'), (36567, 1, u'+  assert( i>0 );'), (36568, 1, u'+  assert( i<=p->iSize );'), (36637, 1, u'+  assert( i>0 );'), (36847, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (36848, 1, u'+# define expensive_assert(X)  assert(X)'), (36850, 1, u'+# define expensive_assert(X)'), (36855, 1, u'+#if !defined(NDEBUG) && defined(SQLITE_ENABLE_EXPENSIVE_ASSERT)'), (36866, 1, u'+    assert( p->nRef || (p->flags&PGHDR_NEED_SYNC) );'), (36878, 1, u'+  assert( pPage->pDirtyNext || pPage==p->pDirtyTail );'), (36879, 1, u'+  assert( pPage->pDirtyPrev || pPage==p->pDirty );'), (36893, 1, u'+    assert( pPage==p->pDirtyTail );'), (36899, 1, u'+    assert( pPage==p->pDirty );'), (36905, 1, u'+  expensive_assert( pcacheCheckSynced(p) );'), (36915, 1, u'+  assert( pPage->pDirtyNext==0 && pPage->pDirtyPrev==0 && p->pDirty!=pPage );'), (36919, 1, u'+    assert( pPage->pDirtyNext->pDirtyPrev==0 );'), (36929, 1, u'+  expensive_assert( pcacheCheckSynced(p) );'), (37000, 1, u'+  assert( pCache->nRef==0 && pCache->pDirty==0 );'), (37033, 1, u'+  assert( pCache!=0 );'), (37034, 1, u'+  assert( createFlag==1 || createFlag==0 );'), (37035, 1, u'+  assert( pgno>0 );'), (37065, 1, u'+    expensive_assert( pcacheCheckSynced(pCache) );'), (37104, 1, u'+    assert( pPgHdr->pCache==pCache );'), (37105, 1, u'+    assert( pPgHdr->pgno==pgno );'), (37106, 1, u'+    assert( pPgHdr->pData==pPage->pBuf );'), (37107, 1, u'+    assert( pPgHdr->pExtra==(void *)&pPgHdr[1] );'), (37126, 1, u'+  assert( p->nRef>0 );'), (37145, 1, u'+  assert(p->nRef>0);'), (37156, 1, u'+  assert( p->nRef==1 );'), (37174, 1, u'+  assert( p->nRef>0 );'), (37221, 1, u'+  assert( p->nRef>0 );'), (37222, 1, u'+  assert( newPgno>0 );'), (37250, 1, u'+      assert( p->pgno>0 );'), (37252, 1, u'+        assert( p->flags&PGHDR_DIRTY );'), (37625, 1, u'+  assert( sqlite3_mutex_notheld(pcache1.grp.mutex) );'), (37634, 1, u'+      assert( pcache1.nFreeSlot>=0 );'), (37672, 1, u'+    assert( pcache1.nFreeSlot<=pcache1.nSlot );'), (37675, 1, u'+    assert( sqlite3MemdebugHasType(p, MEMTYPE_PCACHE) );'), (37697, 1, u'+    assert( sqlite3MemdebugHasType(p, MEMTYPE_PCACHE) );'), (37716, 1, u'+  assert( sqlite3_mutex_held(pCache->pGroup->mutex) );'), (37753, 1, u'+    assert( sqlite3_mutex_held(p->pCache->pGroup->mutex) );'), (37819, 1, u'+  assert( sqlite3_mutex_held(p->pGroup->mutex) );'), (37866, 1, u'+  assert( sqlite3_mutex_held(pGroup->mutex) );'), (37898, 1, u'+  assert( sqlite3_mutex_held(pCache->pGroup->mutex) );'), (37911, 1, u'+  assert( sqlite3_mutex_held(pGroup->mutex) );'), (37914, 1, u'+    assert( p->pCache->pGroup==pGroup );'), (37934, 1, u'+  assert( sqlite3_mutex_held(pCache->pGroup->mutex) );'), (37950, 1, u'+  assert( pCache->nPage==nPage );'), (37961, 1, u'+  assert( pcache1.isInit==0 );'), (37979, 1, u'+  assert( pcache1.isInit!=0 );'), (38011, 1, u'+  assert( (szPage & (szPage-1))==0 && szPage>=512 && szPage<=65536 );'), (38012, 1, u'+  assert( szExtra < 300 );'), (38152, 1, u'+  assert( pCache->bPurgeable || createFlag!=1 );'), (38153, 1, u'+  assert( pCache->bPurgeable || pCache->nMin==0 );'), (38154, 1, u'+  assert( pCache->bPurgeable==0 || pCache->nMin==10 );'), (38155, 1, u'+  assert( pCache->nMin==0 || pCache->bPurgeable );'), (38182, 1, u'+  assert( pCache->nPage >= pCache->nRecyclable );'), (38184, 1, u'+  assert( pGroup->mxPinned == pGroup->nMaxPage + 10 - pGroup->nMinPage );'), (38185, 1, u'+  assert( pCache->n90pct == pCache->nMax*9/10 );'), (38197, 1, u'+  assert( pCache->nHash>0 && pCache->apHash );'), (38213, 1, u'+    assert( (pCache->szPage & (pCache->szPage-1))==0 && pCache->szPage>=512 );'), (38214, 1, u'+    assert( pCache->szExtra<512 );'), (38215, 1, u'+    assert( (pOther->szPage & (pOther->szPage-1))==0 && pOther->szPage>=512 );'), (38216, 1, u'+    assert( pOther->szExtra<512 );'), (38270, 1, u'+  assert( pPage->pCache==pCache );'), (38276, 1, u'+  assert( pPage->pLruPrev==0 && pPage->pLruNext==0 );'), (38277, 1, u'+  assert( pGroup->pLruHead!=pPage && pGroup->pLruTail!=pPage );'), (38311, 1, u'+  assert( pPage->iKey==iOld );'), (38312, 1, u'+  assert( pPage->pCache==pCache );'), (38359, 1, u'+  assert( pCache->bPurgeable || (pCache->nMax==0 && pCache->nMin==0) );'), (38362, 1, u'+  assert( pGroup->nMaxPage >= pCache->nMax );'), (38364, 1, u'+  assert( pGroup->nMinPage >= pCache->nMin );'), (38409, 1, u'+  assert( sqlite3_mutex_notheld(pcache1.grp.mutex) );'), (38410, 1, u'+  assert( sqlite3_mutex_notheld(pcache1.mutex) );'), (38591, 1, u'+  assert( N >= ROUND8(sizeof(*p)) );'), (38633, 1, u'+  assert( p!=0 );'), (38660, 1, u'+  assert( p!=0 && (p->rsFlags & ROWSET_NEXT)==0 );'), (38693, 1, u'+    assert( pA->pRight==0 || pA->v<=pA->pRight->v );'), (38694, 1, u'+    assert( pB->pRight==0 || pB->v<=pB->pRight->v );'), (38708, 1, u'+    assert( pA->pRight==0 || pA->v<=pA->pRight->v );'), (38711, 1, u'+    assert( pB==0 || pB->pRight==0 || pB->v<=pB->pRight->v );'), (38754, 1, u'+  assert( pIn!=0 );'), (38767, 1, u'+  assert( (*ppLast)->pRight==0 );'), (38819, 1, u'+  assert( pList!=0 );'), (38842, 1, u'+  assert( p!=0 && (p->rsFlags & ROWSET_NEXT)==0 );'), (38852, 1, u'+  assert( p->pForest==0 );'), (38876, 1, u'+  assert( p!=0 );'), (38906, 1, u'+  assert( pRowSet!=0 && (pRowSet->rsFlags & ROWSET_NEXT)==0 );'), (39937, 1, u'+static int assert_pager_state(Pager *p){'), (39941, 1, u'+  assert( p->eState==PAGER_OPEN'), (39954, 1, u'+  assert( p->tempFile==0 || p->eLock==EXCLUSIVE_LOCK );'), (39955, 1, u'+  assert( p->tempFile==0 || pPager->changeCountDone );'), (39960, 1, u'+  assert( p->journalMode==PAGER_JOURNALMODE_OFF || p->useJournal );'), (39961, 1, u'+  assert( p->journalMode!=PAGER_JOURNALMODE_OFF || !isOpen(p->jfd) );'), (39972, 1, u'+    assert( p->noSync );'), (39973, 1, u'+    assert( p->journalMode==PAGER_JOURNALMODE_OFF'), (39976, 1, u'+    assert( p->eState!=PAGER_ERROR && p->eState!=PAGER_OPEN );'), (39977, 1, u'+    assert( pagerUseWal(p)==0 );'), (39983, 1, u'+  assert( pPager->changeCountDone==0 || pPager->eLock>=RESERVED_LOCK );'), (39984, 1, u'+  assert( p->eLock!=PENDING_LOCK );'), (39988, 1, u'+      assert( !MEMDB );'), (39989, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (39990, 1, u'+      assert( sqlite3PcacheRefCount(pPager->pPCache)==0 || pPager->tempFile );'), (39994, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (39995, 1, u'+      assert( p->eLock!=UNKNOWN_LOCK );'), (39996, 1, u'+      assert( p->eLock>=SHARED_LOCK );'), (40000, 1, u'+      assert( p->eLock!=UNKNOWN_LOCK );'), (40001, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (40003, 1, u'+        assert( p->eLock>=RESERVED_LOCK );'), (40005, 1, u'+      assert( pPager->dbSize==pPager->dbOrigSize );'), (40006, 1, u'+      assert( pPager->dbOrigSize==pPager->dbFileSize );'), (40007, 1, u'+      assert( pPager->dbOrigSize==pPager->dbHintSize );'), (40008, 1, u'+      assert( pPager->setMaster==0 );'), (40012, 1, u'+      assert( p->eLock!=UNKNOWN_LOCK );'), (40013, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (40020, 1, u'+        assert( p->eLock>=RESERVED_LOCK );'), (40021, 1, u'+        assert( isOpen(p->jfd)'), (40026, 1, u'+      assert( pPager->dbOrigSize==pPager->dbFileSize );'), (40027, 1, u'+      assert( pPager->dbOrigSize==pPager->dbHintSize );'), (40031, 1, u'+      assert( p->eLock==EXCLUSIVE_LOCK );'), (40032, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (40033, 1, u'+      assert( !pagerUseWal(pPager) );'), (40034, 1, u'+      assert( p->eLock>=EXCLUSIVE_LOCK );'), (40035, 1, u'+      assert( isOpen(p->jfd)'), (40039, 1, u'+      assert( pPager->dbOrigSize<=pPager->dbHintSize );'), (40043, 1, u'+      assert( p->eLock==EXCLUSIVE_LOCK );'), (40044, 1, u'+      assert( pPager->errCode==SQLITE_OK );'), (40045, 1, u'+      assert( !pagerUseWal(pPager) );'), (40046, 1, u'+      assert( isOpen(p->jfd)'), (40057, 1, u'+      assert( pPager->errCode!=SQLITE_OK );'), (40058, 1, u'+      assert( sqlite3PcacheRefCount(pPager->pPCache)>0 );'), (40194, 1, u'+  assert( !pPager->exclusiveMode || pPager->eLock==eLock );'), (40195, 1, u'+  assert( eLock==NO_LOCK || eLock==SHARED_LOCK );'), (40196, 1, u'+  assert( eLock!=NO_LOCK || pagerUseWal(pPager)==0 );'), (40198, 1, u'+    assert( pPager->eLock>=eLock );'), (40221, 1, u'+  assert( eLock==SHARED_LOCK || eLock==RESERVED_LOCK || eLock==EXCLUSIVE_LOCK );'), (40251, 1, u'+  assert( !MEMDB );'), (40257, 1, u'+    assert( isOpen(pPager->fd) );'), (40262, 1, u'+    assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (40263, 1, u'+    assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (40305, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (40306, 1, u'+  assert( (pPg->flags&PGHDR_DIRTY) || pPg->pageHash==pager_pagehash(pPg) );'), (40400, 1, u'+  assert( offset%JOURNAL_HDR_SZ(pPager)==0 );'), (40401, 1, u'+  assert( offset>=c );'), (40402, 1, u'+  assert( (offset-c)<JOURNAL_HDR_SZ(pPager) );'), (40429, 1, u'+  assert( isOpen(pPager->jfd) );'), (40483, 1, u'+  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (40521, 1, u'+  assert( isOpen(pPager->fd) || pPager->noSync );'), (40570, 1, u'+    assert( pPager->journalHdr <= pPager->journalOff );'), (40605, 1, u'+  assert( isOpen(pPager->jfd) );      /* Journal file must be open. */'), (40726, 1, u'+  assert( pPager->setMaster==0 );'), (40727, 1, u'+  assert( !pagerUseWal(pPager) );'), (40736, 1, u'+  assert( isOpen(pPager->jfd) );'), (40737, 1, u'+  assert( pPager->journalHdr <= pPager->journalOff );'), (40840, 1, u'+      assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (40865, 1, u'+  assert( pPager->eState==PAGER_READER'), (40875, 1, u'+    assert( !isOpen(pPager->jfd) );'), (40887, 1, u'+    assert( (PAGER_JOURNALMODE_MEMORY   & 5)!=1 );'), (40888, 1, u'+    assert( (PAGER_JOURNALMODE_OFF      & 5)!=1 );'), (40889, 1, u'+    assert( (PAGER_JOURNALMODE_WAL      & 5)!=1 );'), (40890, 1, u'+    assert( (PAGER_JOURNALMODE_DELETE   & 5)!=1 );'), (40891, 1, u'+    assert( (PAGER_JOURNALMODE_TRUNCATE & 5)==1 );'), (40892, 1, u'+    assert( (PAGER_JOURNALMODE_PERSIST  & 5)==1 );'), (40913, 1, u'+    assert( pPager->errCode || pPager->eState!=PAGER_ERROR );'), (40924, 1, u'+    assert( !MEMDB );'), (40958, 1, u'+  assert( rc==SQLITE_OK || !MEMDB );'), (40959, 1, u'+  assert('), (41043, 1, u'+  assert( assert_pager_state(pPager) );'), (41044, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (41050, 1, u'+  assert( isOpen(pPager->jfd) || pPager->pInJournal==0 );'), (41052, 1, u'+    assert( !pagerUseWal(pPager) );'), (41056, 1, u'+      assert( pPager->journalMode==PAGER_JOURNALMODE_MEMORY );'), (41077, 1, u'+      assert( pPager->journalMode==PAGER_JOURNALMODE_DELETE'), (41111, 1, u'+    assert( rc2==SQLITE_OK );'), (41119, 1, u'+    assert( pPager->eLock==EXCLUSIVE_LOCK );'), (41154, 1, u'+    assert( assert_pager_state(pPager) );'), (41160, 1, u'+      assert( pPager->eState==PAGER_READER );'), (41263, 1, u'+  assert( (isMainJrnl&~1)==0 );      /* isMainJrnl is 0 or 1 */'), (41264, 1, u'+  assert( (isSavepnt&~1)==0 );       /* isSavepnt is 0 or 1 */'), (41265, 1, u'+  assert( isMainJrnl || pDone );     /* pDone always used on sub-journals */'), (41266, 1, u'+  assert( isSavepnt || pDone==0 );   /* pDone never used on non-savepoint */'), (41269, 1, u'+  assert( aData );         /* Temp storage must have already been allocated */'), (41270, 1, u'+  assert( pagerUseWal(pPager)==0 || (!isMainJrnl && isSavepnt) );'), (41278, 1, u'+  assert( pPager->eState>=PAGER_WRITER_CACHEMOD'), (41281, 1, u'+  assert( pPager->eState>=PAGER_WRITER_CACHEMOD || isMainJrnl );'), (41299, 1, u'+    assert( !isSavepnt );'), (41367, 1, u'+  assert( pPg || !MEMDB );'), (41368, 1, u'+  assert( pPager->eState!=PAGER_OPEN || pPg==0 );'), (41384, 1, u'+    assert( !pagerUseWal(pPager) );'), (41411, 1, u'+    assert( isSavepnt );'), (41412, 1, u'+    assert( (pPager->doNotSpill & SPILLFLAG_ROLLBACK)==0 );'), (41415, 1, u'+    assert( (pPager->doNotSpill & SPILLFLAG_ROLLBACK)!=0 );'), (41452, 1, u'+      assert( !pagerUseWal(pPager) );'), (41596, 1, u'+    assert( !isOpen(pJournal) );'), (41625, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (41626, 1, u'+  assert( pPager->eState!=PAGER_READER );'), (41633, 1, u'+    assert( pPager->eLock==EXCLUSIVE_LOCK );'), (41664, 1, u'+    assert( MAX_SECTOR_SIZE>=512 );'), (41694, 1, u'+  assert( isOpen(pPager->fd) || pPager->tempFile );'), (41781, 1, u'+  assert( isOpen(pPager->jfd) );'), (41834, 1, u'+      assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) );'), (41903, 1, u'+  assert( 0 );'), (41980, 1, u'+  assert( pPager->eState>=PAGER_READER && !MEMDB );'), (41981, 1, u'+  assert( isOpen(pPager->fd) );'), (42068, 1, u'+  assert( pagerUseWal(pPager) );'), (42146, 1, u'+  assert( pPager->pWal );'), (42147, 1, u'+  assert( pList );'), (42151, 1, u'+    assert( p->pgno < p->pDirty->pgno );'), (42155, 1, u'+  assert( pList->pDirty==0 || isCommit );'), (42170, 1, u'+    assert( pList );'), (42209, 1, u'+  assert( pagerUseWal(pPager) );'), (42210, 1, u'+  assert( pPager->eState==PAGER_OPEN || pPager->eState==PAGER_READER );'), (42247, 1, u'+  assert( pPager->eState==PAGER_OPEN );'), (42248, 1, u'+  assert( pPager->eLock>=SHARED_LOCK );'), (42259, 1, u'+    assert( isOpen(pPager->fd) || pPager->tempFile );'), (42302, 1, u'+  assert( pPager->eState==PAGER_OPEN );'), (42303, 1, u'+  assert( pPager->eLock>=SHARED_LOCK );'), (42375, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (42376, 1, u'+  assert( pPager->eState>=PAGER_WRITER_LOCKED );'), (42402, 1, u'+  assert( pagerUseWal(pPager)==0 || szJ==0 );'), (42417, 1, u'+    assert( rc!=SQLITE_DONE );'), (42432, 1, u'+    assert( rc!=SQLITE_DONE );'), (42447, 1, u'+    assert( rc!=SQLITE_DONE );'), (42449, 1, u'+  assert( rc!=SQLITE_OK || pPager->journalOff>=szJ );'), (42463, 1, u'+      assert( offset==(i64)ii*(4+pPager->pageSize) );'), (42466, 1, u'+    assert( rc!=SQLITE_DONE );'), (42566, 1, u'+  assert( level>=1 && level<=3 );'), (42632, 1, u'+  assert( rc!=SQLITE_OK || isOpen(pFile) );'), (42667, 1, u'+    assert( ((int(*)(void *))(ap[0]))==xBusyHandler );'), (42668, 1, u'+    assert( ap[1]==pBusyHandlerArg );'), (42717, 1, u'+  assert( pageSize==0 || (pageSize>=512 && pageSize<=SQLITE_MAX_PAGE_SIZE) );'), (42746, 1, u'+    assert( nReserve>=0 && nReserve<1000 );'), (42777, 1, u'+  assert( pPager->eState!=PAGER_OPEN );      /* Called only by OP_MaxPgcnt */'), (42778, 1, u'+  assert( pPager->mxPgno>=pPager->dbSize );  /* OP_MaxPgcnt enforces this */'), (42823, 1, u'+  assert( isOpen(pPager->fd) || pPager->tempFile );'), (42829, 1, u'+  assert( !pagerUseWal(pPager) );'), (42849, 1, u'+  assert( pPager->eState>=PAGER_READER );'), (42850, 1, u'+  assert( pPager->eState!=PAGER_WRITER_FINISHED );'), (42877, 1, u'+  assert( (pPager->eLock>=locktype)'), (42911, 1, u'+static void assertTruncateConstraintCb(PgHdr *pPg){'), (42912, 1, u'+  assert( pPg->flags&PGHDR_DIRTY );'), (42913, 1, u'+  assert( !subjRequiresPage(pPg) || pPg->pgno<=pPg->pPager->dbSize );'), (42915, 1, u'+static void assertTruncateConstraint(Pager *pPager){'), (42916, 1, u'+  sqlite3PcacheIterateDirty(pPager->pPCache, assertTruncateConstraintCb);'), (42919, 1, u'+# define assertTruncateConstraint(pPager)'), (42934, 1, u'+  assert( pPager->dbSize>=nPage );'), (42935, 1, u'+  assert( pPager->eState>=PAGER_WRITER_CACHEMOD );'), (43010, 1, u'+  assert( p->pExtra==(void *)&p[1] );'), (43011, 1, u'+  assert( p->pPage==0 );'), (43012, 1, u'+  assert( p->flags==PGHDR_MMAP );'), (43013, 1, u'+  assert( p->pPager==pPager );'), (43014, 1, u'+  assert( p->nRef==1 );'), (43033, 1, u'+  assert( pPager->fd->pMethods->iVersion>=3 );'), (43067, 1, u'+  assert( assert_pager_state(pPager) );'), (43110, 1, u'+  assert( !pPager->aSavepoint && !pPager->pInJournal );'), (43111, 1, u'+  assert( !isOpen(pPager->jfd) && !isOpen(pPager->sjfd) );'), (43171, 1, u'+  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (43174, 1, u'+  assert( assert_pager_state(pPager) );'), (43175, 1, u'+  assert( !pagerUseWal(pPager) );'), (43181, 1, u'+    assert( !pPager->tempFile );'), (43184, 1, u'+      assert( isOpen(pPager->jfd) );'), (43275, 1, u'+  assert( assert_pager_state(pPager) );'), (43315, 1, u'+  assert( !pagerUseWal(pPager) );'), (43316, 1, u'+  assert( pPager->eState==PAGER_WRITER_DBMOD );'), (43317, 1, u'+  assert( pPager->eLock==EXCLUSIVE_LOCK );'), (43324, 1, u'+    assert( pPager->tempFile && rc==SQLITE_OK );'), (43331, 1, u'+  assert( rc!=SQLITE_OK || isOpen(pPager->fd) );'), (43356, 1, u'+      assert( (pList->flags&PGHDR_NEED_SYNC)==0 );'), (43433, 1, u'+    assert( pPager->useJournal );'), (43434, 1, u'+    assert( isOpen(pPager->jfd) || pagerUseWal(pPager) );'), (43435, 1, u'+    assert( isOpen(pPager->sjfd) || pPager->nSubRec==0 );'), (43436, 1, u'+    assert( pagerUseWal(pPager)'), (43459, 1, u'+    assert( pPager->nSavepoint>0 );'), (43488, 1, u'+  assert( pPg->pPager==pPager );'), (43489, 1, u'+  assert( pPg->flags&PGHDR_DIRTY );'), (43571, 1, u'+      assert( (pPg->flags&PGHDR_NEED_SYNC)==0 );'), (43689, 1, u'+    assert( nUri>=0 );'), (43728, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(SQLITE_INT_TO_PTR(journalFileSize)) );'), (43739, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );'), (43743, 1, u'+    assert( nPathname>0 );'), (43766, 1, u'+    assert( !memDb );'), (43779, 1, u'+      assert(SQLITE_DEFAULT_PAGE_SIZE<=SQLITE_MAX_DEFAULT_PAGE_SIZE);'), (43791, 1, u'+        assert(SQLITE_IOCAP_ATOMIC512==(512>>8));'), (43792, 1, u'+        assert(SQLITE_IOCAP_ATOMIC64K==(65536>>8));'), (43793, 1, u'+        assert(SQLITE_MAX_DEFAULT_PAGE_SIZE<=65536);'), (43821, 1, u'+    assert( pPager->memDb==0 );'), (43830, 1, u'+    assert( !pPager->pTmpSpace );'), (43837, 1, u'+  assert( nExtra<1000 );'), (43855, 1, u'+  assert( pPager->state == (tempFile ? PAGER_EXCLUSIVE : PAGER_UNLOCK) );'), (43859, 1, u'+  assert( tempFile==PAGER_LOCKINGMODE_NORMAL'), (43861, 1, u'+  assert( PAGER_LOCKINGMODE_EXCLUSIVE==1 );'), (43866, 1, u'+  assert( useJournal || pPager->tempFile );'), (43869, 1, u'+    assert( pPager->fullSync==0 );'), (43870, 1, u'+    assert( pPager->syncFlags==0 );'), (43871, 1, u'+    assert( pPager->walSyncFlags==0 );'), (43872, 1, u'+    assert( pPager->ckptSyncFlags==0 );'), (43884, 1, u'+  assert( isOpen(pPager->fd) || tempFile );'), (43940, 1, u'+  assert( pPager->useJournal );'), (43941, 1, u'+  assert( isOpen(pPager->fd) );'), (43942, 1, u'+  assert( pPager->eState==PAGER_OPEN );'), (43944, 1, u'+  assert( jrnlOpen==0 || ( sqlite3OsDeviceCharacteristics(pPager->jfd) &'), (44059, 1, u'+  assert( sqlite3PcacheRefCount(pPager->pPCache)==0 );'), (44060, 1, u'+  assert( assert_pager_state(pPager) );'), (44061, 1, u'+  assert( pPager->eState==PAGER_OPEN || pPager->eState==PAGER_READER );'), (44067, 1, u'+    assert( !MEMDB );'), (44071, 1, u'+      assert( pPager->eLock==NO_LOCK || pPager->eLock==UNKNOWN_LOCK );'), (44131, 1, u'+          assert( !pPager->tempFile );'), (44133, 1, u'+          assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (44150, 1, u'+        assert( rc==SQLITE_OK );'), (44181, 1, u'+      assert( pPager->eState==PAGER_OPEN );'), (44182, 1, u'+      assert( (pPager->eLock==SHARED_LOCK)'), (44244, 1, u'+    assert( pPager->pWal==0 || rc==SQLITE_OK );'), (44249, 1, u'+    assert( rc==SQLITE_OK );'), (44259, 1, u'+    assert( !MEMDB );'), (44261, 1, u'+    assert( pPager->eState==PAGER_OPEN );'), (44354, 1, u'+  assert( pPager->eState>=PAGER_READER );'), (44355, 1, u'+  assert( assert_pager_state(pPager) );'), (44356, 1, u'+  assert( noContent==0 || bMmapOk==0 );'), (44390, 1, u'+          assert( rc==SQLITE_OK );'), (44410, 1, u'+  assert( (*ppPage)->pgno==pgno );'), (44411, 1, u'+  assert( (*ppPage)->pPager==pPager || (*ppPage)->pPager==0 );'), (44416, 1, u'+    assert( pgno<=PAGER_MAX_PGNO && pgno!=PAGER_MJ_PGNO(pPager) );'), (44462, 1, u'+      assert( pPg->pPager==pPager );'), (44475, 1, u'+  assert( rc!=SQLITE_OK );'), (44498, 1, u'+  assert( pPager!=0 );'), (44499, 1, u'+  assert( pgno!=0 );'), (44500, 1, u'+  assert( pPager->pPCache!=0 );'), (44501, 1, u'+  assert( pPager->eState>=PAGER_READER && pPager->eState!=PAGER_ERROR );'), (44552, 1, u'+  assert( pPager->eState==PAGER_WRITER_LOCKED );'), (44553, 1, u'+  assert( assert_pager_state(pPager) );'), (44554, 1, u'+  assert( pPager->pInJournal==0 );'), (44586, 1, u'+      assert( rc!=SQLITE_OK || isOpen(pPager->jfd) );'), (44607, 1, u'+    assert( pPager->eState==PAGER_WRITER_LOCKED );'), (44635, 1, u'+  assert( pPager->eState>=PAGER_READER && pPager->eState<PAGER_ERROR );'), (44639, 1, u'+    assert( pPager->pInJournal==0 );'), (44688, 1, u'+    assert( rc==SQLITE_OK || pPager->eState==PAGER_READER );'), (44689, 1, u'+    assert( rc!=SQLITE_OK || pPager->eState==PAGER_WRITER_LOCKED );'), (44690, 1, u'+    assert( assert_pager_state(pPager) );'), (44713, 1, u'+  assert( pPager->eState==PAGER_WRITER_LOCKED'), (44717, 1, u'+  assert( assert_pager_state(pPager) );'), (44742, 1, u'+  assert( pPager->eState>=PAGER_WRITER_CACHEMOD );'), (44743, 1, u'+  assert( assert_pager_state(pPager) );'), (44750, 1, u'+    assert( !pagerUseWal(pPager) );'), (44758, 1, u'+      assert( pagerUseWal(pPager)==0 );'), (44767, 1, u'+        assert( pPg->pgno!=PAGER_MJ_PGNO(pPager) );'), (44769, 1, u'+        assert( pPager->journalHdr<=pPager->journalOff );'), (44798, 1, u'+        assert( pPager->pInJournal!=0 );'), (44801, 1, u'+        assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );'), (44804, 1, u'+          assert( rc==SQLITE_NOMEM );'), (44856, 1, u'+  assert( (pPg->flags & PGHDR_MMAP)==0 );'), (44857, 1, u'+  assert( pPager->eState>=PAGER_WRITER_LOCKED );'), (44858, 1, u'+  assert( pPager->eState!=PAGER_ERROR );'), (44859, 1, u'+  assert( assert_pager_state(pPager) );'), (44872, 1, u'+    assert( !MEMDB );'), (44873, 1, u'+    assert( (pPager->doNotSpill & SPILLFLAG_NOSYNC)==0 );'), (44890, 1, u'+    assert(nPage>0);'), (44891, 1, u'+    assert(pg1<=pPg->pgno);'), (44892, 1, u'+    assert((pg1+nPage)>pPg->pgno);'), (44923, 1, u'+      assert( !MEMDB );'), (44933, 1, u'+    assert( (pPager->doNotSpill & SPILLFLAG_NOSYNC)!=0 );'), (45001, 1, u'+  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (45004, 1, u'+  assert( assert_pager_state(pPager) );'), (45018, 1, u'+  assert( isDirectMode==0 );'), (45027, 1, u'+    assert( !pPager->tempFile && isOpen(pPager->fd) );'), (45031, 1, u'+    assert( pPgHdr==0 || rc==SQLITE_OK );'), (45049, 1, u'+        assert( pPager->dbFileSize>0 );'), (45084, 1, u'+    assert( !MEMDB );'), (45087, 1, u'+    assert( !MEMDB );'), (45109, 1, u'+  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (45113, 1, u'+  assert( assert_pager_state(pPager) );'), (45153, 1, u'+  assert( pPager->eState==PAGER_WRITER_LOCKED'), (45158, 1, u'+  assert( assert_pager_state(pPager) );'), (45186, 1, u'+      assert( rc==SQLITE_OK );'), (45220, 1, u'+      assert( isOpen(pPager->jfd)'), (45270, 1, u'+        assert( rc!=SQLITE_IOERR_BLOCKED );'), (45283, 1, u'+        assert( pPager->eState==PAGER_WRITER_DBMOD );'), (45327, 1, u'+  assert( pPager->eState==PAGER_WRITER_LOCKED'), (45331, 1, u'+  assert( assert_pager_state(pPager) );'), (45348, 1, u'+    assert( pPager->journalOff==JOURNAL_HDR_SZ(pPager) || !pPager->journalOff );'), (45392, 1, u'+  assert( assert_pager_state(pPager) );'), (45417, 1, u'+  assert( pPager->eState==PAGER_READER || rc!=SQLITE_OK );'), (45418, 1, u'+  assert( rc==SQLITE_OK || rc==SQLITE_FULL || rc==SQLITE_CORRUPT'), (45491, 1, u'+  assert( eStat==SQLITE_DBSTATUS_CACHE_HIT'), (45496, 1, u'+  assert( SQLITE_DBSTATUS_CACHE_HIT+1==SQLITE_DBSTATUS_CACHE_MISS );'), (45497, 1, u'+  assert( SQLITE_DBSTATUS_CACHE_HIT+2==SQLITE_DBSTATUS_CACHE_WRITE );'), (45498, 1, u'+  assert( PAGER_STAT_HIT==0 && PAGER_STAT_MISS==1 && PAGER_STAT_WRITE==2 );'), (45527, 1, u'+  assert( pPager->eState>=PAGER_WRITER_LOCKED );'), (45528, 1, u'+  assert( assert_pager_state(pPager) );'), (45565, 1, u'+    assert( pPager->nSavepoint==nSavepoint );'), (45566, 1, u'+    assertTruncateConstraint(pPager);'), (45605, 1, u'+  assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (45606, 1, u'+  assert( iSavepoint>=0 || op==SAVEPOINT_ROLLBACK );'), (45629, 1, u'+          assert( rc==SQLITE_OK );'), (45642, 1, u'+      assert(rc!=SQLITE_DONE);'), (45769, 1, u'+  assert( pPg->nRef>0 );'), (45770, 1, u'+  assert( pPager->eState==PAGER_WRITER_CACHEMOD'), (45773, 1, u'+  assert( assert_pager_state(pPager) );'), (45821, 1, u'+    assert( pPager->journalMode==PAGER_JOURNALMODE_OFF ||'), (45823, 1, u'+    assert( pPg->flags&PGHDR_DIRTY );'), (45833, 1, u'+  assert( !pPgOld || pPgOld->nRef==1 );'), (45854, 1, u'+    assert( pPgOld );'), (45878, 1, u'+        assert( pPager->pTmpSpace!=0 );'), (45896, 1, u'+  assert( pPg->nRef>0 || pPg->pPager->memDb );'), (45919, 1, u'+  assert( eMode==PAGER_LOCKINGMODE_QUERY'), (45922, 1, u'+  assert( PAGER_LOCKINGMODE_QUERY<0 );'), (45923, 1, u'+  assert( PAGER_LOCKINGMODE_NORMAL>=0 && PAGER_LOCKINGMODE_EXCLUSIVE>=0 );'), (45924, 1, u'+  assert( pPager->exclusiveMode || 0==sqlite3WalHeapMemory(pPager->pWal) );'), (45962, 1, u'+  assert(      eMode==PAGER_JOURNALMODE_DELETE'), (45973, 1, u'+  assert( pPager->tempFile==0 || eMode!=PAGER_JOURNALMODE_WAL );'), (45979, 1, u'+    assert( eOld==PAGER_JOURNALMODE_MEMORY || eOld==PAGER_JOURNALMODE_OFF );'), (45988, 1, u'+    assert( pPager->eState!=PAGER_ERROR );'), (45995, 1, u'+    assert( (PAGER_JOURNALMODE_TRUNCATE & 5)==1 );'), (45996, 1, u'+    assert( (PAGER_JOURNALMODE_PERSIST & 5)==1 );'), (45997, 1, u'+    assert( (PAGER_JOURNALMODE_DELETE & 5)==0 );'), (45998, 1, u'+    assert( (PAGER_JOURNALMODE_MEMORY & 5)==4 );'), (45999, 1, u'+    assert( (PAGER_JOURNALMODE_OFF & 5)==0 );'), (46000, 1, u'+    assert( (PAGER_JOURNALMODE_WAL & 5)==5 );'), (46002, 1, u'+    assert( isOpen(pPager->fd) || pPager->exclusiveMode );'), (46019, 1, u'+        assert( state==PAGER_OPEN || state==PAGER_READER );'), (46024, 1, u'+          assert( rc==SQLITE_OK );'), (46035, 1, u'+        assert( state==pPager->eState );'), (46057, 1, u'+  assert( assert_pager_state(pPager) );'), (46136, 1, u'+  assert( pPager->eLock==SHARED_LOCK || pPager->eLock==EXCLUSIVE_LOCK );'), (46156, 1, u'+  assert( pPager->pWal==0 && pPager->tempFile==0 );'), (46157, 1, u'+  assert( pPager->eLock==SHARED_LOCK || pPager->eLock==EXCLUSIVE_LOCK );'), (46204, 1, u'+  assert( assert_pager_state(pPager) );'), (46205, 1, u'+  assert( pPager->eState==PAGER_OPEN   || pbOpen );'), (46206, 1, u'+  assert( pPager->eState==PAGER_READER || !pbOpen );'), (46207, 1, u'+  assert( pbOpen==0 || *pbOpen==0 );'), (46208, 1, u'+  assert( pbOpen!=0 || (!pPager->tempFile && !pPager->pWal) );'), (46240, 1, u'+  assert( pPager->journalMode==PAGER_JOURNALMODE_WAL );'), (46285, 1, u'+  assert( pPager->eState==PAGER_READER );'), (46845, 1, u'+  assert( iPage==0 || *ppPage || rc!=SQLITE_OK );'), (46853, 1, u'+  assert( pWal->nWiData>0 && pWal->apWiData[0] );'), (46861, 1, u'+  assert( pWal->nWiData>0 && pWal->apWiData[0] );'), (46904, 1, u'+  assert( nByte>=8 );'), (46905, 1, u'+  assert( (nByte&0x00000007)==0 );'), (46939, 1, u'+  assert( pWal->writeLock );'), (46970, 1, u'+  assert( WAL_FRAME_HDRSIZE==24 );'), (46998, 1, u'+  assert( WAL_FRAME_HDRSIZE==24 );'), (47107, 1, u'+  assert( iPage>0 );'), (47108, 1, u'+  assert( (HASHTABLE_NSLOT & (HASHTABLE_NSLOT-1))==0 );'), (47140, 1, u'+  assert( rc==SQLITE_OK || iHash>0 );'), (47169, 1, u'+  assert( (iHash==0 || iFrame>HASHTABLE_NPAGE_ONE)'), (47209, 1, u'+  assert( pWal->writeLock );'), (47220, 1, u'+  assert( pWal->nWiData>walFramePage(pWal->hdr.mxFrame) );'), (47221, 1, u'+  assert( pWal->apWiData[walFramePage(pWal->hdr.mxFrame)] );'), (47228, 1, u'+  assert( iLimit>0 );'), (47241, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (47252, 1, u'+      assert( aHash[iKey]==i );'), (47280, 1, u'+    assert( idx <= HASHTABLE_NSLOT/2 + 1 );'), (47298, 1, u'+      assert( !aPgno[idx] );'), (47309, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (47317, 1, u'+      assert( nEntry==idx );'), (47331, 1, u'+        assert( aHash[iKey]==i );'), (47365, 1, u'+  assert( pWal->ckptLock==1 || pWal->ckptLock==0 );'), (47366, 1, u'+  assert( WAL_ALL_BUT_WRITE==WAL_WRITE_LOCK+1 );'), (47367, 1, u'+  assert( WAL_CKPT_LOCK==WAL_ALL_BUT_WRITE );'), (47368, 1, u'+  assert( pWal->writeLock );'), (47557, 1, u'+  assert( zWalName && zWalName[0] );'), (47558, 1, u'+  assert( pDbFd );'), (47565, 1, u'+  assert( WIN_SHM_BASE==WALINDEX_LOCK_OFFSET );'), (47568, 1, u'+  assert( UNIX_SHM_BASE==WALINDEX_LOCK_OFFSET );'), (47639, 1, u'+  assert( iMin<0xffffffff );'), (47696, 1, u'+  assert( nLeft>0 && nRight>0 );'), (47713, 1, u'+    assert( iLeft>=nLeft || aContent[aLeft[iLeft]]>dbpage );'), (47714, 1, u'+    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );'), (47758, 1, u'+  assert( nList<=HASHTABLE_NPAGE && nList>0 );'), (47759, 1, u'+  assert( HASHTABLE_NPAGE==(1<<(ArraySize(aSub)-1)) );'), (47766, 1, u'+      assert( p->aList && p->nList<=(1<<iSub) );'), (47767, 1, u'+      assert( p->aList==&aList[iList&~((2<<iSub)-1)] );'), (47777, 1, u'+      assert( p->nList<=(1<<iSub) );'), (47778, 1, u'+      assert( p->aList==&aList[nList&~((2<<iSub)-1)] );'), (47782, 1, u'+  assert( aMerge==aList );'), (47789, 1, u'+      assert( aContent[aList[i]] > aContent[aList[i-1]] );'), (47826, 1, u'+  assert( pWal->ckptLock && pWal->hdr.mxFrame>0 );'), (47979, 1, u'+  assert( pIter );'), (47993, 1, u'+      assert( y<=pWal->hdr.mxFrame );'), (48033, 1, u'+      assert( walFramePgno(pWal, iFrame)==iDbpage );'), (48076, 1, u'+    assert( pWal->writeLock );'), (48080, 1, u'+      assert( mxSafeFrame==pWal->hdr.mxFrame );'), (48199, 1, u'+  assert( pWal->nWiData>0 && pWal->apWiData[0] );'), (48259, 1, u'+  assert( pChanged );'), (48264, 1, u'+  assert( page0 || pWal->writeLock==0 );'), (48276, 1, u'+  assert( badHdr==0 || pWal->writeLock==0 );'), (48375, 1, u'+  assert( pWal->readLock<0 );     /* Not currently locked */'), (48478, 1, u'+      assert( thisMark!=READMARK_NOT_USED );'), (48501, 1, u'+      assert( rc==SQLITE_BUSY || (pWal->readOnly & WAL_SHM_RDONLY)!=0 );'), (48536, 1, u'+      assert( mxReadMark<=pWal->hdr.mxFrame );'), (48601, 1, u'+  assert( pWal->readLock>=0 || pWal->lockError );'), (48664, 1, u'+#ifdef SQLITE_ENABLE_EXPENSIVE_ASSERT'), (48677, 1, u'+    assert( iRead==iRead2 );'), (48736, 1, u'+  assert( pWal->readLock>=0 );'), (48815, 1, u'+      assert( walFramePgno(pWal, iFrame)!=1 );'), (48820, 1, u'+  assert( rc==SQLITE_OK );'), (48831, 1, u'+  assert( pWal->writeLock );'), (48847, 1, u'+  assert( pWal->writeLock );'), (48848, 1, u'+  assert( aWalData[3]!=pWal->nCkpt || aWalData[0]<=pWal->hdr.mxFrame );'), (48888, 1, u'+    assert( pInfo->nBackfill==pWal->hdr.mxFrame );'), (48915, 1, u'+        assert( pInfo->aReadMark[0]==0 );'), (48928, 1, u'+    assert( (rc&0xff)!=SQLITE_BUSY ); /* BUSY not possible when useWal==1 */'), (48971, 1, u'+    assert( p->syncFlags & (SQLITE_SYNC_NORMAL|SQLITE_SYNC_FULL) );'), (49025, 1, u'+  assert( pList );'), (49026, 1, u'+  assert( pWal->writeLock );'), (49030, 1, u'+  assert( (isCommit!=0)==(nTruncate!=0) );'), (49089, 1, u'+  assert( (int)pWal->szPage==szPage );'), (49104, 1, u'+    assert( iOffset==walFrameOffset(iFrame, szPage) );'), (49216, 1, u'+  assert( pWal->ckptLock==0 );'), (49217, 1, u'+  assert( pWal->writeLock==0 );'), (49330, 1, u'+  assert( pWal->writeLock==0 );'), (49331, 1, u'+  assert( pWal->exclusiveMode!=WAL_HEAPMEMORY_MODE || op==-1 );'), (49339, 1, u'+  assert( pWal->readLock>=0 || pWal->lockError );'), (49340, 1, u'+  assert( pWal->readLock>=0 || (op<=0 && pWal->exclusiveMode==0) );'), (49354, 1, u'+    assert( pWal->exclusiveMode==0 );'), (49355, 1, u'+    assert( pWal->readLock>=0 );'), (49381, 1, u'+  assert( pWal==0 || pWal->readLock>=0 );'), (50029, 1, u'+  assert( p->pBt->inTransaction!=TRANS_NONE || p->pBt->nTransaction==0 ); \\'), (50030, 1, u'+  assert( p->pBt->inTransaction>=p->inTrans );'), (50088, 1, u'+  assert( p->locked==0 );'), (50089, 1, u'+  assert( sqlite3_mutex_notheld(p->pBt->mutex) );'), (50090, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (50103, 1, u'+  assert( p->locked==1 );'), (50104, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (50105, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (50106, 1, u'+  assert( p->db==pBt->db );'), (50135, 1, u'+  assert( p->pNext==0 || p->pNext->pBt>p->pBt );'), (50136, 1, u'+  assert( p->pPrev==0 || p->pPrev->pBt<p->pBt );'), (50137, 1, u'+  assert( p->pNext==0 || p->pNext->db==p->db );'), (50138, 1, u'+  assert( p->pPrev==0 || p->pPrev->db==p->db );'), (50139, 1, u'+  assert( p->sharable || (p->pNext==0 && p->pPrev==0) );'), (50142, 1, u'+  assert( !p->locked || p->wantToLock>0 );'), (50143, 1, u'+  assert( p->sharable || p->wantToLock==0 );'), (50146, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (50150, 1, u'+  assert( (p->locked==0 && p->sharable) || p->pBt->db==p->db );'), (50172, 1, u'+    assert( pLater->sharable );'), (50173, 1, u'+    assert( pLater->pNext==0 || pLater->pNext->pBt>pLater->pBt );'), (50174, 1, u'+    assert( !pLater->locked || pLater->wantToLock>0 );'), (50192, 1, u'+    assert( p->wantToLock>0 );'), (50208, 1, u'+  assert( p->sharable==0 || p->locked==0 || p->wantToLock>0 );'), (50209, 1, u'+  assert( p->sharable==0 || p->locked==0 || p->db==p->pBt->db );'), (50210, 1, u'+  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->pBt->mutex) );'), (50211, 1, u'+  assert( p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->db->mutex) );'), (50250, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (50259, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (50312, 1, u'+  assert( db!=0 );'), (50314, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (50318, 1, u'+  assert( p!=0 );'), (50594, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (50595, 1, u'+  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (50596, 1, u'+  assert( p->db!=0 );'), (50597, 1, u'+  assert( !(p->db->flags&SQLITE_ReadUncommitted)||eLock==WRITE_LOCK||iTab==1 );'), (50603, 1, u'+  assert( eLock==READ_LOCK || (p==pBt->pWriter && p->inTrans==TRANS_WRITE) );'), (50604, 1, u'+  assert( eLock==READ_LOCK || pBt->inTransaction==TRANS_WRITE );'), (50629, 1, u'+    assert( pIter->eLock==READ_LOCK || pIter->eLock==WRITE_LOCK );'), (50630, 1, u'+    assert( eLock==READ_LOCK || pIter->pBtree==p || pIter->eLock==READ_LOCK);'), (50634, 1, u'+        assert( p==pBt->pWriter );'), (50667, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (50668, 1, u'+  assert( eLock==READ_LOCK || eLock==WRITE_LOCK );'), (50669, 1, u'+  assert( p->db!=0 );'), (50675, 1, u'+  assert( 0==(p->db->flags&SQLITE_ReadUncommitted) || eLock==WRITE_LOCK );'), (50679, 1, u'+  assert( p->sharable );'), (50680, 1, u'+  assert( SQLITE_OK==querySharedCacheTableLock(p, iTable, eLock) );'), (50708, 1, u'+  assert( WRITE_LOCK>READ_LOCK );'), (50730, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (50731, 1, u'+  assert( p->sharable || 0==*ppIter );'), (50732, 1, u'+  assert( p->inTrans>0 );'), (50736, 1, u'+    assert( (pBt->btsFlags & BTS_EXCLUSIVE)==0 || pBt->pWriter==pLock->pBtree );'), (50737, 1, u'+    assert( pLock->pBtree->inTrans>=pLock->eLock );'), (50740, 1, u'+      assert( pLock->iTable!=1 || pLock==&p->lock );'), (50749, 1, u'+  assert( (pBt->btsFlags & BTS_PENDING)==0 || pBt->pWriter );'), (50777, 1, u'+      assert( pLock->eLock==READ_LOCK || pLock->pBtree==p );'), (50804, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (50815, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (50841, 1, u'+  assert( sqlite3BtreeHoldsMutex(pBtree) );'), (50894, 1, u'+    assert( pgno<=pBt->nPage );'), (50950, 1, u'+  assert( CURSOR_VALID==pCur->eState );'), (50951, 1, u'+  assert( 0==pCur->pKey );'), (50952, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (50955, 1, u'+  assert( rc==SQLITE_OK );  /* KeySize() cannot fail */'), (50976, 1, u'+  assert( !pCur->apPage[0]->intKey || !pCur->pKey );'), (50994, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (50995, 1, u'+  assert( pExcept==0 || pExcept->pBt==pBt );'), (51016, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (51040, 1, u'+    assert( nKey==(i64)(int)nKey );'), (51069, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (51070, 1, u'+  assert( pCur->eState>=CURSOR_REQUIRESEEK );'), (51079, 1, u'+    assert( pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_INVALID );'), (51129, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51159, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51161, 1, u'+  assert( 0==PTRMAP_ISPAGE(pBt, PENDING_BYTE_PAGE(pBt)) );'), (51163, 1, u'+  assert( pBt->autoVacuum );'), (51179, 1, u'+  assert( offset <= (int)pBt->usableSize-5 );'), (51209, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51223, 1, u'+  assert( offset <= (int)pBt->usableSize-5 );'), (51224, 1, u'+  assert( pEType!=0 );'), (51257, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (51288, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (51291, 1, u'+  assert( pPage->leaf==0 || pPage->leaf==1 );'), (51293, 1, u'+  assert( n==4-4*pPage->leaf );'), (51296, 1, u'+      assert( n==0 );'), (51412, 1, u'+  assert( nSize==debuginfo.nSize );'), (51433, 1, u'+  assert( pCell!=0 );'), (51435, 1, u'+  assert( (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload );'), (51465, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (51466, 1, u'+  assert( pPage->pBt!=0 );'), (51467, 1, u'+  assert( pPage->pBt->usableSize <= SQLITE_MAX_PAGE_SIZE );'), (51468, 1, u'+  assert( pPage->nOverflow==0 );'), (51469, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (51475, 1, u'+  assert( nCell==get2byte(&data[hdr+3]) );'), (51496, 1, u'+    assert( pc>=iCellFirst && pc<=iCellLast );'), (51508, 1, u'+    assert( cbrk+size<=usableSize && cbrk>=iCellFirst );'), (51514, 1, u'+  assert( cbrk>=iCellFirst );'), (51520, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (51549, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (51550, 1, u'+  assert( pPage->pBt );'), (51551, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (51552, 1, u'+  assert( nByte>=0 );  /* Minimum cell size is 4 */'), (51553, 1, u'+  assert( pPage->nFree>=nByte );'), (51554, 1, u'+  assert( pPage->nOverflow==0 );'), (51556, 1, u'+  assert( nByte < usableSize-8 );'), (51559, 1, u'+  assert( pPage->cellOffset == hdr + 12 - 4*pPage->leaf );'), (51614, 1, u'+    assert( gap+nByte<=top );'), (51626, 1, u'+  assert( top+nByte <= (int)pPage->pBt->usableSize );'), (51644, 1, u'+  assert( pPage->pBt!=0 );'), (51645, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (51646, 1, u'+  assert( start>=pPage->hdrOffset+6+pPage->childPtrSize );'), (51647, 1, u'+  assert( (start + size) <= (int)pPage->pBt->usableSize );'), (51648, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (51649, 1, u'+  assert( size>=0 );   /* Minimum cell size is 4 */'), (51669, 1, u'+  assert( start<=iLast );'), (51679, 1, u'+  assert( pbegin>addr || pbegin==0 );'), (51689, 1, u'+    assert( pbegin>addr );'), (51690, 1, u'+    assert( pbegin <= (int)pPage->pBt->usableSize-4 );'), (51716, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (51735, 1, u'+  assert( pPage->hdrOffset==(pPage->pgno==1 ? 100 : 0) );'), (51736, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (51737, 1, u'+  pPage->leaf = (u8)(flagByte>>3);  assert( PTF_LEAF == 1<<3 );'), (51769, 1, u'+  assert( pPage->pBt!=0 );'), (51770, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (51771, 1, u'+  assert( pPage->pgno==sqlite3PagerPagenumber(pPage->pDbPage) );'), (51772, 1, u'+  assert( pPage == sqlite3PagerGetExtra(pPage->pDbPage) );'), (51773, 1, u'+  assert( pPage->aData == sqlite3PagerGetData(pPage->pDbPage) );'), (51792, 1, u'+    assert( pBt->pageSize>=512 && pBt->pageSize<=65536 );'), (51885, 1, u'+  assert( sqlite3PagerPagenumber(pPage->pDbPage)==pPage->pgno );'), (51886, 1, u'+  assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (51887, 1, u'+  assert( sqlite3PagerGetData(pPage->pDbPage) == data );'), (51888, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (51889, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51905, 1, u'+  assert( pBt->pageSize>=512 && pBt->pageSize<=65536 );'), (51946, 1, u'+  assert( flags==0 || flags==PAGER_GET_NOCONTENT || flags==PAGER_GET_READONLY );'), (51947, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51961, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51977, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (51978, 1, u'+  assert( ((p->pBt->nPage)&0x8000000)==0 );'), (51997, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (51998, 1, u'+  assert( bReadonly==PAGER_GET_READONLY || bReadonly==0 );'), (52013, 1, u'+  assert( pgno!=0 || rc==SQLITE_CORRUPT );'), (52023, 1, u'+    assert( pPage->aData );'), (52024, 1, u'+    assert( pPage->pBt );'), (52025, 1, u'+    assert( sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage );'), (52026, 1, u'+    assert( sqlite3PagerGetData(pPage->pDbPage)==pPage->aData );'), (52027, 1, u'+    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (52043, 1, u'+  assert( sqlite3PagerPageRefcount(pData)>0 );'), (52045, 1, u'+    assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (52064, 1, u'+  assert( pBt->db );'), (52065, 1, u'+  assert( sqlite3_mutex_held(pBt->db->mutex) );'), (52119, 1, u'+  assert( db!=0 );'), (52120, 1, u'+  assert( pVfs!=0 );'), (52121, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (52122, 1, u'+  assert( (flags&0xff)==flags );   /* flags fit in 8 bits */'), (52125, 1, u'+  assert( (flags & BTREE_UNORDERED)==0 || (flags & BTREE_SINGLE)!=0 );'), (52128, 1, u'+  assert( (flags & BTREE_SINGLE)==0 || isTempDb );'), (52180, 1, u'+        assert( pBt->nRef>0 );'), (52220, 1, u'+    assert( sizeof(i64)==8 || sizeof(i64)==4 );'), (52221, 1, u'+    assert( sizeof(u64)==8 || sizeof(u64)==4 );'), (52222, 1, u'+    assert( sizeof(u32)==4 );'), (52223, 1, u'+    assert( sizeof(u16)==2 );'), (52224, 1, u'+    assert( sizeof(Pgno)==4 );'), (52279, 1, u'+    assert( (pBt->pageSize & 7)==0 );  /* 8-byte alignment of pageSize */'), (52355, 1, u'+    assert( sqlite3_mutex_held(mutexOpen) );'), (52373, 1, u'+  assert( sqlite3_mutex_notheld(pBt->mutex) );'), (52439, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (52461, 1, u'+  assert( p->wantToLock==0 && p->locked==0 );'), (52468, 1, u'+    assert( !pBt->pCursor );'), (52479, 1, u'+  assert( p->wantToLock==0 );'), (52480, 1, u'+  assert( p->locked==0 );'), (52506, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (52519, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (52540, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (52555, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (52557, 1, u'+  assert( pBt && pBt->pPager );'), (52586, 1, u'+  assert( nReserve>=-1 && nReserve<=255 );'), (52595, 1, u'+  assert( nReserve>=0 && nReserve<=255 );'), (52598, 1, u'+    assert( (pageSize & 7)==0 );'), (52599, 1, u'+    assert( !pBt->pPage1 && !pBt->pCursor );'), (52630, 1, u'+  assert( sqlite3_mutex_held(p->pBt->mutex) );'), (52744, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (52745, 1, u'+  assert( pBt->pPage1==0 );'), (52819, 1, u'+    assert( (pageSize & 7)==0 );'), (52873, 1, u'+  assert( pBt->maxLeaf + 23 <= MX_CELL_SIZE(pBt) );'), (52916, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (52917, 1, u'+  assert( countValidCursors(pBt,0)==0 || pBt->inTransaction>TRANS_NONE );'), (52919, 1, u'+    assert( pBt->pPage1->aData );'), (52920, 1, u'+    assert( sqlite3PagerRefcount(pBt->pPager)==1 );'), (52921, 1, u'+    assert( pBt->pPage1->aData );'), (52937, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (52942, 1, u'+  assert( pP1!=0 );'), (52947, 1, u'+  assert( sizeof(zMagicHeader)==16 );'), (52952, 1, u'+  assert( pBt->usableSize<=pBt->pageSize && pBt->usableSize+255>=pBt->pageSize);'), (52961, 1, u'+  assert( pBt->autoVacuum==1 || pBt->autoVacuum==0 );'), (52962, 1, u'+  assert( pBt->incrVacuum==1 || pBt->incrVacuum==0 );'), (53035, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE || IfNotOmitAV(pBt->bDoTruncate)==0 );'), (53108, 1, u'+        assert( p->lock.pBtree==p && p->lock.iTable==1 );'), (53122, 1, u'+      assert( !pBt->pWriter );'), (53173, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (53216, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (53217, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (53288, 1, u'+  assert( eType==PTRMAP_OVERFLOW2 || eType==PTRMAP_OVERFLOW1 ||'), (53290, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (53291, 1, u'+  assert( pDbPage->pBt==pBt );'), (53372, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (53373, 1, u'+  assert( iLastPg>nFin );'), (53405, 1, u'+        assert( iFreePg==iLastPg );'), (53439, 1, u'+      assert( iFreePg<iLastPg );'), (53495, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE && p->inTrans==TRANS_WRITE );'), (53537, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (53539, 1, u'+  assert(pBt->autoVacuum);'), (53577, 1, u'+  assert( nRef>=sqlite3PagerRefcount(pPager) );'), (53641, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (53712, 1, u'+    assert( pBt->inTransaction==TRANS_WRITE );'), (53713, 1, u'+    assert( pBt->nTransaction>0 );'), (53804, 1, u'+    assert( TRANS_WRITE==pBt->inTransaction );'), (53821, 1, u'+    assert( countValidCursors(pBt, 1)==0 );'), (53853, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (53854, 1, u'+  assert( (pBt->btsFlags & BTS_READ_ONLY)==0 );'), (53855, 1, u'+  assert( iStatement>0 );'), (53856, 1, u'+  assert( iStatement>p->db->nSavepoint );'), (53857, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (53884, 1, u'+    assert( op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK );'), (53885, 1, u'+    assert( iSavepoint>=0 || (iSavepoint==-1 && op==SAVEPOINT_ROLLBACK) );'), (53898, 1, u'+      assert( pBt->nPage>0 );'), (53946, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (53947, 1, u'+  assert( wrFlag==0 || wrFlag==1 );'), (53953, 1, u'+  assert( hasSharedCacheTableLock(p, iTable, pKeyInfo!=0, wrFlag+1) );'), (53954, 1, u'+  assert( wrFlag==0 || !hasReadConflicts(p, iTable) );'), (53957, 1, u'+  assert( p->inTrans>TRANS_NONE );'), (53958, 1, u'+  assert( wrFlag==0 || p->inTrans==TRANS_WRITE );'), (53959, 1, u'+  assert( pBt->pPage1 && pBt->pPage1->aData );'), (53965, 1, u'+    assert( wrFlag==0 );'), (54041, 1, u'+  assert( pCur->cachedRowid==iRowid );'), (54100, 1, u'+  static void assertCellInfo(BtCursor *pCur){'), (54105, 1, u'+    assert( memcmp(&info, &pCur->info, sizeof(info))==0 );'), (54108, 1, u'+  #define assertCellInfo(x)'), (54118, 1, u'+      assertCellInfo(pCur);'), (54129, 1, u'+    assertCellInfo(pCur);                                                      \\'), (54157, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54158, 1, u'+  assert( pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID );'), (54181, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54182, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (54217, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (54218, 1, u'+  assert(pPgnoNext);'), (54246, 1, u'+  assert( next==0 || rc==SQLITE_DONE );'), (54249, 1, u'+    assert( rc==SQLITE_OK || pPage==0 );'), (54338, 1, u'+  assert( pPage );'), (54339, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (54340, 1, u'+  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (54341, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54408, 1, u'+        assert(!pCur->aOverflow[iIdx] || pCur->aOverflow[iIdx]==nextPage);'), (54505, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54506, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (54507, 1, u'+  assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (54508, 1, u'+  assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (54530, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54533, 1, u'+    assert( pCur->eState==CURSOR_VALID );'), (54534, 1, u'+    assert( pCur->iPage>=0 && pCur->apPage[pCur->iPage] );'), (54535, 1, u'+    assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (54570, 1, u'+  assert( pCur!=0 && pCur->iPage>=0 && pCur->apPage[pCur->iPage]);'), (54571, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (54572, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54574, 1, u'+  assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (54591, 1, u'+    assert( nLocal<=nKey );'), (54614, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (54615, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54623, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (54624, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54647, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54648, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (54649, 1, u'+  assert( pCur->iPage<BTCURSOR_MAX_DEPTH );'), (54650, 1, u'+  assert( pCur->iPage>=0 );'), (54677, 1, u'+static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){'), (54678, 1, u'+  assert( iIdx<=pParent->nCell );'), (54680, 1, u'+    assert( get4byte(&pParent->aData[pParent->hdrOffset+8])==iChild );'), (54682, 1, u'+    assert( get4byte(findCell(pParent, iIdx))==iChild );'), (54686, 1, u'+#  define assertParentIndex(x,y,z)'), (54698, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54699, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (54700, 1, u'+  assert( pCur->iPage>0 );'), (54701, 1, u'+  assert( pCur->apPage[pCur->iPage] );'), (54709, 1, u'+  assertParentIndex('), (54750, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54751, 1, u'+  assert( CURSOR_INVALID < CURSOR_REQUIRESEEK );'), (54752, 1, u'+  assert( CURSOR_VALID   < CURSOR_REQUIRESEEK );'), (54753, 1, u'+  assert( CURSOR_FAULT   > CURSOR_REQUIRESEEK );'), (54756, 1, u'+      assert( pCur->skipNext!=SQLITE_OK );'), (54784, 1, u'+    assert( pCur->apPage[0]->intKey==1 || pCur->apPage[0]->intKey==0 );'), (54797, 1, u'+  assert( pRoot->pgno==pCur->pgnoRoot );'), (54798, 1, u'+  assert( pRoot->isInit && (pCur->pKeyInfo==0)==pRoot->intKey );'), (54829, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54830, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (54832, 1, u'+    assert( pCur->aiIdx[pCur->iPage]<pPage->nCell );'), (54854, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54855, 1, u'+  assert( pCur->eState==CURSOR_VALID );'), (54876, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54877, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (54881, 1, u'+      assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 );'), (54884, 1, u'+      assert( pCur->apPage[pCur->iPage]->nCell>0 );'), (54899, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54900, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (54909, 1, u'+      assert( pCur->aiIdx[ii]==pCur->apPage[ii]->nCell );'), (54911, 1, u'+    assert( pCur->aiIdx[pCur->iPage]==pCur->apPage[pCur->iPage]->nCell-1 );'), (54912, 1, u'+    assert( pCur->apPage[pCur->iPage]->leaf );'), (54920, 1, u'+      assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 );'), (54923, 1, u'+      assert( pCur->eState==CURSOR_VALID );'), (54969, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (54970, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (54971, 1, u'+  assert( pRes );'), (54972, 1, u'+  assert( (pIdxKey==0)==(pCur->pKeyInfo==0) );'), (54993, 1, u'+  assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage] );'), (54994, 1, u'+  assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->isInit );'), (54995, 1, u'+  assert( pCur->eState==CURSOR_INVALID || pCur->apPage[pCur->iPage]->nCell>0 );'), (54998, 1, u'+    assert( pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 );'), (55001, 1, u'+  assert( pCur->apPage[0]->intKey || pIdxKey );'), (55014, 1, u'+    assert( pPage->nCell>0 );'), (55015, 1, u'+    assert( pPage->intKey==(pIdxKey==0) );'), (55018, 1, u'+    assert( biasRight==0 || biasRight==1 );'), (55038, 1, u'+          assert( nCellKey==intKey );'), (55051, 1, u'+        assert( lwr+upr>=0 );'), (55112, 1, u'+          assert( c==0 );'), (55119, 1, u'+        assert( lwr+upr>=0 );'), (55123, 1, u'+    assert( lwr==upr+1 || (pPage->intKey && !pPage->leaf) );'), (55124, 1, u'+    assert( pPage->isInit );'), (55126, 1, u'+      assert( pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell );'), (55175, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (55176, 1, u'+  assert( pRes!=0 );'), (55177, 1, u'+  assert( pCur->skipNext==0 || pCur->eState!=CURSOR_VALID );'), (55189, 1, u'+      assert( pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_SKIPNEXT );'), (55202, 1, u'+  assert( pPage->isInit );'), (55260, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (55261, 1, u'+  assert( pRes!=0 );'), (55262, 1, u'+  assert( pCur->skipNext==0 || pCur->eState!=CURSOR_VALID );'), (55277, 1, u'+      assert( pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_SKIPNEXT );'), (55289, 1, u'+  assert( pPage->isInit );'), (55360, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (55361, 1, u'+  assert( eMode==BTALLOC_ANY || (nearby>0 && IfNotOmitAV(pBt->autoVacuum)) );'), (55382, 1, u'+        assert( nearby>0 );'), (55383, 1, u'+        assert( pBt->autoVacuum );'), (55424, 1, u'+      assert( pTrunk!=0 );'), (55425, 1, u'+      assert( pTrunk->aData!=0 );'), (55432, 1, u'+        assert( pPrevTrunk==0 );'), (55496, 1, u'+            assert( sqlite3PagerIswriteable(pPage1->pDbPage) );'), (55609, 1, u'+      assert( pBt->nPage!=PENDING_BYTE_PAGE(pBt) );'), (55623, 1, u'+    assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (55633, 1, u'+  assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );'), (55647, 1, u'+  assert( rc!=SQLITE_OK || sqlite3PagerIswriteable((*ppPage)->pDbPage) );'), (55671, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (55672, 1, u'+  assert( iPage>1 );'), (55673, 1, u'+  assert( !pMemPage || pMemPage->pgno==iPage );'), (55725, 1, u'+    assert( pBt->usableSize>32 );'), (55802, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55811, 1, u'+  assert( pBt->usableSize > 4 );'), (55814, 1, u'+  assert( ovflPgno==0 || nOvfl>0 );'), (55889, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (55893, 1, u'+  assert( pCell<pPage->aData || pCell>=&pPage->aData[pBt->pageSize]'), (55908, 1, u'+  assert( info.nHeader==nHeader );'), (55909, 1, u'+  assert( info.nKey==nKey );'), (55910, 1, u'+  assert( info.nData==(u32)(nData+nZero) );'), (55970, 1, u'+      assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (55974, 1, u'+      assert( pPrior<pPage->aData || pPrior>=&pPage->aData[pBt->pageSize]'), (55990, 1, u'+    assert( pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) );'), (55994, 1, u'+    assert( pPayload<pPage->aData || pPayload>=&pPage->aData[pBt->pageSize]'), (55999, 1, u'+      assert( pSrc );'), (56036, 1, u'+  assert( idx>=0 && idx<pPage->nCell );'), (56037, 1, u'+  assert( sz==cellSize(pPage, idx) );'), (56038, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (56039, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (56056, 1, u'+  assert( (SQLITE_PTR_TO_INT(ptr)&1)==0 );  /* ptr is always 2-byte aligned */'), (56105, 1, u'+  assert( i>=0 && i<=pPage->nCell+pPage->nOverflow );'), (56106, 1, u'+  assert( pPage->nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=10921 );'), (56107, 1, u'+  assert( pPage->nOverflow<=ArraySize(pPage->apOvfl) );'), (56108, 1, u'+  assert( ArraySize(pPage->apOvfl)==ArraySize(pPage->aiOvfl) );'), (56109, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (56115, 1, u'+  assert( sz==cellSizePtr(pPage, pCell) || (sz==8 && iChild>0) );'), (56125, 1, u'+    assert( j<(int)(sizeof(pPage->apOvfl)/sizeof(pPage->apOvfl[0])) );'), (56134, 1, u'+    assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (56143, 1, u'+    assert( idx >= end+2 );'), (56144, 1, u'+    assert( idx+sz <= (int)pPage->pBt->usableSize );'), (56153, 1, u'+    assert( (SQLITE_PTR_TO_INT(ptr)&1)==0 );  /* ptr is always 2-byte aligned */'), (56188, 1, u'+  assert( pPage->nOverflow==0 );'), (56189, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (56190, 1, u'+  assert( nCell>=0 && nCell<=(int)MX_CELL(pPage->pBt)'), (56192, 1, u'+  assert( sqlite3PagerIswriteable(pPage->pDbPage) );'), (56195, 1, u'+  assert( pPage->nCell==0 );'), (56196, 1, u'+  assert( get2byteNotZero(&data[hdr+5])==nUsable );'), (56259, 1, u'+  assert( sqlite3_mutex_held(pPage->pBt->mutex) );'), (56260, 1, u'+  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (56261, 1, u'+  assert( pPage->nOverflow==1 );'), (56279, 1, u'+    assert( sqlite3PagerIswriteable(pNew->pDbPage) );'), (56280, 1, u'+    assert( pPage->aData[0]==(PTF_INTKEY|PTF_LEAFDATA|PTF_LEAF) );'), (56347, 1, u'+    assert( pPage->isInit );'), (56358, 1, u'+        assert( n==pPage->pgno && e==PTRMAP_OVERFLOW1 );'), (56363, 1, u'+        assert( n==pPage->pgno && e==PTRMAP_BTREE );'), (56369, 1, u'+      assert( n==pPage->pgno && e==PTRMAP_BTREE );'), (56404, 1, u'+    assert( pFrom->isInit );'), (56405, 1, u'+    assert( pFrom->nFree>=iToHdr );'), (56406, 1, u'+    assert( get2byte(&aFrom[iFromHdr+5]) <= (int)pBt->usableSize );'), (56513, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (56514, 1, u'+  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (56525, 1, u'+  assert( pParent->nOverflow==0 || pParent->nOverflow==1 );'), (56526, 1, u'+  assert( pParent->nOverflow==0 || pParent->aiOvfl[0]==iParentIdx );'), (56547, 1, u'+    assert( bBulk==0 || bBulk==1 );'), (56553, 1, u'+      assert( bBulk==0 );'), (56633, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(aSpace1) );'), (56668, 1, u'+        assert( nCell<nMaxCells );'), (56678, 1, u'+        assert( nCell<nMaxCells );'), (56687, 1, u'+      assert( nCell<nMaxCells );'), (56691, 1, u'+      assert( sz<=pBt->maxLocal+23 );'), (56692, 1, u'+      assert( iSpace1 <= (int)pBt->pageSize );'), (56695, 1, u'+      assert( leafCorrection==0 || leafCorrection==4 );'), (56698, 1, u'+        assert( leafCorrection==0 );'), (56699, 1, u'+        assert( pOld->hdrOffset==0 );'), (56704, 1, u'+        assert( leafCorrection==4 );'), (56732, 1, u'+    assert( i<nMaxCells );'), (56765, 1, u'+    assert( d<nMaxCells );'), (56766, 1, u'+    assert( r<nMaxCells );'), (56789, 1, u'+  assert( cntNew[0]>0 || (pParent->pgno==1 && pParent->nCell==0) );'), (56815, 1, u'+      assert( i>0 );'), (56878, 1, u'+  assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (56889, 1, u'+    assert( j<nMaxCells );'), (56892, 1, u'+    assert( pNew->nCell>0 || (nNew==1 && cntNew[0]==0) );'), (56893, 1, u'+    assert( pNew->nOverflow==0 );'), (56900, 1, u'+    assert( i<nNew-1 || j==nCell );'), (56906, 1, u'+      assert( j<nMaxCells );'), (56938, 1, u'+          assert(leafCorrection==4);'), (56943, 1, u'+      assert( sz<=pBt->maxLocal+23 );'), (56944, 1, u'+      assert( iOvflSpace <= (int)pBt->pageSize );'), (56947, 1, u'+      assert( sqlite3PagerIswriteable(pParent->pDbPage) );'), (56953, 1, u'+  assert( j==nCell );'), (56954, 1, u'+  assert( nOld>0 );'), (56955, 1, u'+  assert( nNew>0 );'), (56976, 1, u'+    assert( nNew==1 );'), (56977, 1, u'+    assert( apNew[0]->nFree =='), (57027, 1, u'+        assert( j+1 < ArraySize(apCopy) );'), (57028, 1, u'+        assert( j+1 < nOld );'), (57038, 1, u'+      assert(nOverflow>0 || iOverflow<i );'), (57039, 1, u'+      assert(nOverflow<2 || pOld->aiOvfl[0]==pOld->aiOvfl[1]-1);'), (57040, 1, u'+      assert(nOverflow<3 || pOld->aiOvfl[1]==pOld->aiOvfl[2]-1);'), (57055, 1, u'+      assert( j<nOld );'), (57056, 1, u'+      assert( k<nNew );'), (57089, 1, u'+  assert( pParent->isInit );'), (57137, 1, u'+  assert( pRoot->nOverflow>0 );'), (57138, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (57157, 1, u'+  assert( sqlite3PagerIswriteable(pChild->pDbPage) );'), (57158, 1, u'+  assert( sqlite3PagerIswriteable(pRoot->pDbPage) );'), (57159, 1, u'+  assert( pChild->nCell==pRoot->nCell );'), (57208, 1, u'+        assert( (balance_deeper_called++)==0 );'), (57214, 1, u'+          assert( pCur->apPage[1]->nOverflow );'), (57247, 1, u'+          assert( (balance_quick_called++)==0 );'), (57342, 1, u'+    assert( pCur->skipNext!=SQLITE_OK );'), (57346, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (57347, 1, u'+  assert( pCur->wrFlag && pBt->inTransaction==TRANS_WRITE'), (57349, 1, u'+  assert( hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) );'), (57356, 1, u'+  assert( (pKey==0)==(pCur->pKeyInfo==0) );'), (57383, 1, u'+  assert( pCur->eState==CURSOR_VALID || (pCur->eState==CURSOR_INVALID && loc) );'), (57386, 1, u'+  assert( pPage->intKey || nKey>=0 );'), (57387, 1, u'+  assert( pPage->leaf || !pPage->intKey );'), (57392, 1, u'+  assert( pPage->isInit );'), (57398, 1, u'+  assert( szNew==cellSizePtr(pPage, newCell) );'), (57399, 1, u'+  assert( szNew <= MX_CELL_SIZE(pBt) );'), (57403, 1, u'+    assert( idx<pPage->nCell );'), (57417, 1, u'+    assert( pPage->leaf );'), (57420, 1, u'+    assert( pPage->leaf );'), (57423, 1, u'+  assert( rc!=SQLITE_OK || pPage->nCell>0 || pPage->nOverflow>0 );'), (57457, 1, u'+  assert( pCur->apPage[pCur->iPage]->nOverflow==0 );'), (57476, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (57477, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (57478, 1, u'+  assert( (pBt->btsFlags & BTS_READ_ONLY)==0 );'), (57479, 1, u'+  assert( pCur->wrFlag );'), (57480, 1, u'+  assert( hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) );'), (57481, 1, u'+  assert( !hasReadConflicts(p, pCur->pgnoRoot) );'), (57540, 1, u'+    assert( MX_CELL_SIZE(pBt) >= nCell );'), (57598, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (57599, 1, u'+  assert( pBt->inTransaction==TRANS_WRITE );'), (57600, 1, u'+  assert( (pBt->btsFlags & BTS_READ_ONLY)==0 );'), (57633, 1, u'+    assert( pgnoRoot>=3 );'), (57676, 1, u'+      assert( eType!=PTRMAP_ROOTPAGE );'), (57677, 1, u'+      assert( eType!=PTRMAP_FREEPAGE );'), (57709, 1, u'+    assert( sqlite3PagerIswriteable(pBt->pPage1->pDbPage) );'), (57721, 1, u'+  assert( sqlite3PagerIswriteable(pRoot->pDbPage) );'), (57729, 1, u'+  assert( (pBt->openFlags & BTREE_SINGLE)==0 || pgnoRoot==2 );'), (57756, 1, u'+  assert( sqlite3_mutex_held(pBt->mutex) );'), (57776, 1, u'+    assert( pPage->intKey );'), (57807, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (57847, 1, u'+  assert( sqlite3BtreeHoldsMutex(p) );'), (57848, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (57927, 1, u'+      assert( maxRootPgno!=PENDING_BYTE_PAGE(pBt) );'), (57971, 1, u'+  assert( p->inTrans>TRANS_NONE );'), (57972, 1, u'+  assert( SQLITE_OK==querySharedCacheTableLock(p, MASTER_ROOT, READ_LOCK) );'), (57973, 1, u'+  assert( pBt->pPage1 );'), (57974, 1, u'+  assert( idx>=0 && idx<=15 );'), (57997, 1, u'+  assert( idx>=1 && idx<=15 );'), (57999, 1, u'+  assert( p->inTrans==TRANS_WRITE );'), (58000, 1, u'+  assert( pBt->pPage1!=0 );'), (58007, 1, u'+      assert( pBt->autoVacuum || iMeta==0 );'), (58008, 1, u'+      assert( iMeta==0 || iMeta==1 );'), (58136, 1, u'+  assert( iPg<=pCheck->nPage && sizeof(pCheck->aPgRef[0])==1 );'), (58144, 1, u'+  assert( iPg<=pCheck->nPage && sizeof(pCheck->aPgRef[0])==1 );'), (58330, 1, u'+    assert( rc==SQLITE_CORRUPT );  /* The only possible error from InitPage */'), (58363, 1, u'+    assert( sz==info.nPayload );'), (58451, 1, u'+    assert( contentOffset<=usableSize );  /* Enforced by btreeInitPage() */'), (58473, 1, u'+      assert( i<=usableSize-4 );     /* Enforced by btreeInitPage() */'), (58475, 1, u'+      assert( i+size<=usableSize );  /* Enforced by btreeInitPage() */'), (58478, 1, u'+      assert( j==0 || j>i+size );  /* Enforced by btreeInitPage() */'), (58479, 1, u'+      assert( j<=usableSize-4 );   /* Enforced by btreeInitPage() */'), (58531, 1, u'+  assert( p->inTrans>TRANS_NONE && pBt->inTransaction>TRANS_NONE );'), (58629, 1, u'+  assert( p->pBt->pPager!=0 );'), (58642, 1, u'+  assert( p->pBt->pPager!=0 );'), (58650, 1, u'+  assert( p==0 || sqlite3_mutex_held(p->db->mutex) );'), (58683, 1, u'+  assert( p );'), (58684, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (58689, 1, u'+  assert( p );'), (58690, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (58732, 1, u'+  assert( sqlite3_mutex_held(p->db->mutex) );'), (58735, 1, u'+  assert( rc==SQLITE_OK || rc==SQLITE_LOCKED_SHAREDCACHE );'), (58749, 1, u'+  assert( p->inTrans!=TRANS_NONE );'), (58752, 1, u'+    assert( READ_LOCK+1==WRITE_LOCK );'), (58753, 1, u'+    assert( isWriteLock==0 || isWriteLock==1 );'), (58779, 1, u'+  assert( cursorHoldsMutex(pCsr) );'), (58780, 1, u'+  assert( sqlite3_mutex_held(pCsr->pBtree->db->mutex) );'), (58781, 1, u'+  assert( pCsr->isIncrblobHandle );'), (58787, 1, u'+  assert( pCsr->eState!=CURSOR_REQUIRESEEK );'), (58801, 1, u'+  assert( rc==SQLITE_OK );'), (58813, 1, u'+  assert( (pCsr->pBt->btsFlags & BTS_READ_ONLY)==0'), (58815, 1, u'+  assert( hasSharedCacheTableLock(pCsr->pBtree, pCsr->pgnoRoot, 0, 2) );'), (58816, 1, u'+  assert( !hasReadConflicts(pCsr->pBtree, pCsr->pgnoRoot) );'), (58817, 1, u'+  assert( pCsr->apPage[pCsr->iPage]->intKey );'), (58833, 1, u'+  assert( cursorHoldsMutex(pCur) );'), (58834, 1, u'+  assert( sqlite3_mutex_held(pCur->pBtree->db->mutex) );'), (58849, 1, u'+  assert( iVersion==1 || iVersion==2 );'), (58881, 1, u'+  assert( mask==BTREE_BULKLOAD || mask==0 );'), (59115, 1, u'+  assert( sqlite3BtreeGetReserveNoMutex(p->pSrc)>=0 );'), (59116, 1, u'+  assert( p->bDestLocked );'), (59117, 1, u'+  assert( !isFatalError(p->rc) );'), (59118, 1, u'+  assert( iSrcPg!=PENDING_BYTE_PAGE(p->pSrc->pBt) );'), (59119, 1, u'+  assert( zSrcData );'), (59205, 1, u'+  assert( sqlite3BtreeHoldsMutex(p->pSrc) );'), (59274, 1, u'+    assert( nSrcPage>=0 );'), (59333, 1, u'+        assert( pgszSrc==sqlite3BtreeGetPageSize(p->pSrc) );'), (59334, 1, u'+        assert( pgszDest==sqlite3BtreeGetPageSize(p->pDest) );'), (59344, 1, u'+        assert( nDestTruncate>0 );'), (59363, 1, u'+          assert( pFile );'), (59364, 1, u'+          assert( nDestTruncate==0'), (59438, 1, u'+      assert( rc2==SQLITE_OK );'), (59536, 1, u'+    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (59543, 1, u'+      assert( p->pDestDb );'), (59547, 1, u'+      assert( rc!=SQLITE_BUSY && rc!=SQLITE_LOCKED );'), (59569, 1, u'+    assert( sqlite3_mutex_held(p->pSrc->pBt->mutex) );'), (59590, 1, u'+  assert( sqlite3BtreeIsInTrans(pTo) );'), (59618, 1, u'+  assert( b.rc!=SQLITE_OK );'), (59626, 1, u'+  assert( sqlite3BtreeIsInTrans(pTo)==0 );'), (59671, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (59672, 1, u'+  assert( desiredEnc==SQLITE_UTF8 || desiredEnc==SQLITE_UTF16LE'), (59677, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59686, 1, u'+  assert(rc==SQLITE_OK    || rc==SQLITE_NOMEM);'), (59687, 1, u'+  assert(rc==SQLITE_OK    || pMem->enc!=desiredEnc);'), (59688, 1, u'+  assert(rc==SQLITE_NOMEM || pMem->enc==desiredEnc);'), (59707, 1, u'+  assert( 1 >='), (59713, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (59717, 1, u'+  assert( preserve==0 || pMem->flags&(MEM_Blob|MEM_Str) );'), (59734, 1, u'+    assert( pMem->xDel!=SQLITE_DYNAMIC );'), (59758, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59759, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (59785, 1, u'+    assert( pMem->flags&MEM_Blob );'), (59786, 1, u'+    assert( (pMem->flags&MEM_RowSet)==0 );'), (59787, 1, u'+    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59811, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59842, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59843, 1, u'+  assert( !(fg&MEM_Zero) );'), (59844, 1, u'+  assert( !(fg&(MEM_Str|MEM_Blob)) );'), (59845, 1, u'+  assert( fg&(MEM_Int|MEM_Real) );'), (59846, 1, u'+  assert( (pMem->flags&MEM_RowSet)==0 );'), (59847, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59863, 1, u'+    assert( fg & MEM_Real );'), (59885, 1, u'+    assert( (pMem->flags & MEM_Null)!=0 || pFunc==pMem->u.pDef );'), (59886, 1, u'+    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59893, 1, u'+    assert( 0==(pMem->flags&MEM_Dyn) && !pMem->xDel );'), (59907, 1, u'+  assert( p->db==0 || sqlite3_mutex_held(p->db->mutex) );'), (59910, 1, u'+    assert( (p->flags & MEM_Agg)==0 );'), (59913, 1, u'+    assert( (p->flags&MEM_RowSet)==0 );'), (59914, 1, u'+    assert( p->xDel!=SQLITE_DYNAMIC );'), (59980, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (59981, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (59989, 1, u'+    assert( pMem->z || pMem->n==0 );'), (60005, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (60006, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (60027, 1, u'+  assert( pMem->flags & MEM_Real );'), (60028, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (60029, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (60030, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (60056, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (60057, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (60058, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (60070, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (60071, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (60088, 1, u'+    assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );'), (60089, 1, u'+    assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (60098, 1, u'+  assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))!=0 );'), (60175, 1, u'+  assert( db!=0 );'), (60176, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (60182, 1, u'+    assert( pMem->zMalloc );'), (60185, 1, u'+    assert( pMem->u.pRowSet!=0 );'), (60195, 1, u'+  assert( p->db!=0 );'), (60240, 1, u'+  assert( (pFrom->flags & MEM_RowSet)==0 );'), (60246, 1, u'+    assert( srcType==MEM_Ephem || srcType==MEM_Static );'), (60258, 1, u'+  assert( (pFrom->flags & MEM_RowSet)==0 );'), (60280, 1, u'+  assert( pFrom->db==0 || sqlite3_mutex_held(pFrom->db->mutex) );'), (60281, 1, u'+  assert( pTo->db==0 || sqlite3_mutex_held(pTo->db->mutex) );'), (60282, 1, u'+  assert( pFrom->db==0 || pTo->db==0 || pFrom->db==pTo->db );'), (60317, 1, u'+  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );'), (60318, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (60333, 1, u'+    assert( enc!=0 );'), (60404, 1, u'+  assert( (combined_flags & MEM_RowSet)==0 );'), (60454, 1, u'+    assert( pMem1->enc==pMem2->enc );'), (60455, 1, u'+    assert( pMem1->enc==SQLITE_UTF8 ||'), (60462, 1, u'+    assert( !pColl || pColl->xCmp );'), (60524, 1, u'+  assert( sqlite3BtreeCursorIsValid(pCur) );'), (60528, 1, u'+  assert( (pMem->flags & MEM_RowSet)==0 );'), (60534, 1, u'+  assert( zData!=0 );'), (60573, 1, u'+  assert( pVal->db==0 || sqlite3_mutex_held(pVal->db->mutex) );'), (60574, 1, u'+  assert( (enc&3)==(enc&~SQLITE_UTF16_ALIGNED) );'), (60575, 1, u'+  assert( (pVal->flags & MEM_RowSet)==0 );'), (60580, 1, u'+  assert( (MEM_Blob>>3) == MEM_Str );'), (60586, 1, u'+      assert( (pVal->flags & (MEM_Ephem|MEM_Static))!=0 );'), (60593, 1, u'+    assert( (pVal->flags&MEM_Blob)==0 );'), (60595, 1, u'+    assert( 0==(1&SQLITE_PTR_TO_INT(pVal->z)) );'), (60597, 1, u'+  assert(pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) || pVal->db==0'), (60657, 1, u'+          assert( pRec->pKeyInfo->nField+pRec->pKeyInfo->nXField==nCol );'), (60658, 1, u'+          assert( pRec->pKeyInfo->enc==ENC(db) );'), (60770, 1, u"+    assert( pExpr->u.zToken[0]=='x' || pExpr->u.zToken[0]=='X' );"), (60771, 1, u"+    assert( pExpr->u.zToken[1]=='\\'' );"), (60776, 1, u"+    assert( zVal[nVal]=='\\'' );"), (60791, 1, u'+  assert( *ppVal==0 );'), (60795, 1, u'+  assert( pCtx==0 ); sqlite3ValueFree(pVal);'), (60956, 1, u'+  assert( pVal==0 || pVal->db==db );'), (61059, 1, u'+  assert( isPrepareV2==1 || isPrepareV2==0 );'), (61064, 1, u'+  assert( p->zSql==0 );'), (61150, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (61151, 1, u'+  assert( op>0 && op<0xff );'), (61256, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (61274, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (61275, 1, u'+  assert( j<p->nLabel );'), (61329, 1, u'+    assert( p->iAddr<nOp );'), (61378, 1, u'+SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){'), (61465, 1, u'+        assert( p->nOp - i >= 3 );'), (61466, 1, u'+        assert( pOp[-1].opcode==OP_Integer );'), (61489, 1, u'+      assert( -1-pOp->p2<p->nLabel );'), (61496, 1, u'+  assert( p->bIsReader!=0 || p->btreeMask==0 );'), (61503, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (61520, 1, u'+  assert( aOp && !p->db->mallocFailed );'), (61523, 1, u'+  assert( p->btreeMask==0 );'), (61537, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (61551, 1, u'+        assert( sqlite3OpcodeProperty[pOut->opcode] & OPFLG_JUMP );'), (61581, 1, u'+  assert( p!=0 );'), (61592, 1, u'+  assert( p!=0 );'), (61602, 1, u'+  assert( p!=0 );'), (61613, 1, u'+  assert( p!=0 );'), (61615, 1, u'+    assert( p->nOp>0 );'), (61646, 1, u'+    assert( db );'), (61747, 1, u'+  assert( p!=0 );'), (61749, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (61756, 1, u'+  assert( p->nOp>0 );'), (61757, 1, u'+  assert( addr<p->nOp );'), (61762, 1, u'+  assert( pOp->p4type==P4_NOTUSED || pOp->p4type==P4_INT32 );'), (61780, 1, u'+    assert( ((VTable *)zP4)->db==p->db );'), (61797, 1, u'+  assert( v!=0 );'), (61798, 1, u'+  assert( pIdx!=0 );'), (61811, 1, u'+  assert( p->nOp>0 || p->aOp==0 );'), (61812, 1, u'+  assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );'), (61814, 1, u'+    assert( p->aOp );'), (61863, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (61870, 1, u'+  assert( (addr>=0 && addr<p->nOp) || p->db->mallocFailed );'), (61961, 1, u'+  assert( nTemp>=20 );'), (61966, 1, u'+      assert( pKeyInfo->aSortOrder!=0 );'), (61990, 1, u'+      assert( i<nTemp );'), (62026, 1, u'+        assert( pMem->flags & MEM_Blob );'), (62058, 1, u'+  assert( zP4!=0 );'), (62072, 1, u'+  assert( i>=0 && i<p->db->nDb && i<(int)sizeof(yDbMask)*8 );'), (62073, 1, u'+  assert( i<(int)sizeof(p->btreeMask)*8 );'), (62181, 1, u'+      assert( (&p[1])==pEnd || p[0].db==p[1].db );'), (62251, 1, u'+  assert( p->explain );'), (62252, 1, u'+  assert( p->magic==VDBE_MAGIC_RUN );'), (62253, 1, u'+  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY || p->rc==SQLITE_NOMEM );'), (62282, 1, u'+    assert( p->nMem>9 );'), (62330, 1, u'+      assert( pMem->z!=0 );'), (62372, 1, u'+      assert( p->db->mallocFailed );'), (62380, 1, u'+      assert( pMem->z!=0 );'), (62389, 1, u'+        assert( p->db->mallocFailed );'), (62401, 1, u'+        assert( p->db->mallocFailed );'), (62500, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(*ppFrom) );'), (62520, 1, u'+  assert( p!=0 );'), (62521, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (62525, 1, u'+  assert( p->nOp>0 );'), (62532, 1, u'+    assert( p->aMem[i].db==p->db );'), (62585, 1, u'+  assert( p!=0 );'), (62586, 1, u'+  assert( p->nOp>0 );'), (62587, 1, u'+  assert( pParse!=0 );'), (62588, 1, u'+  assert( p->magic==VDBE_MAGIC_INIT );'), (62590, 1, u'+  assert( db->mallocFailed==0 );'), (62622, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(zCsr) );'), (62762, 1, u'+  assert( p->pAuxData==0 );'), (62779, 1, u'+  if( p->apCsr ) for(i=0; i<p->nCursor; i++) assert( p->apCsr[i]==0 );'), (62781, 1, u'+    for(i=1; i<=p->nMem; i++) assert( p->aMem[i].flags==MEM_Invalid );'), (62833, 1, u'+  assert( idx<p->nResColumn );'), (62834, 1, u'+  assert( var<COLNAME_N );'), (62836, 1, u'+    assert( !zName || xDel!=SQLITE_DYNAMIC );'), (62839, 1, u'+  assert( p->aColName!=0 );'), (62842, 1, u'+  assert( rc!=0 || !zName || (pColName->flags&MEM_Term)!=0 );'), (62973, 1, u"+      assert( zMaster[sqlite3Strlen30(zMaster)-3]=='9' );"), (63002, 1, u'+        assert( zFile[0]!=0 );'), (63047, 1, u'+    assert( rc!=SQLITE_BUSY );'), (63113, 1, u'+  assert( cnt==db->nVdbeActive );'), (63114, 1, u'+  assert( nWrite==db->nVdbeWrite );'), (63115, 1, u'+  assert( nRead==db->nVdbeRead );'), (63144, 1, u'+    assert( eOp==SAVEPOINT_ROLLBACK || eOp==SAVEPOINT_RELEASE);'), (63145, 1, u'+    assert( db->nStatement>0 );'), (63146, 1, u'+    assert( p->iStatement==(db->nStatement+db->nSavepoint) );'), (63266, 1, u'+    assert( p->rc!=SQLITE_IOERR_BLOCKED );  /* This error no longer exists */'), (63395, 1, u'+    assert( db->nVdbeActive>=db->nVdbeRead );'), (63396, 1, u'+    assert( db->nVdbeRead>=db->nVdbeWrite );'), (63397, 1, u'+    assert( db->nVdbeWrite>=0 );'), (63413, 1, u'+  assert( db->nVdbeActive>0 || db->autoCommit==0 || db->nStatement==0 );'), (63458, 1, u'+    assert( v->db->init.busy==0 );'), (63555, 1, u'+    assert( (rc & p->db->errMask)==rc );'), (63606, 1, u'+  assert( p->db==0 || p->db==db );'), (63634, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (63639, 1, u'+    assert( db->pVdbe==p );'), (63669, 1, u'+    assert( p->isTable );'), (63768, 1, u'+  assert( pMem->db->mallocFailed || flags&(MEM_Str|MEM_Blob) );'), (63773, 1, u'+  assert( n>=0 );'), (63869, 1, u'+      assert( sizeof(v)==sizeof(pMem->r) );'), (63876, 1, u'+    assert( len<=(u32)nBuf );'), (63886, 1, u'+    assert( pMem->n + ((pMem->flags & MEM_Zero)?pMem->u.nZero:0)'), (63888, 1, u'+    assert( pMem->n<=nBuf );'), (63893, 1, u'+      assert( nBuf>=0 );'), (63964, 1, u'+      assert( sizeof(r1)==sizeof(t2) && memcmp(&r1, &t2, sizeof(r1))==0 );'), (63974, 1, u'+        assert( sizeof(x)==8 && sizeof(pMem->r)==8 );'), (64040, 1, u'+  assert( pKeyInfo->aSortOrder!=0 );'), (64065, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pMem) );'), (64081, 1, u'+  assert( u<=pKeyInfo->nField + 1 );'), (64132, 1, u'+  assert( pKeyInfo->nField+pKeyInfo->nXField>=pPKey2->nField || CORRUPT_DB );'), (64133, 1, u'+  assert( pKeyInfo->aSortOrder!=0 );'), (64134, 1, u'+  assert( pKeyInfo->nField>0 );'), (64135, 1, u'+  assert( idx1<=szHdr1 || CORRUPT_DB );'), (64162, 1, u'+      assert( mem1.zMalloc==0 );  /* See comment below */'), (64175, 1, u'+  assert( mem1.zMalloc==0 );'), (64185, 1, u'+  assert( rc==0 );'), (64220, 1, u'+  assert( sqlite3BtreeCursorIsValid(pCur) );'), (64222, 1, u'+  assert( rc==SQLITE_OK );     /* pCur is always valid so KeySize cannot fail */'), (64223, 1, u'+  assert( (nCellKey & SQLITE_MAX_U32)==(u64)nCellKey );'), (64295, 1, u'+  assert( sqlite3BtreeCursorIsValid(pCur) );'), (64297, 1, u'+  assert( rc==SQLITE_OK );    /* pCur is always valid so KeySize cannot fail */'), (64309, 1, u'+  assert( pUnpacked->flags & UNPACKED_PREFIX_MATCH );'), (64320, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (64366, 1, u'+  assert( iVar>0 );'), (64388, 1, u'+  assert( iVar>0 );'), (64510, 1, u'+    assert( (rc & (v->db->errMask))==rc );'), (64613, 1, u'+  assert( n>=0 );'), (64614, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64618, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64622, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64629, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64636, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64640, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64644, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64653, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64663, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64672, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64681, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64686, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64690, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64704, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64713, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (64754, 1, u'+  assert(p);'), (64804, 1, u'+    assert( db->nVdbeWrite>0 || db->autoCommit==0'), (64841, 1, u'+    assert( p->rc==SQLITE_OK );'), (64860, 1, u'+  assert( rc==SQLITE_ROW  || rc==SQLITE_DONE   || rc==SQLITE_ERROR'), (64863, 1, u'+  assert( p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE );'), (64897, 1, u'+    assert( v->expired==0 );'), (64929, 1, u'+  assert( p && p->pFunc );'), (64944, 1, u'+  assert( p && p->pFunc );'), (64990, 1, u'+  assert( p && p->pFunc && p->pFunc->xStep );'), (64991, 1, u'+  assert( sqlite3_mutex_held(p->s.db->mutex) );'), (65018, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (65040, 1, u'+  assert( sqlite3_mutex_held(pCtx->s.db->mutex) );'), (65082, 1, u'+  assert( p && p->pMem && p->pFunc && p->pFunc->xStep );'), (65276, 1, u'+  assert( db!=0 );'), (65281, 1, u'+    assert( db->mallocFailed==0 );'), (65637, 1, u'+  assert( pTo->db==pFrom->db );'), (65638, 1, u'+  assert( pTo->nVar==pFrom->nVar );'), (65766, 1, u'+    assert( n>0 && tokenType!=TK_ILLEGAL );'), (65829, 1, u'+      assert( n>0 );'), (65832, 1, u'+      assert( zRawSql[0] || nToken==0 );'), (65836, 1, u'+          assert( sqlite3Isdigit(zRawSql[1]) );'), (65842, 1, u"+        assert( zRawSql[0]==':' || zRawSql[0]=='$' || zRawSql[0]=='@' );"), (65847, 1, u'+        assert( idx>0 );'), (65851, 1, u'+      assert( idx>0 && idx<=p->nVar );'), (65890, 1, u'+        assert( pVar->flags & MEM_Blob );'), (66243, 1, u'+  assert( iCur<p->nCursor );'), (66318, 1, u'+    assert( affinity==SQLITE_AFF_INTEGER || affinity==SQLITE_AFF_REAL'), (66370, 1, u'+      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (66373, 1, u'+      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (66376, 1, u'+      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (66407, 1, u'+      assert( (f & (MEM_Static|MEM_Ephem))==0 );'), (66410, 1, u'+      assert( (f & (MEM_Dyn|MEM_Ephem))==0 );'), (66413, 1, u'+      assert( (f & (MEM_Static|MEM_Dyn))==0 );'), (66604, 1, u'+  assert( n==(db->nSavepoint + db->isTransactionSavepoint) );'), (67091, 1, u'+  assert( p->magic==VDBE_MAGIC_RUN );  /* sqlite3_step() verifies this */'), (67098, 1, u'+  assert( p->rc==SQLITE_OK || p->rc==SQLITE_BUSY );'), (67099, 1, u'+  assert( p->bIsReader || p->readOnly!=0 );'), (67102, 1, u'+  assert( p->explain==0 );'), (67109, 1, u'+    assert( 0 < db->nProgressOps );'), (67146, 1, u'+    assert( pc>=0 && pc<p->nOp );'), (67181, 1, u'+    assert( pOp->opflags==sqlite3OpcodeProperty[pOp->opcode] );'), (67183, 1, u'+      assert( pOp->p2>0 );'), (67184, 1, u'+      assert( pOp->p2<=(p->nMem-p->nCursor) );'), (67194, 1, u'+      assert( pOp->p1>0 );'), (67195, 1, u'+      assert( pOp->p1<=(p->nMem-p->nCursor) );'), (67196, 1, u'+      assert( memIsValid(&aMem[pOp->p1]) );'), (67200, 1, u'+      assert( pOp->p2>0 );'), (67201, 1, u'+      assert( pOp->p2<=(p->nMem-p->nCursor) );'), (67202, 1, u'+      assert( memIsValid(&aMem[pOp->p2]) );'), (67206, 1, u'+      assert( pOp->p3>0 );'), (67207, 1, u'+      assert( pOp->p3<=(p->nMem-p->nCursor) );'), (67208, 1, u'+      assert( memIsValid(&aMem[pOp->p3]) );'), (67212, 1, u'+      assert( pOp->p2>0 );'), (67213, 1, u'+      assert( pOp->p2<=(p->nMem-p->nCursor) );'), (67217, 1, u'+      assert( pOp->p3>0 );'), (67218, 1, u'+      assert( pOp->p3<=(p->nMem-p->nCursor) );'), (67290, 1, u'+    assert( db->nProgressOps!=0 );'), (67308, 1, u'+  assert( pOp->p1>0 && pOp->p1<=(p->nMem-p->nCursor) );'), (67310, 1, u'+  assert( (pIn1->flags & MEM_Dyn)==0 );'), (67325, 1, u'+  assert( pIn1->flags & MEM_Int );'), (67339, 1, u'+  assert( (pIn1->flags & MEM_Dyn)==0 );'), (67425, 1, u'+      assert( pOp->p5>=1 && pOp->p5<=4 );'), (67434, 1, u'+    assert( u.ab.zType!=0 || pOp->p4.z!=0 );'), (67447, 1, u'+  assert( rc==SQLITE_BUSY || rc==SQLITE_OK || rc==SQLITE_ERROR );'), (67451, 1, u'+    assert( rc==SQLITE_OK || (p->rc&0xff)==SQLITE_CONSTRAINT );'), (67452, 1, u'+    assert( rc==SQLITE_OK || db->nDeferredCons>0 || db->nDeferredImmCons>0 );'), (67475, 1, u'+  assert( pOp->p4.pI64!=0 );'), (67489, 1, u'+  assert( !sqlite3IsNaN(*pOp->p4.pReal) );'), (67502, 1, u'+  assert( pOp->p4.z!=0 );'), (67511, 1, u'+    assert( pOut->zMalloc==pOut->z );'), (67512, 1, u'+    assert( pOut->flags & MEM_Dyn );'), (67536, 1, u'+  assert( pOp->p4.z!=0 );'), (67563, 1, u'+  assert( pOp->p3<=(p->nMem-p->nCursor) );'), (67583, 1, u'+  assert( pOp->p1 <= SQLITE_MAX_LENGTH );'), (67603, 1, u'+  assert( pOp->p1>0 && pOp->p1<=p->nVar );'), (67604, 1, u'+  assert( pOp->p4.z==0 || pOp->p4.z==p->azVar[pOp->p1-1] );'), (67633, 1, u'+  assert( u.ae.n>=0 && u.ae.p1>0 && u.ae.p2>0 );'), (67634, 1, u'+  assert( u.ae.p1+u.ae.n<=u.ae.p2 || u.ae.p2+u.ae.n<=u.ae.p1 );'), (67639, 1, u'+    assert( pOut<=&aMem[(p->nMem-p->nCursor)] );'), (67640, 1, u'+    assert( pIn1<=&aMem[(p->nMem-p->nCursor)] );'), (67641, 1, u'+    assert( memIsValid(pIn1) );'), (67675, 1, u'+  assert( pOut!=pIn1 );'), (67706, 1, u'+  assert( pOut!=pIn1 );'), (67728, 1, u'+  assert( p->nResColumn==pOp->p2 );'), (67729, 1, u'+  assert( pOp->p1>0 );'), (67730, 1, u'+  assert( pOp->p1+pOp->p2<=(p->nMem-p->nCursor)+1 );'), (67748, 1, u'+    assert( db->flags&SQLITE_CountRows );'), (67749, 1, u'+    assert( p->usesStmtJournal );'), (67768, 1, u'+  assert( p->iStatement==0 || db->flags&SQLITE_CountRows );'), (67783, 1, u'+    assert( memIsValid(&u.ag.pMem[u.ag.i]) );'), (67785, 1, u'+    assert( (u.ag.pMem[u.ag.i].flags & MEM_Ephem)==0'), (67821, 1, u'+  assert( pIn1!=pOut );'), (67993, 1, u'+  assert( pOp->p4type==P4_COLLSEQ );'), (68028, 1, u'+  assert( u.aj.apVal || u.aj.n==0 );'), (68029, 1, u'+  assert( pOp->p3>0 && pOp->p3<=(p->nMem-p->nCursor) );'), (68033, 1, u'+  assert( u.aj.n==0 || (pOp->p2>0 && pOp->p2+u.aj.n<=(p->nMem-p->nCursor)+1) );'), (68034, 1, u'+  assert( pOp->p3<pOp->p2 || pOp->p3>=pOp->p2+u.aj.n );'), (68037, 1, u'+    assert( memIsValid(u.aj.pArg) );'), (68044, 1, u'+  assert( pOp->p4type==P4_FUNCDEF );'), (68061, 1, u'+    assert( pOp>aOp );'), (68062, 1, u'+    assert( pOp[-1].p4type==P4_COLLSEQ );'), (68063, 1, u'+    assert( pOp[-1].opcode==OP_CollSeq );'), (68091, 1, u'+  assert( pOut->flags==MEM_Null );'), (68166, 1, u'+    assert( u.ak.op==OP_ShiftRight || u.ak.op==OP_ShiftLeft );'), (68170, 1, u'+      assert( OP_ShiftRight==OP_ShiftLeft+1 );'), (68268, 1, u'+  assert( MEM_Str==(MEM_Blob>>3) );'), (68272, 1, u'+  assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (68292, 1, u'+    assert( pIn1->flags & MEM_Str || db->mallocFailed );'), (68461, 1, u'+      assert( pOp->opcode==OP_Eq || pOp->opcode==OP_Ne );'), (68462, 1, u'+      assert( (u.al.flags1 & MEM_Cleared)==0 );'), (68494, 1, u'+    assert( pOp->p4type==P4_COLLSEQ || pOp->p4.pColl==0 );'), (68534, 1, u'+  assert( pOp->p4type==P4_INTARRAY );'), (68535, 1, u'+  assert( pOp->p4.ai );'), (68574, 1, u'+  assert( u.am.n>0 );'), (68575, 1, u'+  assert( u.am.pKeyInfo!=0 );'), (68582, 1, u'+    assert( u.am.p1>0 && u.am.p1+mx<=(p->nMem-p->nCursor)+1 );'), (68583, 1, u'+    assert( u.am.p2>0 && u.am.p2+mx<=(p->nMem-p->nCursor)+1 );'), (68585, 1, u'+    assert( u.am.p1>0 && u.am.p1+u.am.n<=(p->nMem-p->nCursor)+1 );'), (68586, 1, u'+    assert( u.am.p2>0 && u.am.p2+u.am.n<=(p->nMem-p->nCursor)+1 );'), (68591, 1, u'+    assert( memIsValid(&aMem[u.am.p1+u.am.idx]) );'), (68592, 1, u'+    assert( memIsValid(&aMem[u.am.p2+u.am.idx]) );'), (68595, 1, u'+    assert( u.am.i<u.am.pKeyInfo->nField );'), (68723, 1, u'+  assert( pOp->p1<p->nOnceFlag );'), (68840, 1, u'+  assert( pOp->p3>0 && pOp->p3<=(p->nMem-p->nCursor) );'), (68843, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (68845, 1, u'+  assert( u.ap.pC!=0 );'), (68846, 1, u'+  assert( u.ap.p2<u.ap.pC->nField );'), (68850, 1, u'+  assert( u.ap.pC->pVtabCursor==0 ); /* OP_Column never called on virtual table */'), (68853, 1, u'+  assert( u.ap.pCrsr!=0 || u.ap.pC->pseudoTableReg>0 ); /* u.ap.pCrsr NULL on PseudoTables */'), (68854, 1, u'+  assert( u.ap.pCrsr!=0 || u.ap.pC->nullRow );          /* u.ap.pC->nullRow on PseudoTables */'), (68862, 1, u'+        assert( u.ap.pC->pseudoTableReg>0 );'), (68869, 1, u'+        assert( u.ap.pReg->flags & MEM_Blob );'), (68870, 1, u'+        assert( memIsValid(u.ap.pReg) );'), (68878, 1, u'+      assert( u.ap.pCrsr );'), (68880, 1, u'+        assert( sqlite3BtreeCursorIsValid(u.ap.pCrsr) );'), (68882, 1, u'+        assert( rc==SQLITE_OK ); /* True because of CursorMoveto() call above */'), (68886, 1, u'+        assert( (u.ap.payloadSize64 & SQLITE_MAX_U32)==(u64)u.ap.payloadSize64 );'), (68890, 1, u'+        assert( sqlite3BtreeCursorIsValid(u.ap.pCrsr) );'), (68892, 1, u'+        assert( rc==SQLITE_OK );   /* DataSize() cannot fail */'), (68895, 1, u'+      assert( u.ap.avail<=65536 );  /* Maximum page size is 64KiB */'), (68959, 1, u'+      assert( u.ap.i<=u.ap.p2 && u.ap.zHdr<u.ap.zEndHdr );'), (69017, 1, u'+  assert( u.ap.p2<u.ap.pC->nHdrParsed );'), (69018, 1, u'+  assert( rc==SQLITE_OK );'), (69055, 1, u'+      assert( u.ap.sMem.z==u.ap.sMem.zMalloc );'), (69056, 1, u'+      assert( !(u.ap.pDest->flags & MEM_Dyn) );'), (69057, 1, u'+      assert( !(u.ap.pDest->flags & (MEM_Blob|MEM_Str)) || u.ap.pDest->z==u.ap.sMem.z );'), (69090, 1, u'+  assert( u.aq.zAffinity!=0 );'), (69091, 1, u'+  assert( u.aq.zAffinity[pOp->p2]==0 );'), (69094, 1, u'+    assert( pIn1 <= &p->aMem[(p->nMem-p->nCursor)] );'), (69095, 1, u'+    assert( memIsValid(pIn1) );'), (69158, 1, u'+  assert( u.ar.nField>0 && pOp->p2>0 && pOp->p2+u.ar.nField<=(p->nMem-p->nCursor)+1 );'), (69165, 1, u'+  assert( pOp->p3<pOp->p1 || pOp->p3>=pOp->p1+pOp->p2 );'), (69173, 1, u'+    assert( memIsValid(u.ar.pRec) );'), (69222, 1, u'+  assert( u.ar.i==u.ar.nByte );'), (69224, 1, u'+  assert( pOp->p3>0 && pOp->p3<=(p->nMem-p->nCursor) );'), (69252, 1, u'+  assert( u.as.pCrsr );'), (69283, 1, u'+  assert( db->pSavepoint==0 || db->autoCommit==0 );'), (69284, 1, u'+  assert( u.at.p1==SAVEPOINT_BEGIN||u.at.p1==SAVEPOINT_RELEASE||u.at.p1==SAVEPOINT_ROLLBACK );'), (69285, 1, u'+  assert( db->pSavepoint || db->isTransactionSavepoint==0 );'), (69286, 1, u'+  assert( checkSavepointCount(db) );'), (69287, 1, u'+  assert( p->bIsReader );'), (69305, 1, u'+      assert( db->autoCommit==0 || db->nVTrans==0 );'), (69410, 1, u'+        assert( u.at.pSavepoint==db->pSavepoint );'), (69450, 1, u'+  assert( u.au.desiredAutoCommit==1 || u.au.desiredAutoCommit==0 );'), (69451, 1, u'+  assert( u.au.desiredAutoCommit==1 || u.au.iRollback==0 );'), (69452, 1, u'+  assert( db->nVdbeActive>0 );  /* At least this one VM is active */'), (69453, 1, u'+  assert( p->bIsReader );'), (69475, 1, u'+      assert( u.au.desiredAutoCommit==1 );'), (69489, 1, u'+    assert( db->nStatement==0 );'), (69544, 1, u'+  assert( p->bIsReader );'), (69545, 1, u'+  assert( p->readOnly==0 || pOp->p2==0 );'), (69546, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (69547, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (69568, 1, u'+      assert( sqlite3BtreeIsInTrans(u.av.pBt) );'), (69570, 1, u'+        assert( db->nStatement>=0 && db->nSavepoint>=0 );'), (69609, 1, u'+  assert( p->bIsReader );'), (69612, 1, u'+  assert( pOp->p3<SQLITE_N_BTREE_META );'), (69613, 1, u'+  assert( u.aw.iDb>=0 && u.aw.iDb<db->nDb );'), (69614, 1, u'+  assert( db->aDb[u.aw.iDb].pBt!=0 );'), (69615, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<u.aw.iDb))!=0 );'), (69636, 1, u'+  assert( pOp->p2<SQLITE_N_BTREE_META );'), (69637, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (69638, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (69639, 1, u'+  assert( p->readOnly==0 );'), (69641, 1, u'+  assert( u.ax.pDb->pBt!=0 );'), (69642, 1, u'+  assert( sqlite3SchemaMutexHeld(db, pOp->p1, 0) );'), (69689, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (69690, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (69691, 1, u'+  assert( sqlite3SchemaMutexHeld(db, pOp->p1, 0) );'), (69692, 1, u'+  assert( p->bIsReader );'), (69790, 1, u'+  assert( (pOp->p5&(OPFLAG_P2ISREG|OPFLAG_BULKCSR))==pOp->p5 );'), (69791, 1, u'+  assert( pOp->opcode==OP_OpenWrite || pOp->p5==0 );'), (69792, 1, u'+  assert( p->bIsReader );'), (69793, 1, u'+  assert( pOp->opcode==OP_OpenRead || p->readOnly==0 );'), (69804, 1, u'+  assert( u.az.iDb>=0 && u.az.iDb<db->nDb );'), (69805, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<u.az.iDb))!=0 );'), (69808, 1, u'+  assert( u.az.pX!=0 );'), (69811, 1, u'+    assert( sqlite3SchemaMutexHeld(db, u.az.iDb, 0) );'), (69819, 1, u'+    assert( u.az.p2>0 );'), (69820, 1, u'+    assert( u.az.p2<=(p->nMem-p->nCursor) );'), (69822, 1, u'+    assert( memIsValid(pIn2) );'), (69823, 1, u'+    assert( (pIn2->flags & MEM_Int)!=0 );'), (69837, 1, u'+    assert( u.az.pKeyInfo->enc==ENC(db) );'), (69838, 1, u'+    assert( u.az.pKeyInfo->db==db );'), (69843, 1, u'+  assert( pOp->p1>=0 );'), (69844, 1, u'+  assert( u.az.nField>=0 );'), (69852, 1, u'+  assert( OPFLAG_BULKCSR==BTREE_BULKLOAD );'), (69857, 1, u'+  assert( rc==SQLITE_OK );'), (69906, 1, u'+  assert( pOp->p1>=0 );'), (69907, 1, u'+  assert( pOp->p2>=0 );'), (69924, 1, u'+      assert( pOp->p4type==P4_KEYINFO );'), (69927, 1, u'+        assert( pgno==MASTER_ROOT+1 );'), (69928, 1, u'+        assert( u.ba.pKeyInfo->db==db );'), (69929, 1, u'+        assert( u.ba.pKeyInfo->enc==ENC(db) );'), (69954, 1, u'+  assert( pOp->p1>=0 );'), (69955, 1, u'+  assert( pOp->p2>=0 );'), (69959, 1, u'+  assert( u.bb.pCx->pKeyInfo->db==db );'), (69960, 1, u'+  assert( u.bb.pCx->pKeyInfo->enc==ENC(db) );'), (69987, 1, u'+  assert( pOp->p1>=0 );'), (69988, 1, u'+  assert( pOp->p3>=0 );'), (70004, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70079, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70080, 1, u'+  assert( pOp->p2!=0 );'), (70082, 1, u'+  assert( u.bd.pC!=0 );'), (70083, 1, u'+  assert( u.bd.pC->pseudoTableReg==0 );'), (70084, 1, u'+  assert( OP_SeekLe == OP_SeekLt+1 );'), (70085, 1, u'+  assert( OP_SeekGe == OP_SeekLt+2 );'), (70086, 1, u'+  assert( OP_SeekGt == OP_SeekLt+3 );'), (70087, 1, u'+  assert( u.bd.pC->isOrdered );'), (70088, 1, u'+  assert( u.bd.pC->pCursor!=0 );'), (70118, 1, u'+        assert( OP_SeekGe==(OP_SeekGt-1) );'), (70119, 1, u'+        assert( OP_SeekLt==(OP_SeekLe-1) );'), (70120, 1, u'+        assert( (OP_SeekLe & 0x0001)==(OP_SeekGt & 0x0001) );'), (70127, 1, u'+        assert( OP_SeekLe==(OP_SeekLt+1) );'), (70128, 1, u'+        assert( OP_SeekGt==(OP_SeekGe+1) );'), (70129, 1, u'+        assert( (OP_SeekLt & 0x0001)==(OP_SeekGe & 0x0001) );'), (70143, 1, u'+    assert( pOp->p4type==P4_INT32 );'), (70144, 1, u'+    assert( u.bd.nField>0 );'), (70156, 1, u'+    assert( u.bd.oc!=OP_SeekGt || u.bd.r.flags==UNPACKED_INCRKEY );'), (70157, 1, u'+    assert( u.bd.oc!=OP_SeekLe || u.bd.r.flags==UNPACKED_INCRKEY );'), (70158, 1, u'+    assert( u.bd.oc!=OP_SeekGe || u.bd.r.flags==0 );'), (70159, 1, u'+    assert( u.bd.oc!=OP_SeekLt || u.bd.r.flags==0 );'), (70163, 1, u'+    { int i; for(i=0; i<u.bd.r.nField; i++) assert( memIsValid(&u.bd.r.aMem[i]) ); }'), (70177, 1, u'+  if( u.bd.oc>=OP_SeekGe ){  assert( u.bd.oc==OP_SeekGe || u.bd.oc==OP_SeekGt );'), (70186, 1, u'+    assert( u.bd.oc==OP_SeekLt || u.bd.oc==OP_SeekLe );'), (70198, 1, u'+  assert( pOp->p2>0 );'), (70220, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70222, 1, u'+  assert( u.be.pC!=0 );'), (70223, 1, u'+  assert( u.be.pC->pCursor!=0 );'), (70224, 1, u'+  assert( u.be.pC->isTable );'), (70300, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70301, 1, u'+  assert( pOp->p4type==P4_INT32 );'), (70303, 1, u'+  assert( u.bf.pC!=0 );'), (70305, 1, u'+  assert( u.bf.pC->pCursor!=0 );'), (70306, 1, u'+  assert( u.bf.pC->isTable==0 );'), (70315, 1, u'+        assert( memIsValid(&u.bf.r.aMem[i]) );'), (70327, 1, u'+    assert( pIn3->flags & MEM_Blob );'), (70328, 1, u'+    assert( (pIn3->flags & MEM_Zero)==0 );  /* zeroblobs already expanded */'), (70386, 1, u'+  assert( pIn3->flags & MEM_Int );'), (70387, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70389, 1, u'+  assert( u.bg.pC!=0 );'), (70390, 1, u'+  assert( u.bg.pC->isTable );'), (70391, 1, u'+  assert( u.bg.pC->pseudoTableReg==0 );'), (70393, 1, u'+  assert( u.bg.pCrsr!=0 );'), (70404, 1, u'+    assert( u.bg.pC->rowidIsValid==0 );'), (70419, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70420, 1, u'+  assert( p->apCsr[pOp->p1]!=0 );'), (70453, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70455, 1, u'+  assert( u.bh.pC!=0 );'), (70472, 1, u'+    assert( u.bh.pC->isTable );'), (70494, 1, u'+          assert( sqlite3BtreeCursorIsValid(u.bh.pC->pCursor) );'), (70496, 1, u'+          assert( rc==SQLITE_OK );   /* Cannot fail following BtreeLast() */'), (70508, 1, u'+        assert( pOp->p3>0 );'), (70512, 1, u'+          assert( pOp->p3<=u.bh.pFrame->nMem );'), (70516, 1, u'+          assert( pOp->p3<=(p->nMem-p->nCursor) );'), (70520, 1, u'+        assert( memIsValid(u.bh.pMem) );'), (70524, 1, u'+        assert( (u.bh.pMem->flags & MEM_Int)!=0 );  /* mem(P3) holds an integer */'), (70568, 1, u'+      assert( u.bh.v>0 );  /* EV: R-40812-03570 */'), (70639, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70640, 1, u'+  assert( memIsValid(u.bi.pData) );'), (70642, 1, u'+  assert( u.bi.pC!=0 );'), (70643, 1, u'+  assert( u.bi.pC->pCursor!=0 );'), (70644, 1, u'+  assert( u.bi.pC->pseudoTableReg==0 );'), (70645, 1, u'+  assert( u.bi.pC->isTable );'), (70650, 1, u'+    assert( u.bi.pKey->flags & MEM_Int );'), (70651, 1, u'+    assert( memIsValid(u.bi.pKey) );'), (70655, 1, u'+    assert( pOp->opcode==OP_InsertInt );'), (70665, 1, u'+    assert( u.bi.pData->flags & (MEM_Blob|MEM_Str) );'), (70687, 1, u'+    assert( u.bi.pC->isTable );'), (70689, 1, u'+    assert( u.bi.pC->iDb>=0 );'), (70720, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70722, 1, u'+  assert( u.bj.pC!=0 );'), (70723, 1, u'+  assert( u.bj.pC->pCursor!=0 );  /* Only valid for real tables, no pseudotables */'), (70733, 1, u'+  assert( u.bj.pC->deferredMoveto==0 );'), (70745, 1, u'+    assert( u.bj.pC->iDb>=0 );'), (70786, 1, u'+  assert( isSorter(u.bk.pC) );'), (70787, 1, u'+  assert( pOp->p4type==P4_INT32 );'), (70809, 1, u'+  assert( isSorter(u.bl.pC) );'), (70849, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70851, 1, u'+  assert( isSorter(u.bm.pC)==0 );'), (70852, 1, u'+  assert( u.bm.pC->isTable || pOp->opcode!=OP_RowData );'), (70853, 1, u'+  assert( u.bm.pC->isTable==0 || pOp->opcode==OP_RowData );'), (70854, 1, u'+  assert( u.bm.pC!=0 );'), (70855, 1, u'+  assert( u.bm.pC->nullRow==0 );'), (70856, 1, u'+  assert( u.bm.pC->pseudoTableReg==0 );'), (70857, 1, u'+  assert( u.bm.pC->pCursor!=0 );'), (70859, 1, u'+  assert( sqlite3BtreeCursorIsValid(u.bm.pCrsr) );'), (70866, 1, u'+  assert( u.bm.pC->deferredMoveto==0 );'), (70871, 1, u'+    assert( !u.bm.pC->isTable );'), (70873, 1, u'+    assert( rc==SQLITE_OK );    /* True because of CursorMoveto() call above */'), (70880, 1, u'+    assert( rc==SQLITE_OK );    /* DataSize() cannot fail */'), (70919, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70921, 1, u'+  assert( u.bn.pC!=0 );'), (70922, 1, u'+  assert( u.bn.pC->pseudoTableReg==0 || u.bn.pC->nullRow );'), (70932, 1, u'+    assert( u.bn.pModule->xRowid );'), (70937, 1, u'+    assert( u.bn.pC->pCursor!=0 );'), (70944, 1, u'+      assert( rc==SQLITE_OK );  /* Always so because of CursorMoveto() above */'), (70962, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70964, 1, u'+  assert( u.bo.pC!=0 );'), (70968, 1, u'+  assert( u.bo.pC->pCursor || u.bo.pC->pVtabCursor );'), (70990, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (70992, 1, u'+  assert( u.bp.pC!=0 );'), (70995, 1, u'+  assert( u.bp.pCrsr!=0 );'), (71044, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (71046, 1, u'+  assert( u.bq.pC!=0 );'), (71047, 1, u'+  assert( isSorter(u.bq.pC)==(pOp->opcode==OP_SorterSort) );'), (71053, 1, u'+    assert( u.bq.pCrsr );'), (71060, 1, u'+  assert( pOp->p2>0 && pOp->p2<p->nOp );'), (71118, 1, u'+  assert( isSorter(u.br.pC) );'), (71127, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (71128, 1, u'+  assert( pOp->p5<ArraySize(p->aCounter) );'), (71130, 1, u'+  assert( u.br.pC!=0 );'), (71131, 1, u'+  assert( u.br.pC->deferredMoveto==0 );'), (71132, 1, u'+  assert( u.br.pC->pCursor );'), (71133, 1, u'+  assert( pOp->opcode!=OP_Next || pOp->p4.xAdvance==sqlite3BtreeNext );'), (71134, 1, u'+  assert( pOp->opcode!=OP_Prev || pOp->p4.xAdvance==sqlite3BtreePrevious );'), (71135, 1, u'+  assert( pOp->opcode!=OP_NextIfOpen || pOp->p4.xAdvance==sqlite3BtreeNext );'), (71136, 1, u'+  assert( pOp->opcode!=OP_PrevIfOpen || pOp->p4.xAdvance==sqlite3BtreePrevious);'), (71176, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (71178, 1, u'+  assert( u.bs.pC!=0 );'), (71179, 1, u'+  assert( isSorter(u.bs.pC)==(pOp->opcode==OP_SorterInsert) );'), (71181, 1, u'+  assert( pIn2->flags & MEM_Blob );'), (71184, 1, u'+  assert( u.bs.pCrsr!=0 );'), (71185, 1, u'+  assert( u.bs.pC->isTable==0 );'), (71196, 1, u'+      assert( u.bs.pC->deferredMoveto==0 );'), (71218, 1, u'+  assert( pOp->p3>0 );'), (71219, 1, u'+  assert( pOp->p2>0 && pOp->p2+pOp->p3<=(p->nMem-p->nCursor)+1 );'), (71220, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (71222, 1, u'+  assert( u.bt.pC!=0 );'), (71224, 1, u'+  assert( u.bt.pCrsr!=0 );'), (71225, 1, u'+  assert( pOp->p5==0 );'), (71231, 1, u'+  { int i; for(i=0; i<u.bt.r.nField; i++) assert( memIsValid(&u.bt.r.aMem[i]) ); }'), (71237, 1, u'+  assert( u.bt.pC->deferredMoveto==0 );'), (71258, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (71260, 1, u'+  assert( u.bu.pC!=0 );'), (71262, 1, u'+  assert( u.bu.pCrsr!=0 );'), (71266, 1, u'+  assert( u.bu.pC->deferredMoveto==0 );'), (71267, 1, u'+  assert( u.bu.pC->isTable==0 );'), (71315, 1, u'+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );'), (71317, 1, u'+  assert( u.bv.pC!=0 );'), (71318, 1, u'+  assert( u.bv.pC->isOrdered );'), (71319, 1, u'+  assert( u.bv.pC->pCursor!=0);'), (71320, 1, u'+  assert( u.bv.pC->deferredMoveto==0 );'), (71321, 1, u'+  assert( pOp->p5==0 || pOp->p5==1 );'), (71322, 1, u'+  assert( pOp->p4type==P4_INT32 );'), (71332, 1, u'+  { int i; for(i=0; i<u.bv.r.nField; i++) assert( memIsValid(&u.bv.r.aMem[i]) ); }'), (71338, 1, u'+    assert( pOp->opcode==OP_IdxGE );'), (71375, 1, u'+  assert( p->readOnly==0 );'), (71394, 1, u'+    assert( u.bw.iCnt==1 );'), (71395, 1, u'+    assert( (p->btreeMask & (((yDbMask)1)<<u.bw.iDb))!=0 );'), (71403, 1, u'+      assert( resetSchemaOnFault==0 || resetSchemaOnFault==u.bw.iDb+1 );'), (71435, 1, u'+  assert( p->readOnly==0 );'), (71436, 1, u'+  assert( pOp->p1!=1 );'), (71437, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p2))!=0 );'), (71444, 1, u'+      assert( memIsValid(&aMem[pOp->p3]) );'), (71485, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (71486, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (71487, 1, u'+  assert( p->readOnly==0 );'), (71489, 1, u'+  assert( u.by.pDb->pBt!=0 );'), (71523, 1, u'+    assert( u.bz.iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[u.bz.iDb].pBt) );'), (71528, 1, u'+  assert( u.bz.iDb>=0 && u.bz.iDb<db->nDb );'), (71529, 1, u'+  assert( DbHasProperty(db, u.bz.iDb, DB_SchemaLoaded) );'), (71541, 1, u'+      assert( db->init.busy==0 );'), (71544, 1, u'+      assert( !db->mallocFailed );'), (71566, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (71640, 1, u'+  assert( p->bIsReader );'), (71642, 1, u'+  assert( u.ca.nRoot>0 );'), (71645, 1, u'+  assert( pOp->p3>0 && pOp->p3<=(p->nMem-p->nCursor) );'), (71647, 1, u'+  assert( (u.ca.pnErr->flags & MEM_Int)!=0 );'), (71648, 1, u'+  assert( (u.ca.pnErr->flags & (MEM_Str|MEM_Blob))==0 );'), (71654, 1, u'+  assert( pOp->p5<db->nDb );'), (71655, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p5))!=0 );'), (71662, 1, u'+    assert( u.ca.z==0 );'), (71685, 1, u'+  assert( (pIn2->flags & MEM_Int)!=0 );'), (71753, 1, u'+  assert( pIn3->flags&MEM_Int );'), (71763, 1, u'+  assert( pOp->p4type==P4_INT32 );'), (71764, 1, u'+  assert( u.cc.iSet==-1 || u.cc.iSet>=0 );'), (71810, 1, u'+  assert( u.cd.pProgram->nOp>0 );'), (71879, 1, u'+    assert( u.cd.pProgram->nMem+u.cd.pProgram->nCsr==u.cd.pFrame->nChildMem );'), (71880, 1, u'+    assert( u.cd.pProgram->nCsr==u.cd.pFrame->nChildCsr );'), (71881, 1, u'+    assert( pc==u.cd.pFrame->pc );'), (71994, 1, u'+  assert( memIsValid(u.cf.pIn1) );'), (72015, 1, u'+  assert( pIn1->flags&MEM_Int );'), (72032, 1, u'+  assert( pIn1->flags&MEM_Int );'), (72050, 1, u'+  assert( pIn1->flags&MEM_Int );'), (72080, 1, u'+  assert( u.cg.n>=0 );'), (72083, 1, u'+  assert( u.cg.apVal || u.cg.n==0 );'), (72085, 1, u'+    assert( memIsValid(u.cg.pRec) );'), (72091, 1, u'+  assert( pOp->p3>0 && pOp->p3<=(p->nMem-p->nCursor) );'), (72103, 1, u'+    assert( pOp>p->aOp );'), (72104, 1, u'+    assert( pOp[-1].p4type==P4_COLLSEQ );'), (72105, 1, u'+    assert( pOp[-1].opcode==OP_CollSeq );'), (72114, 1, u'+    assert( pOp[-1].opcode==OP_CollSeq );'), (72141, 1, u'+  assert( pOp->p1>0 && pOp->p1<=(p->nMem-p->nCursor) );'), (72143, 1, u'+  assert( (u.ch.pMem->flags & ~(MEM_Null|MEM_Agg))==0 );'), (72175, 1, u'+  assert( p->readOnly==0 );'), (72178, 1, u'+  assert( pOp->p2==SQLITE_CHECKPOINT_PASSIVE'), (72218, 1, u'+  assert( u.cj.eNew==PAGER_JOURNALMODE_DELETE'), (72226, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (72227, 1, u'+  assert( p->readOnly==0 );'), (72279, 1, u'+      assert( sqlite3BtreeIsInTrans(u.cj.pBt)==0 );'), (72310, 1, u'+  assert( p->readOnly==0 );'), (72328, 1, u'+  assert( pOp->p1>=0 && pOp->p1<db->nDb );'), (72329, 1, u'+  assert( (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 );'), (72330, 1, u'+  assert( p->readOnly==0 );'), (72379, 1, u'+    assert( p1>=0 && p1<db->nDb );'), (72380, 1, u'+    assert( (p->btreeMask & (((yDbMask)1)<<p1))!=0 );'), (72381, 1, u'+    assert( isWriteLock==0 || isWriteLock==1 );'), (72454, 1, u'+  assert( p->bIsReader );'), (72459, 1, u'+  assert(u.cm.pVtab && u.cm.pModule);'), (72517, 1, u'+  assert( memIsValid(u.cn.pQuery) );'), (72519, 1, u'+  assert( u.cn.pCur->pVtabCursor );'), (72525, 1, u'+  assert( (u.cn.pQuery->flags&MEM_Int)!=0 && u.cn.pArgc->flags==MEM_Int );'), (72573, 1, u'+  assert( pCur->pVtabCursor );'), (72574, 1, u'+  assert( pOp->p3>0 && pOp->p3<=(p->nMem-p->nCursor) );'), (72583, 1, u'+  assert( u.co.pModule->xColumn );'), (72633, 1, u'+  assert( u.cp.pCur->pVtabCursor );'), (72639, 1, u'+  assert( u.cp.pModule->xNext );'), (72678, 1, u'+  assert( u.cq.pVtab->pModule->xRename );'), (72679, 1, u'+  assert( memIsValid(u.cq.pName) );'), (72680, 1, u'+  assert( p->readOnly==0 );'), (72682, 1, u'+  assert( u.cq.pName->flags & MEM_Str );'), (72732, 1, u'+  assert( pOp->p2==1        || pOp->p5==OE_Fail   || pOp->p5==OE_Rollback'), (72735, 1, u'+  assert( p->readOnly==0 );'), (72739, 1, u'+  assert( pOp->p4type==P4_VTAB );'), (72745, 1, u'+      assert( memIsValid(u.cr.pX) );'), (72756, 1, u'+      assert( u.cr.nArg>1 && u.cr.apArg[0] && (u.cr.apArg[0]->flags&MEM_Null) );'), (72864, 1, u'+  assert( pOp->opcode==OP_Noop || pOp->opcode==OP_Explain );'), (72894, 1, u'+    assert( pc>=-1 && pc<p->nOp );'), (72914, 1, u'+  assert( rc );'), (72956, 1, u'+  assert( p->zErrMsg==0 );'), (72967, 1, u'+  assert( db->u1.isInterrupted );'), (73035, 1, u'+  assert( v->aVar[0].flags&MEM_Int );'), (73072, 1, u'+  assert( rc!=SQLITE_OK || zErr==0 );'), (73073, 1, u'+  assert( rc!=SQLITE_ROW && rc!=SQLITE_DONE );'), (73232, 1, u'+    assert( pBlob->pStmt || db->mallocFailed );'), (73366, 1, u'+    assert( db == v->db );'), (73439, 1, u'+    assert( rc!=SQLITE_SCHEMA );'), (73443, 1, u'+  assert( rc==SQLITE_OK || p->pStmt==0 );'), (73635, 1, u'+  assert( p->aBuffer );'), (73651, 1, u'+    assert( nRead>0 );'), (73655, 1, u'+    assert( rc!=SQLITE_IOERR_SHORT_READ );'), (73698, 1, u'+      assert( aNext!=p->aAlloc );'), (73778, 1, u'+  assert( pSorter->iWriteOff>iStart );'), (73779, 1, u'+  assert( pIter->aAlloc==0 );'), (73780, 1, u'+  assert( pIter->aBuffer==0 );'), (73802, 1, u'+      assert( rc!=SQLITE_IOERR_SHORT_READ );'), (73854, 1, u'+    assert( r2->nField>0 );'), (73880, 1, u'+  assert( iOut<pSorter->nTree && iOut>0 );'), (73899, 1, u'+    assert( pCsr->pSorter->pUnpacked!=0 );  /* allocated in vdbeSorterMerge() */'), (73923, 1, u'+  assert( pCsr->pKeyInfo && pCsr->pBt==0 );'), (73931, 1, u'+  assert( pSorter->pUnpacked==(UnpackedRecord *)d );'), (74110, 1, u'+    assert( p->iBufEnd<p->nBuffer );'), (74172, 1, u'+    assert( pSorter->pRecord==0 );'), (74181, 1, u'+    assert( rc!=SQLITE_OK || pSorter->pTemp1 );'), (74182, 1, u'+    assert( pSorter->iWriteOff==0 );'), (74183, 1, u'+    assert( pSorter->nPMA==0 );'), (74218, 1, u'+  assert( pSorter );'), (74252, 1, u'+    assert( rc!=SQLITE_OK || (nExpect==pSorter->iWriteOff) );'), (74276, 1, u'+    assert( rc!=SQLITE_OK || pSorter->iReadOff<=pSorter->iWriteOff );'), (74302, 1, u'+  assert( pSorter );'), (74309, 1, u'+    assert( pSorter->aTree==0 );'), (74320, 1, u'+  assert( nIter>0 );'), (74351, 1, u'+      assert( rc!=SQLITE_OK || pSorter->aIter[ pSorter->aTree[1] ].pFile );'), (74358, 1, u'+        assert( iWrite2==0 );'), (74368, 1, u'+          assert( pIter->pFile );'), (74549, 1, u'+        assert(p->iSize<=p->nBuf);'), (74827, 1, u'+  assert( iOfst+iAmt<=p->endpoint.iOffset );'), (74872, 1, u'+  assert( iOfst==p->endpoint.iOffset );'), (74888, 1, u'+        assert( p->pFirst );'), (74891, 1, u'+        assert( !p->pFirst );'), (74912, 1, u'+  assert(size==0);'), (74985, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(p) );'), (75259, 1, u'+  assert( iCol>=0 && iCol<pEList->nExpr );'), (75261, 1, u'+  assert( pOrig!=0 );'), (75262, 1, u'+  assert( pOrig->flags & EP_Resolved );'), (75291, 1, u'+    assert( (pExpr->flags & (EP_Reduced|EP_TokenOnly))==0 );'), (75393, 1, u'+  assert( pNC );     /* the name context cannot be NULL. */'), (75394, 1, u'+  assert( zCol );    /* The Z in X.Y.Z cannot be NULL */'), (75395, 1, u'+  assert( !ExprHasProperty(pExpr, EP_TokenOnly|EP_Reduced) );'), (75416, 1, u'+        assert( db->aDb[i].zName );'), (75433, 1, u'+        assert( pTab!=0 && pTab->zName!=0 );'), (75434, 1, u'+        assert( pTab->nCol>0 );'), (75454, 1, u'+          assert( zTabName!=0 );'), (75493, 1, u'+      assert( op==TK_DELETE || op==TK_UPDATE || op==TK_INSERT );'), (75543, 1, u'+    assert( pTab!=0 || cntTab==0 );'), (75576, 1, u'+          assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (75577, 1, u'+          assert( pExpr->x.pList==0 );'), (75578, 1, u'+          assert( pExpr->x.pSelect==0 );'), (75587, 1, u'+          assert( zTab==0 && zDb==0 );'), (75648, 1, u'+    assert( pMatch->iCursor==pExpr->iTable );'), (75661, 1, u'+    assert( pNC!=0 );'), (75668, 1, u'+      assert( pTopNC!=0 );'), (75743, 1, u'+  assert( r>=0.0 );'), (75764, 1, u'+  assert( pNC!=0 );'), (75766, 1, u'+  assert( pParse==pWalker->pParse );'), (75775, 1, u'+      assert( pSrcList->a[i].iCursor>=0 && pSrcList->a[i].iCursor<pParse->nTab);'), (75789, 1, u'+      assert( pSrcList && pSrcList->nSrc==1 );'), (75822, 1, u'+        assert( pRight->op==TK_DOT );'), (75844, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (75932, 1, u'+        assert( pNC->nRef>=nRef );'), (76011, 1, u'+  assert( sqlite3ExprIsInteger(pE, &i)==0 );'), (76103, 1, u'+    assert( pEList!=0 );'), (76119, 1, u'+            assert(pDup);'), (76135, 1, u'+          assert( pItem->pExpr->op==TK_COLLATE );'), (76136, 1, u'+          assert( pItem->pExpr->pLeft==pE );'), (76187, 1, u'+  assert( pEList!=0 );  /* sqlite3SelectNew() guarantees this */'), (76289, 1, u'+  assert( p!=0 );'), (76314, 1, u'+    assert( (p->selFlags & SF_Expanded)!=0 );'), (76315, 1, u'+    assert( (p->selFlags & SF_Resolved)==0 );'), (76350, 1, u'+        assert( pItem->isCorrelated==0 && nRef<=0 );'), (76364, 1, u'+    assert( pEList!=0 );'), (76375, 1, u'+    assert( (p->selFlags & SF_Aggregate)==0 );'), (76561, 1, u'+  assert( p!=0 );'), (76592, 1, u'+  assert( type==NC_IsCheck || type==NC_PartIdx );'), (76650, 1, u'+    assert( pExpr->flags&EP_xIsSelect );'), (76655, 1, u'+    assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (76666, 1, u'+    assert( pExpr->pTab && j<pExpr->pTab->nCol );'), (76693, 1, u'+  assert( zC!=0 );'), (76706, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (76707, 1, u'+      assert( pExpr->x.pList->nExpr>0 );'), (76708, 1, u'+      assert( pExpr->op==TK_FUNCTION );'), (76711, 1, u'+      assert( pExpr->op==TK_COLLATE || pExpr->op==TK_AS );'), (76793, 1, u'+    assert( aff1==0 || aff2==0 );'), (76804, 1, u'+  assert( pExpr->op==TK_EQ || pExpr->op==TK_IN || pExpr->op==TK_LT ||'), (76807, 1, u'+  assert( pExpr->pLeft );'), (76865, 1, u'+  assert( pLeft );'), (77034, 1, u'+      assert( iValue>=0 );'), (77048, 1, u'+        assert( pToken->z!=0 || pToken->n==0 );'), (77093, 1, u'+    assert( db->mallocFailed );'), (77186, 1, u'+  assert( pToken );'), (77193, 1, u'+  assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (77219, 1, u'+  assert( !ExprHasProperty(pExpr, EP_IntValue|EP_Reduced|EP_TokenOnly) );'), (77221, 1, u'+  assert( z!=0 );'), (77222, 1, u'+  assert( z[0]!=0 );'), (77225, 1, u"+    assert( z[0]=='?' );"), (77288, 1, u'+  assert( !ExprHasProperty(p, EP_IntValue) || p->u.iValue>=0 );'), (77291, 1, u'+    assert( p->x.pList==0 || p->pRight==0 );'), (77353, 1, u'+  assert( flags==EXPRDUP_REDUCE || flags==0 ); /* Only one flag value allowed */'), (77354, 1, u'+  assert( EXPR_FULLSIZE<=0xfff );'), (77355, 1, u'+  assert( (0xfff & (EP_Reduced|EP_TokenOnly))==0 );'), (77359, 1, u'+    assert( !ExprHasProperty(p, EP_TokenOnly|EP_Reduced) );'), (77360, 1, u'+    assert( !ExprHasProperty(p, EP_FromJoin) );'), (77361, 1, u'+    assert( !ExprHasProperty(p, EP_MemToken) );'), (77362, 1, u'+    assert( !ExprHasProperty(p, EP_NoReduce) );'), (77366, 1, u'+      assert( p->pRight==0 );'), (77425, 1, u'+    assert( pzBuffer==0 || isReduced );'), (77451, 1, u'+        assert( ExprHasProperty(p, EP_Reduced)==0 );'), (77646, 1, u'+  assert( p==0 );'), (77675, 1, u'+    assert( pList->nExpr>0 );'), (77682, 1, u'+  assert( pList->a!=0 );'), (77711, 1, u'+  assert( pList!=0 || pParse->db->mallocFailed!=0 );'), (77714, 1, u'+    assert( pList->nExpr>0 );'), (77716, 1, u'+    assert( pItem->zName==0 );'), (77736, 1, u'+  assert( pList!=0 || db->mallocFailed!=0 );'), (77739, 1, u'+    assert( pList->nExpr>0 );'), (77740, 1, u'+    assert( db->mallocFailed || pItem->pExpr==pSpan->pExpr );'), (77771, 1, u'+  assert( pList->a!=0 || pList->nExpr==0 );'), (77890, 1, u'+  assert( p->op!=TK_INTEGER || (p->flags & EP_IntValue)!=0'), (77905, 1, u'+        assert( v!=(-2147483647-1) );'), (77994, 1, u'+      assert( p->iTable>=0 );  /* p cannot be part of a CHECK constraint */'), (78038, 1, u'+  assert( p->pGroupBy==0 );              /* Has no GROUP BY clause */'), (78040, 1, u'+  assert( p->pOffset==0 );               /* No LIMIT means no OFFSET */'), (78043, 1, u'+  assert( pSrc!=0 );'), (78048, 1, u'+  assert( pTab->pSelect==0 );            /* FROM clause is not a view */'), (78138, 1, u'+  assert( pX->op==TK_IN );'), (78152, 1, u'+    assert( p );                        /* Because of isCandidateForInOpt(p) */'), (78153, 1, u'+    assert( p->pEList!=0 );             /* Because of isCandidateForInOpt(p) */'), (78154, 1, u'+    assert( p->pEList->a[0].pExpr!=0 ); /* Because of isCandidateForInOpt(p) */'), (78155, 1, u'+    assert( p->pSrc!=0 );               /* Because of isCandidateForInOpt(p) */'), (78169, 1, u'+    assert(v);'), (78202, 1, u'+          assert( IN_INDEX_INDEX_DESC == IN_INDEX_INDEX_ASC+1 );'), (78351, 1, u'+        assert( !isRowid );'), (78354, 1, u'+        assert( (pExpr->iTable&0x0000FFFF)==pExpr->iTable );'), (78362, 1, u'+        assert( pKeyInfo!=0 ); /* OOM will cause exit after sqlite3Select() */'), (78363, 1, u'+        assert( pEList!=0 );'), (78364, 1, u'+        assert( pEList->nExpr>0 );'), (78365, 1, u'+        assert( sqlite3KeyInfoIsWriteable(pKeyInfo) );'), (78385, 1, u'+          assert( sqlite3KeyInfoIsWriteable(pKeyInfo) );'), (78446, 1, u'+      assert( pExpr->op==TK_EXISTS || pExpr->op==TK_SELECT );'), (78448, 1, u'+      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (78516, 1, u'+  assert( v!=0 );       /* OOM detected prior to this routine */'), (78641, 1, u'+    assert( !sqlite3IsNaN(value) ); /* The new AtoF never returns NaN */'), (78660, 1, u'+    assert( i>=0 );'), (78667, 1, u'+    assert( z!=0 );'), (78707, 1, u'+  assert( iReg>0 );  /* Register numbers are always positive */'), (78708, 1, u'+  assert( iCol>=-1 && iCol<32768 );  /* Finite column numbers */'), (78723, 1, u'+    assert( p->iReg==0 || p->iTable!=iTab || p->iColumn!=iCol );'), (78795, 1, u'+  assert( N>0 );'), (78796, 1, u'+  assert( pParse->iCacheLevel>=N );'), (78875, 1, u'+  assert( v!=0 );'), (78915, 1, u'+  assert( iFrom>=iTo+nReg || iFrom+nReg<=iTo );'), (78975, 1, u'+  assert( target>0 && target<=pParse->nMem );'), (78977, 1, u'+    assert( pParse->db->mallocFailed );'), (78991, 1, u'+        assert( pCol->iMem>0 );'), (79024, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (79030, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (79043, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (79044, 1, u"+      assert( pExpr->u.zToken[0]=='x' || pExpr->u.zToken[0]=='X' );"), (79045, 1, u"+      assert( pExpr->u.zToken[1]=='\\'' );"), (79048, 1, u"+      assert( z[n]=='\\'' );"), (79055, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (79056, 1, u'+      assert( pExpr->u.zToken!=0 );'), (79057, 1, u'+      assert( pExpr->u.zToken[0]!=0 );'), (79060, 1, u"+        assert( pExpr->u.zToken[0]=='?'"), (79079, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (79082, 1, u'+      assert( to_op==OP_ToText    || aff!=SQLITE_AFF_TEXT    );'), (79083, 1, u'+      assert( to_op==OP_ToBlob    || aff!=SQLITE_AFF_NONE    );'), (79084, 1, u'+      assert( to_op==OP_ToNumeric || aff!=SQLITE_AFF_NUMERIC );'), (79085, 1, u'+      assert( to_op==OP_ToInt     || aff!=SQLITE_AFF_INTEGER );'), (79086, 1, u'+      assert( to_op==OP_ToReal    || aff!=SQLITE_AFF_REAL    );'), (79108, 1, u'+      assert( TK_LT==OP_Lt );'), (79109, 1, u'+      assert( TK_LE==OP_Le );'), (79110, 1, u'+      assert( TK_GT==OP_Gt );'), (79111, 1, u'+      assert( TK_GE==OP_Ge );'), (79112, 1, u'+      assert( TK_EQ==OP_Eq );'), (79113, 1, u'+      assert( TK_NE==OP_Ne );'), (79153, 1, u'+      assert( TK_AND==OP_And );'), (79154, 1, u'+      assert( TK_OR==OP_Or );'), (79155, 1, u'+      assert( TK_PLUS==OP_Add );'), (79156, 1, u'+      assert( TK_MINUS==OP_Subtract );'), (79157, 1, u'+      assert( TK_REM==OP_Remainder );'), (79158, 1, u'+      assert( TK_BITAND==OP_BitAnd );'), (79159, 1, u'+      assert( TK_BITOR==OP_BitOr );'), (79160, 1, u'+      assert( TK_SLASH==OP_Divide );'), (79161, 1, u'+      assert( TK_LSHIFT==OP_ShiftLeft );'), (79162, 1, u'+      assert( TK_RSHIFT==OP_ShiftRight );'), (79163, 1, u'+      assert( TK_CONCAT==OP_Concat );'), (79184, 1, u'+      assert( pLeft );'), (79189, 1, u'+        assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (79206, 1, u'+      assert( TK_BITNOT==OP_BitNot );'), (79207, 1, u'+      assert( TK_NOT==OP_Not );'), (79219, 1, u'+      assert( TK_ISNULL==OP_IsNull );'), (79220, 1, u'+      assert( TK_NOTNULL==OP_NotNull );'), (79234, 1, u'+        assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (79252, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (79259, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (79274, 1, u'+        assert( nFarg>=2 );'), (79291, 1, u'+        assert( nFarg>=1 );'), (79319, 1, u'+          assert( nFarg==1 );'), (79320, 1, u'+          assert( pFarg->a[0].pExpr!=0 );'), (79323, 1, u'+            assert( SQLITE_FUNC_LENGTH==OPFLAG_LENGTHARG );'), (79324, 1, u'+            assert( SQLITE_FUNC_TYPEOF==OPFLAG_TYPEOFARG );'), (79461, 1, u'+      assert( pExpr->iTable==0 || pExpr->iTable==1 );'), (79462, 1, u'+      assert( pExpr->iColumn>=-1 && pExpr->iColumn<pTab->nCol );'), (79463, 1, u'+      assert( pTab->iPKey<0 || pExpr->iColumn!=pTab->iPKey );'), (79464, 1, u'+      assert( p1>=0 && p1<(pTab->nCol*2+2) );'), (79507, 1, u'+    default: assert( op==TK_CASE ); {'), (79519, 1, u'+      assert( !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList );'), (79520, 1, u'+      assert(pExpr->x.pList->nExpr > 0);'), (79542, 1, u'+          assert( pTest!=0 );'), (79563, 1, u'+      assert( db->mallocFailed || pParse->nErr>0'), (79570, 1, u'+      assert( pExpr->affinity==OE_Rollback'), (79583, 1, u'+      assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (79611, 1, u'+  assert( ConstFactorOk(pParse) );'), (79677, 1, u'+  assert( target>0 && target<=pParse->nMem );'), (79682, 1, u'+    assert( pParse->pVdbe || pParse->db->mallocFailed );'), (79706, 1, u'+  assert( target>0 );'), (80016, 1, u'+  assert( pList!=0 );'), (80017, 1, u'+  assert( target>0 );'), (80018, 1, u'+  assert( pParse->pVdbe!=0 );  /* Never gets this far otherwise */'), (80060, 1, u'+  assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (80111, 1, u'+  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (80143, 1, u'+      assert( TK_LT==OP_Lt );'), (80144, 1, u'+      assert( TK_LE==OP_Le );'), (80145, 1, u'+      assert( TK_GT==OP_Gt );'), (80146, 1, u'+      assert( TK_GE==OP_Ge );'), (80147, 1, u'+      assert( TK_EQ==OP_Eq );'), (80148, 1, u'+      assert( TK_NE==OP_Ne );'), (80179, 1, u'+      assert( TK_ISNULL==OP_IsNull );'), (80180, 1, u'+      assert( TK_NOTNULL==OP_NotNull );'), (80231, 1, u'+  assert( jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 );'), (80257, 1, u'+  assert( pExpr->op!=TK_ISNULL || op==OP_NotNull );'), (80258, 1, u'+  assert( pExpr->op!=TK_NOTNULL || op==OP_IsNull );'), (80259, 1, u'+  assert( pExpr->op!=TK_NE || op==OP_Eq );'), (80260, 1, u'+  assert( pExpr->op!=TK_EQ || op==OP_Ne );'), (80261, 1, u'+  assert( pExpr->op!=TK_LT || op==OP_Ge );'), (80262, 1, u'+  assert( pExpr->op!=TK_LE || op==OP_Gt );'), (80263, 1, u'+  assert( pExpr->op!=TK_GT || op==OP_Le );'), (80264, 1, u'+  assert( pExpr->op!=TK_GE || op==OP_Lt );'), (80537, 1, u'+  assert( pExpr->op==TK_AGG_FUNCTION );'), (80603, 1, u'+          assert( !ExprHasProperty(pExpr, EP_TokenOnly|EP_Reduced) );'), (80681, 1, u'+            assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (80685, 1, u'+            assert( !ExprHasProperty(pExpr, EP_IntValue) );'), (80698, 1, u'+        assert( !ExprHasProperty(pExpr, EP_TokenOnly|EP_Reduced) );'), (80731, 1, u'+  assert( pNC->pSrcList!=0 );'), (80791, 1, u'+    assert( !usedAsColumnCache(pParse, i, i+n-1) );'), (80893, 1, u'+      assert( len>0 );'), (81015, 1, u'+      assert( len>0 );'), (81158, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (81160, 1, u'+  assert( iDb>=0 );'), (81166, 1, u'+    assert( iTrigDb==iDb || iTrigDb==1 );'), (81230, 1, u'+  assert( pSrc->nSrc==1 );'), (81231, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (81453, 1, u'+  assert( pNew );'), (81455, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (81462, 1, u'+  assert( pTab );'), (81573, 1, u'+  assert( pParse->pNewTable==0 );'), (81574, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (81595, 1, u'+  assert( pTab->addColOffset>0 );'), (81610, 1, u'+  assert( pNew->nCol>0 );'), (81612, 1, u'+  assert( nAlloc>=pNew->nCol && nAlloc%8==0 && nAlloc-pNew->nCol<8 );'), (81847, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (81848, 1, u'+  assert( sqlite3VdbeDb(v)==db );'), (81890, 1, u'+    assert( i<ArraySize(aTable) );'), (81944, 1, u'+  assert( db!=0 );'), (81956, 1, u'+  assert( db!=0 );'), (81972, 1, u'+  assert( db!=0 );'), (82039, 1, u'+  assert( nCol>1 );               /* >1 because it includes the rowid column */'), (82085, 1, u'+    assert( (pSpace - (u8*)p)==n );'), (82128, 1, u'+  assert( pNew->iCol==pOld->iCol );'), (82153, 1, u'+  assert( pOld->isPSample==0 && pNew->isPSample==0 );'), (82154, 1, u'+  assert( IsStat4 || (pNew->iCol==0 && pOld->iCol==0) );'), (82176, 1, u'+  assert( IsStat4 || nEqZero==0 );'), (82181, 1, u'+    assert( pNew->anEq[pNew->iCol]>0 );'), (82192, 1, u'+        assert( pOld->iCol>pNew->iCol );'), (82193, 1, u'+        assert( sampleIsBetter(p, pNew, pOld) );'), (82227, 1, u'+  assert( p->nSample==0'), (82250, 1, u'+    assert( iMin>=0 );'), (82338, 1, u'+  assert( p->nCol>1 );        /* Includes rowid field */'), (82339, 1, u'+  assert( iChng<p->nCol );'), (82432, 1, u'+  assert( argc==2 );'), (82433, 1, u'+  assert( eCall==STAT_GET_STAT1 || eCall==STAT_GET_NEQ'), (82439, 1, u'+  assert( argc==1 );'), (82479, 1, u'+      assert( p->current.anEq[i] );'), (82481, 1, u"+    assert( z[0]=='\\0' && z>zRet );"), (82503, 1, u'+    assert( p->iGet<p->nSample );'), (82527, 1, u"+        assert( z[0]=='\\0' && z>zRet );"), (82552, 1, u'+  assert( regOut!=regStat4 && regOut!=regStat4+1 );'), (82556, 1, u'+  assert( iParam==STAT_GET_STAT1 );'), (82611, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (82613, 1, u'+  assert( iDb>=0 );'), (82614, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (82695, 1, u'+    assert( iDb==sqlite3SchemaToIndex(db, pIdx->pSchema) );'), (82771, 1, u'+    assert( regRowid==(regStat4+2) );'), (82787, 1, u'+    assert( regChng==(regStat4+1) );'), (82891, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (82908, 1, u'+  assert( pTab!=0 );'), (82909, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (82946, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );'), (82951, 1, u'+  assert( pName2!=0 || pName1==0 );'), (83033, 1, u'+  assert( pIndex!=0 );'), (83065, 1, u'+  assert( argc==3 );'), (83202, 1, u'+  assert( db->lookaside.bEnabled==0 );'), (83226, 1, u'+    assert( pIdx==0 || bStat3 || pIdx->nSample==0 );'), (83251, 1, u'+    assert( ((u8*)pSpace)-nByte==(u8*)(pIdx->aSample) );'), (83313, 1, u'+  assert( db->lookaside.bEnabled==0 );'), (83360, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (83361, 1, u'+  assert( db->aDb[iDb].pBt!=0 );'), (83364, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (83516, 1, u'+    assert( z && zName );'), (83550, 1, u'+  assert( pVfs );'), (83627, 1, u'+    assert( iDb>=2 );'), (83765, 1, u'+  assert( v || db->mallocFailed );'), (83768, 1, u'+    assert( pFunc->nArg==-1 || (pFunc->nArg&0xff)==pFunc->nArg );'), (83842, 1, u'+  assert( db->nDb>iDb );'), (84146, 1, u'+  assert( pExpr->op==TK_COLUMN || pExpr->op==TK_TRIGGER );'), (84150, 1, u'+    assert( pTabList );'), (84162, 1, u'+    assert( iCol<pTab->nCol );'), (84165, 1, u'+    assert( pTab->iPKey<pTab->nCol );'), (84170, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (84223, 1, u'+  assert( pParse );'), (84311, 1, u'+  assert( iDb>=0 );'), (84345, 1, u'+  assert( pVdbe!=0 ); /* sqlite3GetVdbe cannot fail: VDBE already allocated */'), (84372, 1, u'+  assert( pParse->pToplevel==0 );'), (84382, 1, u'+  assert( !pParse->isMultiWrite'), (84383, 1, u'+       || sqlite3VdbeAssertMayAbort(v, pParse->mayAbort));'), (84402, 1, u'+          assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (84445, 1, u'+    assert( pParse->iCacheLevel==0 );  /* Disables and re-enables match */'), (84484, 1, u'+  assert( pParse->nested<10 );  /* Nesting should only be of limited depth */'), (84517, 1, u'+  assert( zName!=0 );'), (84520, 1, u'+  assert( zDatabase!=0 || sqlite3BtreeHoldsAllMutexes(db) );'), (84524, 1, u'+    assert( sqlite3SchemaMutexHeld(db, j, 0) );'), (84583, 1, u'+  assert( p->pSchema==0 || p->zDatabase==0 );'), (84610, 1, u'+  assert( zDb!=0 || sqlite3BtreeHoldsAllMutexes(db) );'), (84614, 1, u'+    assert( pSchema );'), (84616, 1, u'+    assert( sqlite3SchemaMutexHeld(db, j, 0) );'), (84648, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (84707, 1, u'+  assert( iDb<db->nDb );'), (84711, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (84712, 1, u'+  assert( pDb->pSchema!=0 );'), (84721, 1, u'+    assert( pDb->pSchema!=0 );'), (84760, 1, u'+  assert( pTable!=0 );'), (84792, 1, u'+  assert( !pTable || pTable->nRef>0 );'), (84807, 1, u'+    assert( pIndex->pSchema==pTable->pSchema );'), (84813, 1, u'+      assert( db==0 || sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) );'), (84814, 1, u'+      assert( pOld==pIndex || pOld==0 );'), (84837, 1, u'+  assert( nLookaside==0 || nLookaside==db->lookaside.nOut );'), (84848, 1, u'+  assert( db!=0 );'), (84849, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (84850, 1, u'+  assert( zTabName );'), (84851, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (84972, 1, u'+    assert( db->init.iDb==0 || db->init.busy );'), (85084, 1, u'+  assert( (isTemp & 1)==isTemp );'), (85127, 1, u'+        assert( !db->init.busy );'), (85150, 1, u'+  assert( pParse->pNewTable==0 );'), (85159, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (85416, 1, u'+  assert( pCol->zType==0 );'), (85515, 1, u'+    assert( autoInc==0 || autoInc==1 );'), (85588, 1, u'+      assert( pIdx->nKeyCol==1 );'), (85653, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (85760, 1, u'+    assert( pCol->affinity-SQLITE_AFF_TEXT >= 0 );'), (85761, 1, u'+    assert( pCol->affinity-SQLITE_AFF_TEXT < ArraySize(azType) );'), (85770, 1, u'+    assert( pCol->affinity==SQLITE_AFF_NONE'), (85774, 1, u'+    assert( k<=n );'), (85788, 1, u'+  assert( pIdx->isResized==0 );'), (85828, 1, u'+    assert( x<pIdx->pTable->nCol );'), (85877, 1, u'+    assert( v );'), (85885, 1, u'+    assert( v );'), (85899, 1, u'+    assert( pParse->pNewTable==pTab );'), (85908, 1, u'+  assert( pPk!=0 );'), (85942, 1, u'+    assert( pIdx->nColumn>=pIdx->nKeyCol+n );'), (85943, 1, u'+    assert( pIdx->nColumn>=j );'), (85952, 1, u'+        assert( j<pPk->nColumn );'), (85958, 1, u'+    assert( pPk->nColumn==j );'), (85959, 1, u'+    assert( pTab->nCol==j );'), (86003, 1, u'+  assert( !db->init.busy || !pSelect );'), (86096, 1, u'+      assert(pParse->nTab==1);'), (86106, 1, u'+        assert( p->aCol==0 );'), (86152, 1, u'+      assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (86173, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (86177, 1, u'+      assert( p==pOld );  /* Malloc must have failed inside HashInsert() */'), (86188, 1, u'+      assert( !pSelect && pCons && pEnd );'), (86288, 1, u'+  assert( pTable );'), (86322, 1, u'+  assert( pTable->nCol>=0 );'), (86331, 1, u'+  assert( pTable->pSelect );'), (86350, 1, u'+      assert( pTable->aCol==0 );'), (86356, 1, u'+      assert( sqlite3SchemaMutexHeld(db, 0, pTable->pSchema) );'), (86377, 1, u'+  assert( sqlite3SchemaMutexHeld(db, idx, 0) );'), (86416, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (86506, 1, u'+      assert( pIdx->pSchema==pTab->pSchema );'), (86515, 1, u'+      assert( iDb>=0 && iDb<pParse->db->nDb );'), (86557, 1, u'+  assert( v!=0 );'), (86572, 1, u'+    assert( pTrigger->pSchema==pTab->pSchema ||'), (86630, 1, u'+  assert( pParse->nErr==0 );'), (86631, 1, u'+  assert( pName->nSrc==1 );'), (86641, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (86752, 1, u'+  assert( pTo!=0 );'), (86823, 1, u'+  assert( sqlite3SchemaMutexHeld(db, 0, p->pSchema) );'), (86832, 1, u'+    assert( pNextTo->pPrevTo==0 );'), (86861, 1, u'+  assert( isDeferred==0 || isDeferred==1 ); /* EV: R-30323-21917 */'), (86933, 1, u'+  assert( pKey!=0 || db->mallocFailed || pParse->nErr );'), (87038, 1, u'+  assert( pParse->nErr==0 );      /* Never called with prior errors */'), (87055, 1, u'+    assert( pName1 && pName2 );'), (87058, 1, u'+    assert( pName && pName->z );'), (87077, 1, u'+      assert(0);'), (87080, 1, u'+    assert( db->mallocFailed==0 || pTab==0 );'), (87090, 1, u'+    assert( pName==0 );'), (87091, 1, u'+    assert( pStart==0 );'), (87098, 1, u'+  assert( pTab!=0 );'), (87099, 1, u'+  assert( pParse->nErr==0 );'), (87134, 1, u'+    assert( pName->z!=0 );'), (87148, 1, u'+        assert( !db->init.busy );'), (87197, 1, u'+      assert( pExpr->op==TK_COLLATE );'), (87212, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pIndex->aiRowEst) );'), (87213, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(pIndex->azColl) );'), (87228, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (87262, 1, u'+    assert( pTab->nCol<=0x7fff && j<=0x7fff );'), (87266, 1, u'+      assert( pListItem->pExpr->op==TK_COLLATE );'), (87269, 1, u'+      assert( nExtra>=nColl );'), (87298, 1, u'+    assert( i==pIndex->nColumn );'), (87331, 1, u'+      assert( pIdx->onError!=OE_None );'), (87332, 1, u'+      assert( pIdx->autoIndex );'), (87333, 1, u'+      assert( pIndex->onError!=OE_None );'), (87371, 1, u'+    assert( sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) );'), (87376, 1, u'+      assert( p==pIndex );  /* Malloc must have failed */'), (87507, 1, u'+  assert( a!=0 );'), (87530, 1, u'+  assert( pParse->nErr==0 );   /* Never called with prior errors */'), (87534, 1, u'+  assert( pName->nSrc==1 );'), (87711, 1, u'+  assert( iStart>=0 );'), (87712, 1, u'+  assert( nExtra>=1 );'), (87713, 1, u'+  assert( pSrc!=0 );'), (87714, 1, u'+  assert( iStart<=pSrc->nSrc );'), (87724, 1, u'+      assert( db->mallocFailed );'), (87791, 1, u'+  assert( pDatabase==0 || pTable!=0 );  /* Cannot have C without B */'), (87822, 1, u'+  assert(pList || pParse->db->mallocFailed );'), (87893, 1, u'+  assert( pAlias!=0 );'), (87903, 1, u'+  assert( p==0 );'), (87915, 1, u'+  assert( pIndexedBy!=0 );'), (87918, 1, u'+    assert( pItem->notIndexed==0 && pItem->zIndex==0 );'), (87947, 1, u'+    assert( p->a || p->nSrc==0 );'), (87963, 1, u'+  assert( pParse!=0 );'), (87965, 1, u'+  assert( db!=0 );'), (87987, 1, u'+  assert( pParse!=0 );'), (87988, 1, u'+  assert( pParse->db!=0 );'), (88004, 1, u'+  assert( pParse!=0 );'), (88005, 1, u'+  assert( pParse->db!=0 );'), (88025, 1, u'+    assert( !SAVEPOINT_BEGIN && SAVEPOINT_RELEASE==1 && SAVEPOINT_ROLLBACK==2 );'), (88059, 1, u'+    assert( db->aDb[1].pSchema );'), (88111, 1, u'+    assert( iDb<db->nDb );'), (88112, 1, u'+    assert( db->aDb[iDb].pBt!=0 || iDb==1 );'), (88113, 1, u'+    assert( iDb<SQLITE_MAX_ATTACHED+2 );'), (88114, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (88208, 1, u'+  assert( (errCode&0xff)==SQLITE_CONSTRAINT );'), (88274, 1, u'+  assert( zColl!=0 );'), (88277, 1, u'+    assert( z!=0 || pIndex->aiColumn[i]<0 );'), (88317, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );  /* Needed for schema access */'), (88319, 1, u'+    assert( pDb!=0 );'), (88363, 1, u'+    assert( pName1->z );'), (88425, 1, u'+      assert( sqlite3KeyInfoIsWriteable(pKey) );'), (88466, 1, u'+  assert( !db->xCollNeeded || !db->xCollNeeded16 );'), (88547, 1, u'+  assert( !p || p->xCmp );'), (88573, 1, u'+    assert( p==pColl );'), (88620, 1, u'+      assert( pDel==0 || pDel==pColl );'), (88658, 1, u'+  assert( SQLITE_UTF8==1 && SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );'), (88659, 1, u'+  assert( enc>=SQLITE_UTF8 && enc<=SQLITE_UTF16BE );'), (88756, 1, u'+    assert( pOther!=pDef && pOther->pNext!=pDef );'), (88800, 1, u'+  assert( nArg>=(-2) );'), (88801, 1, u'+  assert( nArg>=(-1) || createFlag==0 );'), (88802, 1, u'+  assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );'), (88956, 1, u'+  assert( pItem && pSrc->nSrc==1 );'), (89027, 1, u'+    assert( pFrom->nSrc==1 );'), (89030, 1, u'+    assert( pFrom->a[0].pOn==0 );'), (89031, 1, u'+    assert( pFrom->a[0].pUsing==0 );'), (89080, 1, u'+    assert( pOffset == 0 );'), (89190, 1, u'+  assert( pTabList->nSrc==1 );'), (89225, 1, u'+  assert( iDb<db->nDb );'), (89228, 1, u'+  assert( rcauth==SQLITE_OK || rcauth==SQLITE_DENY || rcauth==SQLITE_IGNORE );'), (89232, 1, u'+  assert(!isView || pTrigger);'), (89236, 1, u'+  assert( pTabList->nSrc==1 );'), (89292, 1, u'+    assert( !isView );'), (89299, 1, u'+      assert( pIdx->pSchema==pTab->pSchema );'), (89315, 1, u'+      assert( pPk!=0 );'), (89398, 1, u'+      assert( pPk || iDataCur==iTabCur );'), (89399, 1, u'+      assert( pPk || iIdxCur==iDataCur+1 );'), (89407, 1, u'+      assert( nKey==nPk ); /* OP_Found will use an unpacked key */'), (89409, 1, u'+        assert( pPk!=0 );'), (89415, 1, u'+      assert( nKey==0 );  /* OP_Found will use a composite key */'), (89418, 1, u'+      assert( nKey==1 );'), (89530, 1, u'+  assert( v );'), (89650, 1, u'+    assert( iIdxCur+i!=iDataCur || pPk==pIdx );'), (89785, 1, u'+  assert( argc>1 );'), (89788, 1, u'+  assert( pColl );'), (89789, 1, u'+  assert( mask==-1 || mask==0 );'), (89833, 1, u'+  assert( argc==1 );'), (89867, 1, u'+  assert( argc==1 );'), (89978, 1, u'+  assert( argc==3 || argc==2 );'), (89990, 1, u'+    assert( len==sqlite3_value_bytes(argv[0]) );'), (90029, 1, u'+  assert( p1>=0 && p2>=0 );'), (90056, 1, u'+  assert( argc==1 || argc==2 );'), (90096, 1, u'+  assert( nByte>0 );'), (90122, 1, u'+  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (90141, 1, u'+  assert( z2==(char*)sqlite3_value_text(argv[0]) );'), (90199, 1, u'+  assert( argc==1 );'), (90352, 1, u'+        assert( esc==0 );         /* This is GLOB, not LIKE */'), (90353, 1, u"+        assert( matchSet<0x80 );  /* '[' is a single-byte character */"), (90382, 1, u'+      assert( esc==0 );    /* This only occurs for GLOB, not LIKE */'), (90481, 1, u'+  assert( zB==sqlite3_value_text(argv[0]) );  /* Encoding did not change */'), (90581, 1, u'+  assert( argc==1 );'), (90605, 1, u'+  assert( argc==1 );'), (90630, 1, u'+  assert( argc==1 );'), (90653, 1, u'+      assert( zBlob==sqlite3_value_blob(argv[0]) ); /* No encoding change */'), (90694, 1, u'+      assert( sqlite3_value_type(argv[0])==SQLITE_NULL );'), (90769, 1, u'+  assert( argc==1 );'), (90773, 1, u'+  assert( pBlob==sqlite3_value_blob(argv[0]) );  /* No encoding change */'), (90796, 1, u'+  assert( argc==1 );'), (90830, 1, u'+  assert( argc==3 );'), (90835, 1, u'+  assert( zStr==sqlite3_value_text(argv[0]) );  /* No encoding change */'), (90838, 1, u'+    assert( sqlite3_value_type(argv[1])==SQLITE_NULL'), (90843, 1, u'+    assert( sqlite3_value_type(argv[1])!=SQLITE_NULL );'), (90848, 1, u'+  assert( zPattern==sqlite3_value_text(argv[1]) );  /* No encoding change */'), (90852, 1, u'+  assert( zRep==sqlite3_value_text(argv[2]) );'), (90854, 1, u'+  assert( nOut<SQLITE_MAX_LENGTH );'), (90886, 1, u'+  assert( j+nStr-i+1==nOut );'), (90889, 1, u'+  assert( j<=nOut );'), (90918, 1, u'+  assert( zIn==sqlite3_value_text(argv[0]) );'), (91008, 1, u'+  assert( argc==1 );'), (91088, 1, u'+  assert( argc==1 );'), (91157, 1, u'+  assert( argc==1 || p==0 || p->n>0x7fffffff'), (91230, 1, u'+  assert( argc==1 || argc==2 );'), (91276, 1, u'+  assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (91330, 1, u'+  assert( !ExprHasProperty(pExpr, EP_xIsSelect) );'), (91343, 1, u'+  assert( (char*)&likeInfoAlt == (char*)&likeInfoAlt.matchAll );'), (91344, 1, u'+  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );'), (91345, 1, u'+  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );'), (91654, 1, u'+  assert( ppIdx && *ppIdx==0 );'), (91655, 1, u'+  assert( !paiCol || *paiCol==0 );'), (91656, 1, u'+  assert( pParse );'), (91679, 1, u'+    assert( nCol>1 );'), (91862, 1, u'+          assert( aiCol[i]!=pTab->iPKey );'), (91890, 1, u'+    assert( nIncr==1 );'), (92006, 1, u'+  assert( pIdx==0 || pIdx->pTable==pTab );'), (92007, 1, u'+  assert( pIdx==0 || pIdx->nKeyCol==pFKey->nCol );'), (92008, 1, u'+  assert( pIdx!=0 || pFKey->nCol==1 );'), (92009, 1, u'+  assert( pIdx!=0 || HasRowid(pTab) );'), (92033, 1, u'+    assert( iCol>=0 );'), (92062, 1, u'+      assert( pIdx!=0 );'), (92162, 1, u'+    assert( v );                  /* VDBE has already been allocated */'), (92302, 1, u'+  assert( (regOld==0)!=(regNew==0) );'), (92338, 1, u'+      assert( isIgnoreErrors==0 || (regOld!=0 && regNew==0) );'), (92358, 1, u'+    assert( pFKey->nCol==1 || (aiFree && pIdx) );'), (92418, 1, u'+      assert( regOld==0 && regNew!=0 );'), (92428, 1, u'+    assert( aiCol || pFKey->nCol==1 );'), (92590, 1, u'+    assert( aiCol || pFKey->nCol==1 );'), (92601, 1, u'+      assert( iFromCol>=0 );'), (92720, 1, u'+    assert( pStep!=0 );'), (92784, 1, u'+  assert( db==0 || sqlite3SchemaMutexHeld(db, 0, pTab->pSchema) );'), (92804, 1, u'+    assert( pFKey->isDeferred==0 || pFKey->isDeferred==1 );'), (92852, 1, u'+  assert( !IsVirtual(pTab) );'), (92854, 1, u'+  assert( opcode==OP_OpenWrite || opcode==OP_OpenRead );'), (92862, 1, u'+    assert( pPk!=0 );'), (92863, 1, u'+    assert( pPk->tnum=pTab->tnum );'), (92979, 1, u'+    assert( pOp!=0 );'), (92994, 1, u'+      assert( pOp->p4.pVtab!=0 );'), (92995, 1, u'+      assert( pOp->p4type==P4_VTAB );'), (93066, 1, u'+  assert( pParse->pTriggerTab==0 );'), (93067, 1, u'+  assert( pParse==sqlite3ParseToplevel(pParse) );'), (93069, 1, u'+  assert( v );   /* We failed long ago if this is not so */'), (93073, 1, u'+    assert( sqlite3SchemaMutexHeld(db, 0, pDb->pSchema) );'), (93117, 1, u'+  assert( v );'), (93125, 1, u'+    assert( sqlite3SchemaMutexHeld(db, 0, pDb->pSchema) );'), (93234, 1, u'+  assert( pParse->nErr==0 || rc );'), (93414, 1, u'+  assert( pTabList->nSrc==1 );'), (93422, 1, u'+  assert( iDb<db->nDb );'), (93445, 1, u'+  assert( (pTrigger && tmask) || (pTrigger==0 && tmask==0) );'), (93478, 1, u'+    assert( !pTrigger );'), (93479, 1, u'+    assert( pList==0 );'), (93501, 1, u'+    assert( pSelect->pEList );'), (93503, 1, u'+    assert( dest.nSdst==nColumn );'), (93557, 1, u'+    assert( useTempTable==0 );'), (93605, 1, u'+            ipkColumn = i;  assert( !withoutRowid );'), (93706, 1, u'+      assert( !withoutRowid );'), (93710, 1, u'+        assert( pSelect==0 );  /* Otherwise useTempTable is true */'), (93722, 1, u'+    assert( !IsVirtual(pTab) );'), (93739, 1, u'+        assert( pSelect==0 ); /* Otherwise useTempTable is true */'), (93825, 1, u'+          assert( IsVirtual(pTab) );'), (94058, 1, u'+  assert( v!=0 );'), (94059, 1, u'+  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (94094, 1, u'+    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (94114, 1, u'+        assert( onError==OE_Replace );'), (94370, 1, u'+    assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail'), (94385, 1, u'+        assert( onError==OE_Replace );'), (94437, 1, u'+  assert( v!=0 );'), (94438, 1, u'+  assert( pTab->pSelect==0 );  /* This table is not a VIEW */'), (94448, 1, u'+      assert( pParse->nested==0 );'), (94511, 1, u'+  assert( op==OP_OpenRead || op==OP_OpenWrite );'), (94513, 1, u'+    assert( aToOpen==0 );'), (94520, 1, u'+  assert( v!=0 );'), (94532, 1, u'+    assert( pIdx->pSchema==pTab->pSchema );'), (94586, 1, u'+  assert( pDest && pSrc );'), (94587, 1, u'+  assert( pDest->pTable!=pSrc->pTable );'), (94675, 1, u'+  assert(pSelect->pSrc);   /* allocated even if there is no FROM clause */'), (94696, 1, u'+  assert( pSelect->pOffset==0 );  /* Must be so if pLimit==0 */'), (94704, 1, u'+  assert( pEList!=0 );'), (94708, 1, u'+  assert( pEList->a[0].pExpr );'), (94801, 1, u'+  assert( HasRowid(pDest) || destHasUniqueIdx );'), (94837, 1, u'+      assert( (pDest->tabFlags & TF_Autoincrement)==0 );'), (94854, 1, u'+    assert( pSrcIdx );'), (94938, 1, u'+    assert( rc==SQLITE_OK || pStmt==0 );'), (94968, 1, u'+            assert( azCols[i]!=0 );'), (95022, 1, u'+  assert( (rc&db->errMask)==rc );'), (96084, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (96183, 1, u'+    assert( (rc&0xff)==rc );'), (96904, 1, u'+    assert( SQLITE_FullFSync==PAGER_FULLFSYNC );'), (96905, 1, u'+    assert( SQLITE_CkptFullFSync==PAGER_CKPT_FULLFSYNC );'), (96906, 1, u'+    assert( SQLITE_CacheSpill==PAGER_CACHESPILL );'), (96907, 1, u'+    assert( (PAGER_FULLFSYNC | PAGER_CKPT_FULLFSYNC | PAGER_CACHESPILL)'), (96909, 1, u'+    assert( (pDb->safety_level & PAGER_SYNCHRONOUS_MASK)==pDb->safety_level );'), (96936, 1, u'+                      assert( action==OE_None ); break;'), (96955, 1, u'+  assert( PAGER_JOURNALMODE_DELETE==0 );'), (96956, 1, u'+  assert( PAGER_JOURNALMODE_PERSIST==1 );'), (96957, 1, u'+  assert( PAGER_JOURNALMODE_OFF==2 );'), (96958, 1, u'+  assert( PAGER_JOURNALMODE_TRUNCATE==3 );'), (96959, 1, u'+  assert( PAGER_JOURNALMODE_MEMORY==4 );'), (96960, 1, u'+  assert( PAGER_JOURNALMODE_WAL==5 );'), (96961, 1, u'+  assert( eMode>=0 && eMode<=ArraySize(azModeName) );'), (97026, 1, u'+  assert( pId2 );'), (97130, 1, u'+      assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (97150, 1, u'+    assert( pBt!=0 );'), (97177, 1, u'+    assert( pBt!=0 );'), (97251, 1, u'+        assert(pDb==&db->aDb[0]);'), (97262, 1, u'+    assert( eMode==PAGER_LOCKINGMODE_NORMAL'), (97347, 1, u'+    assert( pBt!=0 );'), (97352, 1, u'+      assert( eAuto>=0 && eAuto<=2 );'), (97423, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (97451, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (97796, 1, u'+        assert( pTab->nCol>cnum );'), (97836, 1, u'+      assert( db->aDb[i].zName!=0 );'), (97972, 1, u'+      assert( pParse->nErr>0 || pFK==0 );'), (97982, 1, u'+          assert( x==0 );'), (97987, 1, u'+          assert( iKey>=0 && iKey<pTab->nCol );'), (98086, 1, u'+    assert( iDb>=0 );'), (98087, 1, u'+    assert( iDb==0 || pId2->z );'), (98124, 1, u'+      assert( sqlite3SchemaMutexHeld(db, i, 0) );'), (98274, 1, u'+      assert( encnames[SQLITE_UTF8].enc==SQLITE_UTF8 );'), (98275, 1, u'+      assert( encnames[SQLITE_UTF16LE].enc==SQLITE_UTF16LE );'), (98276, 1, u'+      assert( encnames[SQLITE_UTF16BE].enc==SQLITE_UTF16BE );'), (98471, 1, u'+    assert( aPragmaNames[mid].ePragTyp==PragTyp_BUSY_TIMEOUT );'), (98637, 1, u'+  assert( argc==3 );'), (98639, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (98646, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (98660, 1, u'+    assert( db->init.busy );'), (98666, 1, u'+    assert( (rc&0xFF)==(rcp&0xFF) );'), (98670, 1, u'+        assert( iDb==1 );'), (98755, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (98756, 1, u'+  assert( db->aDb[iDb].pSchema );'), (98757, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (98758, 1, u'+  assert( iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) );'), (98903, 1, u'+  assert( db->init.busy );'), (98976, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (99016, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (99039, 1, u'+  assert( pParse->checkSchema );'), (99040, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (99062, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (99095, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (99102, 1, u'+    assert( i>=0 && i<db->nDb );'), (99138, 1, u'+  assert( ppStmt && *ppStmt==0 );'), (99139, 1, u'+  assert( !db->mallocFailed );'), (99140, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (99168, 1, u'+      assert( sqlite3BtreeHoldsMutex(pBt) );'), (99204, 1, u'+  assert( 0==pParse->nQueryLoop );'), (99250, 1, u'+    assert(!(*ppStmt));'), (99274, 1, u'+  assert( (rc&db->errMask)==rc );'), (99287, 1, u'+  assert( ppStmt!=0 );'), (99301, 1, u'+  assert( rc==SQLITE_OK || *ppStmt==0 );'), (99319, 1, u'+  assert( sqlite3_mutex_held(sqlite3VdbeDb(p)->mutex) );'), (99321, 1, u'+  assert( zSql!=0 );  /* Reprepare only called for prepare_v2() statements */'), (99323, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (99329, 1, u'+    assert( pNew==0 );'), (99332, 1, u'+    assert( pNew!=0 );'), (99359, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (99371, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (99396, 1, u'+  assert( ppStmt );'), (99445, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (99457, 1, u'+  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */'), (99529, 1, u'+  assert( db->mallocFailed || !pOffset || pLimit ); /* OFFSET implies LIMIT */'), (99531, 1, u'+    assert( db->mallocFailed );'), (99549, 1, u'+  assert( pOffset==0 || pLimit!=0 );'), (99558, 1, u'+    assert( pNew->pSrc!=0 || pParse->nErr>0 );'), (99560, 1, u'+  assert( pNew!=&standin );'), (99634, 1, u'+    assert( pB!=0 );'), (99679, 1, u'+  assert( (piTab==0)==(piCol==0) );  /* Both or neither are NULL */'), (99719, 1, u'+  assert( iLeft<iRight );'), (99720, 1, u'+  assert( pSrc->nSrc>iRight );'), (99721, 1, u'+  assert( pSrc->a[iLeft].pTab );'), (99722, 1, u'+  assert( pSrc->a[iRight].pTab );'), (99730, 1, u'+    assert( !ExprHasProperty(pEq, EP_TokenOnly|EP_Reduced) );'), (99766, 1, u'+    assert( !ExprHasProperty(p, EP_TokenOnly|EP_Reduced) );'), (100033, 1, u'+  assert( v );'), (100035, 1, u'+  assert( pEList!=0 );'), (100053, 1, u'+    assert( pDest->nSdst==nResultCol );'), (100075, 1, u'+    assert( pEList!=0 );'), (100076, 1, u'+    assert( pEList->nExpr==nColumn );'), (100110, 1, u'+        assert( sqlite3VdbeCurrentAddr(v)==iJump );'), (100121, 1, u'+        assert( pDistinct->eTnctType==WHERE_DISTINCT_UNORDERED );'), (100182, 1, u'+      assert( nColumn==1 );'), (100214, 1, u'+      assert( nColumn==1 );'), (100254, 1, u'+      assert( eDest==SRT_Discard );'), (100294, 1, u'+    assert( p->nRef>0 );'), (100305, 1, u'+    assert( p->nRef>0 );'), (100345, 1, u'+    assert( sqlite3KeyInfoIsWriteable(pInfo) );'), (100429, 1, u'+  assert( op==TK_UNION || op==TK_EXCEPT || op==TK_INTERSECT || op==TK_ALL );'), (100505, 1, u'+      assert( nColumn==1 );'), (100513, 1, u'+      assert( nColumn==1 );'), (100521, 1, u'+      assert( eDest==SRT_Output || eDest==SRT_Coroutine );'), (100525, 1, u'+        assert( regRow!=pDest->iSdst+i );'), (100651, 1, u'+      assert( pTab && pExpr->pTab==pTab );'), (100671, 1, u'+        assert( !pS );'), (100673, 1, u'+        assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (100708, 1, u'+      assert( ExprHasProperty(pExpr, EP_xIsSelect) );'), (100720, 1, u'+    assert( pzOrigTab && pzOrigCol );'), (100810, 1, u'+      assert( j<pTabList->nSrc );'), (100813, 1, u'+      assert( iCol==-1 || (iCol>=0 && iCol<pTab->nCol) );'), (100888, 1, u'+        assert( pColExpr!=0 );'), (100898, 1, u'+        assert( !ExprHasProperty(pColExpr, EP_IntValue) );'), (100967, 1, u'+  assert( pSelect!=0 );'), (100968, 1, u'+  assert( (pSelect->selFlags & SF_Resolved)!=0 );'), (100969, 1, u'+  assert( pTab->nCol==pSelect->pEList->nExpr || db->mallocFailed );'), (101010, 1, u'+  assert( db->lookaside.bEnabled==0 );'), (101074, 1, u'+  assert( p->pOffset==0 || p->pLimit!=0 );'), (101127, 1, u'+  assert( iCol>=0 );'), (101194, 1, u'+  assert( p && p->pPrior );  /* Calling function guarantees this much */'), (101197, 1, u'+  assert( pPrior->pRightmost!=pPrior );'), (101198, 1, u'+  assert( pPrior->pRightmost==p->pRightmost );'), (101214, 1, u'+  assert( v!=0 );  /* The VDBE already created by calling function */'), (101219, 1, u'+    assert( p->pEList );'), (101228, 1, u'+  assert( p->pEList && pPrior->pEList );'), (101252, 1, u'+      assert( !pPrior->pLimit );'), (101306, 1, u'+        assert( p->pLimit==0 );      /* Not allowed on leftward elements */'), (101307, 1, u'+        assert( p->pOffset==0 );     /* Not allowed on leftward elements */'), (101314, 1, u'+        assert( p->pOrderBy==0 );'), (101316, 1, u'+        assert( p->addrOpenEphm[0] == -1 );'), (101319, 1, u'+        assert( p->pEList );'), (101324, 1, u'+      assert( !pPrior->pOrderBy );'), (101337, 1, u'+        assert( p->op==TK_UNION );'), (101365, 1, u'+      assert( unionTab==dest.iSDParm || dest.eDest!=priorOp );'), (101368, 1, u'+        assert( p->pEList );'), (101388, 1, u'+    default: assert( p->op==TK_INTERSECT ); {'), (101402, 1, u'+      assert( p->pOrderBy==0 );'), (101405, 1, u'+      assert( p->addrOpenEphm[0] == -1 );'), (101408, 1, u'+      assert( p->pEList );'), (101422, 1, u'+      assert( p->addrOpenEphm[1] == -1 );'), (101443, 1, u'+      assert( p->pEList );'), (101486, 1, u'+    assert( p->pRightmost==p );'), (101506, 1, u'+          assert( pLoop->addrOpenEphm[1]<0 );'), (101606, 1, u'+      assert( pIn->nSdst==1 );'), (101632, 1, u'+      assert( pIn->nSdst==1 );'), (101661, 1, u'+      assert( pDest->eDest==SRT_Output );'), (101813, 1, u'+  assert( p->pOrderBy!=0 );'), (101814, 1, u'+  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */'), (101817, 1, u'+  assert( v!=0 );       /* Already thrown the error if VDBE alloc failed */'), (101826, 1, u'+  assert( pPrior->pOrderBy==0 );'), (101828, 1, u'+  assert( pOrderBy );'), (101839, 1, u'+        assert( pItem->u.x.iOrderByCol>0 );'), (101864, 1, u'+      assert( pItem->u.x.iOrderByCol>0'), (101881, 1, u'+        assert( sqlite3KeyInfoIsWriteable(pKeyMerge) );'), (101903, 1, u'+    assert( nOrderBy>=nExpr || db->mallocFailed );'), (101909, 1, u'+      assert( sqlite3KeyInfoIsWriteable(pKeyDup) );'), (102141, 1, u'+      assert( pEList!=0 && pExpr->iColumn<pEList->nExpr );'), (102142, 1, u'+      assert( pExpr->pLeft==0 && pExpr->pRight==0 );'), (102187, 1, u'+  assert( pSrc );  /* Even for (SELECT 1) we have: pSrc!=0 but pSrc->nSrc==0 */'), (102340, 1, u'+  assert( p!=0 );'), (102341, 1, u'+  assert( p->pPrior==0 );  /* Unable to flatten compound queries */'), (102344, 1, u'+  assert( pSrc && iFrom>=0 && iFrom<pSrc->nSrc );'), (102348, 1, u'+  assert( pSub!=0 );'), (102352, 1, u'+  assert( pSubSrc );'), (102431, 1, u'+      assert( pSub->pSrc!=0 );'), (102576, 1, u'+      assert( pParent==p );  /* First time through the loop */'), (102579, 1, u'+      assert( pParent!=p );  /* 2nd and subsequent times through the loop */'), (102582, 1, u'+        assert( db->mallocFailed );'), (102645, 1, u'+      assert( pParent->pOrderBy==0 );'), (102657, 1, u'+      assert( pParent->pHaving==0 );'), (102663, 1, u'+      assert( pParent->pGroupBy==0 );'), (102719, 1, u'+    assert( pExpr->op==TK_AGG_FUNCTION );'), (102732, 1, u'+  assert( *ppMinMax==0 || (*ppMinMax)->nExpr==1 );'), (102751, 1, u'+  assert( !p->pGroupBy );'), (102760, 1, u'+  assert( pTab && !pTab->pSelect && pExpr );'), (102918, 1, u'+      assert( i==0 );'), (102925, 1, u'+      assert( pSel!=0 );'), (102926, 1, u'+      assert( pFrom->pTab==0 );'), (102940, 1, u'+      assert( pFrom->pTab==0 );'), (102954, 1, u'+        assert( pFrom->pSelect==0 );'), (102986, 1, u'+    assert( pE->op!=TK_DOT || pE->pRight!=0 );'), (102987, 1, u'+    assert( pE->op!=TK_DOT || (pE->pLeft!=0 && pE->pLeft->op==TK_ID) );'), (103005, 1, u'+    assert( (p->selFlags & SF_NestedFrom)==0'), (103012, 1, u'+      assert( pE->op!=TK_DOT || pRight!=0 );'), (103030, 1, u'+          assert( pE->pLeft!=0 );'), (103031, 1, u'+          assert( !ExprHasProperty(pE->pLeft, EP_IntValue) );'), (103058, 1, u'+            assert( zName );'), (103070, 1, u'+              assert(IsVirtual(pTab));'), (103207, 1, u'+  assert( p->selFlags & SF_Resolved );'), (103217, 1, u'+        assert( pSel );'), (103299, 1, u'+      assert( !ExprHasProperty(pE, EP_xIsSelect) );'), (103323, 1, u'+    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (103348, 1, u'+    assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );'), (103359, 1, u'+      assert( nArg==1 );'), (103366, 1, u'+      assert( pList!=0 );  /* pList!=0 if pF->pFunc has NEEDCOLL */'), (103526, 1, u'+    assert(pDest->eDest==SRT_Exists || pDest->eDest==SRT_Union ||'), (103542, 1, u'+  assert( pEList!=0 );'), (103646, 1, u'+      assert( pItem->addrFillSub==0 );'), (103745, 1, u'+    assert( sDistinct.isTnct );'), (103884, 1, u'+      assert( !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) );'), (104197, 1, u'+        assert( p->pGroupBy==0 );'), (104198, 1, u'+        assert( flag==0 );'), (104202, 1, u'+        assert( flag==0 || (pMinMax!=0 && pMinMax->nExpr==1) );'), (104224, 1, u'+        assert( pMinMax==0 || pMinMax->nExpr==1 );'), (104527, 1, u'+  assert( sizeof(res.azResult[0])>= sizeof(res.nData) );'), (104571, 1, u'+    assert( azResult!=0 );'), (104637, 1, u'+    assert( sqlite3SchemaMutexHeld(pParse->db, 0, pTmpSchema) );'), (104681, 1, u'+  assert( pName1!=0 );   /* pName1->z might be NULL, but not pName1 itself */'), (104682, 1, u'+  assert( pName2!=0 );'), (104683, 1, u'+  assert( op==TK_INSERT || op==TK_UPDATE || op==TK_DELETE );'), (104684, 1, u'+  assert( op>0 && op<0xff );'), (104730, 1, u'+  assert( pTableName->nSrc==1 );'), (104762, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (104768, 1, u'+      assert( !db->init.busy );'), (104832, 1, u'+  assert( pParse->pNewTrigger==0 );'), (104843, 1, u'+    assert( pParse->pNewTrigger==pTrigger );'), (104906, 1, u'+    assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (104914, 1, u'+      assert( pTab!=0 );'), (104922, 1, u'+  assert( !pParse->pNewTrigger );'), (104986, 1, u'+  assert(pEList == 0 || pSelect == 0);'), (104987, 1, u'+  assert(pEList != 0 || pSelect != 0 || db->mallocFailed);'), (105084, 1, u'+  assert( pName->nSrc==1 );'), (105088, 1, u'+  assert( zDb!=0 || sqlite3BtreeHoldsAllMutexes(db) );'), (105092, 1, u'+    assert( sqlite3SchemaMutexHeld(db, j, 0) );'), (105131, 1, u'+  assert( iDb>=0 && iDb<db->nDb );'), (105133, 1, u'+  assert( pTable );'), (105134, 1, u'+  assert( pTable->pSchema==pTrigger->pSchema || iDb==1 );'), (105150, 1, u'+  assert( pTable!=0 );'), (105186, 1, u'+  assert( sqlite3SchemaMutexHeld(db, iDb, 0) );'), (105239, 1, u'+  assert( pList==0 || IsVirtual(pTab)==0 );'), (105270, 1, u'+    assert( pSrc->nSrc>0 );'), (105271, 1, u'+    assert( pSrc->a!=0 );'), (105275, 1, u'+      assert( iDb<pParse->db->nDb );'), (105295, 1, u'+  assert( pParse->pTriggerTab && pParse->pToplevel );'), (105296, 1, u'+  assert( pStepList );'), (105297, 1, u'+  assert( v!=0 );'), (105320, 1, u'+    assert( pParse->cookieGoto==0 || pParse->cookieGoto==-1 );'), (105350, 1, u'+      default: assert( pStep->op==TK_SELECT ); {'), (105391, 1, u'+  assert( pFrom->zErrMsg==0 || pFrom->nErr );'), (105392, 1, u'+  assert( pTo->zErrMsg==0 || pTo->nErr );'), (105421, 1, u'+  assert( pTrigger->zName==0 || pTab==tableOfTrigger(pTrigger) );'), (105422, 1, u'+  assert( pTop->pVdbe );'), (105505, 1, u'+  assert( !pSubParse->pAinc       && !pSubParse->pZombieTab );'), (105506, 1, u'+  assert( !pSubParse->pTriggerPrg && !pSubParse->nMaxArg );'), (105528, 1, u'+  assert( pTrigger->zName==0 || pTab==tableOfTrigger(pTrigger) );'), (105564, 1, u'+  assert( pPrg || pParse->nErr || pParse->db->mallocFailed );'), (105638, 1, u'+  assert( op==TK_UPDATE || op==TK_INSERT || op==TK_DELETE );'), (105639, 1, u'+  assert( tr_tm==TRIGGER_BEFORE || tr_tm==TRIGGER_AFTER );'), (105640, 1, u'+  assert( (op==TK_UPDATE)==(pChanges!=0) );'), (105647, 1, u'+    assert( p->pSchema!=0 );'), (105648, 1, u'+    assert( p->pTabSchema!=0 );'), (105649, 1, u'+    assert( p->pSchema==p->pTabSchema'), (105700, 1, u'+  assert( isNew==1 || isNew==0 );'), (105780, 1, u'+  assert( pTab!=0 );'), (105786, 1, u'+    assert( i<pTab->nCol );'), (105867, 1, u'+  assert( pTabList->nSrc==1 );'), (105881, 1, u'+  assert( pTrigger || tmask==0 );'), (105979, 1, u'+  assert( (chngRowid & chngPk)==0 );'), (105980, 1, u'+  assert( chngRowid==0 || chngRowid==1 );'), (105981, 1, u'+  assert( chngPk==0 || chngPk==1 );'), (106088, 1, u'+    assert( pPk!=0 );'), (106153, 1, u'+      assert( pPk!=0 );'), (106173, 1, u'+  assert( chngKey || pTrigger || hasFK || regOldRowid==regNewRowid );'), (106276, 1, u'+    assert( regOldRowid>0 );'), (106343, 1, u'+    assert( aRegIdx );'), (106437, 1, u'+  assert( pTab->iPKey<0 );'), (106451, 1, u'+  assert( v );'), (106530, 1, u'+  assert( rc!=SQLITE_ROW || (db->flags&SQLITE_CountRows) );'), (106658, 1, u'+    assert( strcmp(pDb->zName,"vacuum_db")==0 );'), (106797, 1, u'+    assert( 1==sqlite3BtreeIsInTrans(pTemp) );'), (106798, 1, u'+    assert( 1==sqlite3BtreeIsInTrans(pMain) );'), (106818, 1, u'+  assert( rc==SQLITE_OK );'), (106913, 1, u'+      assert( pDel==0 || pDel==pMod );'), (106973, 1, u'+  assert( IsVirtual(pTab) );'), (106985, 1, u'+  assert( db );'), (106986, 1, u'+  assert( pVTab->nRef>0 );'), (106987, 1, u'+  assert( db->magic==SQLITE_MAGIC_OPEN || db->magic==SQLITE_MAGIC_ZOMBIE );'), (107017, 1, u'+  assert( db==0 || sqlite3SchemaMutexHeld(db, 0, p->pSchema) );'), (107022, 1, u'+    assert( db2 );'), (107034, 1, u'+  assert( !db || pRet );'), (107049, 1, u'+  assert( IsVirtual(p) );'), (107050, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (107051, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (107088, 1, u'+  assert( sqlite3BtreeHoldsAllMutexes(db) );'), (107089, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (107171, 1, u'+  assert( 0==pTable->pIndex );'), (107175, 1, u'+  assert( iDb>=0 );'), (107282, 1, u'+    assert( sqlite3SchemaMutexHeld(db, 0, pSchema) );'), (107286, 1, u'+      assert( pTab==pOld );  /* Malloc must have failed inside HashInsert() */'), (107313, 1, u'+    assert(pArg->z < p->z);'), (107355, 1, u'+  assert( &db->pVtabCtx );'), (107356, 1, u'+  assert( xConstruct );'), (107416, 1, u"+            assert(zType[i-1]==' ');"), (107442, 1, u'+  assert( pTab );'), (107513, 1, u'+  assert( pTab && (pTab->tabFlags & TF_Virtual)!=0 && !pTab->pVTable );'), (107560, 1, u'+  assert( (pTab->tabFlags & TF_Virtual)!=0 );'), (107598, 1, u'+  assert( (rc&0xff)==rc );'), (107619, 1, u'+    assert( rc==SQLITE_OK );'), (107624, 1, u'+      assert( pTab->pVTable==p && p->pNext==0 );'), (107771, 1, u'+  assert( op==SAVEPOINT_RELEASE||op==SAVEPOINT_ROLLBACK||op==SAVEPOINT_BEGIN );'), (107772, 1, u'+  assert( iSavepoint>=0 );'), (107838, 1, u'+  assert( pVtab!=0 );'), (107839, 1, u'+  assert( pVtab->pModule!=0 );'), (107885, 1, u'+  assert( IsVirtual(pTab) );'), (107910, 1, u'+  assert( OE_Rollback==1 && OE_Abort==2 && OE_Fail==3 );'), (107911, 1, u'+  assert( OE_Ignore==4 && OE_Replace==5 );'), (107912, 1, u'+  assert( db->vtabOnConflict>=1 && db->vtabOnConflict<=5 );'), (107934, 1, u'+        assert( p->pTab==0 || (p->pTab->tabFlags & TF_Virtual)!=0 );'), (108692, 1, u'+  assert( pMaskSet->n<=(int)sizeof(Bitmask)*8 );'), (108710, 1, u'+  assert( pMaskSet->n < ArraySize(pMaskSet->ix) );'), (108774, 1, u'+  assert( TK_GT>TK_EQ && TK_GT<TK_GE );'), (108775, 1, u'+  assert( TK_LT>TK_EQ && TK_LT<TK_GE );'), (108776, 1, u'+  assert( TK_LE>TK_EQ && TK_LE<TK_GE );'), (108777, 1, u'+  assert( TK_GE==TK_EQ+4 );'), (108801, 1, u'+  assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );'), (108817, 1, u'+    assert( TK_LT==TK_GT+2 );'), (108818, 1, u'+    assert( TK_GE==TK_LE+2 );'), (108819, 1, u'+    assert( TK_GT>TK_EQ );'), (108820, 1, u'+    assert( TK_GT<TK_LE );'), (108821, 1, u'+    assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );'), (108831, 1, u'+  assert( allowedOp(op) );'), (108837, 1, u'+    assert( (WO_EQ<<(op-TK_EQ)) < 0x7fff );'), (108840, 1, u'+  assert( op!=TK_ISNULL || c==WO_ISNULL );'), (108841, 1, u'+  assert( op!=TK_IN || c==WO_IN );'), (108842, 1, u'+  assert( op!=TK_EQ || c==WO_EQ );'), (108843, 1, u'+  assert( op!=TK_LT || c==WO_LT );'), (108844, 1, u'+  assert( op!=TK_LE || c==WO_LE );'), (108845, 1, u'+  assert( op!=TK_GT || c==WO_GT );'), (108846, 1, u'+  assert( op!=TK_GE || c==WO_GE );'), (108877, 1, u'+            assert( pX->op==TK_COLUMN );'), (108899, 1, u'+              assert(pX->pLeft);'), (109083, 1, u'+  assert( pLeft->iColumn!=(-1) ); /* Because IPK never has AFF_TEXT */'), (109095, 1, u'+    assert( pRight->op==TK_VARIABLE || pRight->op==TK_REGISTER );'), (109277, 1, u'+  assert( (pTerm->wtFlags & (TERM_DYNAMIC|TERM_ORINFO|TERM_ANDINFO))==0 );'), (109278, 1, u'+  assert( pExpr->op==TK_OR );'), (109287, 1, u'+  assert( pOrWc->nTerm>=2 );'), (109297, 1, u'+      assert( (pOrTerm->wtFlags & (TERM_ANDINFO|TERM_ORINFO))==0 );'), (109316, 1, u'+            assert( pAndTerm->pExpr );'), (109386, 1, u'+        assert( pOrTerm->eOperator & WO_EQ );'), (109391, 1, u'+          assert( j==1 );'), (109401, 1, u'+          assert( pOrTerm->wtFlags & (TERM_COPIED|TERM_VIRTUAL) );'), (109411, 1, u'+        assert( j==1 );'), (109412, 1, u'+        assert( IsPowerOfTwo(chngToIN) );'), (109413, 1, u'+        assert( chngToIN==getMask(&pWInfo->sMaskSet, iCursor) );'), (109422, 1, u'+        assert( pOrTerm->eOperator & WO_EQ );'), (109456, 1, u'+        assert( pOrTerm->eOperator & WO_EQ );'), (109457, 1, u'+        assert( pOrTerm->leftCursor==iCursor );'), (109458, 1, u'+        assert( pOrTerm->u.leftColumn==iColumn );'), (109463, 1, u'+      assert( pLeft!=0 );'), (109469, 1, u'+        assert( !ExprHasProperty(pNew, EP_xIsSelect) );'), (109529, 1, u'+  assert( pExpr->op!=TK_AS && pExpr->op!=TK_COLLATE );'), (109533, 1, u'+    assert( pExpr->pRight==0 );'), (109624, 1, u'+    assert( pList!=0 );'), (109625, 1, u'+    assert( pList->nExpr==2 );'), (109648, 1, u'+    assert( pWC->op==TK_AND );'), (110018, 1, u'+  assert( v!=0 );'), (110047, 1, u'+  assert( nKeyCol>0 );'), (110096, 1, u'+  assert( (u32)n==pLoop->u.btree.nEq );'), (110114, 1, u'+  assert( n==nKeyCol );'), (110119, 1, u'+  assert( pLevel->iIdxCur>=0 );'), (110166, 1, u'+    assert( IsPowerOfTwo(pTerm->eOperator & ~WO_EQUIV) );'), (110218, 1, u'+    assert( IsPowerOfTwo(pTerm->eOperator & ~WO_EQUIV) );'), (110231, 1, u'+    assert( WO_EQ==SQLITE_INDEX_CONSTRAINT_EQ );'), (110232, 1, u'+    assert( WO_LT==SQLITE_INDEX_CONSTRAINT_LT );'), (110233, 1, u'+    assert( WO_LE==SQLITE_INDEX_CONSTRAINT_LE );'), (110234, 1, u'+    assert( WO_GT==SQLITE_INDEX_CONSTRAINT_GT );'), (110235, 1, u'+    assert( WO_GE==SQLITE_INDEX_CONSTRAINT_GE );'), (110236, 1, u'+    assert( WO_MATCH==SQLITE_INDEX_CONSTRAINT_MATCH );'), (110237, 1, u'+    assert( pTerm->eOperator & (WO_IN|WO_EQ|WO_LT|WO_LE|WO_GT|WO_GE|WO_MATCH) );'), (110323, 1, u'+  assert( pRec!=0 );'), (110325, 1, u'+  assert( pIdx->nSample>0 );'), (110326, 1, u'+  assert( pRec->nField>0 && iCol<pIdx->nSampleCol );'), (110343, 1, u'+    assert( i<pIdx->nSample );'), (110344, 1, u'+    assert( 0==sqlite3VdbeRecordCompare(aSample[i].n, aSample[i].p, pRec)'), (110349, 1, u'+    assert( i==pIdx->nSample'), (110352, 1, u'+    assert( i==0'), (110495, 1, u'+      assert( (pLower->eOperator & (WO_GT|WO_GE))!=0 );'), (110510, 1, u'+      assert( (pUpper->eOperator & (WO_LT|WO_LE))!=0 );'), (110526, 1, u'+        nNew = 10;        assert( 10==sqlite3LogEst(2) );'), (110541, 1, u'+  assert( pLower || pUpper );'), (110546, 1, u'+    nNew -= 20;        assert( 20==sqlite3LogEst(4) );'), (110550, 1, u'+    nNew -= 20;        assert( 20==sqlite3LogEst(4) );'), (110591, 1, u'+  assert( nEq>=1 );'), (110592, 1, u'+  assert( nEq<=(p->nKeyCol+1) );'), (110593, 1, u'+  assert( p->aSample!=0 );'), (110594, 1, u'+  assert( p->nSample>0 );'), (110595, 1, u'+  assert( pBuilder->nRecValid<nEq );'), (110655, 1, u'+  assert( p->aSample!=0 );'), (110668, 1, u'+  assert( pBuilder->nRecValid==nRecValid );'), (110726, 1, u'+    assert( pParse->db->mallocFailed );'), (110729, 1, u'+  assert( v!=0 );'), (110775, 1, u'+  assert( iTarget>0 );'), (110796, 1, u'+    assert( pX->op==TK_IN );'), (110805, 1, u'+    assert( (pLoop->wsFlags & WHERE_MULTI_OR)==0 );'), (110899, 1, u'+  assert( (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0 );'), (110903, 1, u'+  assert( pIdx!=0 );'), (110926, 1, u'+      assert( pIdx->aiColumn[j]>=0 );'), (110933, 1, u'+  assert( zAff==0 || (int)strlen(zAff)>=nEq );'), (110937, 1, u'+    assert( pTerm!=0 );'), (111258, 1, u'+    assert( pLoop->u.btree.nEq==1 );'), (111261, 1, u'+    assert( pTerm!=0 );'), (111262, 1, u'+    assert( pTerm->pExpr!=0 );'), (111263, 1, u'+    assert( omitTable==0 );'), (111283, 1, u'+    assert( omitTable==0 );'), (111288, 1, u'+    assert( pStart!=0 || pEnd!=0 );'), (111307, 1, u'+      assert( TK_LE==TK_GT+1 );      /* Make sure the ordering.. */'), (111308, 1, u'+      assert( TK_LT==TK_GT+2 );      /*  ... of the TK_xx values... */'), (111309, 1, u'+      assert( TK_GE==TK_GT+3 );      /*  ... is correcct. */'), (111311, 1, u'+      assert( (pStart->wtFlags & TERM_VNULL)==0 );'), (111314, 1, u'+      assert( pX!=0 );'), (111328, 1, u'+      assert( pX!=0 );'), (111329, 1, u'+      assert( (pEnd->wtFlags & TERM_VNULL)==0 );'), (111345, 1, u'+    assert( pLevel->p5==0 );'), (111419, 1, u'+    assert( nEq>=pLoop->u.btree.nSkip );'), (111433, 1, u'+      assert( pLoop->u.btree.nSkip==0 );'), (111456, 1, u'+    assert( zStartAff==0 || sqlite3Strlen30(zStartAff)>=nEq );'), (111507, 1, u'+    assert( op!=0 );'), (111603, 1, u'+      assert( pLevel->p5==0 );'), (111663, 1, u'+    assert( pTerm!=0 );'), (111664, 1, u'+    assert( pTerm->eOperator & WO_OR );'), (111665, 1, u'+    assert( (pTerm->wtFlags & TERM_ORINFO)!=0 );'), (111753, 1, u'+        assert( pSubWInfo || pParse->nErr || db->mallocFailed );'), (111789, 1, u'+          assert( (pSubLoop->wsFlags & WHERE_AUTO_INDEX)==0 );'), (111793, 1, u'+            assert( pSubWInfo->a[0].iIdxCur==iCovCur );'), (111825, 1, u'+    assert( bRev==0 || bRev==1 );'), (111847, 1, u'+    assert( pE!=0 );'), (111871, 1, u'+    assert( !ExprHasProperty(pE, EP_FromJoin) );'), (111872, 1, u'+    assert( (pTerm->prereqRight & pLevel->notReady)!=0 );'), (111901, 1, u'+        assert( pWInfo->untestedTerms );'), (111904, 1, u'+      assert( pTerm->pExpr );'), (112151, 1, u'+    assert( p->rSetup==0 || pTemplate->rSetup==0'), (112157, 1, u'+    assert( p->rSetup>=pTemplate->rSetup );'), (112167, 1, u'+      assert( p->rSetup==pTemplate->rSetup );'), (112192, 1, u'+      assert( p->rSetup>=pTemplate->rSetup ); /* SETUP-INVARIANT above */'), (112305, 1, u'+  assert( (pNew->wsFlags & WHERE_VIRTUALTABLE)==0 );'), (112306, 1, u'+  assert( (pNew->wsFlags & WHERE_TOP_LIMIT)==0 );'), (112316, 1, u'+  assert( pNew->u.btree.nEq<=pProbe->nKeyCol );'), (112367, 1, u'+    assert( pNew->nOut==saved_nOut );'), (112381, 1, u'+        nIn = 46;  assert( 46==sqlite3LogEst(25) );'), (112390, 1, u'+      assert('), (112399, 1, u'+        assert( (pNew->wsFlags & WHERE_COLUMN_IN)==0 || iCol<0 );'), (112408, 1, u'+      nIn = 10;  assert( 10==sqlite3LogEst(2) );'), (112417, 1, u'+      assert( pTerm->eOperator & (WO_LT|WO_LE) );'), (112427, 1, u'+      assert( pNew->nOut==saved_nOut );'), (112446, 1, u'+      assert( nOut==0 || rc==SQLITE_OK );'), (112572, 1, u'+  assert( !IsVirtual(pSrc->pTab) );'), (112628, 1, u'+        pNew->rSetup = rLogSize + rSize + 28;  assert( 28==sqlite3LogEst(7) );'), (112633, 1, u'+        pNew->nOut = 43;  assert( 43==sqlite3LogEst(20) );'), (112660, 1, u'+    assert( (pWInfo->wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || b==0 );'), (112766, 1, u'+  assert( IsVirtual(pTab) );'), (112804, 1, u'+          assert( seenIn );'), (112808, 1, u'+          assert( seenVar );'), (112812, 1, u'+          assert( seenVar && seenIn );'), (112830, 1, u'+    assert( pNew->nLSlot>=nConstraint );'), (112850, 1, u'+        assert( iTerm<pNew->nLSlot );'), (112875, 1, u'+      assert( pNew->nLTerm<=pNew->nLSlot );'), (112961, 1, u'+        assert( rc==SQLITE_OK || sCur.n==0 );'), (113111, 1, u'+  assert( pOrderBy!=0 );'), (113132, 1, u'+    assert( (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0 );'), (113171, 1, u'+        assert( nColumn==nKeyCol+1 || !HasRowid(pIndex->pTable) );'), (113172, 1, u'+        assert( pIndex->aiColumn[nColumn-1]==(-1) || !HasRowid(pIndex->pTable));'), (113345, 1, u'+  assert( nLoop<=pWInfo->pTabList->nSrc );'), (113365, 1, u'+  aFrom[0].nRow = MIN(pParse->nQueryLoop, 46);  assert( 46==sqlite3LogEst(25) );'), (113546, 1, u'+  assert( pWInfo->nLevel==nLoop );'), (113603, 1, u'+  assert( pWInfo->pTabList->nSrc>=1 );'), (113623, 1, u'+      assert( pLoop->aLTermSpace==pLoop->aLTerm );'), (113624, 1, u'+      assert( ArraySize(pLoop->aLTermSpace)==4 );'), (113830, 1, u'+  assert( EIGHT_BYTE_ALIGNMENT(sWLB.pNew) );'), (113885, 1, u'+      assert( (m-1)==toTheLeft );'), (114044, 1, u'+  assert( (wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || pWInfo->nLevel==1 );'), (114086, 1, u'+      assert( pTabItem->iCursor==pLevel->iTabCur );'), (114095, 1, u'+        assert( n<=pTab->nCol );'), (114105, 1, u'+      assert( iIdxCur!=0 || (pWInfo->wctrlFlags & WHERE_ONEPASS_DESIRED)==0 );'), (114109, 1, u'+        assert( wctrlFlags & WHERE_ONEPASS_DESIRED );'), (114122, 1, u'+      assert( pIx->pSchema==pTab->pSchema );'), (114123, 1, u'+      assert( iIndexCur>=0 );'), (114213, 1, u'+      assert( (pLoop->wsFlags & WHERE_IDX_ONLY)==0'), (114237, 1, u'+  assert( pWInfo->nLevel<=pTabList->nSrc );'), (114242, 1, u'+    assert( pTab!=0 );'), (114293, 1, u'+          assert( pIdx->pTable==pTab );'), (114303, 1, u'+          assert( (pLoop->wsFlags & WHERE_IDX_ONLY)==0 || x>=0 );'), (115883, 1, u'+  assert( iLookAhead!=YYNOCODE );'), (115947, 1, u'+  assert( stateno<=YY_REDUCE_COUNT );'), (115950, 1, u'+  assert( i!=YY_REDUCE_USE_DFLT );'), (115951, 1, u'+  assert( iLookAhead!=YYNOCODE );'), (115958, 1, u'+  assert( i>=0 && i<YY_ACTTAB_COUNT );'), (115959, 1, u'+  assert( yy_lookahead[i]==iLookAhead );'), (117393, 1, u'+  assert( yymsp[-2].minor.yy203!=0 );'), (117401, 1, u'+  assert( yymsp[-1].minor.yy203!=0 );'), (117569, 1, u'+  assert( yyruleno>=0 && yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) );'), (117592, 1, u'+    assert( yyact == YYNSTATE + YYNRULE + 1 );'), (117629, 1, u'+  assert( TOKEN.z[0] );  /* The tokenizer always gives us a token */'), (117724, 1, u'+      assert( yyact == YY_ERROR_ACTION );'), (118504, 1, u'+  assert( pzErrMsg!=0 );'), (118510, 1, u'+  assert( pParse->pNewTable==0 );'), (118511, 1, u'+  assert( pParse->pNewTrigger==0 );'), (118512, 1, u'+  assert( pParse->nVar==0 );'), (118513, 1, u'+  assert( pParse->nzVar==0 );'), (118514, 1, u'+  assert( pParse->azVar==0 );'), (118518, 1, u'+    assert( i>=0 );'), (118577, 1, u'+  assert( pzErrMsg!=0 );'), (119233, 1, u'+    assert( sqlite3GlobalConfig.nRefInitMutex==0 );'), (119250, 1, u'+    assert(sizeof(x)==8);'), (119251, 1, u'+    assert(sizeof(x)==sizeof(y));'), (119253, 1, u'+    assert( sqlite3IsNaN(y) );'), (119579, 1, u'+    assert( sz > (int)sizeof(LookasideSlot*) );'), (119820, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (119945, 1, u'+  assert( db->nDb<=2 );'), (119946, 1, u'+  assert( db->aDb==db->aDbStatic );'), (120005, 1, u'+  assert( db->lookaside.nOut==0 );  /* Fails on a lookaside memory leak */'), (120021, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (120242, 1, u'+  assert( count>=0 );'), (120373, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (120420, 1, u'+      assert( !db->mallocFailed );'), (120428, 1, u'+  assert(p || db->mallocFailed);'), (120492, 1, u'+    assert( rc!=SQLITE_OK );'), (120517, 1, u'+  assert( !db->mallocFailed );'), (120742, 1, u'+  assert( SQLITE_CHECKPOINT_FULL>SQLITE_CHECKPOINT_PASSIVE );'), (120743, 1, u'+  assert( SQLITE_CHECKPOINT_FULL<SQLITE_CHECKPOINT_RESTART );'), (120744, 1, u'+  assert( SQLITE_CHECKPOINT_PASSIVE+2==SQLITE_CHECKPOINT_RESTART );'), (120801, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (120802, 1, u'+  assert( !pnLog || *pnLog==-1 );'), (120803, 1, u'+  assert( !pnCkpt || *pnCkpt==-1 );'), (120872, 1, u'+    assert( !db->mallocFailed );'), (121002, 1, u'+  assert( sqlite3_mutex_held(db->mutex) );'), (121137, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_LENGTH]==SQLITE_MAX_LENGTH );'), (121138, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_SQL_LENGTH]==SQLITE_MAX_SQL_LENGTH );'), (121139, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_COLUMN]==SQLITE_MAX_COLUMN );'), (121140, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_EXPR_DEPTH]==SQLITE_MAX_EXPR_DEPTH );'), (121141, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_COMPOUND_SELECT]==SQLITE_MAX_COMPOUND_SELECT);'), (121142, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_VDBE_OP]==SQLITE_MAX_VDBE_OP );'), (121143, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_FUNCTION_ARG]==SQLITE_MAX_FUNCTION_ARG );'), (121144, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_ATTACHED]==SQLITE_MAX_ATTACHED );'), (121145, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_LIKE_PATTERN_LENGTH]=='), (121147, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_VARIABLE_NUMBER]==SQLITE_MAX_VARIABLE_NUMBER);'), (121148, 1, u'+  assert( aHardLimit[SQLITE_LIMIT_TRIGGER_DEPTH]==SQLITE_MAX_TRIGGER_DEPTH );'), (121149, 1, u'+  assert( SQLITE_LIMIT_TRIGGER_DEPTH==(SQLITE_N_LIMIT-1) );'), (121204, 1, u'+  assert( *pzErrMsg==0 );'), (121258, 1, u'+        assert( octet>=0 && octet<256 );'), (121431, 1, u'+  assert( SQLITE_OPEN_READONLY  == 0x01 );'), (121432, 1, u'+  assert( SQLITE_OPEN_READWRITE == 0x02 );'), (121433, 1, u'+  assert( SQLITE_OPEN_CREATE    == 0x04 );'), (121494, 1, u'+  assert( sizeof(db->aLimit)==sizeof(aHardLimit) );'), (121534, 1, u'+  assert( db->pDfltColl!=0 );'), (121648, 1, u'+    assert( db->mutex!=0 || isThreadsafe==0 || sqlite3GlobalConfig.bFullMutex==0 );'), (121652, 1, u'+  assert( db!=0 || rc==SQLITE_NOMEM );'), (121701, 1, u'+  assert( zFilename );'), (121702, 1, u'+  assert( ppDb );'), (121714, 1, u'+    assert( *ppDb || rc==SQLITE_NOMEM );'), (121739, 1, u'+  assert( !db->mallocFailed );'), (121759, 1, u'+  assert( !db->mallocFailed );'), (121780, 1, u'+  assert( !db->mallocFailed );'), (122047, 1, u'+    assert( pPager!=0 );'), (122049, 1, u'+    assert( fd!=0 );'), (122167, 1, u'+    case SQLITE_TESTCTRL_ASSERT: {'), (122169, 1, u'+      assert( (x = va_arg(ap,int))!=0 );'), (122428, 1, u'+#define assertMutexHeld() \\'), (122429, 1, u'+  assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) )'), (122461, 1, u'+    assert( p->pUnlockConnection || p->pBlockingConnection );'), (122466, 1, u'+      assert( p2->xUnlockNotify==p->xUnlockNotify || !seen );'), (122467, 1, u'+      assert( db==0 || p->pUnlockConnection!=db );'), (122468, 1, u'+      assert( db==0 || p->pBlockingConnection!=db );'), (122482, 1, u'+  assertMutexHeld();'), (122497, 1, u'+  assertMutexHeld();'), (122519, 1, u'+  assertMutexHeld();'), (122583, 1, u'+  assert( !db->mallocFailed );'), (122645, 1, u'+      assert( p->xUnlockNotify );'), (122652, 1, u'+      assert( aArg==aDyn || (aDyn==0 && aArg==aStatic) );'), (122653, 1, u'+      assert( nArg<=(int)ArraySize(aStatic) || aArg==aDyn );'), (123936, 1, u'+  assert( q - (unsigned char *)p <= FTS3_VARINT_MAX );'), (123984, 1, u'+  assert( a & 0x80 );'), (124091, 1, u'+  assert( p->nPendingData==0 );'), (124092, 1, u'+  assert( p->pSegments==0 );'), (124279, 1, u'+  assert( p->bHasStat==p->bFts4 );'), (124313, 1, u'+    assert( p->nPgsz>0 || rc!=SQLITE_OK );'), (124721, 1, u'+  assert( strlen(argv[0])==4 );'), (124722, 1, u'+  assert( (sqlite3_strnicmp(argv[0], "fts4", 4)==0 && isFts4)'), (124842, 1, u'+              assert( iOpt==6 );'), (124900, 1, u'+    assert( nString==0 );'), (124910, 1, u'+  assert( pTokenizer );'), (124914, 1, u'+    assert( zPrefix );'), (124978, 1, u'+    assert( zCsr <= &((char *)p)[nByte] );'), (125051, 1, u'+    assert( p->pSegments==0 );'), (125192, 1, u'+  assert( p->pSegments==0 );'), (125222, 1, u'+  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (125228, 1, u'+  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (125371, 1, u'+    assert( zBuffer );'), (125441, 1, u'+  assert( piLeaf || piLeaf2 );'), (125445, 1, u'+  assert( !piLeaf2 || !piLeaf || rc!=SQLITE_OK || (*piLeaf<=*piLeaf2) );'), (125482, 1, u'+  assert( iVal-*piPrev > 0 || (*piPrev==0 && iVal==0) );'), (125737, 1, u'+  assert( isSaveLeft==0 || isExact==0 );'), (125739, 1, u'+  assert( p!=0 && *p1!=0 && *p2!=0 );'), (125761, 1, u'+      assert( *p1!=POS_END && *p1!=POS_COLUMN );'), (125762, 1, u'+      assert( *p2!=POS_END && *p2!=POS_COLUMN );'), (125774, 1, u'+          assert( p );'), (125786, 1, u'+        assert( pp && p );'), (125792, 1, u'+      assert( (*p1&0xFE)==0 && (*p2&0xFE)==0 );'), (125951, 1, u'+  assert( *pbFirst || *piPrev==0 );'), (125952, 1, u'+  assert( *pbFirst==0 || iWrite>0 );'), (126060, 1, u'+  assert( *pnOut<=n1+n2+FTS3_VARINT_MAX-1 );'), (126093, 1, u'+  assert( nDist>0 );'), (126263, 1, u'+        assert( iOut>0 );'), (126408, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (126409, 1, u'+  assert( iLevel==FTS3_SEGCURSOR_ALL'), (126413, 1, u'+  assert( iLevel<FTS3_SEGDIR_MAXLEVEL );'), (126414, 1, u'+  assert( FTS3_SEGCURSOR_ALL<0 && FTS3_SEGCURSOR_PENDING<0 );'), (126415, 1, u'+  assert( isPrefix==0 || isScan==0 );'), (126617, 1, u'+  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (126687, 1, u'+  assert( eSearch>=0 && eSearch<=(FTS3_FULLTEXT_SEARCH+p->nColumn) );'), (126688, 1, u'+  assert( p->pSegments==0 );'), (126696, 1, u'+  assert( iIdx==nVal );'), (126726, 1, u'+    assert( p->base.zErrMsg==0 );'), (126810, 1, u'+  assert( iCol>=0 && iCol<=p->nColumn+2 );'), (126841, 1, u'+  assert( ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 );'), (126894, 1, u'+    assert( rc==SQLITE_OK || mxLevel==0 );'), (126909, 1, u'+  assert( p->pSegments==0 );'), (126910, 1, u'+  assert( p->nPendingData==0 );'), (126911, 1, u'+  assert( p->inTransaction!=1 );'), (126926, 1, u'+  assert( p->nPendingData==0 );'), (126927, 1, u'+  assert( p->inTransaction!=0 );'), (126928, 1, u'+  assert( p->pSegments==0 );'), (126941, 1, u'+  assert( p->inTransaction!=0 );'), (127014, 1, u'+  assert( nVal>=1 );'), (127049, 1, u'+  assert( nVal==1 );'), (127051, 1, u'+  assert( pCsr );'), (127077, 1, u'+  assert( nVal==1 );'), (127080, 1, u'+  assert( p );'), (127106, 1, u'+  assert( nVal==1 || nVal==2 );'), (127170, 1, u'+  assert( p->nPendingData==0 );'), (127211, 1, u'+  assert( ((Fts3Table *)pVtab)->inTransaction );'), (127212, 1, u'+  assert( ((Fts3Table *)pVtab)->mxSavepoint < iSavepoint );'), (127229, 1, u'+  assert( p->inTransaction );'), (127230, 1, u'+  assert( p->mxSavepoint >= iSavepoint );'), (127243, 1, u'+  assert( p->inTransaction );'), (127244, 1, u'+  assert( p->mxSavepoint >= iSavepoint );'), (127399, 1, u'+  assert( rc!=SQLITE_OK );'), (127444, 1, u'+      assert( pExpr->pPhrase->iDoclistToken==0 );'), (127469, 1, u'+  assert( iToken!=p->iDoclistToken );'), (127532, 1, u'+    assert( pToken->pDeferred==0 || pToken->pSegcsr==0 );'), (127542, 1, u'+    assert( pToken->pSegcsr==0 );'), (127564, 1, u'+  assert( pPhrase->doclist.bFreeList==0 );'), (127591, 1, u'+        assert( iPrev>=0 );'), (127714, 1, u'+  assert( rc!=SQLITE_OK || p->nToken<1 || p->aToken[0].pSegcsr==0 || p->bIncr );'), (127739, 1, u'+  assert( nDoclist>0 );'), (127740, 1, u'+  assert( *pbEof==0 );'), (127741, 1, u'+  assert( p || *piDocid==0 );'), (127742, 1, u'+  assert( !p || (p>aDoclist && p<&aDoclist[nDoclist]) );'), (127794, 1, u'+  assert( nDoclist>0 );'), (127795, 1, u'+  assert( *pbEof==0 );'), (127796, 1, u'+  assert( p || *piDocid==0 );'), (127797, 1, u'+  assert( !p || (p>=aDoclist && p<=&aDoclist[nDoclist]) );'), (127858, 1, u'+    assert( pIter>=&pDL->aAll[pDL->nAll] || *pIter );'), (127893, 1, u'+    assert( p->bIgnore==0 );'), (127894, 1, u'+    assert( pPhrase->aToken[iToken].pSegcsr==0 );'), (127901, 1, u'+    assert( pToken->pDeferred==0 );'), (127902, 1, u'+    assert( pToken->pSegcsr || pPhrase->iDoclistToken>=0 );'), (127904, 1, u'+      assert( p->bIgnore==0 );'), (127947, 1, u'+  assert( p->bIncr==1 );'), (127959, 1, u'+    assert( p->nToken<=MAX_INCR_PHRASE_TOKENS );'), (127960, 1, u'+    assert( p->iDoclistToken<MAX_INCR_PHRASE_TOKENS );'), (127975, 1, u'+      assert( rc!=SQLITE_OK || a[p->nToken-1].bIgnore==0 );'), (127976, 1, u'+      assert( rc!=SQLITE_OK || bMaxSet );'), (128147, 1, u'+      assert( pExpr->eType==FTSQUERY_OR'), (128151, 1, u'+      assert( pExpr->pLeft && pExpr->pRight );'), (128203, 1, u'+    assert( a );'), (128217, 1, u'+    assert( pCsr->nRowAvg>0 );'), (128278, 1, u'+  assert( rc!=SQLITE_OK || nDocSize>0 );'), (128315, 1, u'+    assert( pTC );'), (128340, 1, u'+        assert( rc==SQLITE_OK || pList==0 );'), (128464, 1, u'+  assert( pPhrase->doclist.pList );'), (128472, 1, u"+    assert( pPhrase->doclist.pList[nNew]=='\\0' );"), (128473, 1, u'+    assert( nNew<=pPhrase->doclist.nList && nNew>0 );'), (128531, 1, u'+    assert( pExpr->bEof==0 );'), (128539, 1, u'+        assert( !pLeft->bDeferred || !pRight->bDeferred );'), (128577, 1, u'+        assert( pLeft->bStart || pLeft->iDocid==pRight->iDocid );'), (128578, 1, u'+        assert( pRight->bStart || pLeft->iDocid==pRight->iDocid );'), (128606, 1, u'+          assert( *pRc!=SQLITE_OK || pRight->bStart );'), (128708, 1, u'+          assert( p->pParent && p->pParent->pLeft==p );'), (128803, 1, u'+          assert( pExpr->bDeferred || pPhrase->doclist.bFreeList==0 );'), (128879, 1, u'+  assert( pCsr->isEof==0 );'), (128887, 1, u'+      assert( sqlite3_data_count(pCsr->pStmt)==0 );'), (128931, 1, u'+          assert( pToken->pDeferred==0 );'), (128966, 1, u'+      assert( *p );'), (129008, 1, u'+  assert( pExpr->eType==FTSQUERY_PHRASE );'), (129025, 1, u'+    assert( pRoot->bStart );'), (129030, 1, u'+      assert( pE->aMI==0 );'), (129043, 1, u'+        assert( sqlite3_data_count(pCsr->pStmt)==0 );'), (129076, 1, u'+        assert( pRoot->bEof==0 );'), (129124, 1, u'+    assert( pCsr->nDoc>0 );'), (129132, 1, u'+      assert( pExpr->aMI );'), (129177, 1, u'+  assert( iCol>=0 && iCol<pTab->nColumn );'), (129218, 1, u'+      assert( rc!=SQLITE_OK || pPhrase->bIncr==0 );'), (129235, 1, u'+    assert( bDescDoclist==0 || bDescDoclist==1 );'), (129236, 1, u'+    assert( pCsr->bDesc==0 || pCsr->bDesc==1 );'), (129669, 1, u'+          assert( iCol==0 );'), (129688, 1, u'+        default: assert( eState==3 );'), (129730, 1, u'+  assert( idxStr==0 );'), (129731, 1, u'+  assert( idxNum==FTS4AUX_EQ_CONSTRAINT || idxNum==0'), (129763, 1, u'+    assert( (iEq==0 && iGe==-1) || (iEq==-1 && iGe==0) );'), (129818, 1, u'+  assert( p->isEof==0 );'), (129841, 1, u'+      assert( iCol==4 );'), (130042, 1, u'+  assert( rc==SQLITE_OK || pCsr==0 );'), (130242, 1, u'+        assert( nToken==ii );'), (130277, 1, u'+      assert( nTemp==0 );'), (130362, 1, u'+        assert( nKey==4 );'), (130460, 1, u'+  assert( p->eType!=FTSQUERY_PHRASE );'), (130468, 1, u'+  assert( p->eType==FTSQUERY_AND );'), (130491, 1, u'+    assert( pSplit->pParent->pRight==pSplit );'), (130569, 1, u'+          assert( pRet && pPrev );'), (130601, 1, u'+            assert( pPrev && pPrev->pLeft && pPrev->pRight==0 );'), (130612, 1, u'+      assert( nByte>0 );'), (130614, 1, u'+    assert( rc!=SQLITE_OK || (nByte>0 && nByte<=nIn) );'), (130707, 1, u'+        assert( p->pParent==0 || p->pParent->pLeft==p );'), (130708, 1, u'+        assert( p->pLeft && p->pRight );'), (130716, 1, u'+        assert( pParent==0 || pParent->pLeft==p );'), (130731, 1, u'+            assert( pFree );'), (130756, 1, u'+        assert( pParent->pParent==0 || pParent->pParent->pLeft==pParent );'), (130761, 1, u'+          assert( pParent==pRoot );'), (130779, 1, u'+              assert( pFree!=0 );'), (130806, 1, u'+      assert( pFree==0 );'), (130859, 1, u'+  assert( rc==SQLITE_OK || *ppExpr==0 );'), (130938, 1, u'+  assert( p->eType==FTSQUERY_PHRASE || p->pPhrase==0 );'), (130953, 1, u'+  assert( pDel==0 || pDel->pParent==0 );'), (130955, 1, u'+    assert( p->pParent==0 || p==p->pParent->pRight || p==p->pParent->pLeft );'), (130963, 1, u'+        assert( p==p->pParent->pRight || p==p->pParent->pLeft );'), (131111, 1, u'+  assert( rc==SQLITE_NOMEM || rc==SQLITE_OK );'), (131135, 1, u'+    assert( rc==SQLITE_OK || pExpr==0 );'), (131240, 1, u'+  assert( pNew!=0 );'), (131241, 1, u'+  assert( keyClass>=FTS3_HASH_STRING && keyClass<=FTS3_HASH_BINARY );'), (131257, 1, u'+  assert( pH!=0 );'), (131324, 1, u'+    assert( keyClass==FTS3_HASH_BINARY );'), (131339, 1, u'+    assert( keyClass==FTS3_HASH_BINARY );'), (131381, 1, u'+  assert( (new_size & (new_size-1))==0 );'), (131456, 1, u'+    assert( pH->first==0 );'), (131457, 1, u'+    assert( pH->count==0 );'), (131472, 1, u'+  assert( xHash!=0 );'), (131474, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (131517, 1, u'+  assert( pH!=0 );'), (131519, 1, u'+  assert( xHash!=0 );'), (131521, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (131540, 1, u'+  assert( pH->htsize>0 );'), (131555, 1, u'+  assert( pH->htsize>0 );'), (131556, 1, u'+  assert( (pH->htsize & (pH->htsize-1))==0 );'), (131718, 1, u"+  assert( x>='a' && x<='z' );"), (131727, 1, u"+  assert( x>='a' && x<='z' );"), (132274, 1, u'+  assert( argc==1 || argc==2 );'), (132402, 1, u'+    assert( rc!=SQLITE_OK || *ppTok );'), (132621, 1, u'+  assert( rc==SQLITE_OK );'), (132622, 1, u'+  assert( p1==p2 );'), (132624, 1, u'+  assert( rc==SQLITE_ERROR );'), (132625, 1, u'+  assert( p2==0 );'), (132626, 1, u'+  assert( 0==strcmp(sqlite3_errmsg(db), "unknown tokenizer: nosuchtokenizer") );'), (132630, 1, u'+  assert( rc==SQLITE_OK );'), (132632, 1, u'+  assert( rc==SQLITE_OK );'), (132633, 1, u'+  assert( p2==p1 );'), (133126, 1, u'+  assert( (rc==SQLITE_OK)==(pMod!=0) );'), (133191, 1, u'+  assert( pInfo->estimatedCost>1000000.0 );'), (133336, 1, u'+      assert( iCol==4 );'), (133770, 1, u'+  assert( SizeofArray(azSql)==SizeofArray(p->aStmt) );'), (133771, 1, u'+  assert( eStmt<SizeofArray(azSql) && eStmt>=0 );'), (133788, 1, u'+      assert( rc==SQLITE_OK || pStmt==0 );'), (133944, 1, u'+  assert( iLangid>=0 );'), (133945, 1, u'+  assert( p->nIndex>0 );'), (133946, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (133979, 1, u'+  assert( iLevel==FTS3_SEGCURSOR_ALL || iLevel>=0 );'), (133980, 1, u'+  assert( iLevel<FTS3_SEGDIR_MAXLEVEL );'), (133981, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (134070, 1, u'+  assert( !p || p->iLastDocid<=iDocid );'), (134075, 1, u'+      assert( p->nData<p->nSpace );'), (134076, 1, u'+      assert( p->aData[p->nData]==0 );'), (134096, 1, u'+    assert( iPos>p->iLastPos || (iPos==0 && p->iLastPos==0) );'), (134142, 1, u'+      assert( 0==fts3HashFind(pHash, zToken, nToken) );'), (134182, 1, u'+  assert( pTokenizer && pModule );'), (134243, 1, u'+  assert( iLangid>=0 );'), (134405, 1, u'+  assert( p->zContentTbl==0 || bContent==0 );'), (134442, 1, u'+  assert( *pbFound==0 );'), (134504, 1, u'+  assert( iLangid>=0 );'), (134505, 1, u'+  assert( p->nIndex>=1 );'), (134574, 1, u'+  assert( pnBlob );'), (134649, 1, u'+  assert( !pReader->pBlob'), (134706, 1, u'+        assert( pReader->aNode );'), (134715, 1, u'+    assert( pReader->iCurrentBlock<=pReader->iLeafEndBlock );'), (134725, 1, u'+    assert( pReader->pBlob==0 );'), (134733, 1, u'+  assert( !fts3SegReaderIsPending(pReader) );'), (134786, 1, u'+  assert( pReader->aDoclist );'), (134787, 1, u'+  assert( !pReader->pOffsetList );'), (134826, 1, u'+  assert( p );'), (134861, 1, u'+      assert( *p==0 );'), (134916, 1, u'+  assert( p->bFts4 );'), (134917, 1, u'+  assert( pgsz>0 );'), (134970, 1, u'+  assert( iStartLeaf<=iEndLeaf );'), (135152, 1, u'+  assert( rc!=0 );'), (135176, 1, u'+  assert( pLhs->aNode && pRhs->aNode );'), (135188, 1, u'+  assert( pLhs->aNode && pRhs->aNode );'), (135233, 1, u'+  assert( nSuspect<=nSegment );'), (135250, 1, u'+    assert( xCmp(apSegment[i], apSegment[i+1])<0 );'), (135382, 1, u'+        assert( pTree->aData==(char *)&pTree[1] );'), (135465, 1, u'+  assert( iHeight>=1 && iHeight<128 );'), (135516, 1, u'+      assert( iNextLeaf==iFree );'), (135538, 1, u'+      assert( pRight==0 || p->zMalloc==0 );'), (135626, 1, u'+    assert( nPrefix<nTerm );'), (135651, 1, u'+  assert( nData+nReq<=pWriter->nSize );'), (135677, 1, u'+    assert( pWriter->zTerm==pWriter->zMalloc );'), (135783, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (135859, 1, u'+  assert( iLevel>=0 || iLevel==FTS3_SEGCURSOR_ALL );'), (135909, 1, u'+  assert( iCol>=0 );'), (136007, 1, u'+        assert( (pMsr->aBuffer[nList] & 0xFE)==0x00 );'), (136082, 1, u'+  assert( pCsr->pFilter==0 );'), (136083, 1, u'+  assert( zTerm && nTerm>0 );'), (136105, 1, u'+  assert( iCol<0 || iCol<p->nColumn );'), (136126, 1, u'+  assert( pCsr->zTerm==0 );'), (136127, 1, u'+  assert( pCsr->nTerm==0 );'), (136128, 1, u'+  assert( pCsr->aDoclist==0 );'), (136129, 1, u'+  assert( pCsr->nDoclist==0 );'), (136185, 1, u'+    assert( rc==SQLITE_OK );'), (136216, 1, u'+    assert( isIgnoreEmpty || (isRequirePos && !isColFilter) );'), (136272, 1, u'+          assert( iDelta>0 || (nDoclist==0 && iDelta==iDocid) );'), (136273, 1, u'+          assert( nDoclist>0 || iDelta==iDocid );'), (136363, 1, u'+  assert( iLevel==FTS3_SEGCURSOR_ALL'), (136367, 1, u'+  assert( iLevel<FTS3_SEGDIR_MAXLEVEL );'), (136368, 1, u'+  assert( iIndex>=0 && iIndex<p->nIndex );'), (136397, 1, u'+  assert( csr.nSegment>0 );'), (136398, 1, u'+  assert( iNewLevel>=getAbsoluteLevel(p, iLangid, iIndex, 0) );'), (136399, 1, u'+  assert( iNewLevel<getAbsoluteLevel(p, iLangid, iIndex,FTS3_SEGDIR_MAXLEVEL) );'), (136413, 1, u'+  assert( pWriter );'), (136491, 1, u'+    assert(j<=nBuf);'), (136765, 1, u'+    assert( pCsr->nSegment==0 );'), (136883, 1, u'+  assert( p->aNode );'), (136907, 1, u'+  assert( p->iOff<=p->nNode );'), (136961, 1, u'+  assert( nTerm>0 );'), (137012, 1, u'+      assert( pNode->block.nAlloc>=p->nNodeSize );'), (137025, 1, u'+  assert( 0 );'), (137068, 1, u'+  assert( pNode->n>0 );'), (137069, 1, u"+  assert( (pNode->a[0]=='\\0')==(aDoclist!=0) );"), (137092, 1, u'+  assert( pNode->n<=pNode->nAlloc );'), (137205, 1, u'+    assert( *pRc || pNode->block.nAlloc==0 );'), (137206, 1, u'+    assert( *pRc || pNode->key.nAlloc==0 );'), (137383, 1, u'+          assert( reader.aNode );'), (137636, 1, u'+  assert( p->bIgnoreSavepoint==0 );'), (137655, 1, u'+    assert( pNode->nAlloc>=1+sqlite3Fts3VarintLen(iChild) );'), (137658, 1, u'+    assert( pNode->nAlloc>=1 );'), (137710, 1, u'+  assert( pNew->n<=pNew->nAlloc );'), (137831, 1, u'+    assert( j<pCsr->nSegment && pSeg->iIdx==i );'), (138144, 1, u'+      assert( p->bFts4==0 );'), (138171, 1, u'+    assert( p->bFts4==0 );'), (138229, 1, u'+  assert( *pRc==SQLITE_OK );'), (138504, 1, u'+    assert( pCsr->isRequireSeek==0 );'), (138592, 1, u'+  assert( pToken->pDeferred==0 );'), (138667, 1, u'+  assert( p->pSegments==0 );'), (138668, 1, u'+  assert('), (138753, 1, u'+    assert( sqlite3_value_type(apVal[0])==SQLITE_INTEGER );'), (138771, 1, u'+      assert( p->iPrevDocid==*pRowid );'), (138962, 1, u'+    assert( pExpr->pLeft && pExpr->pRight );'), (139144, 1, u'+        assert( iCsr>=iStart );'), (139181, 1, u'+  assert( rc==SQLITE_OK || pCsr==0 );'), (139186, 1, u'+    assert( iFirst>=0 );'), (139192, 1, u'+    assert( rc!=SQLITE_OK || ('), (139278, 1, u'+    assert( iScore>=0 );'), (139321, 1, u'+  assert( pStr->z!=0 && (pStr->nAlloc >= pStr->n+nAppend+1) );'), (139401, 1, u'+      assert( nShift<=nDesired );'), (139656, 1, u'+      assert( cArg==FTS3_MATCHINFO_HITS );'), (139679, 1, u'+  assert( sqlite3_data_count(pStmt)==1 );'), (139911, 1, u'+        assert( zArg[i]==FTS3_MATCHINFO_HITS );'), (139957, 1, u'+    assert( pCsr->aMatchinfo );'), (140084, 1, u'+    assert( (mCovered&mSeen)==mCovered );'), (140088, 1, u'+  assert( nFToken>0 );'), (140140, 1, u'+    assert( iPos>=0 );'), (140174, 1, u'+  assert( pCsr->isRequireSeek==0 );'), (140250, 1, u'+        assert( iCurrent<=iMinPos );'), (140280, 1, u'+  assert( rc!=SQLITE_DONE );'), (140478, 1, u'+  assert( bAlnum==0 || bAlnum==1 );'), (140482, 1, u'+    assert( (sqlite3FtsUnicodeIsalnum(iCode) & 0xFFFFFFFE)==0 );'), (140547, 1, u'+  assert( (sqlite3FtsUnicodeIsalnum(iCode) & 0xFFFFFFFE)==0 );'), (140878, 1, u'+    assert( aEntry[0]<key );'), (140879, 1, u'+    assert( key>=aEntry[iRes] );'), (140935, 1, u'+  assert( key>=aDia[iRes] );'), (141057, 1, u'+  assert( c>=0 );'), (141058, 1, u'+  assert( sizeof(unsigned short)==2 && sizeof(unsigned char)==1 );'), (141077, 1, u'+    assert( iRes<0 || c>=aEntry[iRes].iCode );'), (141083, 1, u'+        assert( ret>0 );'), (141484, 1, u'+  assert( sizeof(RtreeCoord)==4 );'), (141485, 1, u'+  assert( sizeof(u32)==4 );'), (141548, 1, u'+  assert( pNode->pNext==0 );'), (141561, 1, u'+    for( ; (*pp)!=pNode; pp = &(*pp)->pNext){ assert(*pp); }'), (141605, 1, u'+    assert( !pParent || !pNode->pParent || pNode->pParent==pParent );'), (141724, 1, u'+  assert( nCell<=nMaxCell );'), (141767, 1, u'+    assert( pNode->nRef>0 );'), (141796, 1, u'+  assert( iCell<NCELL(pNode) );'), (142001, 1, u'+  assert( pConstraint->op==RTREE_MATCH );'), (142002, 1, u'+  assert( pConstraint->pGeom );'), (142031, 1, u'+    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (142049, 1, u'+        assert( p->op==RTREE_MATCH );'), (142083, 1, u'+    assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE'), (142094, 1, u'+        assert( p->op==RTREE_MATCH );'), (142133, 1, u'+  assert( iHeight>=0 );'), (142162, 1, u'+    assert( pCursor->pNode==pChild );'), (142220, 1, u'+  assert( pCsr->pNode );'), (142260, 1, u'+  assert(pCsr->pNode);'), (142285, 1, u'+      assert( pRtree->eCoordType==RTREE_COORD_INT32 );'), (142387, 1, u'+      assert( rc==SQLITE_OK );'), (142401, 1, u'+        assert( (idxStr==0 && argc==0)'), (142436, 1, u'+        assert( pCsr->pNode==pRoot );'), (142443, 1, u'+        assert( pCsr->pNode==pRoot );'), (142447, 1, u'+      assert( rc!=SQLITE_OK || !pCsr->pNode || pCsr->iCell<NCELL(pCsr->pNode) );'), (142512, 1, u'+  assert( pIdxInfo->idxStr==0 );'), (142547, 1, u'+          assert( p->op==SQLITE_INDEX_CONSTRAINT_MATCH );'), (142659, 1, u'+    assert( iExclude==-1 );'), (143067, 1, u'+        assert( left<=right );'), (143134, 1, u'+        assert( xleft1<=xright1 && (xleft1<xright1 || xleft2<=xright2) );'), (143502, 1, u'+  assert( pNode->nRef==1 );'), (143591, 1, u'+  assert( pParent || pNode->iNode==1 );'), (143915, 1, u'+  assert(nData>=1);'), (143932, 1, u'+    assert( nData==(pRtree->nDim*2 + 3) );'), (144613, 1, u'+    assert(uPattern!=0);'), (144797, 1, u'+      assert(!pExpr);'), (144863, 1, u'+  assert(nArg==1 || nArg==2);'), (144922, 1, u'+  assert(!"Unexpected return value from ucol_strcoll()");'), (144951, 1, u'+  assert(nArg==2);'), (144964, 1, u'+  assert(p);'), (145241, 1, u'+    assert(iStart<=iEnd);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert((layer->input.matrix.rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (5, 1, u'+\t\t\tassert((layer->input.matrix.cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: _ccv_convnet_layer_deduce_output_format
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert((layer->input.matrix.rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (5, 1, u'+\t\t\tassert((layer->input.matrix.cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert((layer->input.matrix.rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (5, 1, u'+\t\t\tassert((layer->input.matrix.cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert((layer->input.matrix.rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (5, 1, u'+\t\t\tassert((layer->input.matrix.cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: _ccv_convnet_layer_deduce_output_format
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert((layer->input.matrix.rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (5, 1, u'+\t\t\tassert((layer->input.matrix.cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert((layer->input.matrix.rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (5, 1, u'+\t\t\tassert((layer->input.matrix.cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\tassert(ccv_convnet_verify(convnet, 10) == 0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\tassert(ccv_convnet_verify(convnet, 10) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\tassert(ccv_convnet_verify(convnet, 10) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\tassert(rows != 0 && cols != 0);'), (13, 2, u"-\t\t\tassert(layer->net.convolutional.rows % 2); // as of now, don't support even number of kernel size"), (14, 2, u'-\t\t\tassert(layer->net.convolutional.cols % 2);'), (15, 2, u'-\t\t\tassert((a_rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (16, 2, u'-\t\t\tassert((a_cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);'), (30, 2, u'-\t\t\tassert((a_rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (31, 2, u'-\t\t\tassert((a_cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
Total add: 12
Total del: 28
Header: ccv_convnet_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\tassert(rows != 0 && cols != 0);'), (13, 2, u"-\t\t\tassert(layer->net.convolutional.rows % 2); // as of now, don't support even number of kernel size"), (14, 2, u'-\t\t\tassert(layer->net.convolutional.cols % 2);'), (15, 2, u'-\t\t\tassert((a_rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (16, 2, u'-\t\t\tassert((a_cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);'), (30, 2, u'-\t\t\tassert((a_rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (31, 2, u'-\t\t\tassert((a_cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\tassert(rows != 0 && cols != 0);'), (13, 2, u"-\t\t\tassert(layer->net.convolutional.rows % 2); // as of now, don't support even number of kernel size"), (14, 2, u'-\t\t\tassert(layer->net.convolutional.cols % 2);'), (15, 2, u'-\t\t\tassert((a_rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (16, 2, u'-\t\t\tassert((a_cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);'), (30, 2, u'-\t\t\tassert((a_rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (31, 2, u'-\t\t\tassert((a_cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(cache_types > 0 && cache_types <= 16);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: ccv_cache_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(cache_types > 0 && cache_types <= 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(cache_types > 0 && cache_types <= 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(cache_types > 0 && cache_types <= 16);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_cache_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(cache_types > 0 && cache_types <= 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(cache_types > 0 && cache_types <= 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert((a->rows - size) % strides == 0);'), (7, 2, u'-\tassert((a->cols - size) % strides == 0);')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: _ccv_convnet_average_pool_forward_propagate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert((a->rows - size) % strides == 0);'), (7, 2, u'-\tassert((a->cols - size) % strides == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert((a->rows - size) % strides == 0);'), (7, 2, u'-\tassert((a->cols - size) % strides == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert((a_rows - layer->net.pool.size) % layer->net.pool.strides == 0);'), (3, 2, u'-\t\t\tassert((a_cols - layer->net.pool.size) % layer->net.pool.strides == 0);'), (6, 1, u'+\t\t\tassert((a_rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (7, 1, u'+\t\t\tassert((a_cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: _ccv_convnet_compute_output_scale
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert((a_rows - layer->net.pool.size) % layer->net.pool.strides == 0);'), (3, 2, u'-\t\t\tassert((a_cols - layer->net.pool.size) % layer->net.pool.strides == 0);'), (6, 1, u'+\t\t\tassert((a_rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (7, 1, u'+\t\t\tassert((a_cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert((a_rows - layer->net.pool.size) % layer->net.pool.strides == 0);'), (3, 2, u'-\t\t\tassert((a_cols - layer->net.pool.size) % layer->net.pool.strides == 0);'), (6, 1, u'+\t\t\tassert((a_rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);'), (7, 1, u'+\t\t\tassert((a_cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == convnet->channels);'), (6, 2, u'-\tassert(a->rows == convnet->rows);'), (7, 2, u'-\tassert(a->cols == convnet->cols);'), (11, 1, u'+\tassert(batch == 1);'), (12, 1, u'+\tassert(CCV_GET_CHANNEL((*a)->type) == convnet->channels);'), (13, 1, u'+\tassert((*a)->rows == convnet->rows);'), (14, 1, u'+\tassert((*a)->cols == convnet->cols);')]
===========================================
===========================================
Total add: 8
Total del: 4
Header: _ccv_convnet_average_pool_forward_propagate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == convnet->channels);'), (6, 2, u'-\tassert(a->rows == convnet->rows);'), (7, 2, u'-\tassert(a->cols == convnet->cols);'), (11, 1, u'+\tassert(batch == 1);'), (12, 1, u'+\tassert(CCV_GET_CHANNEL((*a)->type) == convnet->channels);'), (13, 1, u'+\tassert((*a)->rows == convnet->rows);'), (14, 1, u'+\tassert((*a)->cols == convnet->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == convnet->channels);'), (6, 2, u'-\tassert(a->rows == convnet->rows);'), (7, 2, u'-\tassert(a->cols == convnet->cols);'), (11, 1, u'+\tassert(batch == 1);'), (12, 1, u'+\tassert(CCV_GET_CHANNEL((*a)->type) == convnet->channels);'), (13, 1, u'+\tassert((*a)->rows == convnet->rows);'), (14, 1, u'+\tassert((*a)->cols == convnet->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-\tassert(type == 0 || CCV_GET_DATA_TYPE(type) == CCV_32F);')]
===========================================
===========================================
Total add: 4
Total del: 5
Header: ccv_convnet_encode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-\tassert(type == 0 || CCV_GET_DATA_TYPE(type) == CCV_32F);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-\tassert(type == 0 || CCV_GET_DATA_TYPE(type) == CCV_32F);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\tassert(batch == 1);')]
===========================================
===========================================
Total add: 7
Total del: 2
Header: ccv_convnet_encode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\tassert(batch == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\tassert(batch == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->rows * db->rows == layer->wnum);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_convnet_full_connect_forward_propagate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->rows * db->rows == layer->wnum);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->rows * db->rows == layer->wnum);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(argc == 5);')]
===========================================
===========================================
Total add: 64
Total del: 0
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(argc == 5);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(argc == 5);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: _ccv_convnet_compute_softmax
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->rows == rows);'), (3, 1, u'+\tassert(a->cols == cols);'), (4, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == count);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: _ccv_convnet_convolutional_backward_propagate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->rows == rows);'), (3, 1, u'+\tassert(a->cols == cols);'), (4, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->rows == rows);'), (3, 1, u'+\tassert(a->cols == cols);'), (4, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tassert(CCV_GET_CHANNEL(a->type) == CCV_GET_CHANNEL(n->type));'), (5, 1, u'+\t\tassert(CCV_GET_CHANNEL(a->type) == CCV_GET_CHANNEL(m->type));')]
===========================================
===========================================
Total add: 33
Total del: 1
Header: _ccv_convnet_max_pool_backward_propagate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tassert(CCV_GET_CHANNEL(a->type) == CCV_GET_CHANNEL(n->type));'), (5, 1, u'+\t\tassert(CCV_GET_CHANNEL(a->type) == CCV_GET_CHANNEL(m->type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tassert(CCV_GET_CHANNEL(a->type) == CCV_GET_CHANNEL(n->type));'), (5, 1, u'+\t\tassert(CCV_GET_CHANNEL(a->type) == CCV_GET_CHANNEL(m->type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tassert(CCV_GET_CHANNEL(a->type) == CCV_GET_CHANNEL(m->type));')]
===========================================
===========================================
Total add: 27
Total del: 1
Header: _ccv_convnet_average_pool_backward_propagate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tassert(CCV_GET_CHANNEL(a->type) == CCV_GET_CHANNEL(m->type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tassert(CCV_GET_CHANNEL(a->type) == CCV_GET_CHANNEL(m->type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\tassert(CCV_GET_CHANNEL(m->type) == ch);'), (13, 1, u'+\tassert(CCV_GET_DATA_TYPE(m->type) == CCV_32F);')]
===========================================
===========================================
Total add: 116
Total del: 0
Header: _ccv_convnet_convolutional_backward_propagate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\tassert(CCV_GET_CHANNEL(m->type) == ch);'), (13, 1, u'+\tassert(CCV_GET_DATA_TYPE(m->type) == CCV_32F);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\tassert(CCV_GET_CHANNEL(m->type) == ch);'), (13, 1, u'+\tassert(CCV_GET_DATA_TYPE(m->type) == CCV_32F);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tassert(rows != 0 && cols != 0);'), (11, 1, u"+\t\t\tassert(layer->net.convolutional.rows % 2); // as of now, don't support even number of kernel size"), (12, 1, u'+\t\t\tassert(layer->net.convolutional.cols % 2);'), (13, 1, u'+\t\t\tassert((a_rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (14, 1, u'+\t\t\tassert((a_cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);'), (24, 1, u'+\t\t\tassert((a_rows - layer->net.pool.size) % layer->net.pool.strides == 0);'), (25, 1, u'+\t\t\tassert((a_cols - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
Total add: 32
Total del: 1
Header: ccv_convnet_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tassert(rows != 0 && cols != 0);'), (11, 1, u"+\t\t\tassert(layer->net.convolutional.rows % 2); // as of now, don't support even number of kernel size"), (12, 1, u'+\t\t\tassert(layer->net.convolutional.cols % 2);'), (13, 1, u'+\t\t\tassert((a_rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (14, 1, u'+\t\t\tassert((a_cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);'), (24, 1, u'+\t\t\tassert((a_rows - layer->net.pool.size) % layer->net.pool.strides == 0);'), (25, 1, u'+\t\t\tassert((a_cols - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tassert(rows != 0 && cols != 0);'), (11, 1, u"+\t\t\tassert(layer->net.convolutional.rows % 2); // as of now, don't support even number of kernel size"), (12, 1, u'+\t\t\tassert(layer->net.convolutional.cols % 2);'), (13, 1, u'+\t\t\tassert((a_rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0);'), (14, 1, u'+\t\t\tassert((a_cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0);'), (24, 1, u'+\t\t\tassert((a_rows - layer->net.pool.size) % layer->net.pool.strides == 0);'), (25, 1, u'+\t\t\tassert((a_cols - layer->net.pool.size) % layer->net.pool.strides == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-\tassert(kernel_rows % 2); // as of now, don't support even number of kernel size"), (3, 2, u'-\tassert(kernel_cols % 2);'), (4, 2, u'-\tassert((a->rows + border * 2 - kernel_rows) % strides == 0);'), (5, 2, u'-\tassert((a->cols + border * 2 - kernel_cols) % strides == 0);')]
===========================================
===========================================
Total add: 1
Total del: 6
Header: _ccv_convnet_convolutional_forward_propagate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-\tassert(kernel_rows % 2); // as of now, don't support even number of kernel size"), (3, 2, u'-\tassert(kernel_cols % 2);'), (4, 2, u'-\tassert((a->rows + border * 2 - kernel_rows) % strides == 0);'), (5, 2, u'-\tassert((a->cols + border * 2 - kernel_cols) % strides == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u"-\tassert(kernel_rows % 2); // as of now, don't support even number of kernel size"), (3, 2, u'-\tassert(kernel_cols % 2);'), (4, 2, u'-\tassert((a->rows + border * 2 - kernel_rows) % strides == 0);'), (5, 2, u'-\tassert((a->cols + border * 2 - kernel_cols) % strides == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert((a->rows - size) % strides == 0);'), (7, 2, u'-\tassert((a->cols - size) % strides == 0);')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: _ccv_convnet_max_pool_forward_propagate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert((a->rows - size) % strides == 0);'), (7, 2, u'-\tassert((a->cols - size) % strides == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert((a->rows - size) % strides == 0);'), (7, 2, u'-\tassert((a->cols - size) % strides == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == layer->net.convolutional.channels);'), (12, 1, u"+\tassert(kernel_rows % 2); // as of now, don't support even number of kernel size"), (13, 1, u'+\tassert(kernel_cols % 2);'), (14, 1, u'+\tassert((a->rows + border * 2 - kernel_rows) % strides == 0);'), (15, 1, u'+\tassert((a->cols + border * 2 - kernel_cols) % strides == 0);'), (19, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == ch);'), (59, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == convnet->channels);'), (60, 1, u'+\tassert(a->rows == convnet->rows);'), (61, 1, u'+\tassert(a->cols == convnet->cols);'), (73, 1, u'+\tassert(type == 0 || CCV_GET_DATA_TYPE(type) == CCV_32F);')]
===========================================
===========================================
Total add: 84
Total del: 12
Header: _ccv_convnet_convolutional_forward_propagate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == layer->net.convolutional.channels);'), (12, 1, u"+\tassert(kernel_rows % 2); // as of now, don't support even number of kernel size"), (13, 1, u'+\tassert(kernel_cols % 2);'), (14, 1, u'+\tassert((a->rows + border * 2 - kernel_rows) % strides == 0);'), (15, 1, u'+\tassert((a->cols + border * 2 - kernel_cols) % strides == 0);'), (19, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == ch);'), (59, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == convnet->channels);'), (60, 1, u'+\tassert(a->rows == convnet->rows);'), (61, 1, u'+\tassert(a->cols == convnet->cols);'), (73, 1, u'+\tassert(type == 0 || CCV_GET_DATA_TYPE(type) == CCV_32F);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == layer->net.convolutional.channels);'), (12, 1, u"+\tassert(kernel_rows % 2); // as of now, don't support even number of kernel size"), (13, 1, u'+\tassert(kernel_cols % 2);'), (14, 1, u'+\tassert((a->rows + border * 2 - kernel_rows) % strides == 0);'), (15, 1, u'+\tassert((a->cols + border * 2 - kernel_cols) % strides == 0);'), (19, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == ch);'), (59, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == convnet->channels);'), (60, 1, u'+\tassert(a->rows == convnet->rows);'), (61, 1, u'+\tassert(a->cols == convnet->cols);'), (73, 1, u'+\tassert(type == 0 || CCV_GET_DATA_TYPE(type) == CCV_32F);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(0 && "ccv_icf_classifier_cascade_new requires GSL library support");')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: ccv_icf_classifier_cascade_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(0 && "ccv_icf_classifier_cascade_new requires GSL library support");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(0 && "ccv_icf_classifier_cascade_new requires GSL library support");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(0 && "ccv_icf_classifier_cascade_soft requires GSL library support");')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: ccv_icf_classifier_cascade_soft
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(0 && "ccv_icf_classifier_cascade_soft requires GSL library support");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(0 && "ccv_icf_classifier_cascade_soft requires GSL library support");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert(0 && "ccv_write requires libjpeg support for JPEG format");')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: ccv_write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert(0 && "ccv_write requires libjpeg support for JPEG format");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert(0 && "ccv_write requires libjpeg support for JPEG format");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert(0 && "ccv_write requires libpng support for PNG format");')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: ccv_write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert(0 && "ccv_write requires libpng support for PNG format");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert(0 && "ccv_write requires libpng support for PNG format");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(working_dir != 0);'), (3, 1, u'+\tassert(classifier_cascade != 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(working_dir != 0);'), (3, 1, u'+\tassert(classifier_cascade != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(working_dir != 0);'), (3, 1, u'+\tassert(classifier_cascade != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\tassert(cascade && "classifier cascade doesn\'t exists");')]
===========================================
===========================================
Total add: 4
Total del: 12
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\tassert(cascade && "classifier cascade doesn\'t exists");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\tassert(cascade && "classifier cascade doesn\'t exists");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(test_list != 0);'), (3, 1, u'+\tassert(validate_list != 0);'), (5, 1, u'+\tassert(positive_count > 0);'), (7, 1, u'+\tassert(params.size.width > 0);'), (8, 1, u'+\tassert(params.size.height > 0);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(test_list != 0);'), (3, 1, u'+\tassert(validate_list != 0);'), (5, 1, u'+\tassert(positive_count > 0);'), (7, 1, u'+\tassert(params.size.width > 0);'), (8, 1, u'+\tassert(params.size.height > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(test_list != 0);'), (3, 1, u'+\tassert(validate_list != 0);'), (5, 1, u'+\tassert(positive_count > 0);'), (7, 1, u'+\tassert(params.size.width > 0);'), (8, 1, u'+\tassert(params.size.height > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(r2 && "test-list doesn\'t exists");'), (3, 1, u'+\tassert(r2 && "validate-list doesn\'t exists");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(r2 && "test-list doesn\'t exists");'), (3, 1, u'+\tassert(r2 && "validate-list doesn\'t exists");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(r2 && "test-list doesn\'t exists");'), (3, 1, u'+\tassert(r2 && "validate-list doesn\'t exists");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(feature->channel[i] >= 0 && feature->channel[i] < (grayscale ? 8 : 10));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_icf_randomize_feature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(feature->channel[i] >= 0 && feature->channel[i] < (grayscale ? 8 : 10));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(feature->channel[i] >= 0 && feature->channel[i] < (grayscale ? 8 : 10));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert(isfinite(c));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: _ccv_icf_precompute_features
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert(isfinite(c));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert(isfinite(c));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\tconditional_assert(j == positives->rnum + negatives->rnum - 1, !skip);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: _ccv_icf_find_first_feature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\tconditional_assert(j == positives->rnum + negatives->rnum - 1, !skip);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\tconditional_assert(j == positives->rnum + negatives->rnum - 1, !skip);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\t\tconditional_assert(j == positives->rnum + negatives->rnum - 1, !skip);')]
===========================================
===========================================
Total add: 7
Total del: 4
Header: _ccv_icf_find_second_feature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\t\tconditional_assert(j == positives->rnum + negatives->rnum - 1, !skip);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\t\tconditional_assert(j == positives->rnum + negatives->rnum - 1, !skip);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t\t\t\t\tconditional_assert(k == positives->rnum + negatives->rnum - 1, !skip);')]
===========================================
===========================================
Total add: 12
Total del: 0
Header: _ccv_icf_find_second_feature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t\t\t\t\tconditional_assert(k == positives->rnum + negatives->rnum - 1, !skip);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t\t\t\t\tconditional_assert(k == positives->rnum + negatives->rnum - 1, !skip);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+\t\t\t\tassert(example_state[i].correct);'), (35, 1, u'+\t\t\t\tassert(!example_state[i].correct);'), (40, 1, u'+\t\t\t\tassert(example_state[i].correct);'), (43, 1, u'+\t\t\t\tassert(!example_state[i].correct);')]
===========================================
===========================================
Total add: 41
Total del: 8
Header: _ccv_icf_collect_negatives
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+\t\t\t\tassert(example_state[i].correct);'), (35, 1, u'+\t\t\t\tassert(!example_state[i].correct);'), (40, 1, u'+\t\t\t\tassert(example_state[i].correct);'), (43, 1, u'+\t\t\t\tassert(!example_state[i].correct);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+\t\t\t\tassert(example_state[i].correct);'), (35, 1, u'+\t\t\t\tassert(!example_state[i].correct);'), (40, 1, u'+\t\t\t\tassert(example_state[i].correct);'), (43, 1, u'+\t\t\t\tassert(!example_state[i].correct);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+#ifdef USE_SANITY_ASSERTION')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: ccv_icf_classifier_cascade_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+#ifdef USE_SANITY_ASSERTION')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+#ifdef USE_SANITY_ASSERTION')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+#ifdef USE_SANITY_ASSERTION')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: ccv_icf_classifier_cascade_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+#ifdef USE_SANITY_ASSERTION')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+#ifdef USE_SANITY_ASSERTION')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(test_list != 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(test_list != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(test_list != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(r2 && "test-list doesn\'t exists");')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(r2 && "test-list doesn\'t exists");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(r2 && "test-list doesn\'t exists");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.interval >= 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: _ccv_icf_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.interval >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.interval >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tccv_slice(bordered, (ccv_matrix_t**)&a, 0, point->point.y, point->point.x, a->rows, a->cols); assert(bordered->rows >= point->point.y + a->rows && bordered->cols >= point->point.x + a->cols);'), (4, 1, u'+\t\t\t\t\t\tassert(bordered->rows >= point->point.y + a->rows && bordered->cols >= point->point.x + a->cols);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: _ccv_icf_bootstrap_negatives
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tccv_slice(bordered, (ccv_matrix_t**)&a, 0, point->point.y, point->point.x, a->rows, a->cols); assert(bordered->rows >= point->point.y + a->rows && bordered->cols >= point->point.x + a->cols);'), (4, 1, u'+\t\t\t\t\t\tassert(bordered->rows >= point->point.y + a->rows && bordered->cols >= point->point.x + a->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\t\t\tccv_slice(bordered, (ccv_matrix_t**)&a, 0, point->point.y, point->point.x, a->rows, a->cols); assert(bordered->rows >= point->point.y + a->rows && bordered->cols >= point->point.x + a->cols);'), (4, 1, u'+\t\t\t\t\t\tassert(bordered->rows >= point->point.y + a->rows && bordered->cols >= point->point.x + a->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(59, 1, u'+\t\t\tassert(rate > 0.5); // it has to be better than random chance'), (124, 2, u'-\t\t\t\tassert(rate > 0.5); // it has to be better than random chance')]
===========================================
===========================================
Total add: 83
Total del: 99
Header: ccv_icf_classifier_cascade_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(59, 1, u'+\t\t\tassert(rate > 0.5); // it has to be better than random chance'), (124, 2, u'-\t\t\t\tassert(rate > 0.5); // it has to be better than random chance')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(59, 1, u'+\t\t\tassert(rate > 0.5); // it has to be better than random chance'), (124, 2, u'-\t\t\t\tassert(rate > 0.5); // it has to be better than random chance')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(count > 0);'), (9, 2, u'-\t\tassert(multiscale_cascade[i]->grayscale == multiscale_cascade[i + 1]->grayscale);'), (10, 2, u'-\t\tassert(multiscale_cascade[i]->count == multiscale_cascade[i + 1]->count);')]
===========================================
===========================================
Total add: 3
Total del: 9
Header: _ccv_is_equal_same_class
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(count > 0);'), (9, 2, u'-\t\tassert(multiscale_cascade[i]->grayscale == multiscale_cascade[i + 1]->grayscale);'), (10, 2, u'-\t\tassert(multiscale_cascade[i]->count == multiscale_cascade[i + 1]->count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(count > 0);'), (9, 2, u'-\t\tassert(multiscale_cascade[i]->grayscale == multiscale_cascade[i + 1]->grayscale);'), (10, 2, u'-\t\tassert(multiscale_cascade[i]->count == multiscale_cascade[i + 1]->count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + state->margin.top + state->margin.bottom + 2 && a->cols == state->size.width + state->margin.left + state->margin.right + 2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _ccv_icf_write_classifier_cascade_state
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + state->margin.top + state->margin.bottom + 2 && a->cols == state->size.width + state->margin.left + state->margin.right + 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + state->margin.top + state->margin.bottom + 2 && a->cols == state->size.width + state->margin.left + state->margin.right + 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + state->margin.top + state->margin.bottom + 2 && a->cols == state->size.width + state->margin.left + state->margin.right + 2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _ccv_icf_write_classifier_cascade_state
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + state->margin.top + state->margin.bottom + 2 && a->cols == state->size.width + state->margin.left + state->margin.right + 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + state->margin.top + state->margin.bottom + 2 && a->cols == state->size.width + state->margin.left + state->margin.right + 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + state->margin.top + state->margin.bottom + 2 && a->cols == state->size.width + state->margin.left + state->margin.right + 2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _ccv_icf_read_classifier_cascade_state
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + state->margin.top + state->margin.bottom + 2 && a->cols == state->size.width + state->margin.left + state->margin.right + 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + state->margin.top + state->margin.bottom + 2 && a->cols == state->size.width + state->margin.left + state->margin.right + 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + state->margin.top + state->margin.bottom + 2 && a->cols == state->size.width + state->margin.left + state->margin.right + 2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _ccv_icf_read_classifier_cascade_state
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + state->margin.top + state->margin.bottom + 2 && a->cols == state->size.width + state->margin.left + state->margin.right + 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + state->margin.top + state->margin.bottom + 2 && a->cols == state->size.width + state->margin.left + state->margin.right + 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tassert(sat->rows == pyr[q]->rows + 1 && sat->cols == pyr[q]->cols + 1);'), (3, 1, u'+\t\t\t\tassert(sat->rows == bordered->rows + 1 && sat->cols == bordered->cols + 1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _ccv_icf_bootstrap_negatives
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tassert(sat->rows == pyr[q]->rows + 1 && sat->cols == pyr[q]->cols + 1);'), (3, 1, u'+\t\t\t\tassert(sat->rows == bordered->rows + 1 && sat->cols == bordered->cols + 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tassert(sat->rows == pyr[q]->rows + 1 && sat->cols == pyr[q]->cols + 1);'), (3, 1, u'+\t\t\t\tassert(sat->rows == bordered->rows + 1 && sat->cols == bordered->cols + 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\t\t\t\t\tccv_slice(bordered, (ccv_matrix_t**)&a, 0, point->point.y, point->point.x, a->rows, a->cols); assert(bordered->rows >= point->point.y + a->rows && bordered->cols >= point->point.x + a->cols);'), (32, 2, u'-\t\t\t\t\t\t\tccv_slice(pyr[q], (ccv_matrix_t**)&a, 0, point->point.y, point->point.x, a->rows, a->cols); assert(pyr[q]->rows >= point->point.y + a->rows && pyr[q]->cols >= point->point.x + a->cols);')]
===========================================
===========================================
Total add: 33
Total del: 45
Header: _ccv_icf_bootstrap_negatives
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\t\t\t\t\tccv_slice(bordered, (ccv_matrix_t**)&a, 0, point->point.y, point->point.x, a->rows, a->cols); assert(bordered->rows >= point->point.y + a->rows && bordered->cols >= point->point.x + a->cols);'), (32, 2, u'-\t\t\t\t\t\t\tccv_slice(pyr[q], (ccv_matrix_t**)&a, 0, point->point.y, point->point.x, a->rows, a->cols); assert(pyr[q]->rows >= point->point.y + a->rows && pyr[q]->cols >= point->point.x + a->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\t\t\t\t\tccv_slice(bordered, (ccv_matrix_t**)&a, 0, point->point.y, point->point.x, a->rows, a->cols); assert(bordered->rows >= point->point.y + a->rows && bordered->cols >= point->point.x + a->cols);'), (32, 2, u'-\t\t\t\t\t\t\tccv_slice(pyr[q], (ccv_matrix_t**)&a, 0, point->point.y, point->point.x, a->rows, a->cols); assert(pyr[q]->rows >= point->point.y + a->rows && pyr[q]->cols >= point->point.x + a->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(multiscale_cascade[i]->interval == multiscale_cascade[i + 1]->interval);'), (3, 1, u'+\t\tassert(multiscale_cascade[i]->count == multiscale_cascade[i + 1]->count);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_icf_detect_objects
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(multiscale_cascade[i]->interval == multiscale_cascade[i + 1]->interval);'), (3, 1, u'+\t\tassert(multiscale_cascade[i]->count == multiscale_cascade[i + 1]->count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(multiscale_cascade[i]->interval == multiscale_cascade[i + 1]->interval);'), (3, 1, u'+\t\tassert(multiscale_cascade[i]->count == multiscale_cascade[i + 1]->count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t\t\t\t\tassert(sat->rows == pyr[q]->rows + 1 && sat->cols == pyr[q]->cols + 1);'), (36, 1, u'+\t\t\t\tassert(sat->rows == pyr[q]->rows + 1 && sat->cols == pyr[q]->cols + 1);'), (92, 1, u'+\t\t\t\t\t\t\tccv_slice(pyr[q], (ccv_matrix_t**)&a, 0, point->point.y, point->point.x, a->rows, a->cols); assert(pyr[q]->rows >= point->point.y + a->rows && pyr[q]->cols >= point->point.x + a->cols);')]
===========================================
===========================================
Total add: 85
Total del: 16
Header: _ccv_icf_bootstrap_negatives
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t\t\t\t\tassert(sat->rows == pyr[q]->rows + 1 && sat->cols == pyr[q]->cols + 1);'), (36, 1, u'+\t\t\t\tassert(sat->rows == pyr[q]->rows + 1 && sat->cols == pyr[q]->cols + 1);'), (92, 1, u'+\t\t\t\t\t\t\tccv_slice(pyr[q], (ccv_matrix_t**)&a, 0, point->point.y, point->point.x, a->rows, a->cols); assert(pyr[q]->rows >= point->point.y + a->rows && pyr[q]->cols >= point->point.x + a->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t\t\t\t\tassert(sat->rows == pyr[q]->rows + 1 && sat->cols == pyr[q]->cols + 1);'), (36, 1, u'+\t\t\t\tassert(sat->rows == pyr[q]->rows + 1 && sat->cols == pyr[q]->cols + 1);'), (92, 1, u'+\t\t\t\t\t\t\tccv_slice(pyr[q], (ccv_matrix_t**)&a, 0, point->point.y, point->point.x, a->rows, a->cols); assert(pyr[q]->rows >= point->point.y + a->rows && pyr[q]->cols >= point->point.x + a->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tassert(CCV_GET_DATA_TYPE(sat->type) == CCV_32F);')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: ccv_icf_detect_objects
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tassert(CCV_GET_DATA_TYPE(sat->type) == CCV_32F);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t\tassert(CCV_GET_DATA_TYPE(sat->type) == CCV_32F);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tassert(ch == 1 || ch == 3);')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: const ccv_icf_param_t ccv_icf_default_params = {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tassert(ch == 1 || ch == 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tassert(ch == 1 || ch == 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.deform_shift > 0);'), (3, 2, u'-\tassert(params.deform_angle > 0);'), (4, 2, u'-\tassert(params.deform_scale > 0 && params.deform_scale < 1);'), (5, 1, u'+\tassert(params.deform_shift >= 0);'), (6, 1, u'+\tassert(params.deform_angle >= 0);'), (7, 1, u'+\tassert(params.deform_scale >= 0 && params.deform_scale < 1);'), (9, 2, u'-\tassert(params.weight_trimming > 0.5 && params.weight_trimming <= 1.0);'), (10, 2, u'-\tassert(params.sample_rate > 0 && params.sample_rate <= 1.0);')]
===========================================
===========================================
Total add: 3
Total del: 5
Header: _ccv_icf_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.deform_shift > 0);'), (3, 2, u'-\tassert(params.deform_angle > 0);'), (4, 2, u'-\tassert(params.deform_scale > 0 && params.deform_scale < 1);'), (5, 1, u'+\tassert(params.deform_shift >= 0);'), (6, 1, u'+\tassert(params.deform_angle >= 0);'), (7, 1, u'+\tassert(params.deform_scale >= 0 && params.deform_scale < 1);'), (9, 2, u'-\tassert(params.weight_trimming > 0.5 && params.weight_trimming <= 1.0);'), (10, 2, u'-\tassert(params.sample_rate > 0 && params.sample_rate <= 1.0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.deform_shift > 0);'), (3, 2, u'-\tassert(params.deform_angle > 0);'), (4, 2, u'-\tassert(params.deform_scale > 0 && params.deform_scale < 1);'), (5, 1, u'+\tassert(params.deform_shift >= 0);'), (6, 1, u'+\tassert(params.deform_angle >= 0);'), (7, 1, u'+\tassert(params.deform_scale >= 0 && params.deform_scale < 1);'), (9, 2, u'-\tassert(params.weight_trimming > 0.5 && params.weight_trimming <= 1.0);'), (10, 2, u'-\tassert(params.sample_rate > 0 && params.sample_rate <= 1.0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tassert(multiscale_cascade[i]->grayscale == multiscale_cascade[i + 1]->grayscale);')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: ccv_icf_detect_objects
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tassert(multiscale_cascade[i]->grayscale == multiscale_cascade[i + 1]->grayscale);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tassert(multiscale_cascade[i]->grayscale == multiscale_cascade[i + 1]->grayscale);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.deform_scale > 0);'), (3, 1, u'+\tassert(params.deform_scale > 0 && params.deform_scale < 1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _ccv_icf_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.deform_scale > 0);'), (3, 1, u'+\tassert(params.deform_scale > 0 && params.deform_scale < 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.deform_scale > 0);'), (3, 1, u'+\tassert(params.deform_scale > 0 && params.deform_scale < 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(weigh[0] <= aweigh[0] + 1e-10 && weigh[1] <= aweigh[1] + 1e-10);'), (3, 1, u'+\t\t\tassert(weigh[0] <= aweigh0 + 1e-10 && weigh[1] <= aweigh1 + 1e-10);'), (58, 2, u'-\tassert(best_error_index < positives->rnum + negatives->rnum - 1 && best_error_index >= 0);'), (60, 1, u'+\tassert(best.error_index < positives->rnum + negatives->rnum - 1 && best.error_index >= 0);')]
===========================================
===========================================
Total add: 32
Total del: 23
Header: _ccv_icf_find_first_feature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(weigh[0] <= aweigh[0] + 1e-10 && weigh[1] <= aweigh[1] + 1e-10);'), (3, 1, u'+\t\t\tassert(weigh[0] <= aweigh0 + 1e-10 && weigh[1] <= aweigh1 + 1e-10);'), (58, 2, u'-\tassert(best_error_index < positives->rnum + negatives->rnum - 1 && best_error_index >= 0);'), (60, 1, u'+\tassert(best.error_index < positives->rnum + negatives->rnum - 1 && best.error_index >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(weigh[0] <= aweigh[0] + 1e-10 && weigh[1] <= aweigh[1] + 1e-10);'), (3, 1, u'+\t\t\tassert(weigh[0] <= aweigh0 + 1e-10 && weigh[1] <= aweigh1 + 1e-10);'), (58, 2, u'-\tassert(best_error_index < positives->rnum + negatives->rnum - 1 && best_error_index >= 0);'), (60, 1, u'+\tassert(best.error_index < positives->rnum + negatives->rnum - 1 && best.error_index >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 2, u'-\tassert(best_error_index < positives->rnum + negatives->rnum - 1 && best_error_index >= 0);'), (33, 1, u'+\tassert(best.error_index < positives->rnum + negatives->rnum - 1 && best.error_index >= 0);')]
===========================================
===========================================
Total add: 20
Total del: 11
Header: _ccv_icf_find_second_feature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 2, u'-\tassert(best_error_index < positives->rnum + negatives->rnum - 1 && best_error_index >= 0);'), (33, 1, u'+\tassert(best.error_index < positives->rnum + negatives->rnum - 1 && best.error_index >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 2, u'-\tassert(best_error_index < positives->rnum + negatives->rnum - 1 && best_error_index >= 0);'), (33, 1, u'+\tassert(best.error_index < positives->rnum + negatives->rnum - 1 && best.error_index >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t\t\tassert(rate > 0.5); // it has to be better than random chance'), (85, 1, u'+\t\t\t\tassert(rate > 0.5); // it has to be better than random chance')]
===========================================
===========================================
Total add: 84
Total del: 63
Header: ccv_icf_classifier_cascade_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t\t\tassert(rate > 0.5); // it has to be better than random chance'), (85, 1, u'+\t\t\t\tassert(rate > 0.5); // it has to be better than random chance')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t\t\tassert(rate > 0.5); // it has to be better than random chance'), (85, 1, u'+\t\t\t\tassert(rate > 0.5); // it has to be better than random chance')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\t\tassert(weigh[0] <= aweigh[0] && weigh[1] <= aweigh[1]);'), (6, 1, u'+\t\t\tassert(index >= 0 && index < positives->rnum + negatives->rnum);'), (8, 1, u'+\t\t\tassert(example_state[index].weight > 0);'), (9, 1, u'+\t\t\tassert(weigh[0] <= aweigh[0] + 1e-10 && weigh[1] <= aweigh[1] + 1e-10);')]
===========================================
===========================================
Total add: 6
Total del: 3
Header: _ccv_icf_find_first_feature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\t\tassert(weigh[0] <= aweigh[0] && weigh[1] <= aweigh[1]);'), (6, 1, u'+\t\t\tassert(index >= 0 && index < positives->rnum + negatives->rnum);'), (8, 1, u'+\t\t\tassert(example_state[index].weight > 0);'), (9, 1, u'+\t\t\tassert(weigh[0] <= aweigh[0] + 1e-10 && weigh[1] <= aweigh[1] + 1e-10);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\t\tassert(weigh[0] <= aweigh[0] && weigh[1] <= aweigh[1]);'), (6, 1, u'+\t\t\tassert(index >= 0 && index < positives->rnum + negatives->rnum);'), (8, 1, u'+\t\t\tassert(example_state[index].weight > 0);'), (9, 1, u'+\t\t\tassert(weigh[0] <= aweigh[0] + 1e-10 && weigh[1] <= aweigh[1] + 1e-10);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tassert(index >= 0 && index < positives->rnum + negatives->rnum);'), (9, 2, u'-\t\t\t\tassert(weigh[0] <= aweigh[0] && weigh[1] <= aweigh[1]);'), (11, 1, u'+\t\t\t\tassert(example_state[index].weight > 0);'), (12, 1, u'+\t\t\t\tassert(weigh[0] <= aweigh[0] + 1e-10 && weigh[1] <= aweigh[1] + 1e-10);')]
===========================================
===========================================
Total add: 6
Total del: 3
Header: _ccv_icf_find_second_feature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tassert(index >= 0 && index < positives->rnum + negatives->rnum);'), (9, 2, u'-\t\t\t\tassert(weigh[0] <= aweigh[0] && weigh[1] <= aweigh[1]);'), (11, 1, u'+\t\t\t\tassert(example_state[index].weight > 0);'), (12, 1, u'+\t\t\t\tassert(weigh[0] <= aweigh[0] + 1e-10 && weigh[1] <= aweigh[1] + 1e-10);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tassert(index >= 0 && index < positives->rnum + negatives->rnum);'), (9, 2, u'-\t\t\t\tassert(weigh[0] <= aweigh[0] && weigh[1] <= aweigh[1]);'), (11, 1, u'+\t\t\t\tassert(example_state[index].weight > 0);'), (12, 1, u'+\t\t\t\tassert(weigh[0] <= aweigh[0] + 1e-10 && weigh[1] <= aweigh[1] + 1e-10);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\tassert(example_state[i].correct);'), (6, 1, u'+\t\t\t\tassert(!example_state[i].correct);'), (11, 1, u'+\t\t\t\tassert(example_state[i].correct);'), (14, 1, u'+\t\t\t\tassert(!example_state[i].correct);')]
===========================================
===========================================
Total add: 10
Total del: 0
Header: _ccv_icf_rate_weak_classifier
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\tassert(example_state[i].correct);'), (6, 1, u'+\t\t\t\tassert(!example_state[i].correct);'), (11, 1, u'+\t\t\t\tassert(example_state[i].correct);'), (14, 1, u'+\t\t\t\tassert(!example_state[i].correct);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\tassert(example_state[i].correct);'), (6, 1, u'+\t\t\t\tassert(!example_state[i].correct);'), (11, 1, u'+\t\t\t\tassert(example_state[i].correct);'), (14, 1, u'+\t\t\t\tassert(!example_state[i].correct);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.C > 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: _ccv_icf_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.C > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.C > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.acceptance > 0 && params.acceptance < 1.0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_icf_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.acceptance > 0 && params.acceptance < 1.0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.acceptance > 0 && params.acceptance < 1.0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\tassert(best_rate > 0);'), (20, 1, u'+\tassert(best_rate.weight > 0);')]
===========================================
===========================================
Total add: 15
Total del: 34
Header: _ccv_icf_find_best_feature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\tassert(best_rate > 0);'), (20, 1, u'+\tassert(best_rate.weight > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\tassert(best_rate > 0);'), (20, 1, u'+\tassert(best_rate.weight > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.weight_trimming > 0.5 && params.weight_trimming <= 1.0);'), (3, 1, u'+\tassert(params.sample_rate > 0 && params.sample_rate <= 1.0);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: _ccv_icf_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.weight_trimming > 0.5 && params.weight_trimming <= 1.0);'), (3, 1, u'+\tassert(params.sample_rate > 0 && params.sample_rate <= 1.0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.weight_trimming > 0.5 && params.weight_trimming <= 1.0);'), (3, 1, u'+\tassert(params.sample_rate > 0 && params.sample_rate <= 1.0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\tassert(best_rate > 0);')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: _ccv_icf_find_best_feature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\tassert(best_rate > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\tassert(best_rate > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\tassert(rate > 0.5);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: _ccv_icf_feature_pre_learn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\tassert(rate > 0.5);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\tassert(rate > 0.5);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\t\tassert(rate > 0.5); // it has to be better than random chance')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: ccv_icf_classifier_cascade_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\t\tassert(rate > 0.5); // it has to be better than random chance')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\t\tassert(rate > 0.5); // it has to be better than random chance')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(rate > 0.5);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: _ccv_icf_feature_pre_learn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(rate > 0.5);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(rate > 0.5);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(feature->count <= CCV_ICF_SAT_MAX);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: _ccv_icf_randomize_feature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(feature->count <= CCV_ICF_SAT_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(feature->count <= CCV_ICF_SAT_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tassert(scale_size.width > 0 && scale_size.height > 0);')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: _ccv_icf_capture_feature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tassert(scale_size.width > 0 && scale_size.height > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tassert(scale_size.width > 0 && scale_size.height > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height && a->cols == state->size.width);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _ccv_icf_write_classifier_cascade_state
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height && a->cols == state->size.width);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height && a->cols == state->size.width);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height && a->cols == state->size.width);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _ccv_icf_write_classifier_cascade_state
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height && a->cols == state->size.width);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height && a->cols == state->size.width);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height && a->cols == state->size.width);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: _ccv_icf_read_classifier_cascade_state
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height && a->cols == state->size.width);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height && a->cols == state->size.width);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height && a->cols == state->size.width);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: _ccv_icf_read_classifier_cascade_state
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height && a->cols == state->size.width);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(a->rows == state->size.height && a->cols == state->size.width);'), (3, 1, u'+\t\t\tassert(a->rows == state->size.height + 2 && a->cols == state->size.width + 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\t\tassert(feature->sat[q * 2].x < a->cols - 1 && feature->sat[q * 2].y < a->rows - 1);'), (5, 1, u'+\t\t\t\tassert(feature->sat[q * 2 + 1].x < a->cols - 1 && feature->sat[q * 2].y < a->rows - 1);'), (6, 1, u'+\t\t\t\tassert(feature->sat[q * 2].x >= 0 && feature->sat[q * 2].y >= 0);'), (7, 1, u'+\t\t\t\tassert(feature->sat[q * 2 + 1].x >= 0 && feature->sat[q * 2].y >= 0);'), (8, 1, u'+\t\t\t\tassert(feature->channel[q] >= 0 && feature->channel[q] < ch);')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: _ccv_icf_feature_pre_learn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\t\tassert(feature->sat[q * 2].x < a->cols - 1 && feature->sat[q * 2].y < a->rows - 1);'), (5, 1, u'+\t\t\t\tassert(feature->sat[q * 2 + 1].x < a->cols - 1 && feature->sat[q * 2].y < a->rows - 1);'), (6, 1, u'+\t\t\t\tassert(feature->sat[q * 2].x >= 0 && feature->sat[q * 2].y >= 0);'), (7, 1, u'+\t\t\t\tassert(feature->sat[q * 2 + 1].x >= 0 && feature->sat[q * 2].y >= 0);'), (8, 1, u'+\t\t\t\tassert(feature->channel[q] >= 0 && feature->channel[q] < ch);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\t\tassert(feature->sat[q * 2].x < a->cols - 1 && feature->sat[q * 2].y < a->rows - 1);'), (5, 1, u'+\t\t\t\tassert(feature->sat[q * 2 + 1].x < a->cols - 1 && feature->sat[q * 2].y < a->rows - 1);'), (6, 1, u'+\t\t\t\tassert(feature->sat[q * 2].x >= 0 && feature->sat[q * 2].y >= 0);'), (7, 1, u'+\t\t\t\tassert(feature->sat[q * 2 + 1].x >= 0 && feature->sat[q * 2].y >= 0);'), (8, 1, u'+\t\t\t\tassert(feature->channel[q] >= 0 && feature->channel[q] < ch);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(linear != 0);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: _ccv_icf_feature_pre_learn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(linear != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(linear != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(posfiles->rnum > 0);'), (3, 1, u'+\tassert(bgfiles->rnum > 0);'), (4, 1, u'+\tassert(posnum > 0 && negnum > 0);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: ccv_icf_classifier_cascade_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(posfiles->rnum > 0);'), (3, 1, u'+\tassert(bgfiles->rnum > 0);'), (4, 1, u'+\tassert(posnum > 0 && negnum > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(posfiles->rnum > 0);'), (3, 1, u'+\tassert(bgfiles->rnum > 0);'), (4, 1, u'+\tassert(posnum > 0 && negnum > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\t\t\tassert(parser->resource == s_param_start);'), (18, 1, u'+\t\t\t\tassert(parser->body == s_param_start);')]
===========================================
===========================================
Total add: 19
Total del: 3
Header: param_parser_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\t\t\tassert(parser->resource == s_param_start);'), (18, 1, u'+\t\t\t\tassert(parser->body == s_param_start);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\t\t\tassert(parser->resource == s_param_start);'), (18, 1, u'+\t\t\t\tassert(parser->body == s_param_start);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(param_parser_map_alphabet(param_map, sizeof(param_map) / sizeof(param_dispatch_t)) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: uri_bbf_detect_objects_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(param_parser_map_alphabet(param_map, sizeof(param_map) / sizeof(param_dispatch_t)) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(param_parser_map_alphabet(param_map, sizeof(param_map) / sizeof(param_dispatch_t)) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(param_parser_map_alphabet(param_map, sizeof(param_map) / sizeof(param_dispatch_t)) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: uri_dpm_detect_objects_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(param_parser_map_alphabet(param_map, sizeof(param_map) / sizeof(param_dispatch_t)) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(param_parser_map_alphabet(param_map, sizeof(param_map) / sizeof(param_dispatch_t)) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(170, 1, u'+\tassert(param_parser_map_alphabet(param_map, sizeof(param_map) / sizeof(param_dispatch_t)) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(context->face);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: uri_bbf_detect_objects_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(context->face);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(context->face);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(context->pedestrian && context->car);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: uri_dpm_detect_objects_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(context->pedestrian && context->car);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(context->pedestrian && context->car);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(len > 1);')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: uri_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(len > 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(len > 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(len > 1);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: uri_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(len > 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(len > 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tassert(request_extras->response.on_release == 0);')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: on_request_execute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tassert(request_extras->response.on_release == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\tassert(request_extras->response.on_release == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert((type & 0xFF) == CCV_IO_DEFLATE_STREAM); // deflate stream (compressed stream) is not supported yet'), (3, 1, u'+\t\tassert((type & 0xFF) != CCV_IO_DEFLATE_STREAM); // deflate stream (compressed stream) is not supported yet')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_read_impl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert((type & 0xFF) == CCV_IO_DEFLATE_STREAM); // deflate stream (compressed stream) is not supported yet'), (3, 1, u'+\t\tassert((type & 0xFF) != CCV_IO_DEFLATE_STREAM); // deflate stream (compressed stream) is not supported yet')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert((type & 0xFF) == CCV_IO_DEFLATE_STREAM); // deflate stream (compressed stream) is not supported yet'), (3, 1, u'+\t\tassert((type & 0xFF) != CCV_IO_DEFLATE_STREAM); // deflate stream (compressed stream) is not supported yet')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tassert(cb);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: static ev_async main_async;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tassert(cb);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tassert(cb);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.validate_set > 0 && params.validate_set < 1);'), (3, 1, u'+\tassert(params.nnc_same > 0.5 && params.nnc_same < 1);'), (4, 1, u'+\tassert(params.nnc_thres > 0.5 && params.nnc_thres < 1);'), (5, 1, u'+\tassert(params.nnc_verify > 0.5 && params.nnc_verify < 1);'), (6, 1, u'+\tassert(params.nnc_beyond > 0.5 && params.nnc_beyond < 1);'), (7, 1, u'+\tassert(params.nnc_collect >= 0.5 && params.nnc_collect < 1);'), (8, 1, u'+\tassert(params.new_deform > 0);'), (9, 1, u'+\tassert(params.track_deform > 0);'), (10, 1, u'+\tassert(params.new_deform_angle > 0);'), (11, 1, u'+\tassert(params.track_deform_angle > 0);'), (12, 1, u'+\tassert(params.new_deform_scale > 0);'), (13, 1, u'+\tassert(params.track_deform_scale > 0);'), (14, 1, u'+\tassert(params.new_deform_shift > 0);'), (15, 1, u'+\tassert(params.track_deform_shift > 0);'), (16, 1, u'+\tassert(params.rotation >= 0);')]
===========================================
===========================================
Total add: 15
Total del: 0
Header: _ccv_tld_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.validate_set > 0 && params.validate_set < 1);'), (3, 1, u'+\tassert(params.nnc_same > 0.5 && params.nnc_same < 1);'), (4, 1, u'+\tassert(params.nnc_thres > 0.5 && params.nnc_thres < 1);'), (5, 1, u'+\tassert(params.nnc_verify > 0.5 && params.nnc_verify < 1);'), (6, 1, u'+\tassert(params.nnc_beyond > 0.5 && params.nnc_beyond < 1);'), (7, 1, u'+\tassert(params.nnc_collect >= 0.5 && params.nnc_collect < 1);'), (8, 1, u'+\tassert(params.new_deform > 0);'), (9, 1, u'+\tassert(params.track_deform > 0);'), (10, 1, u'+\tassert(params.new_deform_angle > 0);'), (11, 1, u'+\tassert(params.track_deform_angle > 0);'), (12, 1, u'+\tassert(params.new_deform_scale > 0);'), (13, 1, u'+\tassert(params.track_deform_scale > 0);'), (14, 1, u'+\tassert(params.new_deform_shift > 0);'), (15, 1, u'+\tassert(params.track_deform_shift > 0);'), (16, 1, u'+\tassert(params.rotation >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.validate_set > 0 && params.validate_set < 1);'), (3, 1, u'+\tassert(params.nnc_same > 0.5 && params.nnc_same < 1);'), (4, 1, u'+\tassert(params.nnc_thres > 0.5 && params.nnc_thres < 1);'), (5, 1, u'+\tassert(params.nnc_verify > 0.5 && params.nnc_verify < 1);'), (6, 1, u'+\tassert(params.nnc_beyond > 0.5 && params.nnc_beyond < 1);'), (7, 1, u'+\tassert(params.nnc_collect >= 0.5 && params.nnc_collect < 1);'), (8, 1, u'+\tassert(params.new_deform > 0);'), (9, 1, u'+\tassert(params.track_deform > 0);'), (10, 1, u'+\tassert(params.new_deform_angle > 0);'), (11, 1, u'+\tassert(params.track_deform_angle > 0);'), (12, 1, u'+\tassert(params.new_deform_scale > 0);'), (13, 1, u'+\tassert(params.track_deform_scale > 0);'), (14, 1, u'+\tassert(params.new_deform_shift > 0);'), (15, 1, u'+\tassert(params.track_deform_shift > 0);'), (16, 1, u'+\tassert(params.rotation >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);'), (19, 1, u'+\t\t\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Total add: 23
Total del: 9
Header: _ccv_tld_quick_learn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);'), (19, 1, u'+\t\t\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);'), (19, 1, u'+\t\t\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Total add: 4
Total del: 19
Header: ccv_tld_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Total add: 8
Total del: 6
Header: ccv_tld_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Total add: 3
Total del: 20
Header: _ccv_tld_quick_learn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Total add: 8
Total del: 6
Header: _ccv_tld_quick_learn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Total add: 7
Total del: 2
Header: ccv_tld_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(tld->frame_signature == a->sig);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_tld_track_object
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(tld->frame_signature == a->sig);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(tld->frame_signature == a->sig);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\tassert(box.rect.x >= 0 && box.rect.x < a->cols);'), (9, 1, u'+\tassert(box.rect.y >= 0 && box.rect.y < a->rows);'), (10, 1, u'+\tassert(box.rect.x + box.rect.width <= a->cols);'), (11, 1, u'+\tassert(box.rect.y + box.rect.height <= a->rows);'), (46, 1, u'+\t\tassert(hull.x >= 0 && hull.x < a->cols);'), (47, 1, u'+\t\tassert(hull.y >= 0 && hull.y < a->rows);'), (48, 1, u'+\t\tassert(hull.x + hull.width <= a->cols);'), (49, 1, u'+\t\tassert(hull.y + hull.height <= a->rows);')]
===========================================
===========================================
Total add: 57
Total del: 4
Header: _ccv_tld_generate_box_for
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\tassert(box.rect.x >= 0 && box.rect.x < a->cols);'), (9, 1, u'+\tassert(box.rect.y >= 0 && box.rect.y < a->rows);'), (10, 1, u'+\tassert(box.rect.x + box.rect.width <= a->cols);'), (11, 1, u'+\tassert(box.rect.y + box.rect.height <= a->rows);'), (46, 1, u'+\t\tassert(hull.x >= 0 && hull.x < a->cols);'), (47, 1, u'+\t\tassert(hull.y >= 0 && hull.y < a->rows);'), (48, 1, u'+\t\tassert(hull.x + hull.width <= a->cols);'), (49, 1, u'+\t\tassert(hull.y + hull.height <= a->rows);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\tassert(box.rect.x >= 0 && box.rect.x < a->cols);'), (9, 1, u'+\tassert(box.rect.y >= 0 && box.rect.y < a->rows);'), (10, 1, u'+\tassert(box.rect.x + box.rect.width <= a->cols);'), (11, 1, u'+\tassert(box.rect.y + box.rect.height <= a->rows);'), (46, 1, u'+\t\tassert(hull.x >= 0 && hull.x < a->cols);'), (47, 1, u'+\t\tassert(hull.y >= 0 && hull.y < a->rows);'), (48, 1, u'+\t\tassert(hull.x + hull.width <= a->cols);'), (49, 1, u'+\t\tassert(hull.y + hull.height <= a->rows);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: _ccv_tld_quick_learn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(argc == 6);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(argc == 6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(argc == 6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.interval >= 0);'), (3, 1, u'+\tassert(params.shift > 0 && params.shift < 1);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: _ccv_tld_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.interval >= 0);'), (3, 1, u'+\tassert(params.shift > 0 && params.shift < 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.interval >= 0);'), (3, 1, u'+\tassert(params.shift > 0 && params.shift < 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);'), (13, 1, u'+\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Total add: 7
Total del: 5
Header: _ccv_tld_learn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);'), (13, 1, u'+\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);'), (13, 1, u'+\t\t\t\tassert(box->neighbors >= 0 && box->neighbors < best_box.neighbors);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.bad_patches > 0);')]
===========================================
===========================================
Total add: 17
Total del: 0
Header: _ccv_tld_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.bad_patches > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.bad_patches > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\tassert(a->rows >= db->rows && a->cols >= db->cols);'), (14, 2, u'-\t\t\tassert(0 && "CCV_INTER_LINEAR is not implemented");'), (17, 2, u'-\t\t\tassert(db->rows >= a->rows && db->cols >= a->cols);'), (24, 2, u'-\t\t\tassert(0 && "CCV_INTER_LANCZOS is not implemented");'), (32, 1, u'+\t\tassert(db->rows >= a->rows && db->cols >= a->cols);'), (38, 1, u'+\t\tassert(0 && "CCV_INTER_LINEAR is not implemented");'), (40, 1, u'+\t\tassert(0 && "CCV_INTER_LANCZOS is not implemented");')]
===========================================
===========================================
Total add: 16
Total del: 22
Header: ccv_resample
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\tassert(a->rows >= db->rows && a->cols >= db->cols);'), (14, 2, u'-\t\t\tassert(0 && "CCV_INTER_LINEAR is not implemented");'), (17, 2, u'-\t\t\tassert(db->rows >= a->rows && db->cols >= a->cols);'), (24, 2, u'-\t\t\tassert(0 && "CCV_INTER_LANCZOS is not implemented");'), (32, 1, u'+\t\tassert(db->rows >= a->rows && db->cols >= a->cols);'), (38, 1, u'+\t\tassert(0 && "CCV_INTER_LINEAR is not implemented");'), (40, 1, u'+\t\tassert(0 && "CCV_INTER_LANCZOS is not implemented");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\tassert(a->rows >= db->rows && a->cols >= db->cols);'), (14, 2, u'-\t\t\tassert(0 && "CCV_INTER_LINEAR is not implemented");'), (17, 2, u'-\t\t\tassert(db->rows >= a->rows && db->cols >= a->cols);'), (24, 2, u'-\t\t\tassert(0 && "CCV_INTER_LANCZOS is not implemented");'), (32, 1, u'+\t\tassert(db->rows >= a->rows && db->cols >= a->cols);'), (38, 1, u'+\t\tassert(0 && "CCV_INTER_LINEAR is not implemented");'), (40, 1, u'+\t\tassert(0 && "CCV_INTER_LANCZOS is not implemented");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t\t\tassert(a->rows >= db->rows && a->cols >= db->cols);'), (19, 1, u'+\t\t\tassert(0 && "CCV_INTER_LINEAR is not implemented");'), (22, 1, u'+\t\t\tassert(db->rows >= a->rows && db->cols >= a->cols);'), (29, 1, u'+\t\t\tassert(0 && "CCV_INTER_LANCZOS is not implemented");')]
===========================================
===========================================
Total add: 14
Total del: 9
Header: ccv_resample
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t\t\tassert(a->rows >= db->rows && a->cols >= db->cols);'), (19, 1, u'+\t\t\tassert(0 && "CCV_INTER_LINEAR is not implemented");'), (22, 1, u'+\t\t\tassert(db->rows >= a->rows && db->cols >= a->cols);'), (29, 1, u'+\t\t\tassert(0 && "CCV_INTER_LANCZOS is not implemented");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t\t\tassert(a->rows >= db->rows && a->cols >= db->cols);'), (19, 1, u'+\t\t\tassert(0 && "CCV_INTER_LINEAR is not implemented");'), (22, 1, u'+\t\t\tassert(db->rows >= a->rows && db->cols >= a->cols);'), (29, 1, u'+\t\t\tassert(0 && "CCV_INTER_LANCZOS is not implemented");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(284, 1, u'+    assert(sfmt->idx == SFMT_N32);'), (285, 1, u'+    assert(size % 4 == 0);'), (286, 1, u'+    assert(size >= SFMT_N32);'), (320, 1, u'+    assert(sfmt->idx == SFMT_N32);'), (321, 1, u'+    assert(size % 2 == 0);'), (322, 1, u'+    assert(size >= SFMT_N64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tassert(structs > 0 && features > 0 && scales > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(457, 1, u'+    assert(size % 2 == 0);'), (458, 1, u'+    assert(size >= DSFMT_N64);'), (475, 1, u'+    assert(size % 2 == 0);'), (476, 1, u'+    assert(size >= DSFMT_N64);'), (493, 1, u'+    assert(size % 2 == 0);'), (494, 1, u'+    assert(size >= DSFMT_N64);'), (511, 1, u'+    assert(size % 2 == 0);'), (512, 1, u'+    assert(size >= DSFMT_N64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_CHANNEL(r0->type) == CCV_C1 && CCV_GET_DATA_TYPE_SIZE(r0->type) == CCV_8U);'), (3, 2, u'-\tassert(CCV_GET_CHANNEL(r1->type) == CCV_C1 && CCV_GET_DATA_TYPE_SIZE(r1->type) == CCV_8U);'), (4, 1, u'+\tassert(CCV_GET_CHANNEL(r0->type) == CCV_C1 && CCV_GET_DATA_TYPE(r0->type) == CCV_8U);'), (5, 1, u'+\tassert(CCV_GET_CHANNEL(r1->type) == CCV_C1 && CCV_GET_DATA_TYPE(r1->type) == CCV_8U);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: _ccv_tld_norm_cross_correlate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_CHANNEL(r0->type) == CCV_C1 && CCV_GET_DATA_TYPE_SIZE(r0->type) == CCV_8U);'), (3, 2, u'-\tassert(CCV_GET_CHANNEL(r1->type) == CCV_C1 && CCV_GET_DATA_TYPE_SIZE(r1->type) == CCV_8U);'), (4, 1, u'+\tassert(CCV_GET_CHANNEL(r0->type) == CCV_C1 && CCV_GET_DATA_TYPE(r0->type) == CCV_8U);'), (5, 1, u'+\tassert(CCV_GET_CHANNEL(r1->type) == CCV_C1 && CCV_GET_DATA_TYPE(r1->type) == CCV_8U);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_CHANNEL(r0->type) == CCV_C1 && CCV_GET_DATA_TYPE_SIZE(r0->type) == CCV_8U);'), (3, 2, u'-\tassert(CCV_GET_CHANNEL(r1->type) == CCV_C1 && CCV_GET_DATA_TYPE_SIZE(r1->type) == CCV_8U);'), (4, 1, u'+\tassert(CCV_GET_CHANNEL(r0->type) == CCV_C1 && CCV_GET_DATA_TYPE(r0->type) == CCV_8U);'), (5, 1, u'+\tassert(CCV_GET_CHANNEL(r1->type) == CCV_C1 && CCV_GET_DATA_TYPE(r1->type) == CCV_8U);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+\t\tassert(size * (size - 1) / 2 == k);')]
===========================================
===========================================
Total add: 69
Total del: 2
Header: _ccv_tld_short_term_track
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+\t\tassert(size * (size - 1) / 2 == k);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+\t\tassert(size * (size - 1) / 2 == k);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert((type && 0xFF) == CCV_IO_ANY_RAW);')]
===========================================
===========================================
Total add: 22
Total del: 2
Header: _ccv_read_raw
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert((type && 0xFF) == CCV_IO_ANY_RAW);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert((type && 0xFF) == CCV_IO_ANY_RAW);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tassert(rows == 0 && cols == 0 && scanline == 0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ccv_read_impl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tassert(rows == 0 && cols == 0 && scanline == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tassert(rows == 0 && cols == 0 && scanline == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(rows > 8);'), (3, 1, u'+\t\tassert(rows > 8 && cols == 0 && scanline == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_read_impl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(rows > 8);'), (3, 1, u'+\t\tassert(rows > 8 && cols == 0 && scanline == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(rows > 8);'), (3, 1, u'+\t\tassert(rows > 8 && cols == 0 && scanline == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\t\tassert(rgb_padding >= 0);'), (37, 1, u'+\t\t\tassert(scanline >= cols);')]
===========================================
===========================================
Total add: 26
Total del: 13
Header: _ccv_read_gray_raw
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\t\tassert(rgb_padding >= 0);'), (37, 1, u'+\t\t\tassert(scanline >= cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\t\tassert(rgb_padding >= 0);'), (37, 1, u'+\t\t\tassert(scanline >= cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tassert(rows > 8);'), (7, 1, u'+\t\tassert((type & 0xFF) == CCV_IO_DEFLATE_STREAM); // deflate stream (compressed stream) is not supported yet')]
===========================================
===========================================
Total add: 11
Total del: 2
Header: ccv_read_impl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tassert(rows > 8);'), (7, 1, u'+\t\tassert((type & 0xFF) == CCV_IO_DEFLATE_STREAM); // deflate stream (compressed stream) is not supported yet')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tassert(rows > 8);'), (7, 1, u'+\t\tassert((type & 0xFF) == CCV_IO_DEFLATE_STREAM); // deflate stream (compressed stream) is not supported yet')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t\t\t\t\tassert(y + ((mrows - rows[j]) * CCV_DPM_WINDOW_SIZE + 1) / 2 >= 0 &&'), (31, 1, u'+\t\t\t\t\tassert(hog->rows == rows[j] && hog->cols == cols[j] && CCV_GET_CHANNEL(hog->type) == 31 && CCV_GET_DATA_TYPE(hog->type) == CCV_32F);'), (45, 2, u'-\t\t\t\tassert(hog->rows == rows && hog->cols == cols && CCV_GET_CHANNEL(hog->type) == 31 && CCV_GET_DATA_TYPE(hog->type) == CCV_32F);')]
===========================================
===========================================
Total add: 31
Total del: 18
Header: _ccv_dpm_randomize_examples
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t\t\t\t\tassert(y + ((mrows - rows[j]) * CCV_DPM_WINDOW_SIZE + 1) / 2 >= 0 &&'), (31, 1, u'+\t\t\t\t\tassert(hog->rows == rows[j] && hog->cols == cols[j] && CCV_GET_CHANNEL(hog->type) == 31 && CCV_GET_DATA_TYPE(hog->type) == CCV_32F);'), (45, 2, u'-\t\t\t\tassert(hog->rows == rows && hog->cols == cols && CCV_GET_CHANNEL(hog->type) == 31 && CCV_GET_DATA_TYPE(hog->type) == CCV_32F);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t\t\t\t\tassert(y + ((mrows - rows[j]) * CCV_DPM_WINDOW_SIZE + 1) / 2 >= 0 &&'), (31, 1, u'+\t\t\t\t\tassert(hog->rows == rows[j] && hog->cols == cols[j] && CCV_GET_CHANNEL(hog->type) == 31 && CCV_GET_DATA_TYPE(hog->type) == CCV_32F);'), (45, 2, u'-\t\t\t\tassert(hog->rows == rows && hog->cols == cols && CCV_GET_CHANNEL(hog->type) == 31 && CCV_GET_DATA_TYPE(hog->type) == CCV_32F);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(v->count == root_classifier->count);'), (3, 1, u'+\tassert(v->count == root_classifier->count || (v->count == 0 && v->part == 0));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _ccv_dpm_vector_score
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(v->count == root_classifier->count);'), (3, 1, u'+\tassert(v->count == root_classifier->count || (v->count == 0 && v->part == 0));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(v->count == root_classifier->count);'), (3, 1, u'+\tassert(v->count == root_classifier->count || (v->count == 0 && v->part == 0));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(ch == 31);'), (3, 1, u'+\tassert(v->root.w->rows == root_classifier->root.w->rows && v->root.w->cols == root_classifier->root.w->cols);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: _ccv_dpm_stochastic_gradient_descent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(ch == 31);'), (3, 1, u'+\tassert(v->root.w->rows == root_classifier->root.w->rows && v->root.w->cols == root_classifier->root.w->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(ch == 31);'), (3, 1, u'+\tassert(v->root.w->rows == root_classifier->root.w->rows && v->root.w->cols == root_classifier->root.w->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(part_vector->w->rows == part_classifier->w->rows && part_vector->w->cols == part_classifier->w->cols);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_dpm_stochastic_gradient_descent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(part_vector->w->rows == part_classifier->w->rows && part_vector->w->cols == part_classifier->w->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(part_vector->w->rows == part_classifier->w->rows && part_vector->w->cols == part_classifier->w->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(part_vector->w->rows == other_part_classifier->w->rows && part_vector->w->cols == other_part_classifier->w->cols);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_dpm_stochastic_gradient_descent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(part_vector->w->rows == other_part_classifier->w->rows && part_vector->w->cols == other_part_classifier->w->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(part_vector->w->rows == other_part_classifier->w->rows && part_vector->w->cols == other_part_classifier->w->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(posex[i]->rnum == posex[i + 1]->rnum && negex[i]->rnum == negex[i + 1]->rnum);'), (73, 1, u'+\t\t\t\t\t\tassert(label[k] < model->count);'), (77, 1, u'+\t\t\t\t\t\t\tassert(v->root.w);'), (79, 1, u'+\t\t\t\t\t\t\tassert(!isnan(score));'), (80, 1, u'+\t\t\t\t\t\t\tassert(v->id == j);'), (86, 1, u'+\t\t\t\t\t\t\tassert(!isnan(score));'), (87, 1, u'+\t\t\t\t\t\t\tassert(v->id == j);'), (116, 1, u'+\t\t\t\tassert(label[i] < model->count);'), (121, 1, u'+\t\t\t\t\tassert(!isnan(score));'), (133, 1, u'+\t\t\t\tassert(label[i + posnum] < model->count);'), (136, 1, u'+\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
Total add: 164
Total del: 1
Header: _ccv_dpm_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(posex[i]->rnum == posex[i + 1]->rnum && negex[i]->rnum == negex[i + 1]->rnum);'), (73, 1, u'+\t\t\t\t\t\tassert(label[k] < model->count);'), (77, 1, u'+\t\t\t\t\t\t\tassert(v->root.w);'), (79, 1, u'+\t\t\t\t\t\t\tassert(!isnan(score));'), (80, 1, u'+\t\t\t\t\t\t\tassert(v->id == j);'), (86, 1, u'+\t\t\t\t\t\t\tassert(!isnan(score));'), (87, 1, u'+\t\t\t\t\t\t\tassert(v->id == j);'), (116, 1, u'+\t\t\t\tassert(label[i] < model->count);'), (121, 1, u'+\t\t\t\t\tassert(!isnan(score));'), (133, 1, u'+\t\t\t\tassert(label[i + posnum] < model->count);'), (136, 1, u'+\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(posex[i]->rnum == posex[i + 1]->rnum && negex[i]->rnum == negex[i + 1]->rnum);'), (73, 1, u'+\t\t\t\t\t\tassert(label[k] < model->count);'), (77, 1, u'+\t\t\t\t\t\t\tassert(v->root.w);'), (79, 1, u'+\t\t\t\t\t\t\tassert(!isnan(score));'), (80, 1, u'+\t\t\t\t\t\t\tassert(v->id == j);'), (86, 1, u'+\t\t\t\t\t\t\tassert(!isnan(score));'), (87, 1, u'+\t\t\t\t\t\t\tassert(v->id == j);'), (116, 1, u'+\t\t\t\tassert(label[i] < model->count);'), (121, 1, u'+\t\t\t\t\tassert(!isnan(score));'), (133, 1, u'+\t\t\t\tassert(label[i + posnum] < model->count);'), (136, 1, u'+\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\t\t\tassert(posv[i]->id >= 0 && posv[i]->id < model->count);')]
===========================================
===========================================
Total add: 10
Total del: 2
Header: ccv_dpm_mixture_model_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\t\t\tassert(posv[i]->id >= 0 && posv[i]->id < model->count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\t\t\tassert(posv[i]->id >= 0 && posv[i]->id < model->count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\t\t\tassert(v->id >= 0 && v->id < model->count);')]
===========================================
===========================================
Total add: 20
Total del: 7
Header: ccv_dpm_mixture_model_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\t\t\tassert(v->id >= 0 && v->id < model->count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\t\t\tassert(v->id >= 0 && v->id < model->count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\t\t\t\t\t\tassert(!isnan(score));'), (25, 2, u'-\t\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
Total add: 24
Total del: 20
Header: ccv_dpm_mixture_model_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\t\t\t\t\t\tassert(!isnan(score));'), (25, 2, u'-\t\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\t\t\t\t\t\tassert(!isnan(score));'), (25, 2, u'-\t\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 2, u'-\t\t\tassert(image != 0);')]
===========================================
===========================================
Total add: 6
Total del: 29
Header: _ccv_dpm_initialize_root_classifier
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 2, u'-\t\t\tassert(image != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 2, u'-\t\t\tassert(image != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 2, u'-\t\t\t\tassert(image != 0);')]
===========================================
===========================================
Total add: 54
Total del: 79
Header: _ccv_dpm_initialize_root_classifier
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 2, u'-\t\t\t\tassert(image != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 2, u'-\t\t\t\tassert(image != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(ch == 31);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_dpm_vector_score
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(ch == 31);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(ch == 31);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_dpm_mixture_model_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_dpm_mixture_model_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_dpm_mixture_model_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_dpm_mixture_model_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_dpm_mixture_model_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(!isnan(score));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(!isnan(scores[j]));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_dpm_mixture_model_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(!isnan(scores[j]));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(!isnan(scores[j]));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(112, 1, u'+\t\t\t\t\tassert(tG[j] == 0);'), (113, 1, u'+\t\t\t\t\tassert(tD[k] == 0);')]
===========================================
===========================================
Total add: 47
Total del: 56
Header: static double center_diff_thr = 1.0;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(112, 1, u'+\t\t\t\t\tassert(tG[j] == 0);'), (113, 1, u'+\t\t\t\t\tassert(tD[k] == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(112, 1, u'+\t\t\t\t\tassert(tG[j] == 0);'), (113, 1, u'+\t\t\t\t\tassert(tD[k] == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(148, 1, u'+\tassert(total_precision < words->rnum + 0.1);'), (149, 1, u'+\tassert(total_recall < truth->rnum + 0.1);')]
===========================================
===========================================
Total add: 66
Total del: 67
Header: _ccv_evaluate_wolf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(148, 1, u'+\tassert(total_precision < words->rnum + 0.1);'), (149, 1, u'+\tassert(total_recall < truth->rnum + 0.1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(148, 1, u'+\tassert(total_precision < words->rnum + 0.1);'), (149, 1, u'+\tassert(total_recall < truth->rnum + 0.1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+\t\t\t\tassert(one_precision <= words->rnum + 0.1); \\')]
===========================================
===========================================
Total add: 16
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+\t\t\t\tassert(one_precision <= words->rnum + 0.1); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+\t\t\t\tassert(one_precision <= words->rnum + 0.1); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\tassert(type >= 0 && type < 16);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: _ccv_cache_lru
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\tassert(type >= 0 && type < 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\tassert(type >= 0 && type < 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tassert(CCV_GET_DATA_TYPE(dmt->type) == CCV_8U ||')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: ccv_matrix_free
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tassert(CCV_GET_DATA_TYPE(dmt->type) == CCV_8U ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\tassert(CCV_GET_DATA_TYPE(dmt->type) == CCV_8U ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(contour->rect.height <= params.max_height && contour->rect.height >= params.min_height);')]
===========================================
===========================================
Total add: 1
Total del: 5
Header: _ccv_swt_connected_letters
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(contour->rect.height <= params.max_height && contour->rect.height >= params.min_height);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(contour->rect.height <= params.max_height && contour->rect.height >= params.min_height);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->type & CCV_C1);'), (3, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_canny
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->type & CCV_C1);'), (3, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->type & CCV_C1);'), (3, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\t\tassert(node1->root == -1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _ccv_set_union_mser
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\t\tassert(node1->root == -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\t\tassert(node1->root == -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
Total add: 193
Total del: 0
Header: ccv_swt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.direction == CCV_BRIGHT_TO_DARK || params.direction == CCV_DARK_TO_BRIGHT);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_set_union_mser
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.direction == CCV_BRIGHT_TO_DARK || params.direction == CCV_DARK_TO_BRIGHT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.direction == CCV_BRIGHT_TO_DARK || params.direction == CCV_DARK_TO_BRIGHT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(cache_types  > 0 && cache_types <= 16);'), (3, 1, u'+\tassert(cache_types > 0 && cache_types <= 16);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_cache_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(cache_types  > 0 && cache_types <= 16);'), (3, 1, u'+\tassert(cache_types > 0 && cache_types <= 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(cache_types  > 0 && cache_types <= 16);'), (3, 1, u'+\tassert(cache_types > 0 && cache_types <= 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(max_point.x - min_point.x > 1 && max_point.y - min_point.y > 1); \\')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_mscr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(max_point.x - min_point.x > 1 && max_point.y - min_point.y > 1); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(max_point.x - min_point.x > 1 && max_point.y - min_point.y > 1); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert((dx == 1 && dy == 0) || (dx == 0 && dy == 1));'), (3, 1, u'+\tassert((dx == 1 && dy == 0) || (dx == 0 && dy == 1) || (dx * dy == 1) || (dx * dy == -1));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: _ccv_mscr_chi
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert((dx == 1 && dy == 0) || (dx == 0 && dy == 1));'), (3, 1, u'+\tassert((dx == 1 && dy == 0) || (dx == 0 && dy == 1) || (dx * dy == 1) || (dx * dy == -1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert((dx == 1 && dy == 0) || (dx == 0 && dy == 1));'), (3, 1, u'+\tassert((dx == 1 && dy == 0) || (dx == 0 && dy == 1) || (dx * dy == 1) || (dx * dy == -1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(bdxy->rows == a->rows - 1 && bdxy->cols == a->cols - 1);'), (18, 1, u'+\tassert(bdxy2->rows == a->rows - 1 && bdxy2->cols == a->cols - 1);')]
===========================================
===========================================
Total add: 35
Total del: 1
Header: _ccv_mscr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(bdxy->rows == a->rows - 1 && bdxy->cols == a->cols - 1);'), (18, 1, u'+\tassert(bdxy2->rows == a->rows - 1 && bdxy2->cols == a->cols - 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(bdxy->rows == a->rows - 1 && bdxy->cols == a->cols - 1);'), (18, 1, u'+\tassert(bdxy2->rows == a->rows - 1 && bdxy2->cols == a->cols - 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\t\tassert(type == 0);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: ccv_dense_matrix_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\t\tassert(type == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\t\tassert(type == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(dmt->sig == 0);'), (3, 1, u'+\t\tassert(dmt->sig == 0); // you cannot make matrix with derived signature immutable (it is immutable already)')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_make_matrix_immutable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(dmt->sig == 0);'), (3, 1, u'+\t\tassert(dmt->sig == 0); // you cannot make matrix with derived signature immutable (it is immutable already)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(dmt->sig == 0);'), (3, 1, u'+\t\tassert(dmt->sig == 0); // you cannot make matrix with derived signature immutable (it is immutable already)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\tassert(cache_types  > 0 && cache_types <= 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tassert(CCV_GET_CACHE_TYPE(branch->terminal.type) >= 0 && CCV_GET_CACHE_TYPE(branch->terminal.type) < 16);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: _ccv_cache_cleanup_and_free
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tassert(CCV_GET_CACHE_TYPE(branch->terminal.type) >= 0 && CCV_GET_CACHE_TYPE(branch->terminal.type) < 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tassert(CCV_GET_CACHE_TYPE(branch->terminal.type) >= 0 && CCV_GET_CACHE_TYPE(branch->terminal.type) < 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(type >= 0 && type < 16);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: ccv_cache_delete
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(type >= 0 && type < 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(type >= 0 && type < 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.iterations > 0);'), (3, 2, u'-\tassert(params.data_minings > 0);'), (4, 2, u'-\tassert(params.relabels > 0);'), (5, 1, u'+\tassert(params.iterations >= 0);'), (6, 1, u'+\tassert(params.data_minings >= 0);'), (7, 1, u'+\tassert(params.relabels >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: _ccv_dpm_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.iterations > 0);'), (3, 2, u'-\tassert(params.data_minings > 0);'), (4, 2, u'-\tassert(params.relabels > 0);'), (5, 1, u'+\tassert(params.iterations >= 0);'), (6, 1, u'+\tassert(params.data_minings >= 0);'), (7, 1, u'+\tassert(params.relabels >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.iterations > 0);'), (3, 2, u'-\tassert(params.data_minings > 0);'), (4, 2, u'-\tassert(params.relabels > 0);'), (5, 1, u'+\tassert(params.iterations >= 0);'), (6, 1, u'+\tassert(params.data_minings >= 0);'), (7, 1, u'+\tassert(params.relabels >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(v->count == root_classifier->count);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_dpm_vector_score
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(v->count == root_classifier->count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(v->count == root_classifier->count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(v->count == root_classifier->count);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_dpm_stochastic_gradient_descent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(v->count == root_classifier->count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(v->count == root_classifier->count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\t\tassert(negv->rnum < params.negative_cache_size + 64);')]
===========================================
===========================================
Total add: 4
Total del: 5
Header: ccv_dpm_mixture_model_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\t\tassert(negv->rnum < params.negative_cache_size + 64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\t\tassert(negv->rnum < params.negative_cache_size + 64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.data_minings > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_dpm_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.data_minings > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.data_minings > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.exclude_overlap >= 0.0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: _ccv_dpm_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.exclude_overlap >= 0.0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.exclude_overlap >= 0.0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.exclude_overlap > 0.1);'), (3, 1, u'+\tassert(params.exclude_overlap >= 0.0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: _ccv_dpm_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.exclude_overlap > 0.1);'), (3, 1, u'+\tassert(params.exclude_overlap >= 0.0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.exclude_overlap > 0.1);'), (3, 1, u'+\tassert(params.exclude_overlap >= 0.0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 1, u'+\tassert(positive_list != 0);'), (49, 1, u'+\tassert(background_list != 0);'), (50, 1, u'+\tassert(working_dir != 0);'), (51, 1, u'+\tassert(negnum > 0);'), (52, 1, u'+\tassert(width > 0 && height > 0);'), (55, 1, u'+\tassert(r0 && "positive-list doesn\'t exists");'), (57, 1, u'+\tassert(r1 && "background-list doesn\'t exists");')]
===========================================
===========================================
Total add: 113
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 1, u'+\tassert(positive_list != 0);'), (49, 1, u'+\tassert(background_list != 0);'), (50, 1, u'+\tassert(working_dir != 0);'), (51, 1, u'+\tassert(negnum > 0);'), (52, 1, u'+\tassert(width > 0 && height > 0);'), (55, 1, u'+\tassert(r0 && "positive-list doesn\'t exists");'), (57, 1, u'+\tassert(r1 && "background-list doesn\'t exists");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 1, u'+\tassert(positive_list != 0);'), (49, 1, u'+\tassert(background_list != 0);'), (50, 1, u'+\tassert(working_dir != 0);'), (51, 1, u'+\tassert(negnum > 0);'), (52, 1, u'+\tassert(width > 0 && height > 0);'), (55, 1, u'+\tassert(r0 && "positive-list doesn\'t exists");'), (57, 1, u'+\tassert(r1 && "background-list doesn\'t exists");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(base_dir != 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(base_dir != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(base_dir != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.overlap > 0.1);'), (3, 1, u'+\tassert(params.include_overlap > 0.1);'), (4, 1, u'+\tassert(params.exclude_overlap > 0.1);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: _ccv_dpm_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.overlap > 0.1);'), (3, 1, u'+\tassert(params.include_overlap > 0.1);'), (4, 1, u'+\tassert(params.exclude_overlap > 0.1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.overlap > 0.1);'), (3, 1, u'+\tassert(params.include_overlap > 0.1);'), (4, 1, u'+\tassert(params.exclude_overlap > 0.1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(114, 1, u'+\tassert(positive_list != 0);'), (115, 1, u'+\tassert(background_list != 0);'), (116, 1, u'+\tassert(working_dir != 0);'), (117, 1, u'+\tassert(base_dir != 0);'), (118, 1, u'+\tassert(negative_count > 0);'), (119, 1, u'+\tassert(params.components > 0);'), (120, 1, u'+\tassert(params.parts > 0);'), (125, 1, u'+\tassert(r0 && "positive-list doesn\'t exists");'), (127, 1, u'+\tassert(r1 && "background-list doesn\'t exists");')]
===========================================
===========================================
Total add: 121
Total del: 4
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(114, 1, u'+\tassert(positive_list != 0);'), (115, 1, u'+\tassert(background_list != 0);'), (116, 1, u'+\tassert(working_dir != 0);'), (117, 1, u'+\tassert(base_dir != 0);'), (118, 1, u'+\tassert(negative_count > 0);'), (119, 1, u'+\tassert(params.components > 0);'), (120, 1, u'+\tassert(params.parts > 0);'), (125, 1, u'+\tassert(r0 && "positive-list doesn\'t exists");'), (127, 1, u'+\tassert(r1 && "background-list doesn\'t exists");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(114, 1, u'+\tassert(positive_list != 0);'), (115, 1, u'+\tassert(background_list != 0);'), (116, 1, u'+\tassert(working_dir != 0);'), (117, 1, u'+\tassert(base_dir != 0);'), (118, 1, u'+\tassert(negative_count > 0);'), (119, 1, u'+\tassert(params.components > 0);'), (120, 1, u'+\tassert(params.parts > 0);'), (125, 1, u'+\tassert(r0 && "positive-list doesn\'t exists");'), (127, 1, u'+\tassert(r1 && "background-list doesn\'t exists");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(v->count == 8);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: _ccv_dpm_read_feature_vector
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(v->count == 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(v->count == 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.negative_cache_size <= negnum);'), (3, 1, u'+\tassert(params.negative_cache_size <= negnum && params.negative_cache_size > REGQ && params.negative_cache_size > MINI_BATCH);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_dpm_mixture_model_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.negative_cache_size <= negnum);'), (3, 1, u'+\tassert(params.negative_cache_size <= negnum && params.negative_cache_size > REGQ && params.negative_cache_size > MINI_BATCH);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(params.negative_cache_size <= negnum);'), (3, 1, u'+\tassert(params.negative_cache_size <= negnum && params.negative_cache_size > REGQ && params.negative_cache_size > MINI_BATCH);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.negative_cache_size > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_dpm_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.negative_cache_size > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.negative_cache_size > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.negative_cache_size <= negnum);')]
===========================================
===========================================
Total add: 16
Total del: 0
Header: ccv_dpm_mixture_model_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.negative_cache_size <= negnum);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.negative_cache_size <= negnum);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.balance > 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_dpm_check_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.balance > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(params.balance > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(!ccv_any_nan(root_feature));')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: _ccv_dpm_compute_score
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(!ccv_any_nan(root_feature));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(!ccv_any_nan(root_feature));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(!ccv_any_nan(response));')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: _ccv_dpm_compute_score
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(!ccv_any_nan(response));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(!ccv_any_nan(response));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(!ccv_any_nan(feature));')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: _ccv_dpm_compute_score
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(!ccv_any_nan(feature));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(!ccv_any_nan(feature));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tassert(part_feature[k]->rows == pyr[j - next]->rows && part_feature[k]->cols == pyr[j - next]->cols);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: _ccv_dpm_collect_all
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tassert(part_feature[k]->rows == pyr[j - next]->rows && part_feature[k]->cols == pyr[j - next]->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\t\tassert(part_feature[k]->rows == pyr[j - next]->rows && part_feature[k]->cols == pyr[j - next]->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(!ccv_any_nan(root_feature));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_dpm_compute_score
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(!ccv_any_nan(root_feature));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(!ccv_any_nan(root_feature));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(!ccv_any_nan(response));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_dpm_compute_score
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(!ccv_any_nan(response));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(!ccv_any_nan(response));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(!ccv_any_nan(feature));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: _ccv_dpm_compute_score
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(!ccv_any_nan(feature));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(!ccv_any_nan(feature));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\t\tassert(part_feature[k]->rows == pyr[j - next]->rows && part_feature[k]->cols == pyr[j - next]->cols);')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: _ccv_dpm_collect_all
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\t\tassert(part_feature[k]->rows == pyr[j - next]->rows && part_feature[k]->cols == pyr[j - next]->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t\t\t\tassert(part_feature[k]->rows == pyr[j - next]->rows && part_feature[k]->cols == pyr[j - next]->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols) + 1); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t\t\t\t\tassert(k >= 0 && k < ccv_max(db->rows, db->cols)); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-\t\tassert(bboxes[i].width > 0 && bboxes[i].height > 0);')]
===========================================
===========================================
Total add: 17
Total del: 71
Header: _ccv_dpm_mixture_model_cleanup
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-\t\tassert(bboxes[i].width > 0 && bboxes[i].height > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-\t\tassert(bboxes[i].width > 0 && bboxes[i].height > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t\t\t\tassert(image != 0);'), (34, 2, u'-\t\t\t\t\tassert(image != 0);')]
===========================================
===========================================
Total add: 39
Total del: 21
Header: ccv_dpm_mixture_model_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t\t\t\tassert(image != 0);'), (34, 2, u'-\t\t\t\t\tassert(image != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t\t\t\tassert(image != 0);'), (34, 2, u'-\t\t\t\t\tassert(image != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+\tassert(linear != 0);')]
===========================================
===========================================
Total add: 221
Total del: 51
Header: ccv_dpm_mixture_model_new
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+\tassert(linear != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+\tassert(linear != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u"+\tassert(flag == '.');")]
===========================================
===========================================
Total add: 3
Total del: 0
Header: ccv_load_dpm_mixture_model
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u"+\tassert(flag == '.');")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u"+\tassert(flag == '.');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(y >= 0 && y + rows <= da->rows && x >= 0 && x + cols <= da->cols);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: ccv_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(y >= 0 && y + rows <= da->rows && x >= 0 && x + cols <= da->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(y >= 0 && y + rows <= da->rows && x >= 0 && x + cols <= da->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t\t\t\tassert(image != 0);')]
===========================================
===========================================
Total add: 34
Total del: 0
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t\t\t\tassert(image != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t\t\t\tassert(image != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->rows >= size && a->cols >= size);'), (3, 1, u'+\tassert(a->rows >= size && a->cols >= size && (4 + sbin * 3) <= CCV_MAX_CHANNEL);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: ccv_hog
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->rows >= size && a->cols >= size);'), (3, 1, u'+\tassert(a->rows >= size && a->cols >= size && (4 + sbin * 3) <= CCV_MAX_CHANNEL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->rows >= size && a->cols >= size);'), (3, 1, u'+\tassert(a->rows >= size && a->cols >= size && (4 + sbin * 3) <= CCV_MAX_CHANNEL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-\t\t\tassert(iyp < rows);'), (31, 2, u'-\t\t\tassert(ixp < cols);')]
===========================================
===========================================
Total add: 2
Total del: 74
Header: ccv_hog
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-\t\t\tassert(iyp < rows);'), (31, 2, u'-\t\t\tassert(ixp < cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-\t\t\tassert(iyp < rows);'), (31, 2, u'-\t\t\tassert(ixp < cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(97, 1, u'+\t\t\tassert(iyp < rows); \\'), (99, 1, u'+\t\t\tassert(ixp < cols); \\')]
===========================================
===========================================
Total add: 147
Total del: 72
Header: ccv_hog
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(97, 1, u'+\t\t\tassert(iyp < rows); \\'), (99, 1, u'+\t\t\tassert(ixp < cols); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(97, 1, u'+\t\t\tassert(iyp < rows); \\'), (99, 1, u'+\t\t\tassert(ixp < cols); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(mx == 0); \\')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(mx == 0); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(mx == 0); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(my == 0); \\')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_distance_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(my == 0); \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(my == 0); \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+\t\t\tassert(iyp < rows);'), (46, 1, u'+\t\t\tassert(ixp < cols);')]
===========================================
===========================================
Total add: 32
Total del: 22
Header: ccv_hog
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+\t\t\tassert(iyp < rows);'), (46, 1, u'+\t\t\tassert(ixp < cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+\t\t\tassert(iyp < rows);'), (46, 1, u'+\t\t\tassert(ixp < cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(image != 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(image != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(image != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->type & CCV_C1);')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: ccv_sobel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->type & CCV_C1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->type & CCV_C1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: ccv_gradient
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);'), (3, 1, u'+\tassert(a->rows >= size && a->cols >= size);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_hog
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);'), (3, 1, u'+\tassert(a->rows >= size && a->cols >= size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);'), (3, 1, u'+\tassert(a->rows >= size && a->cols >= size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(x->rows == rows && x->cols == cols && (CCV_GET_DATA_TYPE(x->type) & types) && (CCV_GET_CHANNEL(x->type) == CCV_GET_CHANNEL(types)));')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: ccv_dense_matrix_renew
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(x->rows == rows && x->cols == cols && (CCV_GET_DATA_TYPE(x->type) & types) && (CCV_GET_CHANNEL(x->type) == CCV_GET_CHANNEL(types)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(x->rows == rows && x->cols == cols && (CCV_GET_DATA_TYPE(x->type) & types) && (CCV_GET_CHANNEL(x->type) == CCV_GET_CHANNEL(types)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(fd != 0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ccv_read
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(fd != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(fd != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(fd != 0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ccv_write
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(fd != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(fd != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(!(type & CCV_UNMANAGED));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_matrix_free_immediately
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(!(type & CCV_UNMANAGED));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(!(type & CCV_UNMANAGED));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(!(type & CCV_UNMANAGED));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_matrix_free
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(!(type & CCV_UNMANAGED));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(!(type & CCV_UNMANAGED));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->type & CCV_C1);'), (3, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_gradient
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->type & CCV_C1);'), (3, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(a->type & CCV_C1);'), (3, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(a->type & CCV_C1);'), (10, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: ccv_gradient
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(a->type & CCV_C1);'), (10, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(a->type & CCV_C1);'), (10, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert(ch == 1); // for now')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: _ccv_get_optimal_fft_size
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert(ch == 1); // for now')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert(ch == 1); // for now')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert(ch == 1); // for now')]
===========================================
===========================================
Total add: 136
Total del: 5
Header: _ccv_filter_fftw
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert(ch == 1); // for now')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tassert(ch == 1); // for now')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\tassert(ch == 1); // for now')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: _ccv_filter_fftw
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\tassert(ch == 1); // for now')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\tassert(ch == 1); // for now')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(ch == 1); // for now')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: _ccv_filter_kissfft
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(ch == 1); // for now')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tassert(ch == 1); // for now')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL_NUM(da->type) == 1 && CCV_GET_CHANNEL_NUM(db->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));'), (3, 1, u'+\tassert(CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL(da->type) == 1 && CCV_GET_CHANNEL(db->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));'), (6, 2, u'-\t\tassert(CCV_GET_DATA_TYPE(dc->type) == CCV_GET_DATA_TYPE(da->type) && CCV_GET_CHANNEL_NUM(dc->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);'), (7, 1, u'+\t\tassert(CCV_GET_DATA_TYPE(dc->type) == CCV_GET_DATA_TYPE(da->type) && CCV_GET_CHANNEL(dc->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ccv_gemm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL_NUM(da->type) == 1 && CCV_GET_CHANNEL_NUM(db->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));'), (3, 1, u'+\tassert(CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL(da->type) == 1 && CCV_GET_CHANNEL(db->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));'), (6, 2, u'-\t\tassert(CCV_GET_DATA_TYPE(dc->type) == CCV_GET_DATA_TYPE(da->type) && CCV_GET_CHANNEL_NUM(dc->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);'), (7, 1, u'+\t\tassert(CCV_GET_DATA_TYPE(dc->type) == CCV_GET_DATA_TYPE(da->type) && CCV_GET_CHANNEL(dc->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL_NUM(da->type) == 1 && CCV_GET_CHANNEL_NUM(db->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));'), (3, 1, u'+\tassert(CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL(da->type) == 1 && CCV_GET_CHANNEL(db->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));'), (6, 2, u'-\t\tassert(CCV_GET_DATA_TYPE(dc->type) == CCV_GET_DATA_TYPE(da->type) && CCV_GET_CHANNEL_NUM(dc->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);'), (7, 1, u'+\t\tassert(CCV_GET_DATA_TYPE(dc->type) == CCV_GET_DATA_TYPE(da->type) && CCV_GET_CHANNEL(dc->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_sobel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_gradient
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_hog
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_canny
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(a->type & CCV_C1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t\tassert(fsz % 2 == 1);')]
===========================================
===========================================
Total add: 131
Total del: 47
Header: ccv_sobel
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t\tassert(fsz % 2 == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t\tassert(fsz % 2 == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(fd != 0);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: ccv_unserialize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(fd != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(fd != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(fd != 0);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: ccv_serialize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(fd != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(fd != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(off_x >= 0 && off_y >= 0);'), (6, 1, u'+\tassert(src_x >= 0 && src_y >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: ccv_resample
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(off_x >= 0 && off_y >= 0);'), (6, 1, u'+\tassert(src_x >= 0 && src_y >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(off_x >= 0 && off_y >= 0);'), (6, 1, u'+\tassert(src_x >= 0 && src_y >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(off_x >= 0 && off_y >= 0);'), (6, 1, u'+\tassert(src_x >= 0 && src_y >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: ccv_sample_down
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(off_x >= 0 && off_y >= 0);'), (6, 1, u'+\tassert(src_x >= 0 && src_y >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tassert(off_x >= 0 && off_y >= 0);'), (6, 1, u'+\tassert(src_x >= 0 && src_y >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\tassert(off_x >= 0 && off_y >= 0);')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: ccv_resample
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\tassert(off_x >= 0 && off_y >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\tassert(off_x >= 0 && off_y >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\tassert(off_x >= 0 && off_y >= 0);')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: ccv_sample_down
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\tassert(off_x >= 0 && off_y >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\tassert(off_x >= 0 && off_y >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(imgs0->step == steps[0]);'), (5, 1, u'+\t\t\t\tassert(imgs1->step == steps[1]);'), (7, 1, u'+\t\t\t\tassert(imgs2->step == steps[2]);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: __ccv_prepare_background_data
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(imgs0->step == steps[0]);'), (5, 1, u'+\t\t\t\tassert(imgs1->step == steps[1]);'), (7, 1, u'+\t\t\t\tassert(imgs2->step == steps[2]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\t\tassert(imgs0->step == steps[0]);'), (5, 1, u'+\t\t\t\tassert(imgs1->step == steps[1]);'), (7, 1, u'+\t\t\t\tassert(imgs2->step == steps[2]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(((uint64_t)x & 0x3) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_cache_put
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(((uint64_t)x & 0x3) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(((uint64_t)x & 0x3) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(depth < 10);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_cache_put
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(depth < 10);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(depth < 10);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(tho->rows == mdo->rows && tho->cols == mdo->cols);'), (85, 1, u'+\t\t\tassert(tho->rows == mdo->rows && tho->cols == mdo->cols);'), (86, 1, u'+\t\t\tassert(ix >= 0 && ix < tho->cols && iy >=0 && iy < tho->rows);')]
===========================================
===========================================
Total add: 91
Total del: 5
Header: ccv_sift
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(tho->rows == mdo->rows && tho->cols == mdo->cols);'), (85, 1, u'+\t\t\tassert(tho->rows == mdo->rows && tho->cols == mdo->cols);'), (86, 1, u'+\t\t\tassert(ix >= 0 && ix < tho->cols && iy >=0 && iy < tho->rows);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(tho->rows == mdo->rows && tho->cols == mdo->cols);'), (85, 1, u'+\t\t\tassert(tho->rows == mdo->rows && tho->cols == mdo->cols);'), (86, 1, u'+\t\t\tassert(ix >= 0 && ix < tho->cols && iy >=0 && iy < tho->rows);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: __ccv_keypoint_interpolate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\tassert(CCV_GET_CHANNEL(a->type) == CCV_C1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(da->type == db->type && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));'), (3, 1, u'+\tassert(CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL_NUM(da->type) == 1 && CCV_GET_CHANNEL_NUM(db->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));'), (6, 2, u'-\t\tassert(dc->type == da->type && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);'), (7, 1, u'+\t\tassert(CCV_GET_DATA_TYPE(dc->type) == CCV_GET_DATA_TYPE(da->type) && CCV_GET_CHANNEL_NUM(dc->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ccv_gemm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(da->type == db->type && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));'), (3, 1, u'+\tassert(CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL_NUM(da->type) == 1 && CCV_GET_CHANNEL_NUM(db->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));'), (6, 2, u'-\t\tassert(dc->type == da->type && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);'), (7, 1, u'+\t\tassert(CCV_GET_DATA_TYPE(dc->type) == CCV_GET_DATA_TYPE(da->type) && CCV_GET_CHANNEL_NUM(dc->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(da->type == db->type && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));'), (3, 1, u'+\tassert(CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL_NUM(da->type) == 1 && CCV_GET_CHANNEL_NUM(db->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));'), (6, 2, u'-\t\tassert(dc->type == da->type && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);'), (7, 1, u'+\t\tassert(CCV_GET_DATA_TYPE(dc->type) == CCV_GET_DATA_TYPE(da->type) && CCV_GET_CHANNEL_NUM(dc->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-\t\tassert(da->type == dd->type && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dd->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dd->cols);')]
===========================================
===========================================
Total add: 11
Total del: 31
Header: ccv_gemm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-\t\tassert(da->type == dd->type && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dd->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dd->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-\t\tassert(da->type == dd->type && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dd->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dd->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-\t\tassert(db->rows == rows && db->cols == cols && CCV_GET_CHANNEL(db->type) == CCV_GET_CHANNEL(a->type));')]
===========================================
===========================================
Total add: 5
Total del: 23
Header: ccv_resample
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-\t\tassert(db->rows == rows && db->cols == cols && CCV_GET_CHANNEL(db->type) == CCV_GET_CHANNEL(a->type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-\t\tassert(db->rows == rows && db->cols == cols && CCV_GET_CHANNEL(db->type) == CCV_GET_CHANNEL(a->type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-\t\tassert(db->rows == a->rows / 2 && db->cols == a->cols / 2 && db->type == a->type);')]
===========================================
===========================================
Total add: 2
Total del: 20
Header: ccv_sample_down
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-\t\tassert(db->rows == a->rows / 2 && db->cols == a->cols / 2 && db->type == a->type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-\t\tassert(db->rows == a->rows / 2 && db->cols == a->cols / 2 && db->type == a->type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 2, u'-\t\t\tassert(db->rows == a->rows && db->cols == a->cols && db->type == a->type);')]
===========================================
===========================================
Total add: 7
Total del: 24
Header: ccv_flip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 2, u'-\t\t\tassert(db->rows == a->rows && db->cols == a->cols && db->type == a->type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 2, u'-\t\t\tassert(db->rows == a->rows && db->cols == a->cols && db->type == a->type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-\tassert(da->type == dd->type && da->rows == dd->rows && da->cols == dd->cols);')]
===========================================
===========================================
Total add: 2
Total del: 22
Header: ccv_filter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-\tassert(da->type == dd->type && da->rows == dd->rows && da->cols == dd->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-\tassert(da->type == dd->type && da->rows == dd->rows && da->cols == dd->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t\t\tassert(da->type == db->type && db->rows == rows && db->cols == cols);')]
===========================================
===========================================
Total add: 6
Total del: 24
Header: ccv_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t\t\tassert(da->type == db->type && db->rows == rows && db->cols == cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t\t\tassert(da->type == db->type && db->rows == rows && db->cols == cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(depth >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_cache_put
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(depth >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(depth >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(argc >= 2);'), (3, 1, u'+\tassert(argc >= 3);'), (15, 1, u'+\t\tassert(argc >= 4);')]
===========================================
===========================================
Total add: 23
Total del: 9
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(argc >= 2);'), (3, 1, u'+\tassert(argc >= 3);'), (15, 1, u'+\t\tassert(argc >= 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tassert(argc >= 2);'), (3, 1, u'+\tassert(argc >= 3);'), (15, 1, u'+\t\tassert(argc >= 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(argc >= 3);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(argc >= 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(argc >= 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(fabs(error - gene[i].error) < 1e-3);')]
===========================================
===========================================
Total add: 2
Total del: 6
Header: __ccv_sgf_genetic_optimize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(fabs(error - gene[i].error) < 1e-3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(fabs(error - gene[i].error) < 1e-3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(err_rate[i] == error);')]
===========================================
===========================================
Total add: 4
Total del: 5
Header: __ccv_sgf_opencl_kernel_execute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(err_rate[i] == error);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\tassert(err_rate[i] == error);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t\t\tassert(image->type & CCV_C1);'), (5, 1, u'+\t\t\tassert((image->type & CCV_C1) && (image->type & CCV_8U));')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: __ccv_prepare_background_data
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t\t\tassert(image->type & CCV_C1);'), (5, 1, u'+\t\t\tassert((image->type & CCV_C1) && (image->type & CCV_8U));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t\t\tassert(image->type & CCV_C1);'), (5, 1, u'+\t\t\tassert((image->type & CCV_C1) && (image->type & CCV_8U));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert((imgs0->type & CCV_C1) && (imgs0->type & CCV_8U) && imgs0->rows == size.height + HOG_BORDER_SIZE * 2 && imgs0->cols == size.width + HOG_BORDER_SIZE * 2);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: __ccv_prepare_positive_data
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert((imgs0->type & CCV_C1) && (imgs0->type & CCV_8U) && imgs0->rows == size.height + HOG_BORDER_SIZE * 2 && imgs0->cols == size.width + HOG_BORDER_SIZE * 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert((imgs0->type & CCV_C1) && (imgs0->type & CCV_8U) && imgs0->rows == size.height + HOG_BORDER_SIZE * 2 && imgs0->cols == size.width + HOG_BORDER_SIZE * 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(image->type & CCV_C1);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: __ccv_prepare_background_data
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(image->type & CCV_C1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\t\tassert(image->type & CCV_C1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(da->type == db->type);'), (3, 1, u'+\t\t\tassert(da->type == db->type && db->rows == rows && db->cols == cols);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(da->type == db->type);'), (3, 1, u'+\t\t\tassert(da->type == db->type && db->rows == rows && db->cols == cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t\tassert(da->type == db->type);'), (3, 1, u'+\t\t\tassert(da->type == db->type && db->rows == rows && db->cols == cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(y >= 0 && y + rows <= da->rows && x >= 0 && x + cols <= da->cols);'), (25, 1, u'+\t\t\tassert(da->type == db->type);')]
===========================================
===========================================
Total add: 36
Total del: 2
Header: ccv_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(y >= 0 && y + rows <= da->rows && x >= 0 && x + cols <= da->cols);'), (25, 1, u'+\t\t\tassert(da->type == db->type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t\tassert(y >= 0 && y + rows <= da->rows && x >= 0 && x + cols <= da->cols);'), (25, 1, u'+\t\t\tassert(da->type == db->type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(db->rows == rows && db->cols == cols && db->type == a->type);'), (3, 1, u'+\t\tassert(db->rows == rows && db->cols == cols && CCV_GET_CHANNEL(db->type) == CCV_GET_CHANNEL(a->type));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ccv_resample
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(db->rows == rows && db->cols == cols && db->type == a->type);'), (3, 1, u'+\t\tassert(db->rows == rows && db->cols == cols && CCV_GET_CHANNEL(db->type) == CCV_GET_CHANNEL(a->type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tassert(db->rows == rows && db->cols == cols && db->type == a->type);'), (3, 1, u'+\t\tassert(db->rows == rows && db->cols == cols && CCV_GET_CHANNEL(db->type) == CCV_GET_CHANNEL(a->type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\tassert(db->rows == a->rows / 2 && db->cols == a->cols / 2 && db->type == a->type);')]
===========================================
===========================================
Total add: 15
Total del: 0
Header: ccv_sample_down
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\tassert(db->rows == a->rows / 2 && db->cols == a->cols / 2 && db->type == a->type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\tassert(db->rows == a->rows / 2 && db->cols == a->cols / 2 && db->type == a->type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(db->rows == rows && db->cols == cols && db->type == a->type);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ccv_resample
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(db->rows == rows && db->cols == cols && db->type == a->type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t\tassert(db->rows == rows && db->cols == cols && db->type == a->type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\tassert(da->type == db->type && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: ccv_gemm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\tassert(da->type == db->type && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\tassert(da->type == db->type && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tassert(dc->type == da->type && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);')]
===========================================
===========================================
Total add: 9
Total del: 2
Header: ccv_gemm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tassert(dc->type == da->type && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t\tassert(dc->type == da->type && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tassert(da->type == dd->type && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dd->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dd->cols);'), (9, 2, u'-\tassert(db->type == dd->type && db->rows == dd->rows && db->cols == dd->cols);')]
===========================================
===========================================
Total add: 14
Total del: 3
Header: ccv_gemm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tassert(da->type == dd->type && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dd->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dd->cols);'), (9, 2, u'-\tassert(db->type == dd->type && db->rows == dd->rows && db->cols == dd->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tassert(da->type == dd->type && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dd->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dd->cols);'), (9, 2, u'-\tassert(db->type == dd->type && db->rows == dd->rows && db->cols == dd->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+\tassert(db->type == dd->type && db->rows == dd->rows && db->cols == dd->cols);')]
===========================================
===========================================
Total add: 24
Total del: 0
Header: ccv_gemm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+\tassert(db->type == dd->type && db->rows == dd->rows && db->cols == dd->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+\tassert(db->type == dd->type && db->rows == dd->rows && db->cols == dd->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(da->type == dd->type && da->rows == dd->rows && da->cols == dd->cols);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: ccv_filter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(da->type == dd->type && da->rows == dd->rows && da->cols == dd->cols);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tassert(da->type == dd->type && da->rows == dd->rows && da->cols == dd->cols);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-int ccv_matrix_assert(ccv_matrix_t* mat, int type, int rows_lt, int rows_gt, int cols_lt, int cols_gt)'), (3, 1, u'+void ccv_matrix_assert(ccv_matrix_t* mat, int type, int rows_lt, int rows_gt, int cols_lt, int cols_gt)')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: ccv_set_sparse_matrix_cell
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-int ccv_matrix_assert(ccv_matrix_t* mat, int type, int rows_lt, int rows_gt, int cols_lt, int cols_gt)'), (3, 1, u'+void ccv_matrix_assert(ccv_matrix_t* mat, int type, int rows_lt, int rows_gt, int cols_lt, int cols_gt)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-int ccv_matrix_assert(ccv_matrix_t* mat, int type, int rows_lt, int rows_gt, int cols_lt, int cols_gt)'), (3, 1, u'+void ccv_matrix_assert(ccv_matrix_t* mat, int type, int rows_lt, int rows_gt, int cols_lt, int cols_gt)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-int ccv_matrix_assert(ccv_matrix_t* mat, int type, int rows_lt = 0, int rows_gt = 0, int cols_lt = 0, int cols_gt = 0)'), (9, 1, u'+int ccv_matrix_assert(ccv_matrix_t* mat, int type, int rows_lt, int rows_gt, int cols_lt, int cols_gt)')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: ccv_get_sparse_matrix
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-int ccv_matrix_assert(ccv_matrix_t* mat, int type, int rows_lt = 0, int rows_gt = 0, int cols_lt = 0, int cols_gt = 0)'), (9, 1, u'+int ccv_matrix_assert(ccv_matrix_t* mat, int type, int rows_lt, int rows_gt, int cols_lt, int cols_gt)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-int ccv_matrix_assert(ccv_matrix_t* mat, int type, int rows_lt = 0, int rows_gt = 0, int cols_lt = 0, int cols_gt = 0)'), (9, 1, u'+int ccv_matrix_assert(ccv_matrix_t* mat, int type, int rows_lt, int rows_gt, int cols_lt, int cols_gt)')]
===========================================
<type 'unicode'>
569
Mismatch count:2143
Normal count:24673
