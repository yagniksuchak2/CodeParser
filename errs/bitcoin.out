projects/top_C++/bitcoin
Going to process projects/top_C++/bitcoin/all_log.txt 
---------- bitcoin ------------

===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    assert(ret);')]
===========================================
===========================================
Total add: 9
Total del: 1
Header: CKey::GetPrivKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    assert(ret);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    assert(ret);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(ret);'), (7, 1, u'+    assert(pubkey.IsValid());'), (8, 1, u'+    assert((int)pubkey.size() == clen);')]
===========================================
===========================================
Total add: 9
Total del: 1
Header: CKey::GetPubKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(ret);'), (7, 1, u'+    assert(pubkey.IsValid());'), (8, 1, u'+    assert((int)pubkey.size() == clen);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(ret);'), (7, 1, u'+    assert(pubkey.IsValid());'), (8, 1, u'+    assert((int)pubkey.size() == clen);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    assert((int)size() == pubkeylen);')]
===========================================
===========================================
Total add: 11
Total del: 2
Header: CPubKey::RecoverCompact
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    assert((int)size() == pubkeylen);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    assert((int)size() == pubkeylen);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(ret);'), (6, 1, u'+    assert(clen == (int)size());')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: CPubKey::Decompress
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(ret);'), (6, 1, u'+    assert(clen == (int)size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(ret);'), (6, 1, u'+    assert(clen == (int)size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(state != NULL);'), (20, 1, u'+    assert(state != NULL);')]
===========================================
===========================================
Total add: 33
Total del: 0
Header: MarkBlockAsInFlight
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(state != NULL);'), (20, 1, u'+    assert(state != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(state != NULL);'), (20, 1, u'+    assert(state != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(287, 1, u'+    assert((nCompact & ~0x007fffff) == 0);'), (288, 1, u'+    assert(nSize < 256);')]
===========================================
Class:class AcceptedConnection { 
Class: class CRPCConvertTable { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(pCurrentParams);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: static CRegTestParams regTestParams;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(pCurrentParams);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(pCurrentParams);')]
===========================================
Class:     class CBaseMainParams : public CBaseChainParams { class CBaseMainParams : public CBaseChainParams 
Class:    class CBaseTestNetParams : public CBaseMainParams { class CBaseTestNetParams : public CBaseMainParams 
Class:    class CBaseRegTestParams : public CBaseTestNetParams { class CBaseRegTestParams : public CBaseTestNetParams 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(84, 2, u'-                    assert(hash == pblock->GetHash());'), (89, 1, u'+                        assert(hash == pblock->GetHash());')]
===========================================
===========================================
Total add: 73
Total del: 72
Header: BitcoinMiner
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(84, 2, u'-                    assert(hash == pblock->GetHash());'), (89, 1, u'+                        assert(hash == pblock->GetHash());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(84, 2, u'-                    assert(hash == pblock->GetHash());'), (89, 1, u'+                        assert(hash == pblock->GetHash());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);'), (6, 1, u'+    assert(txCoinbase.vin[0].scriptSig.size() <= 100);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: IncrementExtraNonce
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);'), (6, 1, u'+    assert(txCoinbase.vin[0].scriptSig.size() <= 100);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);'), (6, 1, u'+    assert(txCoinbase.vin[0].scriptSig.size() <= 100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: ProcessBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 33
Total del: 37
Header: FindMostWorkChain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
Class:   class CBlockAverage { 
Class: class CMinerPolicyEstimator { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(ReadBlockFromDisk(block, (*mi).second));'), (4, 1, u'+                        assert(!"cannot load block from disk");')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ProcessGetData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(ReadBlockFromDisk(block, (*mi).second));'), (4, 1, u'+                        assert(!"cannot load block from disk");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(ReadBlockFromDisk(block, (*mi).second));'), (4, 1, u'+                        assert(!"cannot load block from disk");')]
===========================================
Class:  class PeerTablePriv { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 0
Total del: 13
Header: CBlockIndex::IsSuperMajority
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
Class: class AmountSpinBox: public QDoubleSpinBox { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                    assert(ReadBlockFromDisk(block, (*mi).second));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ProcessGetData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                    assert(ReadBlockFromDisk(block, (*mi).second));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                    assert(ReadBlockFromDisk(block, (*mi).second));')]
===========================================
Class:    class CBitcoinAddressVisitor : public boost::static_visitor<bool> {     class CBitcoinAddressVisitor : public boost::static_visitor<bool> 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(kHeaderSize - 1, DroppedBytes());'), (3, 2, u'-  ASSERT_EQ("OK", MatchError("truncated record at end of file"));'), (5, 1, u'+  ASSERT_EQ(0, DroppedBytes());'), (6, 1, u'+  ASSERT_EQ("", ReportMessage());')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(kHeaderSize - 1, DroppedBytes());'), (3, 2, u'-  ASSERT_EQ("OK", MatchError("truncated record at end of file"));'), (5, 1, u'+  ASSERT_EQ(0, DroppedBytes());'), (6, 1, u'+  ASSERT_EQ("", ReportMessage());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(kHeaderSize - 1, DroppedBytes());'), (3, 2, u'-  ASSERT_EQ("OK", MatchError("truncated record at end of file"));'), (5, 1, u'+  ASSERT_EQ(0, DroppedBytes());'), (6, 1, u'+  ASSERT_EQ("", ReportMessage());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT_EQ("foo", Read());'), (8, 1, u'+  ASSERT_EQ(kBlockSize, DroppedBytes());'), (9, 1, u'+  ASSERT_EQ("OK", MatchError("bad record length"));')]
===========================================
===========================================
Total add: 11
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT_EQ("foo", Read());'), (8, 1, u'+  ASSERT_EQ(kBlockSize, DroppedBytes());'), (9, 1, u'+  ASSERT_EQ("OK", MatchError("bad record length"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT_EQ("foo", Read());'), (8, 1, u'+  ASSERT_EQ(kBlockSize, DroppedBytes());'), (9, 1, u'+  ASSERT_EQ("OK", MatchError("bad record length"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(kHeaderSize + 2, DroppedBytes());'), (3, 2, u'-  ASSERT_EQ("OK", MatchError("bad record length"));'), (4, 1, u'+  ASSERT_EQ(0, DroppedBytes());'), (5, 1, u'+  ASSERT_EQ("", ReportMessage());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(kHeaderSize + 2, DroppedBytes());'), (3, 2, u'-  ASSERT_EQ("OK", MatchError("bad record length"));'), (4, 1, u'+  ASSERT_EQ(0, DroppedBytes());'), (5, 1, u'+  ASSERT_EQ("", ReportMessage());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  ASSERT_EQ(kHeaderSize + 2, DroppedBytes());'), (3, 2, u'-  ASSERT_EQ("OK", MatchError("bad record length"));'), (4, 1, u'+  ASSERT_EQ(0, DroppedBytes());'), (5, 1, u'+  ASSERT_EQ("", ReportMessage());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT_EQ("EOF", Read());'), (7, 1, u'+  ASSERT_EQ("", ReportMessage());'), (8, 1, u'+  ASSERT_EQ(0, DroppedBytes());'), (15, 1, u'+  ASSERT_EQ("EOF", Read());'), (16, 1, u'+  ASSERT_EQ("", ReportMessage());'), (17, 1, u'+  ASSERT_EQ(0, DroppedBytes());')]
===========================================
===========================================
Total add: 18
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT_EQ("EOF", Read());'), (7, 1, u'+  ASSERT_EQ("", ReportMessage());'), (8, 1, u'+  ASSERT_EQ(0, DroppedBytes());'), (15, 1, u'+  ASSERT_EQ("EOF", Read());'), (16, 1, u'+  ASSERT_EQ("", ReportMessage());'), (17, 1, u'+  ASSERT_EQ(0, DroppedBytes());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  ASSERT_EQ("EOF", Read());'), (7, 1, u'+  ASSERT_EQ("", ReportMessage());'), (8, 1, u'+  ASSERT_EQ(0, DroppedBytes());'), (15, 1, u'+  ASSERT_EQ("EOF", Read());'), (16, 1, u'+  ASSERT_EQ("", ReportMessage());'), (17, 1, u'+  ASSERT_EQ(0, DroppedBytes());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ConnectBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+        assert(carry == 0);'), (77, 1, u'+        assert(carry == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: IsInitialBlockDownload
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: FindMostWorkChain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: AddToBlockIndex
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: IsStandardTx
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: IsFinalTx
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CMerkleTx::SetMerkleBranch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: AcceptToMemoryPool
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CMerkleTx::GetDepthInMainChainINTERNAL
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CMerkleTx::GetDepthInMainChain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: IsInitialBlockDownload
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CheckForkWarningConditions
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CheckForkWarningConditionsOnNewFork
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: FindMostWorkChain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: AddToBlockIndex
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: AcceptBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CBlockIndex::GetMedianTime
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: PushGetBlocks
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: PrintBlockTree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: TransactionDesc::FormatTxStatus
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: TransactionRecord::updateStatus
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: TransactionRecord::statusUpdateNeeded
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(pindexNew);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: AddToBlockIndex
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(pindexNew);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(pindexNew);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pindexNew);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: AddToBlockIndex
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pindexNew);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pindexNew);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        AssertLockHeld(cs_wallet);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CWallet::AddToWalletIfInvolvingMe
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        AssertLockHeld(cs_wallet);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+        AssertLockHeld(cs_wallet);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+        assert(wtx.GetHash() == wtxid);')]
===========================================
===========================================
Total add: 11
Total del: 45
Header: CWallet::ReacceptWalletTransactions
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+        assert(wtx.GetHash() == wtxid);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+        assert(wtx.GetHash() == wtxid);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(0);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: AssertLockHeldInternal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_wallet); // nWalletVersion')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CWallet::SetMinVersion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_wallet); // nWalletVersion')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_wallet); // nWalletVersion')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_wallet); // nWalletVersion, nWalletMaxVersion')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CWallet::SetMaxVersion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_wallet); // nWalletVersion, nWalletMaxVersion')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_wallet); // nWalletVersion, nWalletMaxVersion')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_wallet); // mapAddressBook')]
===========================================
===========================================
Total add: 10
Total del: 7
Header: CWallet::SetAddressBook
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_wallet); // mapAddressBook')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_wallet); // mapAddressBook')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    AssertLockHeld(cs_wallet); // mapAddressBook')]
===========================================
===========================================
Total add: 11
Total del: 9
Header: CWallet::DelAddressBook
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    AssertLockHeld(cs_wallet); // mapAddressBook')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    AssertLockHeld(cs_wallet); // mapAddressBook')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 1, u'+    assert(state != NULL);')]
===========================================
===========================================
Total add: 63
Total del: 0
Header: FinalizeNode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 1, u'+    assert(state != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 1, u'+    assert(state != NULL);')]
===========================================
Class:  class CCorruptAddress { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    assert(pindexDelete);'), (24, 1, u'+        assert(view.Flush());'), (49, 1, u'+    assert(pindexNew->pprev == chainActive.Tip());'), (71, 2, u'-            assert(plonger != NULL);'), (82, 2, u'-        assert(pfork != NULL);'), (84, 1, u'+        assert(view.Flush());'), (202, 2, u'-    assert(ret);')]
===========================================
===========================================
Total add: 149
Total del: 99
Header: UpdateTip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    assert(pindexDelete);'), (24, 1, u'+        assert(view.Flush());'), (49, 1, u'+    assert(pindexNew->pprev == chainActive.Tip());'), (71, 2, u'-            assert(plonger != NULL);'), (82, 2, u'-        assert(pfork != NULL);'), (84, 1, u'+        assert(view.Flush());'), (202, 2, u'-    assert(ret);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    assert(pindexDelete);'), (24, 1, u'+        assert(view.Flush());'), (49, 1, u'+    assert(pindexNew->pprev == chainActive.Tip());'), (71, 2, u'-            assert(plonger != NULL);'), (82, 2, u'-        assert(pfork != NULL);'), (84, 1, u'+        assert(view.Flush());'), (202, 2, u'-    assert(ret);')]
===========================================
Class:class BitcoinCore: public QObject { 
Class:  class BitcoinApplication: public QApplication { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_wallet); // setKeyPool')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: CWallet::LoadWallet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_wallet); // setKeyPool')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld(cs_wallet); // setKeyPool')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapKeyMetadata')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::GenerateNewKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapKeyMetadata')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapKeyMetadata')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapKeyMetadata')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::AddKeyPubKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapKeyMetadata')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapKeyMetadata')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapKeyMetadata')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::LoadKeyMetadata
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapKeyMetadata')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapKeyMetadata')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // nWalletVersion')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::SetMinVersion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // nWalletVersion')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // nWalletVersion')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // nWalletVersion, nWalletMaxVersion')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::SetMaxVersion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // nWalletVersion, nWalletMaxVersion')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // nWalletVersion, nWalletMaxVersion')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // nOrderPosNext')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::IncOrderPosNext
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // nOrderPosNext')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // nOrderPosNext')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapWallet')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::OrderedTxItems
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapWallet')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapWallet')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setKeyPool')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::LoadWallet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setKeyPool')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setKeyPool')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapAddressBook')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::SetAddressBook
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapAddressBook')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapAddressBook')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapAddressBook')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::DelAddressBook
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapAddressBook')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapAddressBook')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapWallet')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::GetAddressGroupings
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapWallet')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapWallet')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapWallet')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::GetAccountAddresses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapWallet')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapWallet')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::LockCoin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::UnlockCoin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::UnlockAllCoins
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::IsLockedCoin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::ListLockedCoins
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // setLockedCoins')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapKeyMetadata')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CWallet::ListLockedCoins
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapKeyMetadata')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld(cs_wallet); // mapKeyMetadata')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld("cs_main");'), (3, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ProcessBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld("cs_main");'), (3, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    AssertLockHeld("cs_main");'), (3, 1, u'+    AssertLockHeld(cs_main);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-void AssertLockHeld(std::string strName)'), (3, 1, u'+void AssertLockHeldInternal(const char *pszName, const char* pszFile, int nLine, void *cs)')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: LocksHeld
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-void AssertLockHeld(std::string strName)'), (3, 1, u'+void AssertLockHeldInternal(const char *pszName, const char* pszFile, int nLine, void *cs)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-void AssertLockHeld(std::string strName)'), (3, 1, u'+void AssertLockHeldInternal(const char *pszName, const char* pszFile, int nLine, void *cs)')]
===========================================
Class:class DescribeAddressVisitor : public boost::static_visitor<Object> { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_OK(db_->Write(WriteOptions(), &batch));'), (9, 1, u'+      ASSERT_OK(db_->Write(options, &batch));')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: class CorruptionTest {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_OK(db_->Write(WriteOptions(), &batch));'), (9, 1, u'+      ASSERT_OK(db_->Write(options, &batch));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      ASSERT_OK(db_->Write(WriteOptions(), &batch));'), (9, 1, u'+      ASSERT_OK(db_->Write(options, &batch));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  mutex_.AssertHeld();')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: DBImpl::TEST_CompactMemTable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  mutex_.AssertHeld();')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  mutex_.AssertHeld();')]
===========================================
Class:    class SSTableFile : public WritableFile {     class SSTableFile : public WritableFile 
Class:    class DataFile : public WritableFile {     class DataFile : public WritableFile 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    ASSERT_OK(env_->GetChildren(dbname_, &filenames));'), (14, 1, u'+        ASSERT_OK(env_->RenameFile(from, to));')]
===========================================
===========================================
Total add: 18
Total del: 0
Header: class DBTest {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    ASSERT_OK(env_->GetChildren(dbname_, &filenames));'), (14, 1, u'+        ASSERT_OK(env_->RenameFile(from, to));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    ASSERT_OK(env_->GetChildren(dbname_, &filenames));'), (14, 1, u'+        ASSERT_OK(env_->RenameFile(from, to));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_GE(env_->sleep_counter_.Read(), 5);'), (12, 2, u'-  ASSERT_OK(Put("foo", "v1"));'), (13, 2, u'-  ASSERT_EQ("v1", Get("foo"));'), (26, 2, u'-  ASSERT_GE(env_->sleep_counter_.Read(), 5);'), (27, 2, u'-  ASSERT_LT(env_->sleep_counter_.Read(), 10);'), (28, 2, u'-  ASSERT_GE(env_->sleep_time_counter_.Read(), 10e6);')]
===========================================
===========================================
Total add: 0
Total del: 27
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_GE(env_->sleep_counter_.Read(), 5);'), (12, 2, u'-  ASSERT_OK(Put("foo", "v1"));'), (13, 2, u'-  ASSERT_EQ("v1", Get("foo"));'), (26, 2, u'-  ASSERT_GE(env_->sleep_counter_.Read(), 5);'), (27, 2, u'-  ASSERT_LT(env_->sleep_counter_.Read(), 10);'), (28, 2, u'-  ASSERT_GE(env_->sleep_time_counter_.Read(), 10e6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  ASSERT_GE(env_->sleep_counter_.Read(), 5);'), (12, 2, u'-  ASSERT_OK(Put("foo", "v1"));'), (13, 2, u'-  ASSERT_EQ("v1", Get("foo"));'), (26, 2, u'-  ASSERT_GE(env_->sleep_counter_.Read(), 5);'), (27, 2, u'-  ASSERT_LT(env_->sleep_counter_.Read(), 10);'), (28, 2, u'-  ASSERT_GE(env_->sleep_time_counter_.Read(), 10e6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  ASSERT_OK(db_->Put(w, "k1", "v1"));'), (14, 1, u'+  ASSERT_EQ("v1", Get("k1"));'), (18, 1, u'+  ASSERT_TRUE(!db_->Put(w, "k2", "v2").ok());'), (19, 1, u'+  ASSERT_EQ("v1", Get("k1"));'), (20, 1, u'+  ASSERT_EQ("NOT_FOUND", Get("k2"));'), (27, 1, u'+  ASSERT_TRUE(!db_->Put(w, "k3", "v3").ok());'), (28, 1, u'+  ASSERT_EQ("v1", Get("k1"));'), (29, 1, u'+  ASSERT_EQ("NOT_FOUND", Get("k2"));'), (30, 1, u'+  ASSERT_EQ("NOT_FOUND", Get("k3"));')]
===========================================
===========================================
Total add: 31
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  ASSERT_OK(db_->Put(w, "k1", "v1"));'), (14, 1, u'+  ASSERT_EQ("v1", Get("k1"));'), (18, 1, u'+  ASSERT_TRUE(!db_->Put(w, "k2", "v2").ok());'), (19, 1, u'+  ASSERT_EQ("v1", Get("k1"));'), (20, 1, u'+  ASSERT_EQ("NOT_FOUND", Get("k2"));'), (27, 1, u'+  ASSERT_TRUE(!db_->Put(w, "k3", "v3").ok());'), (28, 1, u'+  ASSERT_EQ("v1", Get("k1"));'), (29, 1, u'+  ASSERT_EQ("NOT_FOUND", Get("k2"));'), (30, 1, u'+  ASSERT_EQ("NOT_FOUND", Get("k3"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  ASSERT_OK(db_->Put(w, "k1", "v1"));'), (14, 1, u'+  ASSERT_EQ("v1", Get("k1"));'), (18, 1, u'+  ASSERT_TRUE(!db_->Put(w, "k2", "v2").ok());'), (19, 1, u'+  ASSERT_EQ("v1", Get("k1"));'), (20, 1, u'+  ASSERT_EQ("NOT_FOUND", Get("k2"));'), (27, 1, u'+  ASSERT_TRUE(!db_->Put(w, "k3", "v3").ok());'), (28, 1, u'+  ASSERT_EQ("v1", Get("k1"));'), (29, 1, u'+  ASSERT_EQ("NOT_FOUND", Get("k2"));'), (30, 1, u'+  ASSERT_EQ("NOT_FOUND", Get("k3"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT_OK(Put("foo", "bar"));'), (4, 1, u'+  ASSERT_EQ("bar", Get("foo"));'), (8, 1, u'+  ASSERT_EQ("bar", Get("foo"));'), (10, 1, u'+  ASSERT_GT(RenameLDBToSST(), 0);'), (14, 1, u'+  ASSERT_TRUE(s.ok());'), (15, 1, u'+  ASSERT_EQ("bar", Get("foo"));')]
===========================================
===========================================
Total add: 16
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT_OK(Put("foo", "bar"));'), (4, 1, u'+  ASSERT_EQ("bar", Get("foo"));'), (8, 1, u'+  ASSERT_EQ("bar", Get("foo"));'), (10, 1, u'+  ASSERT_GT(RenameLDBToSST(), 0);'), (14, 1, u'+  ASSERT_TRUE(s.ok());'), (15, 1, u'+  ASSERT_EQ("bar", Get("foo"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT_OK(Put("foo", "bar"));'), (4, 1, u'+  ASSERT_EQ("bar", Get("foo"));'), (8, 1, u'+  ASSERT_EQ("bar", Get("foo"));'), (10, 1, u'+  ASSERT_GT(RenameLDBToSST(), 0);'), (14, 1, u'+  ASSERT_TRUE(s.ok());'), (15, 1, u'+  ASSERT_EQ("bar", Get("foo"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT_LE(c, reinterpret_cast<uintptr_t>('), (3, 1, u'+        ASSERT_LE(static_cast<uintptr_t>(c), reinterpret_cast<uintptr_t>(')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MTThreadBody
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT_LE(c, reinterpret_cast<uintptr_t>('), (3, 1, u'+        ASSERT_LE(static_cast<uintptr_t>(c), reinterpret_cast<uintptr_t>(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        ASSERT_LE(c, reinterpret_cast<uintptr_t>('), (3, 1, u'+        ASSERT_LE(static_cast<uintptr_t>(c), reinterpret_cast<uintptr_t>(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  assert(number > 0);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: TableFileName
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  assert(number > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  assert(number > 0);')]
===========================================
Class:class Issue200 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+  ASSERT_OK(DB::Open(options, dbpath, &db));'), (27, 1, u'+  ASSERT_OK(db->Put(write_options, "1", "b"));'), (28, 1, u'+  ASSERT_OK(db->Put(write_options, "2", "c"));'), (29, 1, u'+  ASSERT_OK(db->Put(write_options, "3", "d"));'), (30, 1, u'+  ASSERT_OK(db->Put(write_options, "4", "e"));'), (31, 1, u'+  ASSERT_OK(db->Put(write_options, "5", "f"));'), (37, 1, u'+  ASSERT_OK(db->Put(write_options, "25", "cd"));'), (40, 1, u'+  ASSERT_EQ(iter->key().ToString(), "5");'), (42, 1, u'+  ASSERT_EQ(iter->key().ToString(), "4");'), (44, 1, u'+  ASSERT_EQ(iter->key().ToString(), "3");'), (46, 1, u'+  ASSERT_EQ(iter->key().ToString(), "4");'), (48, 1, u'+  ASSERT_EQ(iter->key().ToString(), "5");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT_LE(FilterSize(), (length * 10 / 8) + 40) << length;'), (3, 1, u'+    ASSERT_LE(FilterSize(), static_cast<size_t>((length * 10 / 8) + 40))')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT_LE(FilterSize(), (length * 10 / 8) + 40) << length;'), (3, 1, u'+    ASSERT_LE(FilterSize(), static_cast<size_t>((length * 10 / 8) + 40))')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    ASSERT_LE(FilterSize(), (length * 10 / 8) + 40) << length;'), (3, 1, u'+    ASSERT_LE(FilterSize(), static_cast<size_t>((length * 10 / 8) + 40))')]
===========================================
Class:    class PosixMmapFile : public WritableFile { class PosixMmapFile : public WritableFile 
Class:class PosixWritableFile : public WritableFile { class PosixWritableFile : public WritableFile 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-    assert((s % page_size_) == 0);'), (58, 2, u'-    assert(base_ == NULL);'), (87, 2, u'-    assert((page_size & (page_size - 1)) == 0);')]
===========================================
===========================================
Total add: 9
Total del: 86
Header: class PosixMmapReadableFile: public RandomAccessFile {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-    assert((s % page_size_) == 0);'), (58, 2, u'-    assert(base_ == NULL);'), (87, 2, u'-    assert((page_size & (page_size - 1)) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-    assert((s % page_size_) == 0);'), (58, 2, u'-    assert(base_ == NULL);'), (87, 2, u'-    assert((page_size & (page_size - 1)) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      assert(base_ <= dst_);'), (6, 2, u'-      assert(dst_ <= limit_);')]
===========================================
===========================================
Total add: 3
Total del: 18
Header: class PosixMmapFile : public WritableFile {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      assert(base_ <= dst_);'), (6, 2, u'-      assert(dst_ <= limit_);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      assert(base_ <= dst_);'), (6, 2, u'-      assert(dst_ <= limit_);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(BN_bin2bn(vch, 32, &bn));'), (6, 2, u'-        assert(EC_KEY_regenerate_key(pkey, &bn));'), (8, 1, u'+        assert(ret);'), (10, 1, u'+        assert(ret);')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(BN_bin2bn(vch, 32, &bn));'), (6, 2, u'-        assert(EC_KEY_regenerate_key(pkey, &bn));'), (8, 1, u'+        assert(ret);'), (10, 1, u'+        assert(ret);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(BN_bin2bn(vch, 32, &bn));'), (6, 2, u'-        assert(EC_KEY_regenerate_key(pkey, &bn));'), (8, 1, u'+        assert(ret);'), (10, 1, u'+        assert(ret);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(coins.Spend(txin.prevout, undo));'), (4, 1, u'+            assert(ret);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: UpdateCoins
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(coins.Spend(txin.prevout, undo));'), (4, 1, u'+            assert(ret);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(coins.Spend(txin.prevout, undo));'), (4, 1, u'+            assert(ret);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(inputs.SetCoins(txhash, CCoins(tx, nHeight)));'), (4, 1, u'+    assert(ret);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: UpdateCoins
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(inputs.SetCoins(txhash, CCoins(tx, nHeight)));'), (4, 1, u'+    assert(ret);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(inputs.SetCoins(txhash, CCoins(tx, nHeight)));'), (4, 1, u'+    assert(ret);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(view.SetBestBlock(pindex->GetBlockHash()));'), (5, 1, u'+    assert(ret);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: ConnectBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(view.SetBestBlock(pindex->GetBlockHash()));'), (5, 1, u'+    assert(ret);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(view.SetBestBlock(pindex->GetBlockHash()));'), (5, 1, u'+    assert(ret);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(view.Flush());'), (5, 1, u'+    assert(ret);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: SetBestChain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(view.Flush());'), (5, 1, u'+    assert(ret);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(view.Flush());'), (5, 1, u'+    assert(ret);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked'), (5, 1, u'+                        assert(ret); // should never fail, as we just unlocked')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: CWallet::CreateTransaction
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked'), (5, 1, u'+                        assert(ret); // should never fail, as we just unlocked')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                        assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked'), (5, 1, u'+                        assert(ret); // should never fail, as we just unlocked')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-                assert(it2->second.vout.size() > txin.prevout.n && !it2->second.vout[txin.prevout.n].IsNull());'), (14, 1, u'+                assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());')]
===========================================
===========================================
Total add: 6
Total del: 4
Header: CTxMemPool::check
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-                assert(it2->second.vout.size() > txin.prevout.n && !it2->second.vout[txin.prevout.n].IsNull());'), (14, 1, u'+                assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-                assert(it2->second.vout.size() > txin.prevout.n && !it2->second.vout[txin.prevout.n].IsNull());'), (14, 1, u'+                assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(it3->second.ptx == &it->second);'), (3, 1, u'+            assert(it3->second.ptx == &tx);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CTxMemPool::check
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(it3->second.ptx == &it->second);'), (3, 1, u'+            assert(it3->second.ptx == &tx);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(it3->second.ptx == &it->second);'), (3, 1, u'+            assert(it3->second.ptx == &tx);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-        assert(&it2->second == it->second.ptx);'), (7, 2, u'-        assert(it2->second.vin.size() > it->second.n);'), (8, 1, u'+        assert(&tx == it->second.ptx);'), (9, 1, u'+        assert(tx.vin.size() > it->second.n);')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: CTxMemPool::check
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-        assert(&it2->second == it->second.ptx);'), (7, 2, u'-        assert(it2->second.vin.size() > it->second.n);'), (8, 1, u'+        assert(&tx == it->second.ptx);'), (9, 1, u'+        assert(tx.vin.size() > it->second.n);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-        assert(&it2->second == it->second.ptx);'), (7, 2, u'-        assert(it2->second.vin.size() > it->second.n);'), (8, 1, u'+        assert(&tx == it->second.ptx);'), (9, 1, u'+        assert(tx.vin.size() > it->second.n);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld("cs_main");')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: ProcessBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld("cs_main");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    AssertLockHeld("cs_main");')]
===========================================
Class:    template <typename Protocol> class SSLIOStreamDevice : public iostreams::device<iostreams::bidirectional> { class SSLIOStreamDevice : public iostreams::device<iostreams::bidirectional> 
Class: class AcceptedConnection { 
Class:  class JSONRequest { 
Class: class AcceptedConnection { 
Class: class JSONRequest { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(pwalletMain != NULL);')]
===========================================
===========================================
Total add: 34
Total del: 3
Header: setgenerate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(pwalletMain != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(pwalletMain != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-                    assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked')]
===========================================
===========================================
Total add: 0
Total del: 11
Header: CWallet::CreateTransaction
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-                    assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-                    assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+                        assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked')]
===========================================
===========================================
Total add: 21
Total del: 1
Header: CWallet::CreateTransaction
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+                        assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+                        assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(netManager != NULL); // Must call initNetManager before uiReady()')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PaymentServer::uiReady
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(netManager != NULL); // Must call initNetManager before uiReady()')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(netManager != NULL); // Must call initNetManager before uiReady()')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 2, u'-    assert(it != cacheCoins.end());')]
===========================================
===========================================
Total add: 0
Total del: 122
Header: *CChain::FindFork
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 2, u'-    assert(it != cacheCoins.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(54, 2, u'-    assert(it != cacheCoins.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pindex == view.GetBestBlock());'), (3, 1, u'+    assert(pindex->GetBlockHash() == view.GetBestBlock());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: DisconnectBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pindex == view.GetBestBlock());'), (3, 1, u'+    assert(pindex->GetBlockHash() == view.GetBestBlock());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pindex == view.GetBestBlock());'), (3, 1, u'+    assert(pindex->GetBlockHash() == view.GetBestBlock());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pindex->pprev == view.GetBestBlock());'), (4, 1, u'+    assert(hashPrevBlock == view.GetBestBlock());')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ConnectBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pindex->pprev == view.GetBestBlock());'), (4, 1, u'+    assert(hashPrevBlock == view.GetBestBlock());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pindex->pprev == view.GetBestBlock());'), (4, 1, u'+    assert(hashPrevBlock == view.GetBestBlock());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(view.SetBestBlock(pindex));'), (3, 1, u'+    assert(view.SetBestBlock(pindex->GetBlockHash()));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ConnectBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(view.SetBestBlock(pindex));'), (3, 1, u'+    assert(view.SetBestBlock(pindex->GetBlockHash()));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(view.SetBestBlock(pindex));'), (3, 1, u'+    assert(view.SetBestBlock(pindex->GetBlockHash()));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(pwalletMain != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: setgenerate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(pwalletMain != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(pwalletMain != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(pwalletMain != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: getwork
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(pwalletMain != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(pwalletMain != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(pwalletMain != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: listunspent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(pwalletMain != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(pwalletMain != NULL);')]
===========================================
Class:class CTransactionSignatureSerializer { class CTransactionSignatureSerializer 
Class:class AutoCompactTest { class AutoCompactTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    ASSERT_OK(TryReopen(options));'), (16, 1, u'+    ASSERT_OK(TryReopen());')]
===========================================
===========================================
Total add: 4
Total del: 7
Header: class CorruptionTest {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    ASSERT_OK(TryReopen(options));'), (16, 1, u'+    ASSERT_OK(TryReopen());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    ASSERT_OK(TryReopen(options));'), (16, 1, u'+    ASSERT_OK(TryReopen());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-  ASSERT_EQ(1, Property("leveldb.num-files-at-level0"));')]
===========================================
===========================================
Total add: 11
Total del: 20
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-  ASSERT_EQ(1, Property("leveldb.num-files-at-level0"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-  ASSERT_EQ(1, Property("leveldb.num-files-at-level0"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(level >= 0);'), (3, 1, u'+  assert(level < config::kNumLevels);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: Version::GetOverlappingInputs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(level >= 0);'), (3, 1, u'+  assert(level < config::kNumLevels);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(level >= 0);'), (3, 1, u'+  assert(level < config::kNumLevels);')]
===========================================
Class:class Issue178 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+  ASSERT_OK(leveldb::DB::Open(db_options, dbpath, &db));'), (49, 1, u'+  ASSERT_OK(db->Write(leveldb::WriteOptions(), &batch));'), (56, 1, u'+  ASSERT_OK(db->Write(leveldb::WriteOptions(), &batch));'), (63, 1, u'+  ASSERT_OK(db->Write(leveldb::WriteOptions(), &batch));'), (81, 1, u'+  ASSERT_EQ(kNumKeys, num_keys) << "Bad number of keys";')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-        assert(ECDSA_sign(0, (unsigned char*)&hash, sizeof(hash), &vchSig[0], &nSize, pkey));')]
===========================================
===========================================
Total add: 18
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-        assert(ECDSA_sign(0, (unsigned char*)&hash, sizeof(hash), &vchSig[0], &nSize, pkey));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-        assert(ECDSA_sign(0, (unsigned char*)&hash, sizeof(hash), &vchSig[0], &nSize, pkey));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+                assert(it2->second.vout.size() > txin.prevout.n && !it2->second.vout[txin.prevout.n].IsNull());'), (21, 1, u'+                assert(coins.IsAvailable(txin.prevout.n));'), (25, 1, u'+            assert(it3 != mapNextTx.end());'), (26, 1, u'+            assert(it3->second.ptx == &it->second);'), (27, 1, u'+            assert(it3->second.n == i);'), (34, 1, u'+        assert(it2 != mapTx.end());'), (35, 1, u'+        assert(&it2->second == it->second.ptx);'), (36, 1, u'+        assert(it2->second.vin.size() > it->second.n);'), (37, 1, u'+        assert(it->first == it->second.ptx->vin[it->second.n].prevout);')]
===========================================
===========================================
Total add: 39
Total del: 0
Header: CTxMemPool::clear
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+                assert(it2->second.vout.size() > txin.prevout.n && !it2->second.vout[txin.prevout.n].IsNull());'), (21, 1, u'+                assert(coins.IsAvailable(txin.prevout.n));'), (25, 1, u'+            assert(it3 != mapNextTx.end());'), (26, 1, u'+            assert(it3->second.ptx == &it->second);'), (27, 1, u'+            assert(it3->second.n == i);'), (34, 1, u'+        assert(it2 != mapTx.end());'), (35, 1, u'+        assert(&it2->second == it->second.ptx);'), (36, 1, u'+        assert(it2->second.vin.size() > it->second.n);'), (37, 1, u'+        assert(it->first == it->second.ptx->vin[it->second.n].prevout);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+                assert(it2->second.vout.size() > txin.prevout.n && !it2->second.vout[txin.prevout.n].IsNull());'), (21, 1, u'+                assert(coins.IsAvailable(txin.prevout.n));'), (25, 1, u'+            assert(it3 != mapNextTx.end());'), (26, 1, u'+            assert(it3->second.ptx == &it->second);'), (27, 1, u'+            assert(it3->second.n == i);'), (34, 1, u'+        assert(it2 != mapTx.end());'), (35, 1, u'+        assert(&it2->second == it->second.ptx);'), (36, 1, u'+        assert(it2->second.vin.size() > it->second.n);'), (37, 1, u'+        assert(it->first == it->second.ptx->vin[it->second.n].prevout);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(hashGenesisBlock == uint256("000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943"));'), (3, 1, u'+        assert(hashGenesisBlock == uint256("0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943"));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(hashGenesisBlock == uint256("000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943"));'), (3, 1, u'+        assert(hashGenesisBlock == uint256("0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(hashGenesisBlock == uint256("000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943"));'), (3, 1, u'+        assert(hashGenesisBlock == uint256("0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943"));')]
===========================================
Class:  class COrphan { 
Class:class TxPriorityCompare { 
Class:  class COrphan { 
Class:class TxPriorityCompare { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    assert(IsValid());'), (19, 1, u'+    assert(IsCompressed());'), (24, 1, u'+        assert(pubkey.begin() + 33 == pubkey.end());'), (27, 1, u'+        assert(begin() + 32 == end());'), (39, 1, u'+    assert(IsValid());'), (40, 1, u'+    assert((nChild >> 31) == 0);'), (41, 1, u'+    assert(begin() + 33 == end());'), (93, 1, u'+    assert(key.size() == 32);'), (111, 1, u'+    assert(pubkey.size() == 33);')]
===========================================
===========================================
Total add: 128
Total del: 0
Header: CPubKey::Decompress
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    assert(IsValid());'), (19, 1, u'+    assert(IsCompressed());'), (24, 1, u'+        assert(pubkey.begin() + 33 == pubkey.end());'), (27, 1, u'+        assert(begin() + 32 == end());'), (39, 1, u'+    assert(IsValid());'), (40, 1, u'+    assert((nChild >> 31) == 0);'), (41, 1, u'+    assert(begin() + 33 == end());'), (93, 1, u'+    assert(key.size() == 32);'), (111, 1, u'+    assert(pubkey.size() == 33);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    assert(IsValid());'), (19, 1, u'+    assert(IsCompressed());'), (24, 1, u'+        assert(pubkey.begin() + 33 == pubkey.end());'), (27, 1, u'+        assert(begin() + 32 == end());'), (39, 1, u'+    assert(IsValid());'), (40, 1, u'+    assert((nChild >> 31) == 0);'), (41, 1, u'+    assert(begin() + 33 == end());'), (93, 1, u'+    assert(key.size() == 32);'), (111, 1, u'+    assert(pubkey.size() == 33);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    ASSERT_OK(env_->GetChildren(dbname_, &filenames));'), (10, 1, u'+        ASSERT_OK(env_->DeleteFile(TableFileName(dbname_, number)));')]
===========================================
===========================================
Total add: 14
Total del: 0
Header: class DBTest {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    ASSERT_OK(env_->GetChildren(dbname_, &filenames));'), (10, 1, u'+        ASSERT_OK(env_->DeleteFile(TableFileName(dbname_, number)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    ASSERT_OK(env_->GetChildren(dbname_, &filenames));'), (10, 1, u'+        ASSERT_OK(env_->DeleteFile(TableFileName(dbname_, number)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT_OK(Put("foo", "v1"));'), (8, 1, u'+  ASSERT_EQ("v1", Get("foo"));'), (21, 1, u'+  ASSERT_GE(env_->sleep_counter_.Read(), 5);'), (22, 1, u'+  ASSERT_LT(env_->sleep_counter_.Read(), 10);'), (23, 1, u'+  ASSERT_GE(env_->sleep_time_counter_.Read(), 10e6);')]
===========================================
===========================================
Total add: 24
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT_OK(Put("foo", "v1"));'), (8, 1, u'+  ASSERT_EQ("v1", Get("foo"));'), (21, 1, u'+  ASSERT_GE(env_->sleep_counter_.Read(), 5);'), (22, 1, u'+  ASSERT_LT(env_->sleep_counter_.Read(), 10);'), (23, 1, u'+  ASSERT_GE(env_->sleep_time_counter_.Read(), 10e6);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  ASSERT_OK(Put("foo", "v1"));'), (8, 1, u'+  ASSERT_EQ("v1", Get("foo"));'), (21, 1, u'+  ASSERT_GE(env_->sleep_counter_.Read(), 5);'), (22, 1, u'+  ASSERT_LT(env_->sleep_counter_.Read(), 10);'), (23, 1, u'+  ASSERT_GE(env_->sleep_time_counter_.Read(), 10e6);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT_OK(Put("foo", "bar"));'), (4, 1, u'+  ASSERT_EQ("bar", Get("foo"));'), (8, 1, u'+  ASSERT_EQ("bar", Get("foo"));'), (11, 1, u'+  ASSERT_TRUE(DeleteAnSSTFile());'), (15, 1, u'+  ASSERT_TRUE(!s.ok());'), (16, 1, u'+  ASSERT_TRUE(s.ToString().find("issing") != std::string::npos)')]
===========================================
===========================================
Total add: 18
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT_OK(Put("foo", "bar"));'), (4, 1, u'+  ASSERT_EQ("bar", Get("foo"));'), (8, 1, u'+  ASSERT_EQ("bar", Get("foo"));'), (11, 1, u'+  ASSERT_TRUE(DeleteAnSSTFile());'), (15, 1, u'+  ASSERT_TRUE(!s.ok());'), (16, 1, u'+  ASSERT_TRUE(s.ToString().find("issing") != std::string::npos)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  ASSERT_OK(Put("foo", "bar"));'), (4, 1, u'+  ASSERT_EQ("bar", Get("foo"));'), (8, 1, u'+  ASSERT_EQ("bar", Get("foo"));'), (11, 1, u'+  ASSERT_TRUE(DeleteAnSSTFile());'), (15, 1, u'+  ASSERT_TRUE(!s.ok());'), (16, 1, u'+  ASSERT_TRUE(s.ToString().find("issing") != std::string::npos)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(size_ >= 2*sizeof(uint32_t));'), (3, 1, u'+  assert(size_ >= sizeof(uint32_t));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: namespace leveldb {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(size_ >= 2*sizeof(uint32_t));'), (3, 1, u'+  assert(size_ >= sizeof(uint32_t));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(size_ >= 2*sizeof(uint32_t));'), (3, 1, u'+  assert(size_ >= sizeof(uint32_t));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+  ASSERT_TRUE(!iter->Valid());'), (26, 1, u'+  ASSERT_TRUE(!iter->Valid());'), (28, 1, u'+  ASSERT_TRUE(!iter->Valid());')]
===========================================
===========================================
Total add: 30
Total del: 0
Header: class Harness {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+  ASSERT_TRUE(!iter->Valid());'), (26, 1, u'+  ASSERT_TRUE(!iter->Valid());'), (28, 1, u'+  ASSERT_TRUE(!iter->Valid());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+  ASSERT_TRUE(!iter->Valid());'), (26, 1, u'+  ASSERT_TRUE(!iter->Valid());'), (28, 1, u'+  ASSERT_TRUE(!iter->Valid());')]
===========================================
Class:class CTxDump { 
Class:class CAffectedKeysVisitor : public boost::static_visitor<void> { class CAffectedKeysVisitor : public boost::static_visitor<void> 
Class: class CMainParams : public CChainParams { class CMainParams : public CChainParams 
Class:     class CTestNetParams : public CMainParams { class CTestNetParams : public CMainParams 
Class:     class CRegTestParams : public CTestNetParams { class CRegTestParams : public CTestNetParams 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-        assert(block.hashMerkleRoot == uint256("0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"));'), (39, 2, u'-        assert(hash == hashGenesisBlock);')]
===========================================
===========================================
Total add: 2
Total del: 40
Header: InitBlockIndex
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-        assert(block.hashMerkleRoot == uint256("0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"));'), (39, 2, u'-        assert(hash == hashGenesisBlock);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-        assert(block.hashMerkleRoot == uint256("0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"));'), (39, 2, u'-        assert(hash == hashGenesisBlock);')]
===========================================
Class: class FreespaceChecker : public QObject { 
Class:class CWalletScanState { class CWalletScanState 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(inputs.SetCoins(txhash, CCoins(*this, nHeight)));'), (3, 1, u'+    assert(inputs.SetCoins(txhash, CCoins(tx, nHeight)));')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: CTransaction::UpdateCoins
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(inputs.SetCoins(txhash, CCoins(*this, nHeight)));'), (3, 1, u'+    assert(inputs.SetCoins(txhash, CCoins(tx, nHeight)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(inputs.SetCoins(txhash, CCoins(*this, nHeight)));'), (3, 1, u'+    assert(inputs.SetCoins(txhash, CCoins(tx, nHeight)));')]
===========================================
Class: class CECKey { class CECKey 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+    assert(fValid);'), (70, 2, u'-    assert(nSize <= 65);'), (75, 2, u'-    assert((int)ret.size() == nSize);'), (78, 1, u'+    assert(fValid);'), (148, 1, u'+    assert(rec != -1);')]
===========================================
===========================================
Total add: 70
Total del: 132
Header: CKey::SetSecret
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+    assert(fValid);'), (70, 2, u'-    assert(nSize <= 65);'), (75, 2, u'-    assert((int)ret.size() == nSize);'), (78, 1, u'+    assert(fValid);'), (148, 1, u'+    assert(rec != -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+    assert(fValid);'), (70, 2, u'-    assert(nSize <= 65);'), (75, 2, u'-    assert((int)ret.size() == nSize);'), (78, 1, u'+    assert(fValid);'), (148, 1, u'+    assert(rec != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            assert(key.IsValid());')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: BOOST_AUTO_TEST_CASE
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            assert(key.IsValid());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            assert(key.IsValid());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(nSize <= 65);'), (10, 1, u'+    assert((int)ret.size() == nSize);')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: CKey::GetPubKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(nSize <= 65);'), (10, 1, u'+    assert((int)ret.size() == nSize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(nSize <= 65);'), (10, 1, u'+    assert((int)ret.size() == nSize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        assert(pubkey.size() == 65);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: CScriptCompressor::Decompress
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        assert(pubkey.size() == 65);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+        assert(pubkey.size() == 65);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    assert(rpc_io_service != NULL);')]
===========================================
===========================================
Total add: 20
Total del: 0
Header: StopRPCThreads
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    assert(rpc_io_service != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+    assert(rpc_io_service != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 1, u'+        assert(meta->file_size > 0);')]
===========================================
Class:  class H : public WriteBatch::Handler {   class H : public WriteBatch::Handler 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(133, 1, u'+  assert(errptr != NULL);')]
===========================================
Class:class CorruptionTest { class CorruptionTest 
Class:class RandomGenerator { class RandomGenerator 
Class: class Benchmark { class Benchmark 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(266, 1, u'+  mutex_.AssertHeld();'), (272, 1, u'+  assert(db_lock_ == NULL);'), (361, 1, u'+  mutex_.AssertHeld();'), (442, 1, u'+  mutex_.AssertHeld();'), (487, 1, u'+  mutex_.AssertHeld();'), (488, 1, u'+  assert(imm_ != NULL);'), (537, 1, u'+  assert(level >= 0);'), (538, 1, u'+  assert(level + 1 < config::kNumLevels);'), (588, 1, u'+  mutex_.AssertHeld();'), (609, 1, u'+  assert(bg_compaction_scheduled_);'), (639, 1, u'+  mutex_.AssertHeld();'), (670, 1, u'+    assert(c->num_input_files(0) == 1);'), (721, 1, u'+  mutex_.AssertHeld();'), (727, 1, u'+    assert(compact->outfile == NULL);'), (738, 1, u'+  assert(compact != NULL);'), (739, 1, u'+  assert(compact->builder == NULL);'), (764, 1, u'+  assert(compact != NULL);'), (765, 1, u'+  assert(compact->outfile != NULL);'), (766, 1, u'+  assert(compact->builder != NULL);'), (769, 1, u'+  assert(output_number != 0);'), (815, 1, u'+  mutex_.AssertHeld();'), (845, 1, u'+  assert(versions_->NumLevelFiles(compact->compaction->level()) > 0);'), (846, 1, u'+  assert(compact->builder == NULL);'), (847, 1, u'+  assert(compact->outfile == NULL);'), (1193, 1, u'+  assert(!writers_.empty());'), (1196, 1, u'+  assert(result != NULL);'), (1229, 1, u'+        assert(WriteBatchInternal::Count(result) == 0);'), (1242, 1, u'+  mutex_.AssertHeld();'), (1243, 1, u'+  assert(!writers_.empty());'), (1278, 1, u'+      assert(versions_->PrevLogNumber() == 0);')]
===========================================
Class:class DBIter: public Iterator { class DBIter: public Iterator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+    assert(valid_);'), (68, 1, u'+    assert(valid_);'), (130, 1, u'+  assert(valid_);'), (157, 1, u'+  assert(iter_->Valid());'), (158, 1, u'+  assert(direction_ == kForward);'), (188, 1, u'+  assert(valid_);'), (193, 1, u'+    assert(iter_->Valid());  // Otherwise valid_ would have been false'), (215, 1, u'+  assert(direction_ == kReverse);')]
===========================================
Class:class AtomicCounter { class AtomicCounter 
Class:  class SpecialEnv : public EnvWrapper { class SpecialEnv : public EnvWrapper 
Class:    class SSTableFile : public WritableFile {     class SSTableFile : public WritableFile 
Class:    class ManifestFile : public WritableFile {     class ManifestFile : public WritableFile 
Class:    class CountingFile : public RandomAccessFile {     class CountingFile : public RandomAccessFile 
Class: class DBTest { class DBTest 
Class:  class NewComparator : public Comparator {   class NewComparator : public Comparator 
Class:  class NumberComparator : public Comparator {   class NumberComparator : public Comparator 
Class: class ModelDB: public DB { class ModelDB: public DB 
Class:    class Handler : public WriteBatch::Handler {     class Handler : public WriteBatch::Handler 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  assert(seq <= kMaxSequenceNumber);'), (14, 1, u'+  assert(t <= kValueTypeForSeek);'), (81, 1, u'+    assert(this->Compare(*start, tmp) < 0);'), (82, 1, u'+    assert(this->Compare(tmp, limit) < 0);'), (96, 1, u'+    assert(this->Compare(*key, tmp) < 0);')]
===========================================
Class:class FormatTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+  ASSERT_TRUE(ParseInternalKey(in, &decoded));'), (40, 1, u'+  ASSERT_EQ(key, decoded.user_key.ToString());'), (41, 1, u'+  ASSERT_EQ(seq, decoded.sequence);'), (42, 1, u'+  ASSERT_EQ(vt, decoded.type);'), (44, 1, u'+  ASSERT_TRUE(!ParseInternalKey(Slice("bar"), &decoded));'), (67, 1, u'+  ASSERT_EQ(IKey("foo", 100, kTypeValue),'), (70, 1, u'+  ASSERT_EQ(IKey("foo", 100, kTypeValue),'), (73, 1, u'+  ASSERT_EQ(IKey("foo", 100, kTypeValue),'), (76, 1, u'+  ASSERT_EQ(IKey("foo", 100, kTypeValue),'), (81, 1, u'+  ASSERT_EQ(IKey("foo", 100, kTypeValue),'), (86, 1, u'+  ASSERT_EQ(IKey("g", kMaxSequenceNumber, kValueTypeForSeek),'), (91, 1, u'+  ASSERT_EQ(IKey("foo", 100, kTypeValue),'), (96, 1, u'+  ASSERT_EQ(IKey("foobar", 100, kTypeValue),'), (102, 1, u'+  ASSERT_EQ(IKey("g", kMaxSequenceNumber, kValueTypeForSeek),'), (104, 1, u'+  ASSERT_EQ(IKey("\\xff\\xff", 100, kTypeValue),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+  assert(number > 0);'), (33, 1, u'+  assert(number > 0);'), (38, 1, u'+  assert(number > 0);'), (54, 1, u'+  assert(number > 0);'), (126, 1, u'+  assert(contents.starts_with(dbname + "/"));')]
===========================================
Class:class FileNameTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+    ASSERT_TRUE(ParseFileName(f, &number, &type)) << f;'), (41, 1, u'+    ASSERT_EQ(cases[i].type, type) << f;'), (42, 1, u'+    ASSERT_EQ(cases[i].number, number) << f;'), (72, 1, u'+    ASSERT_TRUE(!ParseFileName(f, &number, &type)) << f;'), (82, 1, u'+  ASSERT_EQ("foo/", std::string(fname.data(), 4));'), (83, 1, u'+  ASSERT_TRUE(ParseFileName(fname.c_str() + 4, &number, &type));'), (84, 1, u'+  ASSERT_EQ(0, number);'), (85, 1, u'+  ASSERT_EQ(kCurrentFile, type);'), (88, 1, u'+  ASSERT_EQ("foo/", std::string(fname.data(), 4));'), (89, 1, u'+  ASSERT_TRUE(ParseFileName(fname.c_str() + 4, &number, &type));'), (90, 1, u'+  ASSERT_EQ(0, number);'), (91, 1, u'+  ASSERT_EQ(kDBLockFile, type);'), (94, 1, u'+  ASSERT_EQ("foo/", std::string(fname.data(), 4));'), (95, 1, u'+  ASSERT_TRUE(ParseFileName(fname.c_str() + 4, &number, &type));'), (96, 1, u'+  ASSERT_EQ(192, number);'), (97, 1, u'+  ASSERT_EQ(kLogFile, type);'), (100, 1, u'+  ASSERT_EQ("bar/", std::string(fname.data(), 4));'), (101, 1, u'+  ASSERT_TRUE(ParseFileName(fname.c_str() + 4, &number, &type));'), (102, 1, u'+  ASSERT_EQ(200, number);'), (103, 1, u'+  ASSERT_EQ(kTableFile, type);'), (106, 1, u'+  ASSERT_EQ("bar/", std::string(fname.data(), 4));'), (107, 1, u'+  ASSERT_TRUE(ParseFileName(fname.c_str() + 4, &number, &type));'), (108, 1, u'+  ASSERT_EQ(100, number);'), (109, 1, u'+  ASSERT_EQ(kDescriptorFile, type);'), (112, 1, u'+  ASSERT_EQ("tmp/", std::string(fname.data(), 4));'), (113, 1, u'+  ASSERT_TRUE(ParseFileName(fname.c_str() + 4, &number, &type));'), (114, 1, u'+  ASSERT_EQ(999, number);'), (115, 1, u'+  ASSERT_EQ(kTempFile, type);')]
===========================================
Class:class CorruptionReporter : public log::Reader::Reporter { class CorruptionReporter : public log::Reader::Reporter 
Class:class WriteBatchItemPrinter : public WriteBatch::Handler { class WriteBatchItemPrinter : public WriteBatch::Handler 
Class:class LogTest { class LogTest 
Class:  class StringDest : public WritableFile {   class StringDest : public WritableFile 
Class:  class StringSource : public SequentialFile {   class StringSource : public SequentialFile 
Class:   class ReportCollector : public Reader::Reporter {   class ReportCollector : public Reader::Reporter 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+    assert(leftover >= 0);'), (43, 1, u'+        assert(kHeaderSize == 7);'), (50, 1, u'+    assert(kBlockSize - block_offset_ - kHeaderSize >= 0);'), (76, 1, u'+  assert(n <= 0xffff);  // Must fit in two bytes'), (77, 1, u'+  assert(block_offset_ + kHeaderSize + n <= kBlockSize);')]
===========================================
Class:class MemTableIterator: public Iterator { class MemTableIterator: public Iterator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+  assert(refs_ == 0);'), (104, 1, u'+  assert((p + val_size) - buf == encoded_len);')]
===========================================
Class:class Repairer { class Repairer 
Class:class SkipTest 
Class:                         class ConcurrentTest { class ConcurrentTest 
Class: class TestState { class TestState 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(62, 1, u'+      assert(table == NULL);')]
===========================================
Class:class VersionEditTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  ASSERT_TRUE(s.ok()) << s.ToString();'), (17, 1, u'+  ASSERT_EQ(encoded, encoded2);')]
===========================================
Class:class Version::LevelFileNumIterator : public Iterator { class Version::LevelFileNumIterator : public Iterator 
Class:    class VersionSet::Builder { class VersionSet::Builder 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 1, u'+  assert(refs_ == 0);'), (82, 1, u'+      assert(f->refs > 0);'), (187, 1, u'+    assert(Valid());'), (191, 1, u'+    assert(Valid());'), (199, 1, u'+    assert(Valid());'), (203, 1, u'+    assert(Valid());'), (409, 1, u'+  assert(this != &vset_->dummy_versions_);'), (410, 1, u'+  assert(refs_ >= 1);'), (683, 1, u'+        assert(vset_->icmp_.Compare((*files)[files->size()-1]->largest,'), (715, 1, u'+  assert(dummy_versions_.next_ == &dummy_versions_);  // List must be empty'), (722, 1, u'+  assert(v->refs_ == 0);'), (723, 1, u'+  assert(v != current_);'), (739, 1, u'+    assert(edit->log_number_ >= log_number_);'), (740, 1, u'+    assert(edit->log_number_ < next_file_number_);'), (767, 1, u'+    assert(descriptor_file_ == NULL);'), (1019, 1, u'+  assert(level >= 0);'), (1020, 1, u'+  assert(level < config::kNumLevels);'), (1026, 1, u'+  assert(config::kNumLevels == 7);'), (1110, 1, u'+  assert(level >= 0);'), (1111, 1, u'+  assert(level < config::kNumLevels);'), (1138, 1, u'+  assert(!inputs.empty());'), (1196, 1, u'+  assert(num <= space);'), (1212, 1, u'+    assert(level >= 0);'), (1213, 1, u'+    assert(level+1 < config::kNumLevels);'), (1248, 1, u'+    assert(!c->inputs_[0].empty());')]
===========================================
Class:class FindFileTest { class FindFileTest 
Class:class MemTableInserter : public WriteBatch::Handler { class MemTableInserter : public WriteBatch::Handler 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(137, 1, u'+  assert(contents.size() >= kHeader);'), (143, 1, u'+  assert(src->rep_.size() >= kHeader);')]
===========================================
Class:class WriteBatchTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+    ASSERT_TRUE(ParseInternalKey(iter->key(), &ikey));'), (59, 1, u'+  ASSERT_EQ("", PrintContents(&batch));'), (60, 1, u'+  ASSERT_EQ(0, WriteBatchInternal::Count(&batch));'), (69, 1, u'+  ASSERT_EQ(100, WriteBatchInternal::Sequence(&batch));'), (70, 1, u'+  ASSERT_EQ(3, WriteBatchInternal::Count(&batch));'), (71, 1, u'+  ASSERT_EQ("Put(baz, boo)@102"'), (85, 1, u'+  ASSERT_EQ("Put(foo, bar)@200"'), (95, 1, u'+  ASSERT_EQ("",'), (99, 1, u'+  ASSERT_EQ("Put(a, va)@200",'), (104, 1, u'+  ASSERT_EQ("Put(a, va)@200"'), (109, 1, u'+  ASSERT_EQ("Put(a, va)@200"')]
===========================================
Class:class RandomGenerator { class RandomGenerator 
Class: class Benchmark { class Benchmark 
Class:class RandomGenerator { class RandomGenerator 
Class: class Benchmark { class Benchmark 
Class:class FileState { class FileState 
Class:class MemEnvTest { class MemEnvTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+  assert(!cs_);'), (44, 1, u'+  assert(cs_);'), (48, 1, u'+  assert(cs_);'), (52, 1, u'+  assert(!cs_);'), (56, 1, u'+  assert(cs_);'), (61, 1, u'+  assert(cs_);'), (65, 1, u'+void Mutex::AssertHeld() {'), (66, 1, u'+  assert(cs_);'), (67, 1, u'+  assert(1);'), (75, 1, u'+  assert(mu_);'), (84, 1, u'+  mu_->AssertHeld();')]
===========================================
Class:class Block::Iter : public Iterator { class Block::Iter : public Iterator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  assert(size_ >= 2*sizeof(uint32_t));'), (99, 1, u'+    assert(index < num_restarts_);'), (124, 1, u'+    assert(num_restarts_ > 0);'), (130, 1, u'+    assert(Valid());'), (134, 1, u'+    assert(Valid());'), (139, 1, u'+    assert(Valid());'), (144, 1, u'+    assert(Valid());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+  assert(options->block_restart_interval >= 1);'), (75, 1, u'+  assert(!finished_);'), (76, 1, u'+  assert(counter_ <= options_->block_restart_interval);'), (77, 1, u'+  assert(buffer_.empty() // No values yet?'), (105, 1, u'+  assert(Slice(last_key_) == key);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+  assert(filter_index >= filter_offsets_.size());')]
===========================================
Class:class TestHashFilter : public FilterPolicy { class TestHashFilter : public FilterPolicy 
Class: class FilterBlockTest { class FilterBlockTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+  ASSERT_EQ("\\\\x00\\\\x00\\\\x00\\\\x00\\\\x0b", EscapeString(block));'), (51, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(0, "foo"));'), (52, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(100000, "foo"));'), (67, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(100, "foo"));'), (68, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(100, "bar"));'), (69, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(100, "box"));'), (70, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(100, "hello"));'), (71, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(100, "foo"));'), (72, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(100, "missing"));'), (73, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(100, "other"));'), (100, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(0, "foo"));'), (101, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(2000, "bar"));'), (102, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(0, "box"));'), (103, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(0, "hello"));'), (106, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(3100, "box"));'), (107, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(3100, "foo"));'), (108, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(3100, "bar"));'), (109, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(3100, "hello"));'), (112, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(4100, "foo"));'), (113, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(4100, "bar"));'), (114, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(4100, "box"));'), (115, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(4100, "hello"));'), (118, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(9000, "box"));'), (119, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(9000, "hello"));'), (120, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(9000, "foo"));'), (121, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(9000, "bar"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  assert(offset_ != ~static_cast<uint64_t>(0));'), (18, 1, u'+  assert(size_ != ~static_cast<uint64_t>(0));'), (41, 1, u'+  assert(dst->size() == original_size + kEncodedLength);')]
===========================================
Class:class EmptyIterator : public Iterator { class EmptyIterator : public Iterator 
Class:class MergingIterator : public Iterator { class MergingIterator : public Iterator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 1, u'+  assert(rep_->closed);  // Catch errors where caller forgot to call Finish()'), (94, 1, u'+  assert(!r->closed);'), (97, 1, u'+    assert(r->options.comparator->Compare(key, Slice(r->last_key)) > 0);'), (101, 1, u'+    assert(r->data_block.empty());'), (125, 1, u'+  assert(!r->closed);'), (128, 1, u'+  assert(!r->pending_index_entry);'), (144, 1, u'+  assert(ok());'), (202, 1, u'+  assert(!r->closed);'), (258, 1, u'+  assert(!r->closed);')]
===========================================
Class:class ReverseKeyComparator : public Comparator { class ReverseKeyComparator : public Comparator 
Class: class StringSink: public WritableFile { class StringSink: public WritableFile 
Class:  class StringSource: public RandomAccessFile { class StringSource: public RandomAccessFile 
Class:   class Constructor { class Constructor 
Class: class BlockConstructor: public Constructor { class BlockConstructor: public Constructor 
Class: class TableConstructor: public Constructor { class TableConstructor: public Constructor 
Class:  class KeyConvertingIterator: public Iterator { class KeyConvertingIterator: public Iterator 
Class: class MemTableConstructor: public Constructor { class MemTableConstructor: public Constructor 
Class: class DBConstructor: public Constructor { class DBConstructor: public Constructor 
Class: class Harness { class Harness 
Class:class MemTableTest 
Class:class TableTest 
Class:class TwoLevelIterator: public Iterator { class TwoLevelIterator: public Iterator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+    assert(Valid());'), (42, 1, u'+    assert(Valid());'), (113, 1, u'+  assert(Valid());'), (119, 1, u'+  assert(Valid());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+  assert((align & (align-1)) == 0);   // Pointer size should be a power of 2'), (57, 1, u'+  assert((reinterpret_cast<uintptr_t>(result) & (align-1)) == 0);')]
===========================================
Class:class ArenaTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+    ASSERT_GE(arena.MemoryUsage(), bytes);'), (51, 1, u'+      ASSERT_LE(arena.MemoryUsage(), bytes * 1.10);'), (59, 1, u'+      ASSERT_EQ(int(p[b]) & 0xff, i % 256);')]
===========================================
Class:class BloomFilterPolicy : public FilterPolicy { class BloomFilterPolicy : public FilterPolicy 
Class:class BloomTest { class BloomTest 
Class:class HandleTable { class HandleTable 
Class:class CacheTest { class CacheTest 
Class:class Coding 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+    ASSERT_EQ(v, actual);'), (41, 1, u'+    ASSERT_EQ(v-1, actual);'), (45, 1, u'+    ASSERT_EQ(v+0, actual);'), (49, 1, u'+    ASSERT_EQ(v+1, actual);'), (58, 1, u'+  ASSERT_EQ(4, dst.size());'), (59, 1, u'+  ASSERT_EQ(0x01, static_cast<int>(dst[0]));'), (60, 1, u'+  ASSERT_EQ(0x02, static_cast<int>(dst[1]));'), (61, 1, u'+  ASSERT_EQ(0x03, static_cast<int>(dst[2]));'), (62, 1, u'+  ASSERT_EQ(0x04, static_cast<int>(dst[3]));'), (66, 1, u'+  ASSERT_EQ(8, dst.size());'), (67, 1, u'+  ASSERT_EQ(0x01, static_cast<int>(dst[0]));'), (68, 1, u'+  ASSERT_EQ(0x02, static_cast<int>(dst[1]));'), (69, 1, u'+  ASSERT_EQ(0x03, static_cast<int>(dst[2]));'), (70, 1, u'+  ASSERT_EQ(0x04, static_cast<int>(dst[3]));'), (71, 1, u'+  ASSERT_EQ(0x05, static_cast<int>(dst[4]));'), (72, 1, u'+  ASSERT_EQ(0x06, static_cast<int>(dst[5]));'), (73, 1, u'+  ASSERT_EQ(0x07, static_cast<int>(dst[6]));'), (74, 1, u'+  ASSERT_EQ(0x08, static_cast<int>(dst[7]));'), (91, 1, u'+    ASSERT_TRUE(p != NULL);'), (92, 1, u'+    ASSERT_EQ(expected, actual);'), (93, 1, u'+    ASSERT_EQ(VarintLength(actual), p - start);'), (95, 1, u'+  ASSERT_EQ(p, s.data() + s.size());'), (122, 1, u'+    ASSERT_TRUE(p < limit);'), (126, 1, u'+    ASSERT_TRUE(p != NULL);'), (127, 1, u'+    ASSERT_EQ(values[i], actual);'), (128, 1, u'+    ASSERT_EQ(VarintLength(actual), p - start);'), (130, 1, u'+  ASSERT_EQ(p, limit);'), (137, 1, u'+  ASSERT_TRUE(GetVarint32Ptr(input.data(), input.data() + input.size(), &result)'), (147, 1, u'+    ASSERT_TRUE(GetVarint32Ptr(s.data(), s.data() + len, &result) == NULL);'), (149, 1, u'+  ASSERT_TRUE(GetVarint32Ptr(s.data(), s.data() + s.size(), &result) != NULL);'), (150, 1, u'+  ASSERT_EQ(large_value, result);'), (156, 1, u'+  ASSERT_TRUE(GetVarint64Ptr(input.data(), input.data() + input.size(), &result)'), (166, 1, u'+    ASSERT_TRUE(GetVarint64Ptr(s.data(), s.data() + len, &result) == NULL);'), (168, 1, u'+  ASSERT_TRUE(GetVarint64Ptr(s.data(), s.data() + s.size(), &result) != NULL);'), (169, 1, u'+  ASSERT_EQ(large_value, result);'), (181, 1, u'+  ASSERT_TRUE(GetLengthPrefixedSlice(&input, &v));'), (182, 1, u'+  ASSERT_EQ("", v.ToString());'), (183, 1, u'+  ASSERT_TRUE(GetLengthPrefixedSlice(&input, &v));'), (184, 1, u'+  ASSERT_EQ("foo", v.ToString());'), (185, 1, u'+  ASSERT_TRUE(GetLengthPrefixedSlice(&input, &v));'), (186, 1, u'+  ASSERT_EQ("bar", v.ToString());'), (187, 1, u'+  ASSERT_TRUE(GetLengthPrefixedSlice(&input, &v));'), (188, 1, u"+  ASSERT_EQ(std::string(200, 'x'), v.ToString());"), (189, 1, u'+  ASSERT_EQ("", input.ToString());')]
===========================================
Class:class BytewiseComparatorImpl : public Comparator { class BytewiseComparatorImpl : public Comparator 
Class:class CRC 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  ASSERT_EQ(0x8a9136aa, Value(buf, sizeof(buf)));'), (21, 1, u'+  ASSERT_EQ(0x62a8ab43, Value(buf, sizeof(buf)));'), (26, 1, u'+  ASSERT_EQ(0x46dd794e, Value(buf, sizeof(buf)));'), (31, 1, u'+  ASSERT_EQ(0x113fdb5c, Value(buf, sizeof(buf)));'), (47, 1, u'+  ASSERT_EQ(0xd9963a56, Value(reinterpret_cast<char*>(data), sizeof(data)));'), (51, 1, u'+  ASSERT_NE(Value("a", 1), Value("foo", 3));'), (55, 1, u'+  ASSERT_EQ(Value("hello world", 11),'), (61, 1, u'+  ASSERT_NE(crc, Mask(crc));'), (62, 1, u'+  ASSERT_NE(crc, Mask(Mask(crc)));'), (63, 1, u'+  ASSERT_EQ(crc, Unmask(Mask(crc)));'), (64, 1, u'+  ASSERT_EQ(crc, Unmask(Unmask(Mask(Mask(crc)))));')]
===========================================
Class:class PosixSequentialFile: public SequentialFile { class PosixSequentialFile: public SequentialFile 
Class:class PosixRandomAccessFile: public RandomAccessFile { class PosixRandomAccessFile: public RandomAccessFile 
Class:    class MmapLimiter { class MmapLimiter 
Class:  class PosixMmapReadableFile: public RandomAccessFile { class PosixMmapReadableFile: public RandomAccessFile 
Class:     class PosixMmapFile : public WritableFile { class PosixMmapFile : public WritableFile 
Class: class PosixFileLock : public FileLock { class PosixFileLock : public FileLock 
Class:    class PosixLockTable { class PosixLockTable 
Class: class PosixEnv : public Env { class PosixEnv : public Env 
Class:class EnvPosixTest { class EnvPosixTest 
Class:class Win32SequentialFile : public SequentialFile class Win32SequentialFile : public SequentialFile
Class:class Win32RandomAccessFile : public RandomAccessFile class Win32RandomAccessFile : public RandomAccessFile
Class: class Win32MapFile : public WritableFile { 
Class: class Win32FileLock : public FileLock { 
Class: class Win32Logger : public Logger { 
Class: class Win32Env : public Env { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+  assert(code != kOk);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+  ASSERT_TRUE(s.ok()) << s.ToString();')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+                    assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: CWallet::CreateTransaction
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+                    assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+                    assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(rpc_io_service == NULL);')]
===========================================
===========================================
Total add: 5
Total del: 4
Header: ThreadRPCServer2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(rpc_io_service == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(rpc_io_service == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+        assert(data.size() > pnode->nSendOffset);'), (53, 1, u'+        assert(pnode->nSendOffset == 0);'), (54, 1, u'+        assert(pnode->nSendSize == 0);')]
===========================================
===========================================
Total add: 35
Total del: 18
Header: SocketSendData
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+        assert(data.size() > pnode->nSendOffset);'), (53, 1, u'+        assert(pnode->nSendOffset == 0);'), (54, 1, u'+        assert(pnode->nSendSize == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+        assert(data.size() > pnode->nSendOffset);'), (53, 1, u'+        assert(pnode->nSendOffset == 0);'), (54, 1, u'+        assert(pnode->nSendSize == 0);')]
===========================================
Class:  class CMainCleanup { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    assert(view.SetBestBlock(pindex));')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: CBlock::ConnectBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    assert(view.SetBestBlock(pindex));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    assert(view.SetBestBlock(pindex));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            assert(plonger != NULL);'), (14, 1, u'+        assert(pfork != NULL);')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: SetBestChain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            assert(plonger != NULL);'), (14, 1, u'+        assert(pfork != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+            assert(plonger != NULL);'), (14, 1, u'+        assert(pfork != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(view.Flush());')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: SetBestChain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(view.Flush());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(view.Flush());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(pindexNew);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: CBlock::AddToBlockIndex
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(pindexNew);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(pindexNew);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            assert(coins.Spend(txin.prevout, undo));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: CTransaction::UpdateCoins
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            assert(coins.Spend(txin.prevout, undo));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            assert(coins.Spend(txin.prevout, undo));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(inputs.SetCoins(txhash, CCoins(*this, nHeight)));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: CTransaction::UpdateCoins
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(inputs.SetCoins(txhash, CCoins(*this, nHeight)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(inputs.SetCoins(txhash, CCoins(*this, nHeight)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(ProcessBlock(NULL, pblock));')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: BOOST_AUTO_TEST_CASE
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(ProcessBlock(NULL, pblock));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(ProcessBlock(NULL, pblock));')]
===========================================
Class:    class ManifestFile : public WritableFile {     class ManifestFile : public WritableFile 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+    ASSERT_OK(Put("foo", "bar"));'), (23, 1, u'+    ASSERT_EQ("bar", Get("foo"));'), (27, 1, u'+    ASSERT_EQ("bar", Get("foo"));'), (29, 1, u'+    ASSERT_EQ(NumTableFilesAtLevel(last), 1);   // foo=>bar is now in last level'), (34, 1, u'+    ASSERT_EQ("bar", Get("foo"));'), (39, 1, u'+    ASSERT_EQ("bar", Get("foo"));')]
===========================================
===========================================
Total add: 41
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+    ASSERT_OK(Put("foo", "bar"));'), (23, 1, u'+    ASSERT_EQ("bar", Get("foo"));'), (27, 1, u'+    ASSERT_EQ("bar", Get("foo"));'), (29, 1, u'+    ASSERT_EQ(NumTableFilesAtLevel(last), 1);   // foo=>bar is now in last level'), (34, 1, u'+    ASSERT_EQ("bar", Get("foo"));'), (39, 1, u'+    ASSERT_EQ("bar", Get("foo"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+    ASSERT_OK(Put("foo", "bar"));'), (23, 1, u'+    ASSERT_EQ("bar", Get("foo"));'), (27, 1, u'+    ASSERT_EQ("bar", Get("foo"));'), (29, 1, u'+    ASSERT_EQ(NumTableFilesAtLevel(last), 1);   // foo=>bar is now in last level'), (34, 1, u'+    ASSERT_EQ("bar", Get("foo"));'), (39, 1, u'+    ASSERT_EQ("bar", Get("foo"));')]
===========================================
Class:class CorruptionReporter : public log::Reader::Reporter { class CorruptionReporter : public log::Reader::Reporter 
Class:class WriteBatchItemPrinter : public WriteBatch::Handler { class WriteBatchItemPrinter : public WriteBatch::Handler 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+  assert(!cs_);'), (44, 1, u'+  assert(cs_);'), (48, 1, u'+  assert(cs_);'), (52, 1, u'+  assert(!cs_);'), (56, 1, u'+  assert(cs_);'), (61, 1, u'+  assert(cs_);'), (65, 1, u'+void Mutex::AssertHeld() {'), (66, 1, u'+  assert(cs_);'), (67, 1, u'+  assert(1);'), (75, 1, u'+  assert(mu_);'), (84, 1, u'+  mu_->AssertHeld();')]
===========================================
Class:class Win32SequentialFile : public SequentialFile class Win32SequentialFile : public SequentialFile
Class:class Win32RandomAccessFile : public RandomAccessFile class Win32RandomAccessFile : public RandomAccessFile
Class: class Win32MapFile : public WritableFile { 
Class: class Win32FileLock : public FileLock { 
Class: class Win32Logger : public Logger { 
Class: class Win32Env : public Env { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT_TRUE(!s.ok()) << "Locking did not prevent re-opening db";')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT_TRUE(!s.ok()) << "Locking did not prevent re-opening db";')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  ASSERT_TRUE(!s.ok()) << "Locking did not prevent re-opening db";')]
===========================================
Class:class NoOpLogger : public Logger { class NoOpLogger : public Logger 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-  assert(mutex_);'), (45, 2, u'-  assert(mutex_);'), (50, 2, u'-  assert(mutex_);'), (55, 2, u'-  assert(mutex_);'), (59, 2, u'-void Mutex::AssertHeld() {'), (60, 2, u'-  assert(mutex_);'), (61, 2, u'-  assert(1);'), (70, 2, u'-  assert(mu_);'), (81, 2, u'-  assert(waiting_ > 0);'), (88, 2, u'-  assert(waiting_ >= 0);'), (163, 2, u'-  assert(Uninitialized == LEVELDB_ONCE_INIT);'), (178, 2, u'-  assert(*once == Initialized);')]
===========================================
Class:class PosixSequentialFile: public SequentialFile { class PosixSequentialFile: public SequentialFile 
Class:class PosixRandomAccessFile: public RandomAccessFile { class PosixRandomAccessFile: public RandomAccessFile 
Class:      class BoostFile : public WritableFile { class BoostFile : public WritableFile 
Class:   class BoostFileLock : public FileLock { class BoostFileLock : public FileLock 
Class: class PosixEnv : public Env { class PosixEnv : public Env 
Class:   class MmapLimiter { class MmapLimiter 
Class:    class PosixLockTable { class PosixLockTable 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(86, 2, u'-    assert(p <= limit);')]
===========================================
Class: class CPartialMerkleTreeTester : public CPartialMerkleTree { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    assert(nIn < txTo.vin.size());')]
===========================================
===========================================
Total add: 8
Total del: 7
Header: CTransaction::HaveInputs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    assert(nIn < txTo.vin.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-    assert(nIn < txTo.vin.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    assert(blockUndo.vtxundo.size() + 1 == vtx.size());')]
===========================================
===========================================
Total add: 10
Total del: 6
Header: CBlock::DisconnectBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    assert(blockUndo.vtxundo.size() + 1 == vtx.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-    assert(blockUndo.vtxundo.size() + 1 == vtx.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(txundo.vprevout.size() == tx.vin.size());')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: CBlock::DisconnectBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(txundo.vprevout.size() == tx.vin.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-            assert(txundo.vprevout.size() == tx.vin.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(!stackCopy.empty());')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: VerifyScript
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(!stackCopy.empty());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(!stackCopy.empty());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(fImporting == false);'), (10, 1, u'+        assert(fImporting == true);')]
===========================================
===========================================
Total add: 44
Total del: 0
Header: HelpMessage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(fImporting == false);'), (10, 1, u'+        assert(fImporting == true);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(fImporting == false);'), (10, 1, u'+        assert(fImporting == true);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(fImporting == false);'), (10, 2, u'-        assert(fImporting == true);')]
===========================================
===========================================
Total add: 0
Total del: 44
Header: LoadExternalBlockFile
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(fImporting == false);'), (10, 2, u'-        assert(fImporting == true);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(fImporting == false);'), (10, 2, u'-        assert(fImporting == true);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    assert(it != cacheCoins.end());')]
===========================================
===========================================
Total add: 17
Total del: 0
Header: CCoinsViewCache::GetCoins
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    assert(it != cacheCoins.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    assert(it != cacheCoins.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    assert(coins.IsAvailable(input.prevout.n));')]
===========================================
===========================================
Total add: 5
Total del: 14
Header: CBlock::UpdateTime
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    assert(coins.IsAvailable(input.prevout.n));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    assert(coins.IsAvailable(input.prevout.n));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-            assert(inputs.count(prevout.hash) > 0);')]
===========================================
===========================================
Total add: 29
Total del: 13
Header: CTransaction::ConnectInputs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-            assert(inputs.count(prevout.hash) > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-            assert(inputs.count(prevout.hash) > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            assert(inputs.count(prevout.hash) > 0);')]
===========================================
===========================================
Total add: 13
Total del: 41
Header: CTransaction::ConnectInputs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            assert(inputs.count(prevout.hash) > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-            assert(inputs.count(prevout.hash) > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(pindex == view.GetBestBlock());'), (30, 1, u'+    assert(blockUndo.vtxundo.size() + 1 == vtx.size());'), (53, 1, u'+            assert(txundo.vprevout.size() == tx.vin.size());')]
===========================================
===========================================
Total add: 64
Total del: 12
Header: CTransaction::ClientConnectInputs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(pindex == view.GetBestBlock());'), (30, 1, u'+    assert(blockUndo.vtxundo.size() + 1 == vtx.size());'), (53, 1, u'+            assert(txundo.vprevout.size() == tx.vin.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(pindex == view.GetBestBlock());'), (30, 1, u'+    assert(blockUndo.vtxundo.size() + 1 == vtx.size());'), (53, 1, u'+            assert(txundo.vprevout.size() == tx.vin.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(pindex->pprev == view.GetBestBlock());')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: CBlock::ConnectBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(pindex->pprev == view.GetBestBlock());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(pindex->pprev == view.GetBestBlock());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pos.nHeight == pindexNew->nHeight);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: CBlock::AddToBlockIndex
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pos.nHeight == pindexNew->nHeight);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pos.nHeight == pindexNew->nHeight);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(pos.nHeight == pindexNew->nHeight);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: CBlock::AddToBlockIndex
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(pos.nHeight == pindexNew->nHeight);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(pos.nHeight == pindexNew->nHeight);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(block.GetHash() == hashGenesisBlock);'), (3, 1, u'+        assert(hash == hashGenesisBlock);')]
===========================================
===========================================
Total add: 4
Total del: 5
Header: LoadBlockIndex
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(block.GetHash() == hashGenesisBlock);'), (3, 1, u'+        assert(hash == hashGenesisBlock);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(block.GetHash() == hashGenesisBlock);'), (3, 1, u'+        assert(hash == hashGenesisBlock);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(Uninitialized == LEVELDB_ONCE_INIT, "Invalid uninitialized state value");'), (3, 1, u'+  assert(Uninitialized == LEVELDB_ONCE_INIT);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: InitOnce
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(Uninitialized == LEVELDB_ONCE_INIT, "Invalid uninitialized state value");'), (3, 1, u'+  assert(Uninitialized == LEVELDB_ONCE_INIT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(Uninitialized == LEVELDB_ONCE_INIT, "Invalid uninitialized state value");'), (3, 1, u'+  assert(Uninitialized == LEVELDB_ONCE_INIT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+  assert(mutex_);'), (45, 1, u'+  assert(mutex_);'), (50, 1, u'+  assert(mutex_);'), (55, 1, u'+  assert(mutex_);'), (59, 1, u'+void Mutex::AssertHeld() {'), (60, 1, u'+  assert(mutex_);'), (61, 1, u'+  assert(1);'), (70, 1, u'+  assert(mu_);'), (81, 1, u'+  assert(waiting_ > 0);'), (88, 1, u'+  assert(waiting_ >= 0);'), (163, 1, u'+  static_assert(Uninitialized == LEVELDB_ONCE_INIT, "Invalid uninitialized state value");'), (178, 1, u'+  assert(*once == Initialized);')]
===========================================
Class:class PosixSequentialFile: public SequentialFile { class PosixSequentialFile: public SequentialFile 
Class:class PosixRandomAccessFile: public RandomAccessFile { class PosixRandomAccessFile: public RandomAccessFile 
Class:      class BoostFile : public WritableFile { class BoostFile : public WritableFile 
Class:   class BoostFileLock : public FileLock { class BoostFileLock : public FileLock 
Class: class PosixEnv : public Env { class PosixEnv : public Env 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(86, 1, u'+    assert(p <= limit);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 1, u'+        assert(meta->file_size > 0);')]
===========================================
Class:  class H : public WriteBatch::Handler {   class H : public WriteBatch::Handler 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(131, 1, u'+  assert(errptr != NULL);')]
===========================================
Class:class CorruptionTest { class CorruptionTest 
Class:class RandomGenerator { class RandomGenerator 
Class: class Benchmark { class Benchmark 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(266, 1, u'+  mutex_.AssertHeld();'), (272, 1, u'+  assert(db_lock_ == NULL);'), (361, 1, u'+  mutex_.AssertHeld();'), (442, 1, u'+  mutex_.AssertHeld();'), (487, 1, u'+  mutex_.AssertHeld();'), (488, 1, u'+  assert(imm_ != NULL);'), (537, 1, u'+  assert(level >= 0);'), (538, 1, u'+  assert(level + 1 < config::kNumLevels);'), (588, 1, u'+  mutex_.AssertHeld();'), (609, 1, u'+  assert(bg_compaction_scheduled_);'), (635, 1, u'+  mutex_.AssertHeld();'), (666, 1, u'+    assert(c->num_input_files(0) == 1);'), (717, 1, u'+  mutex_.AssertHeld();'), (723, 1, u'+    assert(compact->outfile == NULL);'), (734, 1, u'+  assert(compact != NULL);'), (735, 1, u'+  assert(compact->builder == NULL);'), (760, 1, u'+  assert(compact != NULL);'), (761, 1, u'+  assert(compact->outfile != NULL);'), (762, 1, u'+  assert(compact->builder != NULL);'), (765, 1, u'+  assert(output_number != 0);'), (811, 1, u'+  mutex_.AssertHeld();'), (841, 1, u'+  assert(versions_->NumLevelFiles(compact->compaction->level()) > 0);'), (842, 1, u'+  assert(compact->builder == NULL);'), (843, 1, u'+  assert(compact->outfile == NULL);'), (1189, 1, u'+  assert(!writers_.empty());'), (1192, 1, u'+  assert(result != NULL);'), (1225, 1, u'+        assert(WriteBatchInternal::Count(result) == 0);'), (1238, 1, u'+  mutex_.AssertHeld();'), (1239, 1, u'+  assert(!writers_.empty());'), (1274, 1, u'+      assert(versions_->PrevLogNumber() == 0);')]
===========================================
Class:class DBIter: public Iterator { class DBIter: public Iterator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+    assert(valid_);'), (68, 1, u'+    assert(valid_);'), (130, 1, u'+  assert(valid_);'), (157, 1, u'+  assert(iter_->Valid());'), (158, 1, u'+  assert(direction_ == kForward);'), (188, 1, u'+  assert(valid_);'), (193, 1, u'+    assert(iter_->Valid());  // Otherwise valid_ would have been false'), (215, 1, u'+  assert(direction_ == kReverse);')]
===========================================
Class:class AtomicCounter { class AtomicCounter 
Class:  class SpecialEnv : public EnvWrapper { class SpecialEnv : public EnvWrapper 
Class:    class SSTableFile : public WritableFile {     class SSTableFile : public WritableFile 
Class:    class CountingFile : public RandomAccessFile {     class CountingFile : public RandomAccessFile 
Class: class DBTest { class DBTest 
Class:  class NewComparator : public Comparator {   class NewComparator : public Comparator 
Class:  class NumberComparator : public Comparator {   class NumberComparator : public Comparator 
Class: class ModelDB: public DB { class ModelDB: public DB 
Class:    class Handler : public WriteBatch::Handler {     class Handler : public WriteBatch::Handler 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  assert(seq <= kMaxSequenceNumber);'), (14, 1, u'+  assert(t <= kValueTypeForSeek);'), (81, 1, u'+    assert(this->Compare(*start, tmp) < 0);'), (82, 1, u'+    assert(this->Compare(tmp, limit) < 0);'), (96, 1, u'+    assert(this->Compare(*key, tmp) < 0);')]
===========================================
Class:class FormatTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+  ASSERT_TRUE(ParseInternalKey(in, &decoded));'), (40, 1, u'+  ASSERT_EQ(key, decoded.user_key.ToString());'), (41, 1, u'+  ASSERT_EQ(seq, decoded.sequence);'), (42, 1, u'+  ASSERT_EQ(vt, decoded.type);'), (44, 1, u'+  ASSERT_TRUE(!ParseInternalKey(Slice("bar"), &decoded));'), (67, 1, u'+  ASSERT_EQ(IKey("foo", 100, kTypeValue),'), (70, 1, u'+  ASSERT_EQ(IKey("foo", 100, kTypeValue),'), (73, 1, u'+  ASSERT_EQ(IKey("foo", 100, kTypeValue),'), (76, 1, u'+  ASSERT_EQ(IKey("foo", 100, kTypeValue),'), (81, 1, u'+  ASSERT_EQ(IKey("foo", 100, kTypeValue),'), (86, 1, u'+  ASSERT_EQ(IKey("g", kMaxSequenceNumber, kValueTypeForSeek),'), (91, 1, u'+  ASSERT_EQ(IKey("foo", 100, kTypeValue),'), (96, 1, u'+  ASSERT_EQ(IKey("foobar", 100, kTypeValue),'), (102, 1, u'+  ASSERT_EQ(IKey("g", kMaxSequenceNumber, kValueTypeForSeek),'), (104, 1, u'+  ASSERT_EQ(IKey("\\xff\\xff", 100, kTypeValue),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+  assert(number > 0);'), (33, 1, u'+  assert(number > 0);'), (38, 1, u'+  assert(number > 0);'), (54, 1, u'+  assert(number > 0);'), (126, 1, u'+  assert(contents.starts_with(dbname + "/"));')]
===========================================
Class:class FileNameTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+    ASSERT_TRUE(ParseFileName(f, &number, &type)) << f;'), (41, 1, u'+    ASSERT_EQ(cases[i].type, type) << f;'), (42, 1, u'+    ASSERT_EQ(cases[i].number, number) << f;'), (72, 1, u'+    ASSERT_TRUE(!ParseFileName(f, &number, &type)) << f;'), (82, 1, u'+  ASSERT_EQ("foo/", std::string(fname.data(), 4));'), (83, 1, u'+  ASSERT_TRUE(ParseFileName(fname.c_str() + 4, &number, &type));'), (84, 1, u'+  ASSERT_EQ(0, number);'), (85, 1, u'+  ASSERT_EQ(kCurrentFile, type);'), (88, 1, u'+  ASSERT_EQ("foo/", std::string(fname.data(), 4));'), (89, 1, u'+  ASSERT_TRUE(ParseFileName(fname.c_str() + 4, &number, &type));'), (90, 1, u'+  ASSERT_EQ(0, number);'), (91, 1, u'+  ASSERT_EQ(kDBLockFile, type);'), (94, 1, u'+  ASSERT_EQ("foo/", std::string(fname.data(), 4));'), (95, 1, u'+  ASSERT_TRUE(ParseFileName(fname.c_str() + 4, &number, &type));'), (96, 1, u'+  ASSERT_EQ(192, number);'), (97, 1, u'+  ASSERT_EQ(kLogFile, type);'), (100, 1, u'+  ASSERT_EQ("bar/", std::string(fname.data(), 4));'), (101, 1, u'+  ASSERT_TRUE(ParseFileName(fname.c_str() + 4, &number, &type));'), (102, 1, u'+  ASSERT_EQ(200, number);'), (103, 1, u'+  ASSERT_EQ(kTableFile, type);'), (106, 1, u'+  ASSERT_EQ("bar/", std::string(fname.data(), 4));'), (107, 1, u'+  ASSERT_TRUE(ParseFileName(fname.c_str() + 4, &number, &type));'), (108, 1, u'+  ASSERT_EQ(100, number);'), (109, 1, u'+  ASSERT_EQ(kDescriptorFile, type);'), (112, 1, u'+  ASSERT_EQ("tmp/", std::string(fname.data(), 4));'), (113, 1, u'+  ASSERT_TRUE(ParseFileName(fname.c_str() + 4, &number, &type));'), (114, 1, u'+  ASSERT_EQ(999, number);'), (115, 1, u'+  ASSERT_EQ(kTempFile, type);')]
===========================================
Class:class LogTest { class LogTest 
Class:  class StringDest : public WritableFile {   class StringDest : public WritableFile 
Class:  class StringSource : public SequentialFile {   class StringSource : public SequentialFile 
Class:   class ReportCollector : public Reader::Reporter {   class ReportCollector : public Reader::Reporter 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+    assert(leftover >= 0);'), (43, 1, u'+        assert(kHeaderSize == 7);'), (50, 1, u'+    assert(kBlockSize - block_offset_ - kHeaderSize >= 0);'), (76, 1, u'+  assert(n <= 0xffff);  // Must fit in two bytes'), (77, 1, u'+  assert(block_offset_ + kHeaderSize + n <= kBlockSize);')]
===========================================
Class:class MemTableIterator: public Iterator { class MemTableIterator: public Iterator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+  assert(refs_ == 0);'), (104, 1, u'+  assert((p + val_size) - buf == encoded_len);')]
===========================================
Class:class Repairer { class Repairer 
Class:class SkipTest 
Class:                         class ConcurrentTest { class ConcurrentTest 
Class: class TestState { class TestState 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(62, 1, u'+      assert(table == NULL);')]
===========================================
Class:class VersionEditTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  ASSERT_TRUE(s.ok()) << s.ToString();'), (17, 1, u'+  ASSERT_EQ(encoded, encoded2);')]
===========================================
Class:class Version::LevelFileNumIterator : public Iterator { class Version::LevelFileNumIterator : public Iterator 
Class:    class VersionSet::Builder { class VersionSet::Builder 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(72, 1, u'+  assert(refs_ == 0);'), (82, 1, u'+      assert(f->refs > 0);'), (187, 1, u'+    assert(Valid());'), (191, 1, u'+    assert(Valid());'), (199, 1, u'+    assert(Valid());'), (203, 1, u'+    assert(Valid());'), (409, 1, u'+  assert(this != &vset_->dummy_versions_);'), (410, 1, u'+  assert(refs_ >= 1);'), (683, 1, u'+        assert(vset_->icmp_.Compare((*files)[files->size()-1]->largest,'), (715, 1, u'+  assert(dummy_versions_.next_ == &dummy_versions_);  // List must be empty'), (722, 1, u'+  assert(v->refs_ == 0);'), (723, 1, u'+  assert(v != current_);'), (739, 1, u'+    assert(edit->log_number_ >= log_number_);'), (740, 1, u'+    assert(edit->log_number_ < next_file_number_);'), (767, 1, u'+    assert(descriptor_file_ == NULL);'), (1008, 1, u'+  assert(level >= 0);'), (1009, 1, u'+  assert(level < config::kNumLevels);'), (1015, 1, u'+  assert(config::kNumLevels == 7);'), (1074, 1, u'+  assert(level >= 0);'), (1075, 1, u'+  assert(level < config::kNumLevels);'), (1102, 1, u'+  assert(!inputs.empty());'), (1160, 1, u'+  assert(num <= space);'), (1176, 1, u'+    assert(level >= 0);'), (1177, 1, u'+    assert(level+1 < config::kNumLevels);'), (1212, 1, u'+    assert(!c->inputs_[0].empty());')]
===========================================
Class:class FindFileTest { class FindFileTest 
Class:class MemTableInserter : public WriteBatch::Handler { class MemTableInserter : public WriteBatch::Handler 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(137, 1, u'+  assert(contents.size() >= kHeader);'), (143, 1, u'+  assert(src->rep_.size() >= kHeader);')]
===========================================
Class:class WriteBatchTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+    ASSERT_TRUE(ParseInternalKey(iter->key(), &ikey));'), (59, 1, u'+  ASSERT_EQ("", PrintContents(&batch));'), (60, 1, u'+  ASSERT_EQ(0, WriteBatchInternal::Count(&batch));'), (69, 1, u'+  ASSERT_EQ(100, WriteBatchInternal::Sequence(&batch));'), (70, 1, u'+  ASSERT_EQ(3, WriteBatchInternal::Count(&batch));'), (71, 1, u'+  ASSERT_EQ("Put(baz, boo)@102"'), (85, 1, u'+  ASSERT_EQ("Put(foo, bar)@200"'), (95, 1, u'+  ASSERT_EQ("",'), (99, 1, u'+  ASSERT_EQ("Put(a, va)@200",'), (104, 1, u'+  ASSERT_EQ("Put(a, va)@200"'), (109, 1, u'+  ASSERT_EQ("Put(a, va)@200"')]
===========================================
Class:class RandomGenerator { class RandomGenerator 
Class: class Benchmark { class Benchmark 
Class:class RandomGenerator { class RandomGenerator 
Class: class Benchmark { class Benchmark 
Class:class FileState { class FileState 
Class:class MemEnvTest { class MemEnvTest 
Class:class Block::Iter : public Iterator { class Block::Iter : public Iterator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  assert(size_ >= 2*sizeof(uint32_t));'), (99, 1, u'+    assert(index < num_restarts_);'), (124, 1, u'+    assert(num_restarts_ > 0);'), (130, 1, u'+    assert(Valid());'), (134, 1, u'+    assert(Valid());'), (139, 1, u'+    assert(Valid());'), (144, 1, u'+    assert(Valid());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+  assert(options->block_restart_interval >= 1);'), (75, 1, u'+  assert(!finished_);'), (76, 1, u'+  assert(counter_ <= options_->block_restart_interval);'), (77, 1, u'+  assert(buffer_.empty() // No values yet?'), (105, 1, u'+  assert(Slice(last_key_) == key);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+  assert(filter_index >= filter_offsets_.size());')]
===========================================
Class:class TestHashFilter : public FilterPolicy { class TestHashFilter : public FilterPolicy 
Class: class FilterBlockTest { class FilterBlockTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+  ASSERT_EQ("\\\\x00\\\\x00\\\\x00\\\\x00\\\\x0b", EscapeString(block));'), (51, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(0, "foo"));'), (52, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(100000, "foo"));'), (67, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(100, "foo"));'), (68, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(100, "bar"));'), (69, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(100, "box"));'), (70, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(100, "hello"));'), (71, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(100, "foo"));'), (72, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(100, "missing"));'), (73, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(100, "other"));'), (100, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(0, "foo"));'), (101, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(2000, "bar"));'), (102, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(0, "box"));'), (103, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(0, "hello"));'), (106, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(3100, "box"));'), (107, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(3100, "foo"));'), (108, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(3100, "bar"));'), (109, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(3100, "hello"));'), (112, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(4100, "foo"));'), (113, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(4100, "bar"));'), (114, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(4100, "box"));'), (115, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(4100, "hello"));'), (118, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(9000, "box"));'), (119, 1, u'+  ASSERT_TRUE(reader.KeyMayMatch(9000, "hello"));'), (120, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(9000, "foo"));'), (121, 1, u'+  ASSERT_TRUE(! reader.KeyMayMatch(9000, "bar"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  assert(offset_ != ~static_cast<uint64_t>(0));'), (18, 1, u'+  assert(size_ != ~static_cast<uint64_t>(0));'), (41, 1, u'+  assert(dst->size() == original_size + kEncodedLength);')]
===========================================
Class:class EmptyIterator : public Iterator { class EmptyIterator : public Iterator 
Class:class MergingIterator : public Iterator { class MergingIterator : public Iterator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 1, u'+  assert(rep_->closed);  // Catch errors where caller forgot to call Finish()'), (94, 1, u'+  assert(!r->closed);'), (97, 1, u'+    assert(r->options.comparator->Compare(key, Slice(r->last_key)) > 0);'), (101, 1, u'+    assert(r->data_block.empty());'), (125, 1, u'+  assert(!r->closed);'), (128, 1, u'+  assert(!r->pending_index_entry);'), (144, 1, u'+  assert(ok());'), (202, 1, u'+  assert(!r->closed);'), (258, 1, u'+  assert(!r->closed);')]
===========================================
Class:class ReverseKeyComparator : public Comparator { class ReverseKeyComparator : public Comparator 
Class: class StringSink: public WritableFile { class StringSink: public WritableFile 
Class:  class StringSource: public RandomAccessFile { class StringSource: public RandomAccessFile 
Class:   class Constructor { class Constructor 
Class: class BlockConstructor: public Constructor { class BlockConstructor: public Constructor 
Class: class TableConstructor: public Constructor { class TableConstructor: public Constructor 
Class:  class KeyConvertingIterator: public Iterator { class KeyConvertingIterator: public Iterator 
Class: class MemTableConstructor: public Constructor { class MemTableConstructor: public Constructor 
Class: class DBConstructor: public Constructor { class DBConstructor: public Constructor 
Class: class Harness { class Harness 
Class:class MemTableTest 
Class:class TableTest 
Class:class TwoLevelIterator: public Iterator { class TwoLevelIterator: public Iterator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+    assert(Valid());'), (42, 1, u'+    assert(Valid());'), (113, 1, u'+  assert(Valid());'), (119, 1, u'+  assert(Valid());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+  assert((align & (align-1)) == 0);   // Pointer size should be a power of 2'), (57, 1, u'+  assert((reinterpret_cast<uintptr_t>(result) & (align-1)) == 0);')]
===========================================
Class:class ArenaTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+    ASSERT_GE(arena.MemoryUsage(), bytes);'), (51, 1, u'+      ASSERT_LE(arena.MemoryUsage(), bytes * 1.10);'), (59, 1, u'+      ASSERT_EQ(int(p[b]) & 0xff, i % 256);')]
===========================================
Class:class BloomFilterPolicy : public FilterPolicy { class BloomFilterPolicy : public FilterPolicy 
Class:class BloomTest { class BloomTest 
Class:class HandleTable { class HandleTable 
Class:class CacheTest { class CacheTest 
Class:class Coding 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+    ASSERT_EQ(v, actual);'), (41, 1, u'+    ASSERT_EQ(v-1, actual);'), (45, 1, u'+    ASSERT_EQ(v+0, actual);'), (49, 1, u'+    ASSERT_EQ(v+1, actual);'), (58, 1, u'+  ASSERT_EQ(4, dst.size());'), (59, 1, u'+  ASSERT_EQ(0x01, static_cast<int>(dst[0]));'), (60, 1, u'+  ASSERT_EQ(0x02, static_cast<int>(dst[1]));'), (61, 1, u'+  ASSERT_EQ(0x03, static_cast<int>(dst[2]));'), (62, 1, u'+  ASSERT_EQ(0x04, static_cast<int>(dst[3]));'), (66, 1, u'+  ASSERT_EQ(8, dst.size());'), (67, 1, u'+  ASSERT_EQ(0x01, static_cast<int>(dst[0]));'), (68, 1, u'+  ASSERT_EQ(0x02, static_cast<int>(dst[1]));'), (69, 1, u'+  ASSERT_EQ(0x03, static_cast<int>(dst[2]));'), (70, 1, u'+  ASSERT_EQ(0x04, static_cast<int>(dst[3]));'), (71, 1, u'+  ASSERT_EQ(0x05, static_cast<int>(dst[4]));'), (72, 1, u'+  ASSERT_EQ(0x06, static_cast<int>(dst[5]));'), (73, 1, u'+  ASSERT_EQ(0x07, static_cast<int>(dst[6]));'), (74, 1, u'+  ASSERT_EQ(0x08, static_cast<int>(dst[7]));'), (91, 1, u'+    ASSERT_TRUE(p != NULL);'), (92, 1, u'+    ASSERT_EQ(expected, actual);'), (93, 1, u'+    ASSERT_EQ(VarintLength(actual), p - start);'), (95, 1, u'+  ASSERT_EQ(p, s.data() + s.size());'), (122, 1, u'+    ASSERT_TRUE(p < limit);'), (126, 1, u'+    ASSERT_TRUE(p != NULL);'), (127, 1, u'+    ASSERT_EQ(values[i], actual);'), (128, 1, u'+    ASSERT_EQ(VarintLength(actual), p - start);'), (130, 1, u'+  ASSERT_EQ(p, limit);'), (137, 1, u'+  ASSERT_TRUE(GetVarint32Ptr(input.data(), input.data() + input.size(), &result)'), (147, 1, u'+    ASSERT_TRUE(GetVarint32Ptr(s.data(), s.data() + len, &result) == NULL);'), (149, 1, u'+  ASSERT_TRUE(GetVarint32Ptr(s.data(), s.data() + s.size(), &result) != NULL);'), (150, 1, u'+  ASSERT_EQ(large_value, result);'), (156, 1, u'+  ASSERT_TRUE(GetVarint64Ptr(input.data(), input.data() + input.size(), &result)'), (166, 1, u'+    ASSERT_TRUE(GetVarint64Ptr(s.data(), s.data() + len, &result) == NULL);'), (168, 1, u'+  ASSERT_TRUE(GetVarint64Ptr(s.data(), s.data() + s.size(), &result) != NULL);'), (169, 1, u'+  ASSERT_EQ(large_value, result);'), (181, 1, u'+  ASSERT_TRUE(GetLengthPrefixedSlice(&input, &v));'), (182, 1, u'+  ASSERT_EQ("", v.ToString());'), (183, 1, u'+  ASSERT_TRUE(GetLengthPrefixedSlice(&input, &v));'), (184, 1, u'+  ASSERT_EQ("foo", v.ToString());'), (185, 1, u'+  ASSERT_TRUE(GetLengthPrefixedSlice(&input, &v));'), (186, 1, u'+  ASSERT_EQ("bar", v.ToString());'), (187, 1, u'+  ASSERT_TRUE(GetLengthPrefixedSlice(&input, &v));'), (188, 1, u"+  ASSERT_EQ(std::string(200, 'x'), v.ToString());"), (189, 1, u'+  ASSERT_EQ("", input.ToString());')]
===========================================
Class:class BytewiseComparatorImpl : public Comparator { class BytewiseComparatorImpl : public Comparator 
Class:class CRC 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  ASSERT_EQ(0x8a9136aa, Value(buf, sizeof(buf)));'), (21, 1, u'+  ASSERT_EQ(0x62a8ab43, Value(buf, sizeof(buf)));'), (26, 1, u'+  ASSERT_EQ(0x46dd794e, Value(buf, sizeof(buf)));'), (31, 1, u'+  ASSERT_EQ(0x113fdb5c, Value(buf, sizeof(buf)));'), (47, 1, u'+  ASSERT_EQ(0xd9963a56, Value(reinterpret_cast<char*>(data), sizeof(data)));'), (51, 1, u'+  ASSERT_NE(Value("a", 1), Value("foo", 3));'), (55, 1, u'+  ASSERT_EQ(Value("hello world", 11),'), (61, 1, u'+  ASSERT_NE(crc, Mask(crc));'), (62, 1, u'+  ASSERT_NE(crc, Mask(Mask(crc)));'), (63, 1, u'+  ASSERT_EQ(crc, Unmask(Mask(crc)));'), (64, 1, u'+  ASSERT_EQ(crc, Unmask(Unmask(Mask(Mask(crc)))));')]
===========================================
Class:class PosixSequentialFile: public SequentialFile { class PosixSequentialFile: public SequentialFile 
Class:class PosixRandomAccessFile: public RandomAccessFile { class PosixRandomAccessFile: public RandomAccessFile 
Class:  class PosixMmapReadableFile: public RandomAccessFile { class PosixMmapReadableFile: public RandomAccessFile 
Class:     class PosixMmapFile : public WritableFile { class PosixMmapFile : public WritableFile 
Class: class PosixFileLock : public FileLock { class PosixFileLock : public FileLock 
Class: class PosixEnv : public Env { class PosixEnv : public Env 
Class:class EnvPosixTest { class EnvPosixTest 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+  assert(code != kOk);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+  ASSERT_TRUE(s.ok()) << s.ToString();')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(fImporting == false);'), (10, 1, u'+        assert(fImporting == true);')]
===========================================
===========================================
Total add: 48
Total del: 0
Header: LoadExternalBlockFile
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(fImporting == false);'), (10, 1, u'+        assert(fImporting == true);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(fImporting == false);'), (10, 1, u'+        assert(fImporting == true);')]
===========================================
Class:class TestAddrTypeVisitor : public boost::static_visitor<bool> class TestAddrTypeVisitor : public boost::static_visitor<bool>
Class:class TestLocker { 
Class: class DescribeAddressVisitor : public boost::static_visitor<Object> { 
Class: class DescribeAddressVisitor : public boost::static_visitor<Object> { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+                        if (fDebug) assert("mempool transaction missing input" == 0);')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: CreateNewBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+                        if (fDebug) assert("mempool transaction missing input" == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+                        if (fDebug) assert("mempool transaction missing input" == 0);')]
===========================================
Class:class TxPriorityCompare { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+        assert(ProcessBlock(NULL, pblock));')]
===========================================
===========================================
Total add: 187
Total del: 0
Header: BOOST_AUTO_TEST_SUITE
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+        assert(ProcessBlock(NULL, pblock));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(63, 1, u'+        assert(ProcessBlock(NULL, pblock));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(vSolutions.size() > 1);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: CombineMultisig
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(vSolutions.size() > 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(vSolutions.size() > 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(txin.prevout.n < txFrom.vout.size());')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: SignSignature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(txin.prevout.n < txFrom.vout.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(txin.prevout.n < txFrom.vout.size());')]
===========================================
Class:class JSONRequest { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(!fClient);')]
===========================================
===========================================
Total add: 0
Total del: 60
Header: CTxDB::ContainsTx
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(!fClient);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(!fClient);')]
===========================================
Class: class MainOptionsPage: public OptionsPage { 
Class: class DisplayOptionsPage: public OptionsPage { 
Class: class NetworkOptionsPage: public OptionsPage { 
Class: class HelpMessageBox: public QMessageBox { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(net >= 0 && net < NET_MAX);')]
===========================================
===========================================
Total add: 0
Total del: 5
Header: ParseNetwork
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(net >= 0 && net < NET_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(net >= 0 && net < NET_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(net >= 0 && net < NET_MAX);'), (13, 1, u'+    assert(net >= 0 && net < NET_MAX);')]
===========================================
===========================================
Total add: 60
Total del: 18
Header: ConnectSocketDirectly
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(net >= 0 && net < NET_MAX);'), (13, 1, u'+    assert(net >= 0 && net < NET_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(net >= 0 && net < NET_MAX);'), (13, 1, u'+    assert(net >= 0 && net < NET_MAX);')]
===========================================
Class:class DescribeAddressVisitor : public boost::static_visitor<Object> { 
Class: class CKeyStoreIsMineVisitor : public boost::static_visitor<bool> { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(!keypool.vchPubKey.empty());'), (6, 1, u'+        assert(keypool.vchPubKey.IsValid());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: CWallet::ReserveKeyFromKeyPool
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(!keypool.vchPubKey.empty());'), (6, 1, u'+        assert(keypool.vchPubKey.IsValid());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-        assert(!keypool.vchPubKey.empty());'), (6, 1, u'+        assert(keypool.vchPubKey.IsValid());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!vchPubKey.empty());'), (3, 1, u'+    assert(vchPubKey.IsValid());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CReserveKey::GetReservedKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!vchPubKey.empty());'), (3, 1, u'+    assert(vchPubKey.IsValid());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!vchPubKey.empty());'), (3, 1, u'+    assert(vchPubKey.IsValid());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!keypool.vchPubKey.empty());'), (3, 1, u'+        assert(keypool.vchPubKey.IsValid());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CWallet::GetAllReserveAddresses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!keypool.vchPubKey.empty());'), (3, 1, u'+        assert(keypool.vchPubKey.IsValid());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(!keypool.vchPubKey.empty());'), (3, 1, u'+        assert(keypool.vchPubKey.IsValid());')]
===========================================
Class:    class CSignatureCache { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+            assert(inputs.count(prevout.hash) > 0);')]
===========================================
===========================================
Total add: 16
Total del: 0
Header: CTransaction::ConnectInputs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+            assert(inputs.count(prevout.hash) > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+            assert(inputs.count(prevout.hash) > 0);')]
===========================================
Class: class HelpMessageBox: public QMessageBox { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(net >= 0 && net < NET_MAX);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: ParseNetwork
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(net >= 0 && net < NET_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    assert(net >= 0 && net < NET_MAX);')]
===========================================
Class: class MainOptionsPage : public QWidget class OptionsPage: public QWidget { 
Class: class WindowOptionsPage: public OptionsPage { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(nRndPos1 >= 0 && nRndPos2 >= 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: CAddrMan::SwapRandom
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(nRndPos1 >= 0 && nRndPos2 >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(nRndPos1 >= 0 && nRndPos2 >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(nUBucket >= 0 && nUBucket < vvNew.size());'), (3, 1, u'+    assert(nUBucket >= 0 && (unsigned int)nUBucket < vvNew.size());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CAddrMan::ShrinkNew
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(nUBucket >= 0 && nUBucket < vvNew.size());'), (3, 1, u'+    assert(nUBucket >= 0 && (unsigned int)nUBucket < vvNew.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(nUBucket >= 0 && nUBucket < vvNew.size());'), (3, 1, u'+    assert(nUBucket >= 0 && (unsigned int)nUBucket < vvNew.size());')]
===========================================
Class:class AcceptedConnection { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(nRndPos1 >= 0 && nRndPos2 >= 0);'), (3, 1, u'+    assert(nRndPos1 < vRandom.size() && nRndPos2 < vRandom.size());')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: CAddrMan::SwapRandom
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(nRndPos1 >= 0 && nRndPos2 >= 0);'), (3, 1, u'+    assert(nRndPos1 < vRandom.size() && nRndPos2 < vRandom.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(nRndPos1 >= 0 && nRndPos2 >= 0);'), (3, 1, u'+    assert(nRndPos1 < vRandom.size() && nRndPos2 < vRandom.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(mapInfo.count(nId1) == 1);'), (3, 1, u'+    assert(mapInfo.count(nId2) == 1);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: CAddrMan::SwapRandom
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(mapInfo.count(nId1) == 1);'), (3, 1, u'+    assert(mapInfo.count(nId2) == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(mapInfo.count(nId1) == 1);'), (3, 1, u'+    assert(mapInfo.count(nId2) == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(nOldest == -1 || mapInfo.count(nTemp) == 1);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CAddrMan::SelectTried
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(nOldest == -1 || mapInfo.count(nTemp) == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(nOldest == -1 || mapInfo.count(nTemp) == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(nUBucket >= 0 && nUBucket < vvNew.size());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CAddrMan::ShrinkNew
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(nUBucket >= 0 && nUBucket < vvNew.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(nUBucket >= 0 && nUBucket < vvNew.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(mapInfo.count(*it));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CAddrMan::ShrinkNew
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(mapInfo.count(*it));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(mapInfo.count(*it));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert(nOldest == -1 || mapInfo.count(*it) == 1);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CAddrMan::ShrinkNew
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert(nOldest == -1 || mapInfo.count(*it) == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert(nOldest == -1 || mapInfo.count(*it) == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(mapInfo.count(nOldest) == 1);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CAddrMan::ShrinkNew
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(mapInfo.count(nOldest) == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(mapInfo.count(nOldest) == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(vvNew[nOrigin].count(nId) == 1);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: CAddrMan::MakeTried
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(vvNew[nOrigin].count(nId) == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(vvNew[nOrigin].count(nId) == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(info.nRefCount == 0);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: CAddrMan::MakeTried
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(info.nRefCount == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(info.nRefCount == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(mapInfo.count(vTried[nPos]) == 1);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CAddrMan::MakeTried
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(mapInfo.count(vTried[nPos]) == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(mapInfo.count(vTried[nPos]) == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert(mapInfo.count(vTried[nPos]) == 1);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CAddrMan::Select_
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert(mapInfo.count(vTried[nPos]) == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert(mapInfo.count(vTried[nPos]) == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert(mapInfo.count(*it) == 1);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CAddrMan::Select_
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert(mapInfo.count(*it) == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+            assert(mapInfo.count(*it) == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(mapInfo.count(vRandom[n]) == 1);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CAddrMan::GetAddr_
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(mapInfo.count(vRandom[n]) == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(mapInfo.count(vRandom[n]) == 1);')]
===========================================
Class: class RPCExecutor: public QObject { 
Class: class CRPCCommand { 
Class: class CRPCTable { 
Class:class CRPCTable { 
Class: class CRPCCommand { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(pindexNew->pprev == pindexBest);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: runCommand
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(pindexNew->pprev == pindexBest);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(pindexNew->pprev == pindexBest);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-        assert(prevout.n < txPrev.vout.size());')]
===========================================
===========================================
Total add: 4
Total del: 8
Header: CTransaction::AreInputsStandard
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-        assert(prevout.n < txPrev.vout.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-        assert(prevout.n < txPrev.vout.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(inputsRet.count(prevout.hash) != 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CTransaction::FetchInputs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(inputsRet.count(prevout.hash) != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(inputsRet.count(prevout.hash) != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(mapInputs.count(prevout.hash) > 0);')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: CTransaction::AreInputsStandard
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(mapInputs.count(prevout.hash) > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(mapInputs.count(prevout.hash) > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(prevout.n >= txPrev.vout.size());'), (3, 1, u'+        assert(prevout.n < txPrev.vout.size());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CTransaction::AreInputsStandard
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(prevout.n >= txPrev.vout.size());'), (3, 1, u'+        assert(prevout.n < txPrev.vout.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(prevout.n >= txPrev.vout.size());'), (3, 1, u'+        assert(prevout.n < txPrev.vout.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(prevout.n >= txPrev.vout.size());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CTransaction::AreInputsStandard
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(prevout.n >= txPrev.vout.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(prevout.n >= txPrev.vout.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: IncrementExtraNonce
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+        assert(mapInputs.count(prevout.hash) > 0);')]
===========================================
===========================================
Total add: 59
Total del: 0
Header: CTransaction::ReadFromDisk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+        assert(mapInputs.count(prevout.hash) > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+        assert(mapInputs.count(prevout.hash) > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+            assert(inputs.count(prevout.hash) > 0);')]
===========================================
===========================================
Total add: 3
Total del: 37
Header: CTransaction::ConnectInputs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+            assert(inputs.count(prevout.hash) > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 1, u'+            assert(inputs.count(prevout.hash) > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(keys.size() >= 2);'), (17, 2, u'-    assert(keys.size() >= 2);'), (30, 2, u'-    assert(keys.size() >= 3);'), (31, 1, u'+    assert(!subscript.empty());')]
===========================================
===========================================
Total add: 17
Total del: 9
Header: VerifySignature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(keys.size() >= 2);'), (17, 2, u'-    assert(keys.size() >= 2);'), (30, 2, u'-    assert(keys.size() >= 3);'), (31, 1, u'+    assert(!subscript.empty());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(keys.size() >= 2);'), (17, 2, u'-    assert(keys.size() >= 2);'), (30, 2, u'-    assert(keys.size() >= 3);'), (31, 1, u'+    assert(!subscript.empty());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(keys.size() >= 2);'), (11, 1, u'+    assert(keys.size() >= 2);'), (17, 1, u'+    assert(keys.size() >= 3);')]
===========================================
===========================================
Total add: 19
Total del: 0
Header: VerifySignature
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(keys.size() >= 2);'), (11, 1, u'+    assert(keys.size() >= 2);'), (17, 1, u'+    assert(keys.size() >= 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(keys.size() >= 2);'), (11, 1, u'+    assert(keys.size() >= 2);'), (17, 1, u'+    assert(keys.size() >= 3);')]
===========================================
Class: class CTxDump { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+        assert(!keypool.vchPubKey.empty());')]
===========================================
===========================================
Total add: 19
Total del: 0
Header: CReserveKey::ReturnKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+        assert(!keypool.vchPubKey.empty());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+        assert(!keypool.vchPubKey.empty());')]
===========================================
Class:   class CMyApp : public wxApp { 
Class:  class WindowNotifier : public QWidget { 
Class:class DisplayOptionsPage : public QWidget { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                    default:            assert(!"invalid opcode"); break;')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: EvalScript
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                    default:            assert(!"invalid opcode"); break;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                    default:            assert(!"invalid opcode"); break;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                    default:                     assert(!"invalid opcode"); break;')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: EvalScript
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                    default:                     assert(!"invalid opcode"); break;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+                    default:                     assert(!"invalid opcode"); break;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(("GetWarnings() : invalid parameter", false));'), (3, 1, u'+    assert(!"GetWarnings() : invalid parameter");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: GetWarnings
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(("GetWarnings() : invalid parameter", false));'), (3, 1, u'+    assert(!"GetWarnings() : invalid parameter");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(("GetWarnings() : invalid parameter", false));'), (3, 1, u'+    assert(!"GetWarnings() : invalid parameter");')]
===========================================
Class:   class CCorruptAddress { 
Class:  class WindowNotifier : public QWidget { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(mapKeys.count(vchPubKey));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CWallet::CreateTransaction
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(mapKeys.count(vchPubKey));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                    assert(mapKeys.count(vchPubKey));')]
===========================================
Class: class CDBInit { 
Class:  class COrphan { 
Class: class CNetCleanup { 
Class:  class CInit { 
Class: class CDBInit { 
Class:  class COrphan { 
Class: class CNetCleanup { 
Class:  class CInit { 
Class: class TransactionStatus { 
Class: class TransactionRecord { 
Class:class TransactionRecord { 
Class:  class TransactionTableImpl { 
Class: class CDBInit { 
Class:  class COrphan { 
Class: class CNetCleanup { 
Class:  class CInit { 
Class: class CDBInit { 
Class:   class COrphan { 
Class: class CNetCleanup { 
Class: class CDBInit { 
Class:   class COrphan { 
Class: class CNetCleanup { 
Class:   class CMyApp : public wxApp { 
Class:  class CInit { 
Class:   class CMyApp : public wxApp { 
Class:  class CInit { 
Class:class COrphan { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            assert(block.hashMerkleRoot == uint256("0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"));'), (19, 1, u'+        assert(block.hashMerkleRoot == uint256("0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"));')]
===========================================
===========================================
Total add: 12
Total del: 6
Header: LoadBlockIndex
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            assert(block.hashMerkleRoot == uint256("0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"));'), (19, 1, u'+        assert(block.hashMerkleRoot == uint256("0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-            assert(block.hashMerkleRoot == uint256("0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"));'), (19, 1, u'+        assert(block.hashMerkleRoot == uint256("0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+                    assert(mapKeys.count(vchPubKey));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: CreateTransaction
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+                    assert(mapKeys.count(vchPubKey));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+                    assert(mapKeys.count(vchPubKey));')]
===========================================
Class: class CDBInit { 
Class: class CDBInit { 
Class: class CNetCleanup { 
Class: class CNetCleanup { 
Class:   class CMyApp : public wxApp { 
Class:   class CMyApp : public wxApp { 
Class:  class CInit { 
Class:  class CInit { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-                assert(hash == pblock->GetHash());'), (30, 1, u'+                    assert(hash == pblock->GetHash());')]
===========================================
===========================================
Total add: 39
Total del: 32
Header: BitcoinMiner
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-                assert(hash == pblock->GetHash());'), (30, 1, u'+                    assert(hash == pblock->GetHash());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-                assert(hash == pblock->GetHash());'), (30, 1, u'+                    assert(hash == pblock->GetHash());')]
===========================================
Class:   class CMyApp : public wxApp { 
Class:      class CMyApp: public wxApp { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    assert(("Unimplemented", 0));')]
===========================================
===========================================
Total add: 17
Total del: 12
Header: AddPendingCustomEvent
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    assert(("Unimplemented", 0));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+    assert(("Unimplemented", 0));')]
===========================================
Class: class CNetCleanup { 
Class: class CDBInit { 
Class:                  class CMyApp: public wxApp { 
Class:  class CInit { 
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
<type 'unicode'>
2733
Mismatch count:24577
Normal count:412690
