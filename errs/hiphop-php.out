projects/top_C++/hiphop-php
Going to process projects/top_C++/hiphop-php/all_log.txt 
---------- hiphop-php ------------

===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  assert(ad->m_kind == kStrMapKind);'), (19, 1, u'+  assert(ad->m_size == 0);'), (20, 1, u'+  assert(ad->m_pos == 0);'), (21, 1, u'+  assert(ad->m_count == 1);'), (22, 1, u'+  assert(ad->m_cap == cap);'), (23, 1, u'+  assert(ad->m_used == 0);'), (24, 1, u'+  assert(ad->m_nextKI == 0);'), (25, 1, u'+  assert(ad->m_tableMask == mask);'), (26, 1, u'+  assert(ad->checkInvariants());')]
===========================================
===========================================
Total add: 28
Total del: 0
Header: MixedArray::MakeReserveIntMap
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  assert(ad->m_kind == kStrMapKind);'), (19, 1, u'+  assert(ad->m_size == 0);'), (20, 1, u'+  assert(ad->m_pos == 0);'), (21, 1, u'+  assert(ad->m_count == 1);'), (22, 1, u'+  assert(ad->m_cap == cap);'), (23, 1, u'+  assert(ad->m_used == 0);'), (24, 1, u'+  assert(ad->m_nextKI == 0);'), (25, 1, u'+  assert(ad->m_tableMask == mask);'), (26, 1, u'+  assert(ad->checkInvariants());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  assert(ad->m_kind == kStrMapKind);'), (19, 1, u'+  assert(ad->m_size == 0);'), (20, 1, u'+  assert(ad->m_pos == 0);'), (21, 1, u'+  assert(ad->m_count == 1);'), (22, 1, u'+  assert(ad->m_cap == cap);'), (23, 1, u'+  assert(ad->m_used == 0);'), (24, 1, u'+  assert(ad->m_nextKI == 0);'), (25, 1, u'+  assert(ad->m_tableMask == mask);'), (26, 1, u'+  assert(ad->checkInvariants());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_kind == kIntMapKind);'), (3, 1, u'+  assert(ad->isIntMapArray() || ad->isStrMapArray());'), (11, 1, u'+  assert(kind == kIntMapKind || kind == kStrMapKind);')]
===========================================
===========================================
Total add: 19
Total del: 11
Header: MixedArray::resize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_kind == kIntMapKind);'), (3, 1, u'+  assert(ad->isIntMapArray() || ad->isStrMapArray());'), (11, 1, u'+  assert(kind == kIntMapKind || kind == kStrMapKind);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_kind == kIntMapKind);'), (3, 1, u'+  assert(ad->isIntMapArray() || ad->isStrMapArray());'), (11, 1, u'+  assert(kind == kIntMapKind || kind == kStrMapKind);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(false);')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: MixedArray::warnUsage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-    assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(m_class);'), (6, 1, u'+      assert(getClass());')]
===========================================
===========================================
Total add: 10
Total del: 6
Header: Type::toString
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(m_class);'), (6, 1, u'+      assert(getClass());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(m_class);'), (6, 1, u'+      assert(getClass());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(74, 1, u'+      assert(unit);'), (83, 1, u'+        assert(unit);'), (126, 1, u'+      assert(prevFile);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 2, u'-      assert(unit);'), (52, 2, u'-        assert(unit);'), (95, 2, u'-      assert(prevFile);')]
===========================================
===========================================
Total add: 0
Total del: 194
Header: ExecutionContext::getPrevVMState
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 2, u'-      assert(unit);'), (52, 2, u'-        assert(unit);'), (95, 2, u'-      assert(prevFile);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 2, u'-      assert(unit);'), (52, 2, u'-        assert(unit);'), (95, 2, u'-      assert(prevFile);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(66, 1, u'+  assert(!cls->m_nextClass);'), (79, 1, u'+    assert(*cls);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 2, u'-  assert(!cls->m_nextClass);'), (96, 2, u'-    assert(*cls);')]
===========================================
===========================================
Total add: 3
Total del: 102
Header: allocateBCRegion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 2, u'-  assert(!cls->m_nextClass);'), (96, 2, u'-    assert(*cls);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 2, u'-  assert(!cls->m_nextClass);'), (96, 2, u'-    assert(*cls);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-  assert(!m_safeToRead);')]
===========================================
===========================================
Total add: 0
Total del: 43
Header: Unit::getTraitsInfo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-  assert(!m_safeToRead);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-  assert(!m_safeToRead);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(m_mergeState & UnitMergeStateMerged);'), (5, 1, u'+  assert(m_mergeState & MergeState::Merged);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: compactUnitMergeInfo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(m_mergeState & UnitMergeStateMerged);'), (5, 1, u'+  assert(m_mergeState & MergeState::Merged);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(m_mergeState & UnitMergeStateMerged);'), (5, 1, u'+  assert(m_mergeState & MergeState::Merged);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(kind == UnitMergeKindDefine ||'), (5, 1, u'+    assert(kind == MergeKind::Define ||'), (10, 2, u'-    assert(kind == UnitMergeKindReqDoc);'), (11, 1, u'+    assert(kind == MergeKind::ReqDoc);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: void UnitRepoProxy::InsertUnitMergeableStmt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(kind == UnitMergeKindDefine ||'), (5, 1, u'+    assert(kind == MergeKind::Define ||'), (10, 2, u'-    assert(kind == UnitMergeKindReqDoc);'), (11, 1, u'+    assert(kind == MergeKind::ReqDoc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(kind == UnitMergeKindDefine ||'), (5, 1, u'+    assert(kind == MergeKind::Define ||'), (10, 2, u'-    assert(kind == UnitMergeKindReqDoc);'), (11, 1, u'+    assert(kind == MergeKind::ReqDoc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(296, 2, u'-    assert(m_ptr != xmlTextWriterPtr(-1));'), (303, 2, u'-    assert(m_output != xmlBufferPtr(-1));')]
===========================================
Class:class XMLWriterData : public Sweepable { class XMLWriterData : public Sweepable 
Class:   class XMLWriterExtension : public Extension { class XMLWriterExtension : public Extension 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    assert(fpRoot == snapshotRoot);'), (17, 2, u'-  assert(m_locals.size() == snapshot.locals.size());')]
===========================================
===========================================
Total add: 0
Total del: 26
Header: FrameState::save
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    assert(fpRoot == snapshotRoot);'), (17, 2, u'-  assert(m_locals.size() == snapshot.locals.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-    assert(fpRoot == snapshotRoot);'), (17, 2, u'-  assert(m_locals.size() == snapshot.locals.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(state.fpValue);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: FrameState::merge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(state.fpValue);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(state.fpValue);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert((m_ctor->attrs() & ~AttrBuiltin & ~AttrAbstract) =='), (3, 1, u'+  assert((m_ctor->attrs() & ~(AttrBuiltin|AttrAbstract|AttrInterceptable)) ==')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Class::setSpecial
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert((m_ctor->attrs() & ~AttrBuiltin & ~AttrAbstract) =='), (3, 1, u'+  assert((m_ctor->attrs() & ~(AttrBuiltin|AttrAbstract|AttrInterceptable)) ==')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert((m_ctor->attrs() & ~AttrBuiltin & ~AttrAbstract) =='), (3, 1, u'+  assert((m_ctor->attrs() & ~(AttrBuiltin|AttrAbstract|AttrInterceptable)) ==')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(hasTransId(newBlockId));'), (37, 1, u'+      assert(hasTransId(newBlockId));')]
===========================================
===========================================
Total add: 37
Total del: 25
Header: selectHotTrace
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(hasTransId(newBlockId));'), (37, 1, u'+      assert(hasTransId(newBlockId));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(hasTransId(newBlockId));'), (37, 1, u'+      assert(hasTransId(newBlockId));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(visible && accessible && !unset);'), (6, 1, u'+  assert(visible && accessible /* && !unset */);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: convert_to_array
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(visible && accessible && !unset);'), (6, 1, u'+  assert(visible && accessible /* && !unset */);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(visible && accessible && !unset);'), (6, 1, u'+  assert(visible && accessible /* && !unset */);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        assert(block->empty() || !block->back().isBlockEnd());'), (8, 1, u'+        assert(block->empty() || !block->back().isBlockEnd() || inst->next());')]
===========================================
===========================================
Total add: 11
Total del: 5
Header: IRBuilder::reoptimize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        assert(block->empty() || !block->back().isBlockEnd());'), (8, 1, u'+        assert(block->empty() || !block->back().isBlockEnd() || inst->next());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        assert(block->empty() || !block->back().isBlockEnd());'), (8, 1, u'+        assert(block->empty() || !block->back().isBlockEnd() || inst->next());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(ad->isIntMapArray());')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: MixedArray::SetInt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(ad->isIntMapArray());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(ad->isIntMapArray());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(ad->kind() != kMixedKind);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: MixedArray::Sort
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(ad->kind() != kMixedKind);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(ad->kind() != kMixedKind);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(ad->kind() != kMixedKind);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: MixedArray::Usort
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(ad->kind() != kMixedKind);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(ad->kind() != kMixedKind);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(!handle->isUncounted());')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: APCArray::MakeArray
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(!handle->isUncounted());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(!handle->isUncounted());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 1, u'+  assert(data->isCollection());'), (144, 1, u'+      assert(false);'), (162, 1, u'+      assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!getUncounted());'), (3, 1, u'+  assert(!isUncounted());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: APCHandle::toLocal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!getUncounted());'), (3, 1, u'+  assert(!isUncounted());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!getUncounted());'), (3, 1, u'+  assert(!isUncounted());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_handle.getUncounted());'), (3, 1, u'+  assert(m_handle.isUncounted());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: APCTypedValue::MakeSharedArray
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_handle.getUncounted());'), (3, 1, u'+  assert(m_handle.isUncounted());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_handle.getUncounted());'), (3, 1, u'+  assert(m_handle.isUncounted());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(!objectData->isCollection() || apcExtension::OptimizeSerialization);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: APCObject::Construct
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(!objectData->isCollection() || apcExtension::OptimizeSerialization);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(!objectData->isCollection() || apcExtension::OptimizeSerialization);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(handle->getUncounted() && size > 0);'), (3, 1, u'+  assert(handle->isUncounted() && size > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ExecutionContext::pushLocalsAndIterators
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(handle->getUncounted() && size > 0);'), (3, 1, u'+  assert(handle->isUncounted() && size > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(handle->getUncounted() && size > 0);'), (3, 1, u'+  assert(handle->isUncounted() && size > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      emitAssertFlagsNonNegative(m_as);'), (7, 1, u'+      emitAssertFlagsNonNegative(a);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: CodeGenerator::cgCheckStaticBitAndDecRef
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      emitAssertFlagsNonNegative(m_as);'), (7, 1, u'+      emitAssertFlagsNonNegative(a);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      emitAssertFlagsNonNegative(m_as);'), (7, 1, u'+      emitAssertFlagsNonNegative(a);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert((checkForInt && !converted) || !checkForInt,')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: checkedGet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert((checkForInt && !converted) || !checkForInt,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert((checkForInt && !converted) || !checkForInt,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  static_assert(!converted || keyType == KeyType::Int,')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: HhbcTranslator::MInstrTranslator::emitPackedArrayIsset
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  static_assert(!converted || keyType == KeyType::Int,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  static_assert(!converted || keyType == KeyType::Int,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    assert(stype.hasRawVal() || stype <= Type::Null);'), (19, 1, u'+    assert(sreg == InvalidReg && dreg == InvalidReg);')]
===========================================
===========================================
Total add: 12
Total del: 3
Header: CodeGenerator::cgMov
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    assert(stype.hasRawVal() || stype <= Type::Null);'), (19, 1, u'+    assert(sreg == InvalidReg && dreg == InvalidReg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    assert(stype.hasRawVal() || stype <= Type::Null);'), (19, 1, u'+    assert(sreg == InvalidReg && dreg == InvalidReg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(IMPLIES(block->numPreds() > 0,'), (8, 1, u'+  assert(IMPLIES(block->numPreds() > 0, predsAllowed));')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: FrameState::dropLocalRefsInnerTypes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(IMPLIES(block->numPreds() > 0,'), (8, 1, u'+  assert(IMPLIES(block->numPreds() > 0, predsAllowed));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(IMPLIES(block->numPreds() > 0,'), (8, 1, u'+  assert(IMPLIES(block->numPreds() > 0, predsAllowed));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(prev >= 0 && prev < asSharedArray(ad)->m_size);'), (4, 1, u'+  assert(prev >= 0 && prev < a->m_size);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: APCLocalArray::IterAdvance
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(prev >= 0 && prev < asSharedArray(ad)->m_size);'), (4, 1, u'+  assert(prev >= 0 && prev < a->m_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(prev >= 0 && prev < asSharedArray(ad)->m_size);'), (4, 1, u'+  assert(prev >= 0 && prev < a->m_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ArrayIter::second
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+  assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ArrayIter::secondRef
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+  assert(m_pos != ad->iter_end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+  assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ArrayIter::secondRefPlus
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (3, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::MakeReserveMixed
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (3, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (3, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (3, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::MakeReserveIntMap
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (3, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (3, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ei <= ssize_t(m_used));'), (3, 1, u'+  assert(ei < ssize_t(m_used));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::checkInvariants
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ei <= ssize_t(m_used));'), (3, 1, u'+  assert(ei < ssize_t(m_used));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ei <= ssize_t(m_used));'), (3, 1, u'+  assert(ei < ssize_t(m_used));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(invalid_index == -1, "");')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: MixedArray::IterAdvance
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(invalid_index == -1, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(invalid_index == -1, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != invalid_index);'), (3, 1, u'+  assert(pos != a->m_used);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::GetValueRef
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != invalid_index);'), (3, 1, u'+  assert(pos != a->m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != invalid_index);'), (3, 1, u'+  assert(pos != a->m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(size_t(m_pos) < m_used);'), (32, 1, u'+      assert(size_t(m_pos) < m_used);')]
===========================================
===========================================
Total add: 47
Total del: 23
Header: MixedArray::compact
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(size_t(m_pos) < m_used);'), (32, 1, u'+      assert(size_t(m_pos) < m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(size_t(m_pos) < m_used);'), (32, 1, u'+      assert(size_t(m_pos) < m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(pos >= 0 && pos < m_used);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: NEVER_INLINE
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(pos >= 0 && pos < m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(pos >= 0 && pos < m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != a->m_used);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::NvGetKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != a->m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != a->m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(pos >= 0 && pos < a->m_used);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: MixedArray::PopImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(pos >= 0 && pos < a->m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(pos >= 0 && pos < a->m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    assert(pos >= 0 && pos < a->m_used);'), (14, 1, u'+    assert(!isTombstone(e.data.m_type));')]
===========================================
===========================================
Total add: 4
Total del: 7
Header: MixedArray::DequeueImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    assert(pos >= 0 && pos < a->m_used);'), (14, 1, u'+    assert(!isTombstone(e.data.m_type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    assert(pos >= 0 && pos < a->m_used);'), (14, 1, u'+    assert(!isTombstone(e.data.m_type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(arr->m_pos >= 0 && arr->m_pos <= arr->m_size);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: PackedArray::checkInvariants
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(arr->m_pos >= 0 && arr->m_pos <= arr->m_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(arr->m_pos >= 0 && arr->m_pos <= arr->m_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (8, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: MixedArray::MakeReserve
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (8, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (8, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != ad->m_size);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedArray::NvGetKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != ad->m_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != ad->m_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != ad->m_size);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedArray::GetValueRef
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != ad->m_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != ad->m_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(checkInvariants(ad));')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: PackedArray::IterBegin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(checkInvariants(ad));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(checkInvariants(ad));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(ArrayData::invalid_index == -1, "");')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: PackedArray::IterEnd
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(ArrayData::invalid_index == -1, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(ArrayData::invalid_index == -1, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(ad->isPacked());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: PackedArray::Merge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(ad->isPacked());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(ad->isPacked());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ad->m_pos == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedArray::Pop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ad->m_pos == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ad->m_pos == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_iterPos != ArrayData::invalid_index);'), (3, 1, u'+    assert(m_iterPos != m_deps->iter_end());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: c_GenArrayWaitHandle::enterContextImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_iterPos != ArrayData::invalid_index);'), (3, 1, u'+    assert(m_iterPos != m_deps->iter_end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_iterPos != ArrayData::invalid_index);'), (3, 1, u'+    assert(m_iterPos != m_deps->iter_end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-  assert(m_size);')]
===========================================
===========================================
Total add: 1
Total del: 16
Header: BaseVector::toArrayImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-  assert(m_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-  assert(m_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pos != ArrayData::invalid_index);'), (3, 1, u'+    assert(pos != ad->iter_end());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: c_Vector::ti_fromarray
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pos != ArrayData::invalid_index);'), (3, 1, u'+    assert(pos != ad->iter_end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pos != ArrayData::invalid_index);'), (3, 1, u'+    assert(pos != ad->iter_end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_pos >= 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: c_VectorIterator::t_key
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_pos >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_pos >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  assert(ad->m_pos == nthElmPos(0));')]
===========================================
===========================================
Total add: 1
Total del: 14
Header: HashCollection::toArrayImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  assert(ad->m_pos == nthElmPos(0));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  assert(ad->m_pos == nthElmPos(0));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(prev >= 0 && prev < a->m_size);'), (4, 1, u'+  assert(prev >= 0 && prev < asSharedArray(ad)->m_size);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: APCLocalArray::IterAdvance
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(prev >= 0 && prev < a->m_size);'), (4, 1, u'+  assert(prev >= 0 && prev < asSharedArray(ad)->m_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(prev >= 0 && prev < a->m_size);'), (4, 1, u'+  assert(prev >= 0 && prev < asSharedArray(ad)->m_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(m_pos != ArrayData::invalid_index);'), (5, 2, u'-    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ArrayIter::second
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(m_pos != ArrayData::invalid_index);'), (5, 2, u'-    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(m_pos != ArrayData::invalid_index);'), (5, 2, u'-    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_pos != ArrayData::invalid_index);'), (5, 2, u'-  assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ArrayIter::secondRef
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_pos != ArrayData::invalid_index);'), (5, 2, u'-  assert(m_pos != ad->iter_end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_pos != ArrayData::invalid_index);'), (5, 2, u'-  assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(m_pos != ArrayData::invalid_index);'), (5, 2, u'-    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ArrayIter::secondRefPlus
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(m_pos != ArrayData::invalid_index);'), (5, 2, u'-    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(m_pos != ArrayData::invalid_index);'), (5, 2, u'-    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == 0);'), (3, 1, u'+  assert(ad->m_pos == ArrayData::invalid_index);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::MakeReserveMixed
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == 0);'), (3, 1, u'+  assert(ad->m_pos == ArrayData::invalid_index);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == 0);'), (3, 1, u'+  assert(ad->m_pos == ArrayData::invalid_index);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == 0);'), (3, 1, u'+  assert(ad->m_pos == ArrayData::invalid_index);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::MakeReserveIntMap
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == 0);'), (3, 1, u'+  assert(ad->m_pos == ArrayData::invalid_index);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == 0);'), (3, 1, u'+  assert(ad->m_pos == ArrayData::invalid_index);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ei < ssize_t(m_used));'), (3, 1, u'+  assert(ei <= ssize_t(m_used));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::checkInvariants
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ei < ssize_t(m_used));'), (3, 1, u'+  assert(ei <= ssize_t(m_used));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ei < ssize_t(m_used));'), (3, 1, u'+  assert(ei <= ssize_t(m_used));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  static_assert(invalid_index == -1, "");')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: MixedArray::IterAdvance
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  static_assert(invalid_index == -1, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  static_assert(invalid_index == -1, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != a->m_used);'), (3, 1, u'+  assert(pos != invalid_index);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::GetValueRef
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != a->m_used);'), (3, 1, u'+  assert(pos != invalid_index);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != a->m_used);'), (3, 1, u'+  assert(pos != invalid_index);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(size_t(m_pos) < m_used);'), (26, 2, u'-      assert(size_t(m_pos) < m_used);')]
===========================================
===========================================
Total add: 23
Total del: 47
Header: MixedArray::compact
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(size_t(m_pos) < m_used);'), (26, 2, u'-      assert(size_t(m_pos) < m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    assert(size_t(m_pos) < m_used);'), (26, 2, u'-      assert(size_t(m_pos) < m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos >= 0 && pos < m_used);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: NEVER_INLINE
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos >= 0 && pos < m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos >= 0 && pos < m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != a->m_used);'), (3, 1, u'+  assert(pos != ArrayData::invalid_index);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::NvGetKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != a->m_used);'), (3, 1, u'+  assert(pos != ArrayData::invalid_index);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != a->m_used);'), (3, 1, u'+  assert(pos != ArrayData::invalid_index);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(pos >= 0 && pos < a->m_used);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: MixedArray::PopImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(pos >= 0 && pos < a->m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    assert(pos >= 0 && pos < a->m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    assert(pos >= 0 && pos < a->m_used);'), (14, 2, u'-    assert(!isTombstone(e.data.m_type));')]
===========================================
===========================================
Total add: 7
Total del: 4
Header: MixedArray::DequeueImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    assert(pos >= 0 && pos < a->m_used);'), (14, 2, u'-    assert(!isTombstone(e.data.m_type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    assert(pos >= 0 && pos < a->m_used);'), (14, 2, u'-    assert(!isTombstone(e.data.m_type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(arr->m_pos >= 0 && arr->m_pos <= arr->m_size);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: PackedArray::checkInvariants
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(arr->m_pos >= 0 && arr->m_pos <= arr->m_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(arr->m_pos >= 0 && arr->m_pos <= arr->m_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(ad->m_pos == 0);'), (8, 1, u'+  assert(ad->m_pos == ArrayData::invalid_index);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: MixedArray::MakeReserve
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(ad->m_pos == 0);'), (8, 1, u'+  assert(ad->m_pos == ArrayData::invalid_index);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(ad->m_pos == 0);'), (8, 1, u'+  assert(ad->m_pos == ArrayData::invalid_index);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ad->m_size);'), (3, 1, u'+  assert(pos != ArrayData::invalid_index);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedArray::NvGetKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ad->m_size);'), (3, 1, u'+  assert(pos != ArrayData::invalid_index);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ad->m_size);'), (3, 1, u'+  assert(pos != ArrayData::invalid_index);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ad->m_size);'), (3, 1, u'+  assert(pos != ArrayData::invalid_index);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedArray::GetValueRef
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ad->m_size);'), (3, 1, u'+  assert(pos != ArrayData::invalid_index);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ad->m_size);'), (3, 1, u'+  assert(pos != ArrayData::invalid_index);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  assert(checkInvariants(ad));')]
===========================================
===========================================
Total add: 1
Total del: 6
Header: PackedArray::IterBegin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  assert(checkInvariants(ad));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  assert(checkInvariants(ad));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(ArrayData::invalid_index == -1, "");')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: PackedArray::IterEnd
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(ArrayData::invalid_index == -1, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(ArrayData::invalid_index == -1, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->isPacked());')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: PackedArray::Merge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->isPacked());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->isPacked());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ad->m_pos == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedArray::Pop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ad->m_pos == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(ad->m_pos == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_iterPos != m_deps->iter_end());'), (3, 1, u'+    assert(m_iterPos != ArrayData::invalid_index);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: c_GenArrayWaitHandle::enterContextImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_iterPos != m_deps->iter_end());'), (3, 1, u'+    assert(m_iterPos != ArrayData::invalid_index);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_iterPos != m_deps->iter_end());'), (3, 1, u'+    assert(m_iterPos != ArrayData::invalid_index);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  assert(m_size);')]
===========================================
===========================================
Total add: 16
Total del: 1
Header: BaseVector::toArrayImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  assert(m_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  assert(m_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pos != ad->iter_end());'), (3, 1, u'+    assert(pos != ArrayData::invalid_index);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: c_Vector::ti_fromarray
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pos != ad->iter_end());'), (3, 1, u'+    assert(pos != ArrayData::invalid_index);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pos != ad->iter_end());'), (3, 1, u'+    assert(pos != ArrayData::invalid_index);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_pos >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: c_VectorIterator::t_key
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_pos >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_pos >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-  assert(ad->m_pos == nthElmPos(0));')]
===========================================
===========================================
Total add: 14
Total del: 1
Header: HashCollection::toArrayImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-  assert(ad->m_pos == nthElmPos(0));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-  assert(ad->m_pos == nthElmPos(0));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(!region.blocks.empty());'), (10, 2, u'-  assert(!region.blocks.empty());')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: Translator::translateRegion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(!region.blocks.empty());'), (10, 2, u'-  assert(!region.blocks.empty());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(!region.blocks.empty());'), (10, 2, u'-  assert(!region.blocks.empty());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(len >= 0);')]
===========================================
===========================================
Total add: 29
Total del: 2
Header: string_replace
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(len >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(len >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(m_curBlock);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: IRBuilder::startBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(m_curBlock);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(m_curBlock);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(m_curBlock);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: IRBuilder::startBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(m_curBlock);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert(m_curBlock);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 1, u'+  assert(getKind() == Kind::BlockableWaitHandle);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(uint8_t(AsioBlockable::Kind::BlockableWaitHandle) == 0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: CodeGenerator::cgAFWHBlockOn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(uint8_t(AsioBlockable::Kind::BlockableWaitHandle) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(uint8_t(AsioBlockable::Kind::BlockableWaitHandle) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(prev >= 0 && prev < asSharedArray(ad)->m_size);'), (4, 1, u'+  assert(prev >= 0 && prev < a->m_size);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: APCLocalArray::IterAdvance
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(prev >= 0 && prev < asSharedArray(ad)->m_size);'), (4, 1, u'+  assert(prev >= 0 && prev < a->m_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(prev >= 0 && prev < asSharedArray(ad)->m_size);'), (4, 1, u'+  assert(prev >= 0 && prev < a->m_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ArrayIter::second
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+  assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ArrayIter::secondRef
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+  assert(m_pos != ad->iter_end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+  assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ArrayIter::secondRefPlus
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_pos != ArrayData::invalid_index);'), (5, 1, u'+    assert(m_pos != ad->iter_end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (3, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::MakeReserveMixed
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (3, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (3, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (3, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::MakeReserveIntMap
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (3, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (3, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ei <= ssize_t(m_used));'), (3, 1, u'+  assert(ei < ssize_t(m_used));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::checkInvariants
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ei <= ssize_t(m_used));'), (3, 1, u'+  assert(ei < ssize_t(m_used));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(ei <= ssize_t(m_used));'), (3, 1, u'+  assert(ei < ssize_t(m_used));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(invalid_index == -1, "");')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: MixedArray::IterAdvance
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(invalid_index == -1, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(invalid_index == -1, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != invalid_index);'), (3, 1, u'+  assert(pos != a->m_used);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::GetValueRef
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != invalid_index);'), (3, 1, u'+  assert(pos != a->m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != invalid_index);'), (3, 1, u'+  assert(pos != a->m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(size_t(m_pos) < m_used);'), (32, 1, u'+      assert(size_t(m_pos) < m_used);')]
===========================================
===========================================
Total add: 47
Total del: 23
Header: MixedArray::compact
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(size_t(m_pos) < m_used);'), (32, 1, u'+      assert(size_t(m_pos) < m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-    assert(size_t(m_pos) < m_used);'), (32, 1, u'+      assert(size_t(m_pos) < m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(pos >= 0 && pos < m_used);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: NEVER_INLINE
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(pos >= 0 && pos < m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(pos >= 0 && pos < m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != a->m_used);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: MixedArray::NvGetKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != a->m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != a->m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(pos >= 0 && pos < a->m_used);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: MixedArray::PopImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(pos >= 0 && pos < a->m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    assert(pos >= 0 && pos < a->m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    assert(pos >= 0 && pos < a->m_used);'), (14, 1, u'+    assert(!isTombstone(e.data.m_type));')]
===========================================
===========================================
Total add: 4
Total del: 7
Header: MixedArray::DequeueImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    assert(pos >= 0 && pos < a->m_used);'), (14, 1, u'+    assert(!isTombstone(e.data.m_type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+    assert(pos >= 0 && pos < a->m_used);'), (14, 1, u'+    assert(!isTombstone(e.data.m_type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(arr->m_pos >= 0 && arr->m_pos <= arr->m_size);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: PackedArray::checkInvariants
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(arr->m_pos >= 0 && arr->m_pos <= arr->m_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(arr->m_pos >= 0 && arr->m_pos <= arr->m_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (8, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: MixedArray::MakeReserve
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (8, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(ad->m_pos == ArrayData::invalid_index);'), (8, 1, u'+  assert(ad->m_pos == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != ad->m_size);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedArray::NvGetKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != ad->m_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != ad->m_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != ad->m_size);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedArray::GetValueRef
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != ad->m_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(pos != ArrayData::invalid_index);'), (3, 1, u'+  assert(pos != ad->m_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(checkInvariants(ad));')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: PackedArray::IterBegin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(checkInvariants(ad));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  assert(checkInvariants(ad));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(ArrayData::invalid_index == -1, "");')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: PackedArray::IterEnd
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(ArrayData::invalid_index == -1, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(ArrayData::invalid_index == -1, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(ad->isPacked());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: PackedArray::Merge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(ad->isPacked());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(ad->isPacked());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ad->m_pos == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: PackedArray::Pop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ad->m_pos == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(ad->m_pos == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_iterPos != ArrayData::invalid_index);'), (3, 1, u'+    assert(m_iterPos != m_deps->iter_end());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: c_GenArrayWaitHandle::enterContextImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_iterPos != ArrayData::invalid_index);'), (3, 1, u'+    assert(m_iterPos != m_deps->iter_end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_iterPos != ArrayData::invalid_index);'), (3, 1, u'+    assert(m_iterPos != m_deps->iter_end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-  assert(m_size);')]
===========================================
===========================================
Total add: 1
Total del: 16
Header: BaseVector::toArrayImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-  assert(m_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-  assert(m_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pos != ArrayData::invalid_index);'), (3, 1, u'+    assert(pos != ad->iter_end());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: c_Vector::ti_fromarray
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pos != ArrayData::invalid_index);'), (3, 1, u'+    assert(pos != ad->iter_end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(pos != ArrayData::invalid_index);'), (3, 1, u'+    assert(pos != ad->iter_end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_pos >= 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: c_VectorIterator::t_key
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_pos >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_pos >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  assert(ad->m_pos == nthElmPos(0));')]
===========================================
===========================================
Total add: 1
Total del: 14
Header: HashCollection::toArrayImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  assert(ad->m_pos == nthElmPos(0));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  assert(ad->m_pos == nthElmPos(0));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    m_hhbcTrans.assertTypeStack(0, JIT::Type::Cell);'), (14, 2, u'-  assert(i.noOp);'), (15, 2, u'-  m_hhbcTrans.assertTypeStack(0, JIT::Type::Cell);'), (23, 2, u'-    m_hhbcTrans.assertTypeStack(0, JIT::Type::BoxedCell);'), (30, 2, u'-  assert(i.noOp);'), (31, 2, u'-  m_hhbcTrans.assertTypeStack(0, JIT::Type::BoxedCell);')]
===========================================
===========================================
Total add: 0
Total del: 33
Header: IRTranslator::translateAssignToLocalOp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    m_hhbcTrans.assertTypeStack(0, JIT::Type::Cell);'), (14, 2, u'-  assert(i.noOp);'), (15, 2, u'-  m_hhbcTrans.assertTypeStack(0, JIT::Type::Cell);'), (23, 2, u'-    m_hhbcTrans.assertTypeStack(0, JIT::Type::BoxedCell);'), (30, 2, u'-  assert(i.noOp);'), (31, 2, u'-  m_hhbcTrans.assertTypeStack(0, JIT::Type::BoxedCell);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    m_hhbcTrans.assertTypeStack(0, JIT::Type::Cell);'), (14, 2, u'-  assert(i.noOp);'), (15, 2, u'-  m_hhbcTrans.assertTypeStack(0, JIT::Type::Cell);'), (23, 2, u'-    m_hhbcTrans.assertTypeStack(0, JIT::Type::BoxedCell);'), (30, 2, u'-  assert(i.noOp);'), (31, 2, u'-  m_hhbcTrans.assertTypeStack(0, JIT::Type::BoxedCell);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  always_assert(op == OpFPassCW || op == OpFPassCE);')]
===========================================
===========================================
Total add: 6
Total del: 7
Header: IRTranslator::translateFPassCOp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  always_assert(op == OpFPassCW || op == OpFPassCE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  always_assert(op == OpFPassCW || op == OpFPassCE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(i.noOp);')]
===========================================
===========================================
Total add: 0
Total del: 4
Header: IRTranslator::translateFPassV
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(i.noOp);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(i.noOp);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  if (isTypeAssert(op)) return true;')]
===========================================
===========================================
Total add: 8
Total del: 3
Header: outputIsPredicted
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  if (isTypeAssert(op)) return true;')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  if (isTypeAssert(op)) return true;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  assert(res == Failure);'), (18, 1, u'+      assert(res != Failure);'), (59, 1, u'+          assert(tryClass);'), (67, 1, u'+          assert(tryType);'), (73, 1, u'+        assert(classRes != Failure && typeRes != Failure);')]
===========================================
===========================================
Total add: 94
Total del: 0
Header: AutoloadHandler::invokeHandler
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  assert(res == Failure);'), (18, 1, u'+      assert(res != Failure);'), (59, 1, u'+          assert(tryClass);'), (67, 1, u'+          assert(tryType);'), (73, 1, u'+        assert(classRes != Failure && typeRes != Failure);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  assert(res == Failure);'), (18, 1, u'+      assert(res != Failure);'), (59, 1, u'+          assert(tryClass);'), (67, 1, u'+          assert(tryType);'), (73, 1, u'+        assert(classRes != Failure && typeRes != Failure);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+  assert(!m_smart);'), (35, 1, u'+    assert(m_data);'), (42, 1, u'+  assert(!m_smart);'), (50, 1, u'+    assert(m_data);')]
===========================================
===========================================
Total add: 54
Total del: 1
Header: getOwningClassForFunc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+  assert(!m_smart);'), (35, 1, u'+    assert(m_data);'), (42, 1, u'+  assert(!m_smart);'), (50, 1, u'+    assert(m_data);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+  assert(!m_smart);'), (35, 1, u'+    assert(m_data);'), (42, 1, u'+  assert(!m_smart);'), (50, 1, u'+    assert(m_data);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 1, u'+  assert(!m_cachedClass.bound());'), (57, 1, u'+  assert(!getCount());')]
===========================================
===========================================
Total add: 36
Total del: 21
Header: Class::newClass
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 1, u'+  assert(!m_cachedClass.bound());'), (57, 1, u'+  assert(!getCount());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 1, u'+  assert(!m_cachedClass.bound());'), (57, 1, u'+  assert(!getCount());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 2, u'-  assert(!m_cachedClass.bound());'), (40, 2, u'-  assert(!getCount());'), (46, 2, u'-  assert(!m_cachedClass.bound());')]
===========================================
===========================================
Total add: 0
Total del: 80
Header: Class::releaseRefs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 2, u'-  assert(!m_cachedClass.bound());'), (40, 2, u'-  assert(!getCount());'), (46, 2, u'-  assert(!m_cachedClass.bound());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 2, u'-  assert(!m_cachedClass.bound());'), (40, 2, u'-  assert(!getCount());'), (46, 2, u'-  assert(!m_cachedClass.bound());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+  assert(instanceCtor()); // Only call this on CPP classes')]
===========================================
===========================================
Total add: 51
Total del: 0
Header: Class::commonAncestor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+  assert(instanceCtor()); // Only call this on CPP classes')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+  assert(instanceCtor()); // Only call this on CPP classes')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-      assert(baseClass);'), (28, 1, u'+  assert(needsInitSProps() || m_sPropCacheInit.isPersistent());'), (58, 1, u'+      assert(retval.m_type == KindOfNull);'), (129, 1, u'+  assert(numStaticProperties() > index);'), (147, 1, u'+      assert(baseClass);')]
===========================================
===========================================
Total add: 135
Total del: 21
Header: Class::initProps
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-      assert(baseClass);'), (28, 1, u'+  assert(needsInitSProps() || m_sPropCacheInit.isPersistent());'), (58, 1, u'+      assert(retval.m_type == KindOfNull);'), (129, 1, u'+  assert(numStaticProperties() > index);'), (147, 1, u'+      assert(baseClass);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-      assert(baseClass);'), (28, 1, u'+  assert(needsInitSProps() || m_sPropCacheInit.isPersistent());'), (58, 1, u'+      assert(retval.m_type == KindOfNull);'), (129, 1, u'+  assert(numStaticProperties() > index);'), (147, 1, u'+      assert(baseClass);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(needsInitSProps() || m_sPropCacheInit.isPersistent());'), (33, 2, u'-      assert(retval.m_type == KindOfNull);')]
===========================================
===========================================
Total add: 0
Total del: 38
Header: Class::getDeclPropIndex
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(needsInitSProps() || m_sPropCacheInit.isPersistent());'), (33, 2, u'-      assert(retval.m_type == KindOfNull);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(needsInitSProps() || m_sPropCacheInit.isPersistent());'), (33, 2, u'-      assert(retval.m_type == KindOfNull);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  assert(cellIsPlausible(*ret));')]
===========================================
===========================================
Total add: 3
Total del: 10
Header: Class::IsPropAccessible
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  assert(cellIsPlausible(*ret));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  assert(cellIsPlausible(*ret));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  assert(cellIsPlausible(*ret));')]
===========================================
===========================================
Total add: 11
Total del: 0
Header: Class::clsCnsGet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  assert(cellIsPlausible(*ret));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  assert(cellIsPlausible(*ret));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 1, u'+  assert(index >= 0);'), (99, 1, u'+  assert(ci);'), (137, 1, u'+  assert(ci->m_interfaces.size() == ci->m_interfacesVec.size());'), (167, 1, u'+      assert(!strcmp(name->data(), "86ctor"));'), (171, 1, u'+    assert(func);'), (172, 1, u'+    assert(declaredMethod(func));'), (178, 1, u'+    assert(func);'), (234, 1, u'+    assert(cell.m_type != KindOfUninit);')]
===========================================
===========================================
Total add: 277
Total del: 45
Header: Class::clsCnsType
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 1, u'+  assert(index >= 0);'), (99, 1, u'+  assert(ci);'), (137, 1, u'+  assert(ci->m_interfaces.size() == ci->m_interfacesVec.size());'), (167, 1, u'+      assert(!strcmp(name->data(), "86ctor"));'), (171, 1, u'+    assert(func);'), (172, 1, u'+    assert(declaredMethod(func));'), (178, 1, u'+    assert(func);'), (234, 1, u'+    assert(cell.m_type != KindOfUninit);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(71, 1, u'+  assert(index >= 0);'), (99, 1, u'+  assert(ci);'), (137, 1, u'+  assert(ci->m_interfaces.size() == ci->m_interfacesVec.size());'), (167, 1, u'+      assert(!strcmp(name->data(), "86ctor"));'), (171, 1, u'+    assert(func);'), (172, 1, u'+    assert(declaredMethod(func));'), (178, 1, u'+    assert(func);'), (234, 1, u'+    assert(cell.m_type != KindOfUninit);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 2, u'-  assert(ci);'), (91, 2, u'-  assert(ci->m_interfaces.size() == ci->m_interfacesVec.size());'), (121, 2, u'-      assert(!strcmp(name->data(), "86ctor"));'), (125, 2, u'-    assert(func);'), (126, 2, u'-    assert(declaredMethod(func));'), (132, 2, u'-    assert(func);'), (188, 2, u'-    assert(cell.m_type != KindOfUninit);'), (197, 2, u'-  assert(index >= 0);'), (219, 2, u'-  assert(!m_smart);'), (225, 2, u'-    assert(m_data);'), (232, 2, u'-  assert(!m_smart);'), (240, 2, u'-    assert(m_data);'), (255, 2, u'-  assert(getPropData() == nullptr);'), (261, 2, u'-  assert(numStaticProperties() > index);'), (325, 2, u'-  assert(m_sPropCacheInit.bound());'), (326, 2, u'-  assert(numStaticProperties() > index);'), (331, 2, u'-  assert(instanceCtor()); // Only call this on CPP classes')]
===========================================
===========================================
Total add: 1
Total del: 353
Header: Class::setFuncVec
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 2, u'-  assert(ci);'), (91, 2, u'-  assert(ci->m_interfaces.size() == ci->m_interfacesVec.size());'), (121, 2, u'-      assert(!strcmp(name->data(), "86ctor"));'), (125, 2, u'-    assert(func);'), (126, 2, u'-    assert(declaredMethod(func));'), (132, 2, u'-    assert(func);'), (188, 2, u'-    assert(cell.m_type != KindOfUninit);'), (197, 2, u'-  assert(index >= 0);'), (219, 2, u'-  assert(!m_smart);'), (225, 2, u'-    assert(m_data);'), (232, 2, u'-  assert(!m_smart);'), (240, 2, u'-    assert(m_data);'), (255, 2, u'-  assert(getPropData() == nullptr);'), (261, 2, u'-  assert(numStaticProperties() > index);'), (325, 2, u'-  assert(m_sPropCacheInit.bound());'), (326, 2, u'-  assert(numStaticProperties() > index);'), (331, 2, u'-  assert(instanceCtor()); // Only call this on CPP classes')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 2, u'-  assert(ci);'), (91, 2, u'-  assert(ci->m_interfaces.size() == ci->m_interfacesVec.size());'), (121, 2, u'-      assert(!strcmp(name->data(), "86ctor"));'), (125, 2, u'-    assert(func);'), (126, 2, u'-    assert(declaredMethod(func));'), (132, 2, u'-    assert(func);'), (188, 2, u'-    assert(cell.m_type != KindOfUninit);'), (197, 2, u'-  assert(index >= 0);'), (219, 2, u'-  assert(!m_smart);'), (225, 2, u'-    assert(m_data);'), (232, 2, u'-  assert(!m_smart);'), (240, 2, u'-    assert(m_data);'), (255, 2, u'-  assert(getPropData() == nullptr);'), (261, 2, u'-  assert(numStaticProperties() > index);'), (325, 2, u'-  assert(m_sPropCacheInit.bound());'), (326, 2, u'-  assert(numStaticProperties() > index);'), (331, 2, u'-  assert(instanceCtor()); // Only call this on CPP classes')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(caller);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: traceRefusal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(caller);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(caller);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(inst.funcd);'), (6, 1, u'+  assert(callee);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: isCalleeInlinable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(inst.funcd);'), (6, 1, u'+  assert(callee);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(inst.funcd);'), (6, 1, u'+  assert(callee);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(inst.funcd);'), (7, 1, u'+  assert(callee);')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: checkNumArgs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(inst.funcd);'), (7, 1, u'+  assert(callee);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(inst.funcd);'), (7, 1, u'+  assert(callee);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(97, 1, u'+  assert(inst.funcd);'), (131, 1, u'+  assert(inst.funcd);'), (246, 1, u'+  assert(f->isCPPBuiltin());'), (313, 1, u'+    case Op::AssertRATL:'), (314, 1, u'+    case Op::AssertRATStk:'), (332, 1, u'+  assert(callee);'), (333, 1, u'+  assert(sk.func() == callee);'), (423, 1, u'+      if (op == Op::AssertRATL || op == Op::AssertRATStk) continue;')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(94, 2, u'-  assert(inst.funcd);'), (128, 2, u'-  assert(inst.funcd);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 2, u'-  case Op::AssertRATL:'), (56, 2, u'-  case Op::AssertRATStk:'), (115, 2, u'-  assert(!iter.finished() && "shouldIRInline given empty region");'), (129, 2, u'-      assert(isRet(op) || op == Op::NativeImpl ||'), (163, 2, u'-        assert(inlineDepth == 0);'), (172, 2, u'-    if (op == Op::AssertRATL || op == Op::AssertRATStk) {')]
===========================================
===========================================
Total add: 0
Total del: 198
Header: IRTranslator::translateFCallBuiltin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 2, u'-  case Op::AssertRATL:'), (56, 2, u'-  case Op::AssertRATStk:'), (115, 2, u'-  assert(!iter.finished() && "shouldIRInline given empty region");'), (129, 2, u'-      assert(isRet(op) || op == Op::NativeImpl ||'), (163, 2, u'-        assert(inlineDepth == 0);'), (172, 2, u'-    if (op == Op::AssertRATL || op == Op::AssertRATStk) {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(55, 2, u'-  case Op::AssertRATL:'), (56, 2, u'-  case Op::AssertRATStk:'), (115, 2, u'-  assert(!iter.finished() && "shouldIRInline given empty region");'), (129, 2, u'-      assert(isRet(op) || op == Op::NativeImpl ||'), (163, 2, u'-        assert(inlineDepth == 0);'), (172, 2, u'-    if (op == Op::AssertRATL || op == Op::AssertRATStk) {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-    assert(!finished());'), (17, 2, u'-    assert(!finished());'), (18, 2, u'-    assert(m_sk.func() == (*m_blockIter)->func());')]
===========================================
===========================================
Total add: 4
Total del: 32
Header: typedef hphp_hash_set<SrcKey, SrcKey::Hasher> InterpSet;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-    assert(!finished());'), (17, 2, u'-    assert(!finished());'), (18, 2, u'-    assert(m_sk.func() == (*m_blockIter)->func());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-    assert(!finished());'), (17, 2, u'-    assert(!finished());'), (18, 2, u'-    assert(m_sk.func() == (*m_blockIter)->func());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(94, 1, u'+  assert(inst.funcd);'), (128, 1, u'+  assert(inst.funcd);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  assert(m_inst.source == m_sk);'), (7, 1, u'+  assert(m_inst.func() == curFunc());'), (8, 1, u'+  assert(m_sk.resumed() == resumed());')]
===========================================
===========================================
Total add: 4
Total del: 13
Header: RegionFormer::traceThroughJmp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  assert(m_inst.source == m_sk);'), (7, 1, u'+  assert(m_inst.func() == curFunc());'), (8, 1, u'+  assert(m_sk.resumed() == resumed());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  assert(m_inst.source == m_sk);'), (7, 1, u'+  assert(m_inst.func() == curFunc());'), (8, 1, u'+  assert(m_sk.resumed() == resumed());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(type.getClass()->attrs() & AttrFinal);'), (3, 1, u'+    assert(type.getClass()->attrs() & AttrNoOverride);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CodeGenerator::emitTypeTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(type.getClass()->attrs() & AttrFinal);'), (3, 1, u'+    assert(type.getClass()->attrs() & AttrNoOverride);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(type.getClass()->attrs() & AttrFinal);'), (3, 1, u'+    assert(type.getClass()->attrs() & AttrNoOverride);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(type.getClass()->attrs() & AttrFinal);'), (3, 1, u'+    assert(type.getClass()->attrs() & AttrNoOverride);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: CodeGenerator::emitSpecializedTypeTest
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(type.getClass()->attrs() & AttrFinal);'), (3, 1, u'+    assert(type.getClass()->attrs() & AttrNoOverride);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(type.getClass()->attrs() & AttrFinal);'), (3, 1, u'+    assert(type.getClass()->attrs() & AttrNoOverride);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-      assert(((int32_t*)a.frontier())[-1] + a.frontier() == (TCA)addr);'), (26, 1, u'+    assert(((int32_t*)a.frontier())[-1] + a.frontier() == (TCA)addr);')]
===========================================
===========================================
Total add: 9
Total del: 14
Header: emitLdClsCctx
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-      assert(((int32_t*)a.frontier())[-1] + a.frontier() == (TCA)addr);'), (26, 1, u'+    assert(((int32_t*)a.frontier())[-1] + a.frontier() == (TCA)addr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-      assert(((int32_t*)a.frontier())[-1] + a.frontier() == (TCA)addr);'), (26, 1, u'+    assert(((int32_t*)a.frontier())[-1] + a.frontier() == (TCA)addr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(fci->object_ptr == nullptr);')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: zend_call_function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(fci->object_ptr == nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(fci->object_ptr == nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      assert(!"zend_call_function not given an object");')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: zend_call_function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      assert(!"zend_call_function not given an object");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      assert(!"zend_call_function not given an object");')]
===========================================
Class: template <class Then, class Else> void CodeGenerator::ifThenElse(Asm& a, ConditionCode cc, Then thenBlock,                                Else elseBlock) {                                Else elseBlock) 
Class: template <class Then, class Else> void CodeGenerator::unlikelyIfThenElse(ConditionCode cc, Then unlikely,                                        Else elseBlock) {                                        Else elseBlock) 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(unit);'), (7, 1, u'+  always_assert_flog(unit, "No unit created for systemlib `{}\'", name);')]
===========================================
===========================================
Total add: 15
Total del: 3
Header: Extension::CompileSystemlib
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(unit);'), (7, 1, u'+  always_assert_flog(unit, "No unit created for systemlib `{}\'", name);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(unit);'), (7, 1, u'+  always_assert_flog(unit, "No unit created for systemlib `{}\'", name);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        always_assert(RuntimeOption::EvalJitLoops);'), (3, 1, u'+        always_assert(RuntimeOption::EvalJitLoops ||')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: Translator::translateRegion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        always_assert(RuntimeOption::EvalJitLoops);'), (3, 1, u'+        always_assert(RuntimeOption::EvalJitLoops ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        always_assert(RuntimeOption::EvalJitLoops);'), (3, 1, u'+        always_assert(RuntimeOption::EvalJitLoops ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_base && "genMisPtr called before emitBaseOp");')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: HhbcTranslator::MInstrTranslator::emit
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_base && "genMisPtr called before emitBaseOp");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_base && "genMisPtr called before emitBaseOp");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      always_assert(baseType < Type::Obj);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: HhbcTranslator::MInstrTranslator::constrainCollectionOpBase
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      always_assert(baseType < Type::Obj);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      always_assert(baseType < Type::Obj);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(simpleOpType != SimpleOp::PackedArray);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: HhbcTranslator::MInstrTranslator::emitSetElem
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(simpleOpType != SimpleOp::PackedArray);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(simpleOpType != SimpleOp::PackedArray);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    always_assert(false && "Bad SimpleOp in emitSetElem");')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: HhbcTranslator::MInstrTranslator::emitSetElem
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    always_assert(false && "Bad SimpleOp in emitSetElem");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+    always_assert(false && "Bad SimpleOp in emitSetElem");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-  always_assert(type <= Type::Cell);')]
===========================================
===========================================
Total add: 0
Total del: 23
Header: stkReturn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-  always_assert(type <= Type::Cell);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-  always_assert(type <= Type::Cell);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(typeParam.notBoxed());'), (23, 1, u'+  always_assert(type <= Type::Cell);')]
===========================================
===========================================
Total add: 25
Total del: 0
Header: arrElemReturn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(typeParam.notBoxed());'), (23, 1, u'+  always_assert(type <= Type::Cell);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(typeParam.notBoxed());'), (23, 1, u'+  always_assert(type <= Type::Cell);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(*it->second == val);'), (15, 1, u'+    assert(*it->second == val);')]
===========================================
===========================================
Total add: 21
Total del: 0
Header: MCGenerator::getNativeTrampoline
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(*it->second == val);'), (15, 1, u'+    assert(*it->second == val);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(*it->second == val);'), (15, 1, u'+    assert(*it->second == val);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(empty());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: CodeGenFixups::process
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(empty());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(empty());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+        assert(e->hasStrKey());'), (51, 1, u'+  assert(m_size);'), (60, 1, u'+  assert(arrayData()->hasMultipleRefs());'), (77, 1, u'+  assert(oldAd->hasMultipleRefs());'), (83, 1, u'+  assert(o_getClassName().size() == 6);'), (94, 1, u'+  assert(sz <= reserveSize);'), (102, 1, u'+  assert(o_getClassName().size() == 6);'), (112, 1, u'+  assert(sz <= reserveSize);'), (159, 1, u'+  assert(!HashCollection::isTombstone(&e));'), (169, 1, u'+  assert(!HashCollection::isTombstone(&e));'), (193, 1, u'+    assert(i <= mask && probeIndex == h0 + (i + i*i) / 2);'), (234, 1, u'+    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (262, 1, u'+    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (272, 1, u'+  assert(canMutateBuffer());'), (273, 1, u'+  assert(validPos(pos) && !isTombstone(pos));'), (274, 1, u'+  assert(m_size > 0);'), (283, 1, u'+  assert(isFull());'), (284, 1, u'+  assert(posLimit() == cap());'), (293, 1, u'+  assert(canMutateBuffer());'), (294, 1, u'+  assert(m_immCopy.isNull());'), (295, 1, u'+  assert(!isFull());'), (299, 1, u'+  assert(m_size <= posLimit() && posLimit() <= cap());'), (311, 1, u'+    assert(lgSize <= MaxLgTableSize && newCap > cap());'), (325, 1, u'+    assert(sz + int64_t(posLimit() - m_size) <= int64_t(cap()));'), (332, 1, u'+    assert(!isDensityTooLow());'), (333, 1, u'+    assert(sz + int64_t(posLimit() - m_size) > int64_t(cap()));'), (334, 1, u'+    assert(cap() < MaxSize && tableMask() != 0);'), (337, 1, u'+    assert(0 < sz && sz <= int64_t(newCap));'), (341, 1, u'+  assert(canMutateBuffer());'), (346, 1, u'+  assert(newCap >= m_size);'), (347, 1, u'+  assert(m_immCopy.isNull());'), (355, 1, u'+  assert(canMutateBuffer());'), (359, 1, u'+  assert(m_size <= posLimit() && posLimit() <= cap() && cap() <= newCap);'), (360, 1, u'+  assert(SmallSize <= newCap && newCap <= MaxSize);'), (361, 1, u'+  assert(m_size <= newCap);'), (362, 1, u'+  assert(newMask > 0 && ((newMask+1) & newMask) == 0);'), (363, 1, u'+  assert(newMask == folly::nextPowTwo<uint64_t>(newCap) - 1);'), (364, 1, u'+  assert(newCap == computeMaxElms(newMask));'), (378, 1, u'+  assert(canMutateBuffer());'), (379, 1, u'+  assert(m_immCopy.isNull());'), (383, 1, u'+  assert(isDensityTooLow());'), (394, 1, u'+  assert(canMutateBuffer());'), (395, 1, u'+  assert(m_immCopy.isNull());'), (396, 1, u'+  assert(!isDensityTooLow());'), (400, 1, u'+  assert(isCapacityTooHigh() && (oldCap == 0 || oldCap < cap()));'), (401, 1, u'+  assert(m_size <= posLimit() && posLimit() <= cap());'), (407, 1, u'+    assert(newCap == computeMaxElms(folly::nextPowTwo<uint64_t>(newCap) - 1));'), (420, 1, u'+  assert(SmallSize <= newCap && newCap <= MaxSize);'), (421, 1, u'+  assert(m_size <= newCap);'), (449, 1, u'+  assert(canMutateBuffer());'), (450, 1, u'+  assert(m_immCopy.isNull());'), (451, 1, u'+  assert(!isCapacityTooHigh());'), (455, 1, u'+  assert(ei && !validPos(*ei) && m_size <= posLimit() && posLimit() < cap());')]
===========================================
===========================================
Total add: 471
Total del: 1
Header: struct BaseMap::EmptyMixedInitializer {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+        assert(e->hasStrKey());'), (51, 1, u'+  assert(m_size);'), (60, 1, u'+  assert(arrayData()->hasMultipleRefs());'), (77, 1, u'+  assert(oldAd->hasMultipleRefs());'), (83, 1, u'+  assert(o_getClassName().size() == 6);'), (94, 1, u'+  assert(sz <= reserveSize);'), (102, 1, u'+  assert(o_getClassName().size() == 6);'), (112, 1, u'+  assert(sz <= reserveSize);'), (159, 1, u'+  assert(!HashCollection::isTombstone(&e));'), (169, 1, u'+  assert(!HashCollection::isTombstone(&e));'), (193, 1, u'+    assert(i <= mask && probeIndex == h0 + (i + i*i) / 2);'), (234, 1, u'+    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (262, 1, u'+    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (272, 1, u'+  assert(canMutateBuffer());'), (273, 1, u'+  assert(validPos(pos) && !isTombstone(pos));'), (274, 1, u'+  assert(m_size > 0);'), (283, 1, u'+  assert(isFull());'), (284, 1, u'+  assert(posLimit() == cap());'), (293, 1, u'+  assert(canMutateBuffer());'), (294, 1, u'+  assert(m_immCopy.isNull());'), (295, 1, u'+  assert(!isFull());'), (299, 1, u'+  assert(m_size <= posLimit() && posLimit() <= cap());'), (311, 1, u'+    assert(lgSize <= MaxLgTableSize && newCap > cap());'), (325, 1, u'+    assert(sz + int64_t(posLimit() - m_size) <= int64_t(cap()));'), (332, 1, u'+    assert(!isDensityTooLow());'), (333, 1, u'+    assert(sz + int64_t(posLimit() - m_size) > int64_t(cap()));'), (334, 1, u'+    assert(cap() < MaxSize && tableMask() != 0);'), (337, 1, u'+    assert(0 < sz && sz <= int64_t(newCap));'), (341, 1, u'+  assert(canMutateBuffer());'), (346, 1, u'+  assert(newCap >= m_size);'), (347, 1, u'+  assert(m_immCopy.isNull());'), (355, 1, u'+  assert(canMutateBuffer());'), (359, 1, u'+  assert(m_size <= posLimit() && posLimit() <= cap() && cap() <= newCap);'), (360, 1, u'+  assert(SmallSize <= newCap && newCap <= MaxSize);'), (361, 1, u'+  assert(m_size <= newCap);'), (362, 1, u'+  assert(newMask > 0 && ((newMask+1) & newMask) == 0);'), (363, 1, u'+  assert(newMask == folly::nextPowTwo<uint64_t>(newCap) - 1);'), (364, 1, u'+  assert(newCap == computeMaxElms(newMask));'), (378, 1, u'+  assert(canMutateBuffer());'), (379, 1, u'+  assert(m_immCopy.isNull());'), (383, 1, u'+  assert(isDensityTooLow());'), (394, 1, u'+  assert(canMutateBuffer());'), (395, 1, u'+  assert(m_immCopy.isNull());'), (396, 1, u'+  assert(!isDensityTooLow());'), (400, 1, u'+  assert(isCapacityTooHigh() && (oldCap == 0 || oldCap < cap()));'), (401, 1, u'+  assert(m_size <= posLimit() && posLimit() <= cap());'), (407, 1, u'+    assert(newCap == computeMaxElms(folly::nextPowTwo<uint64_t>(newCap) - 1));'), (420, 1, u'+  assert(SmallSize <= newCap && newCap <= MaxSize);'), (421, 1, u'+  assert(m_size <= newCap);'), (449, 1, u'+  assert(canMutateBuffer());'), (450, 1, u'+  assert(m_immCopy.isNull());'), (451, 1, u'+  assert(!isCapacityTooHigh());'), (455, 1, u'+  assert(ei && !validPos(*ei) && m_size <= posLimit() && posLimit() < cap());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+        assert(e->hasStrKey());'), (51, 1, u'+  assert(m_size);'), (60, 1, u'+  assert(arrayData()->hasMultipleRefs());'), (77, 1, u'+  assert(oldAd->hasMultipleRefs());'), (83, 1, u'+  assert(o_getClassName().size() == 6);'), (94, 1, u'+  assert(sz <= reserveSize);'), (102, 1, u'+  assert(o_getClassName().size() == 6);'), (112, 1, u'+  assert(sz <= reserveSize);'), (159, 1, u'+  assert(!HashCollection::isTombstone(&e));'), (169, 1, u'+  assert(!HashCollection::isTombstone(&e));'), (193, 1, u'+    assert(i <= mask && probeIndex == h0 + (i + i*i) / 2);'), (234, 1, u'+    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (262, 1, u'+    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (272, 1, u'+  assert(canMutateBuffer());'), (273, 1, u'+  assert(validPos(pos) && !isTombstone(pos));'), (274, 1, u'+  assert(m_size > 0);'), (283, 1, u'+  assert(isFull());'), (284, 1, u'+  assert(posLimit() == cap());'), (293, 1, u'+  assert(canMutateBuffer());'), (294, 1, u'+  assert(m_immCopy.isNull());'), (295, 1, u'+  assert(!isFull());'), (299, 1, u'+  assert(m_size <= posLimit() && posLimit() <= cap());'), (311, 1, u'+    assert(lgSize <= MaxLgTableSize && newCap > cap());'), (325, 1, u'+    assert(sz + int64_t(posLimit() - m_size) <= int64_t(cap()));'), (332, 1, u'+    assert(!isDensityTooLow());'), (333, 1, u'+    assert(sz + int64_t(posLimit() - m_size) > int64_t(cap()));'), (334, 1, u'+    assert(cap() < MaxSize && tableMask() != 0);'), (337, 1, u'+    assert(0 < sz && sz <= int64_t(newCap));'), (341, 1, u'+  assert(canMutateBuffer());'), (346, 1, u'+  assert(newCap >= m_size);'), (347, 1, u'+  assert(m_immCopy.isNull());'), (355, 1, u'+  assert(canMutateBuffer());'), (359, 1, u'+  assert(m_size <= posLimit() && posLimit() <= cap() && cap() <= newCap);'), (360, 1, u'+  assert(SmallSize <= newCap && newCap <= MaxSize);'), (361, 1, u'+  assert(m_size <= newCap);'), (362, 1, u'+  assert(newMask > 0 && ((newMask+1) & newMask) == 0);'), (363, 1, u'+  assert(newMask == folly::nextPowTwo<uint64_t>(newCap) - 1);'), (364, 1, u'+  assert(newCap == computeMaxElms(newMask));'), (378, 1, u'+  assert(canMutateBuffer());'), (379, 1, u'+  assert(m_immCopy.isNull());'), (383, 1, u'+  assert(isDensityTooLow());'), (394, 1, u'+  assert(canMutateBuffer());'), (395, 1, u'+  assert(m_immCopy.isNull());'), (396, 1, u'+  assert(!isDensityTooLow());'), (400, 1, u'+  assert(isCapacityTooHigh() && (oldCap == 0 || oldCap < cap()));'), (401, 1, u'+  assert(m_size <= posLimit() && posLimit() <= cap());'), (407, 1, u'+    assert(newCap == computeMaxElms(folly::nextPowTwo<uint64_t>(newCap) - 1));'), (420, 1, u'+  assert(SmallSize <= newCap && newCap <= MaxSize);'), (421, 1, u'+  assert(m_size <= newCap);'), (449, 1, u'+  assert(canMutateBuffer());'), (450, 1, u'+  assert(m_immCopy.isNull());'), (451, 1, u'+  assert(!isCapacityTooHigh());'), (455, 1, u'+  assert(ei && !validPos(*ei) && m_size <= posLimit() && posLimit() < cap());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 2, u'-  assert(m_size);')]
===========================================
===========================================
Total add: 0
Total del: 42
Header: c_Map::t___construct
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 2, u'-  assert(m_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(36, 2, u'-  assert(m_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(arrayData()->hasMultipleRefs());'), (20, 2, u'-  assert(oldAd->hasMultipleRefs());')]
===========================================
===========================================
Total add: 0
Total del: 22
Header: c_Map::Clone
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(arrayData()->hasMultipleRefs());'), (20, 2, u'-  assert(oldAd->hasMultipleRefs());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(arrayData()->hasMultipleRefs());'), (20, 2, u'-  assert(oldAd->hasMultipleRefs());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: BaseMap::php_keys
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: BaseMap::php_toKeysArray
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(e->hasStrKey());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: BaseMap::php_differenceByKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(e->hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        assert(e->hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: BaseMap::php_filter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e.hasStrKey());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: BaseMap::php_zip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e.hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e.hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: BaseMap::php_take
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: BaseMap::php_takeWhile
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: BaseMap::php_skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: BaseMap::php_skipWhile
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: BaseMap::php_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(e->hasStrKey());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: BaseMap::php_firstKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(e->hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(e->hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(m_data[pos].hasStrKey());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: BaseMap::php_lastKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(m_data[pos].hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+    assert(m_data[pos].hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  assert(sz <= reserveSize);'), (27, 2, u'-  assert(sz <= reserveSize);')]
===========================================
===========================================
Total add: 0
Total del: 39
Header: BaseMap::throwOOB
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  assert(sz <= reserveSize);'), (27, 2, u'-  assert(sz <= reserveSize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  assert(sz <= reserveSize);'), (27, 2, u'-  assert(sz <= reserveSize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      assert(e != elmLimit());'), (21, 2, u'-      assert(e->hasStrKey());'), (64, 2, u'-  assert(!BaseMap::isTombstone(&e));'), (74, 2, u'-  assert(!BaseMap::isTombstone(&e));'), (98, 2, u'-    assert(i <= mask && probeIndex == h0 + (i + i*i) / 2);'), (138, 2, u'-    assert(i <= mask && probe == h0 + (i + i*i) / 2);')]
===========================================
===========================================
Total add: 3
Total del: 137
Header: BaseMap::pop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      assert(e != elmLimit());'), (21, 2, u'-      assert(e->hasStrKey());'), (64, 2, u'-  assert(!BaseMap::isTombstone(&e));'), (74, 2, u'-  assert(!BaseMap::isTombstone(&e));'), (98, 2, u'-    assert(i <= mask && probeIndex == h0 + (i + i*i) / 2);'), (138, 2, u'-    assert(i <= mask && probe == h0 + (i + i*i) / 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      assert(e != elmLimit());'), (21, 2, u'-      assert(e->hasStrKey());'), (64, 2, u'-  assert(!BaseMap::isTombstone(&e));'), (74, 2, u'-  assert(!BaseMap::isTombstone(&e));'), (98, 2, u'-    assert(i <= mask && probeIndex == h0 + (i + i*i) / 2);'), (138, 2, u'-    assert(i <= mask && probe == h0 + (i + i*i) / 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+      assert(e != elmLimit());'), (32, 2, u'-    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (38, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Total add: 21
Total del: 23
Header: BaseMap::findForInsertImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+      assert(e != elmLimit());'), (32, 2, u'-    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (38, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+      assert(e != elmLimit());'), (32, 2, u'-    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (38, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(canMutateBuffer());'), (4, 2, u'-  assert(validPos(pos) && !isTombstone(pos));'), (5, 2, u'-  assert(m_size > 0);'), (14, 2, u'-  assert(isFull());'), (15, 2, u'-  assert(posLimit() == cap());'), (24, 2, u'-  assert(canMutateBuffer());'), (25, 2, u'-  assert(m_immCopy.isNull());'), (26, 2, u'-  assert(!isFull());'), (30, 2, u'-  assert(m_size <= posLimit() && posLimit() <= cap());'), (42, 2, u'-    assert(lgSize <= MaxLgTableSize && newCap > cap());'), (56, 2, u'-    assert(sz + int64_t(posLimit() - m_size) <= int64_t(cap()));'), (63, 2, u'-    assert(!isDensityTooLow());'), (64, 2, u'-    assert(sz + int64_t(posLimit() - m_size) > int64_t(cap()));'), (65, 2, u'-    assert(cap() < MaxSize && tableMask() != 0);'), (68, 2, u'-    assert(0 < sz && sz <= int64_t(newCap));'), (72, 2, u'-  assert(canMutateBuffer());'), (77, 2, u'-  assert(newCap >= m_size);'), (78, 2, u'-  assert(m_immCopy.isNull());'), (86, 2, u'-  assert(canMutateBuffer());'), (90, 2, u'-  assert(m_size <= posLimit() && posLimit() <= cap() && cap() <= newCap);'), (91, 2, u'-  assert(SmallSize <= newCap && newCap <= MaxSize);'), (92, 2, u'-  assert(m_size <= newCap);'), (93, 2, u'-  assert(newMask > 0 && ((newMask+1) & newMask) == 0);'), (94, 2, u'-  assert(newMask == folly::nextPowTwo<uint64_t>(newCap) - 1);'), (95, 2, u'-  assert(newCap == computeMaxElms(newMask));'), (109, 2, u'-  assert(canMutateBuffer());'), (110, 2, u'-  assert(m_immCopy.isNull());'), (114, 2, u'-  assert(isDensityTooLow());'), (125, 2, u'-  assert(canMutateBuffer());'), (126, 2, u'-  assert(m_immCopy.isNull());'), (127, 2, u'-  assert(!isDensityTooLow());'), (131, 2, u'-  assert(isCapacityTooHigh() && (oldCap == 0 || oldCap < cap()));'), (132, 2, u'-  assert(m_size <= posLimit() && posLimit() <= cap());'), (138, 2, u'-    assert(newCap == computeMaxElms(folly::nextPowTwo<uint64_t>(newCap) - 1));'), (151, 2, u'-  assert(SmallSize <= newCap && newCap <= MaxSize);'), (152, 2, u'-  assert(m_size <= newCap);'), (180, 2, u'-  assert(canMutateBuffer());'), (181, 2, u'-  assert(m_immCopy.isNull());'), (182, 2, u'-  assert(!isCapacityTooHigh());')]
===========================================
===========================================
Total add: 0
Total del: 183
Header: BaseMap::set
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(canMutateBuffer());'), (4, 2, u'-  assert(validPos(pos) && !isTombstone(pos));'), (5, 2, u'-  assert(m_size > 0);'), (14, 2, u'-  assert(isFull());'), (15, 2, u'-  assert(posLimit() == cap());'), (24, 2, u'-  assert(canMutateBuffer());'), (25, 2, u'-  assert(m_immCopy.isNull());'), (26, 2, u'-  assert(!isFull());'), (30, 2, u'-  assert(m_size <= posLimit() && posLimit() <= cap());'), (42, 2, u'-    assert(lgSize <= MaxLgTableSize && newCap > cap());'), (56, 2, u'-    assert(sz + int64_t(posLimit() - m_size) <= int64_t(cap()));'), (63, 2, u'-    assert(!isDensityTooLow());'), (64, 2, u'-    assert(sz + int64_t(posLimit() - m_size) > int64_t(cap()));'), (65, 2, u'-    assert(cap() < MaxSize && tableMask() != 0);'), (68, 2, u'-    assert(0 < sz && sz <= int64_t(newCap));'), (72, 2, u'-  assert(canMutateBuffer());'), (77, 2, u'-  assert(newCap >= m_size);'), (78, 2, u'-  assert(m_immCopy.isNull());'), (86, 2, u'-  assert(canMutateBuffer());'), (90, 2, u'-  assert(m_size <= posLimit() && posLimit() <= cap() && cap() <= newCap);'), (91, 2, u'-  assert(SmallSize <= newCap && newCap <= MaxSize);'), (92, 2, u'-  assert(m_size <= newCap);'), (93, 2, u'-  assert(newMask > 0 && ((newMask+1) & newMask) == 0);'), (94, 2, u'-  assert(newMask == folly::nextPowTwo<uint64_t>(newCap) - 1);'), (95, 2, u'-  assert(newCap == computeMaxElms(newMask));'), (109, 2, u'-  assert(canMutateBuffer());'), (110, 2, u'-  assert(m_immCopy.isNull());'), (114, 2, u'-  assert(isDensityTooLow());'), (125, 2, u'-  assert(canMutateBuffer());'), (126, 2, u'-  assert(m_immCopy.isNull());'), (127, 2, u'-  assert(!isDensityTooLow());'), (131, 2, u'-  assert(isCapacityTooHigh() && (oldCap == 0 || oldCap < cap()));'), (132, 2, u'-  assert(m_size <= posLimit() && posLimit() <= cap());'), (138, 2, u'-    assert(newCap == computeMaxElms(folly::nextPowTwo<uint64_t>(newCap) - 1));'), (151, 2, u'-  assert(SmallSize <= newCap && newCap <= MaxSize);'), (152, 2, u'-  assert(m_size <= newCap);'), (180, 2, u'-  assert(canMutateBuffer());'), (181, 2, u'-  assert(m_immCopy.isNull());'), (182, 2, u'-  assert(!isCapacityTooHigh());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(canMutateBuffer());'), (4, 2, u'-  assert(validPos(pos) && !isTombstone(pos));'), (5, 2, u'-  assert(m_size > 0);'), (14, 2, u'-  assert(isFull());'), (15, 2, u'-  assert(posLimit() == cap());'), (24, 2, u'-  assert(canMutateBuffer());'), (25, 2, u'-  assert(m_immCopy.isNull());'), (26, 2, u'-  assert(!isFull());'), (30, 2, u'-  assert(m_size <= posLimit() && posLimit() <= cap());'), (42, 2, u'-    assert(lgSize <= MaxLgTableSize && newCap > cap());'), (56, 2, u'-    assert(sz + int64_t(posLimit() - m_size) <= int64_t(cap()));'), (63, 2, u'-    assert(!isDensityTooLow());'), (64, 2, u'-    assert(sz + int64_t(posLimit() - m_size) > int64_t(cap()));'), (65, 2, u'-    assert(cap() < MaxSize && tableMask() != 0);'), (68, 2, u'-    assert(0 < sz && sz <= int64_t(newCap));'), (72, 2, u'-  assert(canMutateBuffer());'), (77, 2, u'-  assert(newCap >= m_size);'), (78, 2, u'-  assert(m_immCopy.isNull());'), (86, 2, u'-  assert(canMutateBuffer());'), (90, 2, u'-  assert(m_size <= posLimit() && posLimit() <= cap() && cap() <= newCap);'), (91, 2, u'-  assert(SmallSize <= newCap && newCap <= MaxSize);'), (92, 2, u'-  assert(m_size <= newCap);'), (93, 2, u'-  assert(newMask > 0 && ((newMask+1) & newMask) == 0);'), (94, 2, u'-  assert(newMask == folly::nextPowTwo<uint64_t>(newCap) - 1);'), (95, 2, u'-  assert(newCap == computeMaxElms(newMask));'), (109, 2, u'-  assert(canMutateBuffer());'), (110, 2, u'-  assert(m_immCopy.isNull());'), (114, 2, u'-  assert(isDensityTooLow());'), (125, 2, u'-  assert(canMutateBuffer());'), (126, 2, u'-  assert(m_immCopy.isNull());'), (127, 2, u'-  assert(!isDensityTooLow());'), (131, 2, u'-  assert(isCapacityTooHigh() && (oldCap == 0 || oldCap < cap()));'), (132, 2, u'-  assert(m_size <= posLimit() && posLimit() <= cap());'), (138, 2, u'-    assert(newCap == computeMaxElms(folly::nextPowTwo<uint64_t>(newCap) - 1));'), (151, 2, u'-  assert(SmallSize <= newCap && newCap <= MaxSize);'), (152, 2, u'-  assert(m_size <= newCap);'), (180, 2, u'-  assert(canMutateBuffer());'), (181, 2, u'-  assert(m_immCopy.isNull());'), (182, 2, u'-  assert(!isCapacityTooHigh());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(hasImmutableBuffer());'), (18, 2, u'-  assert(hashSize() > 0);'), (21, 2, u'-  assert(newData);'), (23, 2, u'-  assert(newHash);')]
===========================================
===========================================
Total add: 0
Total del: 35
Header: c_ImmMap::Clone
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(hasImmutableBuffer());'), (18, 2, u'-  assert(hashSize() > 0);'), (21, 2, u'-  assert(newData);'), (23, 2, u'-  assert(newHash);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(hasImmutableBuffer());'), (18, 2, u'-  assert(hashSize() > 0);'), (21, 2, u'-  assert(newData);'), (23, 2, u'-  assert(newHash);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(ei && !validPos(*ei) && m_size <= m_used && m_used < m_cap);')]
===========================================
===========================================
Total add: 0
Total del: 21
Header: BaseSet::add
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(ei && !validPos(*ei) && m_size <= m_used && m_used < m_cap);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(ei && !validPos(*ei) && m_size <= m_used && m_used < m_cap);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Total add: 5
Total del: 4
Header: BaseSet::pop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Total add: 5
Total del: 4
Header: BaseSet::popFront
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(isFull());'), (12, 2, u'-  assert(!isFull());'), (16, 2, u'-  assert(m_size <= m_used && m_used <= m_cap);'), (29, 2, u'-    assert(lgSize <= MaxLgTableSize && newCap > m_cap);'), (36, 2, u'-    assert(0 < sz && sz <= int64_t(m_cap));'), (37, 2, u'-    assert(m_cap < MaxSize && m_tableMask != 0);'), (46, 2, u'-  assert(m_size <= m_used && m_used <= m_cap);'), (47, 2, u'-  assert(newCap >= SmallSize && newMask >= SmallMask);'), (49, 2, u'-  assert(folly::isPowTwo(newHashSize) && computeMaxElms(newMask) == newCap);'), (50, 2, u'-  assert(m_size <= newCap && newCap <= MaxSize);'), (65, 2, u'-      assert(frPos + 1 < oldUsed);'), (84, 2, u'-  assert(!hasImmutableBuffer());'), (88, 2, u'-  assert(!hasImmutableBuffer());'), (89, 2, u'-  assert(isDensityTooLow());'), (91, 2, u'-  assert(elms);'), (98, 2, u'-      assert(frPos + 1 < m_used);')]
===========================================
===========================================
Total add: 0
Total del: 108
Header: BaseSet::throwNoIndexAccess
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(isFull());'), (12, 2, u'-  assert(!isFull());'), (16, 2, u'-  assert(m_size <= m_used && m_used <= m_cap);'), (29, 2, u'-    assert(lgSize <= MaxLgTableSize && newCap > m_cap);'), (36, 2, u'-    assert(0 < sz && sz <= int64_t(m_cap));'), (37, 2, u'-    assert(m_cap < MaxSize && m_tableMask != 0);'), (46, 2, u'-  assert(m_size <= m_used && m_used <= m_cap);'), (47, 2, u'-  assert(newCap >= SmallSize && newMask >= SmallMask);'), (49, 2, u'-  assert(folly::isPowTwo(newHashSize) && computeMaxElms(newMask) == newCap);'), (50, 2, u'-  assert(m_size <= newCap && newCap <= MaxSize);'), (65, 2, u'-      assert(frPos + 1 < oldUsed);'), (84, 2, u'-  assert(!hasImmutableBuffer());'), (88, 2, u'-  assert(!hasImmutableBuffer());'), (89, 2, u'-  assert(isDensityTooLow());'), (91, 2, u'-  assert(elms);'), (98, 2, u'-      assert(frPos + 1 < m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(isFull());'), (12, 2, u'-  assert(!isFull());'), (16, 2, u'-  assert(m_size <= m_used && m_used <= m_cap);'), (29, 2, u'-    assert(lgSize <= MaxLgTableSize && newCap > m_cap);'), (36, 2, u'-    assert(0 < sz && sz <= int64_t(m_cap));'), (37, 2, u'-    assert(m_cap < MaxSize && m_tableMask != 0);'), (46, 2, u'-  assert(m_size <= m_used && m_used <= m_cap);'), (47, 2, u'-  assert(newCap >= SmallSize && newMask >= SmallMask);'), (49, 2, u'-  assert(folly::isPowTwo(newHashSize) && computeMaxElms(newMask) == newCap);'), (50, 2, u'-  assert(m_size <= newCap && newCap <= MaxSize);'), (65, 2, u'-      assert(frPos + 1 < oldUsed);'), (84, 2, u'-  assert(!hasImmutableBuffer());'), (88, 2, u'-  assert(!hasImmutableBuffer());'), (89, 2, u'-  assert(isDensityTooLow());'), (91, 2, u'-  assert(elms);'), (98, 2, u'-      assert(frPos + 1 < m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(m_immCopy.isNull());'), (18, 1, u'+  assert(!m_immCopy.isNull());'), (19, 1, u'+  assert(m_data == static_cast<c_ImmSet*>(m_immCopy.get())->m_data);'), (20, 1, u'+  assert(arrayData()->hasMultipleRefs());')]
===========================================
===========================================
Total add: 7
Total del: 7
Header: BaseSet::ToBool
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(m_immCopy.isNull());'), (18, 1, u'+  assert(!m_immCopy.isNull());'), (19, 1, u'+  assert(m_data == static_cast<c_ImmSet*>(m_immCopy.get())->m_data);'), (20, 1, u'+  assert(arrayData()->hasMultipleRefs());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(m_immCopy.isNull());'), (18, 1, u'+  assert(!m_immCopy.isNull());'), (19, 1, u'+  assert(m_data == static_cast<c_ImmSet*>(m_immCopy.get())->m_data);'), (20, 1, u'+  assert(arrayData()->hasMultipleRefs());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());'), (7, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: BaseSet::Equals
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());'), (7, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());'), (7, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      assert(p);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: BaseSet::Unserialize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      assert(p);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      assert(p);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      assert(p);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: BaseSet::Unserialize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      assert(p);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      assert(p);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(target->m_size == 0);'), (6, 2, u'-  assert(thiz->m_used != 0);'), (7, 2, u'-  assert(thiz->hashSize() > 0);')]
===========================================
===========================================
Total add: 6
Total del: 24
Header: BaseSet::Clone
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(target->m_size == 0);'), (6, 2, u'-  assert(thiz->m_used != 0);'), (7, 2, u'-  assert(thiz->hashSize() > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(target->m_size == 0);'), (6, 2, u'-  assert(thiz->m_used != 0);'), (7, 2, u'-  assert(thiz->hashSize() > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (6, 1, u'+  assert(posLimit() != 0);'), (7, 1, u'+  assert(hashSize() > 0);'), (8, 1, u'+  assert(st->arrayData() == staticEmptyMixedArray());'), (11, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: BaseSet::php_map
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (6, 1, u'+  assert(posLimit() != 0);'), (7, 1, u'+  assert(hashSize() > 0);'), (8, 1, u'+  assert(st->arrayData() == staticEmptyMixedArray());'), (11, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (6, 1, u'+  assert(posLimit() != 0);'), (7, 1, u'+  assert(hashSize() > 0);'), (8, 1, u'+  assert(st->arrayData() == staticEmptyMixedArray());'), (11, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: BaseSet::php_filter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());'), (7, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: BaseSet::php_filter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());'), (7, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());'), (7, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());')]
===========================================
===========================================
Total add: 3
Total del: 8
Header: BaseSet::php_retain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-      assert(frPos + 1 < m_used);')]
===========================================
===========================================
Total add: 4
Total del: 6
Header: BaseSet::php_take
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-      assert(frPos + 1 < m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-      assert(frPos + 1 < m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: BaseSet::php_take
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: BaseSet::php_takeWhile
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());'), (7, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: BaseSet::php_takeWhile
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());'), (7, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());'), (7, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(frPos + 1 < m_used);'), (12, 1, u'+      assert(frPos + 1 < posLimit());')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: BaseSet::php_skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(frPos + 1 < m_used);'), (12, 1, u'+      assert(frPos + 1 < posLimit());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(frPos + 1 < m_used);'), (12, 1, u'+      assert(frPos + 1 < posLimit());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: BaseSet::php_skip
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: BaseSet::php_skipWhile
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e.hasStr());'), (7, 1, u'+      assert(e.hasStrKey());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: BaseSet::php_skipWhile
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e.hasStr());'), (7, 1, u'+      assert(e.hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e.hasStr());'), (7, 1, u'+      assert(e.hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(frPos + 1 < m_used);')]
===========================================
===========================================
Total add: 4
Total del: 6
Header: BaseSet::php_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(frPos + 1 < m_used);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(frPos + 1 < m_used);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: BaseSet::php_slice
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      assert(toE.hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: BaseSet::php_fromItems
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: BaseSet::php_fromArray
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: BaseSet::php_fromArrays
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!st->hasImmutableBuffer());'), (3, 1, u'+  assert(st->canMutateBuffer());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(m_immCopy.isNull());')]
===========================================
===========================================
Total add: 2
Total del: 22
Header: BaseSet::BaseSet
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(m_immCopy.isNull());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    assert(m_immCopy.isNull());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());'), (7, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: BaseSet::warnOnStrIntDup
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());'), (7, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      assert(e->hasStr());'), (7, 1, u'+      assert(e->hasStrKey());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-      assert(e->hasStr());'), (31, 2, u'-  assert(sz <= reserveSize);'), (46, 2, u'-  assert(sz <= reserveSize);'), (67, 2, u'-  assert(!BaseSet::isTombstone(&e));'), (78, 2, u'-  assert(!BaseSet::isTombstone(&e));'), (102, 2, u'-    assert(i <= tableMask && probeIndex == h0 + (i + i*i) / 2);'), (142, 2, u'-    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (167, 2, u'-    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (177, 2, u'-  assert(!hasImmutableBuffer());'), (178, 2, u'-  assert(validPos(*pos) && !isTombstone(*pos));'), (179, 2, u'-  assert(data());'), (193, 2, u'-  assert(m_used <= m_cap);'), (199, 2, u'-  assert(!hasImmutableBuffer());')]
===========================================
===========================================
Total add: 0
Total del: 204
Header: BaseSet::warnOnStrIntDup
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-      assert(e->hasStr());'), (31, 2, u'-  assert(sz <= reserveSize);'), (46, 2, u'-  assert(sz <= reserveSize);'), (67, 2, u'-  assert(!BaseSet::isTombstone(&e));'), (78, 2, u'-  assert(!BaseSet::isTombstone(&e));'), (102, 2, u'-    assert(i <= tableMask && probeIndex == h0 + (i + i*i) / 2);'), (142, 2, u'-    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (167, 2, u'-    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (177, 2, u'-  assert(!hasImmutableBuffer());'), (178, 2, u'-  assert(validPos(*pos) && !isTombstone(*pos));'), (179, 2, u'-  assert(data());'), (193, 2, u'-  assert(m_used <= m_cap);'), (199, 2, u'-  assert(!hasImmutableBuffer());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-      assert(e->hasStr());'), (31, 2, u'-  assert(sz <= reserveSize);'), (46, 2, u'-  assert(sz <= reserveSize);'), (67, 2, u'-  assert(!BaseSet::isTombstone(&e));'), (78, 2, u'-  assert(!BaseSet::isTombstone(&e));'), (102, 2, u'-    assert(i <= tableMask && probeIndex == h0 + (i + i*i) / 2);'), (142, 2, u'-    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (167, 2, u'-    assert(i <= mask && probe == h0 + (i + i*i) / 2);'), (177, 2, u'-  assert(!hasImmutableBuffer());'), (178, 2, u'-  assert(validPos(*pos) && !isTombstone(*pos));'), (179, 2, u'-  assert(data());'), (193, 2, u'-  assert(m_used <= m_cap);'), (199, 2, u'-  assert(!hasImmutableBuffer());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  assert(m_inProgressTailJumps.empty());')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: CodeGenFixups::process
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  assert(m_inProgressTailJumps.empty());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  assert(m_inProgressTailJumps.empty());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(srcRec.inProgressTailJumps().empty());')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: MCGenerator::translateWork
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(srcRec.inProgressTailJumps().empty());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(srcRec.inProgressTailJumps().empty());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-    assert(reg0 != rCgXMM1 && reg1 != rCgXMM0);')]
===========================================
===========================================
Total add: 16
Total del: 24
Header: CodeGenerator::emitCompare
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-    assert(reg0 != rCgXMM1 && reg1 != rCgXMM0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-    assert(reg0 != rCgXMM1 && reg1 != rCgXMM0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        assert(srcReg1 != rCgXMM1 && srcReg2 != rCgXMM0);')]
===========================================
===========================================
Total add: 1
Total del: 14
Header: CodeGenerator::cgCmpHelper
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        assert(srcReg1 != rCgXMM1 && srcReg2 != rCgXMM0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-        assert(srcReg1 != rCgXMM1 && srcReg2 != rCgXMM0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    always_assert(false);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: negateQueryOp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    always_assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    always_assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(isQueryOp(opc));'), (17, 1, u'+  default: always_assert(0);')]
===========================================
===========================================
Total add: 19
Total del: 0
Header: queryToIntQueryOp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(isQueryOp(opc));'), (17, 1, u'+  default: always_assert(0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(isQueryOp(opc));'), (17, 1, u'+  default: always_assert(0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isReturnHelper(tx->uniqueStubs.callToExit));'), (3, 1, u'+  assert(isReturnHelper(mcg->tx().uniqueStubs.callToExit));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ActRec::setReturn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isReturnHelper(tx->uniqueStubs.callToExit));'), (3, 1, u'+  assert(isReturnHelper(mcg->tx().uniqueStubs.callToExit));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(isReturnHelper(tx->uniqueStubs.callToExit));'), (3, 1, u'+  assert(isReturnHelper(mcg->tx().uniqueStubs.callToExit));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(IMPLIES(JIT::tx->mode() == TransKind::Profile, !ni.outputPredicted));'), (3, 1, u'+  assert(IMPLIES(mcg->tx().mode() == TransKind::Profile, !ni.outputPredicted));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: IRTranslator::translateInstr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(IMPLIES(JIT::tx->mode() == TransKind::Profile, !ni.outputPredicted));'), (3, 1, u'+  assert(IMPLIES(mcg->tx().mode() == TransKind::Profile, !ni.outputPredicted));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(IMPLIES(JIT::tx->mode() == TransKind::Profile, !ni.outputPredicted));'), (3, 1, u'+  assert(IMPLIES(mcg->tx().mode() == TransKind::Profile, !ni.outputPredicted));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(tx->mode() == TransKind::Profile);'), (3, 1, u'+  assert(mcg->tx().mode() == TransKind::Profile);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: IRUnit::collectPostConditions
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(tx->mode() == TransKind::Profile);'), (3, 1, u'+  assert(mcg->tx().mode() == TransKind::Profile);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(tx->mode() == TransKind::Profile);'), (3, 1, u'+  assert(mcg->tx().mode() == TransKind::Profile);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+      assert(dumpMode == DumpMode::keyAndMeta);')]
===========================================
===========================================
Total add: 11
Total del: 14
Header: ConcurrentTableSharedStore::dump
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+      assert(dumpMode == DumpMode::keyAndMeta);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+      assert(dumpMode == DumpMode::keyAndMeta);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(dest <= destBlock.frontier());')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: struct BackEnd : public JIT::BackEnd {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(dest <= destBlock.frontier());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      assert(dest <= destBlock.frontier());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_destSize == size_t(-1) || dest - m_dest >= m_destSize);'), (5, 1, u'+    assert(m_destSize == size_t(-1));'), (9, 1, u'+    assert(dest - m_dest + range >= m_destSize);')]
===========================================
===========================================
Total add: 8
Total del: 2
Header: MCGenerator::setJmpTransID
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_destSize == size_t(-1) || dest - m_dest >= m_destSize);'), (5, 1, u'+    assert(m_destSize == size_t(-1));'), (9, 1, u'+    assert(dest - m_dest + range >= m_destSize);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(m_destSize == size_t(-1) || dest - m_dest >= m_destSize);'), (5, 1, u'+    assert(m_destSize == size_t(-1));'), (9, 1, u'+    assert(dest - m_dest + range >= m_destSize);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(112, 1, u'+        always_assert(cls != nullptr);')]
===========================================
===========================================
Total add: 111
Total del: 85
Header: Unit::initialMerge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(112, 1, u'+        always_assert(cls != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(112, 1, u'+        always_assert(cls != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_cls != nullptr);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: UserStreamWrapper::UserStreamWrapper
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_cls != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(m_cls != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(needsInitSProps());'), (3, 1, u'+  assert(needsInitSProps() || m_sPropCacheInit.isPersistent());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Class::getDeclPropIndex
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(needsInitSProps());'), (3, 1, u'+  assert(needsInitSProps() || m_sPropCacheInit.isPersistent());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(needsInitSProps());'), (3, 1, u'+  assert(needsInitSProps() || m_sPropCacheInit.isPersistent());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        always_assert(RuntimeOption::EvalJitLoops);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: Translator::translateRegion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        always_assert(RuntimeOption::EvalJitLoops);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+        always_assert(RuntimeOption::EvalJitLoops);')]
===========================================
Class:class XslExtension : public Extension { class XslExtension : public Extension 
Class:class XSLTProcessorData : public Sweepable { class XSLTProcessorData : public Sweepable 
Class: class XSLExtension : public Extension { class XSLExtension : public Extension 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  assert(checkRegisters(unit, regs)); // calls checkCfg internally.')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: genBlock
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  assert(checkRegisters(unit, regs)); // calls checkCfg internally.')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  assert(checkRegisters(unit, regs)); // calls checkCfg internally.')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(checkRegisters(unit, regs)); // calls checkCfg internally.'), (7, 1, u'+  always_assert(this == mcg);')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: MCGenerator::traceCodeGen
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(checkRegisters(unit, regs)); // calls checkCfg internally.'), (7, 1, u'+  always_assert(this == mcg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(checkRegisters(unit, regs)); // calls checkCfg internally.'), (7, 1, u'+  always_assert(this == mcg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  always_assert_log('), (3, 1, u'+  always_assert_flog(')]
===========================================
===========================================
Total add: 5
Total del: 6
Header: HhbcTranslator::beginInlining
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  always_assert_log('), (3, 1, u'+  always_assert_flog(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  always_assert_log('), (3, 1, u'+  always_assert_flog(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-  assert(IMPLIES(val, val->type().equals(t)));'), (28, 1, u'+      always_assert(false && "Bad location in typeFromLocation");')]
===========================================
===========================================
Total add: 6
Total del: 18
Header: HhbcTranslator::rttFromLocation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-  assert(IMPLIES(val, val->type().equals(t)));'), (28, 1, u'+      always_assert(false && "Bad location in typeFromLocation");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-  assert(IMPLIES(val, val->type().equals(t)));'), (28, 1, u'+      always_assert(false && "Bad location in typeFromLocation");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  always_assert_flog('), (20, 1, u'+  always_assert_flog(')]
===========================================
===========================================
Total add: 34
Total del: 3
Header: HhbcTranslator::MInstrTranslator::emitIntermediateOp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  always_assert_flog('), (20, 1, u'+  always_assert_flog(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  always_assert_flog('), (20, 1, u'+  always_assert_flog(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+    assert(argNum >= r.m_vals.size());')]
===========================================
===========================================
Total add: 27
Total del: 0
Header: TRACE_SET_MOD
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+    assert(argNum >= r.m_vals.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+    assert(argNum >= r.m_vals.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(102, 2, u'-  assert(m_kind == VALUE);'), (112, 2, u'-  assert(m_kind == VALUE);'), (122, 2, u'-  assert(m_kind != ITER);'), (132, 2, u'-  assert(m_kind != ITER);'), (133, 2, u'-  assert(valueType() == KindOfObject || valueType() == KindOfClass);'), (140, 2, u'-  assert(m_kind != ITER);'), (141, 2, u'-  assert(isString());'), (154, 2, u'-  assert(m_kind != ITER);'), (155, 2, u'-  assert(isArray());'), (163, 2, u'-  assert(m_kind != ITER);'), (164, 2, u'-  assert(isBoolean());'), (171, 2, u'-  assert(m_kind == VALUE);'), (172, 2, u'-  assert(isInt());'), (180, 2, u'-  assert(m_kind == VALUE);'), (187, 2, u'-  assert(hasKnownClass());'), (200, 2, u'-  assert(hasArrayKind());'), (206, 2, u'-  assert(m_kind == VALUE);'), (209, 2, u'-    assert(rtt.valueType() == newInner);'), (213, 2, u'-  assert(rtt.valueType() == newInner);'), (219, 2, u'-  assert(isObject() || (isRef() && innerType() == KindOfObject));'), (229, 2, u'-  assert(isArray() || (isRef() && innerType() == KindOfArray));'), (243, 2, u'-  assert(m_kind == VALUE);'), (249, 2, u'-  assert(m_kind == VALUE);'), (269, 2, u'-  assert(m_kind == VALUE);'), (274, 2, u'-  assert(IMPLIES(m_kind == VALUE, outerType() != KindOfNone));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(!isPtr());'), (9, 2, u'-    always_assert(false);')]
===========================================
===========================================
Total add: 0
Total del: 38
Header: Type::toDataType
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(!isPtr());'), (9, 2, u'-    always_assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(!isPtr());'), (9, 2, u'-    always_assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u"+        assert(yyleng <= 2 || std::tolower(yytext[1]) != 'x');")]
===========================================
===========================================
Total add: 13
Total del: 8
Header: YY_RULE_SETUP
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u"+        assert(yyleng <= 2 || std::tolower(yytext[1]) != 'x');")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u"+        assert(yyleng <= 2 || std::tolower(yytext[1]) != 'x');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(yyleng > 2);'), (6, 1, u"+        assert(yytext[0] == '0' && std::tolower(yytext[1]) == 'b');")]
===========================================
===========================================
Total add: 9
Total del: 2
Header: case 154:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(yyleng > 2);'), (6, 1, u"+        assert(yytext[0] == '0' && std::tolower(yytext[1]) == 'b');")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        assert(yyleng > 2);'), (6, 1, u"+        assert(yytext[0] == '0' && std::tolower(yytext[1]) == 'b');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(reg != InvalidReg);'), (14, 1, u'+  assert(reg != InvalidReg);'), (23, 1, u'+  assert(reg != InvalidReg && reg.isGP());')]
===========================================
===========================================
Total add: 49
Total del: 2
Header: emitCheckSurpriseFlagsEnter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(reg != InvalidReg);'), (14, 1, u'+  assert(reg != InvalidReg);'), (23, 1, u'+  assert(reg != InvalidReg && reg.isGP());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(reg != InvalidReg);'), (14, 1, u'+  assert(reg != InvalidReg);'), (23, 1, u'+  assert(reg != InvalidReg && reg.isGP());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  always_assert(false);'), (12, 1, u'+  always_assert(int(value.r.index) != -1);')]
===========================================
===========================================
Total add: 4
Total del: 10
Header: CodeGenerator::cgLoad
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  always_assert(false);'), (12, 1, u'+  always_assert(int(value.r.index) != -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  always_assert(false);'), (12, 1, u'+  always_assert(int(value.r.index) != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      assert(base != m_rScratch);')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: CodeGenerator::resolveRegCollision
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      assert(base != m_rScratch);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      assert(base != m_rScratch);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(memRef.r.base != m_rScratch);')]
===========================================
===========================================
Total add: 0
Total del: 13
Header: CodeGenerator::resolveRegCollision
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(memRef.r.base != m_rScratch);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(memRef.r.base != m_rScratch);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(!paramsOverride || !unpack);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: EmitterVisitor::emitFuncCall
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(!paramsOverride || !unpack);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(!paramsOverride || !unpack);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(exp->m_argUnpack == this->m_argUnpack);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ExpressionList::clone
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(exp->m_argUnpack == this->m_argUnpack);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(exp->m_argUnpack == this->m_argUnpack);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(f);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ALWAYS_INLINE
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(f);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(f);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(ar != nullptr && ar->hasInvName());'), (5, 1, u'+  assert(!cellIsNull(&args));'), (6, 1, u'+  assert(nregular >= 0);'), (7, 1, u'+  assert((stack.top() + nregular) == (void*) ar);'), (8, 1, u'+  assert(isContainer(args));'), (10, 1, u'+  assert(f &&'), (17, 1, u'+  assert(!ar->hasVarEnv() && !ar->hasInvName());'), (37, 1, u'+    assert(stack.top() == (void*) ar);'), (47, 1, u'+      assert(stack.top() == (void*) ar);'), (58, 1, u'+      assert(stack.top() == (void*) ar);')]
===========================================
===========================================
Total add: 73
Total del: 0
Header: cleanupParamsAndActRec
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(ar != nullptr && ar->hasInvName());'), (5, 1, u'+  assert(!cellIsNull(&args));'), (6, 1, u'+  assert(nregular >= 0);'), (7, 1, u'+  assert((stack.top() + nregular) == (void*) ar);'), (8, 1, u'+  assert(isContainer(args));'), (10, 1, u'+  assert(f &&'), (17, 1, u'+  assert(!ar->hasVarEnv() && !ar->hasInvName());'), (37, 1, u'+    assert(stack.top() == (void*) ar);'), (47, 1, u'+      assert(stack.top() == (void*) ar);'), (58, 1, u'+      assert(stack.top() == (void*) ar);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(ar != nullptr && ar->hasInvName());'), (5, 1, u'+  assert(!cellIsNull(&args));'), (6, 1, u'+  assert(nregular >= 0);'), (7, 1, u'+  assert((stack.top() + nregular) == (void*) ar);'), (8, 1, u'+  assert(isContainer(args));'), (10, 1, u'+  assert(f &&'), (17, 1, u'+  assert(!ar->hasVarEnv() && !ar->hasInvName());'), (37, 1, u'+    assert(stack.top() == (void*) ar);'), (47, 1, u'+      assert(stack.top() == (void*) ar);'), (58, 1, u'+      assert(stack.top() == (void*) ar);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(stack.top() == (void*) ar);'), (3, 1, u'+  assert(nregular >= 0);'), (4, 1, u'+  assert((stack.top() + nregular) == (void*) ar);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: prepareArrayArgs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(stack.top() == (void*) ar);'), (3, 1, u'+  assert(nregular >= 0);'), (4, 1, u'+  assert((stack.top() + nregular) == (void*) ar);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(stack.top() == (void*) ar);'), (3, 1, u'+  assert(nregular >= 0);'), (4, 1, u'+  assert((stack.top() + nregular) == (void*) ar);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(!(ar->hasInvName())'), (9, 2, u'-  assert(!ar->hasVarEnv() || (nargs == 0));'), (11, 1, u'+  assert(!ar->hasVarEnv() || (0 == nargs));')]
===========================================
===========================================
Total add: 3
Total del: 18
Header: prepareArrayArgs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(!(ar->hasInvName())'), (9, 2, u'-  assert(!ar->hasVarEnv() || (nargs == 0));'), (11, 1, u'+  assert(!ar->hasVarEnv() || (0 == nargs));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(!(ar->hasInvName())'), (9, 2, u'-  assert(!ar->hasVarEnv() || (nargs == 0));'), (11, 1, u'+  assert(!ar->hasVarEnv() || (0 == nargs));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(91, 1, u'+  assert(nextra_regular > 0 || !!iter);')]
===========================================
===========================================
Total add: 51
Total del: 39
Header: prepareArrayArgs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(91, 1, u'+  assert(nextra_regular > 0 || !!iter);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(91, 1, u'+  assert(nextra_regular > 0 || !!iter);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(ar->numArgs() == 1);'), (7, 1, u'+  assert(numStackValues >= 1);'), (9, 1, u'+  assert(ar->numArgs() == numStackValues);')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: ExecutionContext::iopFCallBuiltin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(ar->numArgs() == 1);'), (7, 1, u'+  assert(numStackValues >= 1);'), (9, 1, u'+  assert(ar->numArgs() == numStackValues);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(ar->numArgs() == 1);'), (7, 1, u'+  assert(numStackValues >= 1);'), (9, 1, u'+  assert(ar->numArgs() == numStackValues);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  assert(numArgs == ar->numArgs());')]
===========================================
===========================================
Total add: 11
Total del: 1
Header: ExecutionContext::iopFCallArray
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  assert(numArgs == ar->numArgs());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  assert(numArgs == ar->numArgs());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(is(KindOfObject));'), (5, 2, u'-  assert(obj);')]
===========================================
===========================================
Total add: 0
Total del: 10
Header: Variant::toKey
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(is(KindOfObject));'), (5, 2, u'-  assert(obj);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(is(KindOfObject));'), (5, 2, u'-  assert(obj);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    throw Assertion();')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: HHVM_FUNCTION
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    throw Assertion();')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    throw Assertion();')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  assert(canMutateBuffer());')]
===========================================
===========================================
Total add: 24
Total del: 0
Header: c_Vector::t_addall
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  assert(canMutateBuffer());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  assert(canMutateBuffer());')]
===========================================
Class:   class Frame { class Frame 
Class:class Profiler { class Profiler 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 2, u'-    assert(m_stack);')]
===========================================
===========================================
Total add: 1
Total del: 43
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 2, u'-    assert(m_stack);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 2, u'-    assert(m_stack);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    assert(method != nullptr);')]
===========================================
===========================================
Total add: 16
Total del: 5
Header: objOffsetIsset
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    assert(method != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+    assert(method != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(!fe->isStrong());')]
===========================================
===========================================
Total add: 104
Total del: 0
Header: EmitterVisitor::emitForeach
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(!fe->isStrong());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(!fe->isStrong());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(fpRoot == snapshotRoot);')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: FrameState::compatible
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(fpRoot == snapshotRoot);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(fpRoot == snapshotRoot);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(state.fpValue == m_fpValue);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: FrameState::load
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(state.fpValue == m_fpValue);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(state.fpValue == m_fpValue);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  return is(GuardLoc, CheckLoc, AssertLoc, SideExitGuardLoc);')]
===========================================
===========================================
Total add: 31
Total del: 0
Header: IRInstruction::isPassthrough
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  return is(GuardLoc, CheckLoc, AssertLoc, SideExitGuardLoc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  return is(GuardLoc, CheckLoc, AssertLoc, SideExitGuardLoc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    assert(RuntimeOption::EvalJitLoops);')]
===========================================
===========================================
Total add: 0
Total del: 8
Header: IRBuilder::blockIsIncompatible
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    assert(RuntimeOption::EvalJitLoops);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    assert(RuntimeOption::EvalJitLoops);')]
===========================================
Class: class xmlErrorVec : public std::vector<xmlError> { class xmlErrorVec : public std::vector<xmlError> 
Class:class xmlErrorVec : public std::vector<xmlError> { class xmlErrorVec : public std::vector<xmlError> 
Class: class LibXMLExtension : public Extension { class LibXMLExtension : public Extension 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(309, 2, u'-  assert(context->path.isNull());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(309, 1, u'+  assert(context->path.isNull());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(112, 2, u'-  always_assert(getRef() == 0);'), (113, 2, u'-  if (do_assert) {'), (116, 2, u'-    assert(it == end(s_md5Files) || it->second != this);'), (139, 2, u'-  assert(ret >= 1); // fetch_sub returns the old value'), (195, 2, u'-      assert(fileInfo.m_md5 == f->getMd5());'), (207, 2, u'-  always_assert(unit != nullptr &&'), (300, 2, u"-  assert(isNew || old); // We don't leave null entries around."), (311, 2, u'-      if (do_assert) {'), (313, 2, u'-        assert(s_md5Files.find(ret->getMd5())->second == ret);'), (333, 2, u'-  assert(ret != nullptr);'), (350, 2, u'-    assert(ret->getRef() != 0);')]
===========================================
===========================================
Total add: 3
Total del: 363
Header: findFileWrapper
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(112, 2, u'-  always_assert(getRef() == 0);'), (113, 2, u'-  if (do_assert) {'), (116, 2, u'-    assert(it == end(s_md5Files) || it->second != this);'), (139, 2, u'-  assert(ret >= 1); // fetch_sub returns the old value'), (195, 2, u'-      assert(fileInfo.m_md5 == f->getMd5());'), (207, 2, u'-  always_assert(unit != nullptr &&'), (300, 2, u"-  assert(isNew || old); // We don't leave null entries around."), (311, 2, u'-      if (do_assert) {'), (313, 2, u'-        assert(s_md5Files.find(ret->getMd5())->second == ret);'), (333, 2, u'-  assert(ret != nullptr);'), (350, 2, u'-    assert(ret->getRef() != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(112, 2, u'-  always_assert(getRef() == 0);'), (113, 2, u'-  if (do_assert) {'), (116, 2, u'-    assert(it == end(s_md5Files) || it->second != this);'), (139, 2, u'-  assert(ret >= 1); // fetch_sub returns the old value'), (195, 2, u'-      assert(fileInfo.m_md5 == f->getMd5());'), (207, 2, u'-  always_assert(unit != nullptr &&'), (300, 2, u"-  assert(isNew || old); // We don't leave null entries around."), (311, 2, u'-      if (do_assert) {'), (313, 2, u'-        assert(s_md5Files.find(ret->getMd5())->second == ret);'), (333, 2, u'-  assert(ret != nullptr);'), (350, 2, u'-    assert(ret->getRef() != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(93, 1, u'+  assert(context->path.isNull());')]
===========================================
===========================================
Total add: 141
Total del: 0
Header: namespace {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(93, 1, u'+  assert(context->path.isNull());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(93, 1, u'+  assert(context->path.isNull());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 2, u'-  assert(context->path.isNull());')]
===========================================
===========================================
Total add: 1
Total del: 100
Header: readActualFile
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 2, u'-  assert(context->path.isNull());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 2, u'-  assert(context->path.isNull());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  always_assert(getRef() == 0);'), (16, 1, u'+  if (do_assert) {'), (19, 1, u'+    assert(it == end(s_md5Files) || it->second != this);'), (46, 1, u'+  assert(ret >= 1); // fetch_sub returns the old value')]
===========================================
===========================================
Total add: 68
Total del: 0
Header: hphp_hash_map<std::string,PhpFile*,string_hash> s_md5Files;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  always_assert(getRef() == 0);'), (16, 1, u'+  if (do_assert) {'), (19, 1, u'+    assert(it == end(s_md5Files) || it->second != this);'), (46, 1, u'+  assert(ret >= 1); // fetch_sub returns the old value')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  always_assert(getRef() == 0);'), (16, 1, u'+  if (do_assert) {'), (19, 1, u'+    assert(it == end(s_md5Files) || it->second != this);'), (46, 1, u'+  assert(ret >= 1); // fetch_sub returns the old value')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-  always_assert(getRef() == 0);'), (20, 2, u'-  if (do_assert) {'), (23, 2, u'-    assert(it == end(s_md5Files) || it->second != this);'), (50, 2, u'-  assert(ret >= 1); // fetch_sub returns the old value')]
===========================================
===========================================
Total add: 1
Total del: 77
Header: findFileWrapper
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-  always_assert(getRef() == 0);'), (20, 2, u'-  if (do_assert) {'), (23, 2, u'-    assert(it == end(s_md5Files) || it->second != this);'), (50, 2, u'-  assert(ret >= 1); // fetch_sub returns the old value')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 2, u'-  always_assert(getRef() == 0);'), (20, 2, u'-  if (do_assert) {'), (23, 2, u'-    assert(it == end(s_md5Files) || it->second != this);'), (50, 2, u'-  assert(ret >= 1); // fetch_sub returns the old value')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 2, u'-    assert(flags & InclOpFlags::DocRoot);')]
===========================================
===========================================
Total add: 0
Total del: 50
Header: ExecutionContext::lookupPhpFile
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 2, u'-    assert(flags & InclOpFlags::DocRoot);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 2, u'-    assert(flags & InclOpFlags::DocRoot);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(srcReg0 != InvalidReg);'), (6, 2, u'-    assert(srcReg1 != InvalidReg);'), (8, 1, u'+    assert(srcReg0 != InvalidReg);'), (12, 1, u'+  assert(srcReg1 != InvalidReg);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: CodeGenerator::cgStoreTypedValue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(srcReg0 != InvalidReg);'), (6, 2, u'-    assert(srcReg1 != InvalidReg);'), (8, 1, u'+    assert(srcReg0 != InvalidReg);'), (12, 1, u'+  assert(srcReg1 != InvalidReg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(srcReg0 != InvalidReg);'), (6, 2, u'-    assert(srcReg1 != InvalidReg);'), (8, 1, u'+    assert(srcReg0 != InvalidReg);'), (12, 1, u'+  assert(srcReg1 != InvalidReg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(srcReg0 != InvalidReg);'), (8, 1, u'+    assert(srcReg1 != InvalidReg);')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: CodeGenerator::cgStoreTypedValue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(srcReg0 != InvalidReg);'), (8, 1, u'+    assert(srcReg1 != InvalidReg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(srcReg0 != InvalidReg);'), (8, 1, u'+    assert(srcReg1 != InvalidReg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  always_assert(id < m_locals.size());')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: FrameState::setLocalType
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  always_assert(id < m_locals.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  always_assert(id < m_locals.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    if (inst->is(AssertLoc, CheckLoc, LdLoc, LdLocAddr)) {'), (3, 1, u'+    if (inst->is(AssertLoc, CheckLoc, LdLoc, LdLocAddr, LdGbl)) {')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: IRBuilder::appendInstruction
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    if (inst->is(AssertLoc, CheckLoc, LdLoc, LdLocAddr)) {'), (3, 1, u'+    if (inst->is(AssertLoc, CheckLoc, LdLoc, LdLocAddr, LdGbl)) {')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    if (inst->is(AssertLoc, CheckLoc, LdLoc, LdLocAddr)) {'), (3, 1, u'+    if (inst->is(AssertLoc, CheckLoc, LdLoc, LdLocAddr, LdGbl)) {')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(type.isKnownUnboxedDataType());')]
===========================================
===========================================
Total add: 0
Total del: 4
Header: Simplifier::simplifyIsType
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(type.isKnownUnboxedDataType());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(type.isKnownUnboxedDataType());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(isKnownDataType());')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: Type::toDataType
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(isKnownDataType());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(isKnownDataType());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  always_assert_flog(false,')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: Type::toDataType
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  always_assert_flog(false,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  always_assert_flog(false,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    always_assert(false);')]
===========================================
===========================================
Total add: 10
Total del: 2
Header: Type::toRuntimeType
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    always_assert(false);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    always_assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    always_assert_log(fromLoad == other.fromLoad, showFailure);'), (4, 2, u'-      always_assert_log(other.fromLoad, showFailure);'), (6, 2, u'-      always_assert_log(fromLoad, showFailure);'), (9, 1, u'+    always_assert_log(')]
===========================================
===========================================
Total add: 8
Total del: 7
Header: struct Value {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    always_assert_log(fromLoad == other.fromLoad, showFailure);'), (4, 2, u'-      always_assert_log(other.fromLoad, showFailure);'), (6, 2, u'-      always_assert_log(fromLoad, showFailure);'), (9, 1, u'+    always_assert_log(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    always_assert_log(fromLoad == other.fromLoad, showFailure);'), (4, 2, u'-      always_assert_log(other.fromLoad, showFailure);'), (6, 2, u'-      always_assert_log(fromLoad, showFailure);'), (9, 1, u'+    always_assert_log(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    assert(dst != inst->numDsts());'), (10, 1, u'+      assert(pred.inst()->is(Jmp));')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: IRBuilder::constrainValue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    assert(dst != inst->numDsts());'), (10, 1, u'+      assert(pred.inst()->is(Jmp));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    assert(dst != inst->numDsts());'), (10, 1, u'+      assert(pred.inst()->is(Jmp));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    always_assert(fromLoad == other.fromLoad);'), (12, 1, u'+    always_assert_log(fromLoad == other.fromLoad, showFailure);'), (14, 2, u'-      always_assert(other.fromLoad);'), (15, 1, u'+      always_assert_log(other.fromLoad, showFailure);'), (17, 2, u'-      always_assert(fromLoad);'), (18, 1, u'+      always_assert_log(fromLoad, showFailure);')]
===========================================
===========================================
Total add: 11
Total del: 4
Header: struct Value {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    always_assert(fromLoad == other.fromLoad);'), (12, 1, u'+    always_assert_log(fromLoad == other.fromLoad, showFailure);'), (14, 2, u'-      always_assert(other.fromLoad);'), (15, 1, u'+      always_assert_log(other.fromLoad, showFailure);'), (17, 2, u'-      always_assert(fromLoad);'), (18, 1, u'+      always_assert_log(fromLoad, showFailure);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    always_assert(fromLoad == other.fromLoad);'), (12, 1, u'+    always_assert_log(fromLoad == other.fromLoad, showFailure);'), (14, 2, u'-      always_assert(other.fromLoad);'), (15, 1, u'+      always_assert_log(other.fromLoad, showFailure);'), (17, 2, u'-      always_assert(fromLoad);'), (18, 1, u'+      always_assert_log(fromLoad, showFailure);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(s != kInvalidSlot);')]
===========================================
===========================================
Total add: 0
Total del: 7
Header: Class::IsPropAccessible
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(s != kInvalidSlot);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  assert(s != kInvalidSlot);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      assert(prevPropInd != kInvalidSlot);')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: Class::importTraitStaticProp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      assert(prevPropInd != kInvalidSlot);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      assert(prevPropInd != kInvalidSlot);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    always_assert(sync != SyncOptions::kNoSyncPoint);'), (3, 2, u'-    always_assert_log('), (4, 1, u'+    always_assert_flog('), (9, 1, u'+    always_assert_flog(')]
===========================================
===========================================
Total add: 14
Total del: 11
Header: CodeGenerator::cgCallHelper
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    always_assert(sync != SyncOptions::kNoSyncPoint);'), (3, 2, u'-    always_assert_log('), (4, 1, u'+    always_assert_flog('), (9, 1, u'+    always_assert_flog(')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    always_assert(sync != SyncOptions::kNoSyncPoint);'), (3, 2, u'-    always_assert_log('), (4, 1, u'+    always_assert_flog('), (9, 1, u'+    always_assert_flog(')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    return gen(AssertType, inst->typeParam(), prevValue);'), (3, 1, u'+    gen(AssertType, inst->typeParam(), prevValue);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: IRBuilder::preOptimizeAssertLoc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    return gen(AssertType, inst->typeParam(), prevValue);'), (3, 1, u'+    gen(AssertType, inst->typeParam(), prevValue);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    return gen(AssertType, inst->typeParam(), prevValue);'), (3, 1, u'+    gen(AssertType, inst->typeParam(), prevValue);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(i.breaksTracelet ||')]
===========================================
===========================================
Total add: 3
Total del: 5
Header: IRTranslator::translateBranchOp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(i.breaksTracelet ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(i.breaksTracelet ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(i.nextOffset == takenOffset);'), (12, 1, u'+    always_assert(RuntimeOption::EvalJitPGORegionSelector == "wholecfg");')]
===========================================
===========================================
Total add: 6
Total del: 3
Header: IRTranslator::translateBranchOp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(i.nextOffset == takenOffset);'), (12, 1, u'+    always_assert(RuntimeOption::EvalJitPGORegionSelector == "wholecfg");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(i.nextOffset == takenOffset);'), (12, 1, u'+    always_assert(RuntimeOption::EvalJitPGORegionSelector == "wholecfg");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    assert(blockRegion->blocks.size() == 1);')]
===========================================
===========================================
Total add: 48
Total del: 13
Header: selectWholeCFG
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    assert(blockRegion->blocks.size() == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    assert(blockRegion->blocks.size() == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(fp->m_func->methInfo());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: unwindBuiltinFrame
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(fp->m_func->methInfo());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(fp->m_func->methInfo());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(use_jemalloc || usage >= 0);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: HHVM_FUNCTION
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(use_jemalloc || usage >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  assert(use_jemalloc || usage >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+  assert(getState() != State::Running);'), (60, 1, u'+void c_AsyncGenerator::t_next() {always_assert(false);}'), (61, 1, u'+void c_AsyncGenerator::t_send(const Variant& value) {always_assert(false);}'), (62, 1, u'+void c_AsyncGenerator::t_raise(const Object& exception) {always_assert(false);}'), (68, 1, u'+  assert(fp);'), (69, 1, u'+  assert(!fp->resumed());'), (70, 1, u'+  assert(fp->func()->isAsyncGenerator());'), (83, 1, u'+  assert(getState() == State::Running);'), (100, 1, u'+  assert(getState() == State::Running);'), (111, 1, u'+    m_waitHandle->ret(*tvAssertCell(&keyValueTupleTV));'), (122, 1, u'+  assert(getState() == State::Running);'), (139, 1, u'+  assert(getState() == State::Running);'), (153, 1, u'+  assert(getState() == State::Running);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 1, u'+  assert(!isRunning());'), (61, 1, u'+  assert(child);'), (62, 1, u'+  assert(child->instanceof(c_WaitableWaitHandle::classof()));'), (63, 1, u'+  assert(!child->isFinished());'), (90, 1, u'+  assert(getState() == STATE_SCHEDULED);'), (91, 1, u'+  assert(m_child->isFinished());'), (108, 1, u'+  assert(!child->isFinished());'), (178, 1, u'+    assert(m_child);'), (181, 1, u'+    assert(getState() == STATE_SCHEDULED || getState() == STATE_RUNNING);'), (190, 1, u'+      assert(m_child);'), (210, 1, u'+      assert(false);'), (215, 1, u'+  assert(AsioSession::Get()->getContext(ctx_idx));'), (224, 1, u'+  assert(getContextIdx() <= ctx_idx);'), (257, 1, u'+      assert(false);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(fp->func()->isNonAsyncGenerator());'), (13, 1, u'+    assert(fp->func()->isGenerator());'), (19, 2, u'-    assert(fp->func()->isAsyncFunction());'), (24, 1, u'+    assert(fp->func()->isAsync());')]
===========================================
===========================================
Total add: 11
Total del: 10
Header: Stack::resumableStackBase
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(fp->func()->isNonAsyncGenerator());'), (13, 1, u'+    assert(fp->func()->isGenerator());'), (19, 2, u'-    assert(fp->func()->isAsyncFunction());'), (24, 1, u'+    assert(fp->func()->isAsync());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    assert(fp->func()->isNonAsyncGenerator());'), (13, 1, u'+    assert(fp->func()->isGenerator());'), (19, 2, u'-    assert(fp->func()->isAsyncFunction());'), (24, 1, u'+    assert(fp->func()->isAsync());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(enterFnAr->func()->isAsyncFunction());'), (3, 1, u'+  assert(enterFnAr->func()->isAsync());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ExecutionContext::enterVMAtAsyncFunc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(enterFnAr->func()->isAsyncFunction());'), (3, 1, u'+  assert(enterFnAr->func()->isAsync());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(enterFnAr->func()->isAsyncFunction());'), (3, 1, u'+  assert(enterFnAr->func()->isAsync());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(fp->func()->isNonAsyncGenerator());'), (3, 1, u'+        assert(fp->func()->isGenerator());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ExecutionContext::getPrevVMState
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(fp->func()->isNonAsyncGenerator());'), (3, 1, u'+        assert(fp->func()->isGenerator());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        assert(fp->func()->isNonAsyncGenerator());'), (3, 1, u'+        assert(fp->func()->isGenerator());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(IS_NULL_TYPE(retval.m_type));'), (9, 1, u'+      assert(sfp);'), (13, 1, u'+      assert(!sfp);')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: ExecutionContext::ret
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(IS_NULL_TYPE(retval.m_type));'), (9, 1, u'+      assert(sfp);'), (13, 1, u'+      assert(!sfp);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    assert(IS_NULL_TYPE(retval.m_type));'), (9, 1, u'+      assert(sfp);'), (13, 1, u'+      assert(!sfp);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!vmfp()->resumed());'), (9, 1, u'+  assert(!fp->resumed());'), (10, 1, u'+  assert(func->isGenerator());')]
===========================================
===========================================
Total add: 12
Total del: 8
Header: ExecutionContext::iopCreateCont
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!vmfp()->resumed());'), (9, 1, u'+  assert(!fp->resumed());'), (10, 1, u'+  assert(func->isGenerator());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!vmfp()->resumed());'), (9, 1, u'+  assert(!fp->resumed());'), (10, 1, u'+  assert(func->isGenerator());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  assert(vmStack().topTV() == &vmfp()->m_r);'), (14, 1, u'+  assert(vmStack().topTV() == &fp->m_r);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: ExecutionContext::iopCreateCont
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  assert(vmStack().topTV() == &vmfp()->m_r);'), (14, 1, u'+  assert(vmStack().topTV() == &fp->m_r);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  assert(vmStack().topTV() == &vmfp()->m_r);'), (14, 1, u'+  assert(vmStack().topTV() == &fp->m_r);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(/*obj->instanceof(c_AsyncGenerator::classof()) ||*/'), (3, 1, u'+  assert(obj->instanceof(c_AsyncGenerator::classof()) ||')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: this_base_generator
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(/*obj->instanceof(c_AsyncGenerator::classof()) ||*/'), (3, 1, u'+  assert(obj->instanceof(c_AsyncGenerator::classof()) ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(/*obj->instanceof(c_AsyncGenerator::classof()) ||*/'), (3, 1, u'+  assert(obj->instanceof(c_AsyncGenerator::classof()) ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(cont->getState() == BaseGenerator::State::Running);'), (7, 1, u'+  assert(gen->getState() == BaseGenerator::State::Running);'), (14, 2, u'-  assert(contAR->func()->contains(cont->resumable()->resumeOffset()));'), (16, 1, u'+  assert(genAR->func()->contains(gen->resumable()->resumeOffset()));')]
===========================================
===========================================
Total add: 7
Total del: 7
Header: ExecutionContext::contEnterImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(cont->getState() == BaseGenerator::State::Running);'), (7, 1, u'+  assert(gen->getState() == BaseGenerator::State::Running);'), (14, 2, u'-  assert(contAR->func()->contains(cont->resumable()->resumeOffset()));'), (16, 1, u'+  assert(genAR->func()->contains(gen->resumable()->resumeOffset()));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(cont->getState() == BaseGenerator::State::Running);'), (7, 1, u'+  assert(gen->getState() == BaseGenerator::State::Running);'), (14, 2, u'-  assert(contAR->func()->contains(cont->resumable()->resumeOffset()));'), (16, 1, u'+  assert(genAR->func()->contains(gen->resumable()->resumeOffset()));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      assert(fp->sfp());'), (12, 1, u'+      assert(!fp->sfp());')]
===========================================
===========================================
Total add: 12
Total del: 2
Header: ExecutionContext::yield
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      assert(fp->sfp());'), (12, 1, u'+      assert(!fp->sfp());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      assert(fp->sfp());'), (12, 1, u'+      assert(!fp->sfp());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(vmfp()->func()->isAsync());'), (3, 1, u'+  assert(vmfp()->func()->isAsyncFunction());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ExecutionContext::asyncSuspendE
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(vmfp()->func()->isAsync());'), (3, 1, u'+  assert(vmfp()->func()->isAsyncFunction());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(vmfp()->func()->isAsync());'), (3, 1, u'+  assert(vmfp()->func()->isAsyncFunction());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(vmfp()->resumed());'), (3, 2, u'-  assert(vmfp()->func()->isAsync());'), (4, 2, u'-  assert(!vmfp()->sfp());'), (8, 1, u'+  assert(fp->resumed());'), (9, 1, u'+  assert(func->isAsync());')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: ExecutionContext::asyncSuspendE
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(vmfp()->resumed());'), (3, 2, u'-  assert(vmfp()->func()->isAsync());'), (4, 2, u'-  assert(!vmfp()->sfp());'), (8, 1, u'+  assert(fp->resumed());'), (9, 1, u'+  assert(func->isAsync());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(vmfp()->resumed());'), (3, 2, u'-  assert(vmfp()->func()->isAsync());'), (4, 2, u'-  assert(!vmfp()->sfp());'), (8, 1, u'+  assert(fp->resumed());'), (9, 1, u'+  assert(func->isAsync());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(!fp->sfp());'), (19, 1, u'+      assert(fp->sfp());'), (23, 1, u'+      assert(!fp->sfp());')]
===========================================
===========================================
Total add: 28
Total del: 8
Header: ExecutionContext::asyncSuspendR
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(!fp->sfp());'), (19, 1, u'+      assert(fp->sfp());'), (23, 1, u'+      assert(!fp->sfp());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+    assert(!fp->sfp());'), (19, 1, u'+      assert(fp->sfp());'), (23, 1, u'+      assert(!fp->sfp());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(curFunc()->isNonAsyncGenerator());'), (3, 1, u'+  assert(curFunc()->isGenerator());')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: HhbcTranslator::emitCreateCont
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(curFunc()->isNonAsyncGenerator());'), (3, 1, u'+  assert(curFunc()->isGenerator());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(curFunc()->isNonAsyncGenerator());'), (3, 1, u'+  assert(curFunc()->isGenerator());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(curClass()->classof(c_Generator::classof()));'), (3, 1, u'+  assert(curClass()->classof(c_AsyncGenerator::classof()) ||')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: HhbcTranslator::emitContEnter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(curClass()->classof(c_Generator::classof()));'), (3, 1, u'+  assert(curClass()->classof(c_AsyncGenerator::classof()) ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(curClass()->classof(c_Generator::classof()));'), (3, 1, u'+  assert(curClass()->classof(c_AsyncGenerator::classof()) ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(resumed());'), (4, 1, u'+  assert(curFunc()->isGenerator());')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: HhbcTranslator::emitYieldImpl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(resumed());'), (4, 1, u'+  assert(curFunc()->isGenerator());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert(resumed());'), (4, 1, u'+  assert(curFunc()->isGenerator());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(resumed());'), (3, 1, u'+  assert(curFunc()->isGenerator());')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: HhbcTranslator::emitYield
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(resumed());'), (3, 1, u'+  assert(curFunc()->isGenerator());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(resumed());'), (3, 1, u'+  assert(curFunc()->isGenerator());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(curClass()->classof(c_AsyncGenerator::classof()) ||')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: HhbcTranslator::emitContCheck
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(curClass()->classof(c_AsyncGenerator::classof()) ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  assert(curClass()->classof(c_AsyncGenerator::classof()) ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!m_curFunc->top());'), (3, 1, u'+    assert(!m_curFunc->top);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: EmitterVisitor::emitMethodPrologue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!m_curFunc->top());'), (3, 1, u'+    assert(!m_curFunc->top);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(!m_curFunc->top());'), (3, 1, u'+    assert(!m_curFunc->top);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-      assert(m_attrs & AttrBuiltin);'), (26, 1, u'+      assert(attrs & AttrBuiltin);')]
===========================================
===========================================
Total add: 16
Total del: 11
Header: FuncEmitter::~FuncEmitter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-      assert(m_attrs & AttrBuiltin);'), (26, 1, u'+      assert(attrs & AttrBuiltin);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-      assert(m_attrs & AttrBuiltin);'), (26, 1, u'+      assert(attrs & AttrBuiltin);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(!m_ehTabSorted'), (52, 2, u'-    always_assert(curBase <= eh.m_base);'), (57, 2, u'-    always_assert(eh.m_parentIndex == -1 || eh.m_parentIndex < i);'), (60, 2, u'-      always_assert(parent.m_base <= eh.m_base &&'), (62, 1, u'+  assert(!m_pce == !preClass);')]
===========================================
===========================================
Total add: 123
Total del: 31
Header: FuncEmitter::finish
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(!m_ehTabSorted'), (52, 2, u'-    always_assert(curBase <= eh.m_base);'), (57, 2, u'-    always_assert(eh.m_parentIndex == -1 || eh.m_parentIndex < i);'), (60, 2, u'-      always_assert(parent.m_base <= eh.m_base &&'), (62, 1, u'+  assert(!m_pce == !preClass);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(!m_ehTabSorted'), (52, 2, u'-    always_assert(curBase <= eh.m_base);'), (57, 2, u'-    always_assert(eh.m_parentIndex == -1 || eh.m_parentIndex < i);'), (60, 2, u'-      always_assert(parent.m_base <= eh.m_base &&'), (62, 1, u'+  assert(!m_pce == !preClass);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(this->hasVar(name));'), (8, 2, u'-  assert(name != nullptr);')]
===========================================
===========================================
Total add: 0
Total del: 10
Header: FuncEmitter::allocVarId
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(this->hasVar(name));'), (8, 2, u'-  assert(name != nullptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(this->hasVar(name));'), (8, 2, u'-  assert(name != nullptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(id == m_nextFreeIterator);'), (8, 2, u'-  assert(m_numIterators == 0);')]
===========================================
===========================================
Total add: 0
Total del: 10
Header: FuncEmitter::allocIterator
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(id == m_nextFreeIterator);'), (8, 2, u'-  assert(m_numIterators == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert(id == m_nextFreeIterator);'), (8, 2, u'-  assert(m_numIterators == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(m_activeUnnamedLocals > 0);'), (8, 2, u'-  assert(numLocals >= m_numLocals);'), (14, 1, u'+  assert(!m_ehTabSorted')]
===========================================
===========================================
Total add: 12
Total del: 9
Header: FuncEmitter::allocUnnamedLocal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(m_activeUnnamedLocals > 0);'), (8, 2, u'-  assert(numLocals >= m_numLocals);'), (14, 1, u'+  assert(!m_ehTabSorted')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  assert(m_activeUnnamedLocals > 0);'), (8, 2, u'-  assert(numLocals >= m_numLocals);'), (14, 1, u'+  assert(!m_ehTabSorted')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-        assert(m_ehtab[j].m_base <= m_ehtab[i].m_base);'), (15, 1, u'+        assert(ehtab[j].m_base <= ehtab[i].m_base);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: FuncEmitter::sortEHTab
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-        assert(m_ehtab[j].m_base <= m_ehtab[i].m_base);'), (15, 1, u'+        assert(ehtab[j].m_base <= ehtab[i].m_base);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-        assert(m_ehtab[j].m_base <= m_ehtab[i].m_base);'), (15, 1, u'+        assert(ehtab[j].m_base <= ehtab[i].m_base);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    always_assert(curBase <= eh.m_base);'), (17, 1, u'+    always_assert(eh.m_parentIndex == -1 || eh.m_parentIndex < i);'), (20, 1, u'+      always_assert(parent.m_base <= eh.m_base &&')]
===========================================
===========================================
Total add: 24
Total del: 2
Header: FuncEmitter::sortFPITab
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    always_assert(curBase <= eh.m_base);'), (17, 1, u'+    always_assert(eh.m_parentIndex == -1 || eh.m_parentIndex < i);'), (20, 1, u'+      always_assert(parent.m_base <= eh.m_base &&')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    always_assert(curBase <= eh.m_base);'), (17, 1, u'+    always_assert(eh.m_parentIndex == -1 || eh.m_parentIndex < i);'), (20, 1, u'+      always_assert(parent.m_base <= eh.m_base &&')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(it != m_userAttributes.end());'), (9, 1, u'+  assert(it != userAttributes.end());')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: static const StaticString
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(it != m_userAttributes.end());'), (9, 1, u'+  assert(it != userAttributes.end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  assert(it != m_userAttributes.end());'), (9, 1, u'+  assert(it != userAttributes.end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-  assert(!m_pce == !preClass);')]
===========================================
===========================================
Total add: 8
Total del: 108
Header: FuncEmitter::parseNativeAttributes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-  assert(!m_pce == !preClass);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-  assert(!m_pce == !preClass);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-        assert(fe->attrs() & AttrBuiltin);'), (7, 1, u'+        assert(fe->attrs & AttrBuiltin);'), (9, 2, u'-          assert(fe->attrs() & AttrPersistent);'), (10, 2, u'-          assert(fe->attrs() & AttrUnique);'), (11, 2, u'-          assert(fe->attrs() & AttrSkipFrame);'), (12, 1, u'+          assert(fe->attrs & AttrPersistent);'), (13, 1, u'+          assert(fe->attrs & AttrUnique);'), (14, 1, u'+          assert(fe->attrs & AttrSkipFrame);')]
===========================================
===========================================
Total add: 7
Total del: 7
Header: void FuncRepoProxy::GetFuncsStmt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-        assert(fe->attrs() & AttrBuiltin);'), (7, 1, u'+        assert(fe->attrs & AttrBuiltin);'), (9, 2, u'-          assert(fe->attrs() & AttrPersistent);'), (10, 2, u'-          assert(fe->attrs() & AttrUnique);'), (11, 2, u'-          assert(fe->attrs() & AttrSkipFrame);'), (12, 1, u'+          assert(fe->attrs & AttrPersistent);'), (13, 1, u'+          assert(fe->attrs & AttrUnique);'), (14, 1, u'+          assert(fe->attrs & AttrSkipFrame);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-        assert(fe->attrs() & AttrBuiltin);'), (7, 1, u'+        assert(fe->attrs & AttrBuiltin);'), (9, 2, u'-          assert(fe->attrs() & AttrPersistent);'), (10, 2, u'-          assert(fe->attrs() & AttrUnique);'), (11, 2, u'-          assert(fe->attrs() & AttrSkipFrame);'), (12, 1, u'+          assert(fe->attrs & AttrPersistent);'), (13, 1, u'+          assert(fe->attrs & AttrUnique);'), (14, 1, u'+          assert(fe->attrs & AttrSkipFrame);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_feTab[i].second->past() == m_feTab[i].first);'), (3, 1, u'+    assert(m_feTab[i].second->past == m_feTab[i].first);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: UnitEmitter::create
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_feTab[i].second->past() == m_feTab[i].first);'), (3, 1, u'+    assert(m_feTab[i].second->past == m_feTab[i].first);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert(m_feTab[i].second->past() == m_feTab[i].first);'), (3, 1, u'+    assert(m_feTab[i].second->past == m_feTab[i].first);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(server == m_pageServer.get());')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: HttpServer::takeoverShutdown
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(server == m_pageServer.get());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  assert(server == m_pageServer.get());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-        m_hhbcTrans.assertTypeStack(stackOffset, type);'), (33, 2, u'-void IRTranslator::assertType(const JIT::Location& l,'), (42, 2, u'-      m_hhbcTrans.assertTypeStack(stackOffset, Type(rtt));'), (46, 2, u'-      m_hhbcTrans.assertTypeLocal(l.offset, Type(rtt));'), (54, 2, u'-      HHIR_UNIMPLEMENTED(AssertType_Iter);'), (58, 2, u'-      HHIR_UNIMPLEMENTED(AssertType_Litstr);'), (62, 2, u'-      HHIR_UNIMPLEMENTED(AssertType_Litint);'), (66, 2, u'-      HHIR_UNIMPLEMENTED(AssertType_This);')]
===========================================
===========================================
Total add: 0
Total del: 69
Header: IRTranslator::IRTranslator
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-        m_hhbcTrans.assertTypeStack(stackOffset, type);'), (33, 2, u'-void IRTranslator::assertType(const JIT::Location& l,'), (42, 2, u'-      m_hhbcTrans.assertTypeStack(stackOffset, Type(rtt));'), (46, 2, u'-      m_hhbcTrans.assertTypeLocal(l.offset, Type(rtt));'), (54, 2, u'-      HHIR_UNIMPLEMENTED(AssertType_Iter);'), (58, 2, u'-      HHIR_UNIMPLEMENTED(AssertType_Litstr);'), (62, 2, u'-      HHIR_UNIMPLEMENTED(AssertType_Litint);'), (66, 2, u'-      HHIR_UNIMPLEMENTED(AssertType_This);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-        m_hhbcTrans.assertTypeStack(stackOffset, type);'), (33, 2, u'-void IRTranslator::assertType(const JIT::Location& l,'), (42, 2, u'-      m_hhbcTrans.assertTypeStack(stackOffset, Type(rtt));'), (46, 2, u'-      m_hhbcTrans.assertTypeLocal(l.offset, Type(rtt));'), (54, 2, u'-      HHIR_UNIMPLEMENTED(AssertType_Iter);'), (58, 2, u'-      HHIR_UNIMPLEMENTED(AssertType_Litstr);'), (62, 2, u'-      HHIR_UNIMPLEMENTED(AssertType_Litint);'), (66, 2, u'-      HHIR_UNIMPLEMENTED(AssertType_This);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    assert(!finished());'), (15, 2, u'-    assert(!finished());')]
===========================================
===========================================
Total add: 0
Total del: 27
Header: shouldIRInline
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    assert(!finished());'), (15, 2, u'-    assert(!finished());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-    assert(!finished());'), (15, 2, u'-    assert(!finished());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-      assert(shouldIRInline(m_hhbcTrans.curFunc(), i.funcd, *i.calleeTrace));')]
===========================================
===========================================
Total add: 0
Total del: 35
Header: IRTranslator::translateFCall
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-      assert(shouldIRInline(m_hhbcTrans.curFunc(), i.funcd, *i.calleeTrace));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-      assert(shouldIRInline(m_hhbcTrans.curFunc(), i.funcd, *i.calleeTrace));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-        m_hhbcTrans.assertTypeStack(0, Type::Uncounted);'), (32, 2, u'-    m_hhbcTrans.assertTypeStack(0, jitType);'), (45, 2, u'-      m_hhbcTrans.assertTypeStack(0, JIT::Type::Uncounted);')]
===========================================
===========================================
Total add: 0
Total del: 52
Header: IRTranslator::translateInstrWork
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-        m_hhbcTrans.assertTypeStack(0, Type::Uncounted);'), (32, 2, u'-    m_hhbcTrans.assertTypeStack(0, jitType);'), (45, 2, u'-      m_hhbcTrans.assertTypeStack(0, JIT::Type::Uncounted);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-        m_hhbcTrans.assertTypeStack(0, Type::Uncounted);'), (32, 2, u'-    m_hhbcTrans.assertTypeStack(0, jitType);'), (45, 2, u'-      m_hhbcTrans.assertTypeStack(0, JIT::Type::Uncounted);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    always_assert(useRegion ||')]
===========================================
===========================================
Total add: 1
Total del: 32
Header: MCGenerator::translate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    always_assert(useRegion ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    always_assert(useRegion ||')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    m_tx.irTrans()->assertType(dep.first, dep.second->rtt);')]
===========================================
===========================================
Total add: 0
Total del: 31
Header: MCGenerator::bindJmpccSecond
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    m_tx.irTrans()->assertType(dep.first, dep.second->rtt);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    m_tx.irTrans()->assertType(dep.first, dep.second->rtt);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-          assertCleanState();'), (28, 2, u'-          always_assert(bcControlFlow &&'), (41, 1, u'+        assertCleanState();'), (58, 1, u'+        always_assert(bcControlFlow &&')]
===========================================
===========================================
Total add: 41
Total del: 34
Header: MCGenerator::translateWork
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-          assertCleanState();'), (28, 2, u'-          always_assert(bcControlFlow &&'), (41, 1, u'+        assertCleanState();'), (58, 1, u'+        always_assert(bcControlFlow &&')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-          assertCleanState();'), (28, 2, u'-          always_assert(bcControlFlow &&'), (41, 1, u'+        assertCleanState();'), (58, 1, u'+        always_assert(bcControlFlow &&')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-        assertCleanState();')]
===========================================
===========================================
Total add: 7
Total del: 21
Header: MCGenerator::translateWork
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-        assertCleanState();')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-        assertCleanState();')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        always_assert(tlet);'), (6, 1, u'+      always_assert(region);')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: MCGenerator::translateWork
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        always_assert(tlet);'), (6, 1, u'+      always_assert(region);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-        always_assert(tlet);'), (6, 1, u'+      always_assert(region);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-  assert(srcRec.inProgressTailJumps().empty());'), (81, 2, u'-        assert(!(m_tx.mode() =='), (85, 2, u'-        always_assert(!ni->interp);'), (92, 2, u'-      assert(ni->source.offset() >= t.func()->base());'), (113, 2, u'-          always_assert_log('), (133, 2, u'-        always_assert_flog(tx().useAHot(), "data block = {}\\nmessage: {}\\n",'), (152, 2, u'-  } catch (const FailedAssertion& fa) {'), (165, 2, u'-      assert(tx().useAHot());'), (168, 2, u'-      always_assert_flog(0, "data block = {}\\nmessage: {}\\n",')]
===========================================
===========================================
Total add: 0
Total del: 174
Header: MCGenerator::translateWork
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-  assert(srcRec.inProgressTailJumps().empty());'), (81, 2, u'-        assert(!(m_tx.mode() =='), (85, 2, u'-        always_assert(!ni->interp);'), (92, 2, u'-      assert(ni->source.offset() >= t.func()->base());'), (113, 2, u'-          always_assert_log('), (133, 2, u'-        always_assert_flog(tx().useAHot(), "data block = {}\\nmessage: {}\\n",'), (152, 2, u'-  } catch (const FailedAssertion& fa) {'), (165, 2, u'-      assert(tx().useAHot());'), (168, 2, u'-      always_assert_flog(0, "data block = {}\\nmessage: {}\\n",')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-  assert(srcRec.inProgressTailJumps().empty());'), (81, 2, u'-        assert(!(m_tx.mode() =='), (85, 2, u'-        always_assert(!ni->interp);'), (92, 2, u'-      assert(ni->source.offset() >= t.func()->base());'), (113, 2, u'-          always_assert_log('), (133, 2, u'-        always_assert_flog(tx().useAHot(), "data block = {}\\nmessage: {}\\n",'), (152, 2, u'-  } catch (const FailedAssertion& fa) {'), (165, 2, u'-      assert(tx().useAHot());'), (168, 2, u'-      always_assert_flog(0, "data block = {}\\nmessage: {}\\n",')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!m_ni.outLocal);')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: HELPER_TABLE
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!m_ni.outLocal);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert(!m_ni.outLocal);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+  assert(isFPush(inst.op()));'), (104, 1, u'+  assert(r.m_topFunc);'), (107, 1, u'+    assert(r.m_entryArDelta != InvalidEntryArDelta);'), (117, 1, u'+  assert(!m_arStack.empty());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    assert(curBlock == nullptr || curBlock->length() > 0);'), (28, 2, u'-    assert(sk == ni->source);'), (29, 2, u'-    assert(ni->unit() == unit);'), (41, 2, u'-      assert(ni->op() == Op::FCall || ni->op() == Op::FCallD);'), (42, 2, u'-      assert(ni->funcd == ni->calleeTrace->func());'), (68, 2, u'-        assert(cSk == cni->source);'), (69, 2, u'-        assert(cni->op() == OpRetC ||'), (98, 2, u'-        assert(dest > sk.offset()); // We only trace for forward Jmps for now.')]
===========================================
===========================================
Total add: 0
Total del: 157
Header: RegionDesc::Block::checkMetadata
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    assert(curBlock == nullptr || curBlock->length() > 0);'), (28, 2, u'-    assert(sk == ni->source);'), (29, 2, u'-    assert(ni->unit() == unit);'), (41, 2, u'-      assert(ni->op() == Op::FCall || ni->op() == Op::FCallD);'), (42, 2, u'-      assert(ni->funcd == ni->calleeTrace->func());'), (68, 2, u'-        assert(cSk == cni->source);'), (69, 2, u'-        assert(cni->op() == OpRetC ||'), (98, 2, u'-        assert(dest > sk.offset()); // We only trace for forward Jmps for now.')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-    assert(curBlock == nullptr || curBlock->length() > 0);'), (28, 2, u'-    assert(sk == ni->source);'), (29, 2, u'-    assert(ni->unit() == unit);'), (41, 2, u'-      assert(ni->op() == Op::FCall || ni->op() == Op::FCallD);'), (42, 2, u'-      assert(ni->funcd == ni->calleeTrace->func());'), (68, 2, u'-        assert(cSk == cni->source);'), (69, 2, u'-        assert(cni->op() == OpRetC ||'), (98, 2, u'-        assert(dest > sk.offset()); // We only trace for forward Jmps for now.')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-    assert(first);'), (44, 2, u'-  assert(!first);')]
===========================================
===========================================
Total add: 0
Total del: 64
Header: Lease Translator::s_writeLease;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-    assert(first);'), (44, 2, u'-  assert(!first);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(37, 2, u'-    assert(first);'), (44, 2, u'-  assert(!first);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(locPhysicalOffset(l) >= 0);'), (39, 2, u'-  assert(IS_REAL_TYPE(outer->m_type));'), (45, 2, u'-  always_assert(analysisDepth() == 0);'), (52, 2, u'-  assert(IS_REAL_TYPE(outerType));'), (60, 2, u'-    assert(IS_REAL_TYPE(innerType));'), (62, 2, u'-    assert(innerType != KindOfRef);'), (103, 2, u'-    assert(!liveFrame()->hasThis() ||')]
===========================================
===========================================
Total add: 0
Total del: 110
Header: Translator* tx;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(locPhysicalOffset(l) >= 0);'), (39, 2, u'-  assert(IS_REAL_TYPE(outer->m_type));'), (45, 2, u'-  always_assert(analysisDepth() == 0);'), (52, 2, u'-  assert(IS_REAL_TYPE(outerType));'), (60, 2, u'-    assert(IS_REAL_TYPE(innerType));'), (62, 2, u'-    assert(innerType != KindOfRef);'), (103, 2, u'-    assert(!liveFrame()->hasThis() ||')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      assert(locPhysicalOffset(l) >= 0);'), (39, 2, u'-  assert(IS_REAL_TYPE(outer->m_type));'), (45, 2, u'-  always_assert(analysisDepth() == 0);'), (52, 2, u'-  assert(IS_REAL_TYPE(outerType));'), (60, 2, u'-    assert(IS_REAL_TYPE(innerType));'), (62, 2, u'-    assert(innerType != KindOfRef);'), (103, 2, u'-    assert(!liveFrame()->hasThis() ||')]
===========================================
Class:          Class *klass = Unit::lookupUniqueClass(sd);
