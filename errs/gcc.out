projects/top_C/gcc
Going to process projects/top_C/gcc/all_log.txt 
---------- gcc ------------

===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\tgcc_assert (!Is_Packed_Array_Type (gnat_entity));'), (5, 1, u'+\tgcc_assert (!Is_Packed_Array_Impl_Type (gnat_entity));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: gnat_to_gnu_entity
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\tgcc_assert (!Is_Packed_Array_Type (gnat_entity));'), (5, 1, u'+\tgcc_assert (!Is_Packed_Array_Impl_Type (gnat_entity));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\tgcc_assert (!Is_Packed_Array_Type (gnat_entity));'), (5, 1, u'+\tgcc_assert (!Is_Packed_Array_Impl_Type (gnat_entity));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (MEM_P (op));'), (3, 1, u'+  gcc_assert (flag_pic && MEM_P (op));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: cris_expand_pic_call_address
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (MEM_P (op));'), (3, 1, u'+  gcc_assert (flag_pic && MEM_P (op));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (MEM_P (op));'), (3, 1, u'+  gcc_assert (flag_pic && MEM_P (op));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t      gcc_assert (can_create_pseudo_p ());')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: cris_expand_pic_call_address
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t      gcc_assert (can_create_pseudo_p ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t      gcc_assert (can_create_pseudo_p ());')]
===========================================
Class:  template < class > struct initializer_list    template < class > struct initializer_list 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (node->definition);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: varpool_assemble_decl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (node->definition);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (node->definition);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_checking_assert (!defer_ok || !decl_function_context (d)')]
===========================================
===========================================
Total add: 0
Total del: 5
Header: instantiate_decl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_checking_assert (!defer_ok || !decl_function_context (d)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_checking_assert (!defer_ok || !decl_function_context (d)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 1, u'+      gcc_assert (stat_expr->expr_type == EXPR_VARIABLE);')]
===========================================
===========================================
Total add: 123
Total del: 9
Header: conv_intrinsic_atomic_op
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 1, u'+      gcc_assert (stat_expr->expr_type == EXPR_VARIABLE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(53, 1, u'+      gcc_assert (stat_expr->expr_type == EXPR_VARIABLE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (stat->expr_type == EXPR_VARIABLE);')]
===========================================
===========================================
Total add: 2
Total del: 11
Header: conv_intrinsic_atomic_op
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (stat->expr_type == EXPR_VARIABLE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (stat->expr_type == EXPR_VARIABLE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (code->ext.actual->next->next->next->next->expr->expr_type')]
===========================================
===========================================
Total add: 58
Total del: 0
Header: conv_intrinsic_atomic_cas
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (code->ext.actual->next->next->next->next->expr->expr_type')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (code->ext.actual->next->next->next->next->expr->expr_type')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (code->ext.actual->next->next->next->next->expr->expr_type')]
===========================================
===========================================
Total add: 2
Total del: 13
Header: conv_intrinsic_atomic_cas
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (code->ext.actual->next->next->next->next->expr->expr_type')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (code->ext.actual->next->next->next->next->expr->expr_type')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(80, 1, u'+      gcc_assert (stat->expr_type == EXPR_VARIABLE);')]
===========================================
===========================================
Total add: 79
Total del: 3
Header: conv_intrinsic_atomic_def
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(80, 1, u'+      gcc_assert (stat->expr_type == EXPR_VARIABLE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(80, 1, u'+      gcc_assert (stat->expr_type == EXPR_VARIABLE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+      gcc_assert (code->ext.actual->next->next->expr->expr_type')]
===========================================
===========================================
Total add: 104
Total del: 4
Header: conv_intrinsic_atomic_ref
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+      gcc_assert (code->ext.actual->next->next->expr->expr_type')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+      gcc_assert (code->ext.actual->next->next->expr->expr_type')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t      gcc_assert (!bitmap_bit_p (output, DECL_UID (node->decl)));'), (17, 1, u'+\t      gcc_assert (lto_get_out_decl_state () == decl_state);')]
===========================================
===========================================
Total add: 19
Total del: 0
Header: lto_output
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t      gcc_assert (!bitmap_bit_p (output, DECL_UID (node->decl)));'), (17, 1, u'+\t      gcc_assert (lto_get_out_decl_state () == decl_state);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t      gcc_assert (!bitmap_bit_p (output, DECL_UID (node->decl)));'), (17, 1, u'+\t      gcc_assert (lto_get_out_decl_state () == decl_state);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_checking_assert (TREE_READONLY (real_decl));'), (14, 2, u'-\t  gcc_checking_assert (!COMPLETE_TYPE_P (DECL_CONTEXT (real_decl)));')]
===========================================
===========================================
Total add: 10
Total del: 39
Header: ctor_for_folding
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_checking_assert (TREE_READONLY (real_decl));'), (14, 2, u'-\t  gcc_checking_assert (!COMPLETE_TYPE_P (DECL_CONTEXT (real_decl)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_checking_assert (TREE_READONLY (real_decl));'), (14, 2, u'-\t  gcc_checking_assert (!COMPLETE_TYPE_P (DECL_CONTEXT (real_decl)));')]
===========================================
Class:class pass_handle_trap_shadows : public rtl_opt_pass class pass_handle_trap_shadows : public rtl_opt_pass
Class:class pass_align_insns : public rtl_opt_pass class pass_align_insns : public rtl_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+static_assert( is_pointer(f), "function pointer is a pointer" );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      go_assert(saw_errors());')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: Array_index_expression::do_get_backend
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      go_assert(saw_errors());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      go_assert(saw_errors());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (divisor > 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: round_up_loc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (divisor > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (divisor > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert (sizeof (B) == sizeof (int (*)[n]));'), (3, 2, u'-    assert (sizeof (C) == sizeof (int *));'), (4, 1, u'+    assert (sizeof (B) == sizeof (int (*)[n])); /* { dg-warning "on array function parameter" } */'), (5, 1, u'+    assert (sizeof (C) == sizeof (int *)); /* { dg-warning "on array function parameter" } */')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: f
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert (sizeof (B) == sizeof (int (*)[n]));'), (3, 2, u'-    assert (sizeof (C) == sizeof (int *));'), (4, 1, u'+    assert (sizeof (B) == sizeof (int (*)[n])); /* { dg-warning "on array function parameter" } */'), (5, 1, u'+    assert (sizeof (C) == sizeof (int *)); /* { dg-warning "on array function parameter" } */')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    assert (sizeof (B) == sizeof (int (*)[n]));'), (3, 2, u'-    assert (sizeof (C) == sizeof (int *));'), (4, 1, u'+    assert (sizeof (B) == sizeof (int (*)[n])); /* { dg-warning "on array function parameter" } */'), (5, 1, u'+    assert (sizeof (C) == sizeof (int *)); /* { dg-warning "on array function parameter" } */')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  gcc_assert (DECL_P (base));')]
===========================================
===========================================
Total add: 93
Total del: 0
Header: vtable_pointer_value_to_binfo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  gcc_assert (DECL_P (base));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  gcc_assert (DECL_P (base));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-      gcc_assert (comp_type);')]
===========================================
===========================================
Total add: 0
Total del: 19
Header: detect_type_change
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-      gcc_assert (comp_type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-      gcc_assert (comp_type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (GFC_TYPE_ARRAY_AKIND (type) == GFC_ARRAY_ALLOCATABLE);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: gfc_conv_descriptor_token
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (GFC_TYPE_ARRAY_AKIND (type) == GFC_ARRAY_ALLOCATABLE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (GFC_TYPE_ARRAY_AKIND (type) == GFC_ARRAY_ALLOCATABLE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type) || GFC_ARRAY_TYPE_P (type));')]
===========================================
===========================================
Total add: 0
Total del: 10
Header: gfc_get_dtype
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type) || GFC_ARRAY_TYPE_P (type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type) || GFC_ARRAY_TYPE_P (type));')]
===========================================
Class:   class A { 
Class: class B : virtual A { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(88, 2, u'-\t      gcc_assert (! (eg->flags & EDGE_ABNORMAL));')]
===========================================
===========================================
Total add: 71
Total del: 65
Header: optimize_mode_switching
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(88, 2, u'-\t      gcc_assert (! (eg->flags & EDGE_ABNORMAL));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(88, 2, u'-\t      gcc_assert (! (eg->flags & EDGE_ABNORMAL));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_CODE (component_type) == RECORD_TYPE'), (4, 1, u'+  gcc_assert (contains_polymorphic_type_p (base_type)'), (8, 2, u'-  gcc_assert (BINFO_VTABLE (TYPE_BINFO (component_type)));')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: ipa_set_jf_known_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_CODE (component_type) == RECORD_TYPE'), (4, 1, u'+  gcc_assert (contains_polymorphic_type_p (base_type)'), (8, 2, u'-  gcc_assert (BINFO_VTABLE (TYPE_BINFO (component_type)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_CODE (component_type) == RECORD_TYPE'), (4, 1, u'+  gcc_assert (contains_polymorphic_type_p (base_type)'), (8, 2, u'-  gcc_assert (BINFO_VTABLE (TYPE_BINFO (component_type)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (!type_preserved'), (10, 1, u'+  gcc_assert (!type_preserved || contains_polymorphic_type_p (type));')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: ipa_set_ancestor_jf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (!type_preserved'), (10, 1, u'+  gcc_assert (!type_preserved || contains_polymorphic_type_p (type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (!type_preserved'), (10, 1, u'+  gcc_assert (!type_preserved || contains_polymorphic_type_p (type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (comp_type);')]
===========================================
===========================================
Total add: 14
Total del: 1
Header: detect_type_change
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (comp_type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (comp_type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (TYPE_MAIN_VARIANT (ct2) == ct2);'), (3, 1, u'+  gcc_checking_assert (main_odr_variant (t2) == t2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: odr_hasher::equal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (TYPE_MAIN_VARIANT (ct2) == ct2);'), (3, 1, u'+  gcc_checking_assert (main_odr_variant (t2) == t2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (TYPE_MAIN_VARIANT (ct2) == ct2);'), (3, 1, u'+  gcc_checking_assert (main_odr_variant (t2) == t2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  gcc_checking_assert (TYPE_MAIN_VARIANT (type) == type);')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: get_odr_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  gcc_checking_assert (TYPE_MAIN_VARIANT (type) == type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  gcc_checking_assert (TYPE_MAIN_VARIANT (type) == type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (BINFO_TYPE (TYPE_BINFO (val->type)) = type);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: get_odr_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (BINFO_TYPE (TYPE_BINFO (val->type)) = type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (BINFO_TYPE (TYPE_BINFO (val->type)) = type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+      gcc_assert (BINFO_TYPE (TYPE_BINFO (val->type)) = type);')]
===========================================
===========================================
Total add: 12
Total del: 0
Header: get_odr_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+      gcc_assert (BINFO_TYPE (TYPE_BINFO (val->type)) = type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+      gcc_assert (BINFO_TYPE (TYPE_BINFO (val->type)) = type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t    gcc_assert (TYPE_MAIN_VARIANT (base->type) == base->type);')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: get_odr_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t    gcc_assert (TYPE_MAIN_VARIANT (base->type) == base->type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t    gcc_assert (TYPE_MAIN_VARIANT (base->type) == base->type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (val->derived_types.length() == 0);')]
===========================================
===========================================
Total add: 10
Total del: 0
Header: get_odr_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (val->derived_types.length() == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (val->derived_types.length() == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_assert (node->refcount > 0 && node->index == NO_INDEX_ASSIGNED);'), (9, 1, u'+  gcc_assert (entry->refcount > 0 && entry->index == NO_INDEX_ASSIGNED);')]
===========================================
===========================================
Total add: 2
Total del: 5
Header: remove_addr_table_entry
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_assert (node->refcount > 0 && node->index == NO_INDEX_ASSIGNED);'), (9, 1, u'+  gcc_assert (entry->refcount > 0 && entry->index == NO_INDEX_ASSIGNED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_assert (node->refcount > 0 && node->index == NO_INDEX_ASSIGNED);'), (9, 1, u'+  gcc_assert (entry->refcount > 0 && entry->index == NO_INDEX_ASSIGNED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-      gcc_checking_assert (TYPE_MAIN_VARIANT (mv) == mv);'), (18, 2, u'-\t  gcc_checking_assert (TYPE_SIZE (expr) == TYPE_SIZE (mv));'), (19, 2, u'-\t  gcc_checking_assert (TYPE_SIZE_UNIT (expr) == TYPE_SIZE_UNIT (mv));'), (21, 2, u'-      gcc_checking_assert (TYPE_ATTRIBUTES (expr) == TYPE_ATTRIBUTES (mv));')]
===========================================
===========================================
Total add: 1
Total del: 25
Header: write_ts_type_common_tree_pointers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-      gcc_checking_assert (TYPE_MAIN_VARIANT (mv) == mv);'), (18, 2, u'-\t  gcc_checking_assert (TYPE_SIZE (expr) == TYPE_SIZE (mv));'), (19, 2, u'-\t  gcc_checking_assert (TYPE_SIZE_UNIT (expr) == TYPE_SIZE_UNIT (mv));'), (21, 2, u'-      gcc_checking_assert (TYPE_ATTRIBUTES (expr) == TYPE_ATTRIBUTES (mv));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-      gcc_checking_assert (TYPE_MAIN_VARIANT (mv) == mv);'), (18, 2, u'-\t  gcc_checking_assert (TYPE_SIZE (expr) == TYPE_SIZE (mv));'), (19, 2, u'-\t  gcc_checking_assert (TYPE_SIZE_UNIT (expr) == TYPE_SIZE_UNIT (mv));'), (21, 2, u'-      gcc_checking_assert (TYPE_ATTRIBUTES (expr) == TYPE_ATTRIBUTES (mv));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 2, u'-        gcc_checking_assert (TYPE_VALUES (expr) == TYPE_VALUES (mv));'), (44, 2, u'-        gcc_checking_assert (TYPE_DOMAIN (expr) == TYPE_DOMAIN (mv));'), (47, 2, u'-        gcc_checking_assert (TYPE_VFIELD (expr) == TYPE_VFIELD (mv));'), (53, 2, u'-        gcc_checking_assert (TYPE_MINVAL (expr) == TYPE_MINVAL (mv));'), (56, 2, u'-        gcc_checking_assert (TYPE_METHOD_BASETYPE (expr) == TYPE_METHOD_BASETYPE (mv));'), (58, 2, u'-        gcc_checking_assert (TYPE_METHODS (expr) == TYPE_METHODS (mv));'), (60, 2, u'-        gcc_checking_assert (TYPE_OFFSET_BASETYPE (expr) == TYPE_OFFSET_BASETYPE (mv));'), (62, 2, u'-        gcc_checking_assert (TYPE_ARRAY_MAX_SIZE (expr) == TYPE_ARRAY_MAX_SIZE (mv));'), (68, 2, u'-        gcc_checking_assert (TYPE_MAX_VALUE (expr) == TYPE_MAX_VALUE (mv));'), (71, 2, u'-        gcc_checking_assert (TYPE_BINFO (expr) == TYPE_BINFO (mv));')]
===========================================
===========================================
Total add: 15
Total del: 79
Header: write_ts_type_non_common_tree_pointers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 2, u'-        gcc_checking_assert (TYPE_VALUES (expr) == TYPE_VALUES (mv));'), (44, 2, u'-        gcc_checking_assert (TYPE_DOMAIN (expr) == TYPE_DOMAIN (mv));'), (47, 2, u'-        gcc_checking_assert (TYPE_VFIELD (expr) == TYPE_VFIELD (mv));'), (53, 2, u'-        gcc_checking_assert (TYPE_MINVAL (expr) == TYPE_MINVAL (mv));'), (56, 2, u'-        gcc_checking_assert (TYPE_METHOD_BASETYPE (expr) == TYPE_METHOD_BASETYPE (mv));'), (58, 2, u'-        gcc_checking_assert (TYPE_METHODS (expr) == TYPE_METHODS (mv));'), (60, 2, u'-        gcc_checking_assert (TYPE_OFFSET_BASETYPE (expr) == TYPE_OFFSET_BASETYPE (mv));'), (62, 2, u'-        gcc_checking_assert (TYPE_ARRAY_MAX_SIZE (expr) == TYPE_ARRAY_MAX_SIZE (mv));'), (68, 2, u'-        gcc_checking_assert (TYPE_MAX_VALUE (expr) == TYPE_MAX_VALUE (mv));'), (71, 2, u'-        gcc_checking_assert (TYPE_BINFO (expr) == TYPE_BINFO (mv));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 2, u'-        gcc_checking_assert (TYPE_VALUES (expr) == TYPE_VALUES (mv));'), (44, 2, u'-        gcc_checking_assert (TYPE_DOMAIN (expr) == TYPE_DOMAIN (mv));'), (47, 2, u'-        gcc_checking_assert (TYPE_VFIELD (expr) == TYPE_VFIELD (mv));'), (53, 2, u'-        gcc_checking_assert (TYPE_MINVAL (expr) == TYPE_MINVAL (mv));'), (56, 2, u'-        gcc_checking_assert (TYPE_METHOD_BASETYPE (expr) == TYPE_METHOD_BASETYPE (mv));'), (58, 2, u'-        gcc_checking_assert (TYPE_METHODS (expr) == TYPE_METHODS (mv));'), (60, 2, u'-        gcc_checking_assert (TYPE_OFFSET_BASETYPE (expr) == TYPE_OFFSET_BASETYPE (mv));'), (62, 2, u'-        gcc_checking_assert (TYPE_ARRAY_MAX_SIZE (expr) == TYPE_ARRAY_MAX_SIZE (mv));'), (68, 2, u'-        gcc_checking_assert (TYPE_MAX_VALUE (expr) == TYPE_MAX_VALUE (mv));'), (71, 2, u'-        gcc_checking_assert (TYPE_BINFO (expr) == TYPE_BINFO (mv));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (oval != v);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: add_stores
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (oval != v);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (oval != v);')]
===========================================
Class: class AutoCleanVariant : public Variant<XX*, int> { class AutoCleanVariant : public Variant<XX*, int> 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert ((TYPE_P (parm) || TREE_CODE (parm) == TEMPLATE_DECL)')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: unify_one_argument
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert ((TYPE_P (parm) || TREE_CODE (parm) == TEMPLATE_DECL)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert ((TYPE_P (parm) || TREE_CODE (parm) == TEMPLATE_DECL)')]
===========================================
Class:template <class T, class charT = char> class G : C<charT> { 
Class:template <class T, class charT> void G<T, charT>::xparse (int &p1, const B<A<charT> > &p2) const { 
Class:template <typename, int, int, int, int, int _MaxCols> class F template <typename, int, int, int, int, int _MaxCols> class F
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_checking_assert (!BYTES_BIG_ENDIAN);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: aarch64_expand_vec_perm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_checking_assert (!BYTES_BIG_ENDIAN);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_checking_assert (!BYTES_BIG_ENDIAN);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+      gcc_checking_assert (TYPE_MAIN_VARIANT (mv) == mv);'), (18, 1, u'+\t  gcc_checking_assert (TYPE_SIZE (expr) == TYPE_SIZE (mv));'), (19, 1, u'+\t  gcc_checking_assert (TYPE_SIZE_UNIT (expr) == TYPE_SIZE_UNIT (mv));'), (21, 1, u'+      gcc_checking_assert (TYPE_ATTRIBUTES (expr) == TYPE_ATTRIBUTES (mv));')]
===========================================
===========================================
Total add: 25
Total del: 1
Header: write_ts_type_common_tree_pointers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+      gcc_checking_assert (TYPE_MAIN_VARIANT (mv) == mv);'), (18, 1, u'+\t  gcc_checking_assert (TYPE_SIZE (expr) == TYPE_SIZE (mv));'), (19, 1, u'+\t  gcc_checking_assert (TYPE_SIZE_UNIT (expr) == TYPE_SIZE_UNIT (mv));'), (21, 1, u'+      gcc_checking_assert (TYPE_ATTRIBUTES (expr) == TYPE_ATTRIBUTES (mv));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+      gcc_checking_assert (TYPE_MAIN_VARIANT (mv) == mv);'), (18, 1, u'+\t  gcc_checking_assert (TYPE_SIZE (expr) == TYPE_SIZE (mv));'), (19, 1, u'+\t  gcc_checking_assert (TYPE_SIZE_UNIT (expr) == TYPE_SIZE_UNIT (mv));'), (21, 1, u'+      gcc_checking_assert (TYPE_ATTRIBUTES (expr) == TYPE_ATTRIBUTES (mv));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+        gcc_checking_assert (TYPE_VALUES (expr) == TYPE_VALUES (mv));'), (59, 1, u'+        gcc_checking_assert (TYPE_DOMAIN (expr) == TYPE_DOMAIN (mv));'), (62, 1, u'+        gcc_checking_assert (TYPE_VFIELD (expr) == TYPE_VFIELD (mv));'), (68, 1, u'+        gcc_checking_assert (TYPE_MINVAL (expr) == TYPE_MINVAL (mv));'), (71, 1, u'+        gcc_checking_assert (TYPE_METHOD_BASETYPE (expr) == TYPE_METHOD_BASETYPE (mv));'), (73, 1, u'+        gcc_checking_assert (TYPE_METHODS (expr) == TYPE_METHODS (mv));'), (75, 1, u'+        gcc_checking_assert (TYPE_OFFSET_BASETYPE (expr) == TYPE_OFFSET_BASETYPE (mv));'), (77, 1, u'+        gcc_checking_assert (TYPE_ARRAY_MAX_SIZE (expr) == TYPE_ARRAY_MAX_SIZE (mv));'), (83, 1, u'+        gcc_checking_assert (TYPE_MAX_VALUE (expr) == TYPE_MAX_VALUE (mv));'), (86, 1, u'+        gcc_checking_assert (TYPE_BINFO (expr) == TYPE_BINFO (mv));')]
===========================================
===========================================
Total add: 79
Total del: 15
Header: write_ts_type_non_common_tree_pointers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+        gcc_checking_assert (TYPE_VALUES (expr) == TYPE_VALUES (mv));'), (59, 1, u'+        gcc_checking_assert (TYPE_DOMAIN (expr) == TYPE_DOMAIN (mv));'), (62, 1, u'+        gcc_checking_assert (TYPE_VFIELD (expr) == TYPE_VFIELD (mv));'), (68, 1, u'+        gcc_checking_assert (TYPE_MINVAL (expr) == TYPE_MINVAL (mv));'), (71, 1, u'+        gcc_checking_assert (TYPE_METHOD_BASETYPE (expr) == TYPE_METHOD_BASETYPE (mv));'), (73, 1, u'+        gcc_checking_assert (TYPE_METHODS (expr) == TYPE_METHODS (mv));'), (75, 1, u'+        gcc_checking_assert (TYPE_OFFSET_BASETYPE (expr) == TYPE_OFFSET_BASETYPE (mv));'), (77, 1, u'+        gcc_checking_assert (TYPE_ARRAY_MAX_SIZE (expr) == TYPE_ARRAY_MAX_SIZE (mv));'), (83, 1, u'+        gcc_checking_assert (TYPE_MAX_VALUE (expr) == TYPE_MAX_VALUE (mv));'), (86, 1, u'+        gcc_checking_assert (TYPE_BINFO (expr) == TYPE_BINFO (mv));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+        gcc_checking_assert (TYPE_VALUES (expr) == TYPE_VALUES (mv));'), (59, 1, u'+        gcc_checking_assert (TYPE_DOMAIN (expr) == TYPE_DOMAIN (mv));'), (62, 1, u'+        gcc_checking_assert (TYPE_VFIELD (expr) == TYPE_VFIELD (mv));'), (68, 1, u'+        gcc_checking_assert (TYPE_MINVAL (expr) == TYPE_MINVAL (mv));'), (71, 1, u'+        gcc_checking_assert (TYPE_METHOD_BASETYPE (expr) == TYPE_METHOD_BASETYPE (mv));'), (73, 1, u'+        gcc_checking_assert (TYPE_METHODS (expr) == TYPE_METHODS (mv));'), (75, 1, u'+        gcc_checking_assert (TYPE_OFFSET_BASETYPE (expr) == TYPE_OFFSET_BASETYPE (mv));'), (77, 1, u'+        gcc_checking_assert (TYPE_ARRAY_MAX_SIZE (expr) == TYPE_ARRAY_MAX_SIZE (mv));'), (83, 1, u'+        gcc_checking_assert (TYPE_MAX_VALUE (expr) == TYPE_MAX_VALUE (mv));'), (86, 1, u'+        gcc_checking_assert (TYPE_BINFO (expr) == TYPE_BINFO (mv));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (TYPE_MAIN_VARIANT (ref) == ref);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: objc_xref_basetypes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (TYPE_MAIN_VARIANT (ref) == ref);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (TYPE_MAIN_VARIANT (ref) == ref);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t  gcc_checking_assert (TYPE_MIN_VALUE (type) == TYPE_MIN_VALUE (TYPE_MAIN_VARIANT (type)));'), (8, 1, u'+\t  gcc_checking_assert (TYPE_MAX_VALUE (type) == TYPE_MAX_VALUE (TYPE_MAIN_VARIANT (type)));')]
===========================================
===========================================
Total add: 17
Total del: 6
Header: remap_type_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t  gcc_checking_assert (TYPE_MIN_VALUE (type) == TYPE_MIN_VALUE (TYPE_MAIN_VARIANT (type)));'), (8, 1, u'+\t  gcc_checking_assert (TYPE_MAX_VALUE (type) == TYPE_MAX_VALUE (TYPE_MAIN_VARIANT (type)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t  gcc_checking_assert (TYPE_MIN_VALUE (type) == TYPE_MIN_VALUE (TYPE_MAIN_VARIANT (type)));'), (8, 1, u'+\t  gcc_checking_assert (TYPE_MAX_VALUE (type) == TYPE_MAX_VALUE (TYPE_MAIN_VARIANT (type)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t  gcc_checking_assert (TYPE_DOMAIN (type) == TYPE_DOMAIN (TYPE_MAIN_VARIANT (type)));')]
===========================================
===========================================
Total add: 11
Total del: 2
Header: remap_type_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t  gcc_checking_assert (TYPE_DOMAIN (type) == TYPE_DOMAIN (TYPE_MAIN_VARIANT (type)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t  gcc_checking_assert (TYPE_DOMAIN (type) == TYPE_DOMAIN (TYPE_MAIN_VARIANT (type)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_checking_assert (TYPE_SIZE (type) == TYPE_SIZE (TYPE_MAIN_VARIANT (type)));'), (8, 1, u'+      gcc_checking_assert (TYPE_SIZE_UNIT (type) == TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type)));')]
===========================================
===========================================
Total add: 14
Total del: 2
Header: remap_type_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_checking_assert (TYPE_SIZE (type) == TYPE_SIZE (TYPE_MAIN_VARIANT (type)));'), (8, 1, u'+      gcc_checking_assert (TYPE_SIZE_UNIT (type) == TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_checking_assert (TYPE_SIZE (type) == TYPE_SIZE (TYPE_MAIN_VARIANT (type)));'), (8, 1, u'+      gcc_checking_assert (TYPE_SIZE_UNIT (type) == TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (!type || TYPE_MAIN_VARIANT (type) == type);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: check_stmt_for_type_change
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (!type || TYPE_MAIN_VARIANT (type) == type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (!type || TYPE_MAIN_VARIANT (type) == type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (BINFO_TYPE (TYPE_BINFO (val->type)) = type);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: get_odr_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (BINFO_TYPE (TYPE_BINFO (val->type)) = type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (BINFO_TYPE (TYPE_BINFO (val->type)) = type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (!context.outer_type')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: possible_polymorphic_call_targets
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (!context.outer_type')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (!context.outer_type')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (!context.outer_type')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: possible_polymorphic_call_targets
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (!context.outer_type')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (!context.outer_type')]
===========================================
Class:template <class T, class U, class V> auto k(T t, U u, V v) -> decltype (t.U::template B<V>::MEM) {} 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TREE_CODE (section_name) == STRING_CST);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: frv_in_small_data_p
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TREE_CODE (section_name) == STRING_CST);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TREE_CODE (section_name) == STRING_CST);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-  gcc_checking_assert (!stmt || is_a <cgraph_node *> (referring_node));'), (18, 2, u'-  gcc_checking_assert (use_type != IPA_REF_ALIAS || !stmt);'), (62, 2, u'-      gcc_checking_assert (referred);')]
===========================================
===========================================
Total add: 4
Total del: 71
Header: along with GCC; see the file COPYING3.  If not see
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-  gcc_checking_assert (!stmt || is_a <cgraph_node *> (referring_node));'), (18, 2, u'-  gcc_checking_assert (use_type != IPA_REF_ALIAS || !stmt);'), (62, 2, u'-      gcc_checking_assert (referred);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-  gcc_checking_assert (!stmt || is_a <cgraph_node *> (referring_node));'), (18, 2, u'-  gcc_checking_assert (use_type != IPA_REF_ALIAS || !stmt);'), (62, 2, u'-      gcc_checking_assert (referred);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (list->referring[ref->referred_index] == ref);'), (3, 1, u'+  gcc_assert (list->referring[referred_index] == this);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: ipa_remove_reference
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (list->referring[ref->referred_index] == ref);'), (3, 1, u'+  gcc_assert (list->referring[referred_index] == this);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (list->referring[ref->referred_index] == ref);'), (3, 1, u'+  gcc_assert (list->referring[referred_index] == this);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (decl)));')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: gimplify_omp_for
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (decl)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (decl)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t      gcc_assert (c);'), (14, 1, u'+\t\t      gcc_assert (ct);')]
===========================================
===========================================
Total add: 6
Total del: 8
Header: lower_rec_input_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t      gcc_assert (c);'), (14, 1, u'+\t\t      gcc_assert (ct);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t      gcc_assert (c);'), (14, 1, u'+\t\t      gcc_assert (ct);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(149, 1, u'+  gcc_assert (abs_stmt_vinfo);'), (179, 1, u'+  gcc_assert (diff_stmt_vinfo);'), (230, 1, u'+  gcc_assert (!nested_in_vect_loop_p (loop, last_stmt));')]
===========================================
===========================================
Total add: 234
Total del: 0
Header: vect_recog_dot_prod_pattern
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(149, 1, u'+  gcc_assert (abs_stmt_vinfo);'), (179, 1, u'+  gcc_assert (diff_stmt_vinfo);'), (230, 1, u'+  gcc_assert (!nested_in_vect_loop_p (loop, last_stmt));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(149, 1, u'+  gcc_assert (abs_stmt_vinfo);'), (179, 1, u'+  gcc_assert (diff_stmt_vinfo);'), (230, 1, u'+  gcc_assert (!nested_in_vect_loop_p (loop, last_stmt));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-          gcc_assert (single_user_map.contains (var));'), (5, 1, u'+          gcc_assert (single_user_map.get (var));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ipa_single_use
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-          gcc_assert (single_user_map.contains (var));'), (5, 1, u'+          gcc_assert (single_user_map.get (var));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-          gcc_assert (single_user_map.contains (var));'), (5, 1, u'+          gcc_assert (single_user_map.get (var));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (!*dslot);'), (9, 1, u'+      gcc_assert (!dslot->to);')]
===========================================
===========================================
Total add: 5
Total del: 7
Header: separate_decls_in_region_name
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (!*dslot);'), (9, 1, u'+      gcc_assert (!dslot->to);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (!*dslot);'), (9, 1, u'+      gcc_assert (!dslot->to);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (name_space->attribute_hash.is_created ());'), (3, 1, u'+  gcc_assert (name_space->attribute_hash);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: register_scoped_attribute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (name_space->attribute_hash.is_created ());'), (3, 1, u'+  gcc_assert (name_space->attribute_hash);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (name_space->attribute_hash.is_created ());'), (3, 1, u'+  gcc_assert (name_space->attribute_hash);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (ip->newivs && ip->newivs_index.is_created ());'), (3, 1, u'+  gcc_assert (ip->newivs && ip->newivs_index);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: clast_name_to_gcc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (ip->newivs && ip->newivs_index.is_created ());'), (3, 1, u'+  gcc_assert (ip->newivs && ip->newivs_index);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (ip->newivs && ip->newivs_index.is_created ());'), (3, 1, u'+  gcc_assert (ip->newivs && ip->newivs_index);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (ip->newivs && ip->newivs_index.is_created ());'), (3, 1, u'+      gcc_assert (ip->newivs && ip->newivs_index);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: type_for_clast_name
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (ip->newivs && ip->newivs_index.is_created ());'), (3, 1, u'+      gcc_assert (ip->newivs && ip->newivs_index);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (ip->newivs && ip->newivs_index.is_created ());'), (3, 1, u'+      gcc_assert (ip->newivs && ip->newivs_index);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!var_infos.is_created ());'), (4, 1, u'+  gcc_assert (!var_infos);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: init_ssa_renamer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!var_infos.is_created ());'), (4, 1, u'+  gcc_assert (!var_infos);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!var_infos.is_created ());'), (4, 1, u'+  gcc_assert (!var_infos);')]
===========================================
Class:class nontrapping_dom_walker : public dom_walker { 
Class:class nontrapping_dom_walker : public dom_walker { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!changed_variables.elements ());'), (3, 1, u'+  gcc_assert (!changed_variables->elements ());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: vt_emit_notes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!changed_variables.elements ());'), (3, 1, u'+  gcc_assert (!changed_variables->elements ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!changed_variables.elements ());'), (3, 1, u'+  gcc_assert (!changed_variables->elements ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (node && node->registered.is_created ());'), (3, 1, u'+  gcc_assert (node && node->registered);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: vtbl_map_node_registration_find
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (node && node->registered.is_created ());'), (3, 1, u'+  gcc_assert (node && node->registered);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (node && node->registered.is_created ());'), (3, 1, u'+  gcc_assert (node && node->registered);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 2, u'-  gcc_assert (symse.ss == gfc_ss_terminator')]
===========================================
===========================================
Total add: 0
Total del: 72
Header: omp_udr_find_orig
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 2, u'-  gcc_assert (symse.ss == gfc_ss_terminator')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(58, 2, u'-  gcc_assert (symse.ss == gfc_ss_terminator')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t  gcc_assert (t);'), (13, 1, u'+      gcc_assert (t);')]
===========================================
===========================================
Total add: 7
Total del: 10
Header: gfc_trans_omp_array_reduction_or_udr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t  gcc_assert (t);'), (13, 1, u'+      gcc_assert (t);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t  gcc_assert (t);'), (13, 1, u'+      gcc_assert (t);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t      gcc_assert (t);'), (13, 2, u'-\t      gcc_assert (t);'), (19, 1, u'+\t  gcc_assert (t);'), (21, 1, u'+\t  gcc_assert (t);')]
===========================================
===========================================
Total add: 8
Total del: 11
Header: gfc_trans_omp_array_reduction_or_udr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t      gcc_assert (t);'), (13, 2, u'-\t      gcc_assert (t);'), (19, 1, u'+\t  gcc_assert (t);'), (21, 1, u'+\t  gcc_assert (t);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t      gcc_assert (t);'), (13, 2, u'-\t      gcc_assert (t);'), (19, 1, u'+\t  gcc_assert (t);'), (21, 1, u'+\t  gcc_assert (t);')]
===========================================
Class: class multi_array { 
Class: class B { 
Class:class pass_ipa_single_use : public ipa_opt_pass_d class pass_ipa_single_use : public ipa_opt_pass_d
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+static_assert(std::is_base_of<std::bad_cast, check2_t>::value,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+static_assert(std::is_base_of<std::logic_error, check4_t>::value,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert( is_same<test23_type, volatile signed wchar_t>::value,'), (3, 1, u'+  static_assert( is_signed<test23_type>::value')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert( is_same<test23_type, volatile signed wchar_t>::value,'), (3, 1, u'+  static_assert( is_signed<test23_type>::value')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert( is_same<test23_type, volatile signed wchar_t>::value,'), (3, 1, u'+  static_assert( is_signed<test23_type>::value')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile signed wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_signed<test23_type>::value')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile signed wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_signed<test23_type>::value')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile signed wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_signed<test23_type>::value')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_unsigned<test23_type>::value, "");'), (3, 1, u'+  static_assert(is_unsigned<test23_type>::value')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_unsigned<test23_type>::value, "");'), (3, 1, u'+  static_assert(is_unsigned<test23_type>::value')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_unsigned<test23_type>::value, "");'), (3, 1, u'+  static_assert(is_unsigned<test23_type>::value')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_unsigned<test23_type>::value, "");'), (3, 1, u'+  static_assert(is_unsigned<test23_type>::value')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_unsigned<test23_type>::value, "");'), (3, 1, u'+  static_assert(is_unsigned<test23_type>::value')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_unsigned<test23_type>::value, "");'), (3, 1, u'+  static_assert(is_unsigned<test23_type>::value')]
===========================================
Class:class pass_tree_no_loop : public gimple_opt_pass class pass_tree_no_loop : public gimple_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert'), (7, 1, u'+      gcc_assert')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: c_gimplify_expr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert'), (7, 1, u'+      gcc_assert')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert'), (7, 1, u'+      gcc_assert')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (TREE_CODE (type) == ARRAY_TYPE);')]
===========================================
===========================================
Total add: 27
Total del: 0
Header: ubsan_type_descriptor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (TREE_CODE (type) == ARRAY_TYPE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (TREE_CODE (type) == ARRAY_TYPE);')]
===========================================
Class:   class ValueType { class ValueType 
Class: class ValueTypeEnum { class ValueTypeEnum 
Class: template <int format> class ValueTypeInfo { class ValueTypeInfo 
Class: template <typename Format> class FillFunctor { class FillFunctor 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: try_make_edge_direct_virtual_call
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (node != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: collect_fn_hard_reg_usage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (node != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (node != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  gcc_assert (node != NULL);')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: collect_fn_hard_reg_usage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  gcc_assert (node != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  gcc_assert (node != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (VAR_OR_FUNCTION_DECL_P (decl));')]
===========================================
===========================================
Total add: 5
Total del: 6
Header: decl_init_priority_lookup
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (VAR_OR_FUNCTION_DECL_P (decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (VAR_OR_FUNCTION_DECL_P (decl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);')]
===========================================
===========================================
Total add: 5
Total del: 32
Header: decl_fini_priority_lookup
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (VAR_OR_FUNCTION_DECL_P (decl));')]
===========================================
===========================================
Total add: 11
Total del: 5
Header: decl_init_priority_insert
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (VAR_OR_FUNCTION_DECL_P (decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (VAR_OR_FUNCTION_DECL_P (decl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);')]
===========================================
===========================================
Total add: 9
Total del: 5
Header: decl_fini_priority_insert
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);')]
===========================================
Class: class pass_dce_loop : public gimple_opt_pass { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(127, 1, u'+      gcc_assert (perm2_mask1 != NULL);'), (142, 1, u'+      gcc_assert (perm2_mask2 != NULL);'), (156, 1, u'+      gcc_assert (shift1_mask != NULL);'), (172, 1, u'+      gcc_assert (select_mask != NULL);'), (232, 1, u'+      gcc_assert (perm3_mask != NULL);'), (246, 1, u'+      gcc_assert (shift1_mask != NULL);'), (260, 1, u'+      gcc_assert (shift2_mask != NULL);'), (274, 1, u'+      gcc_assert (shift3_mask != NULL);'), (288, 1, u'+      gcc_assert (shift4_mask != NULL);')]
===========================================
===========================================
Total add: 340
Total del: 0
Header: vect_permute_load_chain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(127, 1, u'+      gcc_assert (perm2_mask1 != NULL);'), (142, 1, u'+      gcc_assert (perm2_mask2 != NULL);'), (156, 1, u'+      gcc_assert (shift1_mask != NULL);'), (172, 1, u'+      gcc_assert (select_mask != NULL);'), (232, 1, u'+      gcc_assert (perm3_mask != NULL);'), (246, 1, u'+      gcc_assert (shift1_mask != NULL);'), (260, 1, u'+      gcc_assert (shift2_mask != NULL);'), (274, 1, u'+      gcc_assert (shift3_mask != NULL);'), (288, 1, u'+      gcc_assert (shift4_mask != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(127, 1, u'+      gcc_assert (perm2_mask1 != NULL);'), (142, 1, u'+      gcc_assert (perm2_mask2 != NULL);'), (156, 1, u'+      gcc_assert (shift1_mask != NULL);'), (172, 1, u'+      gcc_assert (select_mask != NULL);'), (232, 1, u'+      gcc_assert (perm3_mask != NULL);'), (246, 1, u'+      gcc_assert (shift1_mask != NULL);'), (260, 1, u'+      gcc_assert (shift2_mask != NULL);'), (274, 1, u'+      gcc_assert (shift3_mask != NULL);'), (288, 1, u'+      gcc_assert (shift4_mask != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(178, 1, u'+\t\t\t  gcc_assert (POINTER_TYPE_P (TREE_TYPE (decl)));')]
===========================================
===========================================
Total add: 279
Total del: 6
Header: gfc_trans_omp_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(178, 1, u'+\t\t\t  gcc_assert (POINTER_TYPE_P (TREE_TYPE (decl)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(178, 1, u'+\t\t\t  gcc_assert (POINTER_TYPE_P (TREE_TYPE (decl)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(166, 1, u'+  gcc_assert (get_value_fn);')]
===========================================
===========================================
Total add: 114
Total del: 66
Header: substitute_and_fold
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(166, 1, u'+  gcc_assert (get_value_fn);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(166, 1, u'+  gcc_assert (get_value_fn);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+      lra_assert (MEM_P (subst));')]
===========================================
===========================================
Total add: 20
Total del: 4
Header: simplify_operand_subreg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+      lra_assert (MEM_P (subst));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+      lra_assert (MEM_P (subst));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!next->externally_visible'), (3, 1, u'+      gcc_assert (!node->externally_visible')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: update_visibility_by_resolution_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!next->externally_visible'), (3, 1, u'+      gcc_assert (!node->externally_visible')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!next->externally_visible'), (3, 1, u'+      gcc_assert (!node->externally_visible')]
===========================================
Class:  class A { 
Class:class B { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!TREE_ASM_WRITTEN (decl));')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: vect_can_force_dr_alignment_p
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!TREE_ASM_WRITTEN (decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!TREE_ASM_WRITTEN (decl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+      gcc_assert (nargs == 2);')]
===========================================
===========================================
Total add: 70
Total del: 0
Header: build_shadow_mem_access
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+      gcc_assert (nargs == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(52, 1, u'+      gcc_assert (nargs == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+  gcc_assert (!(size_in_bytes > 0 && !non_zero_len_p));'), (37, 1, u'+      gcc_assert (size_in_bytes != -1);'), (81, 1, u'+      gcc_assert (before_p);')]
===========================================
===========================================
Total add: 87
Total del: 19
Header: build_shadow_mem_access
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+  gcc_assert (!(size_in_bytes > 0 && !non_zero_len_p));'), (37, 1, u'+      gcc_assert (size_in_bytes != -1);'), (81, 1, u'+      gcc_assert (before_p);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+  gcc_assert (!(size_in_bytes > 0 && !non_zero_len_p));'), (37, 1, u'+      gcc_assert (size_in_bytes != -1);'), (81, 1, u'+      gcc_assert (before_p);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (nargs == 2);')]
===========================================
===========================================
Total add: 17
Total del: 2
Header: build_check_stmt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (nargs == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (nargs == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_checking_assert (!insn_rec->defs);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: df_refs_add_to_chains
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_checking_assert (!insn_rec->defs);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_checking_assert (!insn_rec->defs);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_checking_assert (!insn_rec->uses);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: df_refs_add_to_chains
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_checking_assert (!insn_rec->uses);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_checking_assert (!insn_rec->uses);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_checking_assert (!insn_rec->eq_uses);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: df_refs_add_to_chains
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_checking_assert (!insn_rec->eq_uses);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_checking_assert (!insn_rec->eq_uses);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_checking_assert (!insn_rec->mw_hardregs);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: df_refs_add_to_chains
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_checking_assert (!insn_rec->mw_hardregs);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_checking_assert (!insn_rec->mw_hardregs);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_checking_assert (!bb_info->artificial_defs);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: df_refs_add_to_chains
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_checking_assert (!bb_info->artificial_defs);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_checking_assert (!bb_info->artificial_defs);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_checking_assert (!bb_info->artificial_uses);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: df_refs_add_to_chains
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_checking_assert (!bb_info->artificial_uses);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_checking_assert (!bb_info->artificial_uses);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (DF_REF_IS_REG_MARKED (*old_rec));'), (4, 1, u'+\t  gcc_assert (DF_REF_IS_REG_MARKED (old_rec));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: df_refs_verify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (DF_REF_IS_REG_MARKED (*old_rec));'), (4, 1, u'+\t  gcc_assert (DF_REF_IS_REG_MARKED (old_rec));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (DF_REF_IS_REG_MARKED (*old_rec));'), (4, 1, u'+\t  gcc_assert (DF_REF_IS_REG_MARKED (old_rec));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (*old_rec == NULL);'), (3, 1, u'+    gcc_assert (old_rec == NULL);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: df_refs_verify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (*old_rec == NULL);'), (3, 1, u'+    gcc_assert (old_rec == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (*old_rec == NULL);'), (3, 1, u'+    gcc_assert (old_rec == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (*old_rec == NULL);'), (3, 1, u'+    gcc_assert (old_rec == NULL);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: df_mws_verify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (*old_rec == NULL);'), (3, 1, u'+    gcc_assert (old_rec == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (*old_rec == NULL);'), (3, 1, u'+    gcc_assert (old_rec == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tgcc_assert (0);')]
===========================================
===========================================
Total add: 0
Total del: 9
Header: df_insn_refs_verify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tgcc_assert (0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tgcc_assert (0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (*ref);'), (4, 1, u'+      gcc_assert (ref);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: union_match_dups
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (*ref);'), (4, 1, u'+      gcc_assert (ref);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (*ref);'), (4, 1, u'+      gcc_assert (ref);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-  gcc_assert (insn);')]
===========================================
===========================================
Total add: 0
Total del: 26
Header: df_uses_create
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-  gcc_assert (insn);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-  gcc_assert (insn);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (DF_REF_REGNO (def) < FIRST_PSEUDO_REGISTER);'), (8, 1, u'+    gcc_assert (DF_REF_REGNO (def) < FIRST_PSEUDO_REGISTER);'), (13, 2, u'-      gcc_assert (DF_REF_REGNO (use) < FIRST_PSEUDO_REGISTER);'), (16, 1, u'+    gcc_assert (DF_REF_REGNO (use) < FIRST_PSEUDO_REGISTER);')]
===========================================
===========================================
Total add: 4
Total del: 10
Header: df_word_lr_bb_local_compute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (DF_REF_REGNO (def) < FIRST_PSEUDO_REGISTER);'), (8, 1, u'+    gcc_assert (DF_REF_REGNO (def) < FIRST_PSEUDO_REGISTER);'), (13, 2, u'-      gcc_assert (DF_REF_REGNO (use) < FIRST_PSEUDO_REGISTER);'), (16, 1, u'+    gcc_assert (DF_REF_REGNO (use) < FIRST_PSEUDO_REGISTER);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (DF_REF_REGNO (def) < FIRST_PSEUDO_REGISTER);'), (8, 1, u'+    gcc_assert (DF_REF_REGNO (def) < FIRST_PSEUDO_REGISTER);'), (13, 2, u'-      gcc_assert (DF_REF_REGNO (use) < FIRST_PSEUDO_REGISTER);'), (16, 1, u'+    gcc_assert (DF_REF_REGNO (use) < FIRST_PSEUDO_REGISTER);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-  gcc_assert (reg_info != NULL && uses != NULL);'), (22, 1, u'+  gcc_assert (use != NULL);')]
===========================================
===========================================
Total add: 7
Total del: 10
Header: get_defs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-  gcc_assert (reg_info != NULL && uses != NULL);'), (22, 1, u'+  gcc_assert (use != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-  gcc_assert (reg_info != NULL && uses != NULL);'), (22, 1, u'+  gcc_assert (use != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(86, 2, u'-\t      gcc_assert (sprime != rhs);')]
===========================================
===========================================
Total add: 107
Total del: 86
Header: eliminate_dom_walker::before_dom_children
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(86, 2, u'-\t      gcc_assert (sprime != rhs);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(86, 2, u'-\t      gcc_assert (sprime != rhs);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (!(TREE_CODE (val) == SSA_NAME')]
===========================================
===========================================
Total add: 0
Total del: 5
Header: propagate_tree_value
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (!(TREE_CODE (val) == SSA_NAME')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (!(TREE_CODE (val) == SSA_NAME')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!node->externally_visible'), (3, 1, u'+      gcc_assert (!next->externally_visible')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: update_visibility_by_resolution_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!node->externally_visible'), (3, 1, u'+      gcc_assert (!next->externally_visible')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!node->externally_visible'), (3, 1, u'+      gcc_assert (!next->externally_visible')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+  gcc_assert (!TREE_ASM_WRITTEN (decl));')]
===========================================
===========================================
Total add: 19
Total del: 12
Header: vect_can_force_dr_alignment_p
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+  gcc_assert (!TREE_ASM_WRITTEN (decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+  gcc_assert (!TREE_ASM_WRITTEN (decl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t      gcc_assert (code == OMP_DISTRIBUTE);'), (8, 1, u'+\t      gcc_assert (code == OMP_DISTRIBUTE')]
===========================================
===========================================
Total add: 7
Total del: 2
Header: c_omp_split_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t      gcc_assert (code == OMP_DISTRIBUTE);'), (8, 1, u'+\t      gcc_assert (code == OMP_DISTRIBUTE')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t      gcc_assert (code == OMP_DISTRIBUTE);'), (8, 1, u'+\t      gcc_assert (code == OMP_DISTRIBUTE')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\tgcc_assert (tree_int_cst_equal'), (14, 1, u'+      gcc_assert (tree_int_cst_equal')]
===========================================
===========================================
Total add: 3
Total del: 11
Header: include_empty_classes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\tgcc_assert (tree_int_cst_equal'), (14, 1, u'+      gcc_assert (tree_int_cst_equal')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\tgcc_assert (tree_int_cst_equal'), (14, 1, u'+      gcc_assert (tree_int_cst_equal')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 2, u'-\t      gcc_assert (non_primary_binfo == vid->vbase);')]
===========================================
===========================================
Total add: 9
Total del: 77
Header: add_vcall_offset_vtbl_entries_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 2, u'-\t      gcc_assert (non_primary_binfo == vid->vbase);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 2, u'-\t      gcc_assert (non_primary_binfo == vid->vbase);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (act_arg != NULL);')]
===========================================
===========================================
Total add: 11
Total del: 0
Header: gfc_copy_formal_args_intr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (act_arg != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (act_arg != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (!se->ignore_optional);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: conv_generic_with_optional_char_arg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (!se->ignore_optional);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (!se->ignore_optional);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+\t  gcc_assert (exact_log2 (count) != -1);')]
===========================================
===========================================
Total add: 61
Total del: 8
Header: vect_grouped_store_supported
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+\t  gcc_assert (exact_log2 (count) != -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+\t  gcc_assert (exact_log2 (count) != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  gcc_assert (perm_mask_high != NULL);'), (15, 2, u'-  gcc_assert (perm_mask_low != NULL);'), (38, 1, u'+\t  gcc_assert (perm3_mask_low != NULL);'), (50, 1, u'+\t  gcc_assert (perm3_mask_high != NULL);'), (95, 1, u'+      gcc_assert (exact_log2 (length) != -1);'), (105, 1, u'+\tgcc_assert (perm_mask_high != NULL);'), (110, 1, u'+\tgcc_assert (perm_mask_low != NULL);')]
===========================================
===========================================
Total add: 100
Total del: 31
Header: vect_permute_store_chain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  gcc_assert (perm_mask_high != NULL);'), (15, 2, u'-  gcc_assert (perm_mask_low != NULL);'), (38, 1, u'+\t  gcc_assert (perm3_mask_low != NULL);'), (50, 1, u'+\t  gcc_assert (perm3_mask_high != NULL);'), (95, 1, u'+      gcc_assert (exact_log2 (length) != -1);'), (105, 1, u'+\tgcc_assert (perm_mask_high != NULL);'), (110, 1, u'+\tgcc_assert (perm_mask_low != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  gcc_assert (perm_mask_high != NULL);'), (15, 2, u'-  gcc_assert (perm_mask_low != NULL);'), (38, 1, u'+\t  gcc_assert (perm3_mask_low != NULL);'), (50, 1, u'+\t  gcc_assert (perm3_mask_high != NULL);'), (95, 1, u'+      gcc_assert (exact_log2 (length) != -1);'), (105, 1, u'+\tgcc_assert (perm_mask_high != NULL);'), (110, 1, u'+\tgcc_assert (perm_mask_low != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (diff_seen);'), (3, 1, u'+  gcc_assert (diff_seen || symtab_get_node (complete)->alias);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: cdtor_comdat_group
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (diff_seen);'), (3, 1, u'+  gcc_assert (diff_seen || symtab_get_node (complete)->alias);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (diff_seen);'), (3, 1, u'+  gcc_assert (diff_seen || symtab_get_node (complete)->alias);')]
===========================================
Class: class Funcs { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_PRIVATE'), (22, 1, u'+\t  gcc_assert (outer);'), (33, 2, u'-  gcc_assert (outer != NULL);'), (34, 2, u'-  gcc_assert (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_PRIVATE'), (36, 1, u'+  gcc_assert (outer != NULL_TREE);')]
===========================================
===========================================
Total add: 23
Total del: 10
Header: gfc_omp_clause_default_ctor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_PRIVATE'), (22, 1, u'+\t  gcc_assert (outer);'), (33, 2, u'-  gcc_assert (outer != NULL);'), (34, 2, u'-  gcc_assert (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_PRIVATE'), (36, 1, u'+  gcc_assert (outer != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_PRIVATE'), (22, 1, u'+\t  gcc_assert (outer);'), (33, 2, u'-  gcc_assert (outer != NULL);'), (34, 2, u'-  gcc_assert (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_PRIVATE'), (36, 1, u'+  gcc_assert (outer != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_assert (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_FIRSTPRIVATE'), (8, 2, u'-  gcc_assert (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_FIRSTPRIVATE);')]
===========================================
===========================================
Total add: 18
Total del: 4
Header: gfc_omp_clause_copy_ctor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_assert (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_FIRSTPRIVATE'), (8, 2, u'-  gcc_assert (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_FIRSTPRIVATE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_assert (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_FIRSTPRIVATE'), (8, 2, u'-  gcc_assert (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_FIRSTPRIVATE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (node->definition);'), (4, 2, u'-      gcc_assert (!node->alias);'), (5, 2, u'-      gcc_assert (!node->thunk.thunk_p);')]
===========================================
===========================================
Total add: 3
Total del: 8
Header: cgraph_add_thunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (node->definition);'), (4, 2, u'-      gcc_assert (!node->alias);'), (5, 2, u'-      gcc_assert (!node->thunk.thunk_p);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (node->definition);'), (4, 2, u'-      gcc_assert (!node->alias);'), (5, 2, u'-      gcc_assert (!node->thunk.thunk_p);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(51, 1, u'+\t  gcc_assert ((item.offset % BITS_PER_UNIT) == 0);')]
===========================================
===========================================
Total add: 62
Total del: 4
Header: struct ipa_known_agg_contents_list
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(51, 1, u'+\t  gcc_assert ((item.offset % BITS_PER_UNIT) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(51, 1, u'+\t  gcc_assert ((item.offset % BITS_PER_UNIT) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t      gcc_assert ((item.offset % BITS_PER_UNIT) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 13
Header: determine_known_aggregate_parts
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t      gcc_assert ((item.offset % BITS_PER_UNIT) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t      gcc_assert ((item.offset % BITS_PER_UNIT) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (current_loops != NULL);')]
===========================================
===========================================
Total add: 0
Total del: 3
Header: thread_through_all_blocks
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (current_loops != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (current_loops != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+      gcc_assert (p1->u.rsym.ns == p2->u.rsym.ns);'), (50, 1, u'+      gcc_assert (p1->u.rsym.sym == NULL);'), (59, 1, u'+      gcc_assert (p2->u.rsym.sym == NULL);')]
===========================================
===========================================
Total add: 92
Total del: 0
Header: mio_omp_declare_simd
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+      gcc_assert (p1->u.rsym.ns == p2->u.rsym.ns);'), (50, 1, u'+      gcc_assert (p1->u.rsym.sym == NULL);'), (59, 1, u'+      gcc_assert (p2->u.rsym.sym == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+      gcc_assert (p1->u.rsym.ns == p2->u.rsym.ns);'), (50, 1, u'+      gcc_assert (p1->u.rsym.sym == NULL);'), (59, 1, u'+      gcc_assert (p2->u.rsym.sym == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(76, 1, u'+  gcc_assert (symse.ss == gfc_ss_terminator')]
===========================================
===========================================
Total add: 92
Total del: 1
Header: gfc_trans_omp_variable_list
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(76, 1, u'+  gcc_assert (symse.ss == gfc_ss_terminator')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(76, 1, u'+  gcc_assert (symse.ss == gfc_ss_terminator')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  gcc_assert (t);'), (18, 1, u'+      gcc_assert (t);'), (22, 1, u'+      gcc_assert (sym->ts.type == BT_DERIVED);'), (24, 1, u'+      gcc_assert (e2);'), (26, 1, u'+      gcc_assert (t);'), (34, 1, u'+\t  gcc_assert (t);')]
===========================================
===========================================
Total add: 38
Total del: 7
Header: gfc_trans_omp_array_reduction
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  gcc_assert (t);'), (18, 1, u'+      gcc_assert (t);'), (22, 1, u'+      gcc_assert (sym->ts.type == BT_DERIVED);'), (24, 1, u'+      gcc_assert (e2);'), (26, 1, u'+      gcc_assert (t);'), (34, 1, u'+\t  gcc_assert (t);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  gcc_assert (t);'), (18, 1, u'+      gcc_assert (t);'), (22, 1, u'+      gcc_assert (sym->ts.type == BT_DERIVED);'), (24, 1, u'+      gcc_assert (e2);'), (26, 1, u'+      gcc_assert (t);'), (34, 1, u'+\t  gcc_assert (t);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t      gcc_assert (t);'), (13, 1, u'+\t      gcc_assert (t);')]
===========================================
===========================================
Total add: 15
Total del: 0
Header: gfc_trans_omp_array_reduction
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t      gcc_assert (t);'), (13, 1, u'+\t      gcc_assert (t);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t      gcc_assert (t);'), (13, 1, u'+\t      gcc_assert (t);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (t);'), (13, 1, u'+      gcc_assert (t);')]
===========================================
===========================================
Total add: 8
Total del: 5
Header: gfc_trans_omp_array_reduction
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (t);'), (13, 1, u'+      gcc_assert (t);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (t);'), (13, 1, u'+      gcc_assert (t);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+      gcc_assert (DECL_P (fun));')]
===========================================
===========================================
Total add: 40
Total del: 9
Header: rs6000_function_parms_need_stack
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+      gcc_assert (DECL_P (fun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+      gcc_assert (DECL_P (fun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t  gcc_assert (TREE_CODE (decl) != RESULT_DECL);')]
===========================================
===========================================
Total add: 10
Total del: 7
Header: check_initializer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t  gcc_assert (TREE_CODE (decl) != RESULT_DECL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t  gcc_assert (TREE_CODE (decl) != RESULT_DECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (TREE_CODE (decl) != RESULT_DECL);')]
===========================================
===========================================
Total add: 0
Total del: 9
Header: store_init_value
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (TREE_CODE (decl) != RESULT_DECL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (TREE_CODE (decl) != RESULT_DECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert ((!cfun->machine->frame.saved_varargs_size || cfun->stdarg)')]
===========================================
===========================================
Total add: 6
Total del: 11
Header: aarch64_expand_prologue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert ((!cfun->machine->frame.saved_varargs_size || cfun->stdarg)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert ((!cfun->machine->frame.saved_varargs_size || cfun->stdarg)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert ((!cfun->machine->saved_varargs_size || cfun->stdarg)'), (6, 1, u'+  gcc_assert ((!cfun->machine->frame.saved_varargs_size || cfun->stdarg)')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: aarch64_expand_prologue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert ((!cfun->machine->saved_varargs_size || cfun->stdarg)'), (6, 1, u'+  gcc_assert ((!cfun->machine->frame.saved_varargs_size || cfun->stdarg)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert ((!cfun->machine->saved_varargs_size || cfun->stdarg)'), (6, 1, u'+  gcc_assert ((!cfun->machine->frame.saved_varargs_size || cfun->stdarg)')]
===========================================
Class:template <class T, class U> bool f2(T t, U u) { return ((!t) == u); } template <class T, class U> bool f2(T t, U u) 
Class:template <class T, class U> bool f3(T t, U u) { return (!g(t) == u); }  template <class T, class U> bool f3(T t, U u) 
Class:template <class T, class U> bool f4(T t, U u) { return ((!g(t)) == u); } template <class T, class U> bool f4(T t, U u) 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert(init_tree == NULL_TREE);')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: Gcc_backend::implicit_variable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert(init_tree == NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert(init_tree == NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  go_assert(p->is_field_name("zero"));')]
===========================================
===========================================
Total add: 10
Total del: 0
Header: Type::type_descriptor_constructor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  go_assert(p->is_field_name("zero"));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  go_assert(p->is_field_name("zero"));')]
===========================================
Class:  class address_eliminator {   class address_eliminator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(75, 2, u'-\t\t    lra_assert (data->icode < 0); /* Asm  */'), (79, 2, u'-\t\t  lra_assert (i != nop - 1);'), (169, 1, u'+\t    lra_assert (icode < 0); /* Asm  */'), (171, 1, u'+\t  lra_assert (i != nop - 1);')]
===========================================
===========================================
Total add: 17
Total del: 153
Header: setup_operand_alternative
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(75, 2, u'-\t\t    lra_assert (data->icode < 0); /* Asm  */'), (79, 2, u'-\t\t  lra_assert (i != nop - 1);'), (169, 1, u'+\t    lra_assert (icode < 0); /* Asm  */'), (171, 1, u'+\t  lra_assert (i != nop - 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(75, 2, u'-\t\t    lra_assert (data->icode < 0); /* Asm  */'), (79, 2, u'-\t\t  lra_assert (i != nop - 1);'), (169, 1, u'+\t    lra_assert (icode < 0); /* Asm  */'), (171, 1, u'+\t  lra_assert (i != nop - 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (alt >= 0);')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: subst_asm_stack_regs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (alt >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (alt >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+static_assert(sizeof(f<decltype(nullptr), bool>(0)) != 1, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-static_assert(std::is_assignable<bool&, std::nullptr_t>::value, "Error");'), (3, 1, u'+static_assert(!std::is_assignable<bool&, std::nullptr_t>::value, "Error");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: static_assert
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-static_assert(std::is_assignable<bool&, std::nullptr_t>::value, "Error");'), (3, 1, u'+static_assert(!std::is_assignable<bool&, std::nullptr_t>::value, "Error");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-static_assert(std::is_assignable<bool&, std::nullptr_t>::value, "Error");'), (3, 1, u'+static_assert(!std::is_assignable<bool&, std::nullptr_t>::value, "Error");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t\t  gcc_assert (DECL_ANON_UNION_VAR_P (r));')]
===========================================
===========================================
Total add: 11
Total del: 6
Header: tsubst_copy
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t\t  gcc_assert (DECL_ANON_UNION_VAR_P (r));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t\t  gcc_assert (DECL_ANON_UNION_VAR_P (r));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t  gcc_checking_assert (!COMPLETE_TYPE_P (DECL_CONTEXT (real_decl)));')]
===========================================
===========================================
Total add: 10
Total del: 1
Header: ctor_for_folding
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t  gcc_checking_assert (!COMPLETE_TYPE_P (DECL_CONTEXT (real_decl)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t  gcc_checking_assert (!COMPLETE_TYPE_P (DECL_CONTEXT (real_decl)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (location != 0);')]
===========================================
===========================================
Total add: 0
Total del: 3
Header: aarch64_evpc_ext
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (location != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (location != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t    gcc_assert (d->cur->index == field);')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: reshape_init_class
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t    gcc_assert (d->cur->index == field);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t    gcc_assert (d->cur->index == field);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t    gcc_assert (d->cur->index == field);')]
===========================================
===========================================
Total add: 0
Total del: 6
Header: reshape_init_class
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t    gcc_assert (d->cur->index == field);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t    gcc_assert (d->cur->index == field);')]
===========================================
Class:   class AAAA { 
Class: class BBBB : public AAAA { 
Class:   class DB { 
Class: class DC : public DB { 
Class: template <class T> class DC2 : public T { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert(TARGET_ABI_OPEN_VMS || this_is_asm_operands);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: print_operand_address
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert(TARGET_ABI_OPEN_VMS || this_is_asm_operands);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert(TARGET_ABI_OPEN_VMS || this_is_asm_operands);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert(TARGET_ABI_OPEN_VMS || this_is_asm_operands);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: print_operand_address
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert(TARGET_ABI_OPEN_VMS || this_is_asm_operands);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert(TARGET_ABI_OPEN_VMS || this_is_asm_operands);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_checking_assert (!defer_ok || !decl_function_context (d)')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: instantiate_decl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_checking_assert (!defer_ok || !decl_function_context (d)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_checking_assert (!defer_ok || !decl_function_context (d)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+  static_assert(sizeof(Packed5) == 5, "Please check the keywords used");')]
===========================================
===========================================
Total add: 30
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+  static_assert(sizeof(Packed5) == 5, "Please check the keywords used");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+  static_assert(sizeof(Packed5) == 5, "Please check the keywords used");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT_TRUE(NULL != ptr);')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT_TRUE(NULL != ptr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  ASSERT_TRUE(NULL != ptr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_EQ(0, res);')]
===========================================
===========================================
Total add: 15
Total del: 0
Header: TEST
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_EQ(0, res);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  ASSERT_EQ(0, res);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t  gcc_assert (!note);')]
===========================================
===========================================
Total add: 2
Total del: 9
Header: set_unique_reg_note
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t  gcc_assert (!note);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t  gcc_assert (!note);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (args == NULL_TREE);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: rx_handle_func_attribute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (args == NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (args == NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert (DECL_P (* node));'), (12, 1, u'+  gcc_assert (args != NULL_TREE);')]
===========================================
===========================================
Total add: 22
Total del: 0
Header: rx_handle_func_attribute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert (DECL_P (* node));'), (12, 1, u'+  gcc_assert (args != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert (DECL_P (* node));'), (12, 1, u'+  gcc_assert (args != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  lra_assert (n >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 21
Header: lra_set_insn_recog_data
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  lra_assert (n >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  lra_assert (n >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\tlra_assert (n >= 0 && bp != NULL);'), (9, 1, u'+\tlra_assert (n >= 0);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: lra_update_insn_recog_data
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\tlra_assert (n >= 0 && bp != NULL);'), (9, 1, u'+\tlra_assert (n >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\tlra_assert (n >= 0 && bp != NULL);'), (9, 1, u'+\tlra_assert (n >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    lra_assert (bp[i] == get_attr_enabled (insn));'), (3, 1, u'+\t    lra_assert (TEST_BIT (enabled, i)')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: lra_update_insn_recog_data
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    lra_assert (bp[i] == get_attr_enabled (insn));'), (3, 1, u'+\t    lra_assert (TEST_BIT (enabled, i)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    lra_assert (bp[i] == get_attr_enabled (insn));'), (3, 1, u'+\t    lra_assert (TEST_BIT (enabled, i)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+  gcc_checking_assert (CONST_INT_P (source));')]
===========================================
===========================================
Total add: 16
Total del: 21
Header: rs6000_conditional_register_usage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+  gcc_checking_assert (CONST_INT_P (source));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+  gcc_checking_assert (CONST_INT_P (source));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t  gcc_assert (ud2 & 0x8000);')]
===========================================
===========================================
Total add: 20
Total del: 75
Header: rs6000_emit_set_long_const
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t  gcc_assert (ud2 & 0x8000);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t  gcc_assert (ud2 & 0x8000);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (HOST_BITS_PER_WIDEST_INT >= 64);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: expand_cbranchdi4
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (HOST_BITS_PER_WIDEST_INT >= 64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (HOST_BITS_PER_WIDEST_INT >= 64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert ((HOST_WIDEST_INT) (intptr_t) expr == (intptr_t) expr);'), (4, 1, u'+  gcc_assert ((HOST_WIDE_INT) (intptr_t) expr == (intptr_t) expr);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: streamer_write_tree_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert ((HOST_WIDEST_INT) (intptr_t) expr == (intptr_t) expr);'), (4, 1, u'+  gcc_assert ((HOST_WIDE_INT) (intptr_t) expr == (intptr_t) expr);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert ((HOST_WIDEST_INT) (intptr_t) expr == (intptr_t) expr);'), (4, 1, u'+  gcc_assert ((HOST_WIDE_INT) (intptr_t) expr == (intptr_t) expr);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  gcc_assert (decl_binds_to_current_def_p (new_decl));'), (9, 1, u'+  gcc_assert (decl_binds_to_current_def_p (new_decl)')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: symtab_nonoverwritable_alias
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  gcc_assert (decl_binds_to_current_def_p (new_decl));'), (9, 1, u'+  gcc_assert (decl_binds_to_current_def_p (new_decl)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  gcc_assert (decl_binds_to_current_def_p (new_decl));'), (9, 1, u'+  gcc_assert (decl_binds_to_current_def_p (new_decl)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cgraph_function_flags_ready);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: cgraph_variable_initializer_availability
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cgraph_function_flags_ready);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cgraph_function_flags_ready);')]
===========================================
Class:class pass_ipa_whole_program_visibility : public ipa_opt_pass_d class pass_ipa_whole_program_visibility : public ipa_opt_pass_d
Class: class pass_ipa_function_and_variable_visibility : public simple_ipa_opt_pass { 
Class:class pass_ipa_function_and_variable_visibility : public simple_ipa_opt_pass class pass_ipa_function_and_variable_visibility : public simple_ipa_opt_pass
Class:class pass_ipa_whole_program_visibility : public ipa_opt_pass_d class pass_ipa_whole_program_visibility : public ipa_opt_pass_d
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!DECL_COMDAT_GROUP (symbol->decl));'), (4, 1, u'+  gcc_assert (!symbol->get_comdat_group ());')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: set_comdat_group
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!DECL_COMDAT_GROUP (symbol->decl));'), (4, 1, u'+  gcc_assert (!symbol->get_comdat_group ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!DECL_COMDAT_GROUP (symbol->decl));'), (4, 1, u'+  gcc_assert (!symbol->get_comdat_group ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_checking_assert (DECL_COMDAT_GROUP (node->decl)'), (4, 1, u'+\t      gcc_checking_assert (symtab_in_same_comdat_p (node, decl_node));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: function_and_variable_visibility
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_checking_assert (DECL_COMDAT_GROUP (node->decl)'), (4, 1, u'+\t      gcc_checking_assert (symtab_in_same_comdat_p (node, decl_node));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_checking_assert (DECL_COMDAT_GROUP (node->decl)'), (4, 1, u'+\t      gcc_checking_assert (symtab_in_same_comdat_p (node, decl_node));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (ref != LCC_NOT_FOUND);'), (18, 1, u'+\t  gcc_assert (ref != LCC_NOT_FOUND);')]
===========================================
===========================================
Total add: 16
Total del: 7
Header: lto_output_node
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (ref != LCC_NOT_FOUND);'), (18, 1, u'+\t  gcc_assert (ref != LCC_NOT_FOUND);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (ref != LCC_NOT_FOUND);'), (18, 1, u'+\t  gcc_assert (ref != LCC_NOT_FOUND);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (ref != LCC_NOT_FOUND);'), (18, 1, u'+\t  gcc_assert (ref != LCC_NOT_FOUND);')]
===========================================
===========================================
Total add: 16
Total del: 7
Header: lto_output_varpool_node
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (ref != LCC_NOT_FOUND);'), (18, 1, u'+\t  gcc_assert (ref != LCC_NOT_FOUND);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (ref != LCC_NOT_FOUND);'), (18, 1, u'+\t  gcc_assert (ref != LCC_NOT_FOUND);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert ((slot && *slot) || in_lto_p);'), (8, 1, u'+  gcc_assert (node->decl->decl_with_vis.symtab_node || in_lto_p);')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: symtab_unregister_node
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert ((slot && *slot) || in_lto_p);'), (8, 1, u'+  gcc_assert (node->decl->decl_with_vis.symtab_node || in_lto_p);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert ((slot && *slot) || in_lto_p);'), (8, 1, u'+  gcc_assert (node->decl->decl_with_vis.symtab_node || in_lto_p);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (DECL_COMDAT_GROUP (old_node->decl));'), (3, 1, u'+  gcc_assert (old_node->get_comdat_group ());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: symtab_add_to_same_comdat_group
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (DECL_COMDAT_GROUP (old_node->decl));'), (3, 1, u'+  gcc_assert (old_node->get_comdat_group ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (DECL_COMDAT_GROUP (old_node->decl));'), (3, 1, u'+  gcc_assert (old_node->get_comdat_group ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (gimple_vuse (stmt));'), (21, 1, u'+  gcc_checking_assert (gimple_vuse (stmt));')]
===========================================
===========================================
Total add: 22
Total del: 7
Header: parm_ref_data_preserved_p
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (gimple_vuse (stmt));'), (21, 1, u'+  gcc_checking_assert (gimple_vuse (stmt));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (gimple_vuse (stmt));'), (21, 1, u'+  gcc_checking_assert (gimple_vuse (stmt));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (info->uses_analysis_done'), (3, 1, u'+  gcc_assert (info->analysis_done')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ipa_write_node_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (info->uses_analysis_done'), (3, 1, u'+  gcc_assert (info->analysis_done')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (info->uses_analysis_done'), (3, 1, u'+  gcc_assert (info->analysis_done')]
===========================================
Class:  class ipcp_modif_dom_walker : public dom_walker { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 2, u'-\tgcc_checking_assert (is_gimple_ip_invariant (v->value));')]
===========================================
===========================================
Total add: 17
Total del: 92
Header: ipcp_transform_function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 2, u'-\tgcc_checking_assert (is_gimple_ip_invariant (v->value));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 2, u'-\tgcc_checking_assert (is_gimple_ip_invariant (v->value));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (prec != -1);'), (10, 1, u'+      gcc_assert (prec != -1);')]
===========================================
===========================================
Total add: 8
Total del: 3
Header: get_ubsan_type_info_for_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (prec != -1);'), (10, 1, u'+      gcc_assert (prec != -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (prec != -1);'), (10, 1, u'+      gcc_assert (prec != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (gimple_code (gsi_stmt (si)) == GIMPLE_OMP_FOR);'), (5, 1, u'+  gcc_assert (gimple_code (gsi_stmt (gsi)) == GIMPLE_OMP_FOR);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: expand_omp_for_static_chunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (gimple_code (gsi_stmt (si)) == GIMPLE_OMP_FOR);'), (5, 1, u'+  gcc_assert (gimple_code (gsi_stmt (gsi)) == GIMPLE_OMP_FOR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (gimple_code (gsi_stmt (si)) == GIMPLE_OMP_FOR);'), (5, 1, u'+  gcc_assert (gimple_code (gsi_stmt (gsi)) == GIMPLE_OMP_FOR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+\t      gcc_assert (n->range == 64);'), (105, 1, u'+      gcc_assert (n->range == 64);')]
===========================================
===========================================
Total add: 150
Total del: 0
Header: public:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+\t      gcc_assert (n->range == 64);'), (105, 1, u'+      gcc_assert (n->range == 64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(60, 1, u'+\t      gcc_assert (n->range == 64);'), (105, 1, u'+      gcc_assert (n->range == 64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (extra >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: mem_operand_gpr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (extra >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (extra >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode > 0);'), (3, 1, u'+  gcov_nonruntime_assert (gcov_var.mode > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: gcov_position
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode > 0);'), (3, 1, u'+  gcov_nonruntime_assert (gcov_var.mode > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode > 0);'), (3, 1, u'+  gcov_nonruntime_assert (gcov_var.mode > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode > 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: gcov_rewrite
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!gcov_var.file);'), (3, 1, u'+  gcov_nonruntime_assert (!gcov_var.file);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: gcov_open
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!gcov_var.file);'), (3, 1, u'+  gcov_nonruntime_assert (!gcov_var.file);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!gcov_var.file);'), (3, 1, u'+  gcov_nonruntime_assert (!gcov_var.file);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode < 0);'), (3, 1, u'+  gcov_nonruntime_assert (gcov_var.mode < 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: gcov_write_words
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode < 0);'), (3, 1, u'+  gcov_nonruntime_assert (gcov_var.mode < 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode < 0);'), (3, 1, u'+  gcov_nonruntime_assert (gcov_var.mode < 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (gcov_var.offset == 1);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: gcov_write_words
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (gcov_var.offset == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (gcov_var.offset == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode < 0);'), (3, 2, u'-  gcc_assert (position + 2 <= gcov_var.start + gcov_var.offset);'), (4, 2, u'-  gcc_assert (position >= gcov_var.start);'), (5, 1, u'+  gcov_nonruntime_assert (gcov_var.mode < 0);'), (6, 1, u'+  gcov_nonruntime_assert (position + 2 <= gcov_var.start + gcov_var.offset);'), (7, 1, u'+  gcov_nonruntime_assert (position >= gcov_var.start);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: gcov_write_length
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode < 0);'), (3, 2, u'-  gcc_assert (position + 2 <= gcov_var.start + gcov_var.offset);'), (4, 2, u'-  gcc_assert (position >= gcov_var.start);'), (5, 1, u'+  gcov_nonruntime_assert (gcov_var.mode < 0);'), (6, 1, u'+  gcov_nonruntime_assert (position + 2 <= gcov_var.start + gcov_var.offset);'), (7, 1, u'+  gcov_nonruntime_assert (position >= gcov_var.start);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode < 0);'), (3, 2, u'-  gcc_assert (position + 2 <= gcov_var.start + gcov_var.offset);'), (4, 2, u'-  gcc_assert (position >= gcov_var.start);'), (5, 1, u'+  gcov_nonruntime_assert (gcov_var.mode < 0);'), (6, 1, u'+  gcov_nonruntime_assert (position + 2 <= gcov_var.start + gcov_var.offset);'), (7, 1, u'+  gcov_nonruntime_assert (position >= gcov_var.start);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode > 0);'), (3, 1, u'+  gcov_nonruntime_assert (gcov_var.mode > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: gcov_read_words
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode > 0);'), (3, 1, u'+  gcov_nonruntime_assert (gcov_var.mode > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode > 0);'), (3, 1, u'+  gcov_nonruntime_assert (gcov_var.mode > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (excess == 1);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: gcov_read_words
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (excess == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (excess == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!gcov_var.length || gcov_var.length == 1);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: gcov_read_words
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!gcov_var.length || gcov_var.length == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!gcov_var.length || gcov_var.length == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-              gcc_assert (bv_ix < GCOV_HISTOGRAM_BITVECTOR_SIZE);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: gcov_read_summary
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-              gcc_assert (bv_ix < GCOV_HISTOGRAM_BITVECTOR_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-              gcc_assert (bv_ix < GCOV_HISTOGRAM_BITVECTOR_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          gcc_assert (h_ix < GCOV_HISTOGRAM_SIZE);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: gcov_read_summary
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          gcc_assert (h_ix < GCOV_HISTOGRAM_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          gcc_assert (h_ix < GCOV_HISTOGRAM_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode > 0);'), (3, 1, u'+  gcov_nonruntime_assert (gcov_var.mode > 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: gcov_sync
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode > 0);'), (3, 1, u'+  gcov_nonruntime_assert (gcov_var.mode > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode > 0);'), (3, 1, u'+  gcov_nonruntime_assert (gcov_var.mode > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode < 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: gcov_seek
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode < 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (gcov_var.mode < 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (r < 64);'), (3, 1, u'+  gcov_nonruntime_assert (r < 64);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: gcov_histo_index
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (r < 64);'), (3, 1, u'+  gcov_nonruntime_assert (r < 64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (r < 64);'), (3, 1, u'+  gcov_nonruntime_assert (r < 64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          gcc_assert (tmp_i < GCOV_HISTOGRAM_SIZE);'), (3, 1, u'+          gcov_nonruntime_assert (tmp_i < GCOV_HISTOGRAM_SIZE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: gcov_histogram_merge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          gcc_assert (tmp_i < GCOV_HISTOGRAM_SIZE);'), (3, 1, u'+          gcov_nonruntime_assert (tmp_i < GCOV_HISTOGRAM_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          gcc_assert (tmp_i < GCOV_HISTOGRAM_SIZE);'), (3, 1, u'+          gcov_nonruntime_assert (tmp_i < GCOV_HISTOGRAM_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (tgt_i < 0);'), (3, 1, u'+  gcov_nonruntime_assert (tgt_i < 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: gcov_histogram_merge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (tgt_i < 0);'), (3, 1, u'+  gcov_nonruntime_assert (tgt_i < 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (tgt_i < 0);'), (3, 1, u'+  gcov_nonruntime_assert (tgt_i < 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (tmp_i >= 0 && tmp_i < GCOV_HISTOGRAM_SIZE'), (4, 1, u'+  gcov_nonruntime_assert (tmp_i >= 0 && tmp_i < GCOV_HISTOGRAM_SIZE')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: gcov_histogram_merge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (tmp_i >= 0 && tmp_i < GCOV_HISTOGRAM_SIZE'), (4, 1, u'+  gcov_nonruntime_assert (tmp_i >= 0 && tmp_i < GCOV_HISTOGRAM_SIZE')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (tmp_i >= 0 && tmp_i < GCOV_HISTOGRAM_SIZE'), (4, 1, u'+  gcov_nonruntime_assert (tmp_i >= 0 && tmp_i < GCOV_HISTOGRAM_SIZE')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (ws_ix == NUM_GCOV_WORKING_SETS);'), (3, 1, u'+  gcov_nonruntime_assert (ws_ix == NUM_GCOV_WORKING_SETS);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: compute_working_sets
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (ws_ix == NUM_GCOV_WORKING_SETS);'), (3, 1, u'+  gcov_nonruntime_assert (ws_ix == NUM_GCOV_WORKING_SETS);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (ws_ix == NUM_GCOV_WORKING_SETS);'), (3, 1, u'+  gcov_nonruntime_assert (ws_ix == NUM_GCOV_WORKING_SETS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  gcc_assert (insn != NULL_RTX && INSN_P (insn));')]
===========================================
===========================================
Total add: 8
Total del: 5
Header: rs6000_use_sched_lookahead
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  gcc_assert (insn != NULL_RTX && INSN_P (insn));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  gcc_assert (insn != NULL_RTX && INSN_P (insn));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-\t    gcc_checking_assert (INSN_CODE (insn) >= 0'), (46, 1, u'+\t  gcc_checking_assert (INSN_CODE (insn) >= 0'), (51, 1, u'+\t      gcc_assert (i > 0);'), (77, 1, u'+\t      gcc_assert (ready_try[i] == 0 || i > 0);'), (82, 1, u'+\t  gcc_assert (ready_try[i] == 0);')]
===========================================
===========================================
Total add: 47
Total del: 33
Header: choose_ready
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-\t    gcc_checking_assert (INSN_CODE (insn) >= 0'), (46, 1, u'+\t  gcc_checking_assert (INSN_CODE (insn) >= 0'), (51, 1, u'+\t      gcc_assert (i > 0);'), (77, 1, u'+\t      gcc_assert (ready_try[i] == 0 || i > 0);'), (82, 1, u'+\t  gcc_assert (ready_try[i] == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-\t    gcc_checking_assert (INSN_CODE (insn) >= 0'), (46, 1, u'+\t  gcc_checking_assert (INSN_CODE (insn) >= 0'), (51, 1, u'+\t      gcc_assert (i > 0);'), (77, 1, u'+\t      gcc_assert (ready_try[i] == 0 || i > 0);'), (82, 1, u'+\t  gcc_assert (ready_try[i] == 0);')]
===========================================
Class:class Decorator: private __sanitizer::AnsiColorDecorator { class Decorator: private __sanitizer::AnsiColorDecorator 
Class:class Decorator: public __sanitizer::SanitizerCommonDecorator { class Decorator: public __sanitizer::SanitizerCommonDecorator 
Class:             class ExternalSymbolizer { class ExternalSymbolizer 
Class:class ExternalSymbolizerInterface { class ExternalSymbolizerInterface 
Class:    class SymbolizerProcess : public ExternalSymbolizerInterface { class SymbolizerProcess : public ExternalSymbolizerInterface 
Class:           class LLVMSymbolizerProcess : public SymbolizerProcess { class LLVMSymbolizerProcess : public SymbolizerProcess 
Class: class Addr2LineProcess : public SymbolizerProcess { class Addr2LineProcess : public SymbolizerProcess 
Class: class Addr2LinePool : public ExternalSymbolizerInterface { class Addr2LinePool : public ExternalSymbolizerInterface 
Class:class WinSymbolizer : public Symbolizer { class WinSymbolizer : public Symbolizer 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (QUEUE_INDEX (insn) >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: choose_ready
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (QUEUE_INDEX (insn) >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (QUEUE_INDEX (insn) >= 0);')]
===========================================
Class:    class GdsPointList : public vector < GdsPoint > {};}}     class GdsPointList : public vector < GdsPoint > 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (TREE_CODE (t) == FUNCTION_DECL);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: is_ubsan_builtin_p
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (TREE_CODE (t) == FUNCTION_DECL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (TREE_CODE (t) == FUNCTION_DECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_checking_assert (t == void_node && VOID_TYPE_P (TREE_TYPE (t)));')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: tsubst_copy
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_checking_assert (t == void_node && VOID_TYPE_P (TREE_TYPE (t)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_checking_assert (t == void_node && VOID_TYPE_P (TREE_TYPE (t)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  gcc_assert (!crtl->bb_reorder_complete);'), (16, 1, u'+  gcc_assert (!(crtl->bb_reorder_complete')]
===========================================
===========================================
Total add: 8
Total del: 8
Header: cfg_layout_initialize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  gcc_assert (!crtl->bb_reorder_complete);'), (16, 1, u'+  gcc_assert (!(crtl->bb_reorder_complete')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  gcc_assert (!crtl->bb_reorder_complete);'), (16, 1, u'+  gcc_assert (!(crtl->bb_reorder_complete')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\t      gcc_assert (TREE_CODE (new_var) == MEM_REF);'), (7, 1, u'+\t\t      gcc_assert (DECL_P (new_vard));')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: lower_rec_input_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\t      gcc_assert (TREE_CODE (new_var) == MEM_REF);'), (7, 1, u'+\t\t      gcc_assert (DECL_P (new_vard));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\t      gcc_assert (TREE_CODE (new_var) == MEM_REF);'), (7, 1, u'+\t\t      gcc_assert (DECL_P (new_vard));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-\t  gcc_checking_assert (!TREE_ASM_WRITTEN (decl));'), (27, 2, u'-\t  gcc_checking_assert (!TREE_ASM_WRITTEN (decl));')]
===========================================
===========================================
Total add: 9
Total del: 27
Header: can_refer_decl_in_current_unit_p
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-\t  gcc_checking_assert (!TREE_ASM_WRITTEN (decl));'), (27, 2, u'-\t  gcc_checking_assert (!TREE_ASM_WRITTEN (decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-\t  gcc_checking_assert (!TREE_ASM_WRITTEN (decl));'), (27, 2, u'-\t  gcc_checking_assert (!TREE_ASM_WRITTEN (decl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (DECL_ONE_ONLY (old_node->decl));'), (3, 1, u'+  gcc_assert (DECL_COMDAT_GROUP (old_node->decl));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: symtab_add_to_same_comdat_group
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (DECL_ONE_ONLY (old_node->decl));'), (3, 1, u'+  gcc_assert (DECL_COMDAT_GROUP (old_node->decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (DECL_ONE_ONLY (old_node->decl));'), (3, 1, u'+  gcc_assert (DECL_COMDAT_GROUP (old_node->decl));')]
===========================================
Class: template <class zomg> class T { class T 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t  gcc_assert (GET_CODE (op0_subop1) == PARALLEL);'), (9, 1, u'+\t  gcc_assert (XVECLEN (trueop1, 0) == GET_MODE_NUNITS (mode));')]
===========================================
===========================================
Total add: 25
Total del: 0
Header: simplify_binary_operation_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t  gcc_assert (GET_CODE (op0_subop1) == PARALLEL);'), (9, 1, u'+\t  gcc_assert (XVECLEN (trueop1, 0) == GET_MODE_NUNITS (mode));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t  gcc_assert (GET_CODE (op0_subop1) == PARALLEL);'), (9, 1, u'+\t  gcc_assert (XVECLEN (trueop1, 0) == GET_MODE_NUNITS (mode));')]
===========================================
Class: class A { class A 
Class:class pass_ipa_comdats : public ipa_opt_pass_d class pass_ipa_comdats : public ipa_opt_pass_d
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u"+  gcc_assert (!f); // ggc-none doesn't support finalizers")]
===========================================
===========================================
Total add: 3
Total del: 1
Header: ggc_round_alloc_size
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u"+  gcc_assert (!f); // ggc-none doesn't support finalizers")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u"+  gcc_assert (!f); // ggc-none doesn't support finalizers")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u"+  gcc_assert (!f); // ggc-none doesn't support finalizers")]
===========================================
===========================================
Total add: 3
Total del: 1
Header: ggc_internal_alloc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u"+  gcc_assert (!f); // ggc-none doesn't support finalizers")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u"+  gcc_assert (!f); // ggc-none doesn't support finalizers")]
===========================================
Class:class finalizer { 
Class: class vec_finalizer { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  *as_pp = ggc_alloc_type_assertion ();'), (3, 1, u'+  *as_pp = ggc_alloc<type_assertion> ();')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: add_type_assertion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  *as_pp = ggc_alloc_type_assertion ();'), (3, 1, u'+  *as_pp = ggc_alloc<type_assertion> ();')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  *as_pp = ggc_alloc_type_assertion ();'), (3, 1, u'+  *as_pp = ggc_alloc<type_assertion> ();')]
===========================================
Class: class B { 
Class:class ex 
Class:  class ex2 : public ex 
Class:class ex2 : public ex 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile unsigned wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_unsigned<test23_type>::value, "");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile unsigned wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_unsigned<test23_type>::value, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile unsigned wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_unsigned<test23_type>::value, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile unsigned wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_unsigned<test23_type>::value, "");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile unsigned wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_unsigned<test23_type>::value, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile unsigned wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_unsigned<test23_type>::value, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  gcc_assert (to != NULL_TREE')]
===========================================
===========================================
Total add: 19
Total del: 0
Header: set_ssa_val_to
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  gcc_assert (to != NULL_TREE')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  gcc_assert (to != NULL_TREE')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_assert (to != NULL_TREE')]
===========================================
===========================================
Total add: 0
Total del: 7
Header: set_ssa_val_to
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_assert (to != NULL_TREE')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_assert (to != NULL_TREE')]
===========================================
Class:class cond_dom_walker : public dom_walker { 
Class: class C : B { class C : B 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+static_assert( !is_same<wchar_signed, wchar_unsigned>::value, "wchar_t" );'), (32, 1, u'+static_assert( is_signed<make_signed<char16_t>::type>::value, "char16_t");'), (33, 1, u'+static_assert( is_signed<make_signed<char32_t>::type>::value, "char32_t");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_same<test23_type, volatile unsigned wchar_t>::value, "");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_same<test23_type, volatile unsigned wchar_t>::value, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_same<test23_type, volatile unsigned wchar_t>::value, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_same<test23_type, volatile unsigned wchar_t>::value, "");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_same<test23_type, volatile unsigned wchar_t>::value, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  static_assert(is_same<test23_type, volatile wchar_t>::value, "");'), (3, 1, u'+  static_assert(is_same<test23_type, volatile unsigned wchar_t>::value, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (!(*split_p));')]
===========================================
===========================================
Total add: 16
Total del: 2
Header: move_insn_for_shrink_wrap
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (!(*split_p));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (!(*split_p));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type)')]
===========================================
===========================================
Total add: 14
Total del: 6
Header: convert_like_real
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type)')]
===========================================
Class:template <class A> class B {     template <class A> class B 
Class:template <class A> class B { template <class A> class B 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (seqno >= 0);'), (12, 1, u'+  gcc_assert (seqno >= 0);')]
===========================================
===========================================
Total add: 9
Total del: 1
Header: get_seqno_for_a_jump
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (seqno >= 0);'), (12, 1, u'+  gcc_assert (seqno >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (seqno >= 0);'), (12, 1, u'+  gcc_assert (seqno >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (TREE_CODE (t) == PARM_DECL || is_capture_proxy (t));')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: is_this_parameter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (TREE_CODE (t) == PARM_DECL || is_capture_proxy (t));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (TREE_CODE (t) == PARM_DECL || is_capture_proxy (t));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (base_object != NULL_TREE);')]
===========================================
===========================================
Total add: 4
Total del: 8
Header: alloc_iv
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (base_object != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (base_object != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert ((targetm.mode_switching.entry && targetm.mode_switching.exit)')]
===========================================
===========================================
Total add: 11
Total del: 6
Header: optimize_mode_switching
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert ((targetm.mode_switching.entry && targetm.mode_switching.exit)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert ((targetm.mode_switching.entry && targetm.mode_switching.exit)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-      gcc_assert (entry_edge != orig_entry_edge);')]
===========================================
===========================================
Total add: 2
Total del: 98
Header: epilogue_done:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-      gcc_assert (entry_edge != orig_entry_edge);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-      gcc_assert (entry_edge != orig_entry_edge);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t    gcc_assert (code->op != EXEC_NOP);'), (3, 1, u'+\t\t    gcc_assert (code && code->op != EXEC_NOP);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: resolve_omp_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t    gcc_assert (code->op != EXEC_NOP);'), (3, 1, u'+\t\t    gcc_assert (code && code->op != EXEC_NOP);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t    gcc_assert (code->op != EXEC_NOP);'), (3, 1, u'+\t\t    gcc_assert (code && code->op != EXEC_NOP);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert ((atomic_code->ext.omp_atomic != GFC_OMP_ATOMIC_CAPTURE'), (5, 1, u'+  gcc_assert (((aop != GFC_OMP_ATOMIC_CAPTURE) && code->next == NULL)')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: resolve_omp_atomic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert ((atomic_code->ext.omp_atomic != GFC_OMP_ATOMIC_CAPTURE'), (5, 1, u'+  gcc_assert (((aop != GFC_OMP_ATOMIC_CAPTURE) && code->next == NULL)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert ((atomic_code->ext.omp_atomic != GFC_OMP_ATOMIC_CAPTURE'), (5, 1, u'+  gcc_assert (((aop != GFC_OMP_ATOMIC_CAPTURE) && code->next == NULL)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (sym->attr.dummy);'), (26, 1, u'+      gcc_assert (f);')]
===========================================
===========================================
Total add: 26
Total del: 1
Header: gfc_trans_add_clause
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (sym->attr.dummy);'), (26, 1, u'+      gcc_assert (f);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (sym->attr.dummy);'), (26, 1, u'+      gcc_assert (f);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+static_assert (!foo(no_iter, 0), "");'), (27, 1, u'+static_assert (foo(has_iter, 0), "");'), (28, 1, u'+static_assert (foo<HasIter>(has_iter, 0), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (wtmp != 0);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: gfc_conv_array_initializer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (wtmp != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (wtmp != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  if (thread_through_normal_block (e, dummy_cond, handle_dominating_asserts,'), (6, 1, u'+\t\t\t\t\t      handle_dominating_asserts,')]
===========================================
===========================================
Total add: 6
Total del: 3
Header: thread_across_edge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  if (thread_through_normal_block (e, dummy_cond, handle_dominating_asserts,'), (6, 1, u'+\t\t\t\t\t      handle_dominating_asserts,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  if (thread_through_normal_block (e, dummy_cond, handle_dominating_asserts,'), (6, 1, u'+\t\t\t\t\t      handle_dominating_asserts,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert (code->resolved_isym->id == GFC_ISYM_CO_SUM);')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: conv_co_minmaxsum
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert (code->resolved_isym->id == GFC_ISYM_CO_SUM);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert (code->resolved_isym->id == GFC_ISYM_CO_SUM);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(100, 1, u'+      gcc_assert (code->resolved_isym->id == GFC_ISYM_CO_SUM);')]
===========================================
===========================================
Total add: 118
Total del: 0
Header: gfc_walk_intrinsic_function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(100, 1, u'+      gcc_assert (code->resolved_isym->id == GFC_ISYM_CO_SUM);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(100, 1, u'+      gcc_assert (code->resolved_isym->id == GFC_ISYM_CO_SUM);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+static_assert (is_foo<A>::value == 1, "");'), (41, 1, u'+static_assert (is_foo<A1>::value == 0, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (DECL_P (*node));')]
===========================================
===========================================
Total add: 15
Total del: 1
Header: epiphany_handle_interrupt_attribute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (DECL_P (*node));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (DECL_P (*node));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+\t  gcc_assert (exact_log2 (count) != -1);')]
===========================================
===========================================
Total add: 46
Total del: 7
Header: vect_grouped_load_supported
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+\t  gcc_assert (exact_log2 (count) != -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 1, u'+\t  gcc_assert (exact_log2 (count) != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (perm_mask_even != NULL);'), (10, 2, u'-  gcc_assert (perm_mask_odd != NULL);'), (31, 1, u'+\t  gcc_assert (perm3_mask_low != NULL);'), (40, 1, u'+\t  gcc_assert (perm3_mask_high != NULL);'), (79, 1, u'+      gcc_assert (exact_log2 (length) != -1);'), (84, 1, u'+      gcc_assert (perm_mask_even != NULL);'), (89, 1, u'+      gcc_assert (perm_mask_odd != NULL);')]
===========================================
===========================================
Total add: 79
Total del: 26
Header: vect_permute_load_chain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (perm_mask_even != NULL);'), (10, 2, u'-  gcc_assert (perm_mask_odd != NULL);'), (31, 1, u'+\t  gcc_assert (perm3_mask_low != NULL);'), (40, 1, u'+\t  gcc_assert (perm3_mask_high != NULL);'), (79, 1, u'+      gcc_assert (exact_log2 (length) != -1);'), (84, 1, u'+      gcc_assert (perm_mask_even != NULL);'), (89, 1, u'+      gcc_assert (perm_mask_odd != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (perm_mask_even != NULL);'), (10, 2, u'-  gcc_assert (perm_mask_odd != NULL);'), (31, 1, u'+\t  gcc_assert (perm3_mask_low != NULL);'), (40, 1, u'+\t  gcc_assert (perm3_mask_high != NULL);'), (79, 1, u'+      gcc_assert (exact_log2 (length) != -1);'), (84, 1, u'+      gcc_assert (perm_mask_even != NULL);'), (89, 1, u'+      gcc_assert (perm_mask_odd != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  go_assert(this->length_ != NULL);')]
===========================================
===========================================
Total add: 36
Total del: 1
Header: Array_type::get_backend_length
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  go_assert(this->length_ != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  go_assert(this->length_ != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+\t      go_assert(at != NULL);')]
===========================================
===========================================
Total add: 34
Total del: 5
Header: Unary_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+\t      go_assert(at != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+\t      go_assert(at != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  go_assert(TREE_CODE(type_tree) == RECORD_TYPE);'), (13, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__values") == 0);'), (20, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__count") == 0);'), (26, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),"__capacity") == 0);')]
===========================================
===========================================
Total add: 4
Total del: 38
Header: Slice_construction_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  go_assert(TREE_CODE(type_tree) == RECORD_TYPE);'), (13, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__values") == 0);'), (20, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__count") == 0);'), (26, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),"__capacity") == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  go_assert(TREE_CODE(type_tree) == RECORD_TYPE);'), (13, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__values") == 0);'), (20, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__count") == 0);'), (26, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),"__capacity") == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert(function != NULL);')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: Gcc_backend::temporary_variable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert(function != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert(function != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(function != NULL);')]
===========================================
===========================================
Total add: 0
Total del: 3
Header: Gcc_backend::temporary_variable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(function != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(function != NULL);')]
===========================================
Class: class Container { class Container 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  go_assert(val_type_tree != error_mark_node);')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: Type_info_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  go_assert(val_type_tree != error_mark_node);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  go_assert(val_type_tree != error_mark_node);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      go_assert(fn != NULL);')]
===========================================
===========================================
Total add: 14
Total del: 3
Header: Sink_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      go_assert(fn != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      go_assert(fn != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (nelt == (nelt & -nelt));')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: aarch64_expand_vec_perm_const_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (nelt == (nelt & -nelt));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (nelt == (nelt & -nelt));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TARGET_ALTIVEC || TARGET_VSX || TARGET_SPE || TARGET_PAIRED_FLOAT);'), (4, 1, u'+  gcc_assert (attr == RS6000_BTC_UNARY')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: rs6000_expand_builtin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TARGET_ALTIVEC || TARGET_VSX || TARGET_SPE || TARGET_PAIRED_FLOAT);'), (4, 1, u'+  gcc_assert (attr == RS6000_BTC_UNARY')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TARGET_ALTIVEC || TARGET_VSX || TARGET_SPE || TARGET_PAIRED_FLOAT);'), (4, 1, u'+  gcc_assert (attr == RS6000_BTC_UNARY')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t\t  gcc_assert (errorcount || sorrycount);'), (17, 1, u'+\t\t  gcc_assert (cp_unevaluated_operand || TREE_STATIC (r)')]
===========================================
===========================================
Total add: 11
Total del: 7
Header: tsubst_copy
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t\t  gcc_assert (errorcount || sorrycount);'), (17, 1, u'+\t\t  gcc_assert (cp_unevaluated_operand || TREE_STATIC (r)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t\t  gcc_assert (errorcount || sorrycount);'), (17, 1, u'+\t\t  gcc_assert (cp_unevaluated_operand || TREE_STATIC (r)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-   gcc_assert (expr && expr->expr_type == EXPR_VARIABLE);'), (11, 1, u'+  gcc_assert (expr && expr->expr_type == EXPR_VARIABLE);'), (17, 1, u'+  gcc_assert (caf_decl);'), (36, 2, u'-   gcc_assert (caf_decl != NULL_TREE);'), (51, 1, u'+  gcc_assert (found && caf_decl);')]
===========================================
===========================================
Total add: 32
Total del: 15
Header: get_tree_for_caf_expr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-   gcc_assert (expr && expr->expr_type == EXPR_VARIABLE);'), (11, 1, u'+  gcc_assert (expr && expr->expr_type == EXPR_VARIABLE);'), (17, 1, u'+  gcc_assert (caf_decl);'), (36, 2, u'-   gcc_assert (caf_decl != NULL_TREE);'), (51, 1, u'+  gcc_assert (found && caf_decl);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-   gcc_assert (expr && expr->expr_type == EXPR_VARIABLE);'), (11, 1, u'+  gcc_assert (expr && expr->expr_type == EXPR_VARIABLE);'), (17, 1, u'+  gcc_assert (caf_decl);'), (36, 2, u'-   gcc_assert (caf_decl != NULL_TREE);'), (51, 1, u'+  gcc_assert (found && caf_decl);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (parmse.expr)));'), (15, 2, u'-\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE'), (19, 1, u'+\t\tgcc_assert (!POINTER_TYPE_P (TREE_TYPE (tmp2)));'), (22, 1, u'+\t\t  gcc_assert (POINTER_TYPE_P (TREE_TYPE (tmp2)));'), (25, 1, u'+\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (tmp2)));'), (34, 2, u'-\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (parmse.expr)));'), (36, 1, u'+\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (tmp2)));')]
===========================================
===========================================
Total add: 19
Total del: 11
Header: gfc_conv_procedure_call
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (parmse.expr)));'), (15, 2, u'-\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE'), (19, 1, u'+\t\tgcc_assert (!POINTER_TYPE_P (TREE_TYPE (tmp2)));'), (22, 1, u'+\t\t  gcc_assert (POINTER_TYPE_P (TREE_TYPE (tmp2)));'), (25, 1, u'+\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (tmp2)));'), (34, 2, u'-\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (parmse.expr)));'), (36, 1, u'+\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (tmp2)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (parmse.expr)));'), (15, 2, u'-\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE'), (19, 1, u'+\t\tgcc_assert (!POINTER_TYPE_P (TREE_TYPE (tmp2)));'), (22, 1, u'+\t\t  gcc_assert (POINTER_TYPE_P (TREE_TYPE (tmp2)));'), (25, 1, u'+\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (tmp2)));'), (34, 2, u'-\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (parmse.expr)));'), (36, 1, u'+\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (tmp2)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+  go_assert(fn != NULL);')]
===========================================
===========================================
Total add: 22
Total del: 21
Header: Heap_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+  go_assert(fn != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+  go_assert(fn != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  go_assert(val_type_tree != error_mark_node);'), (17, 2, u'-      go_assert(struct_field_tree != NULL_TREE);')]
===========================================
===========================================
Total add: 15
Total del: 16
Header: Struct_field_offset_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  go_assert(val_type_tree != error_mark_node);'), (17, 2, u'-      go_assert(struct_field_tree != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  go_assert(val_type_tree != error_mark_node);'), (17, 2, u'-      go_assert(struct_field_tree != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TARGET_ALTIVEC || TARGET_VSX || TARGET_SPE || TARGET_PAIRED_FLOAT);'), (4, 1, u'+  gcc_assert (attr == RS6000_BTC_UNARY')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: rs6000_expand_builtin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TARGET_ALTIVEC || TARGET_VSX || TARGET_SPE || TARGET_PAIRED_FLOAT);'), (4, 1, u'+  gcc_assert (attr == RS6000_BTC_UNARY')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TARGET_ALTIVEC || TARGET_VSX || TARGET_SPE || TARGET_PAIRED_FLOAT);'), (4, 1, u'+  gcc_assert (attr == RS6000_BTC_UNARY')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t\t  gcc_assert (errorcount || sorrycount);'), (17, 1, u'+\t\t  gcc_assert (cp_unevaluated_operand || TREE_STATIC (r)')]
===========================================
===========================================
Total add: 11
Total del: 7
Header: tsubst_copy
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t\t  gcc_assert (errorcount || sorrycount);'), (17, 1, u'+\t\t  gcc_assert (cp_unevaluated_operand || TREE_STATIC (r)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t\t  gcc_assert (errorcount || sorrycount);'), (17, 1, u'+\t\t  gcc_assert (cp_unevaluated_operand || TREE_STATIC (r)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (nelt == (nelt & -nelt));')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: aarch64_expand_vec_perm_const_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (nelt == (nelt & -nelt));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (nelt == (nelt & -nelt));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+  go_assert(fn != NULL);')]
===========================================
===========================================
Total add: 22
Total del: 21
Header: Heap_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+  go_assert(fn != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 1, u'+  go_assert(fn != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (parmse.expr)));'), (15, 2, u'-\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE'), (19, 1, u'+\t\tgcc_assert (!POINTER_TYPE_P (TREE_TYPE (tmp2)));'), (22, 1, u'+\t\t  gcc_assert (POINTER_TYPE_P (TREE_TYPE (tmp2)));'), (25, 1, u'+\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (tmp2)));'), (34, 2, u'-\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (parmse.expr)));'), (36, 1, u'+\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (tmp2)));')]
===========================================
===========================================
Total add: 19
Total del: 11
Header: gfc_conv_procedure_call
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (parmse.expr)));'), (15, 2, u'-\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE'), (19, 1, u'+\t\tgcc_assert (!POINTER_TYPE_P (TREE_TYPE (tmp2)));'), (22, 1, u'+\t\t  gcc_assert (POINTER_TYPE_P (TREE_TYPE (tmp2)));'), (25, 1, u'+\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (tmp2)));'), (34, 2, u'-\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (parmse.expr)));'), (36, 1, u'+\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (tmp2)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (parmse.expr)));'), (15, 2, u'-\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE'), (19, 1, u'+\t\tgcc_assert (!POINTER_TYPE_P (TREE_TYPE (tmp2)));'), (22, 1, u'+\t\t  gcc_assert (POINTER_TYPE_P (TREE_TYPE (tmp2)));'), (25, 1, u'+\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (tmp2)));'), (34, 2, u'-\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (parmse.expr)));'), (36, 1, u'+\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (tmp2)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-   gcc_assert (expr && expr->expr_type == EXPR_VARIABLE);'), (11, 1, u'+  gcc_assert (expr && expr->expr_type == EXPR_VARIABLE);'), (17, 1, u'+  gcc_assert (caf_decl);'), (36, 2, u'-   gcc_assert (caf_decl != NULL_TREE);'), (51, 1, u'+  gcc_assert (found && caf_decl);')]
===========================================
===========================================
Total add: 32
Total del: 15
Header: get_tree_for_caf_expr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-   gcc_assert (expr && expr->expr_type == EXPR_VARIABLE);'), (11, 1, u'+  gcc_assert (expr && expr->expr_type == EXPR_VARIABLE);'), (17, 1, u'+  gcc_assert (caf_decl);'), (36, 2, u'-   gcc_assert (caf_decl != NULL_TREE);'), (51, 1, u'+  gcc_assert (found && caf_decl);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-   gcc_assert (expr && expr->expr_type == EXPR_VARIABLE);'), (11, 1, u'+  gcc_assert (expr && expr->expr_type == EXPR_VARIABLE);'), (17, 1, u'+  gcc_assert (caf_decl);'), (36, 2, u'-   gcc_assert (caf_decl != NULL_TREE);'), (51, 1, u'+  gcc_assert (found && caf_decl);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (HOST_BITS_PER_WIDE_INT == 2*HOST_BITS_PER_LONG);'), (3, 1, u'+      gcc_assert (HOST_BITS_PER_WIDE_INT == 2 * HOST_BITS_PER_LONG);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: real_to_integer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (HOST_BITS_PER_WIDE_INT == 2*HOST_BITS_PER_LONG);'), (3, 1, u'+      gcc_assert (HOST_BITS_PER_WIDE_INT == 2 * HOST_BITS_PER_LONG);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (HOST_BITS_PER_WIDE_INT == 2*HOST_BITS_PER_LONG);'), (3, 1, u'+      gcc_assert (HOST_BITS_PER_WIDE_INT == 2 * HOST_BITS_PER_LONG);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (tem == last_case);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: lower_try_finally_switch
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (tem == last_case);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (tem == last_case);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-      gcc_assert (fn && (!noex || is_overloaded_fn (noex)));'), (19, 1, u'+  gcc_assert (!DEFERRED_NOEXCEPT_SPEC_P (add));'), (24, 2, u'-    gcc_checking_assert (!TREE_PURPOSE (add)'), (27, 1, u'+  gcc_checking_assert (!TREE_PURPOSE (add)')]
===========================================
===========================================
Total add: 11
Total del: 15
Header: merge_exception_specifiers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-      gcc_assert (fn && (!noex || is_overloaded_fn (noex)));'), (19, 1, u'+  gcc_assert (!DEFERRED_NOEXCEPT_SPEC_P (add));'), (24, 2, u'-    gcc_checking_assert (!TREE_PURPOSE (add)'), (27, 1, u'+  gcc_checking_assert (!TREE_PURPOSE (add)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-      gcc_assert (fn && (!noex || is_overloaded_fn (noex)));'), (19, 1, u'+  gcc_assert (!DEFERRED_NOEXCEPT_SPEC_P (add));'), (24, 2, u'-    gcc_checking_assert (!TREE_PURPOSE (add)'), (27, 1, u'+  gcc_checking_assert (!TREE_PURPOSE (add)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (!dom_info_available_p (CDI_DOMINATORS));'), (5, 1, u'+\t  gcc_assert (!dom_info_available_p (CDI_POST_DOMINATORS));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: release_function_body
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (!dom_info_available_p (CDI_DOMINATORS));'), (5, 1, u'+\t  gcc_assert (!dom_info_available_p (CDI_POST_DOMINATORS));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (!dom_info_available_p (CDI_DOMINATORS));'), (5, 1, u'+\t  gcc_assert (!dom_info_available_p (CDI_POST_DOMINATORS));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(59, 1, u'+      gcc_assert (dom_info_state (fn, CDI_DOMINATORS) == pre_verify_state);'), (60, 1, u'+      gcc_assert (dom_info_state (fn, CDI_POST_DOMINATORS) == pre_verify_pstate);')]
===========================================
===========================================
Total add: 30
Total del: 26
Header: execute_function_todo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(59, 1, u'+      gcc_assert (dom_info_state (fn, CDI_DOMINATORS) == pre_verify_state);'), (60, 1, u'+      gcc_assert (dom_info_state (fn, CDI_POST_DOMINATORS) == pre_verify_pstate);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(59, 1, u'+      gcc_assert (dom_info_state (fn, CDI_DOMINATORS) == pre_verify_state);'), (60, 1, u'+      gcc_assert (dom_info_state (fn, CDI_POST_DOMINATORS) == pre_verify_pstate);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      y = ASSERT_EXPR <y, x <= y>'), (3, 1, u'+      y = ASSERT_EXPR <y, x >= y>')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: process_assert_insertions
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      y = ASSERT_EXPR <y, x <= y>'), (3, 1, u'+      y = ASSERT_EXPR <y, x >= y>')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      y = ASSERT_EXPR <y, x <= y>'), (3, 1, u'+      y = ASSERT_EXPR <y, x >= y>')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (TYPE_PRECISION (gnu_type) <= 64);')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: UI_From_gnu
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (TYPE_PRECISION (gnu_type) <= 64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (TYPE_PRECISION (gnu_type) <= 64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (dom_computed[0] == DOM_NONE);'), (3, 2, u'-\t  gcc_assert (dom_computed[1] == DOM_NONE);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: release_function_body
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (dom_computed[0] == DOM_NONE);'), (3, 2, u'-\t  gcc_assert (dom_computed[1] == DOM_NONE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (dom_computed[0] == DOM_NONE);'), (3, 2, u'-\t  gcc_assert (dom_computed[1] == DOM_NONE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert ((cfun->curr_properties & props) == props);'), (7, 1, u'+  gcc_assert ((fn->curr_properties & props) == props);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: clear_last_verified
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert ((cfun->curr_properties & props) == props);'), (7, 1, u'+  gcc_assert ((fn->curr_properties & props) == props);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert ((cfun->curr_properties & props) == props);'), (7, 1, u'+  gcc_assert ((fn->curr_properties & props) == props);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (width < 4 * MAX_BITSIZE_MODE_ANY_INT);'), (3, 2, u'-  gcc_assert (prec <= 4 * MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Total add: 0
Total del: 3
Header: wi::mask
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (width < 4 * MAX_BITSIZE_MODE_ANY_INT);'), (3, 2, u'-  gcc_assert (prec <= 4 * MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (width < 4 * MAX_BITSIZE_MODE_ANY_INT);'), (3, 2, u'-  gcc_assert (prec <= 4 * MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (!CONST_SCALAR_INT_P (x) && GET_CODE (x) != CONST_FIXED);')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: cselib_hasher::equal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (!CONST_SCALAR_INT_P (x) && GET_CODE (x) != CONST_FIXED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (!CONST_SCALAR_INT_P (x) && GET_CODE (x) != CONST_FIXED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (mpz_scan0 (x, bitsize-1) == ULONG_MAX);'), (7, 1, u'+\tgcc_assert (mpz_scan0 (x, bitsize-1) == ULONG_MAX);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: convert_mpz_to_unsigned
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (mpz_scan0 (x, bitsize-1) == ULONG_MAX);'), (7, 1, u'+\tgcc_assert (mpz_scan0 (x, bitsize-1) == ULONG_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (mpz_scan0 (x, bitsize-1) == ULONG_MAX);'), (7, 1, u'+\tgcc_assert (mpz_scan0 (x, bitsize-1) == ULONG_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (mpz_scan1 (x, bitsize) == ULONG_MAX);'), (7, 1, u'+    gcc_assert (mpz_scan1 (x, bitsize) == ULONG_MAX);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: convert_mpz_to_signed
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (mpz_scan1 (x, bitsize) == ULONG_MAX);'), (7, 1, u'+    gcc_assert (mpz_scan1 (x, bitsize) == ULONG_MAX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (mpz_scan1 (x, bitsize) == ULONG_MAX);'), (7, 1, u'+    gcc_assert (mpz_scan1 (x, bitsize) == ULONG_MAX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  go_assert(function != NULL);'), (3, 1, u'+  gcc_assert(function != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Gcc_backend::temporary_variable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  go_assert(function != NULL);'), (3, 1, u'+  gcc_assert(function != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  go_assert(function != NULL);'), (3, 1, u'+  gcc_assert(function != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+          gcc_assert(defs[i] != NULL);')]
===========================================
===========================================
Total add: 82
Total del: 0
Header: Gcc_backend::function_set_body
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+          gcc_assert(defs[i] != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+          gcc_assert(defs[i] != NULL);')]
===========================================
Class:  class Unary_expression : public Expression { 
Class:   class Find_var : public Traverse { 
Class:     class Var_init { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  go_assert(this->fndecl_ != NULL);')]
===========================================
===========================================
Total add: 0
Total del: 9
Header: Function_declaration::get_or_make_decl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  go_assert(this->fndecl_ != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  go_assert(this->fndecl_ != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  go_assert(this->is_main_package());')]
===========================================
===========================================
Total add: 158
Total del: 0
Header: Gogo::current_bindings
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  go_assert(this->is_main_package());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  go_assert(this->is_main_package());')]
===========================================
Class:   class Find_var : public Traverse { 
Class:     class Var_init { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  go_assert(this->fndecl_ != NULL);')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: Function::get_or_make_decl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  go_assert(this->fndecl_ != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  go_assert(this->fndecl_ != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  go_assert(function != NULL);')]
===========================================
===========================================
Total add: 2
Total del: 8
Header: Temporary_statement::do_get_backend
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  go_assert(function != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  go_assert(function != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (!contains_subprogram_definition (die));')]
===========================================
===========================================
Total add: 4
Total del: 5
Header: should_move_die_to_comdat
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (!contains_subprogram_definition (die));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (!contains_subprogram_definition (die));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (fi->is_fn_info);')]
===========================================
===========================================
Total add: 0
Total del: 15
Header: ipa_pta_execute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (fi->is_fn_info);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (fi->is_fn_info);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (c);')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: gimplify_omp_for
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (c);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (c);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t      gcc_assert (datum != NULL_RTX')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: expand_call
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t      gcc_assert (datum != NULL_RTX')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t      gcc_assert (datum != NULL_RTX')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (GET_CODE (datum) == SYMBOL_REF);')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: emit_library_call_value_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (GET_CODE (datum) == SYMBOL_REF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (GET_CODE (datum) == SYMBOL_REF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t    gcc_assert (call_insn == NULL_RTX);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: try_split
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t    gcc_assert (call_insn == NULL_RTX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t    gcc_assert (call_insn == NULL_RTX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (call_insn != NULL_RTX);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: try_split
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (call_insn != NULL_RTX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (call_insn != NULL_RTX);')]
===========================================
Class: template <class T> class Foo { class Foo 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (!stmt || is_a <cgraph_node> (referring_node));'), (3, 1, u'+  gcc_checking_assert (!stmt || is_a <cgraph_node *> (referring_node));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ipa_record_reference
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (!stmt || is_a <cgraph_node> (referring_node));'), (3, 1, u'+  gcc_checking_assert (!stmt || is_a <cgraph_node *> (referring_node));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (!stmt || is_a <cgraph_node> (referring_node));'), (3, 1, u'+  gcc_checking_assert (!stmt || is_a <cgraph_node *> (referring_node));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (node->aux || !is_a <cgraph_node> (node));'), (3, 1, u'+    gcc_assert (node->aux || !is_a <cgraph_node *> (node));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: input_cgraph_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (node->aux || !is_a <cgraph_node> (node));'), (3, 1, u'+    gcc_assert (node->aux || !is_a <cgraph_node *> (node));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (node->aux || !is_a <cgraph_node> (node));'), (3, 1, u'+    gcc_assert (node->aux || !is_a <cgraph_node *> (node));')]
===========================================
Class: class pass_rtl_unswitch : public rtl_opt_pass { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+      gcc_assert (cinsn);'), (24, 1, u'+      gcc_assert (GET_CODE (cond) == comp);'), (25, 1, u'+      gcc_assert (rtx_equal_p (op0, XEXP (cond, 0)));'), (26, 1, u'+      gcc_assert (rtx_equal_p (op1, XEXP (cond, 1)));'), (29, 1, u'+      gcc_assert (JUMP_P (jump));'), (36, 1, u'+      gcc_assert (!cinsn);'), (43, 1, u'+      gcc_assert (JUMP_P (jump));')]
===========================================
===========================================
Total add: 53
Total del: 0
Header: split_edge_and_insert
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+      gcc_assert (cinsn);'), (24, 1, u'+      gcc_assert (GET_CODE (cond) == comp);'), (25, 1, u'+      gcc_assert (rtx_equal_p (op0, XEXP (cond, 0)));'), (26, 1, u'+      gcc_assert (rtx_equal_p (op1, XEXP (cond, 1)));'), (29, 1, u'+      gcc_assert (JUMP_P (jump));'), (36, 1, u'+      gcc_assert (!cinsn);'), (43, 1, u'+      gcc_assert (JUMP_P (jump));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+      gcc_assert (cinsn);'), (24, 1, u'+      gcc_assert (GET_CODE (cond) == comp);'), (25, 1, u'+      gcc_assert (rtx_equal_p (op0, XEXP (cond, 0)));'), (26, 1, u'+      gcc_assert (rtx_equal_p (op1, XEXP (cond, 1)));'), (29, 1, u'+      gcc_assert (JUMP_P (jump));'), (36, 1, u'+      gcc_assert (!cinsn);'), (43, 1, u'+      gcc_assert (JUMP_P (jump));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (elt_size % (HOST_BITS_PER_WIDE_INT/BITS_PER_UNIT) == 0);'), (3, 1, u'+  gcc_assert (elt_size % (HOST_BITS_PER_WIDE_INT / BITS_PER_UNIT) == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: insert_wide_int
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (elt_size % (HOST_BITS_PER_WIDE_INT/BITS_PER_UNIT) == 0);'), (3, 1, u'+  gcc_assert (elt_size % (HOST_BITS_PER_WIDE_INT / BITS_PER_UNIT) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (elt_size % (HOST_BITS_PER_WIDE_INT/BITS_PER_UNIT) == 0);'), (3, 1, u'+  gcc_assert (elt_size % (HOST_BITS_PER_WIDE_INT / BITS_PER_UNIT) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (GET_MODE_PRECISION (outer_submode) <= MAX_BITSIZE_MODE_ANY_INT);'), (3, 1, u'+\t    gcc_assert (GET_MODE_PRECISION (outer_submode)')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: simplify_immed_subreg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (GET_MODE_PRECISION (outer_submode) <= MAX_BITSIZE_MODE_ANY_INT);'), (3, 1, u'+\t    gcc_assert (GET_MODE_PRECISION (outer_submode)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (GET_MODE_PRECISION (outer_submode) <= MAX_BITSIZE_MODE_ANY_INT);'), (3, 1, u'+\t    gcc_assert (GET_MODE_PRECISION (outer_submode)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);'), (3, 1, u'+      STATIC_ASSERT (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: make_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);'), (3, 1, u'+      STATIC_ASSERT (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);'), (3, 1, u'+      STATIC_ASSERT (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  go_assert(function != NULL);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: Gcc_backend::temporary_variable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  go_assert(function != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  go_assert(function != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t  gcc_assert(current_function_decl != NULL_TREE);')]
===========================================
===========================================
Total add: 1
Total del: 10
Header: Gcc_backend::temporary_variable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t  gcc_assert(current_function_decl != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t  gcc_assert(current_function_decl != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      go_assert(this->package_ != NULL);')]
===========================================
===========================================
Total add: 0
Total del: 26
Header: Gogo::define_builtin_function_trees
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      go_assert(this->package_ != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      go_assert(this->package_ != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+      go_assert(saw_errors());')]
===========================================
===========================================
Total add: 13
Total del: 15
Header: Gogo::write_initialization_function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+      go_assert(saw_errors());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+      go_assert(saw_errors());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  go_assert(function != NULL);')]
===========================================
===========================================
Total add: 3
Total del: 7
Header: Block::get_backend
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  go_assert(function != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  go_assert(function != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-\t      gcc_assert (TREE_PUBLIC (tinfo) && !DECL_COMDAT (tinfo));')]
===========================================
===========================================
Total add: 3
Total del: 36
Header: emit_support_tinfos
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-\t      gcc_assert (TREE_PUBLIC (tinfo) && !DECL_COMDAT (tinfo));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-\t      gcc_assert (TREE_PUBLIC (tinfo) && !DECL_COMDAT (tinfo));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!old_version_node->ipa_transforms_to_apply.exists ());')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: cgraph_function_versioning
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!old_version_node->ipa_transforms_to_apply.exists ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!old_version_node->ipa_transforms_to_apply.exists ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\tgcc_assert (mode == Pmode || mode == ptr_mode);')]
===========================================
===========================================
Total add: 15
Total del: 3
Header: aarch64_load_symref_appropriately
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\tgcc_assert (mode == Pmode || mode == ptr_mode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\tgcc_assert (mode == Pmode || mode == ptr_mode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+\t    gcc_assert (mode == Pmode);')]
===========================================
===========================================
Total add: 27
Total del: 3
Header: aarch64_load_symref_appropriately
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+\t    gcc_assert (mode == Pmode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+\t    gcc_assert (mode == Pmode);')]
===========================================
Class: class A { class A 
Class:class pass_sanopt : public gimple_opt_pass class pass_sanopt : public gimple_opt_pass
Class:class pass_sanopt : public gimple_opt_pass class pass_sanopt : public gimple_opt_pass
Class:class pass_duplicate_computed_gotos : public rtl_opt_pass class pass_duplicate_computed_gotos : public rtl_opt_pass
Class:class pass_duplicate_computed_gotos : public rtl_opt_pass class pass_duplicate_computed_gotos : public rtl_opt_pass
Class:class pass_partition_blocks : public rtl_opt_pass class pass_partition_blocks : public rtl_opt_pass
Class:class pass_partition_blocks : public rtl_opt_pass class pass_partition_blocks : public rtl_opt_pass
Class:class pass_expand : public rtl_opt_pass class pass_expand : public rtl_opt_pass
Class:class pass_expand : public rtl_opt_pass class pass_expand : public rtl_opt_pass
Class:class pass_build_cgraph_edges : public gimple_opt_pass class pass_build_cgraph_edges : public gimple_opt_pass
Class:class pass_build_cgraph_edges : public gimple_opt_pass class pass_build_cgraph_edges : public gimple_opt_pass
Class:class pass_resolve_sw_modes : public rtl_opt_pass class pass_resolve_sw_modes : public rtl_opt_pass
Class:class pass_resolve_sw_modes : public rtl_opt_pass class pass_resolve_sw_modes : public rtl_opt_pass
Class:class pass_match_asm_constraints : public rtl_opt_pass class pass_match_asm_constraints : public rtl_opt_pass
Class:class pass_match_asm_constraints : public rtl_opt_pass class pass_match_asm_constraints : public rtl_opt_pass
Class:class pass_strength_reduction : public gimple_opt_pass class pass_strength_reduction : public gimple_opt_pass
Class:class pass_strength_reduction : public gimple_opt_pass class pass_strength_reduction : public gimple_opt_pass
Class:class pass_early_inline : public gimple_opt_pass class pass_early_inline : public gimple_opt_pass
Class:class pass_early_inline : public gimple_opt_pass class pass_early_inline : public gimple_opt_pass
Class:class pass_local_pure_const : public gimple_opt_pass class pass_local_pure_const : public gimple_opt_pass
Class:class pass_local_pure_const : public gimple_opt_pass class pass_local_pure_const : public gimple_opt_pass
Class:class pass_call_cdce : public gimple_opt_pass class pass_call_cdce : public gimple_opt_pass
Class:class pass_call_cdce : public gimple_opt_pass class pass_call_cdce : public gimple_opt_pass
Class:class pass_merge_phi : public gimple_opt_pass class pass_merge_phi : public gimple_opt_pass
Class:class pass_merge_phi : public gimple_opt_pass class pass_merge_phi : public gimple_opt_pass
Class:class pass_lower_eh : public gimple_opt_pass class pass_lower_eh : public gimple_opt_pass
Class:class pass_lower_eh : public gimple_opt_pass class pass_lower_eh : public gimple_opt_pass
Class:class pass_lower_eh_dispatch : public gimple_opt_pass class pass_lower_eh_dispatch : public gimple_opt_pass
Class:class pass_lower_eh_dispatch : public gimple_opt_pass class pass_lower_eh_dispatch : public gimple_opt_pass
Class:class pass_build_ssa : public gimple_opt_pass class pass_build_ssa : public gimple_opt_pass
Class:class pass_build_ssa : public gimple_opt_pass class pass_build_ssa : public gimple_opt_pass
Class:class pass_loop_distribution : public gimple_opt_pass class pass_loop_distribution : public gimple_opt_pass
Class:class pass_loop_distribution : public gimple_opt_pass class pass_loop_distribution : public gimple_opt_pass
Class:class pass_nrv : public gimple_opt_pass class pass_nrv : public gimple_opt_pass
Class:class pass_nrv : public gimple_opt_pass class pass_nrv : public gimple_opt_pass
Class:class pass_object_sizes : public gimple_opt_pass class pass_object_sizes : public gimple_opt_pass
Class:class pass_object_sizes : public gimple_opt_pass class pass_object_sizes : public gimple_opt_pass
Class:class pass_fold_builtins : public gimple_opt_pass class pass_fold_builtins : public gimple_opt_pass
Class:class pass_fold_builtins : public gimple_opt_pass class pass_fold_builtins : public gimple_opt_pass
Class:class pass_rename_ssa_copies : public gimple_opt_pass class pass_rename_ssa_copies : public gimple_opt_pass
Class:class pass_rename_ssa_copies : public gimple_opt_pass class pass_rename_ssa_copies : public gimple_opt_pass
Class:class pass_dominator : public gimple_opt_pass class pass_dominator : public gimple_opt_pass
Class:class pass_dominator : public gimple_opt_pass class pass_dominator : public gimple_opt_pass
Class:class pass_phi_only_cprop : public gimple_opt_pass class pass_phi_only_cprop : public gimple_opt_pass
Class:class pass_phi_only_cprop : public gimple_opt_pass class pass_phi_only_cprop : public gimple_opt_pass
Class:class pass_dse : public gimple_opt_pass class pass_dse : public gimple_opt_pass
Class:class pass_dse : public gimple_opt_pass class pass_dse : public gimple_opt_pass
Class:class pass_forwprop : public gimple_opt_pass class pass_forwprop : public gimple_opt_pass
Class:class pass_forwprop : public gimple_opt_pass class pass_forwprop : public gimple_opt_pass
Class:class pass_tree_ifcombine : public gimple_opt_pass class pass_tree_ifcombine : public gimple_opt_pass
Class:class pass_tree_ifcombine : public gimple_opt_pass class pass_tree_ifcombine : public gimple_opt_pass
Class:class pass_ch : public gimple_opt_pass class pass_ch : public gimple_opt_pass
Class:class pass_ch : public gimple_opt_pass class pass_ch : public gimple_opt_pass
Class:class pass_cse_reciprocals : public gimple_opt_pass class pass_cse_reciprocals : public gimple_opt_pass
Class:class pass_cse_reciprocals : public gimple_opt_pass class pass_cse_reciprocals : public gimple_opt_pass
Class:class pass_cse_sincos : public gimple_opt_pass class pass_cse_sincos : public gimple_opt_pass
Class:class pass_cse_sincos : public gimple_opt_pass class pass_cse_sincos : public gimple_opt_pass
Class:class pass_optimize_bswap : public gimple_opt_pass class pass_optimize_bswap : public gimple_opt_pass
Class:class pass_optimize_bswap : public gimple_opt_pass class pass_optimize_bswap : public gimple_opt_pass
Class:class pass_optimize_widening_mul : public gimple_opt_pass class pass_optimize_widening_mul : public gimple_opt_pass
Class:class pass_optimize_widening_mul : public gimple_opt_pass class pass_optimize_widening_mul : public gimple_opt_pass
Class:class pass_phiprop : public gimple_opt_pass class pass_phiprop : public gimple_opt_pass
Class:class pass_phiprop : public gimple_opt_pass class pass_phiprop : public gimple_opt_pass
Class:class pass_pre : public gimple_opt_pass class pass_pre : public gimple_opt_pass
Class:class pass_pre : public gimple_opt_pass class pass_pre : public gimple_opt_pass
Class:class pass_late_warn_uninitialized : public gimple_opt_pass class pass_late_warn_uninitialized : public gimple_opt_pass
Class:class pass_late_warn_uninitialized : public gimple_opt_pass class pass_late_warn_uninitialized : public gimple_opt_pass
Class:class pass_stdarg : public gimple_opt_pass class pass_stdarg : public gimple_opt_pass
Class:class pass_stdarg : public gimple_opt_pass class pass_stdarg : public gimple_opt_pass
Class:class pass_convert_switch : public gimple_opt_pass class pass_convert_switch : public gimple_opt_pass
Class:class pass_convert_switch : public gimple_opt_pass class pass_convert_switch : public gimple_opt_pass
Class:class pass_ubsan : public gimple_opt_pass class pass_ubsan : public gimple_opt_pass
Class:class pass_ubsan : public gimple_opt_pass class pass_ubsan : public gimple_opt_pass
Class:class pass_web : public rtl_opt_pass class pass_web : public rtl_opt_pass
Class:class pass_web : public rtl_opt_pass class pass_web : public rtl_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    gcc_assert (!complete);'), (10, 1, u'+      gcc_assert (in_lto_p || context.maybe_derived_type);')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: possible_polymorphic_call_targets
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    gcc_assert (!complete);'), (10, 1, u'+      gcc_assert (in_lto_p || context.maybe_derived_type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-    gcc_assert (!complete);'), (10, 1, u'+      gcc_assert (in_lto_p || context.maybe_derived_type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!old_version_node->ipa_transforms_to_apply.exists ());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: cgraph_function_versioning
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!old_version_node->ipa_transforms_to_apply.exists ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!old_version_node->ipa_transforms_to_apply.exists ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!old_node->ipa_transforms_to_apply.exists ());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ipa_tm_create_version
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!old_node->ipa_transforms_to_apply.exists ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!old_node->ipa_transforms_to_apply.exists ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert (!gnu_low  || TREE_CODE (gnu_low)  == INTEGER_CST);'), (4, 2, u'-\t  gcc_assert (!gnu_high || TREE_CODE (gnu_high) == INTEGER_CST);')]
===========================================
===========================================
Total add: 14
Total del: 7
Header: Case_Statement_to_gnu
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert (!gnu_low  || TREE_CODE (gnu_low)  == INTEGER_CST);'), (4, 2, u'-\t  gcc_assert (!gnu_high || TREE_CODE (gnu_high) == INTEGER_CST);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert (!gnu_low  || TREE_CODE (gnu_low)  == INTEGER_CST);'), (4, 2, u'-\t  gcc_assert (!gnu_high || TREE_CODE (gnu_high) == INTEGER_CST);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t  gcc_assert (!gnu_low  || TREE_CODE (gnu_low)  == INTEGER_CST);'), (18, 1, u'+\t  gcc_assert (!gnu_high || TREE_CODE (gnu_high) == INTEGER_CST);')]
===========================================
===========================================
Total add: 7
Total del: 14
Header: Case_Statement_to_gnu
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t  gcc_assert (!gnu_low  || TREE_CODE (gnu_low)  == INTEGER_CST);'), (18, 1, u'+\t  gcc_assert (!gnu_high || TREE_CODE (gnu_high) == INTEGER_CST);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t  gcc_assert (!gnu_low  || TREE_CODE (gnu_low)  == INTEGER_CST);'), (18, 1, u'+\t  gcc_assert (!gnu_high || TREE_CODE (gnu_high) == INTEGER_CST);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (cfun == NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ipa_pta_execute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (cfun == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (cfun == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-      go_assert(TREE_CODE(lhs_type_tree) == RECORD_TYPE);'), (16, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (23, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (30, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (51, 2, u'-      go_assert(POINTER_TYPE_P(lhs_type_tree));')]
===========================================
===========================================
Total add: 20
Total del: 52
Header: Expression::convert_for_assignment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-      go_assert(TREE_CODE(lhs_type_tree) == RECORD_TYPE);'), (16, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (23, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (30, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (51, 2, u'-      go_assert(POINTER_TYPE_P(lhs_type_tree));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-      go_assert(TREE_CODE(lhs_type_tree) == RECORD_TYPE);'), (16, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (23, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (30, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (51, 2, u'-      go_assert(POINTER_TYPE_P(lhs_type_tree));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(int_size_in_bytes(lhs_type_tree)'), (10, 2, u'-      go_assert(useless_type_conversion_p(lhs_type_tree, TREE_TYPE(rhs_tree)));')]
===========================================
===========================================
Total add: 6
Total del: 14
Header: Expression::convert_for_assignment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(int_size_in_bytes(lhs_type_tree)'), (10, 2, u'-      go_assert(useless_type_conversion_p(lhs_type_tree, TREE_TYPE(rhs_tree)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(int_size_in_bytes(lhs_type_tree)'), (10, 2, u'-      go_assert(useless_type_conversion_p(lhs_type_tree, TREE_TYPE(rhs_tree)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (42, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__object") == 0);')]
===========================================
===========================================
Total add: 43
Total del: 98
Header: Expression::convert_type_to_interface
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (42, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__object") == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (42, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__object") == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      static tree assert_interface_decl;'), (6, 2, u'-      tree call = Gogo::call_builtin(&assert_interface_decl,'), (18, 2, u'-      TREE_NOTHROW(assert_interface_decl) = 0;'), (22, 1, u'+          Runtime::make_call(Runtime::ASSERT_INTERFACE, location, 2,')]
===========================================
===========================================
Total add: 3
Total del: 19
Header: Expression::convert_interface_to_interface
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      static tree assert_interface_decl;'), (6, 2, u'-      tree call = Gogo::call_builtin(&assert_interface_decl,'), (18, 2, u'-      TREE_NOTHROW(assert_interface_decl) = 0;'), (22, 1, u'+          Runtime::make_call(Runtime::ASSERT_INTERFACE, location, 2,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      static tree assert_interface_decl;'), (6, 2, u'-      tree call = Gogo::call_builtin(&assert_interface_decl,'), (18, 2, u'-      TREE_NOTHROW(assert_interface_decl) = 0;'), (22, 1, u'+          Runtime::make_call(Runtime::ASSERT_INTERFACE, location, 2,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),')]
===========================================
===========================================
Total add: 2
Total del: 5
Header: Expression::convert_interface_to_interface
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__methods")')]
===========================================
===========================================
Total add: 3
Total del: 22
Header: Expression::convert_interface_to_interface
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__methods")')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__methods")')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__object") == 0);'), (9, 2, u'-  go_assert(TREE_CODE(rhs_type_tree) == RECORD_TYPE);'), (11, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(rhs_field)), "__object") == 0);')]
===========================================
===========================================
Total add: 7
Total del: 26
Header: Expression::convert_interface_to_interface
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__object") == 0);'), (9, 2, u'-  go_assert(TREE_CODE(rhs_type_tree) == RECORD_TYPE);'), (11, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(rhs_field)), "__object") == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__object") == 0);'), (9, 2, u'-  go_assert(TREE_CODE(rhs_type_tree) == RECORD_TYPE);'), (11, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(rhs_field)), "__object") == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 2, u'-  go_assert(TREE_CODE(rhs_type_tree) == RECORD_TYPE);'), (49, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(rhs_field)), "__object") == 0);')]
===========================================
===========================================
Total add: 14
Total del: 36
Header: Expression::convert_interface_to_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 2, u'-  go_assert(TREE_CODE(rhs_type_tree) == RECORD_TYPE);'), (49, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(rhs_field)), "__object") == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 2, u'-  go_assert(TREE_CODE(rhs_type_tree) == RECORD_TYPE);'), (49, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(rhs_field)), "__object") == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+          go_assert(saw_errors());'), (61, 2, u'-  go_assert(val_type_size != -1 && bound_type_size != -1);')]
===========================================
===========================================
Total add: 55
Total del: 38
Header: Expression::backend_numeric_constant_expression
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+          go_assert(saw_errors());'), (61, 2, u'-  go_assert(val_type_size != -1 && bound_type_size != -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+          go_assert(saw_errors());'), (61, 2, u'-  go_assert(val_type_size != -1 && bound_type_size != -1);')]
===========================================
Class:   class String_info_expression : public Expression { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+      go_assert(Type::are_convertible(type, expr_type, NULL));')]
===========================================
===========================================
Total add: 27
Total del: 21
Header: Type_conversion_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+      go_assert(Type::are_convertible(type, expr_type, NULL));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+      go_assert(Type::are_convertible(type, expr_type, NULL));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    go_assert(et->array_type() != NULL'), (17, 2, u'-      go_assert(et->is_slice_type());'), (23, 1, u'+\t  go_assert(saw_errors());'), (27, 1, u'+      go_assert(et->struct_type() != NULL')]
===========================================
===========================================
Total add: 14
Total del: 12
Header: Unsafe_type_conversion_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    go_assert(et->array_type() != NULL'), (17, 2, u'-      go_assert(et->is_slice_type());'), (23, 1, u'+\t  go_assert(saw_errors());'), (27, 1, u'+      go_assert(et->struct_type() != NULL')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+    go_assert(et->array_type() != NULL'), (17, 2, u'-      go_assert(et->is_slice_type());'), (23, 1, u'+\t  go_assert(saw_errors());'), (27, 1, u'+      go_assert(et->struct_type() != NULL')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    go_assert(et->points_to() != NULL || et->is_nil_type());'), (3, 1, u'+    go_assert(et->points_to() != NULL'), (12, 2, u'-      go_assert(et->interface_type() != NULL'), (27, 2, u'-      go_assert(et->is_boolean_type()'), (35, 1, u'+    go_assert(et->is_boolean_type()')]
===========================================
===========================================
Total add: 14
Total del: 19
Header: Unsafe_type_conversion_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    go_assert(et->points_to() != NULL || et->is_nil_type());'), (3, 1, u'+    go_assert(et->points_to() != NULL'), (12, 2, u'-      go_assert(et->interface_type() != NULL'), (27, 2, u'-      go_assert(et->is_boolean_type()'), (35, 1, u'+    go_assert(et->is_boolean_type()')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    go_assert(et->points_to() != NULL || et->is_nil_type());'), (3, 1, u'+    go_assert(et->points_to() != NULL'), (12, 2, u'-      go_assert(et->interface_type() != NULL'), (27, 2, u'-      go_assert(et->is_boolean_type()'), (35, 1, u'+    go_assert(et->is_boolean_type()')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    go_assert(POINTER_TYPE_P(TREE_TYPE(arg_tree)));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: Builtin_call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    go_assert(POINTER_TYPE_P(TREE_TYPE(arg_tree)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    go_assert(POINTER_TYPE_P(TREE_TYPE(arg_tree)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+        go_assert(arg2->is_variable());')]
===========================================
===========================================
Total add: 5
Total del: 8
Header: Builtin_call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+        go_assert(arg2->is_variable());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+        go_assert(arg2->is_variable());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
Total add: 2
Total del: 5
Header: Builtin_call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
Total add: 9
Total del: 15
Header: Builtin_call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        go_assert(arg2->is_variable());')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: Builtin_call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        go_assert(arg2->is_variable());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+        go_assert(arg2->is_variable());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
Total add: 13
Total del: 37
Header: Builtin_call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tgo_assert(COMPLEX_FLOAT_TYPE_P(TREE_TYPE(arg_tree)));')]
===========================================
===========================================
Total add: 8
Total del: 12
Header: Builtin_call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tgo_assert(COMPLEX_FLOAT_TYPE_P(TREE_TYPE(arg_tree)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tgo_assert(COMPLEX_FLOAT_TYPE_P(TREE_TYPE(arg_tree)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tgo_assert(TYPE_MAIN_VARIANT(TREE_TYPE(r))'), (8, 2, u'-\tgo_assert(SCALAR_FLOAT_TYPE_P(TREE_TYPE(r)));')]
===========================================
===========================================
Total add: 5
Total del: 10
Header: Builtin_call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tgo_assert(TYPE_MAIN_VARIANT(TREE_TYPE(r))'), (8, 2, u'-\tgo_assert(SCALAR_FLOAT_TYPE_P(TREE_TYPE(r)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tgo_assert(TYPE_MAIN_VARIANT(TREE_TYPE(r))'), (8, 2, u'-\tgo_assert(SCALAR_FLOAT_TYPE_P(TREE_TYPE(r)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  go_assert(FUNCTION_POINTER_TYPE_P(fnfield_type));')]
===========================================
===========================================
Total add: 2
Total del: 11
Header: Call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  go_assert(FUNCTION_POINTER_TYPE_P(fnfield_type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  go_assert(FUNCTION_POINTER_TYPE_P(fnfield_type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      go_assert(POINTER_TYPE_P(TREE_TYPE(fnc))')]
===========================================
===========================================
Total add: 10
Total del: 15
Header: Call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      go_assert(POINTER_TYPE_P(TREE_TYPE(fnc))')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      go_assert(POINTER_TYPE_P(TREE_TYPE(fnc))')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(66, 2, u'-    go_assert(closure_tree == NULL_TREE);'), (67, 1, u'+    go_assert(closure == NULL);')]
===========================================
===========================================
Total add: 3
Total del: 60
Header: Call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(66, 2, u'-    go_assert(closure_tree == NULL_TREE);'), (67, 1, u'+    go_assert(closure == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(66, 2, u'-    go_assert(closure_tree == NULL_TREE);'), (67, 1, u'+    go_assert(closure == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      go_assert(closure_tree != NULL_TREE);'), (18, 1, u'+      go_assert(closure != NULL);'), (51, 1, u'+      go_assert(this->call_temp_ != NULL);')]
===========================================
===========================================
Total add: 23
Total del: 40
Header: Call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      go_assert(closure_tree != NULL_TREE);'), (18, 1, u'+      go_assert(closure != NULL);'), (51, 1, u'+      go_assert(this->call_temp_ != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      go_assert(closure_tree != NULL_TREE);'), (18, 1, u'+      go_assert(closure != NULL);'), (51, 1, u'+      go_assert(this->call_temp_ != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      go_assert(saw_errors());'), (26, 2, u'-      go_assert(field != NULL_TREE);')]
===========================================
===========================================
Total add: 6
Total del: 15
Header: Call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      go_assert(saw_errors());'), (26, 2, u'-      go_assert(field != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      go_assert(saw_errors());'), (26, 2, u'-      go_assert(field != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-  go_assert(field == NULL_TREE);')]
===========================================
===========================================
Total add: 17
Total del: 11
Header: Call_expression::set_results
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-  go_assert(field == NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-  go_assert(field == NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(119, 2, u'-  go_assert(TREE_CODE(struct_tree) == RECORD_TYPE);'), (127, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__values") == 0);'), (135, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__count") == 0);'), (144, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__capacity") == 0);')]
===========================================
===========================================
Total add: 55
Total del: 104
Header: Array_index_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(119, 2, u'-  go_assert(TREE_CODE(struct_tree) == RECORD_TYPE);'), (127, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__values") == 0);'), (135, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__count") == 0);'), (144, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__capacity") == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(119, 2, u'-  go_assert(TREE_CODE(struct_tree) == RECORD_TYPE);'), (127, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__values") == 0);'), (135, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__count") == 0);'), (144, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__capacity") == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+      go_assert(saw_errors());')]
===========================================
===========================================
Total add: 50
Total del: 45
Header: String_index_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+      go_assert(saw_errors());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+      go_assert(saw_errors());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      go_assert(saw_errors());'), (14, 1, u'+  go_assert(this->value_pointer_ != NULL')]
===========================================
===========================================
Total add: 13
Total del: 8
Header: Map_index_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      go_assert(saw_errors());'), (14, 1, u'+  go_assert(this->value_pointer_ != NULL')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      go_assert(saw_errors());'), (14, 1, u'+  go_assert(this->value_pointer_ != NULL')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(77, 1, u'+\t  go_assert(saw_errors());')]
===========================================
===========================================
Total add: 30
Total del: 92
Header: Map_index_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(77, 1, u'+\t  go_assert(saw_errors());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(77, 1, u'+\t  go_assert(saw_errors());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  go_assert(TREE_CODE(type_tree) == RECORD_TYPE);'), (29, 2, u'-      go_assert(pf != fields->end());')]
===========================================
===========================================
Total add: 9
Total del: 22
Header: Struct_construction_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  go_assert(TREE_CODE(type_tree) == RECORD_TYPE);'), (29, 2, u'-      go_assert(pf != fields->end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  go_assert(TREE_CODE(type_tree) == RECORD_TYPE);'), (29, 2, u'-      go_assert(pf != fields->end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-  go_assert(pf == fields->end());')]
===========================================
===========================================
Total add: 8
Total del: 19
Header: Struct_construction_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-  go_assert(pf == fields->end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-  go_assert(pf == fields->end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(128, 1, u'+      go_assert(this->constructor_temp_ != NULL);')]
===========================================
===========================================
Total add: 38
Total del: 152
Header: Map_construction_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(128, 1, u'+      go_assert(this->constructor_temp_ != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(128, 1, u'+      go_assert(this->constructor_temp_ != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  go_assert(TREE_CODE(expr_size) == INTEGER_CST);')]
===========================================
===========================================
Total add: 11
Total del: 5
Header: Heap_composite_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  go_assert(TREE_CODE(expr_size) == INTEGER_CST);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  go_assert(TREE_CODE(expr_size) == INTEGER_CST);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(this->channel_->type()->is_error());'), (4, 1, u'+      go_assert(saw_errors());')]
===========================================
===========================================
Total add: 37
Total del: 12
Header: Receive_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(this->channel_->type()->is_error());'), (4, 1, u'+      go_assert(saw_errors());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(this->channel_->type()->is_error());'), (4, 1, u'+      go_assert(saw_errors());')]
===========================================
Class:   class Slice_value_expression : public Expression { 
Class:    class Interface_value_expression : public Expression { 
Class:    class Interface_mtable_expression : public Expression { 
Class:  class Compound_expression : public Expression { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\tgo_assert(saw_errors());')]
===========================================
===========================================
Total add: 4
Total del: 6
Header: Gogo::write_globals
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\tgo_assert(saw_errors());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\tgo_assert(saw_errors());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-  go_assert(!interface_methods->empty());'), (72, 2, u'-  go_assert(nt != NULL || st != NULL);'), (84, 2, u'-      go_assert(m != NULL);'), (100, 2, u'-  go_assert(i == count + 1);')]
===========================================
===========================================
Total add: 0
Total del: 130
Header: Gogo::slice_constructor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-  go_assert(!interface_methods->empty());'), (72, 2, u'-  go_assert(nt != NULL || st != NULL);'), (84, 2, u'-      go_assert(m != NULL);'), (100, 2, u'-  go_assert(i == count + 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-  go_assert(!interface_methods->empty());'), (72, 2, u'-  go_assert(nt != NULL || st != NULL);'), (84, 2, u'-      go_assert(m != NULL);'), (100, 2, u'-  go_assert(i == count + 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(ins.first->second == NULL_TREE);'), (6, 1, u'+      go_assert(ins.first->second == NULL);'), (14, 2, u'-  go_assert(decl != NULL_TREE && TREE_CODE(decl) == VAR_DECL);')]
===========================================
===========================================
Total add: 4
Total del: 10
Header: Type::interface_method_table
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(ins.first->second == NULL_TREE);'), (6, 1, u'+      go_assert(ins.first->second == NULL);'), (14, 2, u'-  go_assert(decl != NULL_TREE && TREE_CODE(decl) == VAR_DECL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(ins.first->second == NULL_TREE);'), (6, 1, u'+      go_assert(ins.first->second == NULL);'), (14, 2, u'-  go_assert(decl != NULL_TREE && TREE_CODE(decl) == VAR_DECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(80, 2, u'-  gcc_assert (mode != OImode);')]
===========================================
===========================================
Total add: 62
Total del: 70
Header: ix86_libcall_value
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(80, 2, u'-  gcc_assert (mode != OImode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(80, 2, u'-  gcc_assert (mode != OImode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tgcc_assert (src->profile_id == dst->profile_id);')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: ipa_merge_profiles
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tgcc_assert (src->profile_id == dst->profile_id);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\tgcc_assert (src->profile_id == dst->profile_id);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\t  gcc_assert (!bitmap_bit_p (output, DECL_UID (node->decl)));'), (14, 1, u'+\t      gcc_assert (!bitmap_bit_p (output, DECL_UID (node->decl)));'), (23, 2, u'-\t  gcc_assert (lto_get_out_decl_state () == decl_state);'), (32, 1, u'+\t      gcc_assert (lto_get_out_decl_state () == decl_state);')]
===========================================
===========================================
Total add: 24
Total del: 15
Header: lto_output
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\t  gcc_assert (!bitmap_bit_p (output, DECL_UID (node->decl)));'), (14, 1, u'+\t      gcc_assert (!bitmap_bit_p (output, DECL_UID (node->decl)));'), (23, 2, u'-\t  gcc_assert (lto_get_out_decl_state () == decl_state);'), (32, 1, u'+\t      gcc_assert (lto_get_out_decl_state () == decl_state);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\t  gcc_assert (!bitmap_bit_p (output, DECL_UID (node->decl)));'), (14, 1, u'+\t      gcc_assert (!bitmap_bit_p (output, DECL_UID (node->decl)));'), (23, 2, u'-\t  gcc_assert (lto_get_out_decl_state () == decl_state);'), (32, 1, u'+\t      gcc_assert (lto_get_out_decl_state () == decl_state);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+static_assert(std::is_same<MIt::reference, Ref>::value,"");'), (33, 1, u'+static_assert(std::is_same<MCIt::reference, CRef>::value,"");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (c_dialect_cxx());')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: sync_resolve_size
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (c_dialect_cxx());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (c_dialect_cxx());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (c_dialect_cxx());')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: get_atomic_generic_size
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (c_dialect_cxx());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (c_dialect_cxx());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (!NOTE_INSN_BASIC_BLOCK_P (insn)')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: new_seginfo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (!NOTE_INSN_BASIC_BLOCK_P (insn)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (!NOTE_INSN_BASIC_BLOCK_P (insn)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tgcc_assert (NOTE_INSN_BASIC_BLOCK_P (ins_pos));')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: optimize_mode_switching
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tgcc_assert (NOTE_INSN_BASIC_BLOCK_P (ins_pos));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\tgcc_assert (NOTE_INSN_BASIC_BLOCK_P (ins_pos));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (epilogue_p || abs (*first_offset <= 127));'), (3, 1, u'+\t      gcc_assert (epilogue_p || abs (*first_offset) <= 127);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: arc_save_restore
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (epilogue_p || abs (*first_offset <= 127));'), (3, 1, u'+\t      gcc_assert (epilogue_p || abs (*first_offset) <= 127);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (epilogue_p || abs (*first_offset <= 127));'), (3, 1, u'+\t      gcc_assert (epilogue_p || abs (*first_offset) <= 127);')]
===========================================
Class:  class exception { 
Class:class bad_alloc:exception { 
Class:class logic_error:exception { 
Class:class domain_error:logic_error { 
Class:class invalid_argument:logic_error { 
Class:class length_error:logic_error { 
Class:class overflow_error:exception { 
Class:class internal_exception { 
Class:class not_an_integer:internal_exception { 
Class:class not_a_variable:internal_exception { 
Class:class not_an_optimization_mode:internal_exception { 
Class:class not_a_bounded_integer_type_width:internal_exception { 
Class:class not_a_bounded_integer_type_representation:internal_exception { 
Class:class not_a_bounded_integer_type_overflow:internal_exception { 
Class:class not_a_complexity_class:internal_exception { 
Class:class not_a_control_parameter_name:internal_exception { 
Class:class not_a_control_parameter_value:internal_exception { 
Class:class not_a_pip_problem_control_parameter_name:internal_exception { 
Class:class not_a_pip_problem_control_parameter_value:internal_exception { 
Class:class not_a_relation:internal_exception { 
Class:class ppl_handle_mismatch:internal_exception { 
Class:class timeout_exception { 
Class:class deterministic_timeout_exception:timeout_exception { 
Class: class non_linear:internal_exception { 
Class:class not_unsigned_integer:internal_exception { 
Class:class not_universe_or_empty:internal_exception { 
Class:class not_a_nil_terminated_list:internal_exception { 
Class:class PPL_integer_out_of_range { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\t  gcc_assert (set);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: hoist_code
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\t  gcc_assert (set);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\t  gcc_assert (set);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (set != NULL_RTX);')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: get_pressure_class_and_nregs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (set != NULL_RTX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (set != NULL_RTX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (flag_ltrans')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: input_overwrite_node
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (flag_ltrans')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (flag_ltrans')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (flag_ltrans')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: input_varpool_node
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (flag_ltrans')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (flag_ltrans')]
===========================================
Class:   class ASN1Object { 
Class:class A { 
Class:class B { 
Class:template <class BASE> class C : public BASE { 
Class: class D : ASN1Object, public B { 
Class:class G : public D { 
Class:class F : A { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (!DECL_CHAIN (tmp) && !DECL_SEEN_IN_BIND_EXPR_P (tmp));')]
===========================================
===========================================
Total add: 19
Total del: 0
Header: force_constant_size
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (!DECL_CHAIN (tmp) && !DECL_SEEN_IN_BIND_EXPR_P (tmp));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (!DECL_CHAIN (tmp) && !DECL_SEEN_IN_BIND_EXPR_P (tmp));')]
===========================================
Class:  class One { 
Class: class Two { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (ssa_name (SSA_NAME_VERSION (t)) == NULL);'), (3, 1, u'+      gcc_assert ((*SSANAMES (fn))[SSA_NAME_VERSION (t)] == NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: make_ssa_name_fn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (ssa_name (SSA_NAME_VERSION (t)) == NULL);'), (3, 1, u'+      gcc_assert ((*SSANAMES (fn))[SSA_NAME_VERSION (t)] == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (ssa_name (SSA_NAME_VERSION (t)) == NULL);'), (3, 1, u'+      gcc_assert ((*SSANAMES (fn))[SSA_NAME_VERSION (t)] == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (old_len + size == ob->writer_cache->nodes.length ());')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: DFS_write_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (old_len + size == ob->writer_cache->nodes.length ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (old_len + size == ob->writer_cache->nodes.length ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_assert (ix <= cache->nodes.length ());')]
===========================================
===========================================
Total add: 10
Total del: 11
Header: streamer_tree_cache_add_to_node_array
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_assert (ix <= cache->nodes.length ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_assert (ix <= cache->nodes.length ());')]
===========================================
Class:     class bahamian { class bahamian 
Class: class miami : public bahamian	 { 
Class:     class bermuda {   class bermuda 
Class:template <class IteratorT> class B template <class IteratorT> class B
Class:  class foo { class foo 
Class: class bar: public foo {	 class bar: public foo 
Class:class bar: public foo {		 class bar: public foo 
Class:class bar: public foo {	 class bar: public foo 
Class:   template <class T, class U> struct mypair { template <class T, class U> struct mypair 
Class: class x6 { 
Class:class __attribute((abi_tag())) test
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t      gcc_assert (class_ts.u.derived->components->as->type')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: gfc_conv_derived_to_class
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t      gcc_assert (class_ts.u.derived->components->as->type')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t      gcc_assert (class_ts.u.derived->components->as->type')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_checking_assert (true_predicate_p (&(*info->entry)[0].predicate));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: estimate_node_size_and_time
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_checking_assert (true_predicate_p (&(*info->entry)[0].predicate));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_checking_assert (true_predicate_p (&(*info->entry)[0].predicate));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-          go_assert(ue == NULL || ue->op() != OPERATOR_AND);'), (8, 1, u'+\t      go_assert(ue->op() != OPERATOR_AND);')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: Unary_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-          go_assert(ue == NULL || ue->op() != OPERATOR_AND);'), (8, 1, u'+\t      go_assert(ue->op() != OPERATOR_AND);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-          go_assert(ue == NULL || ue->op() != OPERATOR_AND);'), (8, 1, u'+\t      go_assert(ue->op() != OPERATOR_AND);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+static_assert( termHandler<__cxa_exception>()'), (22, 1, u'+static_assert( adjptr<__cxa_exception>()')]
===========================================
===========================================
Total add: 26
Total del: 0
Header: using namespace __cxxabiv1;
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+static_assert( termHandler<__cxa_exception>()'), (22, 1, u'+static_assert( adjptr<__cxa_exception>()')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+static_assert( termHandler<__cxa_exception>()'), (22, 1, u'+static_assert( adjptr<__cxa_exception>()')]
===========================================
Class:   class B           { 
Class: class A  	 { 
Class:   class B { 
Class: class A { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (ipa_node_params_vector.exists ()')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: create_specialized_node
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (ipa_node_params_vector.exists ()')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (ipa_node_params_vector.exists ()')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
Total add: 12
Total del: 5
Header: ipa_get_indirect_edge_target_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-    gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      lra_assert (insn != NULL_RTX);')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: emit_add3_insn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      lra_assert (insn != NULL_RTX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      lra_assert (insn != NULL_RTX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (errorcount || sorrycount);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: push_class_level_binding_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (errorcount || sorrycount);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (errorcount || sorrycount);')]
===========================================
Class:   template <class> class A { template <class> class A 
Class:class D : A<int> 
Class: class C { class C 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\t  gcc_assert (gimple_call_num_args (def) == 3);'), (15, 1, u'+\t\t      gcc_assert (TREE_CODE (val2) == INTEGER_CST')]
===========================================
===========================================
Total add: 21
Total del: 1
Header: expr_expected_value_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\t  gcc_assert (gimple_call_num_args (def) == 3);'), (15, 1, u'+\t\t      gcc_assert (TREE_CODE (val2) == INTEGER_CST')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t\t  gcc_assert (gimple_call_num_args (def) == 3);'), (15, 1, u'+\t\t      gcc_assert (TREE_CODE (val2) == INTEGER_CST')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-      gcc_assert (percent >= 0 && percent <= 100);'), (18, 1, u'+\t  gcc_assert (percent >= 0 && percent <= 100);')]
===========================================
===========================================
Total add: 14
Total del: 7
Header: tree_predict_by_opcode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-      gcc_assert (percent >= 0 && percent <= 100);'), (18, 1, u'+\t  gcc_assert (percent >= 0 && percent <= 100);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-      gcc_assert (percent >= 0 && percent <= 100);'), (18, 1, u'+\t  gcc_assert (percent >= 0 && percent <= 100);')]
===========================================
Class: class B { 
Class:  class A { 
Class:class B : A { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  static_assert(foo(i), "Error"); // { dg-error "non-constant condition|not usable" }')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+    static_assert(foo(0), "Error"); // { dg-error "non-constant condition|constant expression" }')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (elt == 0 && inner_mode == TImode);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: rs6000_expand_vector_extract
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (elt == 0 && inner_mode == TImode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (elt == 0 && inner_mode == TImode);')]
===========================================
Class:class expected 
Class:class unexpected 
Class:class from_handler 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-     more than once go ahead and register an assert for OP.')]
===========================================
===========================================
Total add: 3
Total del: 6
Header: register_edge_assert_for_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-     more than once go ahead and register an assert for OP.')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-     more than once go ahead and register an assert for OP.')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  JvAssert(he -> address == address | LOCKED );'), (3, 1, u'+\t  JvAssert(he -> address == (address | LOCKED));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: retry:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  JvAssert(he -> address == address | LOCKED );'), (3, 1, u'+\t  JvAssert(he -> address == (address | LOCKED));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  JvAssert(he -> address == address | LOCKED );'), (3, 1, u'+\t  JvAssert(he -> address == (address | LOCKED));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-\t\t  gcc_assert')]
===========================================
===========================================
Total add: 1
Total del: 39
Header: arc_ifcvt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-\t\t  gcc_assert')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-\t\t  gcc_assert')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (c.offset == 0);')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: get_constraint_for_ptr_offset
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (c.offset == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (c.offset == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-#define assert_true(b) do { char c[2 * bool(b) - 1]; } while(0)'), (10, 2, u'-  assert_true(typeid(nullptr) == typeid(mynull));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-#define SA(X) static_assert ((X), #X);'), (3, 1, u'+#define SA(X) static_assert ((X), #X)')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: struct B2 {
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-#define SA(X) static_assert ((X), #X);'), (3, 1, u'+#define SA(X) static_assert ((X), #X)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-#define SA(X) static_assert ((X), #X);'), (3, 1, u'+#define SA(X) static_assert ((X), #X)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (expr1->ts.u.cl->backend_decl);')]
===========================================
===========================================
Total add: 18
Total del: 4
Header: gfc_alloc_allocatable_for_assignment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (expr1->ts.u.cl->backend_decl);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (expr1->ts.u.cl->backend_decl);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+      gcc_assert (SYMBOL_REF_TLS_MODEL (x) != 0);')]
===========================================
===========================================
Total add: 26
Total del: 0
Header: arm_legitimize_address
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+      gcc_assert (SYMBOL_REF_TLS_MODEL (x) != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+      gcc_assert (SYMBOL_REF_TLS_MODEL (x) != 0);')]
===========================================
Class: class Object { 
Class: class B { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      gcc_assert (!*slot);')]
===========================================
===========================================
Total add: 11
Total del: 2
Header: preserve_constants_and_equivs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      gcc_assert (!*slot);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      gcc_assert (!*slot);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t  gcc_assert (TREE_CODE (decl) == VAR_DECL);')]
===========================================
===========================================
Total add: 2
Total del: 5
Header: tentative_decl_linkage
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t  gcc_assert (TREE_CODE (decl) == VAR_DECL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t  gcc_assert (TREE_CODE (decl) == VAR_DECL);')]
===========================================
Class:class B 
Class:class C 
Class:class A { class A 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type));'), (21, 1, u'+\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type)')]
===========================================
===========================================
Total add: 6
Total del: 19
Header: convert_like_real
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type));'), (21, 1, u'+\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type));'), (21, 1, u'+\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type)')]
===========================================
Class: class A { class A 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type)'), (8, 1, u'+\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type));')]
===========================================
===========================================
Total add: 19
Total del: 6
Header: convert_like_real
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type)'), (8, 1, u'+\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type)'), (8, 1, u'+\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type));')]
===========================================
Class: class A { class A 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t      gcc_assert (TREE_PUBLIC (fn));')]
===========================================
===========================================
Total add: 1
Total del: 19
Header: expand_or_defer_fn_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t      gcc_assert (TREE_PUBLIC (fn));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t      gcc_assert (TREE_PUBLIC (fn));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-      gcc_assert (!processing_template_decl);')]
===========================================
===========================================
Total add: 16
Total del: 12
Header: tsubst_omp_for_iterator
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-      gcc_assert (!processing_template_decl);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-      gcc_assert (!processing_template_decl);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (REG_P (dest));'), (3, 1, u'+      gcc_assert (REG_P (dest) || GET_CODE (dest) == SUBREG);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: rs6000_emit_le_vsx_move
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (REG_P (dest));'), (3, 1, u'+      gcc_assert (REG_P (dest) || GET_CODE (dest) == SUBREG);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (REG_P (dest));'), (3, 1, u'+      gcc_assert (REG_P (dest) || GET_CODE (dest) == SUBREG);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (decl == error_mark_node')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: check_explicit_specialization
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (decl == error_mark_node')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (decl == error_mark_node')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (vtab);')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: gfc_add_component_ref
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (vtab);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (vtab);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (crtl->emit.regno_pointer_align_length);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: gen_reg_rtx
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (crtl->emit.regno_pointer_align_length);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (crtl->emit.regno_pointer_align_length);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+\t      gcc_assert (nios2_large_offset_p (unspec_reloc));')]
===========================================
===========================================
Total add: 13
Total del: 10
Header: nios2_print_operand
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+\t      gcc_assert (nios2_large_offset_p (unspec_reloc));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+\t      gcc_assert (nios2_large_offset_p (unspec_reloc));')]
===========================================
Class:template <typename _Tp> class A { template <typename _Tp> class A 
Class:template <typename _Tp> class M : public A<_Tp> { template <typename _Tp> class M : public A<_Tp> 
Class:class B { class B 
Class:class C { class C 
Class:template <typename _Tp, typename _Alloc = M<_Tp> > class O : F<_Alloc> { template <typename _Tp, typename _Alloc = M<_Tp> > class O : F<_Alloc> 
Class:class L { class L 
Class:class P : L { class P : L 
Class:class G { class G 
Class:class Q : G { class Q : G 
Class:class H { class H 
Class:template <class T> class I { template <class T> class I 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert ((unsigned long)&ms1.x == rsp+8);'), (5, 2, u'-  assert ((unsigned long)&ms2.x == rsp+72);'), (6, 2, u'-  assert ((unsigned long)&ms3.x == rsp+136);'), (7, 2, u'-  assert ((unsigned long)&ms4.x == rsp+200);'), (8, 2, u'-  assert ((unsigned long)&ms5.x == rsp+264);'), (9, 2, u'-  assert ((unsigned long)&ms6.x == rsp+328);'), (10, 2, u'-  assert ((unsigned long)&ms7.x == rsp+392);'), (11, 2, u'-  assert ((unsigned long)&ms8.x == rsp+456);')]
===========================================
===========================================
Total add: 2
Total del: 10
Header: check_struct_passing1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert ((unsigned long)&ms1.x == rsp+8);'), (5, 2, u'-  assert ((unsigned long)&ms2.x == rsp+72);'), (6, 2, u'-  assert ((unsigned long)&ms3.x == rsp+136);'), (7, 2, u'-  assert ((unsigned long)&ms4.x == rsp+200);'), (8, 2, u'-  assert ((unsigned long)&ms5.x == rsp+264);'), (9, 2, u'-  assert ((unsigned long)&ms6.x == rsp+328);'), (10, 2, u'-  assert ((unsigned long)&ms7.x == rsp+392);'), (11, 2, u'-  assert ((unsigned long)&ms8.x == rsp+456);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert ((unsigned long)&ms1.x == rsp+8);'), (5, 2, u'-  assert ((unsigned long)&ms2.x == rsp+72);'), (6, 2, u'-  assert ((unsigned long)&ms3.x == rsp+136);'), (7, 2, u'-  assert ((unsigned long)&ms4.x == rsp+200);'), (8, 2, u'-  assert ((unsigned long)&ms5.x == rsp+264);'), (9, 2, u'-  assert ((unsigned long)&ms6.x == rsp+328);'), (10, 2, u'-  assert ((unsigned long)&ms7.x == rsp+392);'), (11, 2, u'-  assert ((unsigned long)&ms8.x == rsp+456);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert ((unsigned long)&u1.x == rsp+8);'), (5, 2, u'-  assert ((unsigned long)&u1.f == rsp+8);'), (6, 2, u'-  assert ((unsigned long)&u2.x == rsp+72);'), (7, 2, u'-  assert ((unsigned long)&u2.f == rsp+72);'), (8, 2, u'-  assert ((unsigned long)&u3.x == rsp+136);'), (9, 2, u'-  assert ((unsigned long)&u3.f == rsp+136);'), (10, 2, u'-  assert ((unsigned long)&u4.x == rsp+200);'), (11, 2, u'-  assert ((unsigned long)&u4.f == rsp+200);'), (12, 2, u'-  assert ((unsigned long)&u5.x == rsp+264);'), (13, 2, u'-  assert ((unsigned long)&u5.f == rsp+264);'), (14, 2, u'-  assert ((unsigned long)&u6.x == rsp+328);'), (15, 2, u'-  assert ((unsigned long)&u6.f == rsp+328);'), (16, 2, u'-  assert ((unsigned long)&u7.x == rsp+392);'), (17, 2, u'-  assert ((unsigned long)&u7.f == rsp+392);'), (18, 2, u'-  assert ((unsigned long)&u8.x == rsp+456);'), (19, 2, u'-  assert ((unsigned long)&u8.f == rsp+456);')]
===========================================
===========================================
Total add: 2
Total del: 18
Header: check_union_passing1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert ((unsigned long)&u1.x == rsp+8);'), (5, 2, u'-  assert ((unsigned long)&u1.f == rsp+8);'), (6, 2, u'-  assert ((unsigned long)&u2.x == rsp+72);'), (7, 2, u'-  assert ((unsigned long)&u2.f == rsp+72);'), (8, 2, u'-  assert ((unsigned long)&u3.x == rsp+136);'), (9, 2, u'-  assert ((unsigned long)&u3.f == rsp+136);'), (10, 2, u'-  assert ((unsigned long)&u4.x == rsp+200);'), (11, 2, u'-  assert ((unsigned long)&u4.f == rsp+200);'), (12, 2, u'-  assert ((unsigned long)&u5.x == rsp+264);'), (13, 2, u'-  assert ((unsigned long)&u5.f == rsp+264);'), (14, 2, u'-  assert ((unsigned long)&u6.x == rsp+328);'), (15, 2, u'-  assert ((unsigned long)&u6.f == rsp+328);'), (16, 2, u'-  assert ((unsigned long)&u7.x == rsp+392);'), (17, 2, u'-  assert ((unsigned long)&u7.f == rsp+392);'), (18, 2, u'-  assert ((unsigned long)&u8.x == rsp+456);'), (19, 2, u'-  assert ((unsigned long)&u8.f == rsp+456);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert ((unsigned long)&u1.x == rsp+8);'), (5, 2, u'-  assert ((unsigned long)&u1.f == rsp+8);'), (6, 2, u'-  assert ((unsigned long)&u2.x == rsp+72);'), (7, 2, u'-  assert ((unsigned long)&u2.f == rsp+72);'), (8, 2, u'-  assert ((unsigned long)&u3.x == rsp+136);'), (9, 2, u'-  assert ((unsigned long)&u3.f == rsp+136);'), (10, 2, u'-  assert ((unsigned long)&u4.x == rsp+200);'), (11, 2, u'-  assert ((unsigned long)&u4.f == rsp+200);'), (12, 2, u'-  assert ((unsigned long)&u5.x == rsp+264);'), (13, 2, u'-  assert ((unsigned long)&u5.f == rsp+264);'), (14, 2, u'-  assert ((unsigned long)&u6.x == rsp+328);'), (15, 2, u'-  assert ((unsigned long)&u6.f == rsp+328);'), (16, 2, u'-  assert ((unsigned long)&u7.x == rsp+392);'), (17, 2, u'-  assert ((unsigned long)&u7.f == rsp+392);'), (18, 2, u'-  assert ((unsigned long)&u8.x == rsp+456);'), (19, 2, u'-  assert ((unsigned long)&u8.f == rsp+456);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert ((unsigned long)&u1.x == rsp+8);'), (5, 2, u'-  assert ((unsigned long)&u1.d == rsp+8);'), (6, 2, u'-  assert ((unsigned long)&u2.x == rsp+72);'), (7, 2, u'-  assert ((unsigned long)&u2.d == rsp+72);'), (8, 2, u'-  assert ((unsigned long)&u3.x == rsp+136);'), (9, 2, u'-  assert ((unsigned long)&u3.d == rsp+136);'), (10, 2, u'-  assert ((unsigned long)&u4.x == rsp+200);'), (11, 2, u'-  assert ((unsigned long)&u4.d == rsp+200);'), (12, 2, u'-  assert ((unsigned long)&u5.x == rsp+264);'), (13, 2, u'-  assert ((unsigned long)&u5.d == rsp+264);'), (14, 2, u'-  assert ((unsigned long)&u6.x == rsp+328);'), (15, 2, u'-  assert ((unsigned long)&u6.d == rsp+328);'), (16, 2, u'-  assert ((unsigned long)&u7.x == rsp+392);'), (17, 2, u'-  assert ((unsigned long)&u7.d == rsp+392);'), (18, 2, u'-  assert ((unsigned long)&u8.x == rsp+456);'), (19, 2, u'-  assert ((unsigned long)&u8.d == rsp+456);')]
===========================================
===========================================
Total add: 2
Total del: 18
Header: check_union_passing2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert ((unsigned long)&u1.x == rsp+8);'), (5, 2, u'-  assert ((unsigned long)&u1.d == rsp+8);'), (6, 2, u'-  assert ((unsigned long)&u2.x == rsp+72);'), (7, 2, u'-  assert ((unsigned long)&u2.d == rsp+72);'), (8, 2, u'-  assert ((unsigned long)&u3.x == rsp+136);'), (9, 2, u'-  assert ((unsigned long)&u3.d == rsp+136);'), (10, 2, u'-  assert ((unsigned long)&u4.x == rsp+200);'), (11, 2, u'-  assert ((unsigned long)&u4.d == rsp+200);'), (12, 2, u'-  assert ((unsigned long)&u5.x == rsp+264);'), (13, 2, u'-  assert ((unsigned long)&u5.d == rsp+264);'), (14, 2, u'-  assert ((unsigned long)&u6.x == rsp+328);'), (15, 2, u'-  assert ((unsigned long)&u6.d == rsp+328);'), (16, 2, u'-  assert ((unsigned long)&u7.x == rsp+392);'), (17, 2, u'-  assert ((unsigned long)&u7.d == rsp+392);'), (18, 2, u'-  assert ((unsigned long)&u8.x == rsp+456);'), (19, 2, u'-  assert ((unsigned long)&u8.d == rsp+456);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert ((unsigned long)&u1.x == rsp+8);'), (5, 2, u'-  assert ((unsigned long)&u1.d == rsp+8);'), (6, 2, u'-  assert ((unsigned long)&u2.x == rsp+72);'), (7, 2, u'-  assert ((unsigned long)&u2.d == rsp+72);'), (8, 2, u'-  assert ((unsigned long)&u3.x == rsp+136);'), (9, 2, u'-  assert ((unsigned long)&u3.d == rsp+136);'), (10, 2, u'-  assert ((unsigned long)&u4.x == rsp+200);'), (11, 2, u'-  assert ((unsigned long)&u4.d == rsp+200);'), (12, 2, u'-  assert ((unsigned long)&u5.x == rsp+264);'), (13, 2, u'-  assert ((unsigned long)&u5.d == rsp+264);'), (14, 2, u'-  assert ((unsigned long)&u6.x == rsp+328);'), (15, 2, u'-  assert ((unsigned long)&u6.d == rsp+328);'), (16, 2, u'-  assert ((unsigned long)&u7.x == rsp+392);'), (17, 2, u'-  assert ((unsigned long)&u7.d == rsp+392);'), (18, 2, u'-  assert ((unsigned long)&u8.x == rsp+456);'), (19, 2, u'-  assert ((unsigned long)&u8.d == rsp+456);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert ((unsigned long)&u1.x == rsp+8);'), (5, 2, u'-  assert ((unsigned long)&u1.v == rsp+8);'), (6, 2, u'-  assert ((unsigned long)&u2.x == rsp+72);'), (7, 2, u'-  assert ((unsigned long)&u2.v == rsp+72);'), (8, 2, u'-  assert ((unsigned long)&u3.x == rsp+136);'), (9, 2, u'-  assert ((unsigned long)&u3.v == rsp+136);'), (10, 2, u'-  assert ((unsigned long)&u4.x == rsp+200);'), (11, 2, u'-  assert ((unsigned long)&u4.v == rsp+200);'), (12, 2, u'-  assert ((unsigned long)&u5.x == rsp+264);'), (13, 2, u'-  assert ((unsigned long)&u5.v == rsp+264);'), (14, 2, u'-  assert ((unsigned long)&u6.x == rsp+328);'), (15, 2, u'-  assert ((unsigned long)&u6.v == rsp+328);'), (16, 2, u'-  assert ((unsigned long)&u7.x == rsp+392);'), (17, 2, u'-  assert ((unsigned long)&u7.v == rsp+392);'), (18, 2, u'-  assert ((unsigned long)&u8.x == rsp+456);'), (19, 2, u'-  assert ((unsigned long)&u8.v == rsp+456);')]
===========================================
===========================================
Total add: 2
Total del: 18
Header: check_union_passing3
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert ((unsigned long)&u1.x == rsp+8);'), (5, 2, u'-  assert ((unsigned long)&u1.v == rsp+8);'), (6, 2, u'-  assert ((unsigned long)&u2.x == rsp+72);'), (7, 2, u'-  assert ((unsigned long)&u2.v == rsp+72);'), (8, 2, u'-  assert ((unsigned long)&u3.x == rsp+136);'), (9, 2, u'-  assert ((unsigned long)&u3.v == rsp+136);'), (10, 2, u'-  assert ((unsigned long)&u4.x == rsp+200);'), (11, 2, u'-  assert ((unsigned long)&u4.v == rsp+200);'), (12, 2, u'-  assert ((unsigned long)&u5.x == rsp+264);'), (13, 2, u'-  assert ((unsigned long)&u5.v == rsp+264);'), (14, 2, u'-  assert ((unsigned long)&u6.x == rsp+328);'), (15, 2, u'-  assert ((unsigned long)&u6.v == rsp+328);'), (16, 2, u'-  assert ((unsigned long)&u7.x == rsp+392);'), (17, 2, u'-  assert ((unsigned long)&u7.v == rsp+392);'), (18, 2, u'-  assert ((unsigned long)&u8.x == rsp+456);'), (19, 2, u'-  assert ((unsigned long)&u8.v == rsp+456);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  assert ((unsigned long)&u1.x == rsp+8);'), (5, 2, u'-  assert ((unsigned long)&u1.v == rsp+8);'), (6, 2, u'-  assert ((unsigned long)&u2.x == rsp+72);'), (7, 2, u'-  assert ((unsigned long)&u2.v == rsp+72);'), (8, 2, u'-  assert ((unsigned long)&u3.x == rsp+136);'), (9, 2, u'-  assert ((unsigned long)&u3.v == rsp+136);'), (10, 2, u'-  assert ((unsigned long)&u4.x == rsp+200);'), (11, 2, u'-  assert ((unsigned long)&u4.v == rsp+200);'), (12, 2, u'-  assert ((unsigned long)&u5.x == rsp+264);'), (13, 2, u'-  assert ((unsigned long)&u5.v == rsp+264);'), (14, 2, u'-  assert ((unsigned long)&u6.x == rsp+328);'), (15, 2, u'-  assert ((unsigned long)&u6.v == rsp+328);'), (16, 2, u'-  assert ((unsigned long)&u7.x == rsp+392);'), (17, 2, u'-  assert ((unsigned long)&u7.v == rsp+392);'), (18, 2, u'-  assert ((unsigned long)&u8.x == rsp+456);'), (19, 2, u'-  assert ((unsigned long)&u8.v == rsp+456);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert ((unsigned long)&u1.x == rsp+8);'), (3, 2, u'-  assert ((unsigned long)&u1.v == rsp+8);'), (4, 2, u'-  assert ((unsigned long)&u2.x == rsp+72);'), (5, 2, u'-  assert ((unsigned long)&u2.v == rsp+72);'), (6, 2, u'-  assert ((unsigned long)&u3.x == rsp+136);'), (7, 2, u'-  assert ((unsigned long)&u3.v == rsp+136);'), (8, 2, u'-  assert ((unsigned long)&u4.x == rsp+200);'), (9, 2, u'-  assert ((unsigned long)&u4.v == rsp+200);'), (10, 2, u'-  assert ((unsigned long)&u5.x == rsp+264);'), (11, 2, u'-  assert ((unsigned long)&u5.v == rsp+264);'), (12, 2, u'-  assert ((unsigned long)&u6.x == rsp+328);'), (13, 2, u'-  assert ((unsigned long)&u6.v == rsp+328);'), (14, 2, u'-  assert ((unsigned long)&u7.x == rsp+392);'), (15, 2, u'-  assert ((unsigned long)&u7.v == rsp+392);'), (16, 2, u'-  assert ((unsigned long)&u8.x == rsp+456);'), (17, 2, u'-  assert ((unsigned long)&u8.v == rsp+456);')]
===========================================
===========================================
Total add: 2
Total del: 16
Header: check_union_passing6
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert ((unsigned long)&u1.x == rsp+8);'), (3, 2, u'-  assert ((unsigned long)&u1.v == rsp+8);'), (4, 2, u'-  assert ((unsigned long)&u2.x == rsp+72);'), (5, 2, u'-  assert ((unsigned long)&u2.v == rsp+72);'), (6, 2, u'-  assert ((unsigned long)&u3.x == rsp+136);'), (7, 2, u'-  assert ((unsigned long)&u3.v == rsp+136);'), (8, 2, u'-  assert ((unsigned long)&u4.x == rsp+200);'), (9, 2, u'-  assert ((unsigned long)&u4.v == rsp+200);'), (10, 2, u'-  assert ((unsigned long)&u5.x == rsp+264);'), (11, 2, u'-  assert ((unsigned long)&u5.v == rsp+264);'), (12, 2, u'-  assert ((unsigned long)&u6.x == rsp+328);'), (13, 2, u'-  assert ((unsigned long)&u6.v == rsp+328);'), (14, 2, u'-  assert ((unsigned long)&u7.x == rsp+392);'), (15, 2, u'-  assert ((unsigned long)&u7.v == rsp+392);'), (16, 2, u'-  assert ((unsigned long)&u8.x == rsp+456);'), (17, 2, u'-  assert ((unsigned long)&u8.v == rsp+456);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  assert ((unsigned long)&u1.x == rsp+8);'), (3, 2, u'-  assert ((unsigned long)&u1.v == rsp+8);'), (4, 2, u'-  assert ((unsigned long)&u2.x == rsp+72);'), (5, 2, u'-  assert ((unsigned long)&u2.v == rsp+72);'), (6, 2, u'-  assert ((unsigned long)&u3.x == rsp+136);'), (7, 2, u'-  assert ((unsigned long)&u3.v == rsp+136);'), (8, 2, u'-  assert ((unsigned long)&u4.x == rsp+200);'), (9, 2, u'-  assert ((unsigned long)&u4.v == rsp+200);'), (10, 2, u'-  assert ((unsigned long)&u5.x == rsp+264);'), (11, 2, u'-  assert ((unsigned long)&u5.v == rsp+264);'), (12, 2, u'-  assert ((unsigned long)&u6.x == rsp+328);'), (13, 2, u'-  assert ((unsigned long)&u6.v == rsp+328);'), (14, 2, u'-  assert ((unsigned long)&u7.x == rsp+392);'), (15, 2, u'-  assert ((unsigned long)&u7.v == rsp+392);'), (16, 2, u'-  assert ((unsigned long)&u8.x == rsp+456);'), (17, 2, u'-  assert ((unsigned long)&u8.v == rsp+456);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (BINFO_VTABLE (TYPE_BINFO (component_type)));')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: ipa_set_jf_known_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (BINFO_VTABLE (TYPE_BINFO (component_type)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (BINFO_VTABLE (TYPE_BINFO (component_type)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (!type_preserved')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: ipa_set_ancestor_jf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (!type_preserved')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (!type_preserved')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_checking_assert (allow_non_constant);'), (3, 1, u'+\t  gcc_checking_assert (allow_non_constant || errorcount);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: cxx_eval_constant_expression
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_checking_assert (allow_non_constant);'), (3, 1, u'+\t  gcc_checking_assert (allow_non_constant || errorcount);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_checking_assert (allow_non_constant);'), (3, 1, u'+\t  gcc_checking_assert (allow_non_constant || errorcount);')]
===========================================
Class:    class A { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1, 2, u'-  gcc_assert (index >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: compute_complex_ancestor_jump_func
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1, 2, u'-  gcc_assert (index >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(1, 2, u'-  gcc_assert (index >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!lang_hooks.types_compatible_p')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: get_frame_arg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!lang_hooks.types_compatible_p')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!lang_hooks.types_compatible_p')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-  gcc_assert (alloc - num < reserve);'), (28, 1, u'+  gcc_assert (alloc < desired);')]
===========================================
===========================================
Total add: 16
Total del: 35
Header: vec_prefix::release_overhead
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-  gcc_assert (alloc - num < reserve);'), (28, 1, u'+  gcc_assert (alloc < desired);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-  gcc_assert (alloc - num < reserve);'), (28, 1, u'+  gcc_assert (alloc < desired);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (in_lto_p);')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: gimple_get_virt_method_for_vtable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (in_lto_p);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (in_lto_p);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (odr_violation_reported);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: record_target_from_binfo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (odr_violation_reported);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (odr_violation_reported);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (odr_violation_reported);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: record_targets_from_bases
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (odr_violation_reported);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (odr_violation_reported);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      gcc_assert (odr_violation_reported);')]
===========================================
===========================================
Total add: 12
Total del: 4
Header: possible_polymorphic_call_targets
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      gcc_assert (odr_violation_reported);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      gcc_assert (odr_violation_reported);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    gcc_assert (!complete);')]
===========================================
===========================================
Total add: 2
Total del: 4
Header: possible_polymorphic_call_targets
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    gcc_assert (!complete);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    gcc_assert (!complete);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t  gcc_assert (e->expr_type == EXPR_VARIABLE);')]
===========================================
===========================================
Total add: 11
Total del: 0
Header: trans_associate_var
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t  gcc_assert (e->expr_type == EXPR_VARIABLE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t  gcc_assert (e->expr_type == EXPR_VARIABLE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (fini->proc_tree);   /* Should have been set in gfc_resolve_finalizers.  */')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: generate_finalization_wrapper
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (fini->proc_tree);   /* Should have been set in gfc_resolve_finalizers.  */')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (fini->proc_tree);   /* Should have been set in gfc_resolve_finalizers.  */')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  gcc_checking_assert (TREE_CODE (TREE_TYPE (init)) == ARRAY_TYPE);'), (15, 1, u'+  gcc_checking_assert (integer_zerop (TYPE_MIN_VALUE (domain_type)));'), (19, 1, u'+  gcc_checking_assert (offset % (elt_size * BITS_PER_UNIT) == 0);'), (26, 1, u'+      gcc_checking_assert (!CONSTRUCTOR_ELT (init, access_index)->index);')]
===========================================
===========================================
Total add: 25
Total del: 4
Header: gimple_get_virt_method_for_vtable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  gcc_checking_assert (TREE_CODE (TREE_TYPE (init)) == ARRAY_TYPE);'), (15, 1, u'+  gcc_checking_assert (integer_zerop (TYPE_MIN_VALUE (domain_type)));'), (19, 1, u'+  gcc_checking_assert (offset % (elt_size * BITS_PER_UNIT) == 0);'), (26, 1, u'+      gcc_checking_assert (!CONSTRUCTOR_ELT (init, access_index)->index);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  gcc_checking_assert (TREE_CODE (TREE_TYPE (init)) == ARRAY_TYPE);'), (15, 1, u'+  gcc_checking_assert (integer_zerop (TYPE_MIN_VALUE (domain_type)));'), (19, 1, u'+  gcc_checking_assert (offset % (elt_size * BITS_PER_UNIT) == 0);'), (26, 1, u'+      gcc_checking_assert (!CONSTRUCTOR_ELT (init, access_index)->index);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (!pool->pool_insn);')]
===========================================
===========================================
Total add: 9
Total del: 1
Header: s390_mainpool_start
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (!pool->pool_insn);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (!pool->pool_insn);')]
===========================================
Class:class pass_s390_early_mach : public rtl_opt_pass class pass_s390_early_mach : public rtl_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert (BINFO_VIRTUAL_P (binfo));')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: record_target_from_binfo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert (BINFO_VIRTUAL_P (binfo));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert (BINFO_VIRTUAL_P (binfo));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\tgcc_assert (added);'), (9, 1, u'+\t  gcc_assert (added);')]
===========================================
===========================================
Total add: 5
Total del: 4
Header: add_symbol_to_partition_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\tgcc_assert (added);'), (9, 1, u'+\t  gcc_assert (added);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\tgcc_assert (added);'), (9, 1, u'+\t  gcc_assert (added);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (get_symbol_class (node) == SYMBOL_DUPLICATE'), (3, 1, u'+  gcc_checking_assert (symtab_get_symbol_partitioning_class (node) == SYMBOL_DUPLICATE')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: add_symbol_to_partition
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (get_symbol_class (node) == SYMBOL_DUPLICATE'), (3, 1, u'+  gcc_checking_assert (symtab_get_symbol_partitioning_class (node) == SYMBOL_DUPLICATE')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (get_symbol_class (node) == SYMBOL_DUPLICATE'), (3, 1, u'+  gcc_checking_assert (symtab_get_symbol_partitioning_class (node) == SYMBOL_DUPLICATE')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (get_symbol_class (node) == SYMBOL_DUPLICATE'), (3, 1, u'+  gcc_assert (symtab_get_symbol_partitioning_class (node) == SYMBOL_DUPLICATE')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: add_symbol_to_partition
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (get_symbol_class (node) == SYMBOL_DUPLICATE'), (3, 1, u'+  gcc_assert (symtab_get_symbol_partitioning_class (node) == SYMBOL_DUPLICATE')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (get_symbol_class (node) == SYMBOL_DUPLICATE'), (3, 1, u'+  gcc_assert (symtab_get_symbol_partitioning_class (node) == SYMBOL_DUPLICATE')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+  gcc_assert ((dwarf_regs_mask & ~mask) == 0);')]
===========================================
===========================================
Total add: 10
Total del: 7
Header: emit_multi_reg_push
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+  gcc_assert ((dwarf_regs_mask & ~mask) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+  gcc_assert ((dwarf_regs_mask & ~mask) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert (live_regs_mask == dwarf_regs_mask);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: arm_expand_prologue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert (live_regs_mask == dwarf_regs_mask);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert (live_regs_mask == dwarf_regs_mask);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (GET_CODE (e) == SET);'), (12, 1, u'+  gcc_assert (GET_CODE (e) == SET'), (20, 1, u'+  gcc_assert (nregs);'), (32, 1, u'+      gcc_assert (padfirst == 0 || optimize_size);'), (46, 1, u'+      gcc_assert (padlast == 0 || padlast == 4);')]
===========================================
===========================================
Total add: 24
Total del: 14
Header: arm_unwind_emit_sequence
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (GET_CODE (e) == SET);'), (12, 1, u'+  gcc_assert (GET_CODE (e) == SET'), (20, 1, u'+  gcc_assert (nregs);'), (32, 1, u'+      gcc_assert (padfirst == 0 || optimize_size);'), (46, 1, u'+      gcc_assert (padlast == 0 || padlast == 4);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (GET_CODE (e) == SET);'), (12, 1, u'+  gcc_assert (GET_CODE (e) == SET'), (20, 1, u'+  gcc_assert (nregs);'), (32, 1, u'+      gcc_assert (padfirst == 0 || optimize_size);'), (46, 1, u'+      gcc_assert (padlast == 0 || padlast == 4);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (offset == padfirst + nregs * reg_size + padlast);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: arm_unwind_emit_sequence
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (offset == padfirst + nregs * reg_size + padlast);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (offset == padfirst + nregs * reg_size + padlast);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (GET_CODE (e) == SET'), (14, 1, u'+      gcc_assert (reg >= lastreg);')]
===========================================
===========================================
Total add: 5
Total del: 7
Header: arm_unwind_emit_sequence
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (GET_CODE (e) == SET'), (14, 1, u'+      gcc_assert (reg >= lastreg);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (GET_CODE (e) == SET'), (14, 1, u'+      gcc_assert (reg >= lastreg);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\tgcc_assert (REG_P (XEXP (e, 0))'), (22, 1, u'+\tgcc_assert (i == 1')]
===========================================
===========================================
Total add: 10
Total del: 13
Header: arm_unwind_emit_sequence
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\tgcc_assert (REG_P (XEXP (e, 0))'), (22, 1, u'+\tgcc_assert (i == 1')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\tgcc_assert (REG_P (XEXP (e, 0))'), (22, 1, u'+\tgcc_assert (i == 1')]
===========================================
Class:class A { class A 
Class:class __attribute__((visibility())) B : public A { class __attribute__((visibility())) B : public A 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t    gcc_assert (tmp != NULL_TREE);')]
===========================================
===========================================
Total add: 0
Total del: 22
Header: lto_input_tree_ref
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t    gcc_assert (tmp != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t    gcc_assert (tmp != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\tgcc_assert (tmp != NULL_TREE);')]
===========================================
===========================================
Total add: 3
Total del: 13
Header: lto_output_tree_ref
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\tgcc_assert (tmp != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\tgcc_assert (tmp != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (code != CONSTRUCTOR && code != TREE_BINFO);'), (3, 1, u'+  gcc_checking_assert (code != TREE_BINFO);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: lto_fixup_prevailing_decls
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (code != CONSTRUCTOR && code != TREE_BINFO);'), (3, 1, u'+  gcc_checking_assert (code != TREE_BINFO);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (code != CONSTRUCTOR && code != TREE_BINFO);'), (3, 1, u'+  gcc_checking_assert (code != TREE_BINFO);')]
===========================================
Class:class B 
Class:class D 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (DECL_P (base));')]
===========================================
===========================================
Total add: 54
Total del: 0
Header: vtable_pointer_value_to_binfo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (DECL_P (base));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (DECL_P (base));')]
===========================================
Class:class A 
Class:class B { class B 
Class:class C : B { class C : B 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  gcc_assert (TREE_CODE (fn) == ADDR_EXPR'), (12, 2, u'-  gcc_assert (TREE_CODE (fn) == FUNCTION_DECL);')]
===========================================
===========================================
Total add: 24
Total del: 14
Header: gimple_get_virt_method_for_vtable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  gcc_assert (TREE_CODE (fn) == ADDR_EXPR'), (12, 2, u'-  gcc_assert (TREE_CODE (fn) == FUNCTION_DECL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  gcc_assert (TREE_CODE (fn) == ADDR_EXPR'), (12, 2, u'-  gcc_assert (TREE_CODE (fn) == FUNCTION_DECL);')]
===========================================
Class:   class ert_RefCounter { class ert_RefCounter 
Class: class ebs_Object : virtual public ert_RefCounter { class ebs_Object : virtual public ert_RefCounter 
Class: class dpr_App : public ebs_Object { class dpr_App : public ebs_Object 
Class:class dpr_Job : public ebs_Object 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_assert (!v || TREE_CODE (v) == POINTER_PLUS_EXPR);')]
===========================================
===========================================
Total add: 10
Total del: 4
Header: subbinfo_with_vtable_at_offset
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_assert (!v || TREE_CODE (v) == POINTER_PLUS_EXPR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_assert (!v || TREE_CODE (v) == POINTER_PLUS_EXPR);')]
===========================================
Class:class A 
Class:class B { class B 
Class:class C : B { class C : B 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t      gcc_assert (!transform_pattern_stmt);')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: vect_transform_loop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t      gcc_assert (!transform_pattern_stmt);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t      gcc_assert (!transform_pattern_stmt);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  gcc_assert ((opts->x_target_flags & MASK_LONG_DOUBLE_64) == 0')]
===========================================
===========================================
Total add: 11
Total del: 3
Header: ix86_option_override_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  gcc_assert ((opts->x_target_flags & MASK_LONG_DOUBLE_64) == 0')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  gcc_assert ((opts->x_target_flags & MASK_LONG_DOUBLE_64) == 0')]
===========================================
Class:class B 
Class:class MultiTermDocs : public virtual B { class MultiTermDocs : public virtual B 
Class:class C : MultiTermDocs { class C : MultiTermDocs 
Class:  class C c;
Class:class B 
Class:class MultiTermDocs : public virtual B { class MultiTermDocs : public virtual B 
Class:class C : MultiTermDocs { class C : MultiTermDocs 
Class:  class C c;
Class:  class mips16_get_fcsr_one_only_stub : public mips_one_only_stub { 
Class:  class mips16_set_fcsr_one_only_stub : public mips_one_only_stub { 
Class:   class mips16_rdhwr_one_only_stub : public mips_one_only_stub { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (CONST_INT_P (x));'), (4, 1, u'+\t  gcc_assert (INTVAL (x) == ROUND_SAE);')]
===========================================
===========================================
Total add: 14
Total del: 0
Header: ix86_print_operand
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (CONST_INT_P (x));'), (4, 1, u'+\t  gcc_assert (INTVAL (x) == ROUND_SAE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (CONST_INT_P (x));'), (4, 1, u'+\t  gcc_assert (INTVAL (x) == ROUND_SAE);')]
===========================================
Class:  class Conditional_expression : public Expression { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (GET_MODE (OP (2)) == QImode);')]
===========================================
===========================================
Total add: 12
Total del: 2
Header: rl78_alloc_physical_registers_umul
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (GET_MODE (OP (2)) == QImode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (GET_MODE (OP (2)) == QImode);')]
===========================================
Class:template <int I> class B { template <int I> class B 
Class:class A 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert(can_create_pseudo_p ());'), (3, 1, u'+\t      gcc_assert (can_create_pseudo_p ());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: aarch64_expand_mov_immediate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert(can_create_pseudo_p ());'), (3, 1, u'+\t      gcc_assert (can_create_pseudo_p ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert(can_create_pseudo_p ());'), (3, 1, u'+\t      gcc_assert (can_create_pseudo_p ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+static_assert( is_same<traits::pointer, alloc_type::pointer>::value,'), (60, 1, u'+static_assert( is_same<traits::const_pointer,'), (64, 1, u'+static_assert( is_same<traits::void_pointer, alloc_type::void_pointer>::value,'), (67, 1, u'+static_assert( is_same<traits::const_void_pointer,'), (71, 1, u'+static_assert( is_same<traits::difference_type,'), (75, 1, u'+static_assert( is_same<traits::size_type, alloc_type::size_type>::value,'), (78, 1, u'+static_assert( is_same<traits::size_type, alloc_type::size_type>::value,'), (81, 1, u'+static_assert( is_same<traits::propagate_on_container_copy_assignment,'), (86, 1, u'+static_assert( is_same<traits::propagate_on_container_move_assignment,'), (91, 1, u'+static_assert( is_same<traits::propagate_on_container_swap,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t      gcc_assert (strlen (arm_selected_arch->name)'), (30, 1, u'+\t\t  gcc_assert (strlen (arm_selected_arch->name)')]
===========================================
===========================================
Total add: 25
Total del: 11
Header: arm_file_start
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t      gcc_assert (strlen (arm_selected_arch->name)'), (30, 1, u'+\t\t  gcc_assert (strlen (arm_selected_arch->name)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t      gcc_assert (strlen (arm_selected_arch->name)'), (30, 1, u'+\t\t  gcc_assert (strlen (arm_selected_arch->name)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\t  gcc_checking_assert (!gsi_end_p (gsi));')]
===========================================
===========================================
Total add: 2
Total del: 8
Header: branch_prob
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\t  gcc_checking_assert (!gsi_end_p (gsi));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t\t  gcc_checking_assert (!gsi_end_p (gsi));')]
===========================================
Class:class A 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+\t\t\t  gcc_assert (gsi_stmt (*gsi) == stmt);')]
===========================================
===========================================
Total add: 49
Total del: 0
Header: associate_plusminus
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+\t\t\t  gcc_assert (gsi_stmt (*gsi) == stmt);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(45, 1, u'+\t\t\t  gcc_assert (gsi_stmt (*gsi) == stmt);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+static_assert(f, "");'), (7, 1, u'+static_assert(A::~A, "");      // { dg-error "non-static member function" }')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (argc == 1);'), (4, 1, u'+  gcc_assert (argc);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: arm_rewrite_mcpu
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (argc == 1);'), (4, 1, u'+  gcc_assert (argc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (argc == 1);'), (4, 1, u'+  gcc_assert (argc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert (bytes <= 7);')]
===========================================
===========================================
Total add: 2
Total del: 5
Header: sh_expand_cmpnstr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert (bytes <= 7);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert (bytes <= 7);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t      gcc_assert (comp_name == c->name);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: read_module
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t      gcc_assert (comp_name == c->name);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t      gcc_assert (comp_name == c->name);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (STACK_BOUNDARY == PARM_BOUNDARY);'), (10, 1, u'+      gcc_assert (STACK_BOUNDARY == PARM_BOUNDARY * 2);')]
===========================================
===========================================
Total add: 16
Total del: 2
Header: tilegx_gimplify_va_arg_expr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (STACK_BOUNDARY == PARM_BOUNDARY);'), (10, 1, u'+      gcc_assert (STACK_BOUNDARY == PARM_BOUNDARY * 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (STACK_BOUNDARY == PARM_BOUNDARY);'), (10, 1, u'+      gcc_assert (STACK_BOUNDARY == PARM_BOUNDARY * 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  go_assert(TREE_CODE(expr) != CONSTRUCTOR || TREE_CONSTANT(expr));'), (3, 2, u'-\t  go_assert(TREE_CODE(expr) != ADDR_EXPR);'), (5, 1, u'+          go_assert(!this->expr_->is_composite_literal()'), (8, 1, u'+          go_assert(ue == NULL || ue->op() != OPERATOR_AND);')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: Unary_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  go_assert(TREE_CODE(expr) != CONSTRUCTOR || TREE_CONSTANT(expr));'), (3, 2, u'-\t  go_assert(TREE_CODE(expr) != ADDR_EXPR);'), (5, 1, u'+          go_assert(!this->expr_->is_composite_literal()'), (8, 1, u'+          go_assert(ue == NULL || ue->op() != OPERATOR_AND);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  go_assert(TREE_CODE(expr) != CONSTRUCTOR || TREE_CONSTANT(expr));'), (3, 2, u'-\t  go_assert(TREE_CODE(expr) != ADDR_EXPR);'), (5, 1, u'+          go_assert(!this->expr_->is_composite_literal()'), (8, 1, u'+          go_assert(ue == NULL || ue->op() != OPERATOR_AND);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 1, u'+      go_assert(!this->create_temp_ || this->expr_->is_variable());')]
===========================================
===========================================
Total add: 18
Total del: 64
Header: Unary_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 1, u'+      go_assert(!this->create_temp_ || this->expr_->is_variable());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 1, u'+      go_assert(!this->create_temp_ || this->expr_->is_variable());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tgo_assert(POINTER_TYPE_P(TREE_TYPE(expr)));'), (3, 1, u'+        go_assert(this->expr_->type()->points_to() != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Unary_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tgo_assert(POINTER_TYPE_P(TREE_TYPE(expr)));'), (3, 1, u'+        go_assert(this->expr_->type()->points_to() != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tgo_assert(POINTER_TYPE_P(TREE_TYPE(expr)));'), (3, 1, u'+        go_assert(this->expr_->type()->points_to() != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+                go_assert(this->expr_->is_variable());')]
===========================================
===========================================
Total add: 20
Total del: 18
Header: Unary_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+                go_assert(this->expr_->is_variable());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+                go_assert(this->expr_->is_variable());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (argc == 1);'), (4, 1, u'+  gcc_assert (argc);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: aarch64_rewrite_mcpu
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (argc == 1);'), (4, 1, u'+  gcc_assert (argc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (argc == 1);'), (4, 1, u'+  gcc_assert (argc);')]
===========================================
Class:  template <class T, class R> __attribute__((vector, vector(mask,uniform (y), linear(x:1)))) T func3 (T x, R y) { 
Class: class aa { class aa 
Class:    class bb 
Class:class cc : aa::bb 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);'), (3, 1, u'+      STATIC_ASSERT (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: make_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);'), (3, 1, u'+      STATIC_ASSERT (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);'), (3, 1, u'+      STATIC_ASSERT (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-\t    gcc_assert (First_Discriminant (gnat_record)'), (21, 1, u'+\t    gcc_assert (Is_Tagged_Type (gnat_record));')]
===========================================
===========================================
Total add: 9
Total del: 11
Header: gnat_to_gnu_entity
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-\t    gcc_assert (First_Discriminant (gnat_record)'), (21, 1, u'+\t    gcc_assert (Is_Tagged_Type (gnat_record));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-\t    gcc_assert (First_Discriminant (gnat_record)'), (21, 1, u'+\t    gcc_assert (Is_Tagged_Type (gnat_record));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!TYPE_HAS_COMPLEX_DFLT (type));'), (3, 1, u'+      gcc_assert (!TYPE_HAS_COMPLEX_DFLT (type)')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: build_value_init_noctor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!TYPE_HAS_COMPLEX_DFLT (type));'), (3, 1, u'+      gcc_assert (!TYPE_HAS_COMPLEX_DFLT (type)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!TYPE_HAS_COMPLEX_DFLT (type));'), (3, 1, u'+      gcc_assert (!TYPE_HAS_COMPLEX_DFLT (type)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(76, 2, u'-      go_assert(INTEGRAL_TYPE_P(TREE_TYPE(left)));'), (77, 2, u'-      go_assert(this->left_->type()->integer_type() != NULL);'), (79, 1, u'+      go_assert(left_type->integer_type() != NULL);')]
===========================================
===========================================
Total add: 46
Total del: 72
Header: Binary_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(76, 2, u'-      go_assert(INTEGRAL_TYPE_P(TREE_TYPE(left)));'), (77, 2, u'-      go_assert(this->left_->type()->integer_type() != NULL);'), (79, 1, u'+      go_assert(left_type->integer_type() != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(76, 2, u'-      go_assert(INTEGRAL_TYPE_P(TREE_TYPE(left)));'), (77, 2, u'-      go_assert(this->left_->type()->integer_type() != NULL);'), (79, 1, u'+      go_assert(left_type->integer_type() != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  gcc_assert (dst_mode == TImode || dst_mode == TFmode);'), (13, 1, u'+  gcc_assert (mode == TImode || mode == TFmode);'), (14, 1, u'+  gcc_assert (!(side_effects_p (src) || side_effects_p (dst)));'), (15, 1, u'+  gcc_assert (mode == GET_MODE (src) || GET_MODE (src) == VOIDmode);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: aarch64_split_128bit_move
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  gcc_assert (dst_mode == TImode || dst_mode == TFmode);'), (13, 1, u'+  gcc_assert (mode == TImode || mode == TFmode);'), (14, 1, u'+  gcc_assert (!(side_effects_p (src) || side_effects_p (dst)));'), (15, 1, u'+  gcc_assert (mode == GET_MODE (src) || GET_MODE (src) == VOIDmode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-  gcc_assert (dst_mode == TImode || dst_mode == TFmode);'), (13, 1, u'+  gcc_assert (mode == TImode || mode == TFmode);'), (14, 1, u'+  gcc_assert (!(side_effects_p (src) || side_effects_p (dst)));'), (15, 1, u'+  gcc_assert (mode == GET_MODE (src) || GET_MODE (src) == VOIDmode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (src_mode == TImode || src_mode == TFmode);')]
===========================================
===========================================
Total add: 17
Total del: 18
Header: aarch64_split_128bit_move
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (src_mode == TImode || src_mode == TFmode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (src_mode == TImode || src_mode == TFmode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (fieldpos >= local->total_bytes);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: output_constructor_regular_field
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (fieldpos >= local->total_bytes);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (fieldpos >= local->total_bytes);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (GET_MODE_PRECISION (outer_submode) <= MAX_BITSIZE_MODE_ANY_INT);'), (3, 1, u'+\t    gcc_assert (GET_MODE_PRECISION (outer_submode)')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: simplify_immed_subreg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (GET_MODE_PRECISION (outer_submode) <= MAX_BITSIZE_MODE_ANY_INT);'), (3, 1, u'+\t    gcc_assert (GET_MODE_PRECISION (outer_submode)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (GET_MODE_PRECISION (outer_submode) <= MAX_BITSIZE_MODE_ANY_INT);'), (3, 1, u'+\t    gcc_assert (GET_MODE_PRECISION (outer_submode)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\t      ira_assert (cost < 65535);'), (36, 1, u'+\t    ira_assert (cost < 65535);')]
===========================================
===========================================
Total add: 24
Total del: 15
Header: ira_init_register_move_cost
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\t      ira_assert (cost < 65535);'), (36, 1, u'+\t    ira_assert (cost < 65535);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\t      ira_assert (cost < 65535);'), (36, 1, u'+\t    ira_assert (cost < 65535);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-\t      ira_assert (cost <= 65535);'), (82, 1, u'+\t    ira_assert (cost <= 65535);')]
===========================================
===========================================
Total add: 44
Total del: 51
Header: ira_init_register_move_cost
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-\t      ira_assert (cost <= 65535);'), (82, 1, u'+\t    ira_assert (cost <= 65535);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-\t      ira_assert (cost <= 65535);'), (82, 1, u'+\t    ira_assert (cost <= 65535);')]
===========================================
Class: class base_class_2 { 
Class: class base_class_1 { 
Class: class base_Impl_class :   virtual public base_class_2, public base_class_1 { 
Class:  class test_cls : public base_Impl_class { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (TREE_CODE (pre) == SAVE_EXPR);')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: c_finish_omp_atomic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (TREE_CODE (pre) == SAVE_EXPR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (TREE_CODE (pre) == SAVE_EXPR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-          go_assert(right_expr->is_addressable());'), (8, 1, u'+          go_assert(right->is_addressable());')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: Expression::comparison_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-          go_assert(right_expr->is_addressable());'), (8, 1, u'+          go_assert(right->is_addressable());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-          go_assert(right_expr->is_addressable());'), (8, 1, u'+          go_assert(right->is_addressable());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  go_assert(TREE_CODE(left_type_tree) == RECORD_TYPE);'), (11, 2, u'-\t  go_assert(POINTER_TYPE_P(TREE_TYPE(left_tree)));')]
===========================================
===========================================
Total add: 1
Total del: 11
Header: Expression::comparison_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  go_assert(TREE_CODE(left_type_tree) == RECORD_TYPE);'), (11, 2, u'-\t  go_assert(POINTER_TYPE_P(TREE_TYPE(left_tree)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  go_assert(TREE_CODE(left_type_tree) == RECORD_TYPE);'), (11, 2, u'-\t  go_assert(POINTER_TYPE_P(TREE_TYPE(left_tree)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-  go_assert(TREE_CODE(expr_type) == RECORD_TYPE);'), (18, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__methods") == 0);'), (21, 2, u'-  go_assert(POINTER_TYPE_P(TREE_TYPE(table)));'), (28, 2, u'-  go_assert(TREE_CODE(TREE_TYPE(table)) == RECORD_TYPE);'), (41, 2, u'-  go_assert(field != NULL_TREE);'), (46, 1, u'+  go_assert(field != NULL);'), (66, 2, u'-  go_assert(TREE_CODE(expr_type) == RECORD_TYPE);'), (69, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__object") == 0);')]
===========================================
===========================================
Total add: 23
Total del: 42
Header: Expression::make_field_reference
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-  go_assert(TREE_CODE(expr_type) == RECORD_TYPE);'), (18, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__methods") == 0);'), (21, 2, u'-  go_assert(POINTER_TYPE_P(TREE_TYPE(table)));'), (28, 2, u'-  go_assert(TREE_CODE(TREE_TYPE(table)) == RECORD_TYPE);'), (41, 2, u'-  go_assert(field != NULL_TREE);'), (46, 1, u'+  go_assert(field != NULL);'), (66, 2, u'-  go_assert(TREE_CODE(expr_type) == RECORD_TYPE);'), (69, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__object") == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-  go_assert(TREE_CODE(expr_type) == RECORD_TYPE);'), (18, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__methods") == 0);'), (21, 2, u'-  go_assert(POINTER_TYPE_P(TREE_TYPE(table)));'), (28, 2, u'-  go_assert(TREE_CODE(TREE_TYPE(table)) == RECORD_TYPE);'), (41, 2, u'-  go_assert(field != NULL_TREE);'), (46, 1, u'+  go_assert(field != NULL);'), (66, 2, u'-  go_assert(TREE_CODE(expr_type) == RECORD_TYPE);'), (69, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__object") == 0);')]
===========================================
Class:    class Interface_info_expression : public Expression { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (len <= MAX_BITSIZE_MODE_ANY_INT / HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: c_readstr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (len <= MAX_BITSIZE_MODE_ANY_INT / HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (len <= MAX_BITSIZE_MODE_ANY_INT / HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: make_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (HOST_BITS_PER_WIDE_INT * 2 <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (TYPE_PRECISION (type) <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: lto_input_tree_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (TYPE_PRECISION (type) <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (TYPE_PRECISION (type) <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t    gcc_assert (GET_MODE_PRECISION (outer_submode) <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: simplify_immed_subreg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t    gcc_assert (GET_MODE_PRECISION (outer_submode) <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t    gcc_assert (GET_MODE_PRECISION (outer_submode) <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (n);'), (3, 1, u'+  gcc_assert (n && n <= WIDE_INT_MAX_ELTS);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: build_replicated_const
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (n);'), (3, 1, u'+  gcc_assert (n && n <= WIDE_INT_MAX_ELTS);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (n);'), (3, 1, u'+  gcc_assert (n && n <= WIDE_INT_MAX_ELTS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (TYPE_PRECISION (type) <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: build_replicated_const
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (TYPE_PRECISION (type) <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (TYPE_PRECISION (type) <= MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (GET_CODE (op) == CONST_INT);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: msp430_print_operand
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (GET_CODE (op) == CONST_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (GET_CODE (op) == CONST_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(180, 1, u'+      gcc_assert (bytes <= 7);')]
===========================================
===========================================
Total add: 118
Total del: 84
Header: sh_expand_cmpnstr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(180, 1, u'+      gcc_assert (bytes <= 7);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(180, 1, u'+      gcc_assert (bytes <= 7);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t  gcc_assert (TYPE_PRECISION (comp_type) > 16);')]
===========================================
===========================================
Total add: 4
Total del: 11
Header: UI_To_gnu
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t  gcc_assert (TYPE_PRECISION (comp_type) > 16);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\t  gcc_assert (TYPE_PRECISION (comp_type) > 16);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (BINFO_VTABLE (type_binfo));'), (26, 1, u'+\t  gcc_assert (BINFO_VIRTUAL_P (binfo));')]
===========================================
===========================================
Total add: 23
Total del: 1
Header: record_target_from_binfo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (BINFO_VTABLE (type_binfo));'), (26, 1, u'+\t  gcc_assert (BINFO_VIRTUAL_P (binfo));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (BINFO_VTABLE (type_binfo));'), (26, 1, u'+\t  gcc_assert (BINFO_VIRTUAL_P (binfo));')]
===========================================
Class:             template <class T> class _CORBA_Sequence {              template <class T> class _CORBA_Sequence 
Class:             template <class T> class _CORBA_Unbounded_Sequence : public _CORBA_Sequence<T> {              template <class T> class _CORBA_Unbounded_Sequence : public _CORBA_Sequence<T> 
Class:       class _CORBA_ObjRef_Var_base {        class _CORBA_ObjRef_Var_base 
Class:         template <class T, class T_Helper> class _CORBA_ObjRef_Var : public _CORBA_ObjRef_Var_base {          template <class T, class T_Helper> class _CORBA_ObjRef_Var : public _CORBA_ObjRef_Var_base 
Class:         class omniObjRef {          class omniObjRef 
Class:            class omniServant {             class omniServant 
Class:      class NVList {       class NVList 
Class:      class Object {       class Object 
Class:      class StructMemberSeq : public _CORBA_Unbounded_Sequence< StructMember > {       class StructMemberSeq : public _CORBA_Unbounded_Sequence< StructMember > 
Class:      class _objref_IRObject :   public virtual ::CORBA::Object,   public virtual omniObjRef {       class _objref_IRObject :   public virtual ::CORBA::Object,   public virtual omniObjRef 
Class:      class _impl_IRObject :   public virtual omniServant {       class _impl_IRObject :   public virtual omniServant 
Class:      class _impl_Contained :   public virtual _impl_IRObject {       class _impl_Contained :   public virtual _impl_IRObject 
Class:      class ExceptionDef_Helper {       class ExceptionDef_Helper 
Class:      class Container {       class Container 
Class:      class _objref_Container :   public virtual _objref_IRObject {       class _objref_Container :   public virtual _objref_IRObject 
Class:      class _impl_Container :   public virtual _impl_IRObject {       class _impl_Container :   public virtual _impl_IRObject 
Class:      class _impl_IDLType :   public virtual _impl_IRObject {       class _impl_IDLType :   public virtual _impl_IRObject 
Class:      class _impl_TypedefDef :   public virtual _impl_Contained,   public virtual _impl_IDLType {       class _impl_TypedefDef :   public virtual _impl_Contained,   public virtual _impl_IDLType 
Class:      class _impl_StructDef :   public virtual _impl_TypedefDef,   public virtual _impl_Container {       class _impl_StructDef :   public virtual _impl_TypedefDef,   public virtual _impl_Container 
Class:            class ServantBase : public virtual omniServant {             class ServantBase : public virtual omniServant 
Class:           class IRObject :   public virtual CORBA::_impl_IRObject,   public virtual ::PortableServer::ServantBase {            class IRObject :   public virtual CORBA::_impl_IRObject,   public virtual ::PortableServer::ServantBase 
Class:      class Contained :   public virtual CORBA::_impl_Contained,   public virtual IRObject {       class Contained :   public virtual CORBA::_impl_Contained,   public virtual IRObject 
Class:      class Container :   public virtual CORBA::_impl_Container,   public virtual IRObject {       class Container :   public virtual CORBA::_impl_Container,   public virtual IRObject 
Class:      class IDLType :   public virtual CORBA::_impl_IDLType,   public virtual IRObject {       class IDLType :   public virtual CORBA::_impl_IDLType,   public virtual IRObject 
Class:      class TypedefDef :   public virtual CORBA::_impl_TypedefDef,   public virtual Contained,     public virtual IDLType {       class TypedefDef :   public virtual CORBA::_impl_TypedefDef,   public virtual Contained,     public virtual IDLType 
Class:      class StructDef :   public virtual CORBA::_impl_StructDef,   public virtual TypedefDef,     public virtual Container {       class StructDef :   public virtual CORBA::_impl_StructDef,   public virtual TypedefDef,     public virtual Container 
Class:     class omniOrbPOA;
Class:          class _0RL_cd_7963219a43724a61_f2000000   : public omniCallDescriptor {           class _0RL_cd_7963219a43724a61_f2000000   : public omniCallDescriptor 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      go_assert(this->expr_->is_variable());'), (26, 2, u'-\t  go_assert(e->integer_type()->is_rune());'), (39, 1, u'+          go_assert(e->integer_type()->is_rune());')]
===========================================
===========================================
Total add: 12
Total del: 30
Header: Type_conversion_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      go_assert(this->expr_->is_variable());'), (26, 2, u'-\t  go_assert(e->integer_type()->is_rune());'), (39, 1, u'+          go_assert(e->integer_type()->is_rune());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      go_assert(this->expr_->is_variable());'), (26, 2, u'-\t  go_assert(e->integer_type()->is_rune());'), (39, 1, u'+          go_assert(e->integer_type()->is_rune());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tgo_assert(arg1->is_variable());')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: Builtin_call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tgo_assert(arg1->is_variable());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tgo_assert(arg1->is_variable());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
Total add: 5
Total del: 3
Header: Builtin_call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
Total add: 8
Total del: 16
Header: Builtin_call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t    go_assert(arg2->is_variable());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  go_assert(!array_type->is_slice_type() || this->array_->is_variable());')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: Array_index_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  go_assert(!array_type->is_slice_type() || this->array_->is_variable());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  go_assert(!array_type->is_slice_type() || this->array_->is_variable());')]
===========================================
Class:   class Slice_info_expression : public Expression { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      go_assert(array->type()->array_type() != NULL);'), (14, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (53, 2, u'-  go_assert(TREE_CODE(type) == RECORD_TYPE);'), (56, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__count") == 0);'), (85, 2, u'-  go_assert(TREE_CODE(type) == RECORD_TYPE);'), (88, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__capacity") == 0);')]
===========================================
===========================================
Total add: 22
Total del: 52
Header: Array_type::value_pointer_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      go_assert(array->type()->array_type() != NULL);'), (14, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (53, 2, u'-  go_assert(TREE_CODE(type) == RECORD_TYPE);'), (56, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__count") == 0);'), (85, 2, u'-  go_assert(TREE_CODE(type) == RECORD_TYPE);'), (88, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__capacity") == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      go_assert(array->type()->array_type() != NULL);'), (14, 2, u'-      go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)),'), (53, 2, u'-  go_assert(TREE_CODE(type) == RECORD_TYPE);'), (56, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__count") == 0);'), (85, 2, u'-  go_assert(TREE_CODE(type) == RECORD_TYPE);'), (88, 2, u'-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), "__capacity") == 0);')]
===========================================
Class:  class Flatten : public Traverse { 
Class:template <typename _Functor, typename... _Bound_args> class D <_Functor(_Bound_args...)> { class D <_Functor(_Bound_args...)> 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t      gcc_assert (!TREE_ADDRESSABLE (exp));'), (49, 1, u'+\t\t  gcc_assert (!TREE_ADDRESSABLE (exp));')]
===========================================
===========================================
Total add: 40
Total del: 19
Header: expand_expr_real_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t      gcc_assert (!TREE_ADDRESSABLE (exp));'), (49, 1, u'+\t\t  gcc_assert (!TREE_ADDRESSABLE (exp));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t      gcc_assert (!TREE_ADDRESSABLE (exp));'), (49, 1, u'+\t\t  gcc_assert (!TREE_ADDRESSABLE (exp));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (is_gimple_call (stmt));')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: gimple_fold_builtin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (is_gimple_call (stmt));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (is_gimple_call (stmt));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (get_current_def (current_new_name) == NULL_TREE);'), (9, 1, u'+\t  gcc_assert (gimple_code (phi) == GIMPLE_PHI')]
===========================================
===========================================
Total add: 12
Total del: 1
Header: slpeel_update_phi_nodes_for_guard1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (get_current_def (current_new_name) == NULL_TREE);'), (9, 1, u'+\t  gcc_assert (gimple_code (phi) == GIMPLE_PHI')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (get_current_def (current_new_name) == NULL_TREE);'), (9, 1, u'+\t  gcc_assert (gimple_code (phi) == GIMPLE_PHI')]
===========================================
Class: template <typename To_, typename... From_> class my_is_convertible_many { class my_is_convertible_many 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 1, u'+  static_assert(my_is_convertible_many<Test, A, A>::value,""); // true, correct'), (44, 1, u'+  static_assert(!my_is_convertible_many<Test, B, B>::value,""); // false, correct'), (45, 1, u'+  static_assert(!my_is_convertible_many<Test, C, C>::value,""); // error')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (GET_MODE (op) == mode')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: ix86_expand_special_args_builtin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (GET_MODE (op) == mode')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (GET_MODE (op) == mode')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tgcc_assert (i == 0')]
===========================================
===========================================
Total add: 12
Total del: 0
Header: construct_container
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tgcc_assert (i == 0')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\tgcc_assert (i == 0')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (cmp_mode != BLKmode);')]
===========================================
===========================================
Total add: 21
Total del: 4
Header: ix86_expand_sse_cmp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (cmp_mode != BLKmode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (cmp_mode != BLKmode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (w <= 32);'), (3, 1, u'+  gcc_assert (w <= 64);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: ix86_expand_vec_perm
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (w <= 32);'), (3, 1, u'+  gcc_assert (w <= 64);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (w <= 32);'), (3, 1, u'+  gcc_assert (w <= 64);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-\t    gcc_assert (ok);')]
===========================================
===========================================
Total add: 5
Total del: 23
Header: ix86_expand_vector_init_duplicate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-\t    gcc_assert (ok);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 2, u'-\t    gcc_assert (ok);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (hmode != VOIDmode);'), (6, 1, u'+\t  gcc_assert (gmode != VOIDmode);')]
===========================================
===========================================
Total add: 21
Total del: 1
Header: half:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (hmode != VOIDmode);'), (6, 1, u'+\t  gcc_assert (gmode != VOIDmode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (hmode != VOIDmode);'), (6, 1, u'+\t  gcc_assert (gmode != VOIDmode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (mode == V4SImode || mode == V8SImode);'), (3, 1, u'+  gcc_assert (mode == V4SImode || mode == V8SImode || mode == V16SImode);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ix86_expand_mul_widen_evenodd
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (mode == V4SImode || mode == V8SImode);'), (3, 1, u'+  gcc_assert (mode == V4SImode || mode == V8SImode || mode == V16SImode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (mode == V4SImode || mode == V8SImode);'), (3, 1, u'+  gcc_assert (mode == V4SImode || mode == V8SImode || mode == V16SImode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (types_compatible_p (srctype, rettype)'), (4, 1, u'+      gcc_checking_assert (types_compatible_p (srctype, rettype));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: vectorizable_load
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (types_compatible_p (srctype, rettype)'), (4, 1, u'+      gcc_checking_assert (types_compatible_p (srctype, rettype));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (types_compatible_p (srctype, rettype)'), (4, 1, u'+      gcc_checking_assert (types_compatible_p (srctype, rettype));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      gcc_checking_assert (types_compatible_p (srctype, rettype)')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: vectorizable_mask_load_store
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      gcc_checking_assert (types_compatible_p (srctype, rettype)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+      gcc_checking_assert (types_compatible_p (srctype, rettype)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (mask_perm_mask != NULL_TREE);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: vectorizable_mask_load_store
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (mask_perm_mask != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (mask_perm_mask != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-      gcc_checking_assert (types_compatible_p (srctype, rettype)')]
===========================================
===========================================
Total add: 0
Total del: 9
Header: vectorizable_mask_load_store
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-      gcc_checking_assert (types_compatible_p (srctype, rettype)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-      gcc_checking_assert (types_compatible_p (srctype, rettype)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-\t      gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask_op))'), (38, 1, u'+\t\t  gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask_op))')]
===========================================
===========================================
Total add: 26
Total del: 19
Header: vectorizable_mask_load_store
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-\t      gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask_op))'), (38, 1, u'+\t\t  gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask_op))')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-\t      gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask_op))'), (38, 1, u'+\t\t  gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask_op))')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (CONST_INT_P (x));')]
===========================================
===========================================
Total add: 32
Total del: 0
Header: ix86_print_operand
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (CONST_INT_P (x));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (CONST_INT_P (x));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (ptr->arch < PROCESSOR_max);'), (11, 1, u'+  gcc_assert (ptr->tune < PROCESSOR_max);')]
===========================================
===========================================
Total add: 4
Total del: 8
Header: ix86_function_specific_print
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (ptr->arch < PROCESSOR_max);'), (11, 1, u'+  gcc_assert (ptr->tune < PROCESSOR_max);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (ptr->arch < PROCESSOR_max);'), (11, 1, u'+  gcc_assert (ptr->tune < PROCESSOR_max);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-      gcc_assert (DECL_COMPLETE_CONSTRUCTOR_P (ctor)'), (15, 1, u'+      gcc_assert (DECL_COMPLETE_CONSTRUCTOR_P (ctor));')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: write_special_name_constructor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-      gcc_assert (DECL_COMPLETE_CONSTRUCTOR_P (ctor)'), (15, 1, u'+      gcc_assert (DECL_COMPLETE_CONSTRUCTOR_P (ctor));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-      gcc_assert (DECL_COMPLETE_CONSTRUCTOR_P (ctor)'), (15, 1, u'+      gcc_assert (DECL_COMPLETE_CONSTRUCTOR_P (ctor));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-      gcc_assert (DECL_COMPLETE_DESTRUCTOR_P (dtor)'), (15, 1, u'+      gcc_assert (DECL_COMPLETE_DESTRUCTOR_P (dtor));')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: write_special_name_destructor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-      gcc_assert (DECL_COMPLETE_DESTRUCTOR_P (dtor)'), (15, 1, u'+      gcc_assert (DECL_COMPLETE_DESTRUCTOR_P (dtor));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-      gcc_assert (DECL_COMPLETE_DESTRUCTOR_P (dtor)'), (15, 1, u'+      gcc_assert (DECL_COMPLETE_DESTRUCTOR_P (dtor));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+  gcc_assert (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (fn)')]
===========================================
===========================================
Total add: 29
Total del: 19
Header: cdtor_comdat_group
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+  gcc_assert (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (fn)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+  gcc_assert (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (fn)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (!fence_insn_p);'), (10, 1, u'+      gcc_assert (!fence_insn_p')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: fill_vec_av_set
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (!fence_insn_p);'), (10, 1, u'+      gcc_assert (!fence_insn_p')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (!fence_insn_p);'), (10, 1, u'+      gcc_assert (!fence_insn_p')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (!grouped_store);')]
===========================================
===========================================
Total add: 21
Total del: 0
Header: vectorizable_store
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (!grouped_store);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (!grouped_store);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      gcc_assert (icode == CODE_FOR_crypto_sha1h);')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: arm_expand_unop_builtin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      gcc_assert (icode == CODE_FOR_crypto_sha1h);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      gcc_assert (icode == CODE_FOR_crypto_sha1h);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t      gcc_assert (strlen (arm_selected_arch->name)')]
===========================================
===========================================
Total add: 16
Total del: 1
Header: arm_file_start
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t      gcc_assert (strlen (arm_selected_arch->name)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t      gcc_assert (strlen (arm_selected_arch->name)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert (exponent < 10000);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: done:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert (exponent < 10000);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      assert (exponent < 10000);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (token->type == CPP_NAME'), (5, 1, u'+\tgcc_assert (token->type == CPP_NAME'), (8, 1, u'+\tgcc_assert (token->type == CPP_NAME')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: c_finish_omp_declare_simd
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (token->type == CPP_NAME'), (5, 1, u'+\tgcc_assert (token->type == CPP_NAME'), (8, 1, u'+\tgcc_assert (token->type == CPP_NAME')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (token->type == CPP_NAME'), (5, 1, u'+\tgcc_assert (token->type == CPP_NAME'), (8, 1, u'+\tgcc_assert (token->type == CPP_NAME')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (REG_P (reg));'), (16, 1, u'+      gcc_assert (GET_CODE (span) == PARALLEL);'), (24, 1, u'+\t  gcc_assert (REG_P (reg));')]
===========================================
===========================================
Total add: 24
Total del: 3
Header: dwarf2out_frame_debug_cfa_restore
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (REG_P (reg));'), (16, 1, u'+      gcc_assert (GET_CODE (span) == PARALLEL);'), (24, 1, u'+\t  gcc_assert (REG_P (reg));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (REG_P (reg));'), (16, 1, u'+      gcc_assert (GET_CODE (span) == PARALLEL);'), (24, 1, u'+\t  gcc_assert (REG_P (reg));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\t  gcc_assert (!POINTER_TYPE_P (context->outer_type));'), (4, 1, u'+\t\t  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (base)));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: get_polymorphic_call_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\t  gcc_assert (!POINTER_TYPE_P (context->outer_type));'), (4, 1, u'+\t\t  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (base)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t\t  gcc_assert (!POINTER_TYPE_P (context->outer_type));'), (4, 1, u'+\t\t  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (base)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-\t\t  gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
Total add: 12
Total del: 18
Header: gimple_fold_call
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-\t\t  gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-\t\t  gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  go_assert(TREE_CODE(TREE_TYPE(struct_tree)) == RECORD_TYPE);'), (12, 2, u'-      go_assert(saw_errors());'), (18, 2, u'-      go_assert(field != NULL_TREE);')]
===========================================
===========================================
Total add: 6
Total del: 22
Header: Field_reference_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  go_assert(TREE_CODE(TREE_TYPE(struct_tree)) == RECORD_TYPE);'), (12, 2, u'-      go_assert(saw_errors());'), (18, 2, u'-      go_assert(field != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  go_assert(TREE_CODE(TREE_TYPE(struct_tree)) == RECORD_TYPE);'), (12, 2, u'-      go_assert(saw_errors());'), (18, 2, u'-      go_assert(field != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t  gcc_assert (GET_CODE (PATTERN (insn)) == USE')]
===========================================
===========================================
Total add: 10
Total del: 3
Header: lra_set_insn_recog_data
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t  gcc_assert (GET_CODE (PATTERN (insn)) == USE')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t  gcc_assert (GET_CODE (PATTERN (insn)) == USE')]
===========================================
Class:   class A { class A 
Class:class B { class B 
Class:class C final : B { class C final : B 
Class:class B { class B 
Class:template <typename T, typename M> class C { template <typename T, typename M> class C 
Class:class D { class D 
Class:class F { class F 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+\tgcc_assert (gimple_bb (phi) == data->current_loop->header);')]
===========================================
===========================================
Total add: 13
Total del: 5
Header: add_old_iv_candidates
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+\tgcc_assert (gimple_bb (phi) == data->current_loop->header);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+\tgcc_assert (gimple_bb (phi) == data->current_loop->header);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  go_assert(this->is_method());')]
===========================================
===========================================
Total add: 26
Total del: 0
Header: Function_type::copy_with_receiver
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  go_assert(this->is_method());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  go_assert(this->is_method());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+\t  go_assert(!new_receiver_name.empty());')]
===========================================
===========================================
Total add: 19
Total del: 1
Header: Build_recover_thunks::function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+\t  go_assert(!new_receiver_name.empty());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+\t  go_assert(!new_receiver_name.empty());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert')]
===========================================
===========================================
Total add: 20
Total del: 0
Header: c_gimplify_expr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert')]
===========================================
===========================================
Total add: 15
Total del: 0
Header: cp_gimplify_expr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert')]
===========================================
===========================================
Total add: 0
Total del: 13
Header: gimplify_expr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert')]
===========================================
Class:    class Rectangle { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t      gcc_assert (!gimple_call_internal_p (g));')]
===========================================
===========================================
Total add: 5
Total del: 7
Header: expand_expr_real_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t      gcc_assert (!gimple_call_internal_p (g));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t      gcc_assert (!gimple_call_internal_p (g));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t  gcc_assert (minv.cmp (maxv, TYPE_UNSIGNED (type)) <= 0);')]
===========================================
===========================================
Total add: 9
Total del: 1
Header: determine_value_range
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t  gcc_assert (minv.cmp (maxv, TYPE_UNSIGNED (type)) <= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t  gcc_assert (minv.cmp (maxv, TYPE_UNSIGNED (type)) <= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\tgcc_assert (gimple_bb (phi) == data->current_loop->header);')]
===========================================
===========================================
Total add: 5
Total del: 13
Header: add_old_iv_candidates
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\tgcc_assert (gimple_bb (phi) == data->current_loop->header);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-\tgcc_assert (gimple_bb (phi) == data->current_loop->header);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  gcc_assert (TREE_CODE (uid) == SSA_NAME);'), (17, 1, u'+\t      gcc_assert (TREE_CODE (uid) == SSA_NAME);')]
===========================================
===========================================
Total add: 19
Total del: 9
Header: get_references_in_stmt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  gcc_assert (TREE_CODE (uid) == SSA_NAME);'), (17, 1, u'+\t      gcc_assert (TREE_CODE (uid) == SSA_NAME);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  gcc_assert (TREE_CODE (uid) == SSA_NAME);'), (17, 1, u'+\t      gcc_assert (TREE_CODE (uid) == SSA_NAME);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (empty_block_p (e->src)'), (20, 1, u'+      gcc_assert (empty_block_p (scalar_e->src)'), (22, 1, u'+      gcc_assert (single_pred_p (condition_bb));')]
===========================================
===========================================
Total add: 37
Total del: 2
Header: vect_loop_versioning
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (empty_block_p (e->src)'), (20, 1, u'+      gcc_assert (empty_block_p (scalar_e->src)'), (22, 1, u'+      gcc_assert (single_pred_p (condition_bb));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (empty_block_p (e->src)'), (20, 1, u'+      gcc_assert (empty_block_p (scalar_e->src)'), (22, 1, u'+      gcc_assert (single_pred_p (condition_bb));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  gcc_assert (EDGE_COUNT (merge_bb->preds) == 2);'), (24, 1, u'+      gcc_assert (EDGE_COUNT (merge_bb->preds) >= 2);')]
===========================================
===========================================
Total add: 20
Total del: 15
Header: vect_loop_versioning
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  gcc_assert (EDGE_COUNT (merge_bb->preds) == 2);'), (24, 1, u'+      gcc_assert (EDGE_COUNT (merge_bb->preds) >= 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  gcc_assert (EDGE_COUNT (merge_bb->preds) == 2);'), (24, 1, u'+      gcc_assert (EDGE_COUNT (merge_bb->preds) >= 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+  gcc_assert (ncopies >= 1);'), (89, 1, u'+      gcc_assert (gather_decl);'), (160, 1, u'+\t  gcc_assert (perm_mask != NULL_TREE);'), (172, 1, u'+\t  gcc_assert (perm_mask != NULL_TREE);'), (184, 1, u'+      gcc_checking_assert (types_compatible_p (srctype, rettype)'), (194, 1, u'+\t  gcc_assert (!new_bb);'), (214, 1, u'+\t      gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (op))'), (238, 1, u'+\t      gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask_op))'), (256, 1, u'+\t      gcc_assert (TYPE_VECTOR_SUBPARTS (vectype)'), (310, 1, u'+\t      gcc_assert (useless_type_conversion_p (vectype,'), (315, 1, u'+\t      gcc_assert (!inv_p);'), (368, 1, u'+\t      gcc_assert (!inv_p);')]
===========================================
===========================================
Total add: 407
Total del: 0
Header: vectorizable_function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+  gcc_assert (ncopies >= 1);'), (89, 1, u'+      gcc_assert (gather_decl);'), (160, 1, u'+\t  gcc_assert (perm_mask != NULL_TREE);'), (172, 1, u'+\t  gcc_assert (perm_mask != NULL_TREE);'), (184, 1, u'+      gcc_checking_assert (types_compatible_p (srctype, rettype)'), (194, 1, u'+\t  gcc_assert (!new_bb);'), (214, 1, u'+\t      gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (op))'), (238, 1, u'+\t      gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask_op))'), (256, 1, u'+\t      gcc_assert (TYPE_VECTOR_SUBPARTS (vectype)'), (310, 1, u'+\t      gcc_assert (useless_type_conversion_p (vectype,'), (315, 1, u'+\t      gcc_assert (!inv_p);'), (368, 1, u'+\t      gcc_assert (!inv_p);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 1, u'+  gcc_assert (ncopies >= 1);'), (89, 1, u'+      gcc_assert (gather_decl);'), (160, 1, u'+\t  gcc_assert (perm_mask != NULL_TREE);'), (172, 1, u'+\t  gcc_assert (perm_mask != NULL_TREE);'), (184, 1, u'+      gcc_checking_assert (types_compatible_p (srctype, rettype)'), (194, 1, u'+\t  gcc_assert (!new_bb);'), (214, 1, u'+\t      gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (op))'), (238, 1, u'+\t      gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask_op))'), (256, 1, u'+\t      gcc_assert (TYPE_VECTOR_SUBPARTS (vectype)'), (310, 1, u'+\t      gcc_assert (useless_type_conversion_p (vectype,'), (315, 1, u'+\t      gcc_assert (!inv_p);'), (368, 1, u'+\t      gcc_assert (!inv_p);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t    gcc_checking_assert (vect_loop_vectorized_call')]
===========================================
===========================================
Total add: 33
Total del: 0
Header: vectorize_loops
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t    gcc_checking_assert (vect_loop_vectorized_call')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t    gcc_checking_assert (vect_loop_vectorized_call')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  static_assert(test_relationship<is_base_of, volatile ClassType,')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  static_assert(test_relationship<is_base_of, volatile ClassType,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  static_assert(test_relationship<is_base_of, volatile ClassType,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+\tgcc_assert (gimple_bb (phi) == data->current_loop->header);')]
===========================================
===========================================
Total add: 13
Total del: 5
Header: add_old_iv_candidates
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+\tgcc_assert (gimple_bb (phi) == data->current_loop->header);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+\tgcc_assert (gimple_bb (phi) == data->current_loop->header);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-      FFI_ASSERT (0);')]
===========================================
===========================================
Total add: 3
Total del: 18
Header: ffi_call
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-      FFI_ASSERT (0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-      FFI_ASSERT (0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(338, 2, u'-\t\tFFI_ASSERT (0);'), (573, 2, u'-\t  FFI_ASSERT (0);')]
===========================================
===========================================
Total add: 2
Total del: 587
Header: ffi_prep_closure_loc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(338, 2, u'-\t\tFFI_ASSERT (0);'), (573, 2, u'-\t  FFI_ASSERT (0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(338, 2, u'-\t\tFFI_ASSERT (0);'), (573, 2, u'-\t  FFI_ASSERT (0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (bb_index < (unsigned) last_basic_block);'), (3, 1, u'+      gcc_checking_assert (bb_index')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: compute_idf
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (bb_index < (unsigned) last_basic_block);'), (3, 1, u'+      gcc_checking_assert (bb_index')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (bb_index < (unsigned) last_basic_block);'), (3, 1, u'+      gcc_checking_assert (bb_index')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (bb->index < last_basic_block);'), (3, 1, u'+      gcc_checking_assert (bb->index < last_basic_block_for_fn (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: prepare_def_site_for
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (bb->index < last_basic_block);'), (3, 1, u'+      gcc_checking_assert (bb->index < last_basic_block_for_fn (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (bb->index < last_basic_block);'), (3, 1, u'+      gcc_checking_assert (bb->index < last_basic_block_for_fn (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (profile_status != PROFILE_GUESSED);'), (3, 1, u'+  gcc_assert (profile_status_for_fn (cfun) != PROFILE_GUESSED);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: gimple_predict_edge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (profile_status != PROFILE_GUESSED);'), (3, 1, u'+  gcc_assert (profile_status_for_fn (cfun) != PROFILE_GUESSED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (profile_status != PROFILE_GUESSED);'), (3, 1, u'+  gcc_assert (profile_status_for_fn (cfun) != PROFILE_GUESSED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (BASIC_BLOCK (old_index) == NULL);'), (3, 1, u'+  gcc_assert (BASIC_BLOCK_FOR_FN (cfun, old_index) == NULL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: df_bb_replace
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (BASIC_BLOCK (old_index) == NULL);'), (3, 1, u'+  gcc_assert (BASIC_BLOCK_FOR_FN (cfun, old_index) == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (BASIC_BLOCK (old_index) == NULL);'), (3, 1, u'+  gcc_assert (BASIC_BLOCK_FOR_FN (cfun, old_index) == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_checking_assert (c->rhs.type == SCALAR && c->lhs.type == SCALAR);'), (7, 1, u'+      gcc_checking_assert (c->rhs.type == SCALAR && c->lhs.type == SCALAR')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: do_complex_constraint
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_checking_assert (c->rhs.type == SCALAR && c->lhs.type == SCALAR);'), (7, 1, u'+      gcc_checking_assert (c->rhs.type == SCALAR && c->lhs.type == SCALAR')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_checking_assert (c->rhs.type == SCALAR && c->lhs.type == SCALAR);'), (7, 1, u'+      gcc_checking_assert (c->rhs.type == SCALAR && c->lhs.type == SCALAR')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  gcc_assert (base != NULL && offset != NULL);')]
===========================================
===========================================
Total add: 9
Total del: 5
Header: operands_ok_ldrd_strd
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  gcc_assert (base != NULL && offset != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  gcc_assert (base != NULL && offset != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (MEM_P (addr));'), (16, 1, u'+  gcc_assert (MEM_P (mem));')]
===========================================
===========================================
Total add: 13
Total del: 8
Header: mem_ok_for_ldrd_strd
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (MEM_P (addr));'), (16, 1, u'+  gcc_assert (MEM_P (mem));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (MEM_P (addr));'), (16, 1, u'+  gcc_assert (MEM_P (mem));')]
===========================================
Class: class DerivedHiddenCons : private HiddenCons { 
Class: class MultiDerivedHiddenCons : private HiddenCons, private __gnu_test::ClassType { 
Class: class NonEmptyClassTwo { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(sizeof(aligned_storage<4, align_c>::type) >= 4, "");'), (5, 1, u'+  static_assert(__alignof__(aligned_storage<4, align_c>::type) == align_c, "");'), (10, 1, u'+  static_assert(sizeof(aligned_storage<1, align_s>::type) >= 1, "");'), (11, 1, u'+  static_assert(__alignof__(aligned_storage<1, align_s>::type) == align_s, "");'), (16, 1, u'+  static_assert(sizeof(aligned_storage<7, align_i>::type) >= 7, "");'), (17, 1, u'+  static_assert(__alignof__(aligned_storage<7, align_i>::type) == align_i, "");'), (22, 1, u'+  static_assert(sizeof(aligned_storage<2, align_d>::type) >= 2, "");'), (23, 1, u'+  static_assert(__alignof__(aligned_storage<2, align_d>::type) == align_d, "");'), (28, 1, u'+  static_assert(sizeof(aligned_storage<20, align_ai>::type) >= 20, "");'), (29, 1, u'+  static_assert(__alignof__(aligned_storage<20, align_ai>::type) == align_ai,'), (35, 1, u'+  static_assert(sizeof(aligned_storage<11, align_ct>::type) >= 11, "");'), (36, 1, u'+  static_assert(__alignof__(aligned_storage<11, align_ct>::type) == align_ct,')]
===========================================
===========================================
Total add: 16
Total del: 20
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(sizeof(aligned_storage<4, align_c>::type) >= 4, "");'), (5, 1, u'+  static_assert(__alignof__(aligned_storage<4, align_c>::type) == align_c, "");'), (10, 1, u'+  static_assert(sizeof(aligned_storage<1, align_s>::type) >= 1, "");'), (11, 1, u'+  static_assert(__alignof__(aligned_storage<1, align_s>::type) == align_s, "");'), (16, 1, u'+  static_assert(sizeof(aligned_storage<7, align_i>::type) >= 7, "");'), (17, 1, u'+  static_assert(__alignof__(aligned_storage<7, align_i>::type) == align_i, "");'), (22, 1, u'+  static_assert(sizeof(aligned_storage<2, align_d>::type) >= 2, "");'), (23, 1, u'+  static_assert(__alignof__(aligned_storage<2, align_d>::type) == align_d, "");'), (28, 1, u'+  static_assert(sizeof(aligned_storage<20, align_ai>::type) >= 20, "");'), (29, 1, u'+  static_assert(__alignof__(aligned_storage<20, align_ai>::type) == align_ai,'), (35, 1, u'+  static_assert(sizeof(aligned_storage<11, align_ct>::type) >= 11, "");'), (36, 1, u'+  static_assert(__alignof__(aligned_storage<11, align_ct>::type) == align_ct,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(sizeof(aligned_storage<4, align_c>::type) >= 4, "");'), (5, 1, u'+  static_assert(__alignof__(aligned_storage<4, align_c>::type) == align_c, "");'), (10, 1, u'+  static_assert(sizeof(aligned_storage<1, align_s>::type) >= 1, "");'), (11, 1, u'+  static_assert(__alignof__(aligned_storage<1, align_s>::type) == align_s, "");'), (16, 1, u'+  static_assert(sizeof(aligned_storage<7, align_i>::type) >= 7, "");'), (17, 1, u'+  static_assert(__alignof__(aligned_storage<7, align_i>::type) == align_i, "");'), (22, 1, u'+  static_assert(sizeof(aligned_storage<2, align_d>::type) >= 2, "");'), (23, 1, u'+  static_assert(__alignof__(aligned_storage<2, align_d>::type) == align_d, "");'), (28, 1, u'+  static_assert(sizeof(aligned_storage<20, align_ai>::type) >= 20, "");'), (29, 1, u'+  static_assert(__alignof__(aligned_storage<20, align_ai>::type) == align_ai,'), (35, 1, u'+  static_assert(sizeof(aligned_storage<11, align_ct>::type) >= 11, "");'), (36, 1, u'+  static_assert(__alignof__(aligned_storage<11, align_ct>::type) == align_ct,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int>(true), "");'), (20, 1, u'+  static_assert(test_property<has_trivial_copy_assign, float>(true), "");'), (21, 1, u'+  static_assert(test_property<has_trivial_copy_assign, EnumType>(true), "");'), (22, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int*>(true), "");'), (23, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int(*)(int)>(true), "");'), (24, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (26, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (28, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int[2]>(true), "");'), (29, 1, u'+  static_assert(test_property<has_trivial_copy_assign, float[][3]>(true), "");'), (30, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (32, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int*[3]>(true), "");'), (33, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (35, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (37, 1, u'+  static_assert(test_property<has_trivial_copy_assign,')]
===========================================
===========================================
Total add: 21
Total del: 24
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int>(true), "");'), (20, 1, u'+  static_assert(test_property<has_trivial_copy_assign, float>(true), "");'), (21, 1, u'+  static_assert(test_property<has_trivial_copy_assign, EnumType>(true), "");'), (22, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int*>(true), "");'), (23, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int(*)(int)>(true), "");'), (24, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (26, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (28, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int[2]>(true), "");'), (29, 1, u'+  static_assert(test_property<has_trivial_copy_assign, float[][3]>(true), "");'), (30, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (32, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int*[3]>(true), "");'), (33, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (35, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (37, 1, u'+  static_assert(test_property<has_trivial_copy_assign,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int>(true), "");'), (20, 1, u'+  static_assert(test_property<has_trivial_copy_assign, float>(true), "");'), (21, 1, u'+  static_assert(test_property<has_trivial_copy_assign, EnumType>(true), "");'), (22, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int*>(true), "");'), (23, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int(*)(int)>(true), "");'), (24, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (26, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (28, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int[2]>(true), "");'), (29, 1, u'+  static_assert(test_property<has_trivial_copy_assign, float[][3]>(true), "");'), (30, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (32, 1, u'+  static_assert(test_property<has_trivial_copy_assign, int*[3]>(true), "");'), (33, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (35, 1, u'+  static_assert(test_property<has_trivial_copy_assign,'), (37, 1, u'+  static_assert(test_property<has_trivial_copy_assign,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, int>(true), "");'), (18, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, float>(true), "");'), (19, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (21, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, int*>(true), "");'), (22, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (24, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (26, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (28, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, int[2]>(true), "");'), (29, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (31, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (33, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, int*[3]>(true), "");'), (34, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (36, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (38, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,')]
===========================================
===========================================
Total add: 24
Total del: 22
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, int>(true), "");'), (18, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, float>(true), "");'), (19, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (21, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, int*>(true), "");'), (22, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (24, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (26, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (28, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, int[2]>(true), "");'), (29, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (31, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (33, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, int*[3]>(true), "");'), (34, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (36, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (38, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, int>(true), "");'), (18, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, float>(true), "");'), (19, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (21, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, int*>(true), "");'), (22, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (24, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (26, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (28, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, int[2]>(true), "");'), (29, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (31, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (33, 1, u'+  static_assert(test_category<has_trivial_copy_constructor, int*[3]>(true), "");'), (34, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (36, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,'), (38, 1, u'+  static_assert(test_category<has_trivial_copy_constructor,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+  static_assert(test_category<has_trivial_default_constructor, int>(true), "");'), (21, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (23, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (25, 1, u'+  static_assert(test_category<has_trivial_default_constructor, int*>(true), "");'), (26, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (28, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (30, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (32, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (34, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (36, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (38, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (40, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (42, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (44, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (46, 1, u'+  static_assert(test_category<has_trivial_default_constructor,')]
===========================================
===========================================
Total add: 30
Total del: 25
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+  static_assert(test_category<has_trivial_default_constructor, int>(true), "");'), (21, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (23, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (25, 1, u'+  static_assert(test_category<has_trivial_default_constructor, int*>(true), "");'), (26, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (28, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (30, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (32, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (34, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (36, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (38, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (40, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (42, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (44, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (46, 1, u'+  static_assert(test_category<has_trivial_default_constructor,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+  static_assert(test_category<has_trivial_default_constructor, int>(true), "");'), (21, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (23, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (25, 1, u'+  static_assert(test_category<has_trivial_default_constructor, int*>(true), "");'), (26, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (28, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (30, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (32, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (34, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (36, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (38, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (40, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (42, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (44, 1, u'+  static_assert(test_category<has_trivial_default_constructor,'), (46, 1, u'+  static_assert(test_category<has_trivial_default_constructor,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_compound, void>(false), "");'), (12, 1, u'+  static_assert(test_category<is_compound, char>(false), "");'), (13, 1, u'+  static_assert(test_category<is_compound, signed char>(false), "");'), (14, 1, u'+  static_assert(test_category<is_compound, unsigned char>(false), "");'), (17, 1, u'+  static_assert(test_category<is_compound, wchar_t>(false), "");'), (30, 1, u'+  static_assert(test_category<is_compound, short>(false), "");'), (31, 1, u'+  static_assert(test_category<is_compound, unsigned short>(false), "");'), (32, 1, u'+  static_assert(test_category<is_compound, int>(false), "");'), (33, 1, u'+  static_assert(test_category<is_compound, unsigned int>(false), "");'), (34, 1, u'+  static_assert(test_category<is_compound, long>(false), "");'), (35, 1, u'+  static_assert(test_category<is_compound, unsigned long>(false), "");'), (36, 1, u'+  static_assert(test_category<is_compound, long long>(false), "");'), (37, 1, u'+  static_assert(test_category<is_compound, unsigned long long>(false), "");'), (38, 1, u'+  static_assert(test_category<is_compound, float>(false), "");'), (39, 1, u'+  static_assert(test_category<is_compound, double>(false), "");'), (40, 1, u'+  static_assert(test_category<is_compound, long double>(false), "");'), (44, 1, u'+  static_assert(test_category<is_compound, std::nullptr_t>(false), "");')]
===========================================
===========================================
Total add: 19
Total del: 26
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_compound, void>(false), "");'), (12, 1, u'+  static_assert(test_category<is_compound, char>(false), "");'), (13, 1, u'+  static_assert(test_category<is_compound, signed char>(false), "");'), (14, 1, u'+  static_assert(test_category<is_compound, unsigned char>(false), "");'), (17, 1, u'+  static_assert(test_category<is_compound, wchar_t>(false), "");'), (30, 1, u'+  static_assert(test_category<is_compound, short>(false), "");'), (31, 1, u'+  static_assert(test_category<is_compound, unsigned short>(false), "");'), (32, 1, u'+  static_assert(test_category<is_compound, int>(false), "");'), (33, 1, u'+  static_assert(test_category<is_compound, unsigned int>(false), "");'), (34, 1, u'+  static_assert(test_category<is_compound, long>(false), "");'), (35, 1, u'+  static_assert(test_category<is_compound, unsigned long>(false), "");'), (36, 1, u'+  static_assert(test_category<is_compound, long long>(false), "");'), (37, 1, u'+  static_assert(test_category<is_compound, unsigned long long>(false), "");'), (38, 1, u'+  static_assert(test_category<is_compound, float>(false), "");'), (39, 1, u'+  static_assert(test_category<is_compound, double>(false), "");'), (40, 1, u'+  static_assert(test_category<is_compound, long double>(false), "");'), (44, 1, u'+  static_assert(test_category<is_compound, std::nullptr_t>(false), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_compound, void>(false), "");'), (12, 1, u'+  static_assert(test_category<is_compound, char>(false), "");'), (13, 1, u'+  static_assert(test_category<is_compound, signed char>(false), "");'), (14, 1, u'+  static_assert(test_category<is_compound, unsigned char>(false), "");'), (17, 1, u'+  static_assert(test_category<is_compound, wchar_t>(false), "");'), (30, 1, u'+  static_assert(test_category<is_compound, short>(false), "");'), (31, 1, u'+  static_assert(test_category<is_compound, unsigned short>(false), "");'), (32, 1, u'+  static_assert(test_category<is_compound, int>(false), "");'), (33, 1, u'+  static_assert(test_category<is_compound, unsigned int>(false), "");'), (34, 1, u'+  static_assert(test_category<is_compound, long>(false), "");'), (35, 1, u'+  static_assert(test_category<is_compound, unsigned long>(false), "");'), (36, 1, u'+  static_assert(test_category<is_compound, long long>(false), "");'), (37, 1, u'+  static_assert(test_category<is_compound, unsigned long long>(false), "");'), (38, 1, u'+  static_assert(test_category<is_compound, float>(false), "");'), (39, 1, u'+  static_assert(test_category<is_compound, double>(false), "");'), (40, 1, u'+  static_assert(test_category<is_compound, long double>(false), "");'), (44, 1, u'+  static_assert(test_category<is_compound, std::nullptr_t>(false), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_property<is_constructible,'), (6, 1, u'+  static_assert(test_property<is_constructible, ExplicitClass, int&>(true), "");')]
===========================================
===========================================
Total add: 8
Total del: 12
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_property<is_constructible,'), (6, 1, u'+  static_assert(test_property<is_constructible, ExplicitClass, int&>(true), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_property<is_constructible,'), (6, 1, u'+  static_assert(test_property<is_constructible, ExplicitClass, int&>(true), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+  static_assert(test_relationship<is_convertible, int, int>(true), "");'), (23, 1, u'+  static_assert(test_relationship<is_convertible, int, const int>(true), "");'), (24, 1, u'+  static_assert(test_relationship<is_convertible,'), (26, 1, u'+  static_assert(test_relationship<is_convertible, int, float>(true), "");'), (27, 1, u'+  static_assert(test_relationship<is_convertible, double, float>(true), "");'), (28, 1, u'+  static_assert(test_relationship<is_convertible, float, int>(true), "");'), (29, 1, u'+  static_assert(test_relationship<is_convertible, int*, const int*>(true), "");'), (30, 1, u'+  static_assert(test_relationship<is_convertible, int*, void*>(true), "");'), (31, 1, u'+  static_assert(test_relationship<is_convertible, int[4], int*>(true), "");'), (32, 1, u'+  static_assert(test_relationship<is_convertible, float&, int>(true), "");'), (33, 1, u'+  static_assert(test_relationship<is_convertible, int, const int&>(true), "");'), (34, 1, u'+  static_assert(test_relationship<is_convertible, const int&, int>(true), "");'), (35, 1, u'+  static_assert(test_relationship<is_convertible, float, const int&>(true), "");'), (36, 1, u'+  static_assert(test_relationship<is_convertible, int(int),'), (38, 1, u'+  static_assert(test_relationship<is_convertible,'), (40, 1, u'+  static_assert(test_relationship<is_convertible, EnumType, int>(true), "");'), (41, 1, u'+  static_assert(test_relationship<is_convertible, ClassType,'), (43, 1, u'+  static_assert(test_relationship<is_convertible, DerivedType,'), (45, 1, u'+  static_assert(test_relationship<is_convertible, DerivedType*,'), (47, 1, u'+  static_assert(test_relationship<is_convertible, DerivedType&,'), (51, 1, u'+  static_assert(test_relationship<is_convertible, const int,'), (58, 1, u'+  static_assert(test_relationship<is_convertible, void, void>(true), "");'), (59, 1, u'+  static_assert(test_relationship<is_convertible, const void, void>(true), "");'), (60, 1, u'+  static_assert(test_relationship<is_convertible, void,'), (62, 1, u'+  static_assert(test_relationship<is_convertible, double&,'), (66, 1, u'+  static_assert(test_relationship<is_convertible, int(int),'), (88, 1, u'+  static_assert(test_relationship<is_convertible, const int*, int*>(false), "");'), (89, 1, u'+  static_assert(test_relationship<is_convertible, int*, float*>(false), "");'), (90, 1, u'+  static_assert(test_relationship<is_convertible, const int[4],'), (92, 1, u'+  static_assert(test_relationship<is_convertible, int[4], int[4]>(false), "");'), (93, 1, u'+  static_assert(test_relationship<is_convertible, const int&, int&>(false), "");'), (94, 1, u'+  static_assert(test_relationship<is_convertible, float&, int&>(false), "");'), (95, 1, u'+  static_assert(test_relationship<is_convertible, float,'), (97, 1, u'+  static_assert(test_relationship<is_convertible, int(int),'), (99, 1, u'+  static_assert(test_relationship<is_convertible, int(int),'), (101, 1, u'+  static_assert(test_relationship<is_convertible, int(*)(int),'), (103, 1, u'+  static_assert(test_relationship<is_convertible, int, EnumType>(false), "");'), (104, 1, u'+  static_assert(test_relationship<is_convertible, int, ClassType>(false), "");'), (105, 1, u'+  static_assert(test_relationship<is_convertible, ClassType,'), (107, 1, u'+  static_assert(test_relationship<is_convertible, ClassType*,'), (109, 1, u'+  static_assert(test_relationship<is_convertible, ClassType&,'), (115, 1, u'+  static_assert(test_relationship<is_convertible, void, int>(false), "");'), (116, 1, u'+  static_assert(test_relationship<is_convertible, void, float>(false), "");'), (117, 1, u'+  static_assert(test_relationship<is_convertible, void,'), (123, 1, u'+  static_assert(test_relationship<is_convertible, int, void>(false), "");'), (124, 1, u'+  static_assert(test_relationship<is_convertible, int[4], void>(false), "");')]
===========================================
===========================================
Total add: 77
Total del: 64
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+  static_assert(test_relationship<is_convertible, int, int>(true), "");'), (23, 1, u'+  static_assert(test_relationship<is_convertible, int, const int>(true), "");'), (24, 1, u'+  static_assert(test_relationship<is_convertible,'), (26, 1, u'+  static_assert(test_relationship<is_convertible, int, float>(true), "");'), (27, 1, u'+  static_assert(test_relationship<is_convertible, double, float>(true), "");'), (28, 1, u'+  static_assert(test_relationship<is_convertible, float, int>(true), "");'), (29, 1, u'+  static_assert(test_relationship<is_convertible, int*, const int*>(true), "");'), (30, 1, u'+  static_assert(test_relationship<is_convertible, int*, void*>(true), "");'), (31, 1, u'+  static_assert(test_relationship<is_convertible, int[4], int*>(true), "");'), (32, 1, u'+  static_assert(test_relationship<is_convertible, float&, int>(true), "");'), (33, 1, u'+  static_assert(test_relationship<is_convertible, int, const int&>(true), "");'), (34, 1, u'+  static_assert(test_relationship<is_convertible, const int&, int>(true), "");'), (35, 1, u'+  static_assert(test_relationship<is_convertible, float, const int&>(true), "");'), (36, 1, u'+  static_assert(test_relationship<is_convertible, int(int),'), (38, 1, u'+  static_assert(test_relationship<is_convertible,'), (40, 1, u'+  static_assert(test_relationship<is_convertible, EnumType, int>(true), "");'), (41, 1, u'+  static_assert(test_relationship<is_convertible, ClassType,'), (43, 1, u'+  static_assert(test_relationship<is_convertible, DerivedType,'), (45, 1, u'+  static_assert(test_relationship<is_convertible, DerivedType*,'), (47, 1, u'+  static_assert(test_relationship<is_convertible, DerivedType&,'), (51, 1, u'+  static_assert(test_relationship<is_convertible, const int,'), (58, 1, u'+  static_assert(test_relationship<is_convertible, void, void>(true), "");'), (59, 1, u'+  static_assert(test_relationship<is_convertible, const void, void>(true), "");'), (60, 1, u'+  static_assert(test_relationship<is_convertible, void,'), (62, 1, u'+  static_assert(test_relationship<is_convertible, double&,'), (66, 1, u'+  static_assert(test_relationship<is_convertible, int(int),'), (88, 1, u'+  static_assert(test_relationship<is_convertible, const int*, int*>(false), "");'), (89, 1, u'+  static_assert(test_relationship<is_convertible, int*, float*>(false), "");'), (90, 1, u'+  static_assert(test_relationship<is_convertible, const int[4],'), (92, 1, u'+  static_assert(test_relationship<is_convertible, int[4], int[4]>(false), "");'), (93, 1, u'+  static_assert(test_relationship<is_convertible, const int&, int&>(false), "");'), (94, 1, u'+  static_assert(test_relationship<is_convertible, float&, int&>(false), "");'), (95, 1, u'+  static_assert(test_relationship<is_convertible, float,'), (97, 1, u'+  static_assert(test_relationship<is_convertible, int(int),'), (99, 1, u'+  static_assert(test_relationship<is_convertible, int(int),'), (101, 1, u'+  static_assert(test_relationship<is_convertible, int(*)(int),'), (103, 1, u'+  static_assert(test_relationship<is_convertible, int, EnumType>(false), "");'), (104, 1, u'+  static_assert(test_relationship<is_convertible, int, ClassType>(false), "");'), (105, 1, u'+  static_assert(test_relationship<is_convertible, ClassType,'), (107, 1, u'+  static_assert(test_relationship<is_convertible, ClassType*,'), (109, 1, u'+  static_assert(test_relationship<is_convertible, ClassType&,'), (115, 1, u'+  static_assert(test_relationship<is_convertible, void, int>(false), "");'), (116, 1, u'+  static_assert(test_relationship<is_convertible, void, float>(false), "");'), (117, 1, u'+  static_assert(test_relationship<is_convertible, void,'), (123, 1, u'+  static_assert(test_relationship<is_convertible, int, void>(false), "");'), (124, 1, u'+  static_assert(test_relationship<is_convertible, int[4], void>(false), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u'+  static_assert(test_relationship<is_convertible, int, int>(true), "");'), (23, 1, u'+  static_assert(test_relationship<is_convertible, int, const int>(true), "");'), (24, 1, u'+  static_assert(test_relationship<is_convertible,'), (26, 1, u'+  static_assert(test_relationship<is_convertible, int, float>(true), "");'), (27, 1, u'+  static_assert(test_relationship<is_convertible, double, float>(true), "");'), (28, 1, u'+  static_assert(test_relationship<is_convertible, float, int>(true), "");'), (29, 1, u'+  static_assert(test_relationship<is_convertible, int*, const int*>(true), "");'), (30, 1, u'+  static_assert(test_relationship<is_convertible, int*, void*>(true), "");'), (31, 1, u'+  static_assert(test_relationship<is_convertible, int[4], int*>(true), "");'), (32, 1, u'+  static_assert(test_relationship<is_convertible, float&, int>(true), "");'), (33, 1, u'+  static_assert(test_relationship<is_convertible, int, const int&>(true), "");'), (34, 1, u'+  static_assert(test_relationship<is_convertible, const int&, int>(true), "");'), (35, 1, u'+  static_assert(test_relationship<is_convertible, float, const int&>(true), "");'), (36, 1, u'+  static_assert(test_relationship<is_convertible, int(int),'), (38, 1, u'+  static_assert(test_relationship<is_convertible,'), (40, 1, u'+  static_assert(test_relationship<is_convertible, EnumType, int>(true), "");'), (41, 1, u'+  static_assert(test_relationship<is_convertible, ClassType,'), (43, 1, u'+  static_assert(test_relationship<is_convertible, DerivedType,'), (45, 1, u'+  static_assert(test_relationship<is_convertible, DerivedType*,'), (47, 1, u'+  static_assert(test_relationship<is_convertible, DerivedType&,'), (51, 1, u'+  static_assert(test_relationship<is_convertible, const int,'), (58, 1, u'+  static_assert(test_relationship<is_convertible, void, void>(true), "");'), (59, 1, u'+  static_assert(test_relationship<is_convertible, const void, void>(true), "");'), (60, 1, u'+  static_assert(test_relationship<is_convertible, void,'), (62, 1, u'+  static_assert(test_relationship<is_convertible, double&,'), (66, 1, u'+  static_assert(test_relationship<is_convertible, int(int),'), (88, 1, u'+  static_assert(test_relationship<is_convertible, const int*, int*>(false), "");'), (89, 1, u'+  static_assert(test_relationship<is_convertible, int*, float*>(false), "");'), (90, 1, u'+  static_assert(test_relationship<is_convertible, const int[4],'), (92, 1, u'+  static_assert(test_relationship<is_convertible, int[4], int[4]>(false), "");'), (93, 1, u'+  static_assert(test_relationship<is_convertible, const int&, int&>(false), "");'), (94, 1, u'+  static_assert(test_relationship<is_convertible, float&, int&>(false), "");'), (95, 1, u'+  static_assert(test_relationship<is_convertible, float,'), (97, 1, u'+  static_assert(test_relationship<is_convertible, int(int),'), (99, 1, u'+  static_assert(test_relationship<is_convertible, int(int),'), (101, 1, u'+  static_assert(test_relationship<is_convertible, int(*)(int),'), (103, 1, u'+  static_assert(test_relationship<is_convertible, int, EnumType>(false), "");'), (104, 1, u'+  static_assert(test_relationship<is_convertible, int, ClassType>(false), "");'), (105, 1, u'+  static_assert(test_relationship<is_convertible, ClassType,'), (107, 1, u'+  static_assert(test_relationship<is_convertible, ClassType*,'), (109, 1, u'+  static_assert(test_relationship<is_convertible, ClassType&,'), (115, 1, u'+  static_assert(test_relationship<is_convertible, void, int>(false), "");'), (116, 1, u'+  static_assert(test_relationship<is_convertible, void, float>(false), "");'), (117, 1, u'+  static_assert(test_relationship<is_convertible, void,'), (123, 1, u'+  static_assert(test_relationship<is_convertible, int, void>(false), "");'), (124, 1, u'+  static_assert(test_relationship<is_convertible, int[4], void>(false), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  static_assert(test_property<is_copy_assignable, int>(true), "");'), (11, 1, u'+  static_assert(test_property<is_copy_assignable, float>(true), "");'), (12, 1, u'+  static_assert(test_property<is_copy_assignable, EnumType>(true), "");'), (13, 1, u'+  static_assert(test_property<is_copy_assignable, int*>(true), "");'), (14, 1, u'+  static_assert(test_property<is_copy_assignable, int(*)(int)>(true), "");'), (15, 1, u'+  static_assert(test_property<is_copy_assignable,'), (17, 1, u'+  static_assert(test_property<is_copy_assignable,'), (22, 1, u'+  static_assert(test_property<is_copy_assignable,'), (24, 1, u'+  static_assert(test_property<is_copy_assignable,'), (52, 1, u'+  static_assert(test_property<is_copy_assignable, void>(false), "");'), (53, 1, u'+  static_assert(test_property<is_copy_assignable, int[2]>(false), "");'), (54, 1, u'+  static_assert(test_property<is_copy_assignable, float[][3]>(false), "");'), (55, 1, u'+  static_assert(test_property<is_copy_assignable,'), (57, 1, u'+  static_assert(test_property<is_copy_assignable, int*[3]>(false), "");'), (58, 1, u'+  static_assert(test_property<is_copy_assignable,'), (60, 1, u'+  static_assert(test_property<is_copy_assignable,'), (62, 1, u'+  static_assert(test_property<is_copy_assignable,'), (64, 1, u'+  static_assert(test_property<is_copy_assignable,'), (66, 1, u'+  static_assert(test_property<is_copy_assignable,'), (68, 1, u'+  static_assert(test_property<is_copy_assignable,'), (70, 1, u'+  static_assert(test_property<is_copy_assignable,')]
===========================================
===========================================
Total add: 41
Total del: 38
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  static_assert(test_property<is_copy_assignable, int>(true), "");'), (11, 1, u'+  static_assert(test_property<is_copy_assignable, float>(true), "");'), (12, 1, u'+  static_assert(test_property<is_copy_assignable, EnumType>(true), "");'), (13, 1, u'+  static_assert(test_property<is_copy_assignable, int*>(true), "");'), (14, 1, u'+  static_assert(test_property<is_copy_assignable, int(*)(int)>(true), "");'), (15, 1, u'+  static_assert(test_property<is_copy_assignable,'), (17, 1, u'+  static_assert(test_property<is_copy_assignable,'), (22, 1, u'+  static_assert(test_property<is_copy_assignable,'), (24, 1, u'+  static_assert(test_property<is_copy_assignable,'), (52, 1, u'+  static_assert(test_property<is_copy_assignable, void>(false), "");'), (53, 1, u'+  static_assert(test_property<is_copy_assignable, int[2]>(false), "");'), (54, 1, u'+  static_assert(test_property<is_copy_assignable, float[][3]>(false), "");'), (55, 1, u'+  static_assert(test_property<is_copy_assignable,'), (57, 1, u'+  static_assert(test_property<is_copy_assignable, int*[3]>(false), "");'), (58, 1, u'+  static_assert(test_property<is_copy_assignable,'), (60, 1, u'+  static_assert(test_property<is_copy_assignable,'), (62, 1, u'+  static_assert(test_property<is_copy_assignable,'), (64, 1, u'+  static_assert(test_property<is_copy_assignable,'), (66, 1, u'+  static_assert(test_property<is_copy_assignable,'), (68, 1, u'+  static_assert(test_property<is_copy_assignable,'), (70, 1, u'+  static_assert(test_property<is_copy_assignable,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  static_assert(test_property<is_copy_assignable, int>(true), "");'), (11, 1, u'+  static_assert(test_property<is_copy_assignable, float>(true), "");'), (12, 1, u'+  static_assert(test_property<is_copy_assignable, EnumType>(true), "");'), (13, 1, u'+  static_assert(test_property<is_copy_assignable, int*>(true), "");'), (14, 1, u'+  static_assert(test_property<is_copy_assignable, int(*)(int)>(true), "");'), (15, 1, u'+  static_assert(test_property<is_copy_assignable,'), (17, 1, u'+  static_assert(test_property<is_copy_assignable,'), (22, 1, u'+  static_assert(test_property<is_copy_assignable,'), (24, 1, u'+  static_assert(test_property<is_copy_assignable,'), (52, 1, u'+  static_assert(test_property<is_copy_assignable, void>(false), "");'), (53, 1, u'+  static_assert(test_property<is_copy_assignable, int[2]>(false), "");'), (54, 1, u'+  static_assert(test_property<is_copy_assignable, float[][3]>(false), "");'), (55, 1, u'+  static_assert(test_property<is_copy_assignable,'), (57, 1, u'+  static_assert(test_property<is_copy_assignable, int*[3]>(false), "");'), (58, 1, u'+  static_assert(test_property<is_copy_assignable,'), (60, 1, u'+  static_assert(test_property<is_copy_assignable,'), (62, 1, u'+  static_assert(test_property<is_copy_assignable,'), (64, 1, u'+  static_assert(test_property<is_copy_assignable,'), (66, 1, u'+  static_assert(test_property<is_copy_assignable,'), (68, 1, u'+  static_assert(test_property<is_copy_assignable,'), (70, 1, u'+  static_assert(test_property<is_copy_assignable,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_copy_constructible, int>(true), "");'), (12, 1, u'+  static_assert(test_category<is_copy_constructible, float>(true), "");'), (13, 1, u'+  static_assert(test_category<is_copy_constructible, EnumType>(true), "");'), (14, 1, u'+  static_assert(test_category<is_copy_constructible, int*>(true), "");'), (15, 1, u'+  static_assert(test_category<is_copy_constructible, int(*)(int)>(true), "");'), (16, 1, u'+  static_assert(test_category<is_copy_constructible,'), (18, 1, u'+  static_assert(test_category<is_copy_constructible,'), (29, 1, u'+  static_assert(test_property<is_copy_constructible,'), (31, 1, u'+  static_assert(test_property<is_copy_constructible,'), (33, 1, u'+  static_assert(test_property<is_copy_constructible,'), (35, 1, u'+  static_assert(test_property<is_copy_constructible,'), (60, 1, u'+  static_assert(test_category<is_copy_constructible, void>(false), "");'), (61, 1, u'+  static_assert(test_category<is_copy_constructible, int[2]>(false), "");'), (62, 1, u'+  static_assert(test_category<is_copy_constructible, int[]>(false), "");'), (63, 1, u'+  static_assert(test_category<is_copy_constructible, float[][3]>(false), "");'), (64, 1, u'+  static_assert(test_category<is_copy_constructible,'), (66, 1, u'+  static_assert(test_category<is_copy_constructible, int*[3]>(false), "");'), (67, 1, u'+  static_assert(test_category<is_copy_constructible,'), (69, 1, u'+  static_assert(test_category<is_copy_constructible,'), (71, 1, u'+  static_assert(test_category<is_copy_constructible,'), (73, 1, u'+  static_assert(test_category<is_copy_constructible,'), (75, 1, u'+  static_assert(test_category<is_copy_constructible,'), (77, 1, u'+  static_assert(test_category<is_copy_constructible,'), (79, 1, u'+  static_assert(test_category<is_copy_constructible,')]
===========================================
===========================================
Total add: 40
Total del: 46
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_copy_constructible, int>(true), "");'), (12, 1, u'+  static_assert(test_category<is_copy_constructible, float>(true), "");'), (13, 1, u'+  static_assert(test_category<is_copy_constructible, EnumType>(true), "");'), (14, 1, u'+  static_assert(test_category<is_copy_constructible, int*>(true), "");'), (15, 1, u'+  static_assert(test_category<is_copy_constructible, int(*)(int)>(true), "");'), (16, 1, u'+  static_assert(test_category<is_copy_constructible,'), (18, 1, u'+  static_assert(test_category<is_copy_constructible,'), (29, 1, u'+  static_assert(test_property<is_copy_constructible,'), (31, 1, u'+  static_assert(test_property<is_copy_constructible,'), (33, 1, u'+  static_assert(test_property<is_copy_constructible,'), (35, 1, u'+  static_assert(test_property<is_copy_constructible,'), (60, 1, u'+  static_assert(test_category<is_copy_constructible, void>(false), "");'), (61, 1, u'+  static_assert(test_category<is_copy_constructible, int[2]>(false), "");'), (62, 1, u'+  static_assert(test_category<is_copy_constructible, int[]>(false), "");'), (63, 1, u'+  static_assert(test_category<is_copy_constructible, float[][3]>(false), "");'), (64, 1, u'+  static_assert(test_category<is_copy_constructible,'), (66, 1, u'+  static_assert(test_category<is_copy_constructible, int*[3]>(false), "");'), (67, 1, u'+  static_assert(test_category<is_copy_constructible,'), (69, 1, u'+  static_assert(test_category<is_copy_constructible,'), (71, 1, u'+  static_assert(test_category<is_copy_constructible,'), (73, 1, u'+  static_assert(test_category<is_copy_constructible,'), (75, 1, u'+  static_assert(test_category<is_copy_constructible,'), (77, 1, u'+  static_assert(test_category<is_copy_constructible,'), (79, 1, u'+  static_assert(test_category<is_copy_constructible,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_copy_constructible, int>(true), "");'), (12, 1, u'+  static_assert(test_category<is_copy_constructible, float>(true), "");'), (13, 1, u'+  static_assert(test_category<is_copy_constructible, EnumType>(true), "");'), (14, 1, u'+  static_assert(test_category<is_copy_constructible, int*>(true), "");'), (15, 1, u'+  static_assert(test_category<is_copy_constructible, int(*)(int)>(true), "");'), (16, 1, u'+  static_assert(test_category<is_copy_constructible,'), (18, 1, u'+  static_assert(test_category<is_copy_constructible,'), (29, 1, u'+  static_assert(test_property<is_copy_constructible,'), (31, 1, u'+  static_assert(test_property<is_copy_constructible,'), (33, 1, u'+  static_assert(test_property<is_copy_constructible,'), (35, 1, u'+  static_assert(test_property<is_copy_constructible,'), (60, 1, u'+  static_assert(test_category<is_copy_constructible, void>(false), "");'), (61, 1, u'+  static_assert(test_category<is_copy_constructible, int[2]>(false), "");'), (62, 1, u'+  static_assert(test_category<is_copy_constructible, int[]>(false), "");'), (63, 1, u'+  static_assert(test_category<is_copy_constructible, float[][3]>(false), "");'), (64, 1, u'+  static_assert(test_category<is_copy_constructible,'), (66, 1, u'+  static_assert(test_category<is_copy_constructible, int*[3]>(false), "");'), (67, 1, u'+  static_assert(test_category<is_copy_constructible,'), (69, 1, u'+  static_assert(test_category<is_copy_constructible,'), (71, 1, u'+  static_assert(test_category<is_copy_constructible,'), (73, 1, u'+  static_assert(test_category<is_copy_constructible,'), (75, 1, u'+  static_assert(test_category<is_copy_constructible,'), (77, 1, u'+  static_assert(test_category<is_copy_constructible,'), (79, 1, u'+  static_assert(test_category<is_copy_constructible,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(test_category<is_floating_point, void>(false), "");'), (7, 1, u'+  static_assert(test_category<is_floating_point, char>(false), "");'), (8, 1, u'+  static_assert(test_category<is_floating_point, signed char>(false), "");'), (9, 1, u'+  static_assert(test_category<is_floating_point, unsigned char>(false), "");'), (12, 1, u'+  static_assert(test_category<is_floating_point, wchar_t>(false), "");'), (26, 1, u'+  static_assert(test_category<is_floating_point, short>(false), "");'), (27, 1, u'+  static_assert(test_category<is_floating_point, unsigned short>(false), "");'), (28, 1, u'+  static_assert(test_category<is_floating_point, int>(false), "");'), (29, 1, u'+  static_assert(test_category<is_floating_point, unsigned int>(false), "");'), (30, 1, u'+  static_assert(test_category<is_floating_point, long>(false), "");'), (31, 1, u'+  static_assert(test_category<is_floating_point, unsigned long>(false), "");'), (32, 1, u'+  static_assert(test_category<is_floating_point, long long>(false), "");'), (33, 1, u'+  static_assert(test_category<is_floating_point,'), (36, 1, u'+  static_assert(test_category<is_floating_point, float>(true), "");'), (37, 1, u'+  static_assert(test_category<is_floating_point, double>(true), "");'), (38, 1, u'+  static_assert(test_category<is_floating_point, long double>(true), "");')]
===========================================
===========================================
Total add: 18
Total del: 17
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(test_category<is_floating_point, void>(false), "");'), (7, 1, u'+  static_assert(test_category<is_floating_point, char>(false), "");'), (8, 1, u'+  static_assert(test_category<is_floating_point, signed char>(false), "");'), (9, 1, u'+  static_assert(test_category<is_floating_point, unsigned char>(false), "");'), (12, 1, u'+  static_assert(test_category<is_floating_point, wchar_t>(false), "");'), (26, 1, u'+  static_assert(test_category<is_floating_point, short>(false), "");'), (27, 1, u'+  static_assert(test_category<is_floating_point, unsigned short>(false), "");'), (28, 1, u'+  static_assert(test_category<is_floating_point, int>(false), "");'), (29, 1, u'+  static_assert(test_category<is_floating_point, unsigned int>(false), "");'), (30, 1, u'+  static_assert(test_category<is_floating_point, long>(false), "");'), (31, 1, u'+  static_assert(test_category<is_floating_point, unsigned long>(false), "");'), (32, 1, u'+  static_assert(test_category<is_floating_point, long long>(false), "");'), (33, 1, u'+  static_assert(test_category<is_floating_point,'), (36, 1, u'+  static_assert(test_category<is_floating_point, float>(true), "");'), (37, 1, u'+  static_assert(test_category<is_floating_point, double>(true), "");'), (38, 1, u'+  static_assert(test_category<is_floating_point, long double>(true), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(test_category<is_floating_point, void>(false), "");'), (7, 1, u'+  static_assert(test_category<is_floating_point, char>(false), "");'), (8, 1, u'+  static_assert(test_category<is_floating_point, signed char>(false), "");'), (9, 1, u'+  static_assert(test_category<is_floating_point, unsigned char>(false), "");'), (12, 1, u'+  static_assert(test_category<is_floating_point, wchar_t>(false), "");'), (26, 1, u'+  static_assert(test_category<is_floating_point, short>(false), "");'), (27, 1, u'+  static_assert(test_category<is_floating_point, unsigned short>(false), "");'), (28, 1, u'+  static_assert(test_category<is_floating_point, int>(false), "");'), (29, 1, u'+  static_assert(test_category<is_floating_point, unsigned int>(false), "");'), (30, 1, u'+  static_assert(test_category<is_floating_point, long>(false), "");'), (31, 1, u'+  static_assert(test_category<is_floating_point, unsigned long>(false), "");'), (32, 1, u'+  static_assert(test_category<is_floating_point, long long>(false), "");'), (33, 1, u'+  static_assert(test_category<is_floating_point,'), (36, 1, u'+  static_assert(test_category<is_floating_point, float>(true), "");'), (37, 1, u'+  static_assert(test_category<is_floating_point, double>(true), "");'), (38, 1, u'+  static_assert(test_category<is_floating_point, long double>(true), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_floating_point, __float128>(true), "");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_floating_point, __float128>(true), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_floating_point, __float128>(true), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_category<is_floating_point, __int128>(false), "");'), (5, 1, u'+  static_assert(test_category<is_floating_point,')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_category<is_floating_point, __int128>(false), "");'), (5, 1, u'+  static_assert(test_category<is_floating_point,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_category<is_floating_point, __int128>(false), "");'), (5, 1, u'+  static_assert(test_category<is_floating_point,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  static_assert(test_category<is_function, int (int)>(true), "");'), (10, 1, u'+  static_assert(test_category<is_function, ClassType (ClassType)>(true), "");'), (11, 1, u'+  static_assert(test_category<is_function,'), (13, 1, u'+  static_assert(test_category<is_function, int (int, ...)>(true), "");'), (14, 1, u'+  static_assert(test_category<is_function, bool (ClassType) const>(true), "");'), (15, 1, u'+  static_assert(test_category<is_function, ClassType () &>(true), "");'), (16, 1, u'+  static_assert(test_category<is_function,'), (23, 1, u'+  static_assert(test_category<is_function, int&>(false), "");'), (24, 1, u'+  static_assert(test_category<is_function, void>(false), "");'), (25, 1, u'+  static_assert(test_category<is_function, const void>(false), "");'), (29, 1, u'+  static_assert(test_category<is_function, AbstractClass>(false), "");'), (30, 1, u'+  static_assert(test_category<is_function, int(&)(int)>(false), "");')]
===========================================
===========================================
Total add: 15
Total del: 19
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  static_assert(test_category<is_function, int (int)>(true), "");'), (10, 1, u'+  static_assert(test_category<is_function, ClassType (ClassType)>(true), "");'), (11, 1, u'+  static_assert(test_category<is_function,'), (13, 1, u'+  static_assert(test_category<is_function, int (int, ...)>(true), "");'), (14, 1, u'+  static_assert(test_category<is_function, bool (ClassType) const>(true), "");'), (15, 1, u'+  static_assert(test_category<is_function, ClassType () &>(true), "");'), (16, 1, u'+  static_assert(test_category<is_function,'), (23, 1, u'+  static_assert(test_category<is_function, int&>(false), "");'), (24, 1, u'+  static_assert(test_category<is_function, void>(false), "");'), (25, 1, u'+  static_assert(test_category<is_function, const void>(false), "");'), (29, 1, u'+  static_assert(test_category<is_function, AbstractClass>(false), "");'), (30, 1, u'+  static_assert(test_category<is_function, int(&)(int)>(false), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  static_assert(test_category<is_function, int (int)>(true), "");'), (10, 1, u'+  static_assert(test_category<is_function, ClassType (ClassType)>(true), "");'), (11, 1, u'+  static_assert(test_category<is_function,'), (13, 1, u'+  static_assert(test_category<is_function, int (int, ...)>(true), "");'), (14, 1, u'+  static_assert(test_category<is_function, bool (ClassType) const>(true), "");'), (15, 1, u'+  static_assert(test_category<is_function, ClassType () &>(true), "");'), (16, 1, u'+  static_assert(test_category<is_function,'), (23, 1, u'+  static_assert(test_category<is_function, int&>(false), "");'), (24, 1, u'+  static_assert(test_category<is_function, void>(false), "");'), (25, 1, u'+  static_assert(test_category<is_function, const void>(false), "");'), (29, 1, u'+  static_assert(test_category<is_function, AbstractClass>(false), "");'), (30, 1, u'+  static_assert(test_category<is_function, int(&)(int)>(false), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(test_category<is_fundamental, void>(true), "");'), (7, 1, u'+  static_assert(test_category<is_fundamental, char>(true), "");'), (8, 1, u'+  static_assert(test_category<is_fundamental, signed char>(true), "");'), (9, 1, u'+  static_assert(test_category<is_fundamental, unsigned char>(true), "");'), (12, 1, u'+  static_assert(test_category<is_fundamental, wchar_t>(true), "");'), (25, 1, u'+  static_assert(test_category<is_fundamental, short>(true), "");'), (26, 1, u'+  static_assert(test_category<is_fundamental, unsigned short>(true), "");'), (27, 1, u'+  static_assert(test_category<is_fundamental, int>(true), "");'), (28, 1, u'+  static_assert(test_category<is_fundamental, unsigned int>(true), "");'), (29, 1, u'+  static_assert(test_category<is_fundamental, long>(true), "");'), (30, 1, u'+  static_assert(test_category<is_fundamental, unsigned long>(true), "");'), (31, 1, u'+  static_assert(test_category<is_fundamental, long long>(true), "");'), (32, 1, u'+  static_assert(test_category<is_fundamental, unsigned long long>(true), "");'), (33, 1, u'+  static_assert(test_category<is_fundamental, float>(true), "");'), (34, 1, u'+  static_assert(test_category<is_fundamental, double>(true), "");'), (35, 1, u'+  static_assert(test_category<is_fundamental, long double>(true), "");'), (39, 1, u'+  static_assert(test_category<is_fundamental, std::nullptr_t>(true), "");')]
===========================================
===========================================
Total add: 18
Total del: 24
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(test_category<is_fundamental, void>(true), "");'), (7, 1, u'+  static_assert(test_category<is_fundamental, char>(true), "");'), (8, 1, u'+  static_assert(test_category<is_fundamental, signed char>(true), "");'), (9, 1, u'+  static_assert(test_category<is_fundamental, unsigned char>(true), "");'), (12, 1, u'+  static_assert(test_category<is_fundamental, wchar_t>(true), "");'), (25, 1, u'+  static_assert(test_category<is_fundamental, short>(true), "");'), (26, 1, u'+  static_assert(test_category<is_fundamental, unsigned short>(true), "");'), (27, 1, u'+  static_assert(test_category<is_fundamental, int>(true), "");'), (28, 1, u'+  static_assert(test_category<is_fundamental, unsigned int>(true), "");'), (29, 1, u'+  static_assert(test_category<is_fundamental, long>(true), "");'), (30, 1, u'+  static_assert(test_category<is_fundamental, unsigned long>(true), "");'), (31, 1, u'+  static_assert(test_category<is_fundamental, long long>(true), "");'), (32, 1, u'+  static_assert(test_category<is_fundamental, unsigned long long>(true), "");'), (33, 1, u'+  static_assert(test_category<is_fundamental, float>(true), "");'), (34, 1, u'+  static_assert(test_category<is_fundamental, double>(true), "");'), (35, 1, u'+  static_assert(test_category<is_fundamental, long double>(true), "");'), (39, 1, u'+  static_assert(test_category<is_fundamental, std::nullptr_t>(true), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(test_category<is_fundamental, void>(true), "");'), (7, 1, u'+  static_assert(test_category<is_fundamental, char>(true), "");'), (8, 1, u'+  static_assert(test_category<is_fundamental, signed char>(true), "");'), (9, 1, u'+  static_assert(test_category<is_fundamental, unsigned char>(true), "");'), (12, 1, u'+  static_assert(test_category<is_fundamental, wchar_t>(true), "");'), (25, 1, u'+  static_assert(test_category<is_fundamental, short>(true), "");'), (26, 1, u'+  static_assert(test_category<is_fundamental, unsigned short>(true), "");'), (27, 1, u'+  static_assert(test_category<is_fundamental, int>(true), "");'), (28, 1, u'+  static_assert(test_category<is_fundamental, unsigned int>(true), "");'), (29, 1, u'+  static_assert(test_category<is_fundamental, long>(true), "");'), (30, 1, u'+  static_assert(test_category<is_fundamental, unsigned long>(true), "");'), (31, 1, u'+  static_assert(test_category<is_fundamental, long long>(true), "");'), (32, 1, u'+  static_assert(test_category<is_fundamental, unsigned long long>(true), "");'), (33, 1, u'+  static_assert(test_category<is_fundamental, float>(true), "");'), (34, 1, u'+  static_assert(test_category<is_fundamental, double>(true), "");'), (35, 1, u'+  static_assert(test_category<is_fundamental, long double>(true), "");'), (39, 1, u'+  static_assert(test_category<is_fundamental, std::nullptr_t>(true), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(test_category<is_integral, void>(false), "");'), (13, 1, u'+  static_assert(test_category<is_integral, char>(true), "");'), (14, 1, u'+  static_assert(test_category<is_integral, signed char>(true), "");'), (15, 1, u'+  static_assert(test_category<is_integral, unsigned char>(true), "");'), (18, 1, u'+  static_assert(test_category<is_integral, wchar_t>(true), "");'), (30, 1, u'+  static_assert(test_category<is_integral, char16_t>(true), "");'), (31, 1, u'+  static_assert(test_category<is_integral, char32_t>(true), "");'), (32, 1, u'+  static_assert(test_category<is_integral, short>(true), "");'), (33, 1, u'+  static_assert(test_category<is_integral, unsigned short>(true), "");'), (34, 1, u'+  static_assert(test_category<is_integral, int>(true), "");'), (35, 1, u'+  static_assert(test_category<is_integral, unsigned int>(true), "");'), (36, 1, u'+  static_assert(test_category<is_integral, long>(true), "");'), (37, 1, u'+  static_assert(test_category<is_integral, unsigned long>(true), "");'), (38, 1, u'+  static_assert(test_category<is_integral, long long>(true), "");'), (39, 1, u'+  static_assert(test_category<is_integral, unsigned long long>(true), "");'), (44, 1, u'+  static_assert(test_category<is_integral, float>(false), "");'), (45, 1, u'+  static_assert(test_category<is_integral, double>(false), "");'), (46, 1, u'+  static_assert(test_category<is_integral, long double>(false), "");')]
===========================================
===========================================
Total add: 19
Total del: 20
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(test_category<is_integral, void>(false), "");'), (13, 1, u'+  static_assert(test_category<is_integral, char>(true), "");'), (14, 1, u'+  static_assert(test_category<is_integral, signed char>(true), "");'), (15, 1, u'+  static_assert(test_category<is_integral, unsigned char>(true), "");'), (18, 1, u'+  static_assert(test_category<is_integral, wchar_t>(true), "");'), (30, 1, u'+  static_assert(test_category<is_integral, char16_t>(true), "");'), (31, 1, u'+  static_assert(test_category<is_integral, char32_t>(true), "");'), (32, 1, u'+  static_assert(test_category<is_integral, short>(true), "");'), (33, 1, u'+  static_assert(test_category<is_integral, unsigned short>(true), "");'), (34, 1, u'+  static_assert(test_category<is_integral, int>(true), "");'), (35, 1, u'+  static_assert(test_category<is_integral, unsigned int>(true), "");'), (36, 1, u'+  static_assert(test_category<is_integral, long>(true), "");'), (37, 1, u'+  static_assert(test_category<is_integral, unsigned long>(true), "");'), (38, 1, u'+  static_assert(test_category<is_integral, long long>(true), "");'), (39, 1, u'+  static_assert(test_category<is_integral, unsigned long long>(true), "");'), (44, 1, u'+  static_assert(test_category<is_integral, float>(false), "");'), (45, 1, u'+  static_assert(test_category<is_integral, double>(false), "");'), (46, 1, u'+  static_assert(test_category<is_integral, long double>(false), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(test_category<is_integral, void>(false), "");'), (13, 1, u'+  static_assert(test_category<is_integral, char>(true), "");'), (14, 1, u'+  static_assert(test_category<is_integral, signed char>(true), "");'), (15, 1, u'+  static_assert(test_category<is_integral, unsigned char>(true), "");'), (18, 1, u'+  static_assert(test_category<is_integral, wchar_t>(true), "");'), (30, 1, u'+  static_assert(test_category<is_integral, char16_t>(true), "");'), (31, 1, u'+  static_assert(test_category<is_integral, char32_t>(true), "");'), (32, 1, u'+  static_assert(test_category<is_integral, short>(true), "");'), (33, 1, u'+  static_assert(test_category<is_integral, unsigned short>(true), "");'), (34, 1, u'+  static_assert(test_category<is_integral, int>(true), "");'), (35, 1, u'+  static_assert(test_category<is_integral, unsigned int>(true), "");'), (36, 1, u'+  static_assert(test_category<is_integral, long>(true), "");'), (37, 1, u'+  static_assert(test_category<is_integral, unsigned long>(true), "");'), (38, 1, u'+  static_assert(test_category<is_integral, long long>(true), "");'), (39, 1, u'+  static_assert(test_category<is_integral, unsigned long long>(true), "");'), (44, 1, u'+  static_assert(test_category<is_integral, float>(false), "");'), (45, 1, u'+  static_assert(test_category<is_integral, double>(false), "");'), (46, 1, u'+  static_assert(test_category<is_integral, long double>(false), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_category<is_integral, __int128>(true), "");'), (5, 1, u'+  static_assert(test_category<is_integral, unsigned __int128>(true), "");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_category<is_integral, __int128>(true), "");'), (5, 1, u'+  static_assert(test_category<is_integral, unsigned __int128>(true), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_category<is_integral, __int128>(true), "");'), (5, 1, u'+  static_assert(test_category<is_integral, unsigned __int128>(true), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_integral, __float128>(false), "");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_integral, __float128>(false), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_integral, __float128>(false), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  static_assert(test_category<is_literal_type, int>(true), "");'), (8, 1, u'+  static_assert(test_category<is_literal_type, unsigned char>(true), "");'), (12, 1, u'+  static_assert(test_category<is_literal_type, TType>(true), "");'), (13, 1, u'+  static_assert(test_category<is_literal_type, PODType>(true), "");'), (17, 1, u'+  static_assert(test_category<is_literal_type, NType>(false), "");'), (18, 1, u'+  static_assert(test_category<is_literal_type, SLType>(false), "");'), (22, 1, u'+  static_assert(test_category<is_literal_type, LType>(true), "");'), (23, 1, u'+  static_assert(test_category<is_literal_type, LType[5]>(true), "");'), (28, 1, u'+  static_assert(test_category<is_literal_type, NLType>(false), "");'), (29, 1, u'+  static_assert(test_category<is_literal_type, NLType[5]>(false), "");')]
===========================================
===========================================
Total add: 12
Total del: 18
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  static_assert(test_category<is_literal_type, int>(true), "");'), (8, 1, u'+  static_assert(test_category<is_literal_type, unsigned char>(true), "");'), (12, 1, u'+  static_assert(test_category<is_literal_type, TType>(true), "");'), (13, 1, u'+  static_assert(test_category<is_literal_type, PODType>(true), "");'), (17, 1, u'+  static_assert(test_category<is_literal_type, NType>(false), "");'), (18, 1, u'+  static_assert(test_category<is_literal_type, SLType>(false), "");'), (22, 1, u'+  static_assert(test_category<is_literal_type, LType>(true), "");'), (23, 1, u'+  static_assert(test_category<is_literal_type, LType[5]>(true), "");'), (28, 1, u'+  static_assert(test_category<is_literal_type, NLType>(false), "");'), (29, 1, u'+  static_assert(test_category<is_literal_type, NLType[5]>(false), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  static_assert(test_category<is_literal_type, int>(true), "");'), (8, 1, u'+  static_assert(test_category<is_literal_type, unsigned char>(true), "");'), (12, 1, u'+  static_assert(test_category<is_literal_type, TType>(true), "");'), (13, 1, u'+  static_assert(test_category<is_literal_type, PODType>(true), "");'), (17, 1, u'+  static_assert(test_category<is_literal_type, NType>(false), "");'), (18, 1, u'+  static_assert(test_category<is_literal_type, SLType>(false), "");'), (22, 1, u'+  static_assert(test_category<is_literal_type, LType>(true), "");'), (23, 1, u'+  static_assert(test_category<is_literal_type, LType[5]>(true), "");'), (28, 1, u'+  static_assert(test_category<is_literal_type, NLType>(false), "");'), (29, 1, u'+  static_assert(test_category<is_literal_type, NLType[5]>(false), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (14, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (16, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (18, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (20, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (30, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (32, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (34, 1, u'+  static_assert(test_category<is_member_function_pointer,')]
===========================================
===========================================
Total add: 18
Total del: 23
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (14, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (16, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (18, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (20, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (30, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (32, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (34, 1, u'+  static_assert(test_category<is_member_function_pointer,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (14, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (16, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (18, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (20, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (30, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (32, 1, u'+  static_assert(test_category<is_member_function_pointer,'), (34, 1, u'+  static_assert(test_category<is_member_function_pointer,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (10, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (12, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (26, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (28, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (30, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (32, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (34, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (39, 1, u'+  static_assert(test_category<is_member_object_pointer, ClassType>(false), "");')]
===========================================
===========================================
Total add: 17
Total del: 17
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (10, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (12, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (26, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (28, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (30, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (32, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (34, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (39, 1, u'+  static_assert(test_category<is_member_object_pointer, ClassType>(false), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (10, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (12, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (26, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (28, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (30, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (32, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (34, 1, u'+  static_assert(test_category<is_member_object_pointer,'), (39, 1, u'+  static_assert(test_category<is_member_object_pointer, ClassType>(false), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  static_assert(test_category<is_member_pointer, int (ClassType::*)>(true), "");'), (6, 1, u'+  static_assert(test_category<is_member_pointer,'), (8, 1, u'+  static_assert(test_category<is_member_pointer,'), (21, 1, u'+  static_assert(test_category<is_member_pointer,'), (23, 1, u'+  static_assert(test_category<is_member_pointer,'), (25, 1, u'+  static_assert(test_category<is_member_pointer,'), (27, 1, u'+  static_assert(test_category<is_member_pointer,'), (29, 1, u'+  static_assert(test_category<is_member_pointer,')]
===========================================
===========================================
Total add: 16
Total del: 20
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  static_assert(test_category<is_member_pointer, int (ClassType::*)>(true), "");'), (6, 1, u'+  static_assert(test_category<is_member_pointer,'), (8, 1, u'+  static_assert(test_category<is_member_pointer,'), (21, 1, u'+  static_assert(test_category<is_member_pointer,'), (23, 1, u'+  static_assert(test_category<is_member_pointer,'), (25, 1, u'+  static_assert(test_category<is_member_pointer,'), (27, 1, u'+  static_assert(test_category<is_member_pointer,'), (29, 1, u'+  static_assert(test_category<is_member_pointer,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  static_assert(test_category<is_member_pointer, int (ClassType::*)>(true), "");'), (6, 1, u'+  static_assert(test_category<is_member_pointer,'), (8, 1, u'+  static_assert(test_category<is_member_pointer,'), (21, 1, u'+  static_assert(test_category<is_member_pointer,'), (23, 1, u'+  static_assert(test_category<is_member_pointer,'), (25, 1, u'+  static_assert(test_category<is_member_pointer,'), (27, 1, u'+  static_assert(test_category<is_member_pointer,'), (29, 1, u'+  static_assert(test_category<is_member_pointer,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  static_assert(test_property<is_move_assignable, int>(true), "");'), (11, 1, u'+  static_assert(test_property<is_move_assignable, float>(true), "");'), (12, 1, u'+  static_assert(test_property<is_move_assignable, EnumType>(true), "");'), (13, 1, u'+  static_assert(test_property<is_move_assignable, int*>(true), "");'), (14, 1, u'+  static_assert(test_property<is_move_assignable, int(*)(int)>(true), "");'), (15, 1, u'+  static_assert(test_property<is_move_assignable,'), (17, 1, u'+  static_assert(test_property<is_move_assignable,'), (24, 1, u'+  static_assert(test_property<is_move_assignable,'), (26, 1, u'+  static_assert(test_property<is_move_assignable,'), (28, 1, u'+  static_assert(test_property<is_move_assignable,'), (30, 1, u'+  static_assert(test_property<is_move_assignable,'), (56, 1, u'+  static_assert(test_property<is_move_assignable, void>(false), "");'), (57, 1, u'+  static_assert(test_property<is_move_assignable, int[2]>(false), "");'), (58, 1, u'+  static_assert(test_property<is_move_assignable, float[][3]>(false), "");'), (59, 1, u'+  static_assert(test_property<is_move_assignable,'), (61, 1, u'+  static_assert(test_property<is_move_assignable, int*[3]>(false), "");'), (62, 1, u'+  static_assert(test_property<is_move_assignable, int(*[][2])(int)>(false), "");'), (63, 1, u'+  static_assert(test_property<is_move_assignable,'), (65, 1, u'+  static_assert(test_property<is_move_assignable,'), (67, 1, u'+  static_assert(test_property<is_move_assignable,'), (69, 1, u'+  static_assert(test_property<is_move_assignable,'), (71, 1, u'+  static_assert(test_property<is_move_assignable,'), (73, 1, u'+  static_assert(test_property<is_move_assignable,')]
===========================================
===========================================
Total add: 40
Total del: 38
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  static_assert(test_property<is_move_assignable, int>(true), "");'), (11, 1, u'+  static_assert(test_property<is_move_assignable, float>(true), "");'), (12, 1, u'+  static_assert(test_property<is_move_assignable, EnumType>(true), "");'), (13, 1, u'+  static_assert(test_property<is_move_assignable, int*>(true), "");'), (14, 1, u'+  static_assert(test_property<is_move_assignable, int(*)(int)>(true), "");'), (15, 1, u'+  static_assert(test_property<is_move_assignable,'), (17, 1, u'+  static_assert(test_property<is_move_assignable,'), (24, 1, u'+  static_assert(test_property<is_move_assignable,'), (26, 1, u'+  static_assert(test_property<is_move_assignable,'), (28, 1, u'+  static_assert(test_property<is_move_assignable,'), (30, 1, u'+  static_assert(test_property<is_move_assignable,'), (56, 1, u'+  static_assert(test_property<is_move_assignable, void>(false), "");'), (57, 1, u'+  static_assert(test_property<is_move_assignable, int[2]>(false), "");'), (58, 1, u'+  static_assert(test_property<is_move_assignable, float[][3]>(false), "");'), (59, 1, u'+  static_assert(test_property<is_move_assignable,'), (61, 1, u'+  static_assert(test_property<is_move_assignable, int*[3]>(false), "");'), (62, 1, u'+  static_assert(test_property<is_move_assignable, int(*[][2])(int)>(false), "");'), (63, 1, u'+  static_assert(test_property<is_move_assignable,'), (65, 1, u'+  static_assert(test_property<is_move_assignable,'), (67, 1, u'+  static_assert(test_property<is_move_assignable,'), (69, 1, u'+  static_assert(test_property<is_move_assignable,'), (71, 1, u'+  static_assert(test_property<is_move_assignable,'), (73, 1, u'+  static_assert(test_property<is_move_assignable,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  static_assert(test_property<is_move_assignable, int>(true), "");'), (11, 1, u'+  static_assert(test_property<is_move_assignable, float>(true), "");'), (12, 1, u'+  static_assert(test_property<is_move_assignable, EnumType>(true), "");'), (13, 1, u'+  static_assert(test_property<is_move_assignable, int*>(true), "");'), (14, 1, u'+  static_assert(test_property<is_move_assignable, int(*)(int)>(true), "");'), (15, 1, u'+  static_assert(test_property<is_move_assignable,'), (17, 1, u'+  static_assert(test_property<is_move_assignable,'), (24, 1, u'+  static_assert(test_property<is_move_assignable,'), (26, 1, u'+  static_assert(test_property<is_move_assignable,'), (28, 1, u'+  static_assert(test_property<is_move_assignable,'), (30, 1, u'+  static_assert(test_property<is_move_assignable,'), (56, 1, u'+  static_assert(test_property<is_move_assignable, void>(false), "");'), (57, 1, u'+  static_assert(test_property<is_move_assignable, int[2]>(false), "");'), (58, 1, u'+  static_assert(test_property<is_move_assignable, float[][3]>(false), "");'), (59, 1, u'+  static_assert(test_property<is_move_assignable,'), (61, 1, u'+  static_assert(test_property<is_move_assignable, int*[3]>(false), "");'), (62, 1, u'+  static_assert(test_property<is_move_assignable, int(*[][2])(int)>(false), "");'), (63, 1, u'+  static_assert(test_property<is_move_assignable,'), (65, 1, u'+  static_assert(test_property<is_move_assignable,'), (67, 1, u'+  static_assert(test_property<is_move_assignable,'), (69, 1, u'+  static_assert(test_property<is_move_assignable,'), (71, 1, u'+  static_assert(test_property<is_move_assignable,'), (73, 1, u'+  static_assert(test_property<is_move_assignable,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_move_constructible, int>(true), "");'), (12, 1, u'+  static_assert(test_category<is_move_constructible, float>(true), "");'), (13, 1, u'+  static_assert(test_category<is_move_constructible, EnumType>(true), "");'), (14, 1, u'+  static_assert(test_category<is_move_constructible, int*>(true), "");'), (15, 1, u'+  static_assert(test_category<is_move_constructible, int(*)(int)>(true), "");'), (16, 1, u'+  static_assert(test_category<is_move_constructible,'), (18, 1, u'+  static_assert(test_category<is_move_constructible,'), (27, 1, u'+  static_assert(test_property<is_move_constructible,'), (29, 1, u'+  static_assert(test_property<is_move_constructible,'), (31, 1, u'+  static_assert(test_property<is_move_constructible,'), (56, 1, u'+  static_assert(test_category<is_move_constructible, void>(false), "");'), (57, 1, u'+  static_assert(test_category<is_move_constructible, int[2]>(false), "");'), (58, 1, u'+  static_assert(test_category<is_move_constructible, int[]>(false), "");'), (59, 1, u'+  static_assert(test_category<is_move_constructible, float[][3]>(false), "");'), (60, 1, u'+  static_assert(test_category<is_move_constructible,'), (62, 1, u'+  static_assert(test_category<is_move_constructible, int*[3]>(false), "");'), (63, 1, u'+  static_assert(test_category<is_move_constructible,'), (65, 1, u'+  static_assert(test_category<is_move_constructible,'), (67, 1, u'+  static_assert(test_category<is_move_constructible,'), (69, 1, u'+  static_assert(test_category<is_move_constructible,'), (71, 1, u'+  static_assert(test_category<is_move_constructible,'), (73, 1, u'+  static_assert(test_category<is_move_constructible,'), (75, 1, u'+  static_assert(test_category<is_move_constructible,')]
===========================================
===========================================
Total add: 40
Total del: 46
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_move_constructible, int>(true), "");'), (12, 1, u'+  static_assert(test_category<is_move_constructible, float>(true), "");'), (13, 1, u'+  static_assert(test_category<is_move_constructible, EnumType>(true), "");'), (14, 1, u'+  static_assert(test_category<is_move_constructible, int*>(true), "");'), (15, 1, u'+  static_assert(test_category<is_move_constructible, int(*)(int)>(true), "");'), (16, 1, u'+  static_assert(test_category<is_move_constructible,'), (18, 1, u'+  static_assert(test_category<is_move_constructible,'), (27, 1, u'+  static_assert(test_property<is_move_constructible,'), (29, 1, u'+  static_assert(test_property<is_move_constructible,'), (31, 1, u'+  static_assert(test_property<is_move_constructible,'), (56, 1, u'+  static_assert(test_category<is_move_constructible, void>(false), "");'), (57, 1, u'+  static_assert(test_category<is_move_constructible, int[2]>(false), "");'), (58, 1, u'+  static_assert(test_category<is_move_constructible, int[]>(false), "");'), (59, 1, u'+  static_assert(test_category<is_move_constructible, float[][3]>(false), "");'), (60, 1, u'+  static_assert(test_category<is_move_constructible,'), (62, 1, u'+  static_assert(test_category<is_move_constructible, int*[3]>(false), "");'), (63, 1, u'+  static_assert(test_category<is_move_constructible,'), (65, 1, u'+  static_assert(test_category<is_move_constructible,'), (67, 1, u'+  static_assert(test_category<is_move_constructible,'), (69, 1, u'+  static_assert(test_category<is_move_constructible,'), (71, 1, u'+  static_assert(test_category<is_move_constructible,'), (73, 1, u'+  static_assert(test_category<is_move_constructible,'), (75, 1, u'+  static_assert(test_category<is_move_constructible,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_move_constructible, int>(true), "");'), (12, 1, u'+  static_assert(test_category<is_move_constructible, float>(true), "");'), (13, 1, u'+  static_assert(test_category<is_move_constructible, EnumType>(true), "");'), (14, 1, u'+  static_assert(test_category<is_move_constructible, int*>(true), "");'), (15, 1, u'+  static_assert(test_category<is_move_constructible, int(*)(int)>(true), "");'), (16, 1, u'+  static_assert(test_category<is_move_constructible,'), (18, 1, u'+  static_assert(test_category<is_move_constructible,'), (27, 1, u'+  static_assert(test_property<is_move_constructible,'), (29, 1, u'+  static_assert(test_property<is_move_constructible,'), (31, 1, u'+  static_assert(test_property<is_move_constructible,'), (56, 1, u'+  static_assert(test_category<is_move_constructible, void>(false), "");'), (57, 1, u'+  static_assert(test_category<is_move_constructible, int[2]>(false), "");'), (58, 1, u'+  static_assert(test_category<is_move_constructible, int[]>(false), "");'), (59, 1, u'+  static_assert(test_category<is_move_constructible, float[][3]>(false), "");'), (60, 1, u'+  static_assert(test_category<is_move_constructible,'), (62, 1, u'+  static_assert(test_category<is_move_constructible, int*[3]>(false), "");'), (63, 1, u'+  static_assert(test_category<is_move_constructible,'), (65, 1, u'+  static_assert(test_category<is_move_constructible,'), (67, 1, u'+  static_assert(test_category<is_move_constructible,'), (69, 1, u'+  static_assert(test_category<is_move_constructible,'), (71, 1, u'+  static_assert(test_category<is_move_constructible,'), (73, 1, u'+  static_assert(test_category<is_move_constructible,'), (75, 1, u'+  static_assert(test_category<is_move_constructible,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_relationship<is_nothrow_assignable, int&, int>(true), "");'), (5, 1, u'+  static_assert(test_relationship<is_nothrow_assignable, int&,'), (14, 1, u'+  static_assert(test_relationship<is_nothrow_assignable,'), (17, 1, u'+  static_assert(test_relationship<is_nothrow_assignable,'), (19, 1, u'+  static_assert(test_relationship<is_nothrow_assignable,'), (33, 1, u'+  static_assert(test_relationship<is_nothrow_assignable, int, int>(false), "");'), (34, 1, u'+  static_assert(test_relationship<is_nothrow_assignable, int,')]
===========================================
===========================================
Total add: 21
Total del: 22
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_relationship<is_nothrow_assignable, int&, int>(true), "");'), (5, 1, u'+  static_assert(test_relationship<is_nothrow_assignable, int&,'), (14, 1, u'+  static_assert(test_relationship<is_nothrow_assignable,'), (17, 1, u'+  static_assert(test_relationship<is_nothrow_assignable,'), (19, 1, u'+  static_assert(test_relationship<is_nothrow_assignable,'), (33, 1, u'+  static_assert(test_relationship<is_nothrow_assignable, int, int>(false), "");'), (34, 1, u'+  static_assert(test_relationship<is_nothrow_assignable, int,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_relationship<is_nothrow_assignable, int&, int>(true), "");'), (5, 1, u'+  static_assert(test_relationship<is_nothrow_assignable, int&,'), (14, 1, u'+  static_assert(test_relationship<is_nothrow_assignable,'), (17, 1, u'+  static_assert(test_relationship<is_nothrow_assignable,'), (19, 1, u'+  static_assert(test_relationship<is_nothrow_assignable,'), (33, 1, u'+  static_assert(test_relationship<is_nothrow_assignable, int, int>(false), "");'), (34, 1, u'+  static_assert(test_relationship<is_nothrow_assignable, int,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (16, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (18, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (20, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (22, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (24, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (28, 1, u'+  static_assert(test_property<is_nothrow_constructible, int[1]>(true), "");'), (43, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (45, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass>'), (47, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (49, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (51, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass>'), (53, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (68, 1, u'+  static_assert(test_property<is_nothrow_constructible, ExceptExplicitClass,'), (70, 1, u'+  static_assert(test_property<is_nothrow_constructible, ExceptExplicitClass,'), (72, 1, u'+  static_assert(test_property<is_nothrow_constructible, ExceptExplicitClass,'), (74, 1, u'+  static_assert(test_property<is_nothrow_constructible, ThrowExplicitClass,'), (76, 1, u'+  static_assert(test_property<is_nothrow_constructible, ThrowExplicitClass,'), (78, 1, u'+  static_assert(test_property<is_nothrow_constructible, ThrowExplicitClass,')]
===========================================
===========================================
Total add: 38
Total del: 44
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (16, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (18, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (20, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (22, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (24, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (28, 1, u'+  static_assert(test_property<is_nothrow_constructible, int[1]>(true), "");'), (43, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (45, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass>'), (47, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (49, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (51, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass>'), (53, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (68, 1, u'+  static_assert(test_property<is_nothrow_constructible, ExceptExplicitClass,'), (70, 1, u'+  static_assert(test_property<is_nothrow_constructible, ExceptExplicitClass,'), (72, 1, u'+  static_assert(test_property<is_nothrow_constructible, ExceptExplicitClass,'), (74, 1, u'+  static_assert(test_property<is_nothrow_constructible, ThrowExplicitClass,'), (76, 1, u'+  static_assert(test_property<is_nothrow_constructible, ThrowExplicitClass,'), (78, 1, u'+  static_assert(test_property<is_nothrow_constructible, ThrowExplicitClass,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (16, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (18, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (20, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (22, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (24, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (28, 1, u'+  static_assert(test_property<is_nothrow_constructible, int[1]>(true), "");'), (43, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (45, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass>'), (47, 1, u'+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,'), (49, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (51, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass>'), (53, 1, u'+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,'), (68, 1, u'+  static_assert(test_property<is_nothrow_constructible, ExceptExplicitClass,'), (70, 1, u'+  static_assert(test_property<is_nothrow_constructible, ExceptExplicitClass,'), (72, 1, u'+  static_assert(test_property<is_nothrow_constructible, ExceptExplicitClass,'), (74, 1, u'+  static_assert(test_property<is_nothrow_constructible, ThrowExplicitClass,'), (76, 1, u'+  static_assert(test_property<is_nothrow_constructible, ThrowExplicitClass,'), (78, 1, u'+  static_assert(test_property<is_nothrow_constructible, ThrowExplicitClass,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, int>(true), "");'), (12, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, float>(true), "");'), (13, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, EnumType>(true), "");'), (14, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, int*>(true), "");'), (15, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (17, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (19, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (24, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (60, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, void>(false), "");'), (61, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, int[2]>(false), "");'), (62, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (64, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (66, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, int*[3]>(false), "");'), (67, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (69, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (71, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (73, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (75, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (77, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (79, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,')]
===========================================
===========================================
Total add: 43
Total del: 47
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, int>(true), "");'), (12, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, float>(true), "");'), (13, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, EnumType>(true), "");'), (14, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, int*>(true), "");'), (15, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (17, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (19, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (24, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (60, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, void>(false), "");'), (61, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, int[2]>(false), "");'), (62, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (64, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (66, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, int*[3]>(false), "");'), (67, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (69, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (71, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (73, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (75, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (77, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (79, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, int>(true), "");'), (12, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, float>(true), "");'), (13, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, EnumType>(true), "");'), (14, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, int*>(true), "");'), (15, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (17, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (19, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (24, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (60, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, void>(false), "");'), (61, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, int[2]>(false), "");'), (62, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (64, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (66, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable, int*[3]>(false), "");'), (67, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (69, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (71, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (73, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (75, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (77, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,'), (79, 1, u'+  static_assert(test_property<is_nothrow_copy_assignable,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, int>(true), "");'), (12, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, float>(true), "");'), (13, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (15, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, int*>(true), "");'), (16, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (18, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (20, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (27, 1, u'+  static_assert(test_property<is_nothrow_copy_constructible,'), (29, 1, u'+  static_assert(test_property<is_nothrow_copy_constructible,'), (62, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, void>(false), "");'), (63, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (65, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, int[]>(false), "");'), (66, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (68, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (70, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (72, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (74, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (76, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (78, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (80, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (82, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (84, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,')]
===========================================
===========================================
Total add: 45
Total del: 46
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, int>(true), "");'), (12, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, float>(true), "");'), (13, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (15, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, int*>(true), "");'), (16, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (18, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (20, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (27, 1, u'+  static_assert(test_property<is_nothrow_copy_constructible,'), (29, 1, u'+  static_assert(test_property<is_nothrow_copy_constructible,'), (62, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, void>(false), "");'), (63, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (65, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, int[]>(false), "");'), (66, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (68, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (70, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (72, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (74, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (76, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (78, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (80, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (82, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (84, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, int>(true), "");'), (12, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, float>(true), "");'), (13, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (15, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, int*>(true), "");'), (16, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (18, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (20, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (27, 1, u'+  static_assert(test_property<is_nothrow_copy_constructible,'), (29, 1, u'+  static_assert(test_property<is_nothrow_copy_constructible,'), (62, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, void>(false), "");'), (63, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (65, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible, int[]>(false), "");'), (66, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (68, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (70, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (72, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (74, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (76, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (78, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (80, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (82, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,'), (84, 1, u'+  static_assert(test_category<is_nothrow_copy_constructible,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  static_assert(test_category<is_nothrow_default_constructible, int>(true), "");'), (20, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (22, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (24, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (26, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (28, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (30, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (32, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (34, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (36, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (38, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (40, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (45, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (63, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (65, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (67, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (69, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (71, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,')]
===========================================
===========================================
Total add: 39
Total del: 37
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  static_assert(test_category<is_nothrow_default_constructible, int>(true), "");'), (20, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (22, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (24, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (26, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (28, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (30, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (32, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (34, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (36, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (38, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (40, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (45, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (63, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (65, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (67, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (69, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (71, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+  static_assert(test_category<is_nothrow_default_constructible, int>(true), "");'), (20, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (22, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (24, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (26, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (28, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (30, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (32, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (34, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (36, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (38, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (40, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (45, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (63, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (65, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (67, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (69, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,'), (71, 1, u'+  static_assert(test_category<is_nothrow_default_constructible,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, int>(true), "");'), (12, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, float>(true), "");'), (13, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, EnumType>(true), "");'), (14, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, int*>(true), "");'), (15, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (17, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (19, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (26, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (28, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (62, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, void>(false), "");'), (63, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, int[2]>(false), "");'), (64, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (66, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (68, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, int*[3]>(false), "");'), (69, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (71, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (73, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (75, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (77, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (79, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (81, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,')]
===========================================
===========================================
Total add: 43
Total del: 47
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, int>(true), "");'), (12, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, float>(true), "");'), (13, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, EnumType>(true), "");'), (14, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, int*>(true), "");'), (15, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (17, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (19, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (26, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (28, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (62, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, void>(false), "");'), (63, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, int[2]>(false), "");'), (64, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (66, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (68, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, int*[3]>(false), "");'), (69, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (71, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (73, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (75, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (77, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (79, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (81, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, int>(true), "");'), (12, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, float>(true), "");'), (13, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, EnumType>(true), "");'), (14, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, int*>(true), "");'), (15, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (17, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (19, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (26, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (28, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (62, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, void>(false), "");'), (63, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, int[2]>(false), "");'), (64, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (66, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (68, 1, u'+  static_assert(test_property<is_nothrow_move_assignable, int*[3]>(false), "");'), (69, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (71, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (73, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (75, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (77, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (79, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,'), (81, 1, u'+  static_assert(test_property<is_nothrow_move_assignable,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_nothrow_move_constructible, int>(true), "");'), (12, 1, u'+  static_assert(test_category<is_nothrow_move_constructible, float>(true), "");'), (13, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (15, 1, u'+  static_assert(test_category<is_nothrow_move_constructible, int*>(true), "");'), (16, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (18, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (20, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (25, 1, u'+  static_assert(test_property<is_nothrow_move_constructible,'), (50, 1, u'+  static_assert(test_category<is_nothrow_move_constructible, void>(false), "");'), (51, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (53, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (55, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (57, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (59, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (61, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (63, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (65, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (67, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (69, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (71, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (73, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,')]
===========================================
===========================================
Total add: 46
Total del: 46
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_nothrow_move_constructible, int>(true), "");'), (12, 1, u'+  static_assert(test_category<is_nothrow_move_constructible, float>(true), "");'), (13, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (15, 1, u'+  static_assert(test_category<is_nothrow_move_constructible, int*>(true), "");'), (16, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (18, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (20, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (25, 1, u'+  static_assert(test_property<is_nothrow_move_constructible,'), (50, 1, u'+  static_assert(test_category<is_nothrow_move_constructible, void>(false), "");'), (51, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (53, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (55, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (57, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (59, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (61, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (63, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (65, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (67, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (69, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (71, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (73, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  static_assert(test_category<is_nothrow_move_constructible, int>(true), "");'), (12, 1, u'+  static_assert(test_category<is_nothrow_move_constructible, float>(true), "");'), (13, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (15, 1, u'+  static_assert(test_category<is_nothrow_move_constructible, int*>(true), "");'), (16, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (18, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (20, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (25, 1, u'+  static_assert(test_property<is_nothrow_move_constructible,'), (50, 1, u'+  static_assert(test_category<is_nothrow_move_constructible, void>(false), "");'), (51, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (53, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (55, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (57, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (59, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (61, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (63, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (65, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (67, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (69, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (71, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,'), (73, 1, u'+  static_assert(test_category<is_nothrow_move_constructible,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+  static_assert(test_category<is_null_pointer, std::nullptr_t>(true), "");')]
===========================================
===========================================
Total add: 24
Total del: 28
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+  static_assert(test_category<is_null_pointer, std::nullptr_t>(true), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+  static_assert(test_category<is_null_pointer, std::nullptr_t>(true), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  static_assert(test_category<is_object, int (int)>(false), "");'), (11, 1, u'+  static_assert(test_category<is_object, ClassType (ClassType)>(false), "");'), (12, 1, u'+  static_assert(test_category<is_object,'), (14, 1, u'+  static_assert(test_category<is_object, int&>(false), "");'), (15, 1, u'+  static_assert(test_category<is_object, ClassType&>(false), "");'), (16, 1, u'+  static_assert(test_category<is_object, int(&)(int)>(false), "");'), (17, 1, u'+  static_assert(test_category<is_object, void>(false), "");'), (18, 1, u'+  static_assert(test_category<is_object, const void>(false), "");')]
===========================================
===========================================
Total add: 10
Total del: 15
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  static_assert(test_category<is_object, int (int)>(false), "");'), (11, 1, u'+  static_assert(test_category<is_object, ClassType (ClassType)>(false), "");'), (12, 1, u'+  static_assert(test_category<is_object,'), (14, 1, u'+  static_assert(test_category<is_object, int&>(false), "");'), (15, 1, u'+  static_assert(test_category<is_object, ClassType&>(false), "");'), (16, 1, u'+  static_assert(test_category<is_object, int(&)(int)>(false), "");'), (17, 1, u'+  static_assert(test_category<is_object, void>(false), "");'), (18, 1, u'+  static_assert(test_category<is_object, const void>(false), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  static_assert(test_category<is_object, int (int)>(false), "");'), (11, 1, u'+  static_assert(test_category<is_object, ClassType (ClassType)>(false), "");'), (12, 1, u'+  static_assert(test_category<is_object,'), (14, 1, u'+  static_assert(test_category<is_object, int&>(false), "");'), (15, 1, u'+  static_assert(test_category<is_object, ClassType&>(false), "");'), (16, 1, u'+  static_assert(test_category<is_object, int(&)(int)>(false), "");'), (17, 1, u'+  static_assert(test_category<is_object, void>(false), "");'), (18, 1, u'+  static_assert(test_category<is_object, const void>(false), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+  static_assert(test_category<is_pod, int>(true), "");'), (25, 1, u'+  static_assert(test_category<is_pod, float>(true), "");'), (26, 1, u'+  static_assert(test_category<is_pod, EnumType>(true), "");'), (27, 1, u'+  static_assert(test_category<is_pod, int*>(true), "");'), (28, 1, u'+  static_assert(test_category<is_pod, int(*)(int)>(true), "");'), (29, 1, u'+  static_assert(test_category<is_pod, int (ClassType::*)>(true), "");'), (30, 1, u'+  static_assert(test_category<is_pod, int (ClassType::*) (int)>(true), "");'), (31, 1, u'+  static_assert(test_category<is_pod, int[2]>(true), "");'), (32, 1, u'+  static_assert(test_category<is_pod, float[][3]>(true), "");'), (33, 1, u'+  static_assert(test_category<is_pod, EnumType[2][3][4]>(true), "");'), (34, 1, u'+  static_assert(test_category<is_pod, int*[3]>(true), "");'), (35, 1, u'+  static_assert(test_category<is_pod, int(*[][2])(int)>(true), "");'), (36, 1, u'+  static_assert(test_category<is_pod, int (ClassType::*[2][3])>(true), "");'), (37, 1, u'+  static_assert(test_category<is_pod,'), (39, 1, u'+  static_assert(test_category<is_pod, ClassType>(true), "");'), (40, 1, u'+  static_assert(test_category<is_pod, PODType>(true), "");')]
===========================================
===========================================
Total add: 21
Total del: 26
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+  static_assert(test_category<is_pod, int>(true), "");'), (25, 1, u'+  static_assert(test_category<is_pod, float>(true), "");'), (26, 1, u'+  static_assert(test_category<is_pod, EnumType>(true), "");'), (27, 1, u'+  static_assert(test_category<is_pod, int*>(true), "");'), (28, 1, u'+  static_assert(test_category<is_pod, int(*)(int)>(true), "");'), (29, 1, u'+  static_assert(test_category<is_pod, int (ClassType::*)>(true), "");'), (30, 1, u'+  static_assert(test_category<is_pod, int (ClassType::*) (int)>(true), "");'), (31, 1, u'+  static_assert(test_category<is_pod, int[2]>(true), "");'), (32, 1, u'+  static_assert(test_category<is_pod, float[][3]>(true), "");'), (33, 1, u'+  static_assert(test_category<is_pod, EnumType[2][3][4]>(true), "");'), (34, 1, u'+  static_assert(test_category<is_pod, int*[3]>(true), "");'), (35, 1, u'+  static_assert(test_category<is_pod, int(*[][2])(int)>(true), "");'), (36, 1, u'+  static_assert(test_category<is_pod, int (ClassType::*[2][3])>(true), "");'), (37, 1, u'+  static_assert(test_category<is_pod,'), (39, 1, u'+  static_assert(test_category<is_pod, ClassType>(true), "");'), (40, 1, u'+  static_assert(test_category<is_pod, PODType>(true), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+  static_assert(test_category<is_pod, int>(true), "");'), (25, 1, u'+  static_assert(test_category<is_pod, float>(true), "");'), (26, 1, u'+  static_assert(test_category<is_pod, EnumType>(true), "");'), (27, 1, u'+  static_assert(test_category<is_pod, int*>(true), "");'), (28, 1, u'+  static_assert(test_category<is_pod, int(*)(int)>(true), "");'), (29, 1, u'+  static_assert(test_category<is_pod, int (ClassType::*)>(true), "");'), (30, 1, u'+  static_assert(test_category<is_pod, int (ClassType::*) (int)>(true), "");'), (31, 1, u'+  static_assert(test_category<is_pod, int[2]>(true), "");'), (32, 1, u'+  static_assert(test_category<is_pod, float[][3]>(true), "");'), (33, 1, u'+  static_assert(test_category<is_pod, EnumType[2][3][4]>(true), "");'), (34, 1, u'+  static_assert(test_category<is_pod, int*[3]>(true), "");'), (35, 1, u'+  static_assert(test_category<is_pod, int(*[][2])(int)>(true), "");'), (36, 1, u'+  static_assert(test_category<is_pod, int (ClassType::*[2][3])>(true), "");'), (37, 1, u'+  static_assert(test_category<is_pod,'), (39, 1, u'+  static_assert(test_category<is_pod, ClassType>(true), "");'), (40, 1, u'+  static_assert(test_category<is_pod, PODType>(true), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  static_assert(test_category<is_rvalue_reference, int&&>(true), "");'), (6, 1, u'+  static_assert(test_category<is_rvalue_reference, ClassType&&>(true), "");'), (7, 1, u'+  static_assert(test_category<is_rvalue_reference, int(&&)(int)>(true), "");')]
===========================================
===========================================
Total add: 5
Total del: 11
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  static_assert(test_category<is_rvalue_reference, int&&>(true), "");'), (6, 1, u'+  static_assert(test_category<is_rvalue_reference, ClassType&&>(true), "");'), (7, 1, u'+  static_assert(test_category<is_rvalue_reference, int(&&)(int)>(true), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  static_assert(test_category<is_rvalue_reference, int&&>(true), "");'), (6, 1, u'+  static_assert(test_category<is_rvalue_reference, ClassType&&>(true), "");'), (7, 1, u'+  static_assert(test_category<is_rvalue_reference, int(&&)(int)>(true), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  static_assert(test_category<is_scalar, int>(true), "");'), (11, 1, u'+  static_assert(test_category<is_scalar, float>(true), "");'), (12, 1, u'+  static_assert(test_category<is_scalar, EnumType>(true), "");'), (13, 1, u'+  static_assert(test_category<is_scalar, int*>(true), "");'), (14, 1, u'+  static_assert(test_category<is_scalar, int(*)(int)>(true), "");'), (15, 1, u'+  static_assert(test_category<is_scalar, int (ClassType::*)>(true), "");'), (16, 1, u'+  static_assert(test_category<is_scalar, int (ClassType::*) (int)>(true), "");'), (17, 1, u'+  static_assert(test_category<is_scalar, std::nullptr_t>(true), "");')]
===========================================
===========================================
Total add: 9
Total del: 15
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  static_assert(test_category<is_scalar, int>(true), "");'), (11, 1, u'+  static_assert(test_category<is_scalar, float>(true), "");'), (12, 1, u'+  static_assert(test_category<is_scalar, EnumType>(true), "");'), (13, 1, u'+  static_assert(test_category<is_scalar, int*>(true), "");'), (14, 1, u'+  static_assert(test_category<is_scalar, int(*)(int)>(true), "");'), (15, 1, u'+  static_assert(test_category<is_scalar, int (ClassType::*)>(true), "");'), (16, 1, u'+  static_assert(test_category<is_scalar, int (ClassType::*) (int)>(true), "");'), (17, 1, u'+  static_assert(test_category<is_scalar, std::nullptr_t>(true), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  static_assert(test_category<is_scalar, int>(true), "");'), (11, 1, u'+  static_assert(test_category<is_scalar, float>(true), "");'), (12, 1, u'+  static_assert(test_category<is_scalar, EnumType>(true), "");'), (13, 1, u'+  static_assert(test_category<is_scalar, int*>(true), "");'), (14, 1, u'+  static_assert(test_category<is_scalar, int(*)(int)>(true), "");'), (15, 1, u'+  static_assert(test_category<is_scalar, int (ClassType::*)>(true), "");'), (16, 1, u'+  static_assert(test_category<is_scalar, int (ClassType::*) (int)>(true), "");'), (17, 1, u'+  static_assert(test_category<is_scalar, std::nullptr_t>(true), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_signed, void>(false), "");'), (8, 1, u'+  static_assert(test_category<is_signed, char>(char(-1) < char(0)), "");'), (9, 1, u'+  static_assert(test_category<is_signed, signed char>(true), "");'), (10, 1, u'+  static_assert(test_category<is_signed, unsigned char>(false), "");'), (13, 1, u'+  static_assert(test_category<is_signed, wchar_t>'), (24, 1, u'+  static_assert(test_category<is_signed, short>(true), "");'), (25, 1, u'+  static_assert(test_category<is_signed, unsigned short>(false), "");'), (26, 1, u'+  static_assert(test_category<is_signed, int>(true), "");'), (27, 1, u'+  static_assert(test_category<is_signed, unsigned int>(false), "");'), (28, 1, u'+  static_assert(test_category<is_signed, long>(true), "");'), (29, 1, u'+  static_assert(test_category<is_signed, unsigned long>(false), "");'), (30, 1, u'+  static_assert(test_category<is_signed, long long>(true), "");'), (31, 1, u'+  static_assert(test_category<is_signed, unsigned long long>(false), "");'), (36, 1, u'+  static_assert(test_category<is_signed, float>(true), "");'), (37, 1, u'+  static_assert(test_category<is_signed, double>(true), "");'), (38, 1, u'+  static_assert(test_category<is_signed, long double>(true), "");')]
===========================================
===========================================
Total add: 17
Total del: 16
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_signed, void>(false), "");'), (8, 1, u'+  static_assert(test_category<is_signed, char>(char(-1) < char(0)), "");'), (9, 1, u'+  static_assert(test_category<is_signed, signed char>(true), "");'), (10, 1, u'+  static_assert(test_category<is_signed, unsigned char>(false), "");'), (13, 1, u'+  static_assert(test_category<is_signed, wchar_t>'), (24, 1, u'+  static_assert(test_category<is_signed, short>(true), "");'), (25, 1, u'+  static_assert(test_category<is_signed, unsigned short>(false), "");'), (26, 1, u'+  static_assert(test_category<is_signed, int>(true), "");'), (27, 1, u'+  static_assert(test_category<is_signed, unsigned int>(false), "");'), (28, 1, u'+  static_assert(test_category<is_signed, long>(true), "");'), (29, 1, u'+  static_assert(test_category<is_signed, unsigned long>(false), "");'), (30, 1, u'+  static_assert(test_category<is_signed, long long>(true), "");'), (31, 1, u'+  static_assert(test_category<is_signed, unsigned long long>(false), "");'), (36, 1, u'+  static_assert(test_category<is_signed, float>(true), "");'), (37, 1, u'+  static_assert(test_category<is_signed, double>(true), "");'), (38, 1, u'+  static_assert(test_category<is_signed, long double>(true), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_signed, void>(false), "");'), (8, 1, u'+  static_assert(test_category<is_signed, char>(char(-1) < char(0)), "");'), (9, 1, u'+  static_assert(test_category<is_signed, signed char>(true), "");'), (10, 1, u'+  static_assert(test_category<is_signed, unsigned char>(false), "");'), (13, 1, u'+  static_assert(test_category<is_signed, wchar_t>'), (24, 1, u'+  static_assert(test_category<is_signed, short>(true), "");'), (25, 1, u'+  static_assert(test_category<is_signed, unsigned short>(false), "");'), (26, 1, u'+  static_assert(test_category<is_signed, int>(true), "");'), (27, 1, u'+  static_assert(test_category<is_signed, unsigned int>(false), "");'), (28, 1, u'+  static_assert(test_category<is_signed, long>(true), "");'), (29, 1, u'+  static_assert(test_category<is_signed, unsigned long>(false), "");'), (30, 1, u'+  static_assert(test_category<is_signed, long long>(true), "");'), (31, 1, u'+  static_assert(test_category<is_signed, unsigned long long>(false), "");'), (36, 1, u'+  static_assert(test_category<is_signed, float>(true), "");'), (37, 1, u'+  static_assert(test_category<is_signed, double>(true), "");'), (38, 1, u'+  static_assert(test_category<is_signed, long double>(true), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_category<is_signed, __int128>(true), "");'), (5, 1, u'+  static_assert(test_category<is_signed, unsigned __int128>(false), "");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_category<is_signed, __int128>(true), "");'), (5, 1, u'+  static_assert(test_category<is_signed, unsigned __int128>(false), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_category<is_signed, __int128>(true), "");'), (5, 1, u'+  static_assert(test_category<is_signed, unsigned __int128>(false), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_signed, __float128>(true), "");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_signed, __float128>(true), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_signed, __float128>(true), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  static_assert(test_category<is_standard_layout, SLType>(true), "");'), (9, 1, u'+  static_assert(test_category<is_standard_layout, PODType>(true), "");')]
===========================================
===========================================
Total add: 4
Total del: 10
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  static_assert(test_category<is_standard_layout, SLType>(true), "");'), (9, 1, u'+  static_assert(test_category<is_standard_layout, PODType>(true), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  static_assert(test_category<is_standard_layout, SLType>(true), "");'), (9, 1, u'+  static_assert(test_category<is_standard_layout, PODType>(true), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  static_assert(test_category<is_trivial, TType>(true), "");'), (9, 1, u'+  static_assert(test_category<is_trivial, PODType>(true), "");')]
===========================================
===========================================
Total add: 4
Total del: 10
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  static_assert(test_category<is_trivial, TType>(true), "");'), (9, 1, u'+  static_assert(test_category<is_trivial, PODType>(true), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  static_assert(test_category<is_trivial, TType>(true), "");'), (9, 1, u'+  static_assert(test_category<is_trivial, PODType>(true), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  static_assert(test_category<is_trivially_destructible, int>(true), "");'), (6, 1, u'+  static_assert(test_category<is_trivially_destructible, TType>(true), "");'), (7, 1, u'+  static_assert(test_category<is_trivially_destructible, PODType>(true), "");')]
===========================================
===========================================
Total add: 5
Total del: 11
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  static_assert(test_category<is_trivially_destructible, int>(true), "");'), (6, 1, u'+  static_assert(test_category<is_trivially_destructible, TType>(true), "");'), (7, 1, u'+  static_assert(test_category<is_trivially_destructible, PODType>(true), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  static_assert(test_category<is_trivially_destructible, int>(true), "");'), (6, 1, u'+  static_assert(test_category<is_trivially_destructible, TType>(true), "");'), (7, 1, u'+  static_assert(test_category<is_trivially_destructible, PODType>(true), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(test_category<is_unsigned, void>(false), "");'), (13, 1, u'+  static_assert(test_category<is_unsigned, char>(char(-1) > char(0)), "");'), (14, 1, u'+  static_assert(test_category<is_unsigned, signed char>(false), "");'), (15, 1, u'+  static_assert(test_category<is_unsigned, unsigned char>(true), "");'), (18, 1, u'+  static_assert(test_category<is_unsigned, wchar_t>'), (29, 1, u'+  static_assert(test_category<is_unsigned, short>(false), "");'), (30, 1, u'+  static_assert(test_category<is_unsigned, unsigned short>(true), "");'), (31, 1, u'+  static_assert(test_category<is_unsigned, int>(false), "");'), (32, 1, u'+  static_assert(test_category<is_unsigned, unsigned int>(true), "");'), (33, 1, u'+  static_assert(test_category<is_unsigned, long>(false), "");'), (34, 1, u'+  static_assert(test_category<is_unsigned, unsigned long>(true), "");'), (35, 1, u'+  static_assert(test_category<is_unsigned, long long>(false), "");'), (36, 1, u'+  static_assert(test_category<is_unsigned, unsigned long long>(true), "");'), (41, 1, u'+  static_assert(test_category<is_unsigned, float>(false), "");'), (42, 1, u'+  static_assert(test_category<is_unsigned, double>(false), "");'), (43, 1, u'+  static_assert(test_category<is_unsigned, long double>(false), "");')]
===========================================
===========================================
Total add: 18
Total del: 18
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(test_category<is_unsigned, void>(false), "");'), (13, 1, u'+  static_assert(test_category<is_unsigned, char>(char(-1) > char(0)), "");'), (14, 1, u'+  static_assert(test_category<is_unsigned, signed char>(false), "");'), (15, 1, u'+  static_assert(test_category<is_unsigned, unsigned char>(true), "");'), (18, 1, u'+  static_assert(test_category<is_unsigned, wchar_t>'), (29, 1, u'+  static_assert(test_category<is_unsigned, short>(false), "");'), (30, 1, u'+  static_assert(test_category<is_unsigned, unsigned short>(true), "");'), (31, 1, u'+  static_assert(test_category<is_unsigned, int>(false), "");'), (32, 1, u'+  static_assert(test_category<is_unsigned, unsigned int>(true), "");'), (33, 1, u'+  static_assert(test_category<is_unsigned, long>(false), "");'), (34, 1, u'+  static_assert(test_category<is_unsigned, unsigned long>(true), "");'), (35, 1, u'+  static_assert(test_category<is_unsigned, long long>(false), "");'), (36, 1, u'+  static_assert(test_category<is_unsigned, unsigned long long>(true), "");'), (41, 1, u'+  static_assert(test_category<is_unsigned, float>(false), "");'), (42, 1, u'+  static_assert(test_category<is_unsigned, double>(false), "");'), (43, 1, u'+  static_assert(test_category<is_unsigned, long double>(false), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert(test_category<is_unsigned, void>(false), "");'), (13, 1, u'+  static_assert(test_category<is_unsigned, char>(char(-1) > char(0)), "");'), (14, 1, u'+  static_assert(test_category<is_unsigned, signed char>(false), "");'), (15, 1, u'+  static_assert(test_category<is_unsigned, unsigned char>(true), "");'), (18, 1, u'+  static_assert(test_category<is_unsigned, wchar_t>'), (29, 1, u'+  static_assert(test_category<is_unsigned, short>(false), "");'), (30, 1, u'+  static_assert(test_category<is_unsigned, unsigned short>(true), "");'), (31, 1, u'+  static_assert(test_category<is_unsigned, int>(false), "");'), (32, 1, u'+  static_assert(test_category<is_unsigned, unsigned int>(true), "");'), (33, 1, u'+  static_assert(test_category<is_unsigned, long>(false), "");'), (34, 1, u'+  static_assert(test_category<is_unsigned, unsigned long>(true), "");'), (35, 1, u'+  static_assert(test_category<is_unsigned, long long>(false), "");'), (36, 1, u'+  static_assert(test_category<is_unsigned, unsigned long long>(true), "");'), (41, 1, u'+  static_assert(test_category<is_unsigned, float>(false), "");'), (42, 1, u'+  static_assert(test_category<is_unsigned, double>(false), "");'), (43, 1, u'+  static_assert(test_category<is_unsigned, long double>(false), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_category<is_unsigned, unsigned __int128>(true), "");'), (5, 1, u'+  static_assert(test_category<is_unsigned, __int128>(false), "");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_category<is_unsigned, unsigned __int128>(true), "");'), (5, 1, u'+  static_assert(test_category<is_unsigned, __int128>(false), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(test_category<is_unsigned, unsigned __int128>(true), "");'), (5, 1, u'+  static_assert(test_category<is_unsigned, __int128>(false), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_unsigned, __float128>(false), "");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_unsigned, __float128>(false), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(test_category<is_unsigned, __float128>(false), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test2_type, const int>::value, "");'), (7, 1, u'+  static_assert(is_same<test21c_type, const signed int>::value, "");'), (11, 1, u'+  static_assert(is_same<test21v_type, volatile signed int>::value, "");'), (15, 1, u'+  static_assert(is_same<test21cv_type,'), (20, 1, u'+  static_assert(is_same<test22_type, const signed char>::value, "");')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test2_type, const int>::value, "");'), (7, 1, u'+  static_assert(is_same<test21c_type, const signed int>::value, "");'), (11, 1, u'+  static_assert(is_same<test21v_type, volatile signed int>::value, "");'), (15, 1, u'+  static_assert(is_same<test21cv_type,'), (20, 1, u'+  static_assert(is_same<test22_type, const signed char>::value, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test2_type, const int>::value, "");'), (7, 1, u'+  static_assert(is_same<test21c_type, const signed int>::value, "");'), (11, 1, u'+  static_assert(is_same<test21v_type, volatile signed int>::value, "");'), (15, 1, u'+  static_assert(is_same<test21cv_type,'), (20, 1, u'+  static_assert(is_same<test22_type, const signed char>::value, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test23_type, volatile signed wchar_t>::value, "");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test23_type, volatile signed wchar_t>::value, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test23_type, volatile signed wchar_t>::value, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test24_type, short>::value, "");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test24_type, short>::value, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test24_type, short>::value, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test2_type, const unsigned int>::value, "");'), (7, 1, u'+  static_assert(is_same<test21c_type, const unsigned int>::value, "");'), (11, 1, u'+  static_assert(is_same<test21v_type, volatile unsigned int>::value, "");'), (15, 1, u'+  static_assert(is_same<test21cv_type,'), (20, 1, u'+  static_assert(is_same<test22_type, const unsigned char>::value, "");')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test2_type, const unsigned int>::value, "");'), (7, 1, u'+  static_assert(is_same<test21c_type, const unsigned int>::value, "");'), (11, 1, u'+  static_assert(is_same<test21v_type, volatile unsigned int>::value, "");'), (15, 1, u'+  static_assert(is_same<test21cv_type,'), (20, 1, u'+  static_assert(is_same<test22_type, const unsigned char>::value, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test2_type, const unsigned int>::value, "");'), (7, 1, u'+  static_assert(is_same<test21c_type, const unsigned int>::value, "");'), (11, 1, u'+  static_assert(is_same<test21v_type, volatile unsigned int>::value, "");'), (15, 1, u'+  static_assert(is_same<test21cv_type,'), (20, 1, u'+  static_assert(is_same<test22_type, const unsigned char>::value, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test23_type, volatile wchar_t>::value, "");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test23_type, volatile wchar_t>::value, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test23_type, volatile wchar_t>::value, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(is_unsigned<test24_type>::value, "");'), (5, 1, u'+  static_assert(sizeof(test24_type) == sizeof(test_enum), "");')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(is_unsigned<test24_type>::value, "");'), (5, 1, u'+  static_assert(sizeof(test24_type) == sizeof(test_enum), "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert(is_unsigned<test24_type>::value, "");'), (5, 1, u'+  static_assert(sizeof(test24_type) == sizeof(test_enum), "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test2_type, const unsigned int>::value, "");'), (7, 1, u'+  static_assert(is_same<test21c_type, const unsigned int>::value, "");'), (11, 1, u'+  static_assert(is_same<test21v_type, volatile unsigned int>::value, "");'), (15, 1, u'+  static_assert(is_same<test21cv_type,'), (20, 1, u'+  static_assert(is_same<test22_type, const unsigned char>::value, "");')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test2_type, const unsigned int>::value, "");'), (7, 1, u'+  static_assert(is_same<test21c_type, const unsigned int>::value, "");'), (11, 1, u'+  static_assert(is_same<test21v_type, volatile unsigned int>::value, "");'), (15, 1, u'+  static_assert(is_same<test21cv_type,'), (20, 1, u'+  static_assert(is_same<test22_type, const unsigned char>::value, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test2_type, const unsigned int>::value, "");'), (7, 1, u'+  static_assert(is_same<test21c_type, const unsigned int>::value, "");'), (11, 1, u'+  static_assert(is_same<test21v_type, volatile unsigned int>::value, "");'), (15, 1, u'+  static_assert(is_same<test21cv_type,'), (20, 1, u'+  static_assert(is_same<test22_type, const unsigned char>::value, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test23_type, volatile wchar_t>::value, "");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test23_type, volatile wchar_t>::value, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test23_type, volatile wchar_t>::value, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test24_type, unsigned short>::value, "");')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test24_type, unsigned short>::value, "");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert(is_same<test24_type, unsigned short>::value, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                  gcc_assert (gsi_stmt (gsi_vtbl_assign) == stmt);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: verify_bb_vtables
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                  gcc_assert (gsi_stmt (gsi_vtbl_assign) == stmt);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+                  gcc_assert (gsi_stmt (gsi_vtbl_assign) == stmt);')]
===========================================
Class:  template <class T> class C { class C 
Class:class Symbolizer : public SymbolizerInterface { class Symbolizer : public SymbolizerInterface 
Class:      class POSIXSymbolizer : public Symbolizer { class POSIXSymbolizer : public Symbolizer 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t    gcc_assert (tmp != NULL_TREE);')]
===========================================
===========================================
Total add: 22
Total del: 0
Header: lto_input_tree_ref
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t    gcc_assert (tmp != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t    gcc_assert (tmp != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\tgcc_assert (tmp != NULL_TREE);')]
===========================================
===========================================
Total add: 15
Total del: 0
Header: lto_output_tree_ref
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\tgcc_assert (tmp != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\tgcc_assert (tmp != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (tree_contains_struct[NAMELIST_DECL][TS_DECL_MINIMAL]);'), (3, 1, u'+  gcc_assert (tree_contains_struct[NAMELIST_DECL][TS_DECL_COMMON]);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: initialize_tree_contains_struct
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (tree_contains_struct[NAMELIST_DECL][TS_DECL_MINIMAL]);'), (3, 1, u'+  gcc_assert (tree_contains_struct[NAMELIST_DECL][TS_DECL_COMMON]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (tree_contains_struct[NAMELIST_DECL][TS_DECL_MINIMAL]);'), (3, 1, u'+  gcc_assert (tree_contains_struct[NAMELIST_DECL][TS_DECL_COMMON]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (GET_MODE (op) == mode')]
===========================================
===========================================
Total add: 11
Total del: 2
Header: ix86_expand_special_args_builtin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (GET_MODE (op) == mode')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (GET_MODE (op) == mode')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (base);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: record_potential_basis
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (base);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (base);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_checking_assert (precision != 0);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: wi::max_value
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_checking_assert (precision != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_checking_assert (precision != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_checking_assert (precision != 0);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: wi::min_value
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_checking_assert (precision != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_checking_assert (precision != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!failure);'), (5, 1, u'+      gcc_assert (failure == 0 || failure == 3);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: build_compound_literal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!failure);'), (5, 1, u'+      gcc_assert (failure == 0 || failure == 3);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!failure);'), (5, 1, u'+      gcc_assert (failure == 0 || failure == 3);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t  gcc_checking_assert (dividend_prec > HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
Total add: 14
Total del: 8
Header: wi::divmod_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t  gcc_checking_assert (dividend_prec > HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t  gcc_checking_assert (dividend_prec > HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (is_gimple_min_invariant (base));'), (3, 1, u'+  gcc_checking_assert (is_gimple_min_invariant (base));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: get_val_for
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (is_gimple_min_invariant (base));'), (3, 1, u'+  gcc_checking_assert (is_gimple_min_invariant (base));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (is_gimple_min_invariant (base));'), (3, 1, u'+  gcc_checking_assert (is_gimple_min_invariant (base));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (is_gimple_assign (stmt));'), (3, 1, u'+  gcc_checking_assert (is_gimple_assign (stmt));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: get_val_for
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (is_gimple_assign (stmt));'), (3, 1, u'+  gcc_checking_assert (is_gimple_assign (stmt));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (is_gimple_assign (stmt));'), (3, 1, u'+  gcc_checking_assert (is_gimple_assign (stmt));')]
===========================================
Class: class A { class A 
Class:class B 
Class:class C : B { class C : B 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (ssa_operands_active (cfun));')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: swap_ssa_operands
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (ssa_operands_active (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (ssa_operands_active (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (parts.base == NULL_RTX || parts.index == NULL_RTX);'), (17, 2, u'-      gcc_assert (parts.index == NULL_RTX);')]
===========================================
===========================================
Total add: 0
Total del: 19
Header: ix86_print_operand_address
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (parts.base == NULL_RTX || parts.index == NULL_RTX);'), (17, 2, u'-      gcc_assert (parts.index == NULL_RTX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (parts.base == NULL_RTX || parts.index == NULL_RTX);'), (17, 2, u'-      gcc_assert (parts.index == NULL_RTX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (OMP_CLAUSE_REDUCTION_GIMPLE_INIT (expr) == NULL);'), (19, 1, u'+      gcc_assert (OMP_CLAUSE_REDUCTION_GIMPLE_MERGE (expr) == NULL);')]
===========================================
===========================================
Total add: 23
Total del: 0
Header: write_ts_constructor_tree_pointers
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (OMP_CLAUSE_REDUCTION_GIMPLE_INIT (expr) == NULL);'), (19, 1, u'+      gcc_assert (OMP_CLAUSE_REDUCTION_GIMPLE_MERGE (expr) == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (OMP_CLAUSE_REDUCTION_GIMPLE_INIT (expr) == NULL);'), (19, 1, u'+      gcc_assert (OMP_CLAUSE_REDUCTION_GIMPLE_MERGE (expr) == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!update_p || !full_p);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: lra_eliminate_regs_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!update_p || !full_p);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!update_p || !full_p);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (ep->to_rtx != stack_pointer_rtx);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: update_reg_eliminate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (ep->to_rtx != stack_pointer_rtx);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (ep->to_rtx != stack_pointer_rtx);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (! final_p || ! first_p);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: lra_eliminate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (! final_p || ! first_p);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (! final_p || ! first_p);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tgcc_assert (pcst.elt (l - 2) < 0);'), (3, 1, u'+\tgcc_checking_assert (pcst.elt (l - 2) < 0);'), (5, 2, u'-\tgcc_assert (pcst.elt (l - 2) >= 0);'), (6, 1, u'+\tgcc_checking_assert (pcst.elt (l - 2) >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: wide_int_to_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tgcc_assert (pcst.elt (l - 2) < 0);'), (3, 1, u'+\tgcc_checking_assert (pcst.elt (l - 2) < 0);'), (5, 2, u'-\tgcc_assert (pcst.elt (l - 2) >= 0);'), (6, 1, u'+\tgcc_checking_assert (pcst.elt (l - 2) >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tgcc_assert (pcst.elt (l - 2) < 0);'), (3, 1, u'+\tgcc_checking_assert (pcst.elt (l - 2) < 0);'), (5, 2, u'-\tgcc_assert (pcst.elt (l - 2) >= 0);'), (6, 1, u'+\tgcc_checking_assert (pcst.elt (l - 2) >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert (cst == 0);'), (34, 1, u'+\t  gcc_assert (hwi == 0);')]
===========================================
===========================================
Total add: 46
Total del: 65
Header: wide_int_to_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert (cst == 0);'), (34, 1, u'+\t  gcc_assert (hwi == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert (cst == 0);'), (34, 1, u'+\t  gcc_assert (hwi == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TREE_TYPE (t) == type'), (6, 1, u'+\t    gcc_checking_assert (TREE_TYPE (t) == type')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: wide_int_to_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TREE_TYPE (t) == type'), (6, 1, u'+\t    gcc_checking_assert (TREE_TYPE (t) == type')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TREE_TYPE (t) == type'), (6, 1, u'+\t    gcc_checking_assert (TREE_TYPE (t) == type')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t\t  gcc_assert (wi::les_p (minv, maxv));'), (7, 1, u'+\t\t  gcc_assert (wi::le_p (minv, maxv, sgn));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: determine_value_range
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t\t  gcc_assert (wi::les_p (minv, maxv));'), (7, 1, u'+\t\t  gcc_assert (wi::le_p (minv, maxv, sgn));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t\t  gcc_assert (wi::les_p (minv, maxv));'), (7, 1, u'+\t\t  gcc_assert (wi::le_p (minv, maxv, sgn));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (wi::les_p (minv, maxv));'), (3, 1, u'+\t  gcc_assert (wi::le_p (minv, maxv, sgn));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: determine_value_range
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (wi::les_p (minv, maxv));'), (3, 1, u'+\t  gcc_assert (wi::le_p (minv, maxv, sgn));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (wi::les_p (minv, maxv));'), (3, 1, u'+\t  gcc_assert (wi::le_p (minv, maxv, sgn));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: make_ssa_name_fn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!SSA_NAME_ANTI_RANGE_P (name));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: duplicate_ssa_name_range_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!SSA_NAME_ANTI_RANGE_P (name));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!SSA_NAME_ANTI_RANGE_P (name));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: duplicate_ssa_name_range_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: make_ssa_name_fn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!SSA_NAME_ANTI_RANGE_P (name));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: duplicate_ssa_name_range_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!SSA_NAME_ANTI_RANGE_P (name));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!SSA_NAME_ANTI_RANGE_P (name));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: duplicate_ssa_name_range_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (REGNO (reg) < FIRST_PSEUDO_REGISTER);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: dwf_regno
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (REGNO (reg) < FIRST_PSEUDO_REGISTER);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (REGNO (reg) < FIRST_PSEUDO_REGISTER);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t  gcc_assert (REGNO (reg) < FIRST_PSEUDO_REGISTER);')]
===========================================
===========================================
Total add: 14
Total del: 0
Header: vt_add_function_parameter
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t  gcc_assert (REGNO (reg) < FIRST_PSEUDO_REGISTER);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+\t  gcc_assert (REGNO (reg) < FIRST_PSEUDO_REGISTER);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t  gcc_checking_assert (allow_non_constant);')]
===========================================
===========================================
Total add: 10
Total del: 0
Header: cxx_eval_constant_expression
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t  gcc_checking_assert (allow_non_constant);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t  gcc_checking_assert (allow_non_constant);')]
===========================================
Class:    class A { class A 
Class:class pass_omp_simd_clone : public simple_ipa_opt_pass class pass_omp_simd_clone : public simple_ipa_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (STMT_VINFO_VECTYPE (stmt_info));')]
===========================================
===========================================
Total add: 12
Total del: 10
Header: vect_transform_loop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (STMT_VINFO_VECTYPE (stmt_info));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (STMT_VINFO_VECTYPE (stmt_info));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_checking_assert (!stmt_can_throw_internal (stmt));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: vectorizable_call
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_checking_assert (!stmt_can_throw_internal (stmt));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_checking_assert (!stmt_can_throw_internal (stmt));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+  gcc_checking_assert (!stmt_can_throw_internal (stmt));'), (109, 1, u'+\tgcc_assert (thisarginfo.vectype == NULL_TREE);'), (111, 1, u'+\tgcc_assert (thisarginfo.vectype != NULL_TREE);'), (249, 1, u'+  gcc_assert (ncopies >= 1);'), (311, 1, u'+\t\t      gcc_assert ((k & (k - 1)) == 0);'), (338, 1, u'+\t\t      gcc_assert ((k & (k - 1)) == 0);'), (388, 1, u'+\t\t      gcc_assert (!new_bb);'), (449, 1, u'+\t  gcc_assert (ratype || TYPE_VECTOR_SUBPARTS (rtype) == nunits);'), (468, 1, u'+\t      gcc_assert ((k & (k - 1)) == 0);'), (506, 1, u'+\t      gcc_assert ((k & (k - 1)) == 0);')]
===========================================
===========================================
Total add: 599
Total del: 0
Header: vectorizable_call
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+  gcc_checking_assert (!stmt_can_throw_internal (stmt));'), (109, 1, u'+\tgcc_assert (thisarginfo.vectype == NULL_TREE);'), (111, 1, u'+\tgcc_assert (thisarginfo.vectype != NULL_TREE);'), (249, 1, u'+  gcc_assert (ncopies >= 1);'), (311, 1, u'+\t\t      gcc_assert ((k & (k - 1)) == 0);'), (338, 1, u'+\t\t      gcc_assert ((k & (k - 1)) == 0);'), (388, 1, u'+\t\t      gcc_assert (!new_bb);'), (449, 1, u'+\t  gcc_assert (ratype || TYPE_VECTOR_SUBPARTS (rtype) == nunits);'), (468, 1, u'+\t      gcc_assert ((k & (k - 1)) == 0);'), (506, 1, u'+\t      gcc_assert ((k & (k - 1)) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+  gcc_checking_assert (!stmt_can_throw_internal (stmt));'), (109, 1, u'+\tgcc_assert (thisarginfo.vectype == NULL_TREE);'), (111, 1, u'+\tgcc_assert (thisarginfo.vectype != NULL_TREE);'), (249, 1, u'+  gcc_assert (ncopies >= 1);'), (311, 1, u'+\t\t      gcc_assert ((k & (k - 1)) == 0);'), (338, 1, u'+\t\t      gcc_assert ((k & (k - 1)) == 0);'), (388, 1, u'+\t\t      gcc_assert (!new_bb);'), (449, 1, u'+\t  gcc_assert (ratype || TYPE_VECTOR_SUBPARTS (rtype) == nunits);'), (468, 1, u'+\t      gcc_assert ((k & (k - 1)) == 0);'), (506, 1, u'+\t      gcc_assert ((k & (k - 1)) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (STMT_VINFO_VECTYPE (stmt_info));'), (3, 1, u'+      gcc_assert (STMT_VINFO_VECTYPE (stmt_info)')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: vect_analyze_stmt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (STMT_VINFO_VECTYPE (stmt_info));'), (3, 1, u'+      gcc_assert (STMT_VINFO_VECTYPE (stmt_info)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (STMT_VINFO_VECTYPE (stmt_info));'), (3, 1, u'+      gcc_assert (STMT_VINFO_VECTYPE (stmt_info)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (access_fn);'), (7, 2, u'-  gcc_assert (ok);'), (9, 1, u'+  gcc_assert (step_expr != NULL_TREE);')]
===========================================
===========================================
Total add: 5
Total del: 6
Header: get_initial_def_for_induction
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (access_fn);'), (7, 2, u'-  gcc_assert (ok);'), (9, 1, u'+  gcc_assert (step_expr != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (access_fn);'), (7, 2, u'-  gcc_assert (ok);'), (9, 1, u'+  gcc_assert (step_expr != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      gcc_assert (!new_bb);')]
===========================================
===========================================
Total add: 10
Total del: 0
Header: get_initial_def_for_induction
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      gcc_assert (!new_bb);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+      gcc_assert (!new_bb);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      retval |= register_edge_assert_for_1 (gimple_assign_rhs1 (op_def),'), (11, 1, u'+\tretval |= register_edge_assert_for_1 (rhs, code, e, bsi);')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: register_edge_assert_for_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      retval |= register_edge_assert_for_1 (gimple_assign_rhs1 (op_def),'), (11, 1, u'+\tretval |= register_edge_assert_for_1 (rhs, code, e, bsi);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      retval |= register_edge_assert_for_1 (gimple_assign_rhs1 (op_def),'), (11, 1, u'+\tretval |= register_edge_assert_for_1 (rhs, code, e, bsi);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t  gcc_assert (max_size >= (unsigned HOST_WIDE_INT)epilogue_size_needed);')]
===========================================
===========================================
Total add: 10
Total del: 12
Header: ix86_expand_set_or_movmem
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t  gcc_assert (max_size >= (unsigned HOST_WIDE_INT)epilogue_size_needed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t  gcc_assert (max_size >= (unsigned HOST_WIDE_INT)epilogue_size_needed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert ((!TREE_OVERFLOW_P (min) || is_overflow_infinity (min))')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: set_value_range
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert ((!TREE_OVERFLOW_P (min) || is_overflow_infinity (min))')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert ((!TREE_OVERFLOW_P (min) || is_overflow_infinity (min))')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (reg_size == 0 || reg_size == epiphany_stack_offset);'), (3, 1, u'+\t  gcc_assert (reg_size == 0 || (int) reg_size == epiphany_stack_offset);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: epiphany_compute_frame_size
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (reg_size == 0 || reg_size == epiphany_stack_offset);'), (3, 1, u'+\t  gcc_assert (reg_size == 0 || (int) reg_size == epiphany_stack_offset);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (reg_size == 0 || reg_size == epiphany_stack_offset);'), (3, 1, u'+\t  gcc_assert (reg_size == 0 || (int) reg_size == epiphany_stack_offset);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (GET_MODE_CLASS (mode) == MODE_INT);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: c_readstr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (GET_MODE_CLASS (mode) == MODE_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_assert (GET_MODE_CLASS (mode) == MODE_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (GET_MODE_CLASS (mode) == MODE_INT);')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: c_readstr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (GET_MODE_CLASS (mode) == MODE_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (GET_MODE_CLASS (mode) == MODE_INT);')]
===========================================
Class:   class B { class B 
Class: class D : public B { class D : public B 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t  gcc_assert(TYPE_SIZE(field_type_tree) != NULL_TREE);'), (25, 1, u'+      gcc_assert(result_struct != NULL);')]
===========================================
===========================================
Total add: 2
Total del: 23
Header: Gcc_backend::function_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t  gcc_assert(TYPE_SIZE(field_type_tree) != NULL_TREE);'), (25, 1, u'+      gcc_assert(result_struct != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t  gcc_assert(TYPE_SIZE(field_type_tree) != NULL_TREE);'), (25, 1, u'+      gcc_assert(result_struct != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t  gcc_assert (n->op != IPA_PARM_OP_NEW);')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: ipa_combine_adjustments
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t  gcc_assert (n->op != IPA_PARM_OP_NEW);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+\t  gcc_assert (n->op != IPA_PARM_OP_NEW);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!in->remove_param);'), (4, 1, u'+      gcc_assert (in->op != IPA_PARM_OP_REMOVE);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: ipa_combine_adjustments
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!in->remove_param);'), (4, 1, u'+      gcc_assert (in->op != IPA_PARM_OP_REMOVE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!in->remove_param);'), (4, 1, u'+      gcc_assert (in->op != IPA_PARM_OP_REMOVE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (out->op != IPA_PARM_OP_NEW);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: ipa_combine_adjustments
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (out->op != IPA_PARM_OP_NEW);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (out->op != IPA_PARM_OP_NEW);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\t\t\t\t\t  handle_dominating_asserts,'), (26, 1, u'+\t\t\t\t      handle_dominating_asserts,')]
===========================================
===========================================
Total add: 13
Total del: 16
Header: thread_through_normal_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\t\t\t\t\t  handle_dominating_asserts,'), (26, 1, u'+\t\t\t\t      handle_dominating_asserts,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\t\t\t\t\t  handle_dominating_asserts,'), (26, 1, u'+\t\t\t\t      handle_dominating_asserts,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\t\t\t      handle_dominating_asserts,'), (19, 1, u'+\t\t\t\t\t    handle_dominating_asserts,')]
===========================================
===========================================
Total add: 14
Total del: 13
Header: thread_across_edge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\t\t\t      handle_dominating_asserts,'), (19, 1, u'+\t\t\t\t\t    handle_dominating_asserts,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\t\t\t      handle_dominating_asserts,'), (19, 1, u'+\t\t\t\t\t    handle_dominating_asserts,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  gcc_assert (last1 && last2);')]
===========================================
===========================================
Total add: 12
Total del: 4
Header: outgoing_edges_match
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  gcc_assert (last1 && last2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+  gcc_assert (last1 && last2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (width <= HOST_BITS_PER_DOUBLE_INT);'), (3, 1, u'+      gcc_assert (width <= HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: simplify_const_unary_operation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (width <= HOST_BITS_PER_DOUBLE_INT);'), (3, 1, u'+      gcc_assert (width <= HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (width <= HOST_BITS_PER_DOUBLE_INT);'), (3, 1, u'+      gcc_assert (width <= HOST_BITS_PER_DOUBLE_INT);')]
===========================================
Class:    class sh_optimize_sett_clrt : public rtl_opt_pass { 
Class:     class __future_base::_State_base   {   
Class:      class __future_base::_Async_state_common : public __future_base::_State_base   {   
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  lra_assert (regno >= FIRST_PSEUDO_REGISTER);')]
===========================================
===========================================
Total add: 0
Total del: 15
Header: init_curr_insn_input_reloads
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  lra_assert (regno >= FIRST_PSEUDO_REGISTER);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-  lra_assert (regno >= FIRST_PSEUDO_REGISTER);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cst_fits_uhwi_p (length));'), (3, 1, u'+  gcc_assert (tree_fits_uhwi_p (length));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: gfc_conv_string_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cst_fits_uhwi_p (length));'), (3, 1, u'+  gcc_assert (tree_fits_uhwi_p (length));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cst_fits_uhwi_p (length));'), (3, 1, u'+  gcc_assert (tree_fits_uhwi_p (length));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(cst_fits_uhwi_p (t));'), (3, 1, u'+  gcc_assert(tree_fits_uhwi_p (t));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Gcc_backend::type_size
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(cst_fits_uhwi_p (t));'), (3, 1, u'+  gcc_assert(tree_fits_uhwi_p (t));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(cst_fits_uhwi_p (t));'), (3, 1, u'+  gcc_assert(tree_fits_uhwi_p (t));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (cst_fits_shwi_p (x));'), (3, 2, u'-      gcc_assert (cst_fits_shwi_p (mask));'), (4, 1, u'+      gcc_assert (cst_and_fits_in_hwi (x));'), (5, 1, u'+      gcc_assert (cst_and_fits_in_hwi (mask));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: inverse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (cst_fits_shwi_p (x));'), (3, 2, u'-      gcc_assert (cst_fits_shwi_p (mask));'), (4, 1, u'+      gcc_assert (cst_and_fits_in_hwi (x));'), (5, 1, u'+      gcc_assert (cst_and_fits_in_hwi (mask));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (cst_fits_shwi_p (x));'), (3, 2, u'-      gcc_assert (cst_fits_shwi_p (mask));'), (4, 1, u'+      gcc_assert (cst_and_fits_in_hwi (x));'), (5, 1, u'+      gcc_assert (cst_and_fits_in_hwi (mask));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cst_fits_shwi_p (x));'), (3, 1, u'+  gcc_assert (cst_and_fits_in_hwi (x));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: int_cst_value
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cst_fits_shwi_p (x));'), (3, 1, u'+  gcc_assert (cst_and_fits_in_hwi (x));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cst_fits_shwi_p (x));'), (3, 1, u'+  gcc_assert (cst_and_fits_in_hwi (x));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+      gcc_assert (!mpfr_nan_p (m) && !mpfr_inf_p (m));'), (59, 1, u'+\t  gcc_assert (r->cl = rvc_normal);')]
===========================================
===========================================
Total add: 26
Total del: 34
Header: real_from_string
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+      gcc_assert (!mpfr_nan_p (m) && !mpfr_inf_p (m));'), (59, 1, u'+\t  gcc_assert (r->cl = rvc_normal);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+      gcc_assert (!mpfr_nan_p (m) && !mpfr_inf_p (m));'), (59, 1, u'+\t  gcc_assert (r->cl = rvc_normal);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TREE_CODE (format_num_expr) == INTEGER_CST')]
===========================================
===========================================
Total add: 1
Total del: 3
Header: check_function_arguments_recurse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TREE_CODE (format_num_expr) == INTEGER_CST')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (TREE_CODE (format_num_expr) == INTEGER_CST')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(86, 2, u'-\t\t    gcc_assert (insn_data[d->code].operand[k].mode == DImode);'), (130, 2, u'-\t\t    gcc_assert (insn_data[d->code].operand[k].mode == DImode);')]
===========================================
===========================================
Total add: 70
Total del: 326
Header: aarch64_init_simd_builtins
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(86, 2, u'-\t\t    gcc_assert (insn_data[d->code].operand[k].mode == DImode);'), (130, 2, u'-\t\t    gcc_assert (insn_data[d->code].operand[k].mode == DImode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(86, 2, u'-\t\t    gcc_assert (insn_data[d->code].operand[k].mode == DImode);'), (130, 2, u'-\t\t    gcc_assert (insn_data[d->code].operand[k].mode == DImode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\t\t\t       handle_dominating_asserts,')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: thread_across_edge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\t\t\t       handle_dominating_asserts,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t\t\t\t\t       handle_dominating_asserts,')]
===========================================
Class:class pass_mudflap_1 : public gimple_opt_pass class pass_mudflap_1 : public gimple_opt_pass
Class:class pass_mudflap_2 : public gimple_opt_pass class pass_mudflap_2 : public gimple_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (bb != EXIT_BLOCK_PTR);'), (6, 1, u'+  gcc_assert (bb != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: control_dependences::set_control_dependence_map_bit
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (bb != EXIT_BLOCK_PTR);'), (6, 1, u'+  gcc_assert (bb != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (bb != EXIT_BLOCK_PTR);'), (6, 1, u'+  gcc_assert (bb != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (block != ENTRY_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (block != ENTRY_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: find_pdom
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (block != ENTRY_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (block != ENTRY_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (block != ENTRY_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (block != ENTRY_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (INDEX_EDGE_PRED_BB (m_el, edge_index) != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (INDEX_EDGE_PRED_BB (m_el, edge_index)')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: control_dependences::find_control_dependence
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (INDEX_EDGE_PRED_BB (m_el, edge_index) != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (INDEX_EDGE_PRED_BB (m_el, edge_index)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (INDEX_EDGE_PRED_BB (m_el, edge_index) != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (INDEX_EDGE_PRED_BB (m_el, edge_index)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (single_succ (bb) == EXIT_BLOCK_PTR);'), (3, 1, u'+      gcc_assert (single_succ (bb) == EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: expand_gimple_basic_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (single_succ (bb) == EXIT_BLOCK_PTR);'), (3, 1, u'+      gcc_assert (single_succ (bb) == EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (single_succ (bb) == EXIT_BLOCK_PTR);'), (3, 1, u'+      gcc_assert (single_succ (bb) == EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (EDGE_COUNT (ENTRY_BLOCK_PTR->succs) == 1);'), (7, 1, u'+  gcc_assert (EDGE_COUNT (ENTRY_BLOCK_PTR_FOR_FN (cfun)->succs) == 1);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: construct_init_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (EDGE_COUNT (ENTRY_BLOCK_PTR->succs) == 1);'), (7, 1, u'+  gcc_assert (EDGE_COUNT (ENTRY_BLOCK_PTR_FOR_FN (cfun)->succs) == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (EDGE_COUNT (ENTRY_BLOCK_PTR->succs) == 1);'), (7, 1, u'+  gcc_assert (EDGE_COUNT (ENTRY_BLOCK_PTR_FOR_FN (cfun)->succs) == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: get_loop_body_in_dom_order
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: get_loop_body_in_bfs_order
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: get_loop_exit_edges
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: num_loop_branches
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (target == EXIT_BLOCK_PTR);'), (3, 1, u'+\t  gcc_assert (target == EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: try_redirect_by_replacing_jump
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (target == EXIT_BLOCK_PTR);'), (3, 1, u'+\t  gcc_assert (target == EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (target == EXIT_BLOCK_PTR);'), (3, 1, u'+\t  gcc_assert (target == EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (new_bb == EXIT_BLOCK_PTR);'), (3, 1, u'+\t      gcc_assert (new_bb == EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: patch_jump_insn
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (new_bb == EXIT_BLOCK_PTR);'), (3, 1, u'+\t      gcc_assert (new_bb == EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (new_bb == EXIT_BLOCK_PTR);'), (3, 1, u'+\t      gcc_assert (new_bb == EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (e->dest == EXIT_BLOCK_PTR'), (3, 1, u'+      gcc_assert (e->dest == EXIT_BLOCK_PTR_FOR_FN (cfun)')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: commit_one_edge_insertion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (e->dest == EXIT_BLOCK_PTR'), (3, 1, u'+      gcc_assert (e->dest == EXIT_BLOCK_PTR_FOR_FN (cfun)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (e->dest == EXIT_BLOCK_PTR'), (3, 1, u'+      gcc_assert (e->dest == EXIT_BLOCK_PTR_FOR_FN (cfun)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (single_succ_p (ENTRY_BLOCK_PTR));'), (4, 1, u'+  gcc_assert (single_succ_p (ENTRY_BLOCK_PTR_FOR_FN (cfun)));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: thread_prologue_and_epilogue_insns
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (single_succ_p (ENTRY_BLOCK_PTR));'), (4, 1, u'+  gcc_assert (single_succ_p (ENTRY_BLOCK_PTR_FOR_FN (cfun)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (single_succ_p (ENTRY_BLOCK_PTR));'), (4, 1, u'+  gcc_assert (single_succ_p (ENTRY_BLOCK_PTR_FOR_FN (cfun)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (EDGE_COUNT (ENTRY_BLOCK_PTR->succs) == 1'), (5, 1, u'+  gcc_assert (EDGE_COUNT (ENTRY_BLOCK_PTR_FOR_FN (cfun)->succs) == 1')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: hoist_code
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (EDGE_COUNT (ENTRY_BLOCK_PTR->succs) == 1'), (5, 1, u'+  gcc_assert (EDGE_COUNT (ENTRY_BLOCK_PTR_FOR_FN (cfun)->succs) == 1')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (EDGE_COUNT (ENTRY_BLOCK_PTR->succs) == 1'), (5, 1, u'+  gcc_assert (EDGE_COUNT (ENTRY_BLOCK_PTR_FOR_FN (cfun)->succs) == 1')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (bb != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (bb != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sel_bb_end
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (bb != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (bb != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (bb != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (bb != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (bb != ENTRY_BLOCK_PTR);'), (3, 1, u'+  gcc_checking_assert (bb != ENTRY_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: tree_forwarder_block_p
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (bb != ENTRY_BLOCK_PTR);'), (3, 1, u'+  gcc_checking_assert (bb != ENTRY_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (bb != ENTRY_BLOCK_PTR);'), (3, 1, u'+  gcc_checking_assert (bb != ENTRY_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: get_loop_body_in_if_conv_order
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (loop->latch != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (ENTRY_BLOCK_PTR_FOR_FUNCTION'), (3, 1, u'+  gcc_assert (ENTRY_BLOCK_PTR_FOR_FN')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: copy_cfg_body
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (ENTRY_BLOCK_PTR_FOR_FUNCTION'), (3, 1, u'+  gcc_assert (ENTRY_BLOCK_PTR_FOR_FN')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (ENTRY_BLOCK_PTR_FOR_FUNCTION'), (3, 1, u'+  gcc_assert (ENTRY_BLOCK_PTR_FOR_FN')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (ENTRY_BLOCK_PTR_FOR_FUNCTION (DECL_STRUCT_FUNCTION (fndecl)));'), (3, 1, u'+  gcc_assert (ENTRY_BLOCK_PTR_FOR_FN (DECL_STRUCT_FUNCTION (fndecl)));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: copy_body
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (ENTRY_BLOCK_PTR_FOR_FUNCTION (DECL_STRUCT_FUNCTION (fndecl)));'), (3, 1, u'+  gcc_assert (ENTRY_BLOCK_PTR_FOR_FN (DECL_STRUCT_FUNCTION (fndecl)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (ENTRY_BLOCK_PTR_FOR_FUNCTION (DECL_STRUCT_FUNCTION (fndecl)));'), (3, 1, u'+  gcc_assert (ENTRY_BLOCK_PTR_FOR_FN (DECL_STRUCT_FUNCTION (fndecl)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (bb != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (bb != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: mark_control_dependent_edges_necessary
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (bb != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (bb != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (bb != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (bb != EXIT_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (pred != ENTRY_BLOCK_PTR);'), (3, 1, u'+\t  gcc_assert (pred != ENTRY_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: compute_live_loop_exits
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (pred != ENTRY_BLOCK_PTR);'), (3, 1, u'+\t  gcc_assert (pred != ENTRY_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (pred != ENTRY_BLOCK_PTR);'), (3, 1, u'+\t  gcc_assert (pred != ENTRY_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (bb != ENTRY_BLOCK_PTR && bb != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (bb != ENTRY_BLOCK_PTR_FOR_FN (cfun)')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: cfg_blocks_add
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (bb != ENTRY_BLOCK_PTR && bb != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (bb != ENTRY_BLOCK_PTR_FOR_FN (cfun)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (bb != ENTRY_BLOCK_PTR && bb != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (bb != ENTRY_BLOCK_PTR_FOR_FN (cfun)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (src != ENTRY_BLOCK_PTR);'), (3, 1, u'+      gcc_assert (src != ENTRY_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: reachable_at_most_once
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (src != ENTRY_BLOCK_PTR);'), (3, 1, u'+      gcc_assert (src != ENTRY_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (src != ENTRY_BLOCK_PTR);'), (3, 1, u'+      gcc_assert (src != ENTRY_BLOCK_PTR_FOR_FN (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (mode == GET_MODE (rtl) || VOIDmode == GET_MODE (rtl));')]
===========================================
===========================================
Total add: 0
Total del: 6
Header: loc_descriptor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (mode == GET_MODE (rtl) || VOIDmode == GET_MODE (rtl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (mode == GET_MODE (rtl) || VOIDmode == GET_MODE (rtl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t  gcc_assert (HOST_BITS_PER_LONG*2 == HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
Total add: 1
Total del: 39
Header: real_from_string3
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t  gcc_assert (HOST_BITS_PER_LONG*2 == HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t  gcc_assert (HOST_BITS_PER_LONG*2 == HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!n_edges);'), (3, 1, u'+  gcc_assert (!n_edges_for_fn (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: clear_edges
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!n_edges);'), (3, 1, u'+  gcc_assert (!n_edges_for_fn (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!n_edges);'), (3, 1, u'+  gcc_assert (!n_edges_for_fn (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!cur || cur->gsbase.prev);'), (3, 1, u'+  gcc_assert (!cur || cur->prev);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: gsi_insert_seq_nodes_before
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!cur || cur->gsbase.prev);'), (3, 1, u'+  gcc_assert (!cur || cur->prev);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!cur || cur->gsbase.prev);'), (3, 1, u'+  gcc_assert (!cur || cur->prev);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!cur || cur->gsbase.prev);'), (3, 1, u'+  gcc_assert (!cur || cur->prev);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: gsi_insert_seq_nodes_after
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!cur || cur->gsbase.prev);'), (3, 1, u'+  gcc_assert (!cur || cur->prev);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!cur || cur->gsbase.prev);'), (3, 1, u'+  gcc_assert (!cur || cur->prev);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cur && cur->gsbase.next);'), (4, 1, u'+  gcc_assert (cur && cur->next);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: gsi_split_seq_after
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cur && cur->gsbase.next);'), (4, 1, u'+  gcc_assert (cur && cur->next);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cur && cur->gsbase.next);'), (4, 1, u'+  gcc_assert (cur && cur->next);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_checking_assert (vect_can_advance_ivs_p (loop_vinfo));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: vect_update_ivs_after_vectorizer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_checking_assert (vect_can_advance_ivs_p (loop_vinfo));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  gcc_checking_assert (vect_can_advance_ivs_p (loop_vinfo));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (first);'), (5, 1, u'+  gcc_checking_assert (queued_nodes);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: enqueue_node
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (first);'), (5, 1, u'+  gcc_checking_assert (queued_nodes);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (first);'), (5, 1, u'+  gcc_checking_assert (queued_nodes);')]
===========================================
Class:class pass_sanopt : public gimple_opt_pass class pass_sanopt : public gimple_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+      gcc_assert (POINTER_TYPE_P (type));')]
===========================================
===========================================
Total add: 57
Total del: 17
Header: ubsan_type_descriptor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+      gcc_assert (POINTER_TYPE_P (type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+      gcc_assert (POINTER_TYPE_P (type));')]
===========================================
Class:class pass_ubsan : public gimple_opt_pass class pass_ubsan : public gimple_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (TREE_CODE (type) == RECORD_TYPE);'), (14, 1, u'+      gcc_assert (TREE_CODE (otr_type) == RECORD_TYPE);')]
===========================================
===========================================
Total add: 16
Total del: 6
Header: cgraph_create_indirect_edge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (TREE_CODE (type) == RECORD_TYPE);'), (14, 1, u'+      gcc_assert (TREE_CODE (otr_type) == RECORD_TYPE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (TREE_CODE (type) == RECORD_TYPE);'), (14, 1, u'+      gcc_assert (TREE_CODE (otr_type) == RECORD_TYPE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (TREE_CODE (t) == METHOD_TYPE);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: method_class_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (TREE_CODE (t) == METHOD_TYPE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (TREE_CODE (t) == METHOD_TYPE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (!target_node->global.inlined_to);'), (6, 1, u'+      gcc_assert (symtab_real_symbol_p (target_node));')]
===========================================
===========================================
Total add: 15
Total del: 5
Header: maybe_record_node
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (!target_node->global.inlined_to);'), (6, 1, u'+      gcc_assert (symtab_real_symbol_p (target_node));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (!target_node->global.inlined_to);'), (6, 1, u'+      gcc_assert (symtab_real_symbol_p (target_node));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (inner_binfo);')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: record_binfo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (inner_binfo);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (inner_binfo);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+\t  gcc_assert (offset == 0);'), (171, 1, u'+\t\t  gcc_assert (!POINTER_TYPE_P (context->outer_type));'), (216, 1, u'+\t  gcc_assert (TREE_CODE (context->outer_type) == RECORD_TYPE);'), (251, 1, u'+\t  gcc_assert (!POINTER_TYPE_P (context->outer_type));'), (308, 1, u'+      gcc_assert (fld && TREE_CODE (TREE_TYPE (fld)) == RECORD_TYPE);'), (311, 1, u'+      gcc_assert (DECL_ARTIFICIAL (fld));'), (318, 1, u'+      gcc_assert (base_binfo);')]
===========================================
===========================================
Total add: 331
Total del: 0
Header: devirt_node_removal_hook
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+\t  gcc_assert (offset == 0);'), (171, 1, u'+\t\t  gcc_assert (!POINTER_TYPE_P (context->outer_type));'), (216, 1, u'+\t  gcc_assert (TREE_CODE (context->outer_type) == RECORD_TYPE);'), (251, 1, u'+\t  gcc_assert (!POINTER_TYPE_P (context->outer_type));'), (308, 1, u'+      gcc_assert (fld && TREE_CODE (TREE_TYPE (fld)) == RECORD_TYPE);'), (311, 1, u'+      gcc_assert (DECL_ARTIFICIAL (fld));'), (318, 1, u'+      gcc_assert (base_binfo);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+\t  gcc_assert (offset == 0);'), (171, 1, u'+\t\t  gcc_assert (!POINTER_TYPE_P (context->outer_type));'), (216, 1, u'+\t  gcc_assert (TREE_CODE (context->outer_type) == RECORD_TYPE);'), (251, 1, u'+\t  gcc_assert (!POINTER_TYPE_P (context->outer_type));'), (308, 1, u'+      gcc_assert (fld && TREE_CODE (TREE_TYPE (fld)) == RECORD_TYPE);'), (311, 1, u'+      gcc_assert (DECL_ARTIFICIAL (fld));'), (318, 1, u'+      gcc_assert (base_binfo);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (component_type);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ipa_set_jf_known_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (component_type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (component_type);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (nops == 4 || nops == 6 || nops == 8);'), (3, 1, u'+\t  gcc_assert (nops == 4 || nops == 6 || nops == 8 || nops == 9);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: emit_block_move_via_movmem
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (nops == 4 || nops == 6 || nops == 8);'), (3, 1, u'+\t  gcc_assert (nops == 4 || nops == 6 || nops == 8 || nops == 9);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (nops == 4 || nops == 6 || nops == 8);'), (3, 1, u'+\t  gcc_assert (nops == 4 || nops == 6 || nops == 8 || nops == 9);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (nops == 4 || nops == 6 || nops == 8);'), (3, 1, u'+\t  gcc_assert (nops == 4 || nops == 6 || nops == 8 || nops == 9);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: set_storage_via_setmem
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (nops == 4 || nops == 6 || nops == 8);'), (3, 1, u'+\t  gcc_assert (nops == 4 || nops == 6 || nops == 8 || nops == 9);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (nops == 4 || nops == 6 || nops == 8);'), (3, 1, u'+\t  gcc_assert (nops == 4 || nops == 6 || nops == 8 || nops == 9);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (i == n_basic_blocks);'), (3, 1, u'+      gcc_assert (i == n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: compact_blocks
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (i == n_basic_blocks);'), (3, 1, u'+      gcc_assert (i == n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (i == n_basic_blocks);'), (3, 1, u'+      gcc_assert (i == n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (pre_order_num == n_basic_blocks);'), (3, 1, u'+    gcc_assert (pre_order_num == n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: pre_and_rev_post_order_compute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (pre_order_num == n_basic_blocks);'), (3, 1, u'+    gcc_assert (pre_order_num == n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (pre_order_num == n_basic_blocks);'), (3, 1, u'+    gcc_assert (pre_order_num == n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (pre_order_num == n_basic_blocks - NUM_FIXED_BLOCKS);'), (3, 1, u'+    gcc_assert (pre_order_num')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: pre_and_rev_post_order_compute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (pre_order_num == n_basic_blocks - NUM_FIXED_BLOCKS);'), (3, 1, u'+    gcc_assert (pre_order_num')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (pre_order_num == n_basic_blocks - NUM_FIXED_BLOCKS);'), (3, 1, u'+    gcc_assert (pre_order_num')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t  gcc_assert (nthreaded_edges < n_basic_blocks - NUM_FIXED_BLOCKS);'), (3, 1, u'+\t\t  gcc_assert (nthreaded_edges')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: try_forward_edges
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t  gcc_assert (nthreaded_edges < n_basic_blocks - NUM_FIXED_BLOCKS);'), (3, 1, u'+\t\t  gcc_assert (nthreaded_edges')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t  gcc_assert (nthreaded_edges < n_basic_blocks - NUM_FIXED_BLOCKS);'), (3, 1, u'+\t\t  gcc_assert (nthreaded_edges')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (loop->num_nodes == (unsigned) n_basic_blocks);'), (3, 1, u'+      gcc_assert (loop->num_nodes == (unsigned) n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: get_loop_body
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (loop->num_nodes == (unsigned) n_basic_blocks);'), (3, 1, u'+      gcc_assert (loop->num_nodes == (unsigned) n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (loop->num_nodes == (unsigned) n_basic_blocks);'), (3, 1, u'+      gcc_assert (loop->num_nodes == (unsigned) n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (i == n_basic_blocks);'), (3, 1, u'+  gcc_assert (i == n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: df_compact_blocks
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (i == n_basic_blocks);'), (3, 1, u'+  gcc_assert (i == n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (i == n_basic_blocks);'), (3, 1, u'+  gcc_assert (i == n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (di->nodes == (unsigned int) n_basic_blocks - 1);'), (3, 1, u'+  gcc_assert (di->nodes == (unsigned int) n_basic_blocks_for_fn (cfun) - 1);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: calc_dfs_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (di->nodes == (unsigned int) n_basic_blocks - 1);'), (3, 1, u'+  gcc_assert (di->nodes == (unsigned int) n_basic_blocks_for_fn (cfun) - 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (di->nodes == (unsigned int) n_basic_blocks - 1);'), (3, 1, u'+  gcc_assert (di->nodes == (unsigned int) n_basic_blocks_for_fn (cfun) - 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  lra_assert (n_blocks_inverted == n_basic_blocks);'), (3, 1, u'+  lra_assert (n_blocks_inverted == n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: lra_create_live_ranges
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  lra_assert (n_blocks_inverted == n_basic_blocks);'), (3, 1, u'+  lra_assert (n_blocks_inverted == n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  lra_assert (n_blocks_inverted == n_basic_blocks);'), (3, 1, u'+  lra_assert (n_blocks_inverted == n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (0 < nr_regions && nr_regions <= n_basic_blocks);'), (3, 1, u'+  gcc_assert (0 < nr_regions && nr_regions <= n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: sched_rgn_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (0 < nr_regions && nr_regions <= n_basic_blocks);'), (3, 1, u'+  gcc_assert (0 < nr_regions && nr_regions <= n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (0 < nr_regions && nr_regions <= n_basic_blocks);'), (3, 1, u'+  gcc_assert (0 < nr_regions && nr_regions <= n_basic_blocks_for_fn (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (n_basic_blocks == n_blocks);'), (7, 1, u'+  gcc_assert (n_basic_blocks_for_fn (cfun) == n_blocks);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: recompute_rev_top_order
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (n_basic_blocks == n_blocks);'), (7, 1, u'+  gcc_assert (n_basic_blocks_for_fn (cfun) == n_blocks);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (n_basic_blocks == n_blocks);'), (7, 1, u'+  gcc_assert (n_basic_blocks_for_fn (cfun) == n_blocks);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (!crtl->bb_reorder_complete);')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: cfg_layout_initialize
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (!crtl->bb_reorder_complete);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (!crtl->bb_reorder_complete);')]
===========================================
Class:class pass_ipa_lto_gimple_out : public ipa_opt_pass_d class pass_ipa_lto_gimple_out : public ipa_opt_pass_d
Class:class pass_ipa_lto_finish_out : public ipa_opt_pass_d class pass_ipa_lto_finish_out : public ipa_opt_pass_d
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_assert (TREE_CODE (result) == INTEGER_CST);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: compute_object_sizes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_assert (TREE_CODE (result) == INTEGER_CST);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_assert (TREE_CODE (result) == INTEGER_CST);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (tree_low_cst (DECL_SIZE_UNIT (decl), 1) != 0);'), (3, 1, u'+      gcc_assert (tree_to_uhwi (DECL_SIZE_UNIT (decl)) != 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: machopic_select_section
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (tree_low_cst (DECL_SIZE_UNIT (decl), 1) != 0);'), (3, 1, u'+      gcc_assert (tree_to_uhwi (DECL_SIZE_UNIT (decl)) != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (tree_low_cst (DECL_SIZE_UNIT (decl), 1) != 0);'), (3, 1, u'+      gcc_assert (tree_to_uhwi (DECL_SIZE_UNIT (decl)) != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (host_integerp (size, 1));'), (3, 1, u'+  gcc_assert (tree_fits_uhwi_p (size));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: finish_bitfield_representative
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (host_integerp (size, 1));'), (3, 1, u'+  gcc_assert (tree_fits_uhwi_p (size));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (host_integerp (size, 1));'), (3, 1, u'+  gcc_assert (tree_fits_uhwi_p (size));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TYPE_SIZE (type) && host_integerp (TYPE_SIZE (type), 1));'), (3, 1, u'+  gcc_assert (TYPE_SIZE (type) && tree_fits_uhwi_p (TYPE_SIZE (type)));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: get_ubsan_type_info_for_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TYPE_SIZE (type) && host_integerp (TYPE_SIZE (type), 1));'), (3, 1, u'+  gcc_assert (TYPE_SIZE (type) && tree_fits_uhwi_p (TYPE_SIZE (type)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TYPE_SIZE (type) && host_integerp (TYPE_SIZE (type), 1));'), (3, 1, u'+  gcc_assert (TYPE_SIZE (type) && tree_fits_uhwi_p (TYPE_SIZE (type)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (host_integerp (region_nr_t, 0));'), (3, 1, u'+  gcc_assert (tree_fits_shwi_p (region_nr_t));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: expand_builtin_eh_common
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (host_integerp (region_nr_t, 0));'), (3, 1, u'+  gcc_assert (tree_fits_shwi_p (region_nr_t));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (host_integerp (region_nr_t, 0));'), (3, 1, u'+  gcc_assert (tree_fits_shwi_p (region_nr_t));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert (dim > 0);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: unpack_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert (dim > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  assert (dim > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+  gcc_checking_assert (*max_size <=')]
===========================================
===========================================
Total add: 45
Total del: 0
Header: builtin_memcpy_read_str
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+  gcc_checking_assert (*max_size <=')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(42, 1, u'+  gcc_checking_assert (*max_size <=')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (nops == 4 || nops == 6);'), (3, 1, u'+\t  gcc_assert (nops == 4 || nops == 6 || nops == 8);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: emit_block_move_via_movmem
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (nops == 4 || nops == 6);'), (3, 1, u'+\t  gcc_assert (nops == 4 || nops == 6 || nops == 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (nops == 4 || nops == 6);'), (3, 1, u'+\t  gcc_assert (nops == 4 || nops == 6 || nops == 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (nops == 4 || nops == 6);'), (3, 1, u'+\t  gcc_assert (nops == 4 || nops == 6 || nops == 8);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: set_storage_via_setmem
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (nops == 4 || nops == 6);'), (3, 1, u'+\t  gcc_assert (nops == 4 || nops == 6 || nops == 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (nops == 4 || nops == 6);'), (3, 1, u'+\t  gcc_assert (nops == 4 || nops == 6 || nops == 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\tFFI_ASSERT (0);'), (7, 1, u'+\t    FFI_ASSERT (0);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: ffi_prep_cif_machdep
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\tFFI_ASSERT (0);'), (7, 1, u'+\t    FFI_ASSERT (0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\tFFI_ASSERT (0);'), (7, 1, u'+\t    FFI_ASSERT (0);')]
===========================================
Class:class pass_arc_predicate_delay_insns : public rtl_opt_pass class pass_arc_predicate_delay_insns : public rtl_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TREE_CODE (init) == MODIFY_EXPR);'), (3, 2, u'-      gcc_assert (TREE_OPERAND (init, 0) == decl);'), (6, 1, u'+\t  gcc_assert (TREE_CODE (init) == MODIFY_EXPR);'), (7, 1, u'+\t  gcc_assert (TREE_OPERAND (init, 0) == decl);')]
===========================================
===========================================
Total add: 5
Total del: 2
Header: c_finish_omp_for
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TREE_CODE (init) == MODIFY_EXPR);'), (3, 2, u'-      gcc_assert (TREE_OPERAND (init, 0) == decl);'), (6, 1, u'+\t  gcc_assert (TREE_CODE (init) == MODIFY_EXPR);'), (7, 1, u'+\t  gcc_assert (TREE_OPERAND (init, 0) == decl);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TREE_CODE (init) == MODIFY_EXPR);'), (3, 2, u'-      gcc_assert (TREE_OPERAND (init, 0) == decl);'), (6, 1, u'+\t  gcc_assert (TREE_CODE (init) == MODIFY_EXPR);'), (7, 1, u'+\t  gcc_assert (TREE_OPERAND (init, 0) == decl);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t    gcc_assert (!POINTER_TYPE_P (TREE_TYPE (decl)));')]
===========================================
===========================================
Total add: 15
Total del: 8
Header: gimplify_omp_for
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t    gcc_assert (!POINTER_TYPE_P (TREE_TYPE (decl)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t    gcc_assert (!POINTER_TYPE_P (TREE_TYPE (decl)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (gimple_omp_for_kind (for_stmt)')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: extract_omp_for_data
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (gimple_omp_for_kind (for_stmt)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (gimple_omp_for_kind (for_stmt)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (node);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: input_function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (node);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (node);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(74, 1, u'+          go_assert(right_expr->is_addressable());')]
===========================================
===========================================
Total add: 15
Total del: 71
Header: Expression::comparison_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(74, 1, u'+          go_assert(right_expr->is_addressable());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(74, 1, u'+          go_assert(right_expr->is_addressable());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t      gcc_assert (fmode == TFmode || fmode == TDmode);'), (19, 1, u'+\t\t  gcc_assert (fmode == TFmode || fmode == TDmode);')]
===========================================
===========================================
Total add: 15
Total del: 10
Header: rs6000_function_arg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t      gcc_assert (fmode == TFmode || fmode == TDmode);'), (19, 1, u'+\t\t  gcc_assert (fmode == TFmode || fmode == TDmode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t      gcc_assert (fmode == TFmode || fmode == TDmode);'), (19, 1, u'+\t\t  gcc_assert (fmode == TFmode || fmode == TDmode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (DEFAULT_ABI == ABI_AIX);'), (3, 1, u'+      gcc_checking_assert (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: rs6000_savres_strategy
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (DEFAULT_ABI == ABI_AIX);'), (3, 1, u'+      gcc_checking_assert (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (DEFAULT_ABI == ABI_AIX);'), (3, 1, u'+      gcc_checking_assert (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (DEFAULT_ABI == ABI_AIX);'), (3, 1, u'+      gcc_assert (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: rs6000_emit_load_toc_table
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (DEFAULT_ABI == ABI_AIX);'), (3, 1, u'+      gcc_assert (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (DEFAULT_ABI == ABI_AIX);'), (3, 1, u'+      gcc_assert (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+      gcc_assert (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2);'), (24, 1, u'+      gcc_assert (!TARGET_32BIT);')]
===========================================
===========================================
Total add: 43
Total del: 0
Header: rs6000_output_function_prologue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+      gcc_assert (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2);'), (24, 1, u'+      gcc_assert (!TARGET_32BIT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+      gcc_assert (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2);'), (24, 1, u'+      gcc_assert (!TARGET_32BIT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t  gcc_assert (!TARGET_32BIT);')]
===========================================
===========================================
Total add: 2
Total del: 22
Header: output_function_profiler
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t  gcc_assert (!TARGET_32BIT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t  gcc_assert (!TARGET_32BIT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (!TARGET_32BIT);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: rs6000_trampoline_size
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (!TARGET_32BIT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (!TARGET_32BIT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t      gcc_assert (cum->fregno == FP_ARG_MAX_REG'), (81, 1, u'+\t      gcc_assert (fmode == TFmode || fmode == TDmode);')]
===========================================
===========================================
Total add: 14
Total del: 65
Header: rs6000_function_arg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t      gcc_assert (cum->fregno == FP_ARG_MAX_REG'), (81, 1, u'+\t      gcc_assert (fmode == TFmode || fmode == TDmode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t      gcc_assert (cum->fregno == FP_ARG_MAX_REG'), (81, 1, u'+\t      gcc_assert (fmode == TFmode || fmode == TDmode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-  gcc_assert (cfun);'), (34, 2, u'-  gcc_assert (cfun->machine);')]
===========================================
===========================================
Total add: 43
Total del: 51
Header: rs6000_call_indirect_aix
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-  gcc_assert (cfun);'), (34, 2, u'-  gcc_assert (cfun->machine);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 2, u'-  gcc_assert (cfun);'), (34, 2, u'-  gcc_assert (cfun->machine);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-static_assert(!std::is_copy_constructible<uim_rval>::value, "is not copyable");'), (26, 2, u'-static_assert(std::is_copy_constructible<uim_lval>::value, "is copyable");')]
===========================================
===========================================
Total add: 0
Total del: 25
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-static_assert(!std::is_copy_constructible<uim_rval>::value, "is not copyable");'), (26, 2, u'-static_assert(std::is_copy_constructible<uim_lval>::value, "is copyable");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 2, u'-static_assert(!std::is_copy_constructible<uim_rval>::value, "is not copyable");'), (26, 2, u'-static_assert(std::is_copy_constructible<uim_lval>::value, "is copyable");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-static_assert(!std::is_copy_constructible<uim_rval>::value, "is not copyable");'), (27, 2, u'-static_assert(std::is_copy_constructible<uim_lval>::value, "is copyable");')]
===========================================
===========================================
Total add: 0
Total del: 26
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-static_assert(!std::is_copy_constructible<uim_rval>::value, "is not copyable");'), (27, 2, u'-static_assert(std::is_copy_constructible<uim_lval>::value, "is copyable");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-static_assert(!std::is_copy_constructible<uim_rval>::value, "is not copyable");'), (27, 2, u'-static_assert(std::is_copy_constructible<uim_lval>::value, "is copyable");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-static_assert(!std::is_copy_constructible<uim_rval>::value, "is not copyable");'), (27, 2, u'-static_assert(std::is_copy_constructible<uim_lval>::value, "is copyable");')]
===========================================
===========================================
Total add: 0
Total del: 26
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-static_assert(!std::is_copy_constructible<uim_rval>::value, "is not copyable");'), (27, 2, u'-static_assert(std::is_copy_constructible<uim_lval>::value, "is copyable");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-static_assert(!std::is_copy_constructible<uim_rval>::value, "is not copyable");'), (27, 2, u'-static_assert(std::is_copy_constructible<uim_lval>::value, "is copyable");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-static_assert(!std::is_copy_constructible<uim_rval>::value, "is not copyable");'), (27, 2, u'-static_assert(std::is_copy_constructible<uim_lval>::value, "is copyable");')]
===========================================
===========================================
Total add: 0
Total del: 26
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-static_assert(!std::is_copy_constructible<uim_rval>::value, "is not copyable");'), (27, 2, u'-static_assert(std::is_copy_constructible<uim_lval>::value, "is copyable");')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-static_assert(!std::is_copy_constructible<uim_rval>::value, "is not copyable");'), (27, 2, u'-static_assert(std::is_copy_constructible<uim_lval>::value, "is copyable");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t  gcc_assert (wi);'), (52, 2, u'-  gcc_assert (seq2 == seq);'), (486, 2, u'-      gcc_assert (tree_ret == NULL);'), (589, 2, u'-      gcc_assert (!gimple_has_substatements (stmt));')]
===========================================
===========================================
Total add: 0
Total del: 594
Header: gimple_seq_copy
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t  gcc_assert (wi);'), (52, 2, u'-  gcc_assert (seq2 == seq);'), (486, 2, u'-      gcc_assert (tree_ret == NULL);'), (589, 2, u'-      gcc_assert (!gimple_has_substatements (stmt));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 2, u'-\t  gcc_assert (wi);'), (52, 2, u'-  gcc_assert (seq2 == seq);'), (486, 2, u'-      gcc_assert (tree_ret == NULL);'), (589, 2, u'-      gcc_assert (!gimple_has_substatements (stmt));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (elt_size % (HOST_BITS_PER_WIDE_INT/BITS_PER_UNIT) == 0);')]
===========================================
===========================================
Total add: 12
Total del: 1
Header: insert_wide_int
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (elt_size % (HOST_BITS_PER_WIDE_INT/BITS_PER_UNIT) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (elt_size % (HOST_BITS_PER_WIDE_INT/BITS_PER_UNIT) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      ira_assert (uncolorable_allocnos_num > 0);')]
===========================================
===========================================
Total add: 2
Total del: 7
Header: add_allocno_to_ordered_bucket
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      ira_assert (uncolorable_allocnos_num > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      ira_assert (uncolorable_allocnos_num > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_checking_assert (node);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: input_function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_checking_assert (node);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_checking_assert (node);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (!specs->long_p && !specs->short_p')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: finish_declspecs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (!specs->long_p && !specs->short_p')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (!specs->long_p && !specs->short_p')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+      gcc_assert (parser->implicit_template_parms);')]
===========================================
===========================================
Total add: 10
Total del: 19
Header: add_implicit_template_parms
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+      gcc_assert (parser->implicit_template_parms);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+      gcc_assert (parser->implicit_template_parms);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (current_template_parms);'), (78, 1, u'+\t  gcc_assert (current_template_parms);'), (94, 2, u'-  gcc_assert (synth_count == expect_count);')]
===========================================
===========================================
Total add: 82
Total del: 43
Header: add_implicit_template_parms
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (current_template_parms);'), (78, 1, u'+\t  gcc_assert (current_template_parms);'), (94, 2, u'-  gcc_assert (synth_count == expect_count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (current_template_parms);'), (78, 1, u'+\t  gcc_assert (current_template_parms);'), (94, 2, u'-  gcc_assert (synth_count == expect_count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+static_assert (same_type<etest0, etest1>::value, "");'), (31, 1, u'+static_assert (same_type<ectest0, ectest1>::value, "");'), (39, 1, u'+static_assert ( cefoo(1) == e::zero, "");'), (47, 1, u'+static_assert ( cecfoo(1) == eclass::one, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+\t      go_assert(p != this->vals_->end());')]
===========================================
===========================================
Total add: 45
Total del: 3
Header: Composite_literal_expression::do_traverse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+\t      go_assert(p != this->vals_->end());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(38, 1, u'+\t      go_assert(p != this->vals_->end());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(74, 1, u'+  gcc_assert (TYPE_ATOMIC (lhs_type));'), (77, 1, u'+    gcc_assert (modifycode == PLUS_EXPR || modifycode == MINUS_EXPR);')]
===========================================
===========================================
Total add: 209
Total del: 0
Header: pointer_diff
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(74, 1, u'+  gcc_assert (TYPE_ATOMIC (lhs_type));'), (77, 1, u'+    gcc_assert (modifycode == PLUS_EXPR || modifycode == MINUS_EXPR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(74, 1, u'+  gcc_assert (TYPE_ATOMIC (lhs_type));'), (77, 1, u'+    gcc_assert (modifycode == PLUS_EXPR || modifycode == MINUS_EXPR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+\t\t  gcc_assert (minv.cmp (maxv, TYPE_UNSIGNED (type)) <= 0);'), (39, 1, u'+\t  gcc_assert (minv.cmp (maxv, TYPE_UNSIGNED (type)) <= 0);')]
===========================================
===========================================
Total add: 65
Total del: 1
Header: determine_value_range
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+\t\t  gcc_assert (minv.cmp (maxv, TYPE_UNSIGNED (type)) <= 0);'), (39, 1, u'+\t  gcc_assert (minv.cmp (maxv, TYPE_UNSIGNED (type)) <= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 1, u'+\t\t  gcc_assert (minv.cmp (maxv, TYPE_UNSIGNED (type)) <= 0);'), (39, 1, u'+\t  gcc_assert (minv.cmp (maxv, TYPE_UNSIGNED (type)) <= 0);')]
===========================================
Class:  template <class H, class T = nil_> struct cons_ { struct cons_ 
Class:template <class H, class T = nil_> constexpr cons_<H, T> cons (H const &h, T const &t = nil) { return constexpr cons_<H, T> cons (H const &h, T const &t = nil) 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+      gcc_assert (base_object != NULL_TREE);')]
===========================================
===========================================
Total add: 19
Total del: 1
Header: alloc_iv
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+      gcc_assert (base_object != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+      gcc_assert (base_object != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (sched_pressure == SCHED_PRESSURE_WEIGHTED);')]
===========================================
===========================================
Total add: 16
Total del: 0
Header: rank_for_schedule
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (sched_pressure == SCHED_PRESSURE_WEIGHTED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (sched_pressure == SCHED_PRESSURE_WEIGHTED);')]
===========================================
Class: class pass_live_range_shrinkage : public rtl_opt_pass { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (*offset != NULL_TREE);')]
===========================================
===========================================
Total add: 5
Total del: 4
Header: get_bit_range
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (*offset != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (*offset != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (offset == NULL_TREE);')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: expand_assignment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (offset == NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (offset == NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+static_assert( is_same<typename add_lvalue_reference<long>::type,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+static_assert( is_same<typename add_rvalue_reference<long>::type,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert( is_same<common_type<void>::type, void>(),'), (8, 1, u'+  static_assert( is_same<common_type<const void>::type, void>(),'), (10, 1, u'+  static_assert( is_same<common_type<volatile void>::type, void>(),'), (12, 1, u'+  static_assert( is_same<common_type<const volatile void>::type, void>(),')]
===========================================
===========================================
Total add: 41
Total del: 39
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert( is_same<common_type<void>::type, void>(),'), (8, 1, u'+  static_assert( is_same<common_type<const void>::type, void>(),'), (10, 1, u'+  static_assert( is_same<common_type<volatile void>::type, void>(),'), (12, 1, u'+  static_assert( is_same<common_type<const volatile void>::type, void>(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  static_assert( is_same<common_type<void>::type, void>(),'), (8, 1, u'+  static_assert( is_same<common_type<const void>::type, void>(),'), (10, 1, u'+  static_assert( is_same<common_type<volatile void>::type, void>(),'), (12, 1, u'+  static_assert( is_same<common_type<const volatile void>::type, void>(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+static_assert( is_same<common_type<int, long, char, unsigned>::type,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+static_assert( is_same<typename conditional<true, long, void>::type,'), (31, 1, u'+static_assert( is_same<typename conditional<false, long, void>::type,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+static_assert( test<decay<bool>, decay_t<bool>>(), "decay<bool>" );'), (29, 1, u'+static_assert( test<decay<const int>, decay_t<const int>>(),'), (31, 1, u'+static_assert( test<decay<int[4]>, decay_t<int[4]>>(), "decay<int[4]>" );'), (33, 1, u'+static_assert( test<decay<fn_type>, decay_t<fn_type>>(), "decay<fn_type>" );'), (35, 1, u'+static_assert( test<decay<cfn_type>, decay_t<cfn_type>>(), "decay<cfn_type>" );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test1_type, bool>(), "decay<bool>" );')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test1_type, bool>(), "decay<bool>" );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test1_type, bool>(), "decay<bool>" );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test2_type, int>(), "decay<const int>" );'), (7, 1, u'+  static_assert( is_same<test3_type, std::remove_extent<int[4]>::type*>(),')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test2_type, int>(), "decay<const int>" );'), (7, 1, u'+  static_assert( is_same<test3_type, std::remove_extent<int[4]>::type*>(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test2_type, int>(), "decay<const int>" );'), (7, 1, u'+  static_assert( is_same<test3_type, std::remove_extent<int[4]>::type*>(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test4_type, std::add_pointer<fn_type>::type>(),')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test4_type, std::add_pointer<fn_type>::type>(),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test4_type, std::add_pointer<fn_type>::type>(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+static_assert( is_same<enable_if<true>::type, enable_if_t<true>>(),'), (28, 1, u'+static_assert( is_same<enable_if<true, X>::type, enable_if_t<true, X>>(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test2_type, const int>::value,'), (8, 1, u'+  static_assert( is_same<test21c_type, const signed int>::value,'), (13, 1, u'+  static_assert( is_same<test21v_type, volatile signed int>::value,'), (18, 1, u'+  static_assert( is_same<test21cv_type, const volatile signed int>::value,'), (23, 1, u'+  static_assert( is_same<test22_type, const signed char>::value,')]
===========================================
===========================================
Total add: 10
Total del: 5
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test2_type, const int>::value,'), (8, 1, u'+  static_assert( is_same<test21c_type, const signed int>::value,'), (13, 1, u'+  static_assert( is_same<test21v_type, volatile signed int>::value,'), (18, 1, u'+  static_assert( is_same<test21cv_type, const volatile signed int>::value,'), (23, 1, u'+  static_assert( is_same<test22_type, const signed char>::value,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test2_type, const int>::value,'), (8, 1, u'+  static_assert( is_same<test21c_type, const signed int>::value,'), (13, 1, u'+  static_assert( is_same<test21v_type, volatile signed int>::value,'), (18, 1, u'+  static_assert( is_same<test21cv_type, const volatile signed int>::value,'), (23, 1, u'+  static_assert( is_same<test22_type, const signed char>::value,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test23_type, volatile signed wchar_t>::value,')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test23_type, volatile signed wchar_t>::value,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+  static_assert( is_same<test23_type, volatile signed wchar_t>::value,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert( is_signed<test24_type>::value,'), (6, 1, u'+  static_assert( sizeof(test24_type) == sizeof(test_enum),')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: test01
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert( is_signed<test24_type>::value,'), (6, 1, u'+  static_assert( sizeof(test24_type) == sizeof(test_enum),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  static_assert( is_signed<test24_type>::value,'), (6, 1, u'+  static_assert( sizeof(test24_type) == sizeof(test_enum),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+static_assert( test<make_signed<const int>, make_signed_t<const int>>(),'), (31, 1, u'+static_assert( test<make_signed<unsigned>, make_signed_t<unsigned>>(),'), (34, 1, u'+static_assert( test<make_signed<char>, make_signed_t<char>>(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+static_assert( test<make_unsigned<const int>, make_unsigned_t<const int>>(),'), (31, 1, u'+static_assert( test<make_unsigned<unsigned>, make_unsigned_t<unsigned>>(),'), (34, 1, u'+static_assert( test<make_unsigned<char>, make_unsigned_t<char>>(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+static_assert( is_same<remove_reference<int>::type, remove_reference_t<int>>(),'), (27, 1, u'+static_assert( is_same<remove_reference<int&>::type, remove_reference_t<int&>>(),'), (29, 1, u'+static_assert( is_same<remove_reference<int&&>::type, remove_reference_t<int&&>>(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+static_assert( is_same<result_of<F1(int)>::type, result_of_t<F1(int)>>(),'), (31, 1, u'+static_assert( is_same<result_of<F2(X)>::type, result_of_t<F2(X)>>(),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 1, u'+static_assert( is_same<typename underlying_type<E>::type,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert (table == NEXT_INSN (label));')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: tablejump_p
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert (table == NEXT_INSN (label));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert (table == NEXT_INSN (label));')]
===========================================
Class:class pass_isolate_erroneous_paths : public gimple_opt_pass class pass_isolate_erroneous_paths : public gimple_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\tgcc_assert (mode == iv.mode);')]
===========================================
===========================================
Total add: 7
Total del: 3
Header: may_unswitch_on
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\tgcc_assert (mode == iv.mode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\tgcc_assert (mode == iv.mode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: main
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-    static_assert( *o == 0x1234ABCDF1E2D3C4, "" );'), (7, 1, u'+    static_assert( *o == 0x1234ABCD, "" );')]
===========================================
Class:class MallocInfo { class MallocInfo 
Class:class Decorator: private __sanitizer::AnsiColorDecorator { class Decorator: private __sanitizer::AnsiColorDecorator 
Class:class ThreadSuspender { class ThreadSuspender 
Class: class ScopedStackSpaceWithGuard { class ScopedStackSpaceWithGuard 
Class: class StopTheWorldScope { class StopTheWorldScope 
Class:class ExternalSymbolizer { class ExternalSymbolizer 
Class: class InternalSymbolizer { class InternalSymbolizer 
Class:class ExternalSymbolizer { class ExternalSymbolizer 
Class: class InternalSymbolizer { class InternalSymbolizer 
Class:class Decorator: private __sanitizer::AnsiColorDecorator { class Decorator: private __sanitizer::AnsiColorDecorator 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!optional || (optional && !copyback));')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: gfc_conv_class_to_class
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!optional || (optional && !copyback));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!optional || (optional && !copyback));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (start < 4 * MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Total add: 1
Total del: 7
Header: wi::shifted_mask
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (start < 4 * MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (start < 4 * MAX_BITSIZE_MODE_ANY_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+static_assert( integer_sequence<int>::size() == 0, "size() == 0" );'), (27, 1, u'+static_assert( integer_sequence<int, 0, 1, 2>::size() == 3, "size() == 3" );')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+static_assert( is_same<integer_sequence<int>::value_type, int>::value,'), (34, 1, u'+static_assert( is_same<integer_sequence<short>::value_type, short>::value,'), (37, 1, u'+static_assert( is_same<make_integer_sequence<int, 0>,'), (41, 1, u'+static_assert( is_same<make_integer_sequence<int, 2>,'), (45, 1, u'+static_assert( is_same<make_integer_sequence<unsigned, 0>,'), (49, 1, u'+static_assert( is_same<make_integer_sequence<unsigned, 2>,'), (53, 1, u'+static_assert( is_same<index_sequence<0, 1>,'), (57, 1, u'+static_assert( is_same<make_index_sequence<2>, index_sequence<0, 1>>::value,'), (60, 1, u'+static_assert( is_same<index_sequence_for<char, int, void, double>,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_assert (!TYPE_HAS_TRIVIAL_DESTRUCTOR (type));'), (23, 1, u'+  gcc_assert (clean != NULL_TREE);')]
===========================================
===========================================
Total add: 3
Total del: 20
Header: build_cleanup
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_assert (!TYPE_HAS_TRIVIAL_DESTRUCTOR (type));'), (23, 1, u'+  gcc_assert (clean != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_assert (!TYPE_HAS_TRIVIAL_DESTRUCTOR (type));'), (23, 1, u'+  gcc_assert (clean != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t    gcc_assert (TREE_CODE (var) == SSA_NAME);'), (15, 1, u'+\t\t\t&& assert_unreachable_fallthru_edge_p'), (39, 2, u'-\t\t  gcc_assert (TREE_CODE (var) == SSA_NAME);')]
===========================================
===========================================
Total add: 31
Total del: 7
Header: remove_range_assertions
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t    gcc_assert (TREE_CODE (var) == SSA_NAME);'), (15, 1, u'+\t\t\t&& assert_unreachable_fallthru_edge_p'), (39, 2, u'-\t\t  gcc_assert (TREE_CODE (var) == SSA_NAME);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t    gcc_assert (TREE_CODE (var) == SSA_NAME);'), (15, 1, u'+\t\t\t&& assert_unreachable_fallthru_edge_p'), (39, 2, u'-\t\t  gcc_assert (TREE_CODE (var) == SSA_NAME);')]
===========================================
Class:class PolicyA 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\t  ira_assert (ind >= 0);')]
===========================================
===========================================
Total add: 17
Total del: 1
Header: find_costs_and_classes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\t  ira_assert (ind >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\t  ira_assert (ind >= 0);')]
===========================================
Class:class pass_regmove : public rtl_opt_pass class pass_regmove : public rtl_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (pre_order_num == n_basic_blocks);'), (21, 1, u'+    gcc_assert (pre_order_num == n_basic_blocks);')]
===========================================
===========================================
Total add: 17
Total del: 2
Header: pre_and_rev_post_order_compute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (pre_order_num == n_basic_blocks);'), (21, 1, u'+    gcc_assert (pre_order_num == n_basic_blocks);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (pre_order_num == n_basic_blocks);'), (21, 1, u'+    gcc_assert (pre_order_num == n_basic_blocks);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (wi::ltu_p (cookie_size, max_size));'), (3, 1, u'+      gcc_checking_assert (wi::ltu_p (wi::to_offset (cookie_size), max_size));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: build_new_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (wi::ltu_p (cookie_size, max_size));'), (3, 1, u'+      gcc_checking_assert (wi::ltu_p (wi::to_offset (cookie_size), max_size));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (wi::ltu_p (cookie_size, max_size));'), (3, 1, u'+      gcc_checking_assert (wi::ltu_p (wi::to_offset (cookie_size), max_size));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: gimplify_expr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!alias_node->symbol.definition);'), (6, 1, u'+  gcc_assert (!alias_node->definition);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: cgraph_create_function_alias
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!alias_node->symbol.definition);'), (6, 1, u'+  gcc_assert (!alias_node->definition);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!alias_node->symbol.definition);'), (6, 1, u'+  gcc_assert (!alias_node->definition);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (node->symbol.definition);'), (3, 2, u'-      gcc_assert (!node->symbol.alias);'), (4, 1, u'+      gcc_assert (node->definition);'), (5, 1, u'+      gcc_assert (!node->alias);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: cgraph_add_thunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (node->symbol.definition);'), (3, 2, u'-      gcc_assert (!node->symbol.alias);'), (4, 1, u'+      gcc_assert (node->definition);'), (5, 1, u'+      gcc_assert (!node->alias);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (node->symbol.definition);'), (3, 2, u'-      gcc_assert (!node->symbol.alias);'), (4, 1, u'+      gcc_assert (node->definition);'), (5, 1, u'+      gcc_assert (!node->alias);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (!cnode->symbol.definition || cnode->thunk.thunk_p'), (4, 1, u'+\t  gcc_assert (!cnode->definition || cnode->thunk.thunk_p'), (7, 2, u'-\t  gcc_assert (cnode->symbol.analyzed == cnode->symbol.definition);'), (8, 1, u'+\t  gcc_assert (cnode->analyzed == cnode->definition);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: analyze_functions
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (!cnode->symbol.definition || cnode->thunk.thunk_p'), (4, 1, u'+\t  gcc_assert (!cnode->definition || cnode->thunk.thunk_p'), (7, 2, u'-\t  gcc_assert (cnode->symbol.analyzed == cnode->symbol.definition);'), (8, 1, u'+\t  gcc_assert (cnode->analyzed == cnode->definition);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (!cnode->symbol.definition || cnode->thunk.thunk_p'), (4, 1, u'+\t  gcc_assert (!cnode->definition || cnode->thunk.thunk_p'), (7, 2, u'-\t  gcc_assert (cnode->symbol.analyzed == cnode->symbol.definition);'), (8, 1, u'+\t  gcc_assert (cnode->analyzed == cnode->definition);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (!node->process || node->symbol.same_comdat_group);'), (6, 1, u'+      gcc_assert (!node->process || node->same_comdat_group);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: mark_functions_to_output
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (!node->process || node->symbol.same_comdat_group);'), (6, 1, u'+      gcc_assert (!node->process || node->same_comdat_group);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_assert (!node->process || node->symbol.same_comdat_group);'), (6, 1, u'+      gcc_assert (!node->process || node->same_comdat_group);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (node == cgraph_get_node (node->symbol.decl));'), (3, 1, u'+  gcc_assert (node == cgraph_get_node (node->decl));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: save_inline_function_body
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (node == cgraph_get_node (node->symbol.decl));'), (3, 1, u'+  gcc_assert (node == cgraph_get_node (node->decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (node == cgraph_get_node (node->symbol.decl));'), (3, 1, u'+  gcc_assert (node == cgraph_get_node (node->decl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_assert (first_clone == cgraph_get_node (first_clone->symbol.decl));'), (7, 1, u'+  gcc_assert (first_clone == cgraph_get_node (first_clone->decl));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: save_inline_function_body
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_assert (first_clone == cgraph_get_node (first_clone->symbol.decl));'), (7, 1, u'+  gcc_assert (first_clone == cgraph_get_node (first_clone->decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_assert (first_clone == cgraph_get_node (first_clone->symbol.decl));'), (7, 1, u'+  gcc_assert (first_clone == cgraph_get_node (first_clone->decl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        gcc_assert (n->symbol.decl == node->symbol.decl);'), (4, 1, u'+        gcc_assert (n->decl == node->decl);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: save_inline_function_body
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        gcc_assert (n->symbol.decl == node->symbol.decl);'), (4, 1, u'+        gcc_assert (n->decl == node->decl);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        gcc_assert (n->symbol.decl == node->symbol.decl);'), (4, 1, u'+        gcc_assert (n->decl == node->decl);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!node->symbol.alias && !node->thunk.thunk_p);'), (3, 1, u'+  gcc_assert (!node->alias && !node->thunk.thunk_p);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: preserve_function_body_p
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!node->symbol.alias && !node->thunk.thunk_p);'), (3, 1, u'+  gcc_assert (!node->alias && !node->thunk.thunk_p);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!node->symbol.alias && !node->thunk.thunk_p);'), (3, 1, u'+  gcc_assert (!node->alias && !node->thunk.thunk_p);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (node->symbol.aux == NULL);'), (3, 1, u'+  gcc_assert (node->aux == NULL);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: flatten_function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (node->symbol.aux == NULL);'), (3, 1, u'+  gcc_assert (node->aux == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (node->symbol.aux == NULL);'), (3, 1, u'+  gcc_assert (node->aux == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_assert (node->symbol.analyzed);'), (8, 1, u'+  gcc_assert (node->analyzed);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: ipa_propagate_frequency
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_assert (node->symbol.analyzed);'), (8, 1, u'+  gcc_assert (node->analyzed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_assert (node->symbol.analyzed);'), (8, 1, u'+  gcc_assert (node->analyzed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (node->symbol.definition);'), (3, 1, u'+      gcc_assert (node->definition);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ipa_prop_read_section
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (node->symbol.definition);'), (3, 1, u'+      gcc_assert (node->definition);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (node->symbol.definition);'), (3, 1, u'+      gcc_assert (node->definition);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (node->symbol.definition);'), (3, 1, u'+      gcc_assert (node->definition);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: read_replacements_section
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (node->symbol.definition);'), (3, 1, u'+      gcc_assert (node->definition);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (node->symbol.definition);'), (3, 1, u'+      gcc_assert (node->definition);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (!node->symbol.aux);'), (3, 1, u'+    gcc_assert (!node->aux);'), (5, 2, u'-    gcc_assert (!vnode->symbol.aux);'), (6, 1, u'+    gcc_assert (!vnode->aux);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: symtab_remove_unreachable_nodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (!node->symbol.aux);'), (3, 1, u'+    gcc_assert (!node->aux);'), (5, 2, u'-    gcc_assert (!vnode->symbol.aux);'), (6, 1, u'+    gcc_assert (!vnode->aux);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (!node->symbol.aux);'), (3, 1, u'+    gcc_assert (!node->aux);'), (5, 2, u'-    gcc_assert (!vnode->symbol.aux);'), (6, 1, u'+    gcc_assert (!vnode->aux);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tgcc_assert (!node->symbol.aux);'), (7, 1, u'+\tgcc_assert (!node->aux);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: symtab_remove_unreachable_nodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tgcc_assert (!node->symbol.aux);'), (7, 1, u'+\tgcc_assert (!node->aux);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\tgcc_assert (!node->symbol.aux);'), (7, 1, u'+\tgcc_assert (!node->aux);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t    gcc_assert (in_lto_p || DECL_RESULT (node->symbol.decl));'), (8, 1, u'+\t    gcc_assert (in_lto_p || DECL_RESULT (node->decl));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: symtab_remove_unreachable_nodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t    gcc_assert (in_lto_p || DECL_RESULT (node->symbol.decl));'), (8, 1, u'+\t    gcc_assert (in_lto_p || DECL_RESULT (node->decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t    gcc_assert (in_lto_p || DECL_RESULT (node->symbol.decl));'), (8, 1, u'+\t    gcc_assert (in_lto_p || DECL_RESULT (node->decl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t      gcc_assert (DECL_EXTERNAL (n->symbol.decl));'), (11, 1, u'+\t      gcc_assert (DECL_EXTERNAL (n->decl));'), (16, 2, u'-      gcc_assert ((!DECL_WEAK (node->symbol.decl)'), (21, 1, u'+      gcc_assert ((!DECL_WEAK (node->decl)')]
===========================================
===========================================
Total add: 10
Total del: 10
Header: function_and_variable_visibility
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t      gcc_assert (DECL_EXTERNAL (n->symbol.decl));'), (11, 1, u'+\t      gcc_assert (DECL_EXTERNAL (n->decl));'), (16, 2, u'-      gcc_assert ((!DECL_WEAK (node->symbol.decl)'), (21, 1, u'+      gcc_assert ((!DECL_WEAK (node->decl)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t      gcc_assert (DECL_EXTERNAL (n->symbol.decl));'), (11, 1, u'+\t      gcc_assert (DECL_EXTERNAL (n->decl));'), (16, 2, u'-      gcc_assert ((!DECL_WEAK (node->symbol.decl)'), (21, 1, u'+      gcc_assert ((!DECL_WEAK (node->decl)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t      gcc_checking_assert (DECL_COMDAT (node->symbol.decl)'), (7, 2, u'-\t      gcc_checking_assert (DECL_COMDAT_GROUP (node->symbol.decl)'), (9, 2, u'-\t      gcc_checking_assert (node->symbol.same_comdat_group);'), (10, 1, u'+\t      gcc_checking_assert (DECL_COMDAT (node->decl)'), (12, 1, u'+\t      gcc_checking_assert (DECL_COMDAT_GROUP (node->decl)'), (14, 1, u'+\t      gcc_checking_assert (node->same_comdat_group);')]
===========================================
===========================================
Total add: 8
Total del: 8
Header: function_and_variable_visibility
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t      gcc_checking_assert (DECL_COMDAT (node->symbol.decl)'), (7, 2, u'-\t      gcc_checking_assert (DECL_COMDAT_GROUP (node->symbol.decl)'), (9, 2, u'-\t      gcc_checking_assert (node->symbol.same_comdat_group);'), (10, 1, u'+\t      gcc_checking_assert (DECL_COMDAT (node->decl)'), (12, 1, u'+\t      gcc_checking_assert (DECL_COMDAT_GROUP (node->decl)'), (14, 1, u'+\t      gcc_checking_assert (node->same_comdat_group);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t      gcc_checking_assert (DECL_COMDAT (node->symbol.decl)'), (7, 2, u'-\t      gcc_checking_assert (DECL_COMDAT_GROUP (node->symbol.decl)'), (9, 2, u'-\t      gcc_checking_assert (node->symbol.same_comdat_group);'), (10, 1, u'+\t      gcc_checking_assert (DECL_COMDAT (node->decl)'), (12, 1, u'+\t      gcc_checking_assert (DECL_COMDAT_GROUP (node->decl)'), (14, 1, u'+\t      gcc_checking_assert (node->same_comdat_group);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!DECL_WEAK (vnode->symbol.decl)'), (6, 1, u'+      gcc_assert (!DECL_WEAK (vnode->decl)')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: function_and_variable_visibility
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!DECL_WEAK (vnode->symbol.decl)'), (6, 1, u'+      gcc_assert (!DECL_WEAK (vnode->decl)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!DECL_WEAK (vnode->symbol.decl)'), (6, 1, u'+      gcc_assert (!DECL_WEAK (vnode->decl)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-\t  gcc_assert (in_lto_p || whole_program || !TREE_PUBLIC (vnode->symbol.decl));'), (28, 1, u'+\t  gcc_assert (in_lto_p || whole_program || !TREE_PUBLIC (vnode->decl));')]
===========================================
===========================================
Total add: 14
Total del: 14
Header: function_and_variable_visibility
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-\t  gcc_assert (in_lto_p || whole_program || !TREE_PUBLIC (vnode->symbol.decl));'), (28, 1, u'+\t  gcc_assert (in_lto_p || whole_program || !TREE_PUBLIC (vnode->decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-\t  gcc_assert (in_lto_p || whole_program || !TREE_PUBLIC (vnode->symbol.decl));'), (28, 1, u'+\t  gcc_assert (in_lto_p || whole_program || !TREE_PUBLIC (vnode->decl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!node || !node->symbol.definition);'), (3, 1, u'+      gcc_assert (!node || !node->definition);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: java_mark_decl_local
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!node || !node->symbol.definition);'), (3, 1, u'+      gcc_assert (!node || !node->definition);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!node || !node->symbol.definition);'), (3, 1, u'+      gcc_assert (!node || !node->definition);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_checking_assert (encoder->nodes[index].node == (symtab_node)node);'), (5, 1, u'+  gcc_checking_assert (encoder->nodes[index].node == node);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: lto_set_symtab_encoder_encode_body
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_checking_assert (encoder->nodes[index].node == (symtab_node)node);'), (5, 1, u'+  gcc_checking_assert (encoder->nodes[index].node == node);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_checking_assert (encoder->nodes[index].node == (symtab_node)node);'), (5, 1, u'+  gcc_checking_assert (encoder->nodes[index].node == node);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-  gcc_assert (node->symbol.definition || !node->symbol.analyzed);'), (25, 1, u'+  gcc_assert (node->definition || !node->analyzed);')]
===========================================
===========================================
Total add: 11
Total del: 11
Header: lto_output_varpool_node
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-  gcc_assert (node->symbol.definition || !node->symbol.analyzed);'), (25, 1, u'+  gcc_assert (node->definition || !node->analyzed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 2, u'-  gcc_assert (node->symbol.definition || !node->symbol.analyzed);'), (25, 1, u'+  gcc_assert (node->definition || !node->analyzed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (node->symbol.aux || !is_a <cgraph_node> (node));'), (3, 1, u'+    gcc_assert (node->aux || !is_a <cgraph_node> (node));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: input_cgraph_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (node->symbol.aux || !is_a <cgraph_node> (node));'), (3, 1, u'+    gcc_assert (node->aux || !is_a <cgraph_node> (node));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (node->symbol.aux || !is_a <cgraph_node> (node));'), (3, 1, u'+    gcc_assert (node->aux || !is_a <cgraph_node> (node));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t  gcc_assert (!bitmap_bit_p (output, DECL_UID (node->symbol.decl)));'), (8, 1, u'+\t  gcc_assert (!bitmap_bit_p (output, DECL_UID (node->decl)));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: lto_output
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t  gcc_assert (!bitmap_bit_p (output, DECL_UID (node->symbol.decl)));'), (8, 1, u'+\t  gcc_assert (!bitmap_bit_p (output, DECL_UID (node->decl)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t  gcc_assert (!bitmap_bit_p (output, DECL_UID (node->symbol.decl)));'), (8, 1, u'+\t  gcc_assert (!bitmap_bit_p (output, DECL_UID (node->decl)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_checking_assert (vnode->symbol.definition);'), (6, 1, u'+      gcc_checking_assert (vnode->definition);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: get_symbol_class
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_checking_assert (vnode->symbol.definition);'), (6, 1, u'+      gcc_checking_assert (vnode->definition);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      gcc_checking_assert (vnode->symbol.definition);'), (6, 1, u'+      gcc_checking_assert (vnode->definition);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (!vnode->symbol.aux);'), (3, 1, u'+    gcc_assert (!vnode->aux);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: lto_balanced_map
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (!vnode->symbol.aux);'), (3, 1, u'+    gcc_assert (!vnode->aux);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_assert (!vnode->symbol.aux);'), (3, 1, u'+    gcc_assert (!vnode->aux);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (node->symbol.definition || node->symbol.weakref);'), (3, 1, u'+\t      gcc_assert (node->definition || node->weakref);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: lto_balanced_map
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (node->symbol.definition || node->symbol.weakref);'), (3, 1, u'+\t      gcc_assert (node->definition || node->weakref);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t      gcc_assert (node->symbol.definition || node->symbol.weakref);'), (3, 1, u'+\t      gcc_assert (node->definition || node->weakref);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t  gcc_assert (edge->caller->symbol.definition);'), (3, 1, u'+\t\t  gcc_assert (edge->caller->definition);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: lto_balanced_map
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t  gcc_assert (edge->caller->symbol.definition);'), (3, 1, u'+\t\t  gcc_assert (edge->caller->definition);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t  gcc_assert (edge->caller->symbol.definition);'), (3, 1, u'+\t\t  gcc_assert (edge->caller->definition);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tgcc_assert (vnode->symbol.definition);'), (6, 1, u'+\t\tgcc_assert (vnode->definition);')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: lto_balanced_map
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tgcc_assert (vnode->symbol.definition);'), (6, 1, u'+\t\tgcc_assert (vnode->definition);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tgcc_assert (vnode->symbol.definition);'), (6, 1, u'+\t\tgcc_assert (vnode->definition);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tgcc_assert (node->symbol.definition);'), (3, 1, u'+\t\tgcc_assert (node->definition);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: lto_balanced_map
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tgcc_assert (node->symbol.definition);'), (3, 1, u'+\t\tgcc_assert (node->definition);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\tgcc_assert (node->symbol.definition);'), (3, 1, u'+\t\tgcc_assert (node->definition);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  gcc_checking_assert (!TREE_PUBLIC (node->symbol.decl)'), (12, 1, u'+  gcc_checking_assert (!TREE_PUBLIC (node->decl)')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: promote_symbol
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  gcc_checking_assert (!TREE_PUBLIC (node->symbol.decl)'), (12, 1, u'+  gcc_checking_assert (!TREE_PUBLIC (node->decl)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  gcc_checking_assert (!TREE_PUBLIC (node->symbol.decl)'), (12, 1, u'+  gcc_checking_assert (!TREE_PUBLIC (node->decl)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!vnode->symbol.definition || prevailing_node->symbol.definition);'), (3, 2, u'-  gcc_assert (!vnode->symbol.analyzed || prevailing_node->symbol.analyzed);'), (4, 1, u'+  gcc_assert (!vnode->definition || prevailing_node->definition);'), (5, 1, u'+  gcc_assert (!vnode->analyzed || prevailing_node->analyzed);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: lto_varpool_replace_node
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!vnode->symbol.definition || prevailing_node->symbol.definition);'), (3, 2, u'-  gcc_assert (!vnode->symbol.analyzed || prevailing_node->symbol.analyzed);'), (4, 1, u'+  gcc_assert (!vnode->definition || prevailing_node->definition);'), (5, 1, u'+  gcc_assert (!vnode->analyzed || prevailing_node->analyzed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!vnode->symbol.definition || prevailing_node->symbol.definition);'), (3, 2, u'-  gcc_assert (!vnode->symbol.analyzed || prevailing_node->symbol.analyzed);'), (4, 1, u'+  gcc_assert (!vnode->definition || prevailing_node->definition);'), (5, 1, u'+  gcc_assert (!vnode->analyzed || prevailing_node->analyzed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t  gcc_assert (TREE_CODE (e->symbol.decl) == FUNCTION_DECL);'), (8, 1, u'+\t  gcc_assert (TREE_CODE (e->decl) == FUNCTION_DECL);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: lto_symtab_merge_decls_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t  gcc_assert (TREE_CODE (e->symbol.decl) == FUNCTION_DECL);'), (8, 1, u'+\t  gcc_assert (TREE_CODE (e->decl) == FUNCTION_DECL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t  gcc_assert (TREE_CODE (e->symbol.decl) == FUNCTION_DECL);'), (8, 1, u'+\t  gcc_assert (TREE_CODE (e->decl) == FUNCTION_DECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (TREE_CODE (e->symbol.decl) == VAR_DECL);'), (4, 1, u'+\t  gcc_assert (TREE_CODE (e->decl) == VAR_DECL);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: lto_symtab_merge_decls_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (TREE_CODE (e->symbol.decl) == VAR_DECL);'), (4, 1, u'+\t  gcc_assert (TREE_CODE (e->decl) == VAR_DECL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (TREE_CODE (e->symbol.decl) == VAR_DECL);'), (4, 1, u'+\t  gcc_assert (TREE_CODE (e->decl) == VAR_DECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t      gcc_assert (node->symbol.weakref);'), (8, 1, u'+\t      gcc_assert (node->weakref);')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: lto_symtab_merge_symbols
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t      gcc_assert (node->symbol.weakref);'), (8, 1, u'+\t      gcc_assert (node->weakref);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t      gcc_assert (node->symbol.weakref);'), (8, 1, u'+\t      gcc_assert (node->weakref);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_checking_assert (!node->symbol.previous_sharing_asm_name'), (7, 1, u'+  gcc_checking_assert (!node->previous_sharing_asm_name')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: insert_to_assembler_name_hash
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_checking_assert (!node->symbol.previous_sharing_asm_name'), (7, 1, u'+  gcc_checking_assert (!node->previous_sharing_asm_name')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_checking_assert (!node->symbol.previous_sharing_asm_name'), (7, 1, u'+  gcc_checking_assert (!node->previous_sharing_asm_name')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (DECL_ONE_ONLY (old_node->symbol.decl));'), (3, 2, u'-  gcc_assert (!new_node->symbol.same_comdat_group);'), (4, 1, u'+  gcc_assert (DECL_ONE_ONLY (old_node->decl));'), (5, 1, u'+  gcc_assert (!new_node->same_comdat_group);')]
===========================================
===========================================
Total add: 6
Total del: 6
Header: symtab_add_to_same_comdat_group
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (DECL_ONE_ONLY (old_node->symbol.decl));'), (3, 2, u'-  gcc_assert (!new_node->symbol.same_comdat_group);'), (4, 1, u'+  gcc_assert (DECL_ONE_ONLY (old_node->decl));'), (5, 1, u'+  gcc_assert (!new_node->same_comdat_group);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (DECL_ONE_ONLY (old_node->symbol.decl));'), (3, 2, u'-  gcc_assert (!new_node->symbol.same_comdat_group);'), (4, 1, u'+  gcc_assert (DECL_ONE_ONLY (old_node->decl));'), (5, 1, u'+  gcc_assert (!new_node->same_comdat_group);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!node->symbol.analyzed'), (4, 1, u'+  gcc_assert (!node->analyzed')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: symtab_resolve_alias
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!node->symbol.analyzed'), (4, 1, u'+  gcc_assert (!node->analyzed')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!node->symbol.analyzed'), (4, 1, u'+  gcc_assert (!node->analyzed')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!node->symbol.alias && !node->symbol.weakref);'), (3, 1, u'+  gcc_assert (!node->alias && !node->weakref);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: symtab_nonoverwritable_alias
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!node->symbol.alias && !node->symbol.weakref);'), (3, 1, u'+  gcc_assert (!node->alias && !node->weakref);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!node->symbol.alias && !node->symbol.weakref);'), (3, 1, u'+  gcc_assert (!node->alias && !node->weakref);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tgcc_checking_assert (TREE_STATIC (var->symbol.decl)'), (7, 1, u'+\tgcc_checking_assert (TREE_STATIC (var->decl)')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: ipa_lower_emutls
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tgcc_checking_assert (TREE_STATIC (var->symbol.decl)'), (7, 1, u'+\tgcc_checking_assert (TREE_STATIC (var->decl)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\tgcc_checking_assert (TREE_STATIC (var->symbol.decl)'), (7, 1, u'+\tgcc_checking_assert (TREE_STATIC (var->decl)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t  gcc_assert (!dest->symbol.definition'), (6, 1, u'+\t\t  gcc_assert (!dest->definition')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: copy_bb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t  gcc_assert (!dest->symbol.definition'), (6, 1, u'+\t\t  gcc_assert (!dest->definition')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t\t  gcc_assert (!dest->symbol.definition'), (6, 1, u'+\t\t  gcc_assert (!dest->definition')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (id.dst_node->symbol.definition);'), (3, 1, u'+  gcc_assert (id.dst_node->definition);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: optimize_inline_calls
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (id.dst_node->symbol.definition);'), (3, 1, u'+  gcc_assert (id.dst_node->definition);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (id.dst_node->symbol.definition);'), (3, 1, u'+  gcc_assert (id.dst_node->definition);')]
===========================================
Class:class pass_mudflap_1 : public gimple_opt_pass class pass_mudflap_1 : public gimple_opt_pass
Class:class pass_mudflap_2 : public gimple_opt_pass class pass_mudflap_2 : public gimple_opt_pass
Class:class pass_mudflap_1 : public gimple_opt_pass class pass_mudflap_1 : public gimple_opt_pass
Class:class pass_mudflap_2 : public gimple_opt_pass class pass_mudflap_2 : public gimple_opt_pass
Class: class foo { 
Class:class foo { class foo 
Class:class foo { class foo 
Class: class bar: public foo { class bar: public foo 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t  gcc_assert (cl != NO_REGS);'), (48, 1, u'+\t  gcc_assert (cl != NO_REGS);')]
===========================================
===========================================
Total add: 62
Total del: 0
Header: rs6000_emit_move
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t  gcc_assert (cl != NO_REGS);'), (48, 1, u'+\t  gcc_assert (cl != NO_REGS);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t  gcc_assert (cl != NO_REGS);'), (48, 1, u'+\t  gcc_assert (cl != NO_REGS);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(144, 1, u'+      gcc_assert (partitions.length () == (unsigned)num_sccs);')]
===========================================
===========================================
Total add: 96
Total del: 38
Header: distribute_loop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(144, 1, u'+      gcc_assert (partitions.length () == (unsigned)num_sccs);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(144, 1, u'+      gcc_assert (partitions.length () == (unsigned)num_sccs);')]
===========================================
Class:   class A { 
Class: class B { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (parts.base == NULL_RTX || parts.index == NULL_RTX);'), (17, 1, u'+      gcc_assert (parts.index == NULL_RTX);')]
===========================================
===========================================
Total add: 19
Total del: 0
Header: ix86_print_operand_address
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (parts.base == NULL_RTX || parts.index == NULL_RTX);'), (17, 1, u'+      gcc_assert (parts.index == NULL_RTX);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (parts.base == NULL_RTX || parts.index == NULL_RTX);'), (17, 1, u'+      gcc_assert (parts.index == NULL_RTX);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TREE_INT_CST_NUNITS (expr));'), (4, 1, u'+      gcc_checking_assert (TREE_INT_CST_NUNITS (expr));')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: streamer_write_tree_header
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TREE_INT_CST_NUNITS (expr));'), (4, 1, u'+      gcc_checking_assert (TREE_INT_CST_NUNITS (expr));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TREE_INT_CST_NUNITS (expr));'), (4, 1, u'+      gcc_checking_assert (TREE_INT_CST_NUNITS (expr));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t\tgcc_assert (tmp.elt (l - 2) < 0);'), (9, 2, u'-\t\tgcc_assert (tmp.elt (l - 2) >= 0);')]
===========================================
===========================================
Total add: 1
Total del: 14
Header: force_fit_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t\tgcc_assert (tmp.elt (l - 2) < 0);'), (9, 2, u'-\t\tgcc_assert (tmp.elt (l - 2) >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t\tgcc_assert (tmp.elt (l - 2) < 0);'), (9, 2, u'-\t\tgcc_assert (tmp.elt (l - 2) >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-\t  gcc_assert (TREE_TYPE (t) == type);'), (32, 2, u'-\t  gcc_assert (TREE_INT_CST_NUNITS (t) == (int)len);'), (37, 1, u'+\t    gcc_assert (TREE_TYPE (t) == type'), (44, 2, u'-\t      gcc_assert (sext_hwi (TREE_INT_CST_ELT (t, len), small_prec)'), (51, 2, u'-\t    gcc_assert (TREE_INT_CST_ELT (t, i) == cst.elt (i));')]
===========================================
===========================================
Total add: 25
Total del: 20
Header: wide_int_to_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-\t  gcc_assert (TREE_TYPE (t) == type);'), (32, 2, u'-\t  gcc_assert (TREE_INT_CST_NUNITS (t) == (int)len);'), (37, 1, u'+\t    gcc_assert (TREE_TYPE (t) == type'), (44, 2, u'-\t      gcc_assert (sext_hwi (TREE_INT_CST_ELT (t, len), small_prec)'), (51, 2, u'-\t    gcc_assert (TREE_INT_CST_ELT (t, i) == cst.elt (i));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 2, u'-\t  gcc_assert (TREE_TYPE (t) == type);'), (32, 2, u'-\t  gcc_assert (TREE_INT_CST_NUNITS (t) == (int)len);'), (37, 1, u'+\t    gcc_assert (TREE_TYPE (t) == type'), (44, 2, u'-\t      gcc_assert (sext_hwi (TREE_INT_CST_ELT (t, len), small_prec)'), (51, 2, u'-\t    gcc_assert (TREE_INT_CST_ELT (t, i) == cst.elt (i));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_INT_CST_NUNITS (x) <= 2'), (4, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) == 2);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: widest_int_cst_value
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_INT_CST_NUNITS (x) <= 2'), (4, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_INT_CST_NUNITS (x) <= 2'), (4, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_INT_CST_NUNITS (x) == 1'), (4, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) == 1);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: widest_int_cst_value
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_INT_CST_NUNITS (x) == 1'), (4, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_INT_CST_NUNITS (x) == 1'), (4, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_checking_assert (i_bound == wi::extend (bound));'), (3, 1, u'+    gcc_checking_assert (i_bound == wi::to_widest (bound));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: record_estimate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_checking_assert (i_bound == wi::extend (bound));'), (3, 1, u'+    gcc_checking_assert (i_bound == wi::to_widest (bound));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_checking_assert (i_bound == wi::extend (bound));'), (3, 1, u'+    gcc_checking_assert (i_bound == wi::to_widest (bound));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t    gcc_assert (!IN_RANGE (statep->state, 1, 2));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: arc_ifcvt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t    gcc_assert (!IN_RANGE (statep->state, 1, 2));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t    gcc_assert (!IN_RANGE (statep->state, 1, 2));')]
===========================================
Class:   class ert_RefCounter { class ert_RefCounter 
Class: class ebs_Object : virtual public ert_RefCounter { class ebs_Object : virtual public ert_RefCounter 
Class: class dpr_App : public ebs_Object { class dpr_App : public ebs_Object 
Class:class dpr_Job : public ebs_Object 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+      gcc_assert (REG_P (lhs));'), (15, 1, u'+      gcc_assert (reg_class_subset_p (REGNO_REG_CLASS (REGNO (lhs)),')]
===========================================
===========================================
Total add: 18
Total del: 0
Header: aarch64_preferred_reload_class
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+      gcc_assert (REG_P (lhs));'), (15, 1, u'+      gcc_assert (reg_class_subset_p (REGNO_REG_CLASS (REGNO (lhs)),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+      gcc_assert (REG_P (lhs));'), (15, 1, u'+      gcc_assert (reg_class_subset_p (REGNO_REG_CLASS (REGNO (lhs)),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (MAYBE_CLASS_TYPE_P (type));')]
===========================================
===========================================
Total add: 10
Total del: 2
Header: build_delete
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (MAYBE_CLASS_TYPE_P (type));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (MAYBE_CLASS_TYPE_P (type));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+      gcc_assert (gimple_uid (s1) && gimple_uid (s2));')]
===========================================
===========================================
Total add: 86
Total del: 4
Header: zero_one_operation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+      gcc_assert (gimple_uid (s1) && gimple_uid (s2));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 1, u'+      gcc_assert (gimple_uid (s1) && gimple_uid (s2));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+\t\t  gcc_assert (bb == last_bb);'), (62, 1, u'+\t\t      gcc_assert (bb == last_bb);')]
===========================================
===========================================
Total add: 88
Total del: 1
Header: maybe_optimize_range_tests
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+\t\t  gcc_assert (bb == last_bb);'), (62, 1, u'+\t\t      gcc_assert (bb == last_bb);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(40, 1, u'+\t\t  gcc_assert (bb == last_bb);'), (62, 1, u'+\t\t      gcc_assert (bb == last_bb);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t      gcc_checking_assert (find_insert_point (stmt, oe1->op, oe2->op)')]
===========================================
===========================================
Total add: 23
Total del: 3
Header: rewrite_expr_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t      gcc_checking_assert (find_insert_point (stmt, oe1->op, oe2->op)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t      gcc_checking_assert (find_insert_point (stmt, oe1->op, oe2->op)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+\t  gcc_checking_assert (find_insert_point (stmt, new_rhs1, oe->op)')]
===========================================
===========================================
Total add: 31
Total del: 2
Header: rewrite_expr_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+\t  gcc_checking_assert (find_insert_point (stmt, new_rhs1, oe->op)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+\t  gcc_checking_assert (find_insert_point (stmt, new_rhs1, oe->op)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_checking_assert (i_bound == bound);'), (3, 1, u'+    gcc_checking_assert (i_bound == wi::extend (bound));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: record_estimate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_checking_assert (i_bound == bound);'), (3, 1, u'+    gcc_checking_assert (i_bound == wi::extend (bound));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_checking_assert (i_bound == bound);'), (3, 1, u'+    gcc_checking_assert (i_bound == wi::extend (bound));')]
===========================================
Class:   class [[deprecated]] A  { 
Class: class [[deprecated( } { 
Class:   class [[deprecated]] A { 
Class: class [[deprecated()]] B { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+  gcc_assert (GET_MODE_SIZE (mode) <= size);'), (148, 1, u'+  gcc_assert (GET_MODE_SIZE (mode) <= size);'), (205, 1, u'+    gcc_assert (*min_size >= (unsigned HOST_WIDE_INT)size'), (266, 1, u'+      gcc_assert (desired_align <= size);'), (298, 1, u'+      gcc_assert (prolog_size == 0);')]
===========================================
===========================================
Total add: 309
Total del: 0
Header: expand_set_or_movmem_prologue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+  gcc_assert (GET_MODE_SIZE (mode) <= size);'), (148, 1, u'+  gcc_assert (GET_MODE_SIZE (mode) <= size);'), (205, 1, u'+    gcc_assert (*min_size >= (unsigned HOST_WIDE_INT)size'), (266, 1, u'+      gcc_assert (desired_align <= size);'), (298, 1, u'+      gcc_assert (prolog_size == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+  gcc_assert (GET_MODE_SIZE (mode) <= size);'), (148, 1, u'+  gcc_assert (GET_MODE_SIZE (mode) <= size);'), (205, 1, u'+    gcc_assert (*min_size >= (unsigned HOST_WIDE_INT)size'), (266, 1, u'+      gcc_assert (desired_align <= size);'), (298, 1, u'+      gcc_assert (prolog_size == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TARGET_INLINE_ALL_STRINGOPS || !rep_prefix_usable);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: decide_alg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TARGET_INLINE_ALL_STRINGOPS || !rep_prefix_usable);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TARGET_INLINE_ALL_STRINGOPS || !rep_prefix_usable);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+\t  gcc_assert (size_needed > 1);')]
===========================================
===========================================
Total add: 38
Total del: 1
Header: ix86_expand_set_or_movmem
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+\t  gcc_assert (size_needed > 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+\t  gcc_assert (size_needed > 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (max_size >= (unsigned HOST_WIDE_INT)epilogue_size_needed);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: ix86_expand_set_or_movmem
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (max_size >= (unsigned HOST_WIDE_INT)epilogue_size_needed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (max_size >= (unsigned HOST_WIDE_INT)epilogue_size_needed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (mode == CCmode || mode == CCCmode);')]
===========================================
===========================================
Total add: 6
Total del: 2
Header: put_condition_code
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (mode == CCmode || mode == CCCmode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (mode == CCmode || mode == CCCmode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (mode == CCmode || mode == CCCmode);')]
===========================================
===========================================
Total add: 6
Total del: 3
Header: put_condition_code
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (mode == CCmode || mode == CCCmode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (mode == CCmode || mode == CCCmode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+_Static_assert ((int)(1.0 + 1.0), "non-constant-expression");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-_Static_assert ((int)(1.0 + 1.0), "non-constant-expression");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (max_count >= edge->count);')]
===========================================
===========================================
Total add: 0
Total del: 3
Header: edge_badness
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (max_count >= edge->count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (max_count >= edge->count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+  gcc_assert (code != CODE_FOR_nothing && promoted_val != NULL_RTX);'), (33, 1, u'+  gcc_assert (size_to_move % piece_size == 0);')]
===========================================
===========================================
Total add: 53
Total del: 0
Header: expand_movmem_epilogue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+  gcc_assert (code != CODE_FOR_nothing && promoted_val != NULL_RTX);'), (33, 1, u'+  gcc_assert (size_to_move % piece_size == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+  gcc_assert (code != CODE_FOR_nothing && promoted_val != NULL_RTX);'), (33, 1, u'+  gcc_assert (size_to_move % piece_size == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+      gcc_assert ((max_size & (max_size - 1)) == 0);')]
===========================================
===========================================
Total add: 12
Total del: 44
Header: expand_setmem_epilogue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+      gcc_assert ((max_size & (max_size - 1)) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+      gcc_assert ((max_size & (max_size - 1)) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+      gcc_assert (srcp != NULL);')]
===========================================
===========================================
Total add: 17
Total del: 11
Header: expand_movmem_prologue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+      gcc_assert (srcp != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(31, 1, u'+      gcc_assert (srcp != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 2, u'-  gcc_assert (desired_alignment <= 8);')]
===========================================
===========================================
Total add: 22
Total del: 91
Header: expand_constant_movmem_prologue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 2, u'-  gcc_assert (desired_alignment <= 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(82, 2, u'-  gcc_assert (desired_alignment <= 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\t  gcc_assert (val_exp == const0_rtx);')]
===========================================
===========================================
Total add: 22
Total del: 3
Header: ix86_expand_movmem
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\t  gcc_assert (val_exp == const0_rtx);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+\t  gcc_assert (val_exp == const0_rtx);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-  gcc_assert (alg != no_stringop);'), (169, 2, u'-  gcc_assert (desired_align >= 1 && align >= 1);'), (201, 2, u'-\t  gcc_assert (size_needed > 1);')]
===========================================
===========================================
Total add: 3
Total del: 293
Header: ix86_expand_setmem
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-  gcc_assert (alg != no_stringop);'), (169, 2, u'-  gcc_assert (desired_align >= 1 && align >= 1);'), (201, 2, u'-\t  gcc_assert (size_needed > 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-  gcc_assert (alg != no_stringop);'), (169, 2, u'-  gcc_assert (desired_align >= 1 && align >= 1);'), (201, 2, u'-\t  gcc_assert (size_needed > 1);')]
===========================================
Class:class A { 
Class:class A { 
Class:class A { 
Class:class A { 
Class:class pass_cleanup_cfg_post_optimizing : public gimple_opt_pass class pass_cleanup_cfg_post_optimizing : public gimple_opt_pass
Class:class pass_cleanup_cfg_post_optimizing : public gimple_opt_pass class pass_cleanup_cfg_post_optimizing : public gimple_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (e2);')]
===========================================
===========================================
Total add: 12
Total del: 0
Header: replace_block_by
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (e2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (e2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert ((int)VECTOR_NONE == 0);'), (17, 1, u'+  gcc_assert ((int)CODE_FOR_nothing == 0);'), (20, 1, u'+  gcc_assert ((int)NO_REGS == 0);')]
===========================================
===========================================
Total add: 8
Total del: 11
Header: rs6000_init_hard_regno_mode_ok
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert ((int)VECTOR_NONE == 0);'), (17, 1, u'+  gcc_assert ((int)CODE_FOR_nothing == 0);'), (20, 1, u'+  gcc_assert ((int)NO_REGS == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert ((int)VECTOR_NONE == 0);'), (17, 1, u'+  gcc_assert ((int)CODE_FOR_nothing == 0);'), (20, 1, u'+  gcc_assert ((int)NO_REGS == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(75, 2, u'-\t\t\tgcc_assert (i->type == GIMPLE_OMP_SECTION);')]
===========================================
===========================================
Total add: 2
Total del: 91
Header: make_edges
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(75, 2, u'-\t\t\tgcc_assert (i->type == GIMPLE_OMP_SECTION);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(75, 2, u'-\t\t\tgcc_assert (i->type == GIMPLE_OMP_SECTION);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+      gcc_assert (TREE_CODE (parm_max) == MINUS_EXPR);')]
===========================================
===========================================
Total add: 66
Total del: 0
Header: unify_pack_expansion
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+      gcc_assert (TREE_CODE (parm_max) == MINUS_EXPR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+      gcc_assert (TREE_CODE (parm_max) == MINUS_EXPR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t      gcc_assert (TREE_CODE (parm_max) == MINUS_EXPR);')]
===========================================
===========================================
Total add: 2
Total del: 57
Header: unify
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t      gcc_assert (TREE_CODE (parm_max) == MINUS_EXPR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t      gcc_assert (TREE_CODE (parm_max) == MINUS_EXPR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-  gcc_assert (GET_CODE (operands[1]) != CONST_DOUBLE')]
===========================================
===========================================
Total add: 3
Total del: 12
Header: rs6000_emit_move
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-  gcc_assert (GET_CODE (operands[1]) != CONST_DOUBLE')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 2, u'-  gcc_assert (GET_CODE (operands[1]) != CONST_DOUBLE')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 2, u'-\t  gcc_checking_assert (!integer_zerop (lowxor));')]
===========================================
===========================================
Total add: 5
Total del: 69
Header: optimize_range_tests
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 2, u'-\t  gcc_checking_assert (!integer_zerop (lowxor));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 2, u'-\t  gcc_checking_assert (!integer_zerop (lowxor));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (TREE_INT_CST_NUNITS (t) == len);'), (3, 1, u'+\t  gcc_assert (TREE_INT_CST_NUNITS (t) == (int)len);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: wide_int_to_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (TREE_INT_CST_NUNITS (t) == len);'), (3, 1, u'+\t  gcc_assert (TREE_INT_CST_NUNITS (t) == (int)len);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (TREE_INT_CST_NUNITS (t) == len);'), (3, 1, u'+\t  gcc_assert (TREE_INT_CST_NUNITS (t) == (int)len);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_INT_CST_NUNITS (x) <= 2);'), (3, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) <= 2')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: widest_int_cst_value
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_INT_CST_NUNITS (x) <= 2);'), (3, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) <= 2')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_INT_CST_NUNITS (x) <= 2);'), (3, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) <= 2')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_INT_CST_NUNITS (x) == 1);'), (3, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) == 1')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: widest_int_cst_value
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_INT_CST_NUNITS (x) == 1);'), (3, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) == 1')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_INT_CST_NUNITS (x) == 1);'), (3, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) == 1')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (slot != NULL);')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: gimple_canonical_type_hash
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (slot != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (slot != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TYPE_P (t));'), (6, 1, u'+  gcc_checking_assert (TYPE_P (t) && !TYPE_CANONICAL (t));'), (17, 1, u'+      gcc_checking_assert (new_type != t);')]
===========================================
===========================================
Total add: 5
Total del: 10
Header: gimple_register_canonical_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TYPE_P (t));'), (6, 1, u'+  gcc_checking_assert (TYPE_P (t) && !TYPE_CANONICAL (t));'), (17, 1, u'+      gcc_checking_assert (new_type != t);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TYPE_P (t));'), (6, 1, u'+  gcc_checking_assert (TYPE_P (t) && !TYPE_CANONICAL (t));'), (17, 1, u'+      gcc_checking_assert (new_type != t);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (!existed_p);')]
===========================================
===========================================
Total add: 24
Total del: 1
Header: gimple_register_canonical_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (!existed_p);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (!existed_p);')]
===========================================
Class:    class sh_treg_combine : public rtl_opt_pass { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        gcc_assert (TARGET_FMA || TARGET_FMA4);'), (3, 1, u'+        gcc_assert (TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: ix86_rtx_costs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        gcc_assert (TARGET_FMA || TARGET_FMA4);'), (3, 1, u'+        gcc_assert (TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-        gcc_assert (TARGET_FMA || TARGET_FMA4);'), (3, 1, u'+        gcc_assert (TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(116, 1, u'+\t      gcc_assert (code == OMP_DISTRIBUTE);'), (123, 1, u'+\t      gcc_assert (code == OMP_SIMD);'), (129, 1, u'+\t      gcc_assert (code == OMP_SIMD);'), (145, 1, u'+\t  gcc_assert (code == OMP_SIMD);')]
===========================================
===========================================
Total add: 211
Total del: 14
Header: c_split_parallel_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(116, 1, u'+\t      gcc_assert (code == OMP_DISTRIBUTE);'), (123, 1, u'+\t      gcc_assert (code == OMP_SIMD);'), (129, 1, u'+\t      gcc_assert (code == OMP_SIMD);'), (145, 1, u'+\t  gcc_assert (code == OMP_SIMD);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(116, 1, u'+\t      gcc_assert (code == OMP_DISTRIBUTE);'), (123, 1, u'+\t      gcc_assert (code == OMP_SIMD);'), (129, 1, u'+\t      gcc_assert (code == OMP_SIMD);'), (145, 1, u'+\t  gcc_assert (code == OMP_SIMD);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(461, 1, u'+  gcc_assert (parser->tokens == &parser->tokens_buf[0]);'), (471, 1, u'+      gcc_assert (token->type == CPP_NAME'), (812, 1, u'+      gcc_assert (parser->tokens == &parser->tokens_buf[0]);')]
===========================================
===========================================
Total add: 742
Total del: 228
Header: c_parser_omp_for
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(461, 1, u'+  gcc_assert (parser->tokens == &parser->tokens_buf[0]);'), (471, 1, u'+      gcc_assert (token->type == CPP_NAME'), (812, 1, u'+      gcc_assert (parser->tokens == &parser->tokens_buf[0]);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(461, 1, u'+  gcc_assert (parser->tokens == &parser->tokens_buf[0]);'), (471, 1, u'+      gcc_assert (token->type == CPP_NAME'), (812, 1, u'+      gcc_assert (parser->tokens == &parser->tokens_buf[0]);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tgcc_assert (!is_invisiref_parm (OMP_CLAUSE_DECL (stmt)));')]
===========================================
===========================================
Total add: 13
Total del: 1
Header: cp_genericize_r
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tgcc_assert (!is_invisiref_parm (OMP_CLAUSE_DECL (stmt)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tgcc_assert (!is_invisiref_parm (OMP_CLAUSE_DECL (stmt)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (DECL_OMP_DECLARE_REDUCTION_P (newdecl));')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: duplicate_decls
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (DECL_OMP_DECLARE_REDUCTION_P (newdecl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  gcc_assert (DECL_OMP_DECLARE_REDUCTION_P (newdecl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\tgcc_assert (identifier_p (placeholder));')]
===========================================
===========================================
Total add: 30
Total del: 0
Header: tsubst_omp_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\tgcc_assert (identifier_p (placeholder));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\t\tgcc_assert (identifier_p (placeholder));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert ((flags & GOVD_LOCAL) == 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: omp_add_variable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert ((flags & GOVD_LOCAL) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-      gcc_assert ((flags & GOVD_LOCAL) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t  gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (13, 1, u'+\t  gcc_assert (DECL_P (decl2));')]
===========================================
===========================================
Total add: 30
Total del: 0
Header: gimplify_adjust_omp_clauses_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t  gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (13, 1, u'+\t  gcc_assert (DECL_P (decl2));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t  gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (13, 1, u'+\t  gcc_assert (DECL_P (decl2));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 1, u'+\t      gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (58, 1, u'+\t      gcc_assert (DECL_P (decl2));'), (88, 1, u'+\t      gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (90, 1, u'+\t      gcc_assert (DECL_P (decl2));')]
===========================================
===========================================
Total add: 101
Total del: 0
Header: gimplify_adjust_omp_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 1, u'+\t      gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (58, 1, u'+\t      gcc_assert (DECL_P (decl2));'), (88, 1, u'+\t      gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (90, 1, u'+\t      gcc_assert (DECL_P (decl2));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(56, 1, u'+\t      gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (58, 1, u'+\t      gcc_assert (DECL_P (decl2));'), (88, 1, u'+\t      gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (90, 1, u'+\t      gcc_assert (DECL_P (decl2));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (for_stmt != NULL_TREE);')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: gimplify_omp_for
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (for_stmt != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (for_stmt != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\tgcc_assert (TREE_CODE (orig_for_stmt) == OMP_SIMD);'), (18, 1, u'+\tgcc_assert (TREE_CODE (orig_for_stmt) == OMP_FOR);')]
===========================================
===========================================
Total add: 15
Total del: 1
Header: gimplify_omp_for
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\tgcc_assert (TREE_CODE (orig_for_stmt) == OMP_SIMD);'), (18, 1, u'+\tgcc_assert (TREE_CODE (orig_for_stmt) == OMP_FOR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u'+\tgcc_assert (TREE_CODE (orig_for_stmt) == OMP_SIMD);'), (18, 1, u'+\tgcc_assert (TREE_CODE (orig_for_stmt) == OMP_FOR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (gimplify_omp_ctxp == NULL);')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: gimplify_body
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (gimplify_omp_ctxp == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (gimplify_omp_ctxp == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tgcc_assert (!distribute);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: extract_omp_for_data
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tgcc_assert (!distribute);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\tgcc_assert (!distribute);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tgcc_assert (distribute);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: extract_omp_for_data
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tgcc_assert (distribute);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tgcc_assert (distribute);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t  gcc_assert (innerc);'), (17, 1, u'+\t  gcc_assert (innerc);')]
===========================================
===========================================
Total add: 16
Total del: 0
Header: get_ws_args_for
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t  gcc_assert (innerc);'), (17, 1, u'+\t  gcc_assert (innerc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t  gcc_assert (innerc);'), (17, 1, u'+\t  gcc_assert (innerc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (TREE_CODE (type) == ARRAY_TYPE);')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: install_var_field
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (TREE_CODE (type) == ARRAY_TYPE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (TREE_CODE (type) == ARRAY_TYPE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (is_parallel_ctx (ctx));')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: scan_sharing_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (is_parallel_ctx (ctx));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t  gcc_assert (is_parallel_ctx (ctx));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 1, u'+\t\t  gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (35, 1, u'+\t\t  gcc_assert (DECL_P (decl2));'), (70, 1, u'+\t\t  gcc_assert (!splay_tree_lookup (ctx->field_map,')]
===========================================
===========================================
Total add: 81
Total del: 0
Header: scan_sharing_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 1, u'+\t\t  gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (35, 1, u'+\t\t  gcc_assert (DECL_P (decl2));'), (70, 1, u'+\t\t  gcc_assert (!splay_tree_lookup (ctx->field_map,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 1, u'+\t\t  gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (35, 1, u'+\t\t  gcc_assert (DECL_P (decl2));'), (70, 1, u'+\t\t  gcc_assert (!splay_tree_lookup (ctx->field_map,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+\t\t  gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (27, 1, u'+\t\t  gcc_assert (DECL_P (decl2));')]
===========================================
===========================================
Total add: 34
Total del: 0
Header: scan_sharing_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+\t\t  gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (27, 1, u'+\t\t  gcc_assert (DECL_P (decl2));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 1, u'+\t\t  gcc_assert (TREE_CODE (decl2) == INDIRECT_REF);'), (27, 1, u'+\t\t  gcc_assert (DECL_P (decl2));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(87, 1, u'+\t\t      gcc_assert (ctx->outer')]
===========================================
===========================================
Total add: 121
Total del: 0
Header: check_omp_nesting_restrictions
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(87, 1, u'+\t\t      gcc_assert (ctx->outer')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(87, 1, u'+\t\t      gcc_assert (ctx->outer')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t\t      gcc_assert (c);')]
===========================================
===========================================
Total add: 38
Total del: 0
Header: lower_rec_input_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t\t      gcc_assert (c);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t\t      gcc_assert (c);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t      gcc_assert (is_parallel_ctx (ctx));')]
===========================================
===========================================
Total add: 7
Total del: 0
Header: lower_rec_input_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t      gcc_assert (is_parallel_ctx (ctx));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t      gcc_assert (is_parallel_ctx (ctx));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t  gcc_assert (!is_simd);')]
===========================================
===========================================
Total add: 4
Total del: 3
Header: lower_rec_input_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t  gcc_assert (!is_simd);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t  gcc_assert (!is_simd);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t\t  gcc_assert (TREE_CODE (TREE_TYPE (new_var)) != ARRAY_TYPE);'), (15, 1, u'+\t\t      gcc_assert (TREE_CODE (new_var) == MEM_REF);'), (17, 1, u'+\t\t      gcc_assert (DECL_P (new_vard));')]
===========================================
===========================================
Total add: 7
Total del: 10
Header: lower_rec_input_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t\t  gcc_assert (TREE_CODE (TREE_TYPE (new_var)) != ARRAY_TYPE);'), (15, 1, u'+\t\t      gcc_assert (TREE_CODE (new_var) == MEM_REF);'), (17, 1, u'+\t\t      gcc_assert (DECL_P (new_vard));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t\t  gcc_assert (TREE_CODE (TREE_TYPE (new_var)) != ARRAY_TYPE);'), (15, 1, u'+\t\t      gcc_assert (TREE_CODE (new_var) == MEM_REF);'), (17, 1, u'+\t\t      gcc_assert (DECL_P (new_vard));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\t\t  gcc_assert (DECL_VALUE_EXPR (new_var) == lvar);'), (80, 1, u'+\t\t  gcc_assert (TREE_CODE (TREE_TYPE (new_var)) != ARRAY_TYPE);')]
===========================================
===========================================
Total add: 83
Total del: 11
Header: lower_rec_input_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\t\t  gcc_assert (DECL_VALUE_EXPR (new_var) == lvar);'), (80, 1, u'+\t\t  gcc_assert (TREE_CODE (TREE_TYPE (new_var)) != ARRAY_TYPE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\t\t  gcc_assert (DECL_VALUE_EXPR (new_var) == lvar);'), (80, 1, u'+\t\t  gcc_assert (TREE_CODE (TREE_TYPE (new_var)) != ARRAY_TYPE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      gcc_assert (innerc);'), (15, 1, u'+\t  gcc_assert (innerc);')]
===========================================
===========================================
Total add: 22
Total del: 0
Header: expand_omp_for_init_counts
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      gcc_assert (innerc);'), (15, 1, u'+\t  gcc_assert (innerc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      gcc_assert (innerc);'), (15, 1, u'+\t  gcc_assert (innerc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+      gcc_assert (innerc);'), (25, 1, u'+\t  gcc_assert (innerc);')]
===========================================
===========================================
Total add: 34
Total del: 1
Header: static void
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+      gcc_assert (innerc);'), (25, 1, u'+\t  gcc_assert (innerc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+      gcc_assert (innerc);'), (25, 1, u'+\t  gcc_assert (innerc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t  gcc_assert (innerc);'), (10, 1, u'+\t  gcc_assert (innerc);')]
===========================================
===========================================
Total add: 11
Total del: 0
Header: expand_omp_for_generic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t  gcc_assert (innerc);'), (10, 1, u'+\t  gcc_assert (innerc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t  gcc_assert (innerc);'), (10, 1, u'+\t  gcc_assert (innerc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (gimple_code (inner_stmt) == GIMPLE_OMP_FOR'), (9, 1, u'+      gcc_assert (innerc);'), (13, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
Total add: 15
Total del: 0
Header: expand_omp_for_generic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (gimple_code (inner_stmt) == GIMPLE_OMP_FOR'), (9, 1, u'+      gcc_assert (innerc);'), (13, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (gimple_code (inner_stmt) == GIMPLE_OMP_FOR'), (9, 1, u'+      gcc_assert (innerc);'), (13, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (BRANCH_EDGE (entry_bb)->dest == FALLTHRU_EDGE (cont_bb)->dest);'), (4, 1, u'+  gcc_assert (broken_loop'), (8, 2, u'-  gcc_assert (BRANCH_EDGE (cont_bb)->dest == body_bb);'), (9, 2, u'-  gcc_assert (EDGE_COUNT (cont_bb->succs) == 2);'), (13, 1, u'+      gcc_assert (BRANCH_EDGE (cont_bb)->dest == body_bb);'), (14, 1, u'+      gcc_assert (EDGE_COUNT (cont_bb->succs) == 2);')]
===========================================
===========================================
Total add: 8
Total del: 4
Header: expand_omp_for_static_nochunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (BRANCH_EDGE (entry_bb)->dest == FALLTHRU_EDGE (cont_bb)->dest);'), (4, 1, u'+  gcc_assert (broken_loop'), (8, 2, u'-  gcc_assert (BRANCH_EDGE (cont_bb)->dest == body_bb);'), (9, 2, u'-  gcc_assert (EDGE_COUNT (cont_bb->succs) == 2);'), (13, 1, u'+      gcc_assert (BRANCH_EDGE (cont_bb)->dest == body_bb);'), (14, 1, u'+      gcc_assert (EDGE_COUNT (cont_bb->succs) == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (BRANCH_EDGE (entry_bb)->dest == FALLTHRU_EDGE (cont_bb)->dest);'), (4, 1, u'+  gcc_assert (broken_loop'), (8, 2, u'-  gcc_assert (BRANCH_EDGE (cont_bb)->dest == body_bb);'), (9, 2, u'-  gcc_assert (EDGE_COUNT (cont_bb->succs) == 2);'), (13, 1, u'+      gcc_assert (BRANCH_EDGE (cont_bb)->dest == body_bb);'), (14, 1, u'+      gcc_assert (EDGE_COUNT (cont_bb->succs) == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (innerc);'), (22, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
Total add: 23
Total del: 12
Header: expand_omp_for_static_nochunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (innerc);'), (22, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (innerc);'), (22, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (innerc);'), (15, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
Total add: 23
Total del: 6
Header: expand_omp_for_static_nochunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (innerc);'), (15, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (innerc);'), (15, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-  gcc_assert (gimple_code (stmt) == GIMPLE_OMP_CONTINUE);'), (34, 1, u'+      gcc_assert (gimple_code (stmt) == GIMPLE_OMP_CONTINUE);')]
===========================================
===========================================
Total add: 43
Total del: 24
Header: expand_omp_for_static_nochunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-  gcc_assert (gimple_code (stmt) == GIMPLE_OMP_CONTINUE);'), (34, 1, u'+      gcc_assert (gimple_code (stmt) == GIMPLE_OMP_CONTINUE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(25, 2, u'-  gcc_assert (gimple_code (stmt) == GIMPLE_OMP_CONTINUE);'), (34, 1, u'+      gcc_assert (gimple_code (stmt) == GIMPLE_OMP_CONTINUE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (BRANCH_EDGE (iter_part_bb)->dest'), (5, 1, u'+  gcc_assert (broken_loop'), (9, 2, u'-  gcc_assert (BRANCH_EDGE (cont_bb)->dest == body_bb);'), (10, 2, u'-  gcc_assert (EDGE_COUNT (cont_bb->succs) == 2);'), (15, 1, u'+      gcc_assert (BRANCH_EDGE (cont_bb)->dest == body_bb);'), (16, 1, u'+      gcc_assert (EDGE_COUNT (cont_bb->succs) == 2);')]
===========================================
===========================================
Total add: 9
Total del: 6
Header: expand_omp_for_static_chunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (BRANCH_EDGE (iter_part_bb)->dest'), (5, 1, u'+  gcc_assert (broken_loop'), (9, 2, u'-  gcc_assert (BRANCH_EDGE (cont_bb)->dest == body_bb);'), (10, 2, u'-  gcc_assert (EDGE_COUNT (cont_bb->succs) == 2);'), (15, 1, u'+      gcc_assert (BRANCH_EDGE (cont_bb)->dest == body_bb);'), (16, 1, u'+      gcc_assert (EDGE_COUNT (cont_bb->succs) == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (BRANCH_EDGE (iter_part_bb)->dest'), (5, 1, u'+  gcc_assert (broken_loop'), (9, 2, u'-  gcc_assert (BRANCH_EDGE (cont_bb)->dest == body_bb);'), (10, 2, u'-  gcc_assert (EDGE_COUNT (cont_bb->succs) == 2);'), (15, 1, u'+      gcc_assert (BRANCH_EDGE (cont_bb)->dest == body_bb);'), (16, 1, u'+      gcc_assert (EDGE_COUNT (cont_bb->succs) == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (innerc);'), (22, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
Total add: 20
Total del: 9
Header: expand_omp_for_static_chunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (innerc);'), (22, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+      gcc_assert (innerc);'), (22, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (innerc);'), (15, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
Total add: 24
Total del: 6
Header: expand_omp_for_static_chunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (innerc);'), (15, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (innerc);'), (15, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+      gcc_assert (gimple_code (stmt) == GIMPLE_OMP_CONTINUE);'), (35, 2, u'-  gcc_assert (gimple_code (stmt) == GIMPLE_OMP_CONTINUE);')]
===========================================
===========================================
Total add: 48
Total del: 31
Header: expand_omp_for_static_chunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+      gcc_assert (gimple_code (stmt) == GIMPLE_OMP_CONTINUE);'), (35, 2, u'-  gcc_assert (gimple_code (stmt) == GIMPLE_OMP_CONTINUE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+      gcc_assert (gimple_code (stmt) == GIMPLE_OMP_CONTINUE);'), (35, 2, u'-  gcc_assert (gimple_code (stmt) == GIMPLE_OMP_CONTINUE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (fd->collapse == 1 && !broken_loop);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: expand_omp_for_static_chunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (fd->collapse == 1 && !broken_loop);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (fd->collapse == 1 && !broken_loop);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (innerc);'), (15, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
Total add: 20
Total del: 3
Header: expand_omp_simd
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (innerc);'), (15, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (innerc);'), (15, 1, u'+      gcc_assert (innerc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+\t      gcc_assert (!gsi_end_p (gsi));'), (78, 1, u'+\t  gcc_assert (tgtcopy_stmt != NULL);'), (81, 1, u'+\t  gcc_assert (gimple_assign_lhs (tgtcopy_stmt) == arg);'), (109, 1, u'+      gcc_assert (stmt && gimple_code (stmt) == GIMPLE_OMP_TARGET'), (121, 1, u'+\t  gcc_assert (!gsi_end_p (gsi)'), (307, 1, u'+      gcc_assert (g && gimple_code (g) == GIMPLE_OMP_TARGET);'), (314, 1, u'+      gcc_assert (g && gimple_code (g) == GIMPLE_OMP_RETURN);')]
===========================================
===========================================
Total add: 318
Total del: 3
Header: expand_omp_atomic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+\t      gcc_assert (!gsi_end_p (gsi));'), (78, 1, u'+\t  gcc_assert (tgtcopy_stmt != NULL);'), (81, 1, u'+\t  gcc_assert (gimple_assign_lhs (tgtcopy_stmt) == arg);'), (109, 1, u'+      gcc_assert (stmt && gimple_code (stmt) == GIMPLE_OMP_TARGET'), (121, 1, u'+\t  gcc_assert (!gsi_end_p (gsi)'), (307, 1, u'+      gcc_assert (g && gimple_code (g) == GIMPLE_OMP_TARGET);'), (314, 1, u'+      gcc_assert (g && gimple_code (g) == GIMPLE_OMP_RETURN);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(57, 1, u'+\t      gcc_assert (!gsi_end_p (gsi));'), (78, 1, u'+\t  gcc_assert (tgtcopy_stmt != NULL);'), (81, 1, u'+\t  gcc_assert (gimple_assign_lhs (tgtcopy_stmt) == arg);'), (109, 1, u'+      gcc_assert (stmt && gimple_code (stmt) == GIMPLE_OMP_TARGET'), (121, 1, u'+\t  gcc_assert (!gsi_end_p (gsi)'), (307, 1, u'+      gcc_assert (g && gimple_code (g) == GIMPLE_OMP_TARGET);'), (314, 1, u'+      gcc_assert (g && gimple_code (g) == GIMPLE_OMP_RETURN);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+\t      gcc_assert (outerc);')]
===========================================
===========================================
Total add: 39
Total del: 0
Header: lower_omp_for
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+\t      gcc_assert (outerc);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+\t      gcc_assert (outerc);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (ctx);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: lower_omp_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (ctx);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (ctx);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (ctx);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: lower_omp_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (ctx);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (ctx);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (ctx);'), (9, 1, u'+      gcc_assert (ctx);'), (29, 1, u'+\t    gcc_assert (gimple_call_lhs (stmt) == NULL_TREE);')]
===========================================
===========================================
Total add: 60
Total del: 0
Header: lower_omp_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (ctx);'), (9, 1, u'+      gcc_assert (ctx);'), (29, 1, u'+\t    gcc_assert (gimple_call_lhs (stmt) == NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (ctx);'), (9, 1, u'+      gcc_assert (ctx);'), (29, 1, u'+\t    gcc_assert (gimple_call_lhs (stmt) == NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  go_assert(POINTER_TYPE_P(fntype_tree));'), (7, 2, u'-  go_assert(TREE_CODE(TREE_TYPE(fntype_tree)) == RECORD_TYPE);')]
===========================================
===========================================
Total add: 2
Total del: 8
Header: Call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  go_assert(POINTER_TYPE_P(fntype_tree));'), (7, 2, u'-  go_assert(TREE_CODE(TREE_TYPE(fntype_tree)) == RECORD_TYPE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  go_assert(POINTER_TYPE_P(fntype_tree));'), (7, 2, u'-  go_assert(TREE_CODE(TREE_TYPE(fntype_tree)) == RECORD_TYPE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-\t  go_assert(POINTER_TYPE_P(functype)'), (18, 2, u'-\t  go_assert(FUNCTION_POINTER_TYPE_P(functype));')]
===========================================
===========================================
Total add: 65
Total del: 102
Header: Variable::get_init_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-\t  go_assert(POINTER_TYPE_P(functype)'), (18, 2, u'-\t  go_assert(FUNCTION_POINTER_TYPE_P(functype));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 2, u'-\t  go_assert(POINTER_TYPE_P(functype)'), (18, 2, u'-\t  go_assert(FUNCTION_POINTER_TYPE_P(functype));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-\t  go_assert(POINTER_TYPE_P(functype)'), (27, 2, u'-\t  go_assert(FUNCTION_POINTER_TYPE_P(functype));'), (75, 1, u'+  go_assert(this->fndecl_ != NULL);')]
===========================================
===========================================
Total add: 30
Total del: 42
Header: Function_declaration::get_or_make_decl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-\t  go_assert(POINTER_TYPE_P(functype)'), (27, 2, u'-\t  go_assert(FUNCTION_POINTER_TYPE_P(functype));'), (75, 1, u'+  go_assert(this->fndecl_ != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 2, u'-\t  go_assert(POINTER_TYPE_P(functype)'), (27, 2, u'-\t  go_assert(FUNCTION_POINTER_TYPE_P(functype));'), (75, 1, u'+  go_assert(this->fndecl_ != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 1, u'+          go_assert(i == bparameters.size());'), (49, 1, u'+          go_assert(i == bresults.size());')]
===========================================
===========================================
Total add: 62
Total del: 0
Header: Function_type::do_hash_for_method
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 1, u'+          go_assert(i == bparameters.size());'), (49, 1, u'+          go_assert(i == bresults.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(33, 1, u'+          go_assert(i == bparameters.size());'), (49, 1, u'+          go_assert(i == bresults.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-      go_assert(i == bparameters.size());'), (45, 2, u'-      go_assert(i == bresults.size());')]
===========================================
===========================================
Total add: 1
Total del: 49
Header: Function_type::do_get_backend
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-      go_assert(i == bparameters.size());'), (45, 2, u'-      go_assert(i == bresults.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-      go_assert(i == bparameters.size());'), (45, 2, u'-      go_assert(i == bresults.size());')]
===========================================
Class:class pass_graphite : public gimple_opt_pass class pass_graphite : public gimple_opt_pass
Class:class pass_graphite_transforms : public gimple_opt_pass class pass_graphite_transforms : public gimple_opt_pass
Class:class pass_warn_function_noreturn : public gimple_opt_pass class pass_warn_function_noreturn : public gimple_opt_pass
Class:class pass_warn_function_noreturn : public gimple_opt_pass class pass_warn_function_noreturn : public gimple_opt_pass
Class:class pass_fixup_cfg : public gimple_opt_pass class pass_fixup_cfg : public gimple_opt_pass
Class:class pass_fixup_cfg : public gimple_opt_pass class pass_fixup_cfg : public gimple_opt_pass
Class:class pass_parallelize_loops : public gimple_opt_pass class pass_parallelize_loops : public gimple_opt_pass
Class:class pass_predcom : public gimple_opt_pass class pass_predcom : public gimple_opt_pass
Class:class pass_predcom : public gimple_opt_pass class pass_predcom : public gimple_opt_pass
Class:class pass_graphite : public gimple_opt_pass class pass_graphite : public gimple_opt_pass
Class:class pass_graphite_transforms : public gimple_opt_pass class pass_graphite_transforms : public gimple_opt_pass
Class:class pass_parallelize_loops : public gimple_opt_pass class pass_parallelize_loops : public gimple_opt_pass
Class:class pass_lim : public gimple_opt_pass class pass_lim : public gimple_opt_pass
Class:class pass_iv_canon : public gimple_opt_pass class pass_iv_canon : public gimple_opt_pass
Class:class pass_complete_unroll : public gimple_opt_pass class pass_complete_unroll : public gimple_opt_pass
Class:class pass_complete_unrolli : public gimple_opt_pass class pass_complete_unrolli : public gimple_opt_pass
Class:class pass_loop_prefetch : public gimple_opt_pass class pass_loop_prefetch : public gimple_opt_pass
Class:class pass_tree_unswitch : public gimple_opt_pass class pass_tree_unswitch : public gimple_opt_pass
Class:class pass_lim : public gimple_opt_pass class pass_lim : public gimple_opt_pass
Class:class pass_tree_unswitch : public gimple_opt_pass class pass_tree_unswitch : public gimple_opt_pass
Class:class pass_iv_canon : public gimple_opt_pass class pass_iv_canon : public gimple_opt_pass
Class:class pass_complete_unroll : public gimple_opt_pass class pass_complete_unroll : public gimple_opt_pass
Class:class pass_complete_unrolli : public gimple_opt_pass class pass_complete_unrolli : public gimple_opt_pass
Class:class pass_loop_prefetch : public gimple_opt_pass class pass_loop_prefetch : public gimple_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (TARGET_SOFT_FLOAT);')]
===========================================
===========================================
Total add: 16
Total del: 32
Header: s390_frame_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (TARGET_SOFT_FLOAT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (TARGET_SOFT_FLOAT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(151, 1, u'+  gcc_assert (!epilogue_completed);')]
===========================================
===========================================
Total add: 127
Total del: 39
Header: s390_frame_area
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(151, 1, u'+  gcc_assert (!epilogue_completed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(151, 1, u'+  gcc_assert (!epilogue_completed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(113, 1, u'+  gcc_assert (epilogue_completed);'), (114, 1, u'+  gcc_assert (!cfun->machine->split_branches_pending_p);')]
===========================================
===========================================
Total add: 67
Total del: 86
Header: s390_register_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(113, 1, u'+  gcc_assert (epilogue_completed);'), (114, 1, u'+  gcc_assert (!cfun->machine->split_branches_pending_p);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(113, 1, u'+  gcc_assert (epilogue_completed);'), (114, 1, u'+  gcc_assert (!cfun->machine->split_branches_pending_p);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (!reload_completed);')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: s390_init_frame_layout
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (!reload_completed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (!reload_completed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (index >= 0);')]
===========================================
===========================================
Total add: 20
Total del: 4
Header: s390_initial_elimination_offset
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (index >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (index >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 1, u'+\t  gcc_assert (cfun_gpr_save_slot (gpr_regno) != -1);')]
===========================================
===========================================
Total add: 49
Total del: 5
Header: s390_optimize_prologue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 1, u'+\t  gcc_assert (cfun_gpr_save_slot (gpr_regno) != -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 1, u'+\t  gcc_assert (cfun_gpr_save_slot (gpr_regno) != -1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t    bool handle_dominating_asserts,'), (19, 1, u'+\t\t\t     bool handle_dominating_asserts,')]
===========================================
===========================================
Total add: 11
Total del: 9
Header: thread_around_empty_blocks
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t    bool handle_dominating_asserts,'), (19, 1, u'+\t\t\t     bool handle_dominating_asserts,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t    bool handle_dominating_asserts,'), (19, 1, u'+\t\t\t     bool handle_dominating_asserts,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+\t\t    bool handle_dominating_asserts,'), (51, 1, u'+  if (thread_through_normal_block (e, dummy_cond, handle_dominating_asserts,'), (64, 1, u'+      gcc_assert (path->length () == 0);')]
===========================================
===========================================
Total add: 57
Total del: 6
Header: thread_across_edge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+\t\t    bool handle_dominating_asserts,'), (51, 1, u'+  if (thread_through_normal_block (e, dummy_cond, handle_dominating_asserts,'), (64, 1, u'+      gcc_assert (path->length () == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(44, 1, u'+\t\t    bool handle_dominating_asserts,'), (51, 1, u'+  if (thread_through_normal_block (e, dummy_cond, handle_dominating_asserts,'), (64, 1, u'+      gcc_assert (path->length () == 0);')]
===========================================
Class:   class A { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (percent >= 0 && percent <= 100);')]
===========================================
===========================================
Total add: 5
Total del: 4
Header: tree_predict_by_opcode
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (percent >= 0 && percent <= 100);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (percent >= 0 && percent <= 100);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (fun);')]
===========================================
===========================================
Total add: 1
Total del: 8
Header: probably_never_executed_edge_p
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (fun);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (fun);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TREE_CODE (tmp) == ARRAY_TYPE);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: gfc_conv_string_tmp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TREE_CODE (tmp) == ARRAY_TYPE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (TREE_CODE (tmp) == ARRAY_TYPE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (!partition_reduction_p (partition)')]
===========================================
===========================================
Total add: 7
Total del: 4
Header: generate_code_for_partition
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (!partition_reduction_p (partition)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (!partition_reduction_p (partition)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-      gcc_assert (!copy_p);')]
===========================================
===========================================
Total add: 0
Total del: 11
Header: generate_code_for_partition
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-      gcc_assert (!copy_p);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-      gcc_assert (!copy_p);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 2, u'-\tgcc_assert (frame_pointer_needed);'), (58, 1, u'+    gcc_assert (frame_pointer_needed);'), (100, 1, u'+\t  gcc_assert (!(cfun->machine->frame_info.gmask'), (143, 2, u'-\t      gcc_assert (!(cfun->machine->frame_info.gmask')]
===========================================
===========================================
Total add: 123
Total del: 132
Header: arc_expand_epilogue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 2, u'-\tgcc_assert (frame_pointer_needed);'), (58, 1, u'+    gcc_assert (frame_pointer_needed);'), (100, 1, u'+\t  gcc_assert (!(cfun->machine->frame_info.gmask'), (143, 2, u'-\t      gcc_assert (!(cfun->machine->frame_info.gmask')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(35, 2, u'-\tgcc_assert (frame_pointer_needed);'), (58, 1, u'+    gcc_assert (frame_pointer_needed);'), (100, 1, u'+\t  gcc_assert (!(cfun->machine->frame_info.gmask'), (143, 2, u'-\t      gcc_assert (!(cfun->machine->frame_info.gmask')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (POINTER_TYPE_P (type));'), (9, 1, u'+      gcc_assert (TREE_CODE (tmp) == ARRAY_TYPE);')]
===========================================
===========================================
Total add: 8
Total del: 5
Header: gfc_conv_string_tmp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (POINTER_TYPE_P (type));'), (9, 1, u'+      gcc_assert (TREE_CODE (tmp) == ARRAY_TYPE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+      gcc_assert (POINTER_TYPE_P (type));'), (9, 1, u'+      gcc_assert (TREE_CODE (tmp) == ARRAY_TYPE);')]
===========================================
Class:class pass_arc_ifcvt : public rtl_opt_pass class pass_arc_ifcvt : public rtl_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  gcc_checking_assert (ssa_operands_active (cfun));')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: swap_tree_operands
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  gcc_checking_assert (ssa_operands_active (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  gcc_checking_assert (ssa_operands_active (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (INDEX_EDGE_PRED_BB (el, edge_index) != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (INDEX_EDGE_PRED_BB (m_el, edge_index) != EXIT_BLOCK_PTR);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: control_dependences::find_control_dependence
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (INDEX_EDGE_PRED_BB (el, edge_index) != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (INDEX_EDGE_PRED_BB (m_el, edge_index) != EXIT_BLOCK_PTR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (INDEX_EDGE_PRED_BB (el, edge_index) != EXIT_BLOCK_PTR);'), (3, 1, u'+  gcc_assert (INDEX_EDGE_PRED_BB (m_el, edge_index) != EXIT_BLOCK_PTR);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (sizeof(long) == sizeof (word));'), (3, 1, u'+  gcc_assert (sizeof (long) == sizeof (word));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: bitmap_first_set_bit
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (sizeof(long) == sizeof (word));'), (3, 1, u'+  gcc_assert (sizeof (long) == sizeof (word));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (sizeof(long) == sizeof (word));'), (3, 1, u'+  gcc_assert (sizeof (long) == sizeof (word));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (sizeof(long) == sizeof (word));'), (3, 1, u'+  gcc_assert (sizeof (long) == sizeof (word));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: bitmap_last_set_bit
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (sizeof(long) == sizeof (word));'), (3, 1, u'+  gcc_assert (sizeof (long) == sizeof (word));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (sizeof(long) == sizeof (word));'), (3, 1, u'+  gcc_assert (sizeof (long) == sizeof (word));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert(!crtl->stack_realign_processed);'), (3, 1, u'+      gcc_assert (!crtl->stack_realign_processed);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: expand_one_var
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert(!crtl->stack_realign_processed);'), (3, 1, u'+      gcc_assert (!crtl->stack_realign_processed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert(!crtl->stack_realign_processed);'), (3, 1, u'+      gcc_assert (!crtl->stack_realign_processed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (current_ir_type() == IR_RTL_CFGRTL'), (3, 1, u'+  gcc_assert (current_ir_type () == IR_RTL_CFGRTL')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: emit_barrier_after_bb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (current_ir_type() == IR_RTL_CFGRTL'), (3, 1, u'+  gcc_assert (current_ir_type () == IR_RTL_CFGRTL')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (current_ir_type() == IR_RTL_CFGRTL'), (3, 1, u'+  gcc_assert (current_ir_type () == IR_RTL_CFGRTL')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(node->index == NO_INDEX_ASSIGNED);'), (3, 1, u'+  gcc_assert (node->index == NO_INDEX_ASSIGNED);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: index_addr_table_entry
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(node->index == NO_INDEX_ASSIGNED);'), (3, 1, u'+  gcc_assert (node->index == NO_INDEX_ASSIGNED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(node->index == NO_INDEX_ASSIGNED);'), (3, 1, u'+  gcc_assert (node->index == NO_INDEX_ASSIGNED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert(node->index == NO_INDEX_ASSIGNED);'), (3, 1, u'+      gcc_assert (node->index == NO_INDEX_ASSIGNED);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: index_string
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert(node->index == NO_INDEX_ASSIGNED);'), (3, 1, u'+      gcc_assert (node->index == NO_INDEX_ASSIGNED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert(node->index == NO_INDEX_ASSIGNED);'), (3, 1, u'+      gcc_assert (node->index == NO_INDEX_ASSIGNED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-              gcc_assert(bv_ix < GCOV_HISTOGRAM_BITVECTOR_SIZE);'), (3, 1, u'+              gcc_assert (bv_ix < GCOV_HISTOGRAM_BITVECTOR_SIZE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: gcov_read_summary
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-              gcc_assert(bv_ix < GCOV_HISTOGRAM_BITVECTOR_SIZE);'), (3, 1, u'+              gcc_assert (bv_ix < GCOV_HISTOGRAM_BITVECTOR_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-              gcc_assert(bv_ix < GCOV_HISTOGRAM_BITVECTOR_SIZE);'), (3, 1, u'+              gcc_assert (bv_ix < GCOV_HISTOGRAM_BITVECTOR_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          gcc_assert(h_ix < GCOV_HISTOGRAM_SIZE);'), (3, 1, u'+          gcc_assert (h_ix < GCOV_HISTOGRAM_SIZE);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: gcov_read_summary
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          gcc_assert(h_ix < GCOV_HISTOGRAM_SIZE);'), (3, 1, u'+          gcc_assert (h_ix < GCOV_HISTOGRAM_SIZE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-          gcc_assert(h_ix < GCOV_HISTOGRAM_SIZE);'), (3, 1, u'+          gcc_assert (h_ix < GCOV_HISTOGRAM_SIZE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(tmp_i >= 0 && tmp_i < GCOV_HISTOGRAM_SIZE'), (4, 1, u'+  gcc_assert (tmp_i >= 0 && tmp_i < GCOV_HISTOGRAM_SIZE')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: gcov_histogram_merge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(tmp_i >= 0 && tmp_i < GCOV_HISTOGRAM_SIZE'), (4, 1, u'+  gcc_assert (tmp_i >= 0 && tmp_i < GCOV_HISTOGRAM_SIZE')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(tmp_i >= 0 && tmp_i < GCOV_HISTOGRAM_SIZE'), (4, 1, u'+  gcc_assert (tmp_i >= 0 && tmp_i < GCOV_HISTOGRAM_SIZE')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_CODE(TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (ctor))))'), (3, 1, u'+  gcc_assert (TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (ctor))))')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: fold_array_ctor_reference
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_CODE(TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (ctor))))'), (3, 1, u'+  gcc_assert (TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (ctor))))')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_CODE(TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (ctor))))'), (3, 1, u'+  gcc_assert (TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (ctor))))')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert(NONJUMP_INSN_P (insn) || CALL_P (insn));'), (3, 1, u'+      gcc_assert (NONJUMP_INSN_P (insn) || CALL_P (insn));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: cond_exec_process_insns
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert(NONJUMP_INSN_P (insn) || CALL_P (insn));'), (3, 1, u'+      gcc_assert (NONJUMP_INSN_P (insn) || CALL_P (insn));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert(NONJUMP_INSN_P (insn) || CALL_P (insn));'), (3, 1, u'+      gcc_assert (NONJUMP_INSN_P (insn) || CALL_P (insn));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (!alias_pairs || !alias_pairs->length());'), (3, 1, u'+  gcc_checking_assert (!alias_pairs || !alias_pairs->length ());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: function_and_variable_visibility
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (!alias_pairs || !alias_pairs->length());'), (3, 1, u'+  gcc_checking_assert (!alias_pairs || !alias_pairs->length ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (!alias_pairs || !alias_pairs->length());'), (3, 1, u'+  gcc_checking_assert (!alias_pairs || !alias_pairs->length ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(condition != const_true_rtx || thread_if_true);'), (3, 2, u'-  gcc_assert(own_thread || thread_if_true);'), (4, 1, u'+  gcc_assert (condition != const_true_rtx || thread_if_true);'), (5, 1, u'+  gcc_assert (own_thread || thread_if_true);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: fill_slots_from_thread
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(condition != const_true_rtx || thread_if_true);'), (3, 2, u'-  gcc_assert(own_thread || thread_if_true);'), (4, 1, u'+  gcc_assert (condition != const_true_rtx || thread_if_true);'), (5, 1, u'+  gcc_assert (own_thread || thread_if_true);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(condition != const_true_rtx || thread_if_true);'), (3, 2, u'-  gcc_assert(own_thread || thread_if_true);'), (4, 1, u'+  gcc_assert (condition != const_true_rtx || thread_if_true);'), (5, 1, u'+  gcc_assert (own_thread || thread_if_true);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(!(!targetm.have_tls'), (5, 1, u'+  gcc_assert (!(!targetm.have_tls')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: do_assemble_alias
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(!(!targetm.have_tls'), (5, 1, u'+  gcc_assert (!(!targetm.have_tls')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(!(!targetm.have_tls'), (5, 1, u'+  gcc_assert (!(!targetm.have_tls')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (node && node->registered.is_created());'), (3, 1, u'+  gcc_assert (node && node->registered.is_created ());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: vtbl_map_node_registration_find
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (node && node->registered.is_created());'), (3, 1, u'+  gcc_assert (node && node->registered.is_created ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (node && node->registered.is_created());'), (3, 1, u'+  gcc_assert (node && node->registered.is_created ());')]
===========================================
Class:    class Gt { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (GET_CODE (*inner) == UNSPEC);')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: set_address_segment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (GET_CODE (*inner) == UNSPEC);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (GET_CODE (*inner) == UNSPEC);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_checking_assert (REG_P (*inner)')]
===========================================
===========================================
Total add: 0
Total del: 6
Header: set_address_base
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_checking_assert (REG_P (*inner)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_checking_assert (REG_P (*inner)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_checking_assert (REG_P (*inner)')]
===========================================
===========================================
Total add: 0
Total del: 6
Header: set_address_index
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_checking_assert (REG_P (*inner)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-  gcc_checking_assert (REG_P (*inner)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (CONSTANT_P (*inner));')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: set_address_disp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (CONSTANT_P (*inner));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (CONSTANT_P (*inner));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t  gcc_assert (base_term || index_term);'), (15, 1, u'+\t      gcc_assert (base_term == index_term);')]
===========================================
===========================================
Total add: 15
Total del: 3
Header: decompose_normal_address
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t  gcc_assert (base_term || index_term);'), (15, 1, u'+\t      gcc_assert (base_term == index_term);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+\t  gcc_assert (base_term || index_term);'), (15, 1, u'+\t      gcc_assert (base_term == index_term);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (is_replaceable_p (stmt, true));'), (3, 1, u'+  gcc_checking_assert (ter_is_replaceable_p (stmt));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: process_replaceable
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (is_replaceable_p (stmt, true));'), (3, 1, u'+  gcc_checking_assert (ter_is_replaceable_p (stmt));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (is_replaceable_p (stmt, true));'), (3, 1, u'+  gcc_checking_assert (ter_is_replaceable_p (stmt));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!bitmap_bit_p (visited, bb->index));'), (4, 1, u'+  gcc_checking_assert (!bitmap_bit_p (visited, bb->index));')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: loe_visit_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!bitmap_bit_p (visited, bb->index));'), (4, 1, u'+  gcc_checking_assert (!bitmap_bit_p (visited, bb->index));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!bitmap_bit_p (visited, bb->index));'), (4, 1, u'+  gcc_checking_assert (!bitmap_bit_p (visited, bb->index));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  gcc_assert (TREE_INT_CST_NUNITS (t) == int (cst.get_len ()));'), (9, 1, u'+\t  gcc_assert (TREE_INT_CST_NUNITS (t) == len);'), (13, 1, u'+\t      gcc_assert (sext_hwi (TREE_INT_CST_ELT (t, len), small_prec)')]
===========================================
===========================================
Total add: 11
Total del: 3
Header: wide_int_to_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  gcc_assert (TREE_INT_CST_NUNITS (t) == int (cst.get_len ()));'), (9, 1, u'+\t  gcc_assert (TREE_INT_CST_NUNITS (t) == len);'), (13, 1, u'+\t      gcc_assert (sext_hwi (TREE_INT_CST_ELT (t, len), small_prec)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  gcc_assert (TREE_INT_CST_NUNITS (t) == int (cst.get_len ()));'), (9, 1, u'+\t  gcc_assert (TREE_INT_CST_NUNITS (t) == len);'), (13, 1, u'+\t      gcc_assert (sext_hwi (TREE_INT_CST_ELT (t, len), small_prec)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (synth_idx == count);'), (3, 1, u'+  gcc_assert (synth_count == expect_count);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: add_implicit_template_parms
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (synth_idx == count);'), (3, 1, u'+  gcc_assert (synth_count == expect_count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (synth_idx == count);'), (3, 1, u'+  gcc_assert (synth_count == expect_count);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TYPE_SIZE (type) && host_integerp (TYPE_SIZE (type), 1));'), (4, 1, u'+  gcc_assert (TYPE_SIZE (type) && tree_fits_uhwi_p (TYPE_SIZE (type)));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: get_ubsan_type_info_for_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TYPE_SIZE (type) && host_integerp (TYPE_SIZE (type), 1));'), (4, 1, u'+  gcc_assert (TYPE_SIZE (type) && tree_fits_uhwi_p (TYPE_SIZE (type)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TYPE_SIZE (type) && host_integerp (TYPE_SIZE (type), 1));'), (4, 1, u'+  gcc_assert (TYPE_SIZE (type) && tree_fits_uhwi_p (TYPE_SIZE (type)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_checking_assert (!int_reg_note_p (kind));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: alloc_reg_note
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_checking_assert (!int_reg_note_p (kind));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_checking_assert (!int_reg_note_p (kind));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t  gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: gimple_fold_call
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t  gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t  gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
Total add: 8
Total del: 1
Header: ipa_get_indirect_edge_target_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+    gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: ipa_intraprocedural_devirtualization
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+    gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: try_make_edge_direct_virtual_call
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (possible_polymorphic_call_target_p')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (TYPE_SIZE (type) && host_integerp (TYPE_SIZE (type), 1));'), (8, 1, u'+  gcc_assert (prec != -1);')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: get_ubsan_type_info_for_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (TYPE_SIZE (type) && host_integerp (TYPE_SIZE (type), 1));'), (8, 1, u'+  gcc_assert (prec != -1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (TYPE_SIZE (type) && host_integerp (TYPE_SIZE (type), 1));'), (8, 1, u'+  gcc_assert (prec != -1);')]
===========================================
Class:class C { class C 
Class: class D : C { class D : C 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_checking_assert')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: chrec_fold_plus_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_checking_assert')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_checking_assert')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: chrec_fold_plus_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: chrec_fold_plus_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_checking_assert')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: chrec_fold_multiply
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_checking_assert')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_checking_assert')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: chrec_fold_multiply
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: chrec_fold_multiply
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+\t  gcc_checking_assert')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (type_annotate_only);')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: gnat_to_gnu_entity
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (type_annotate_only);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (type_annotate_only);')]
===========================================
Class:class find_comparison_dom_walker : public dom_walker { 
Class:class single_def_use_dom_walker : public dom_walker { 
Class:class find_candidates_dom_walker : public dom_walker { 
Class:class sese_dom_walker : public dom_walker { 
Class:class rewrite_dom_walker : public dom_walker { 
Class:class rewrite_update_dom_walker : public dom_walker { 
Class:class dom_opt_dom_walker : public dom_walker { 
Class:class invariantness_dom_walker : public dom_walker { 
Class:class nontrapping_dom_walker : public dom_walker { 
Class:class eliminate_dom_walker : public dom_walker { 
Class:class strlen_dom_walker : public dom_walker { 
Class:class uncprop_dom_walker : public dom_walker { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+static_assert(same<apply<map, int>::type, int>::value, "");'), (24, 1, u'+static_assert(same<apply<mapc, int>::type, const int>::value, "");'), (25, 1, u'+static_assert(same<apply<mapv, int>::type, volatile int>::value, "");'), (26, 1, u'+static_assert(same<apply<mapcv, int>::type, const volatile int>::value, "");'), (28, 1, u'+static_assert(same<applyc<map, int>::type, const int>::value, "");'), (29, 1, u'+static_assert(same<applyc<mapc, int>::type, const int>::value, "");'), (30, 1, u'+static_assert(same<applyc<mapv, int>::type, const volatile int>::value, "");'), (31, 1, u'+static_assert(same<applyc<mapcv, int>::type, const volatile int>::value, "");'), (33, 1, u'+static_assert(same<applyv<map, int>::type, volatile int>::value, "");'), (34, 1, u'+static_assert(same<applyv<mapc, int>::type, const volatile int>::value, "");'), (35, 1, u'+static_assert(same<applyv<mapv, int>::type, volatile int>::value, "");'), (36, 1, u'+static_assert(same<applyv<mapcv, int>::type, const volatile int>::value, "");'), (38, 1, u'+static_assert(same<applycv<map, int>::type, const volatile int>::value, "");'), (39, 1, u'+static_assert(same<applycv<mapc, int>::type, const volatile int>::value, "");'), (40, 1, u'+static_assert(same<applycv<mapv, int>::type, const volatile int>::value, "");'), (41, 1, u'+static_assert(same<applycv<mapcv, int>::type, const volatile int>::value, "");')]
===========================================
Class:class pass_early_warn_uninitialized : public gimple_opt_pass class pass_early_warn_uninitialized : public gimple_opt_pass
Class:class pass_early_warn_uninitialized : public gimple_opt_pass class pass_early_warn_uninitialized : public gimple_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (SCALAR_INT_MODE_P (mode));')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: try_const_anchors
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (SCALAR_INT_MODE_P (mode));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (SCALAR_INT_MODE_P (mode));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (!current_function_decl);'), (6, 1, u'+      gcc_assert (!current_function_decl || LAMBDA_FUNCTION_P (decl));')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: check_member_template
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (!current_function_decl);'), (6, 1, u'+      gcc_assert (!current_function_decl || LAMBDA_FUNCTION_P (decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (!current_function_decl);'), (6, 1, u'+      gcc_assert (!current_function_decl || LAMBDA_FUNCTION_P (decl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (TREE_CODE (ref) == COMPONENT_REF);')]
===========================================
===========================================
Total add: 12
Total del: 6
Header: lambda_proxy_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (TREE_CODE (ref) == COMPONENT_REF);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (TREE_CODE (ref) == COMPONENT_REF);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL);'), (3, 1, u'+  gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL')]
===========================================
===========================================
Total add: 2
Total del: 1
Header: retrieve_specialization
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL);'), (3, 1, u'+  gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL);'), (3, 1, u'+  gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL && DECL_P (spec));'), (3, 1, u'+  gcc_assert ((TREE_CODE (tmpl) == TEMPLATE_DECL && DECL_P (spec))')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: register_specialization
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL && DECL_P (spec));'), (3, 1, u'+  gcc_assert ((TREE_CODE (tmpl) == TEMPLATE_DECL && DECL_P (spec))')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL && DECL_P (spec));'), (3, 1, u'+  gcc_assert ((TREE_CODE (tmpl) == TEMPLATE_DECL && DECL_P (spec))')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 2, u'-\t    gcc_assert (DECL_LANG_SPECIFIC (r) == NULL);'), (82, 1, u'+\t\tgcc_assert (DECL_LANG_SPECIFIC (r) == NULL);')]
===========================================
===========================================
Total add: 77
Total del: 28
Header: tsubst_decl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 2, u'-\t    gcc_assert (DECL_LANG_SPECIFIC (r) == NULL);'), (82, 1, u'+\t\tgcc_assert (DECL_LANG_SPECIFIC (r) == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(50, 2, u'-\t    gcc_assert (DECL_LANG_SPECIFIC (r) == NULL);'), (82, 1, u'+\t\tgcc_assert (DECL_LANG_SPECIFIC (r) == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t  gcc_assert (DECL_HAS_VALUE_EXPR_P (t));')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: tsubst_copy_and_build
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t  gcc_assert (DECL_HAS_VALUE_EXPR_P (t));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t  gcc_assert (DECL_HAS_VALUE_EXPR_P (t));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_checking_assert (flag_next_runtime == 1 && flag_objc_abi == 2);')]
===========================================
===========================================
Total add: 2
Total del: 5
Header: darwin_objc2_section
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_checking_assert (flag_next_runtime == 1 && flag_objc_abi == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_checking_assert (flag_next_runtime == 1 && flag_objc_abi == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  gcc_checking_assert (flag_next_runtime == 1 && flag_objc_abi < 2);')]
===========================================
===========================================
Total add: 3
Total del: 6
Header: darwin_objc1_section
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  gcc_checking_assert (flag_next_runtime == 1 && flag_objc_abi < 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  gcc_checking_assert (flag_next_runtime == 1 && flag_objc_abi < 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!cfun->gimple_df);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: execute_init_datastructures
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!cfun->gimple_df);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!cfun->gimple_df);')]
===========================================
Class:class A 
Class:class B { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (!I_SYMBOL_BINDING (id));')]
===========================================
===========================================
Total add: 0
Total del: 3
Header: c_builtin_function_ext_scope
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (!I_SYMBOL_BINDING (id));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (!I_SYMBOL_BINDING (id));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (!current_function_decl || LAMBDA_FUNCTION_P (decl));'), (6, 1, u'+      gcc_assert (!current_function_decl);')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: check_member_template
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (!current_function_decl || LAMBDA_FUNCTION_P (decl));'), (6, 1, u'+      gcc_assert (!current_function_decl);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (!current_function_decl || LAMBDA_FUNCTION_P (decl));'), (6, 1, u'+      gcc_assert (!current_function_decl);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (!current_function_decl);'), (6, 1, u'+      gcc_assert (!current_function_decl || LAMBDA_FUNCTION_P (decl));')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: check_member_template
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (!current_function_decl);'), (6, 1, u'+      gcc_assert (!current_function_decl || LAMBDA_FUNCTION_P (decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (!current_function_decl);'), (6, 1, u'+      gcc_assert (!current_function_decl || LAMBDA_FUNCTION_P (decl));')]
===========================================
Class:class A { class A 
Class:  class B {   class B 
Class:class D { class D 
Class:class F { class F 
Class:class C { class C 
Class:template < typename > class new_allocator { template < typename > class new_allocator 
Class:template < typename _Tp > class allocator:__gnu_cxx::new_allocator < _Tp > { template < typename _Tp > class allocator:__gnu_cxx::new_allocator < _Tp > 
Class:class ios_base { class ios_base 
Class:template < typename, typename > class basic_ios:ios_base { template < typename, typename > class basic_ios:ios_base 
Class:class LogMessage { class LogMessage 
Class:class LogMessageVoidify { class LogMessageVoidify 
Class:class WeakPtrBase { class WeakPtrBase 
Class:class SupportsWeakPtrBase { class SupportsWeakPtrBase 
Class:  class Iterator {   class Iterator 
Class:template < class ObserverType, bool > class ObserverList:public ObserverListBase <     ObserverType > {     ObserverType > 
Class:class class
Class:class     ProxyConfigService {     ProxyConfigService 
Class:  class       Observer {       Observer 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (file != NULL);')]
===========================================
===========================================
Total add: 8
Total del: 9
Header: dot_rdg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (file != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (file != NULL);')]
===========================================
Class:class pass_rl78_move_elim : public rtl_opt_pass class pass_rl78_move_elim : public rtl_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (REG_P (base));'), (3, 1, u'+  gcc_assert (REG_P (newbase));')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: transcode_memory_rtx
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (REG_P (base));'), (3, 1, u'+  gcc_assert (REG_P (newbase));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (REG_P (base));'), (3, 1, u'+  gcc_assert (REG_P (newbase));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+\t  gcc_assert (index == NULL_RTX);'), (28, 1, u'+\t  gcc_assert (REG_P (base) && REGNO (base) == SP_REG);'), (51, 1, u'+\t  gcc_assert (index == NULL_RTX);'), (52, 1, u'+\t  gcc_assert (REG_P (base) && REGNO (base) == SP_REG);')]
===========================================
===========================================
Total add: 83
Total del: 2
Header: rl78_alloc_physical_registers_op2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+\t  gcc_assert (index == NULL_RTX);'), (28, 1, u'+\t  gcc_assert (REG_P (base) && REGNO (base) == SP_REG);'), (51, 1, u'+\t  gcc_assert (index == NULL_RTX);'), (52, 1, u'+\t  gcc_assert (REG_P (base) && REGNO (base) == SP_REG);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(27, 1, u'+\t  gcc_assert (index == NULL_RTX);'), (28, 1, u'+\t  gcc_assert (REG_P (base) && REGNO (base) == SP_REG);'), (51, 1, u'+\t  gcc_assert (index == NULL_RTX);'), (52, 1, u'+\t  gcc_assert (REG_P (base) && REGNO (base) == SP_REG);')]
===========================================
Class:class idocument_plugin_factory { class idocument_plugin_factory 
Class:template <typename _Iterator, typename> class __normal_iterator { template <typename _Iterator, typename> class __normal_iterator 
Class: class new_allocator { class new_allocator 
Class: class basic_string { class basic_string 
Class: class vector : _Vector_base { class vector : _Vector_base 
Class:class iplugin_factory { class iplugin_factory 
Class:class plugin_factory : public iplugin_factory { class plugin_factory : public iplugin_factory 
Class:template <typename plugin_t> class document_plugin_factory : plugin_factory, idocument_plugin_factory { class document_plugin_factory : plugin_factory, idocument_plugin_factory 
Class: class container { class container 
Class:template <class init_t> class initializer_t : init_t { template <class init_t> class initializer_t : init_t 
Class:class composition_t 
Class:template <typename value_t> class value_initializer_t { template <typename value_t> class value_initializer_t 
Class:class name_t 
Class:class label_t 
Class:class description_t 
Class:class owner_initializer_t 
Class:class set : vector 
Class:class node { class node 
Class:template <typename base_t> class mesh_selection_sink : base_t { template <typename base_t> class mesh_selection_sink : base_t 
Class: class selection_to_stdout : mesh_selection_sink<node> { class selection_to_stdout : mesh_selection_sink<node> 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t\t\t\t\t  handle_dominating_asserts,'), (11, 1, u'+\t\t\t\t\t\t handle_dominating_asserts,')]
===========================================
===========================================
Total add: 8
Total del: 7
Header: thread_around_empty_blocks
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t\t\t\t\t  handle_dominating_asserts,'), (11, 1, u'+\t\t\t\t\t\t handle_dominating_asserts,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t\t\t\t\t  handle_dominating_asserts,'), (11, 1, u'+\t\t\t\t\t\t handle_dominating_asserts,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+\t\t\t  gcc_assert (!callee->global.inlined_to);')]
===========================================
===========================================
Total add: 33
Total del: 2
Header: compute_ltrans_boundary
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+\t\t\t  gcc_assert (!callee->global.inlined_to);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+\t\t\t  gcc_assert (!callee->global.inlined_to);')]
===========================================
Class:    class ExecState;
Class:    class JSValue {     class JSValue 
Class:    class Vector {     class Vector 
Class:    class StringImpl;
Class:class StringImpl { class StringImpl 
Class:    class Register {     class Register 
Class:class UString { class UString 
Class:    class ExecState : private Register {     class ExecState : private Register 
Class:    class JSCell {     class JSCell 
Class:    class JSString : public JSCell {     class JSString : public JSCell 
Class:class JSStringBuilder { class JSStringBuilder 
Class:template <typename T> class Lexer { class Lexer 
Class:class DataEntryBase { class DataEntryBase 
Class: class Subscriptor { 
Class: class LagrangeEquidistant: public Polynomial<double> { 
Class:  class Nested: public LagrangeEquidistant   class Nested: public LagrangeEquidistant
Class: class Environment { class Environment 
Class: class EnvironmentImpl : public Environment { class EnvironmentImpl : public Environment 
Class:class DataEntryBase { class DataEntryBase 
Class: class Subscriptor { 
Class: class LagrangeEquidistant: public Polynomial<double> { 
Class:  class Nested: public LagrangeEquidistant   class Nested: public LagrangeEquidistant
Class: class Environment { class Environment 
Class: class EnvironmentImpl : public Environment { class EnvironmentImpl : public Environment 
Class:  class EtherCtrl { class EtherCtrl 
Class: class EtherFrameWithLLC { class EtherFrameWithLLC 
Class:   class Handler    class Handler
Class: class Subscriptor { 
Class: class Subscriptor { 
Class: class Subscriptor { 
Class: class LagrangeEquidistant: public Polynomial<double> { 
Class:   class Handler    class Handler
Class: class AstNode { class AstNode 
Class: class Expression: public AstNode { class Expression: public AstNode 
Class: class Literal: public Expression { class Literal: public Expression 
Class: class CallRuntime: public Expression { class CallRuntime: public Expression 
Class:                 class VA { 
Class: class VB { 
Class: class V : public VA, public VB { 
Class: class A : virtual public V { 
Class: class B : public A { 
Class: class C : public virtual V { 
Class: class AD { 
Class: class D : public AD, virtual public V { 
Class: class E : public B, virtual public V, public D, public C { 
Class: class XSerializable { 
Class: class Grammar: public XSerializable, public XMemory { 
Class: class SchemaGrammar : public Grammar { 
Class: class OtherGrammar : public Grammar { 
Class: class EtherCtrl { class EtherCtrl 
Class: class EtherFrameWithLLC { class EtherFrameWithLLC 
Class:   class Handler    class Handler
Class: class Subscriptor { 
Class: class Subscriptor { 
Class: class Subscriptor { 
Class: class LagrangeEquidistant: public Polynomial<double> { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (targets.length());')]
===========================================
===========================================
Total add: 8
Total del: 2
Header: walk_polymorphic_call_targets
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (targets.length());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (targets.length());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t\tgcc_assert (targets.length());')]
===========================================
===========================================
Total add: 1
Total del: 18
Header: ipa_devirt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t\tgcc_assert (targets.length());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t\tgcc_assert (targets.length());')]
===========================================
Class:class B { class B 
Class:class A : public B { class A : public B 
Class:    class A a;
Class:    class B b;
Class:class B { class B 
Class:class A : public B { class A : public B 
Class:    class A a;
Class:class B { class B 
Class:class A : public B { class A : public B 
Class:    class A a;
Class:    class B b;
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (addr_wide_int (cookie_size).ltu_p(max_size));'), (3, 1, u'+      gcc_checking_assert (wi::ltu_p (cookie_size, max_size));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: build_new_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (addr_wide_int (cookie_size).ltu_p(max_size));'), (3, 1, u'+      gcc_checking_assert (wi::ltu_p (cookie_size, max_size));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (addr_wide_int (cookie_size).ltu_p(max_size));'), (3, 1, u'+      gcc_checking_assert (wi::ltu_p (cookie_size, max_size));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert (wmax.fits_uhwi_p ());'), (5, 1, u'+\t  gcc_assert (wi::fits_uhwi_p (wmax));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: write_array_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert (wmax.fits_uhwi_p ());'), (5, 1, u'+\t  gcc_assert (wi::fits_uhwi_p (wmax));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert (wmax.fits_uhwi_p ());'), (5, 1, u'+\t  gcc_assert (wi::fits_uhwi_p (wmax));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!wtmp.zero_p ());'), (3, 1, u'+      gcc_assert (wtmp != 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: gfc_conv_array_initializer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!wtmp.zero_p ());'), (3, 1, u'+      gcc_assert (wtmp != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!wtmp.zero_p ());'), (3, 1, u'+      gcc_assert (wtmp != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (root->offset.les_p (ref->offset));'), (3, 1, u'+  gcc_assert (wi::les_p (root->offset, ref->offset));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: add_ref_to_chain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (root->offset.les_p (ref->offset));'), (3, 1, u'+  gcc_assert (wi::les_p (root->offset, ref->offset));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (root->offset.les_p (ref->offset));'), (3, 1, u'+  gcc_assert (wi::les_p (root->offset, ref->offset));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (dist.fits_uhwi_p ());'), (3, 1, u'+  gcc_assert (wi::fits_uhwi_p (dist));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: add_ref_to_chain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (dist.fits_uhwi_p ());'), (3, 1, u'+  gcc_assert (wi::fits_uhwi_p (dist));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (dist.fits_uhwi_p ());'), (3, 1, u'+  gcc_assert (wi::fits_uhwi_p (dist));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_checking_assert (i_bound == max_wide_int (bound));'), (3, 1, u'+    gcc_checking_assert (i_bound == bound);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: record_estimate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_checking_assert (i_bound == max_wide_int (bound));'), (3, 1, u'+    gcc_checking_assert (i_bound == bound);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_checking_assert (i_bound == max_wide_int (bound));'), (3, 1, u'+    gcc_checking_assert (i_bound == bound);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (cst.zero_p ());'), (3, 1, u'+      gcc_assert (cst == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: wide_int_to_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (cst.zero_p ());'), (3, 1, u'+      gcc_assert (cst == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (cst.zero_p ());'), (3, 1, u'+      gcc_assert (cst == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (TREE_INT_CST_NUNITS (t) == cst.get_len ());'), (3, 1, u'+\t  gcc_assert (TREE_INT_CST_NUNITS (t) == int (cst.get_len ()));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: wide_int_to_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (TREE_INT_CST_NUNITS (t) == cst.get_len ());'), (3, 1, u'+\t  gcc_assert (TREE_INT_CST_NUNITS (t) == int (cst.get_len ()));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (TREE_INT_CST_NUNITS (t) == cst.get_len ());'), (3, 1, u'+\t  gcc_assert (TREE_INT_CST_NUNITS (t) == int (cst.get_len ()));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tgcc_assert (wide_int::eq_p (((tree)*slot), t));'), (3, 1, u'+\tgcc_assert (wi::eq_p (tree (*slot), t));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: cache_integer_cst
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tgcc_assert (wide_int::eq_p (((tree)*slot), t));'), (3, 1, u'+\tgcc_assert (wi::eq_p (tree (*slot), t));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\tgcc_assert (wide_int::eq_p (((tree)*slot), t));'), (3, 1, u'+\tgcc_assert (wi::eq_p (tree (*slot), t));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (i.fits_uhwi_p ());'), (3, 1, u'+  gcc_assert (wi::fits_uhwi_p (i));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: array_size_for_constructor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (i.fits_uhwi_p ());'), (3, 1, u'+  gcc_assert (wi::fits_uhwi_p (i));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (i.fits_uhwi_p ());'), (3, 1, u'+  gcc_assert (wi::fits_uhwi_p (i));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  gcc_assert (precision >= offset);'), (108, 2, u'-  gcc_assert (precision >= offset);')]
===========================================
===========================================
Total add: 51
Total del: 101
Header: wide_int_ro::fits_to_tree_p
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  gcc_assert (precision >= offset);'), (108, 2, u'-  gcc_assert (precision >= offset);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  gcc_assert (precision >= offset);'), (108, 2, u'-  gcc_assert (precision >= offset);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_checking_assert (op0.precision >= width);'), (8, 1, u'+  gcc_checking_assert (precision >= width);')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: wide_int_ro::insert
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_checking_assert (op0.precision >= width);'), (8, 1, u'+  gcc_checking_assert (precision >= width);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_checking_assert (op0.precision >= width);'), (8, 1, u'+  gcc_checking_assert (precision >= width);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_checking_assert (precision);')]
===========================================
===========================================
Total add: 8
Total del: 25
Header: wide_int_ro::xor_large
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_checking_assert (precision);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-  gcc_checking_assert (precision);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 2, u'-  gcc_checking_assert (precision);'), (112, 2, u'-  gcc_checking_assert (precision);'), (135, 2, u'-  gcc_checking_assert (precision);')]
===========================================
===========================================
Total add: 34
Total del: 174
Header: wide_int_ro::add_large
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 2, u'-  gcc_checking_assert (precision);'), (112, 2, u'-  gcc_checking_assert (precision);'), (135, 2, u'-  gcc_checking_assert (precision);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(34, 2, u'-  gcc_checking_assert (precision);'), (112, 2, u'-  gcc_checking_assert (precision);'), (135, 2, u'-  gcc_checking_assert (precision);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-  gcc_checking_assert (precision);'), (66, 2, u'-  gcc_checking_assert (precision);')]
===========================================
===========================================
Total add: 14
Total del: 73
Header: wi_pack
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-  gcc_checking_assert (precision);'), (66, 2, u'-  gcc_checking_assert (precision);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(32, 2, u'-  gcc_checking_assert (precision);'), (66, 2, u'-  gcc_checking_assert (precision);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-  gcc_checking_assert (precision);')]
===========================================
===========================================
Total add: 8
Total del: 28
Header: wide_int_ro::mul_internal
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-  gcc_checking_assert (precision);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 2, u'-  gcc_checking_assert (precision);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert (decl_binds_to_current_def_p (new_decl));')]
===========================================
===========================================
Total add: 39
Total del: 2
Header: symtab_nonoverwritable_alias
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert (decl_binds_to_current_def_p (new_decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+  gcc_assert (decl_binds_to_current_def_p (new_decl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u"-      gcc_assert (!strchr (IDENTIFIER_POINTER (v), '.'));")]
===========================================
===========================================
Total add: 0
Total del: 3
Header: hash_type_name
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u"-      gcc_assert (!strchr (IDENTIFIER_POINTER (v), '.'));")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u"-      gcc_assert (!strchr (IDENTIFIER_POINTER (v), '.'));")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u"-      gcc_assert (!strchr (IDENTIFIER_POINTER (v1), '.')")]
===========================================
===========================================
Total add: 0
Total del: 7
Header: types_same_for_odr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u"-      gcc_assert (!strchr (IDENTIFIER_POINTER (v1), '.')")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u"-      gcc_assert (!strchr (IDENTIFIER_POINTER (v1), '.')")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+      gcc_assert (targets.length());')]
===========================================
===========================================
Total add: 70
Total del: 0
Header: varpool_finalize_decl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+      gcc_assert (targets.length());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+      gcc_assert (targets.length());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 2, u'-\t\t\t      gcc_assert (targets.length());')]
===========================================
===========================================
Total add: 2
Total del: 61
Header: analyze_functions
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 2, u'-\t\t\t      gcc_assert (targets.length());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(39, 2, u'-\t\t\t      gcc_assert (targets.length());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t\t\t   bool handle_dominating_asserts,'), (31, 1, u'+\t\t\t    bool handle_dominating_asserts,')]
===========================================
===========================================
Total add: 16
Total del: 17
Header: propagate_threaded_block_debug_into
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t\t\t   bool handle_dominating_asserts,'), (31, 1, u'+\t\t\t    bool handle_dominating_asserts,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-\t\t\t   bool handle_dominating_asserts,'), (31, 1, u'+\t\t\t    bool handle_dominating_asserts,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t\t\t\t\t  handle_dominating_asserts,')]
===========================================
===========================================
Total add: 24
Total del: 3
Header: thread_around_empty_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t\t\t\t\t  handle_dominating_asserts,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t\t\t\t\t  handle_dominating_asserts,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\t\t\t  handle_dominating_asserts,')]
===========================================
===========================================
Total add: 11
Total del: 4
Header: thread_around_empty_block
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\t\t\t  handle_dominating_asserts,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\t\t\t  handle_dominating_asserts,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\t\t\t\t  handle_dominating_asserts,'), (18, 1, u'+\t\t\t\t\t  handle_dominating_asserts,')]
===========================================
===========================================
Total add: 6
Total del: 14
Header: thread_across_edge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\t\t\t\t  handle_dominating_asserts,'), (18, 1, u'+\t\t\t\t\t  handle_dominating_asserts,')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t\t\t\t\t\t  handle_dominating_asserts,'), (18, 1, u'+\t\t\t\t\t  handle_dominating_asserts,')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (to_del);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: remove_described_reference
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (to_del);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (to_del);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      gcc_checking_assert (cs->callee'), (15, 1, u'+      gcc_checking_assert (ok);')]
===========================================
===========================================
Total add: 10
Total del: 5
Header: try_make_edge_direct_simple_call
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      gcc_checking_assert (cs->callee'), (15, 1, u'+      gcc_checking_assert (ok);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      gcc_checking_assert (cs->callee'), (15, 1, u'+      gcc_checking_assert (ok);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\t  gcc_checking_assert (ok);')]
===========================================
===========================================
Total add: 3
Total del: 1
Header: propagate_controlled_uses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\t  gcc_checking_assert (ok);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t\t  gcc_checking_assert (ok);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t      gcc_checking_assert (n);'), (9, 1, u'+\t      gcc_checking_assert (ref);'), (12, 1, u'+\t      gcc_checking_assert (ipa_refdesc_pool);')]
===========================================
===========================================
Total add: 18
Total del: 0
Header: ipa_edge_duplication_hook
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t      gcc_checking_assert (n);'), (9, 1, u'+\t      gcc_checking_assert (ref);'), (12, 1, u'+\t      gcc_checking_assert (ipa_refdesc_pool);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t      gcc_checking_assert (n);'), (9, 1, u'+\t      gcc_checking_assert (ref);'), (12, 1, u'+\t      gcc_checking_assert (ipa_refdesc_pool);')]
===========================================
Class:   class A { 
Class:   class A { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-  gcc_assert (num_regs && num_regs <= 16);'), (19, 1, u'+  gcc_assert (num_regs > 0 && num_regs <= 14);'), (20, 1, u'+  gcc_assert (!(saved_regs_mask & (1 << SP_REGNUM)));'), (21, 1, u'+  gcc_assert (!(saved_regs_mask & (1 << PC_REGNUM)));'), (52, 2, u'-  gcc_assert (!(saved_regs_mask & (1 << SP_REGNUM)));'), (53, 2, u'-  gcc_assert (!(saved_regs_mask & (1 << PC_REGNUM)));')]
===========================================
===========================================
Total add: 130
Total del: 91
Header: thumb2_emit_strd_push
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-  gcc_assert (num_regs && num_regs <= 16);'), (19, 1, u'+  gcc_assert (num_regs > 0 && num_regs <= 14);'), (20, 1, u'+  gcc_assert (!(saved_regs_mask & (1 << SP_REGNUM)));'), (21, 1, u'+  gcc_assert (!(saved_regs_mask & (1 << PC_REGNUM)));'), (52, 2, u'-  gcc_assert (!(saved_regs_mask & (1 << SP_REGNUM)));'), (53, 2, u'-  gcc_assert (!(saved_regs_mask & (1 << PC_REGNUM)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-  gcc_assert (num_regs && num_regs <= 16);'), (19, 1, u'+  gcc_assert (num_regs > 0 && num_regs <= 14);'), (20, 1, u'+  gcc_assert (!(saved_regs_mask & (1 << SP_REGNUM)));'), (21, 1, u'+  gcc_assert (!(saved_regs_mask & (1 << PC_REGNUM)));'), (52, 2, u'-  gcc_assert (!(saved_regs_mask & (1 << SP_REGNUM)));'), (53, 2, u'-  gcc_assert (!(saved_regs_mask & (1 << PC_REGNUM)));')]
===========================================
Class:  class A { class A 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u"+      gcc_assert (!strchr (IDENTIFIER_POINTER (v), '.'));")]
===========================================
===========================================
Total add: 20
Total del: 0
Header: hash_type_name
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u"+      gcc_assert (!strchr (IDENTIFIER_POINTER (v), '.'));")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 1, u"+      gcc_assert (!strchr (IDENTIFIER_POINTER (v), '.'));")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u"+      gcc_assert (!strchr (IDENTIFIER_POINTER (v1), '.')")]
===========================================
===========================================
Total add: 39
Total del: 0
Header: types_same_for_odr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u"+      gcc_assert (!strchr (IDENTIFIER_POINTER (v1), '.')")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u"+      gcc_assert (!strchr (IDENTIFIER_POINTER (v1), '.')")]
===========================================
Class:  class ToBeDeprecated { class ToBeDeprecated 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      go_assert(this->dfn_ == NULL);')]
===========================================
===========================================
Total add: 2
Total del: 5
Header: Func_descriptor_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      go_assert(this->dfn_ == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-      go_assert(this->dfn_ == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(this->dfn_ != NULL);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: Func_descriptor_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(this->dfn_ != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(this->dfn_ != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  go_assert(cp != NULL')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: Bound_method_expression::create_thunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  go_assert(cp != NULL')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  go_assert(cp != NULL')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(i + closure_arg == nargs);'), (3, 1, u'+      go_assert(i == nargs);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(i + closure_arg == nargs);'), (3, 1, u'+      go_assert(i == nargs);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(i + closure_arg == nargs);'), (3, 1, u'+      go_assert(i == nargs);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(!no->is_function()'), (10, 2, u'-\t  go_assert(closure_arg == 1 && nargs > 0);')]
===========================================
===========================================
Total add: 6
Total del: 5
Header: Call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(!no->is_function()'), (10, 2, u'-\t  go_assert(closure_arg == 1 && nargs > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(!no->is_function()'), (10, 2, u'-\t  go_assert(closure_arg == 1 && nargs > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(closure_arg == 1 && nargs > 0);')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: Call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(closure_arg == 1 && nargs > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(closure_arg == 1 && nargs > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(closure_arg == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: Call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(closure_arg == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      go_assert(closure_arg == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    go_assert(closure_tree == NULL_TREE);'), (11, 1, u'+      go_assert(closure_tree != NULL_TREE);')]
===========================================
===========================================
Total add: 26
Total del: 0
Header: Call_expression::do_get_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    go_assert(closure_tree == NULL_TREE);'), (11, 1, u'+      go_assert(closure_tree != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+    go_assert(closure_tree == NULL_TREE);'), (11, 1, u'+      go_assert(closure_tree != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  go_assert(cp != NULL')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: Interface_field_reference_expression::create_thunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  go_assert(cp != NULL')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-  go_assert(cp != NULL')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t      go_assert(old_params != NULL_TREE'), (18, 2, u'-\t\t  go_assert(TYPE_P(p));')]
===========================================
===========================================
Total add: 0
Total del: 24
Header: Function::get_or_make_decl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t      go_assert(old_params != NULL_TREE'), (18, 2, u'-\t\t  go_assert(TYPE_P(p));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-\t      go_assert(old_params != NULL_TREE'), (18, 2, u'-\t\t  go_assert(TYPE_P(p));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t  go_assert(old_params != NULL_TREE && old_params != void_list_node);'), (15, 2, u'-\t      go_assert(TYPE_P(p));')]
===========================================
===========================================
Total add: 0
Total del: 20
Header: Function_declaration::get_or_make_decl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t  go_assert(old_params != NULL_TREE && old_params != void_list_node);'), (15, 2, u'-\t      go_assert(TYPE_P(p));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t  go_assert(old_params != NULL_TREE && old_params != void_list_node);'), (15, 2, u'-\t      go_assert(TYPE_P(p));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  go_assert(TREE_CODE(var_decl) == PARM_DECL);'), (5, 1, u'+\t  go_assert(TREE_CODE(var_decl) == VAR_DECL);')]
===========================================
===========================================
Total add: 17
Total del: 17
Header: Function::build_tree
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  go_assert(TREE_CODE(var_decl) == PARM_DECL);'), (5, 1, u'+\t  go_assert(TREE_CODE(var_decl) == VAR_DECL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  go_assert(TREE_CODE(var_decl) == PARM_DECL);'), (5, 1, u'+\t  go_assert(TREE_CODE(var_decl) == VAR_DECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 2, u'-\t  go_assert(p_no != NULL')]
===========================================
===========================================
Total add: 0
Total del: 69
Header: Function::determine_types
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 2, u'-\t  go_assert(p_no != NULL')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(49, 2, u'-\t  go_assert(p_no != NULL')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  go_assert(!this->is_descriptor_wrapper_);')]
===========================================
===========================================
Total add: 1
Total del: 15
Header: Function::descriptor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  go_assert(!this->is_descriptor_wrapper_);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  go_assert(!this->is_descriptor_wrapper_);')]
===========================================
Class:  class Expression_statement : public Statement { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      go_assert(i == bparameters.size());'), (5, 2, u'-  go_assert(last + 1 == bparameters.size());')]
===========================================
===========================================
Total add: 1
Total del: 5
Header: Function_type::do_get_backend
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      go_assert(i == bparameters.size());'), (5, 2, u'-  go_assert(last + 1 == bparameters.size());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      go_assert(i == bparameters.size());'), (5, 2, u'-  go_assert(last + 1 == bparameters.size());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (dr->aux);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: vect_compute_data_ref_alignment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (dr->aux);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (dr->aux);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (dr->aux);'), (10, 2, u'-  gcc_assert (base_aligned')]
===========================================
===========================================
Total add: 3
Total del: 7
Header: vect_compute_data_ref_alignment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (dr->aux);'), (10, 2, u'-  gcc_assert (base_aligned')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+      gcc_assert (dr->aux);'), (10, 2, u'-  gcc_assert (base_aligned')]
===========================================
Class:class pass_ipa_profile : public ipa_opt_pass_d class pass_ipa_profile : public ipa_opt_pass_d
Class:class pass_ipa_profile : public ipa_opt_pass_d class pass_ipa_profile : public ipa_opt_pass_d
Class:  class A { class A 
Class:  class B : public A { class B : public A 
Class:class pass_ipa_devirt : public ipa_opt_pass_d class pass_ipa_devirt : public ipa_opt_pass_d
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_checking_assert (code != CONSTRUCTOR && code != TREE_BINFO);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: lto_fixup_prevailing_decls
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_checking_assert (code != CONSTRUCTOR && code != TREE_BINFO);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_checking_assert (code != CONSTRUCTOR && code != TREE_BINFO);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_checking_assert (fixed);')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: lto_fixup_prevailing_decls
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_checking_assert (fixed);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_checking_assert (fixed);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    gcc_assert (emit_label_in_global_context_p (gimple_label_label (stmt))')]
===========================================
===========================================
Total add: 0
Total del: 3
Header: input_gimple_stmt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    gcc_assert (emit_label_in_global_context_p (gimple_label_label (stmt))')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-    gcc_assert (emit_label_in_global_context_p (gimple_label_label (stmt))')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+      gcc_assert (state);'), (61, 1, u'+      gcc_assert (!*slot);'), (152, 1, u'+\t  gcc_assert (!e->speculative);'), (160, 1, u'+\t  gcc_assert (!e->speculative);')]
===========================================
===========================================
Total add: 171
Total del: 0
Header: debug_varpool_node_set
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+      gcc_assert (state);'), (61, 1, u'+      gcc_assert (!*slot);'), (152, 1, u'+\t  gcc_assert (!e->speculative);'), (160, 1, u'+\t  gcc_assert (!e->speculative);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(47, 1, u'+      gcc_assert (state);'), (61, 1, u'+      gcc_assert (!*slot);'), (152, 1, u'+\t  gcc_assert (!e->speculative);'), (160, 1, u'+\t  gcc_assert (!e->speculative);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (TREE_CODE (component_type) == RECORD_TYPE')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: ipa_set_jf_known_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (TREE_CODE (component_type) == RECORD_TYPE')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (TREE_CODE (component_type) == RECORD_TYPE')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  gcc_checking_assert (cold_bb_count);')]
===========================================
===========================================
Total add: 103
Total del: 0
Header: fix_up_crossing_landing_pad
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  gcc_checking_assert (cold_bb_count);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+  gcc_checking_assert (cold_bb_count);')]
===========================================
Class:  class type_info {   class type_info 
Class:class __class_type_info : public std::type_info { class __class_type_info : public std::type_info 
Class:  class __si_class_type_info : public __class_type_info { class __si_class_type_info : public __class_type_info 
Class: class __base_class_type_info { class __base_class_type_info 
Class:  class __vmi_class_type_info : public __class_type_info { class __vmi_class_type_info : public __class_type_info 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (!node->symbol.alias && !node->symbol.weakref);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: symtab_nonoverwritable_alias
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (!node->symbol.alias && !node->symbol.weakref);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (!node->symbol.alias && !node->symbol.weakref);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      pp_expression (pp, STATIC_ASSERT_CONDITION (t));'), (6, 2, u'-      pp_expression (pp, STATIC_ASSERT_MESSAGE (t));'), (10, 1, u'+      expression (STATIC_ASSERT_CONDITION (t));'), (12, 1, u'+      expression (STATIC_ASSERT_MESSAGE (t));')]
===========================================
===========================================
Total add: 7
Total del: 7
Header: pp_cxx_declaration
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      pp_expression (pp, STATIC_ASSERT_CONDITION (t));'), (6, 2, u'-      pp_expression (pp, STATIC_ASSERT_MESSAGE (t));'), (10, 1, u'+      expression (STATIC_ASSERT_CONDITION (t));'), (12, 1, u'+      expression (STATIC_ASSERT_MESSAGE (t));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      pp_expression (pp, STATIC_ASSERT_CONDITION (t));'), (6, 2, u'-      pp_expression (pp, STATIC_ASSERT_MESSAGE (t));'), (10, 1, u'+      expression (STATIC_ASSERT_CONDITION (t));'), (12, 1, u'+      expression (STATIC_ASSERT_MESSAGE (t));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (!phis.is_empty ());')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: vect_finalize_reduction:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (!phis.is_empty ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-      gcc_assert (!phis.is_empty ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      gcc_assert (LAMBDA_TYPE_P (DECL_CONTEXT (t)));')]
===========================================
===========================================
Total add: 0
Total del: 9
Header: dump_function_decl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      gcc_assert (LAMBDA_TYPE_P (DECL_CONTEXT (t)));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      gcc_assert (LAMBDA_TYPE_P (DECL_CONTEXT (t)));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      retval |= register_edge_assert_for_1 (gimple_assign_rhs1 (op_def),'), (4, 2, u'-      retval |= register_edge_assert_for_1 (gimple_assign_rhs2 (op_def),'), (10, 1, u'+\tretval |= register_edge_assert_for_1 (op0, code, e, bsi);'), (13, 1, u'+\tretval |= register_edge_assert_for_1 (op1, code, e, bsi);')]
===========================================
===========================================
Total add: 8
Total del: 4
Header: register_edge_assert_for_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      retval |= register_edge_assert_for_1 (gimple_assign_rhs1 (op_def),'), (4, 2, u'-      retval |= register_edge_assert_for_1 (gimple_assign_rhs2 (op_def),'), (10, 1, u'+\tretval |= register_edge_assert_for_1 (op0, code, e, bsi);'), (13, 1, u'+\tretval |= register_edge_assert_for_1 (op1, code, e, bsi);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      retval |= register_edge_assert_for_1 (gimple_assign_rhs1 (op_def),'), (4, 2, u'-      retval |= register_edge_assert_for_1 (gimple_assign_rhs2 (op_def),'), (10, 1, u'+\tretval |= register_edge_assert_for_1 (op0, code, e, bsi);'), (13, 1, u'+\tretval |= register_edge_assert_for_1 (op1, code, e, bsi);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                  gcc_assert (*num_args < (MAX_SET_SIZE - 1));')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: register_construction_vtables
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                  gcc_assert (*num_args < (MAX_SET_SIZE - 1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-                  gcc_assert (*num_args < (MAX_SET_SIZE - 1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-              gcc_assert (*num_args < (MAX_SET_SIZE - 1));')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: register_other_binfo_vtables
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-              gcc_assert (*num_args < (MAX_SET_SIZE - 1));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-              gcc_assert (*num_args < (MAX_SET_SIZE - 1));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (!TREE_ASM_WRITTEN (scc->entries[i]));'), (3, 1, u'+\t  gcc_checking_assert (!TREE_ASM_WRITTEN (scc->entries[i]));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: unify_scc
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (!TREE_ASM_WRITTEN (scc->entries[i]));'), (3, 1, u'+\t  gcc_checking_assert (!TREE_ASM_WRITTEN (scc->entries[i]));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (!TREE_ASM_WRITTEN (scc->entries[i]));'), (3, 1, u'+\t  gcc_checking_assert (!TREE_ASM_WRITTEN (scc->entries[i]));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t  gcc_checking_assert (ipa_get_jf_pass_through_operation (jfunc)')]
===========================================
===========================================
Total add: 11
Total del: 2
Header: ipa_get_jf_pass_through_result
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t  gcc_checking_assert (ipa_get_jf_pass_through_operation (jfunc)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t  gcc_checking_assert (ipa_get_jf_pass_through_operation (jfunc)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  gcc_checking_assert (src->type == IPA_JF_CONST);')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: ipa_set_jf_known_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  gcc_checking_assert (src->type == IPA_JF_CONST);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  gcc_checking_assert (src->type == IPA_JF_CONST);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t  gcc_assert (!is_simd);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: lower_rec_input_clauses
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t  gcc_assert (!is_simd);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t\t  gcc_assert (!is_simd);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+  gcc_assert (!gimple_in_ssa_p (cfun));')]
===========================================
===========================================
Total add: 305
Total del: 0
Header: expand_omp_taskreg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+  gcc_assert (!gimple_in_ssa_p (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(65, 1, u'+  gcc_assert (!gimple_in_ssa_p (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      gcc_assert (!gimple_in_ssa_p (cfun));')]
===========================================
===========================================
Total add: 5
Total del: 96
Header: expand_omp_for_generic
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      gcc_assert (!gimple_in_ssa_p (cfun));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-      gcc_assert (!gimple_in_ssa_p (cfun));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (gimple_omp_for_kind (fd.for_stmt)')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: expand_omp_for
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (gimple_omp_for_kind (fd.for_stmt)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (gimple_omp_for_kind (fd.for_stmt)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t  gcc_assert (TREE_CODE (uid) == SSA_NAME);')]
===========================================
===========================================
Total add: 19
Total del: 4
Header: get_references_in_stmt
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t  gcc_assert (TREE_CODE (uid) == SSA_NAME);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t  gcc_assert (TREE_CODE (uid) == SSA_NAME);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+\t\t\t\t  gcc_assert (TREE_CODE (arg) == SSA_NAME);')]
===========================================
===========================================
Total add: 48
Total del: 3
Header: again:
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+\t\t\t\t  gcc_assert (TREE_CODE (arg) == SSA_NAME);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 1, u'+\t\t\t\t  gcc_assert (TREE_CODE (arg) == SSA_NAME);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t  gcc_assert (nargs == 0);')]
===========================================
===========================================
Total add: 20
Total del: 5
Header: vectorizable_call
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t  gcc_assert (nargs == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 1, u'+\t  gcc_assert (nargs == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (bb == bb->loop_father->header')]
===========================================
===========================================
Total add: 0
Total del: 3
Header: predicate_scalar_phi
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (bb == bb->loop_father->header')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (bb == bb->loop_father->header')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t      gcc_assert (TREE_TYPE (TREE_OPERAND (fns, 0))')]
===========================================
===========================================
Total add: 0
Total del: 11
Header: grokfndecl
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t      gcc_assert (TREE_TYPE (TREE_OPERAND (fns, 0))')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t      gcc_assert (TREE_TYPE (TREE_OPERAND (fns, 0))')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t  gcc_assert (s0 == src.regno_msb);')]
===========================================
===========================================
Total add: 85
Total del: 1
Header: avr_out_fract
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t  gcc_assert (s0 == src.regno_msb);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+\t  gcc_assert (s0 == src.regno_msb);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  gcc_assert (init);'), (16, 1, u'+      gcc_assert (in_lto_p);')]
===========================================
===========================================
Total add: 13
Total del: 3
Header: gimple_get_virt_method_for_binfo
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  gcc_assert (init);'), (16, 1, u'+      gcc_assert (in_lto_p);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+  gcc_assert (init);'), (16, 1, u'+      gcc_assert (in_lto_p);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (e && e2 && ref);')]
===========================================
===========================================
Total add: 5
Total del: 0
Header: cgraph_speculative_call_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (e && e2 && ref);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (e && e2 && ref);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      pp_cxx_expression (pp, STATIC_ASSERT_CONDITION (t));'), (3, 1, u'+      pp_expression (pp, STATIC_ASSERT_CONDITION (t));'), (5, 2, u'-      pp_cxx_expression (pp, STATIC_ASSERT_MESSAGE (t));'), (6, 1, u'+      pp_expression (pp, STATIC_ASSERT_MESSAGE (t));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: pp_cxx_declaration
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      pp_cxx_expression (pp, STATIC_ASSERT_CONDITION (t));'), (3, 1, u'+      pp_expression (pp, STATIC_ASSERT_CONDITION (t));'), (5, 2, u'-      pp_cxx_expression (pp, STATIC_ASSERT_MESSAGE (t));'), (6, 1, u'+      pp_expression (pp, STATIC_ASSERT_MESSAGE (t));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      pp_cxx_expression (pp, STATIC_ASSERT_CONDITION (t));'), (3, 1, u'+      pp_expression (pp, STATIC_ASSERT_CONDITION (t));'), (5, 2, u'-      pp_cxx_expression (pp, STATIC_ASSERT_MESSAGE (t));'), (6, 1, u'+      pp_expression (pp, STATIC_ASSERT_MESSAGE (t));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tgcc_assert (result.val[0] == sext_hwi (result.val[0], prec));')]
===========================================
===========================================
Total add: 6
Total del: 0
Header: wide_int_ro::from_rtx
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tgcc_assert (result.val[0] == sext_hwi (result.val[0], prec));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\tgcc_assert (result.val[0] == sext_hwi (result.val[0], prec));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+      gcc_assert (tb_base);')]
===========================================
===========================================
Total add: 19
Total del: 1
Header: gfc_extend_assign
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+      gcc_assert (tb_base);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+      gcc_assert (tb_base);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-\t  gcc_assert (tb_base);')]
===========================================
===========================================
Total add: 12
Total del: 38
Header: gfc_extend_assign
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-\t  gcc_assert (tb_base);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-\t  gcc_assert (tb_base);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+\t\t\t      gcc_assert (targets.length());')]
===========================================
===========================================
Total add: 67
Total del: 20
Header: analyze_functions
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+\t\t\t      gcc_assert (targets.length());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+\t\t\t      gcc_assert (targets.length());')]
===========================================
Class:class A { class A 
Class:  class B { class B 
Class:class A : public B { class A : public B 
Class:    class A a;
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (code == PLUS_EXPR && TREE_TYPE (acc) == sizetype);')]
===========================================
===========================================
Total add: 7
Total del: 1
Header: adjust_return_value_with_ops
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (code == PLUS_EXPR && TREE_TYPE (acc) == sizetype);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (code == PLUS_EXPR && TREE_TYPE (acc) == sizetype);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+          gcc_assert (!duplicated);')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: print_reg
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+          gcc_assert (!duplicated);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+          gcc_assert (!duplicated);')]
===========================================
Class:class Q { 
Class: class A { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (TREE_CODE (type) == RECORD_TYPE);')]
===========================================
===========================================
Total add: 17
Total del: 0
Header: cgraph_create_indirect_edge
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (TREE_CODE (type) == RECORD_TYPE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 1, u'+      gcc_assert (TREE_CODE (type) == RECORD_TYPE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (TYPE_BEING_DEFINED (current_class_type));'), (6, 1, u'+  gcc_assert (TYPE_BEING_DEFINED (current_class_type)')]
===========================================
===========================================
Total add: 4
Total del: 2
Header: push_class_level_binding_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (TYPE_BEING_DEFINED (current_class_type));'), (6, 1, u'+  gcc_assert (TYPE_BEING_DEFINED (current_class_type)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (TYPE_BEING_DEFINED (current_class_type));'), (6, 1, u'+  gcc_assert (TYPE_BEING_DEFINED (current_class_type)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (TREE_CODE (ref) == METHOD_TYPE);'), (6, 1, u'+  gcc_checking_assert (TREE_CODE (ref) == METHOD_TYPE')]
===========================================
===========================================
Total add: 5
Total del: 1
Header: obj_type_ref_class
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (TREE_CODE (ref) == METHOD_TYPE);'), (6, 1, u'+  gcc_checking_assert (TREE_CODE (ref) == METHOD_TYPE')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_checking_assert (TREE_CODE (ref) == METHOD_TYPE);'), (6, 1, u'+  gcc_checking_assert (TREE_CODE (ref) == METHOD_TYPE')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  gcc_assert (REG_P (addis_reg) && REG_P (target));'), (11, 1, u'+  gcc_assert (REGNO (addis_reg) == REGNO (target));')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: emit_fusion_gpr_load
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  gcc_assert (REG_P (addis_reg) && REG_P (target));'), (11, 1, u'+  gcc_assert (REGNO (addis_reg) == REGNO (target));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+  gcc_assert (REG_P (addis_reg) && REG_P (target));'), (11, 1, u'+  gcc_assert (REGNO (addis_reg) == REGNO (target));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  gcc_assert (MEM_P (mem));')]
===========================================
===========================================
Total add: 10
Total del: 2
Header: emit_fusion_gpr_load
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  gcc_assert (MEM_P (mem));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(14, 1, u'+  gcc_assert (MEM_P (mem));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (extend_insn != NULL);')]
===========================================
===========================================
Total add: 8
Total del: 0
Header: emit_fusion_gpr_load
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (extend_insn != NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (extend_insn != NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (j < HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: c_readstr
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (j < HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (j < HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t    gcc_assert (tree_fits_uhwi_p (format_num_expr));'), (5, 2, u'-\t    gcc_assert (TREE_CODE (format_num_expr) == INTEGER_CST')]
===========================================
===========================================
Total add: 3
Total del: 4
Header: check_function_arguments_recurse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t    gcc_assert (tree_fits_uhwi_p (format_num_expr));'), (5, 2, u'-\t    gcc_assert (TREE_CODE (format_num_expr) == INTEGER_CST')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t    gcc_assert (tree_fits_uhwi_p (format_num_expr));'), (5, 2, u'-\t    gcc_assert (TREE_CODE (format_num_expr) == INTEGER_CST')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (tree_low_cst (DECL_SIZE_UNIT (decl), 1) != 0);'), (3, 1, u'+      gcc_assert (tree_to_uhwi (DECL_SIZE_UNIT (decl)) != 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: machopic_select_section
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (tree_low_cst (DECL_SIZE_UNIT (decl), 1) != 0);'), (3, 1, u'+      gcc_assert (tree_to_uhwi (DECL_SIZE_UNIT (decl)) != 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (tree_low_cst (DECL_SIZE_UNIT (decl), 1) != 0);'), (3, 1, u'+      gcc_assert (tree_to_uhwi (DECL_SIZE_UNIT (decl)) != 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 2, u'-\t  gcc_assert (!overflow);'), (31, 1, u'+\t  gcc_assert (!overall_overflow);')]
===========================================
===========================================
Total add: 16
Total del: 13
Header: sparc_fold_builtin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 2, u'-\t  gcc_assert (!overflow);'), (31, 1, u'+\t  gcc_assert (!overall_overflow);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(30, 2, u'-\t  gcc_assert (!overflow);'), (31, 1, u'+\t  gcc_assert (!overall_overflow);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (TREE_INT_CST (cookie_size).ult (max_size));'), (3, 1, u'+      gcc_checking_assert (addr_wide_int (cookie_size).ltu_p(max_size));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: build_new_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (TREE_INT_CST (cookie_size).ult (max_size));'), (3, 1, u'+      gcc_checking_assert (addr_wide_int (cookie_size).ltu_p(max_size));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (TREE_INT_CST (cookie_size).ult (max_size));'), (3, 1, u'+      gcc_checking_assert (addr_wide_int (cookie_size).ltu_p(max_size));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  gcc_assert (dmax.fits_uhwi ());'), (10, 1, u'+\t  gcc_assert (wmax.fits_uhwi_p ());')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: write_array_type
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  gcc_assert (dmax.fits_uhwi ());'), (10, 1, u'+\t  gcc_assert (wmax.fits_uhwi_p ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  gcc_assert (dmax.fits_uhwi ());'), (10, 1, u'+\t  gcc_assert (wmax.fits_uhwi_p ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-\t  gcc_assert (!(low & ~low_mask));')]
===========================================
===========================================
Total add: 18
Total del: 51
Header: stabstr_O
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-\t  gcc_assert (!(low & ~low_mask));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(46, 2, u'-\t  gcc_assert (!(low & ~low_mask));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t    gcc_assert (i > 0);')]
===========================================
===========================================
Total add: 13
Total del: 0
Header: print_die
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t    gcc_assert (i > 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\t    gcc_assert (i > 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t  gcc_assert (mode == GET_MODE (rtl) || VOIDmode == GET_MODE (rtl));')]
===========================================
===========================================
Total add: 20
Total del: 6
Header: loc_descriptor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t  gcc_assert (mode == GET_MODE (rtl) || VOIDmode == GET_MODE (rtl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t  gcc_assert (mode == GET_MODE (rtl) || VOIDmode == GET_MODE (rtl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t      gcc_assert (elt_size == 2 * sizeof (HOST_WIDE_INT));')]
===========================================
===========================================
Total add: 2
Total del: 9
Header: loc_descriptor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t      gcc_assert (elt_size == 2 * sizeof (HOST_WIDE_INT));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t      gcc_assert (elt_size == 2 * sizeof (HOST_WIDE_INT));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t    gcc_assert (elt_size == 2 * sizeof (HOST_WIDE_INT));')]
===========================================
===========================================
Total add: 2
Total del: 9
Header: add_const_value_attribute
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t    gcc_assert (elt_size == 2 * sizeof (HOST_WIDE_INT));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 2, u'-\t\t    gcc_assert (elt_size == 2 * sizeof (HOST_WIDE_INT));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (host_integerp (region_nr_t, 0));'), (4, 1, u'+  gcc_assert (tree_fits_shwi_p (region_nr_t));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: expand_builtin_eh_common
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (host_integerp (region_nr_t, 0));'), (4, 1, u'+  gcc_assert (tree_fits_shwi_p (region_nr_t));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (host_integerp (region_nr_t, 0));'), (4, 1, u'+  gcc_assert (tree_fits_shwi_p (region_nr_t));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-\t  gcc_assert (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
Total add: 2
Total del: 32
Header: plus_constant
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-\t  gcc_assert (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(29, 2, u'-\t  gcc_assert (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (pow != HOST_BITS_PER_DOUBLE_INT);'), (17, 2, u'-  gcc_assert (!mhigh.high || val.high - d < d);'), (18, 2, u'-  gcc_assert (mhigh.high <= 1 && mlow.high <= 1);'), (20, 2, u'-  gcc_assert (mlow.ult (mhigh));')]
===========================================
===========================================
Total add: 4
Total del: 14
Header: choose_multiplier
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (pow != HOST_BITS_PER_DOUBLE_INT);'), (17, 2, u'-  gcc_assert (!mhigh.high || val.high - d < d);'), (18, 2, u'-  gcc_assert (mhigh.high <= 1 && mlow.high <= 1);'), (20, 2, u'-  gcc_assert (mlow.ult (mhigh));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (pow != HOST_BITS_PER_DOUBLE_INT);'), (17, 2, u'-  gcc_assert (!mhigh.high || val.high - d < d);'), (18, 2, u'-  gcc_assert (mhigh.high <= 1 && mlow.high <= 1);'), (20, 2, u'-  gcc_assert (mlow.ult (mhigh));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (arg1) <= 2);')]
===========================================
===========================================
Total add: 10
Total del: 1
Header: fold_convert_const_fixed_from_int
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (arg1) <= 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (arg1) <= 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (tmp && INTEGER_CST_P (tmp));'), (10, 1, u'+      gcc_assert (!wtmp.zero_p ());')]
===========================================
===========================================
Total add: 4
Total del: 11
Header: gfc_conv_array_initializer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (tmp && INTEGER_CST_P (tmp));'), (10, 1, u'+      gcc_assert (!wtmp.zero_p ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (tmp && INTEGER_CST_P (tmp));'), (10, 1, u'+      gcc_assert (!wtmp.zero_p ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (INTEGER_CST_P (length));'), (3, 2, u'-  gcc_assert (TREE_INT_CST_HIGH (length) == 0);'), (4, 1, u'+  gcc_assert (cst_fits_uhwi_p (length));')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: gfc_conv_string_init
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (INTEGER_CST_P (length));'), (3, 2, u'-  gcc_assert (TREE_INT_CST_HIGH (length) == 0);'), (4, 1, u'+  gcc_assert (cst_fits_uhwi_p (length));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (INTEGER_CST_P (length));'), (3, 2, u'-  gcc_assert (TREE_INT_CST_HIGH (length) == 0);'), (4, 1, u'+  gcc_assert (cst_fits_uhwi_p (length));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(TREE_CODE(t) == INTEGER_CST);'), (3, 2, u'-  gcc_assert(TREE_INT_CST_HIGH(t) == 0);'), (5, 1, u'+  gcc_assert(cst_fits_uhwi_p (t));')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: Gcc_backend::type_size
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(TREE_CODE(t) == INTEGER_CST);'), (3, 2, u'-  gcc_assert(TREE_INT_CST_HIGH(t) == 0);'), (5, 1, u'+  gcc_assert(cst_fits_uhwi_p (t));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert(TREE_CODE(t) == INTEGER_CST);'), (3, 2, u'-  gcc_assert(TREE_INT_CST_HIGH(t) == 0);'), (5, 1, u'+  gcc_assert(cst_fits_uhwi_p (t));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  gcc_assert (REG_BR_PROB_BASE < 32768);'), (15, 2, u'-\t  gcc_assert (!of);')]
===========================================
===========================================
Total add: 2
Total del: 15
Header: predict_iv_comparison
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  gcc_assert (REG_BR_PROB_BASE < 32768);'), (15, 2, u'-\t  gcc_assert (!of);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 2, u'-\t  gcc_assert (REG_BR_PROB_BASE < 32768);'), (15, 2, u'-\t  gcc_assert (!of);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u"+\tgcc_assert (s[0] == '0');"), (23, 1, u"+\tgcc_assert (s[1] == 'x');")]
===========================================
===========================================
Total add: 50
Total del: 0
Header: read_rtx_code
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u"+\tgcc_assert (s[0] == '0');"), (23, 1, u"+\tgcc_assert (s[1] == 'x');")]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(22, 1, u"+\tgcc_assert (s[0] == '0');"), (23, 1, u"+\tgcc_assert (s[1] == 'x');")]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+      gcc_assert (HOST_BITS_PER_WIDE_INT == 2*HOST_BITS_PER_LONG);'), (26, 2, u'-\t  gcc_assert (HOST_BITS_PER_WIDE_INT == 2*HOST_BITS_PER_LONG);')]
===========================================
===========================================
Total add: 31
Total del: 21
Header: real_to_integer2
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+      gcc_assert (HOST_BITS_PER_WIDE_INT == 2*HOST_BITS_PER_LONG);'), (26, 2, u'-\t  gcc_assert (HOST_BITS_PER_WIDE_INT == 2*HOST_BITS_PER_LONG);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+      gcc_assert (HOST_BITS_PER_WIDE_INT == 2*HOST_BITS_PER_LONG);'), (26, 2, u'-\t  gcc_assert (HOST_BITS_PER_WIDE_INT == 2*HOST_BITS_PER_LONG);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t  gcc_assert (HOST_BITS_PER_LONG*2 == HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
Total add: 92
Total del: 10
Header: real_from_integer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t  gcc_assert (HOST_BITS_PER_LONG*2 == HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(21, 1, u'+\t  gcc_assert (HOST_BITS_PER_LONG*2 == HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (CONST_WIDE_INT_NUNITS (value) == 2);')]
===========================================
===========================================
Total add: 16
Total del: 0
Header: split_double
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (CONST_WIDE_INT_NUNITS (value) == 2);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+      gcc_assert (CONST_WIDE_INT_NUNITS (value) == 2);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-\tgcc_assert (hv >= 0);')]
===========================================
===========================================
Total add: 10
Total del: 13
Header: simplify_const_unary_operation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-\tgcc_assert (hv >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-\tgcc_assert (hv >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+      gcc_assert (width <= HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
Total add: 14
Total del: 4
Header: simplify_const_unary_operation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+      gcc_assert (width <= HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+      gcc_assert (width <= HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t  gcc_assert (op_mode != VOIDmode);'), (10, 2, u'-\t      gcc_assert (width == op_width);')]
===========================================
===========================================
Total add: 1
Total del: 15
Header: simplify_const_unary_operation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t  gcc_assert (op_mode != VOIDmode);'), (10, 2, u'-\t      gcc_assert (width == op_width);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 2, u'-\t  gcc_assert (op_mode != VOIDmode);'), (10, 2, u'-\t      gcc_assert (width == op_width);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t      gcc_assert (width == op_width);')]
===========================================
===========================================
Total add: 1
Total del: 19
Header: simplify_const_unary_operation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t      gcc_assert (width == op_width);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-\t      gcc_assert (width == op_width);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(137, 2, u'-\t  gcc_assert (op_mode != VOIDmode);')]
===========================================
===========================================
Total add: 0
Total del: 160
Header: simplify_const_unary_operation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(137, 2, u'-\t  gcc_assert (op_mode != VOIDmode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(137, 2, u'-\t  gcc_assert (op_mode != VOIDmode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+      gcc_assert (width <= HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
Total add: 16
Total del: 8
Header: simplify_const_binary_operation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+      gcc_assert (width <= HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(26, 1, u'+      gcc_assert (width <= HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (host_integerp (size, 1));'), (7, 1, u'+  gcc_assert (tree_fits_uhwi_p (size));')]
===========================================
===========================================
Total add: 5
Total del: 5
Header: finish_bitfield_representative
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (host_integerp (size, 1));'), (7, 1, u'+  gcc_assert (tree_fits_uhwi_p (size));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (host_integerp (size, 1));'), (7, 1, u'+  gcc_assert (tree_fits_uhwi_p (size));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (root->offset.sle (ref->offset));'), (6, 1, u'+  gcc_assert (root->offset.les_p (ref->offset));')]
===========================================
===========================================
Total add: 3
Total del: 3
Header: add_ref_to_chain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (root->offset.sle (ref->offset));'), (6, 1, u'+  gcc_assert (root->offset.les_p (ref->offset));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-  gcc_assert (root->offset.sle (ref->offset));'), (6, 1, u'+  gcc_assert (root->offset.les_p (ref->offset));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (dist.fits_uhwi ());'), (3, 1, u'+  gcc_assert (dist.fits_uhwi_p ());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: add_ref_to_chain
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (dist.fits_uhwi ());'), (3, 1, u'+  gcc_assert (dist.fits_uhwi_p ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (dist.fits_uhwi ());'), (3, 1, u'+  gcc_assert (dist.fits_uhwi_p ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert ((mask.low & (aligni - 1)) == 0);'), (3, 2, u'-      gcc_assert ((value.low & (aligni - 1)) == 0);'), (5, 1, u'+      gcc_assert ((mask.to_uhwi () & (aligni - 1)) == 0);'), (6, 1, u'+      gcc_assert ((value.to_uhwi () & (aligni - 1)) == 0);')]
===========================================
===========================================
Total add: 4
Total del: 4
Header: bit_value_assume_aligned
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert ((mask.low & (aligni - 1)) == 0);'), (3, 2, u'-      gcc_assert ((value.low & (aligni - 1)) == 0);'), (5, 1, u'+      gcc_assert ((mask.to_uhwi () & (aligni - 1)) == 0);'), (6, 1, u'+      gcc_assert ((value.to_uhwi () & (aligni - 1)) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert ((mask.low & (aligni - 1)) == 0);'), (3, 2, u'-      gcc_assert ((value.low & (aligni - 1)) == 0);'), (5, 1, u'+      gcc_assert ((mask.to_uhwi () & (aligni - 1)) == 0);'), (6, 1, u'+      gcc_assert ((value.to_uhwi () & (aligni - 1)) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (cst_and_fits_in_hwi (x));'), (3, 2, u'-      gcc_assert (cst_and_fits_in_hwi (mask));'), (4, 1, u'+      gcc_assert (cst_fits_shwi_p (x));'), (5, 1, u'+      gcc_assert (cst_fits_shwi_p (mask));')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: inverse
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (cst_and_fits_in_hwi (x));'), (3, 2, u'-      gcc_assert (cst_and_fits_in_hwi (mask));'), (4, 1, u'+      gcc_assert (cst_fits_shwi_p (x));'), (5, 1, u'+      gcc_assert (cst_fits_shwi_p (mask));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (cst_and_fits_in_hwi (x));'), (3, 2, u'-      gcc_assert (cst_and_fits_in_hwi (mask));'), (4, 1, u'+      gcc_assert (cst_fits_shwi_p (x));'), (5, 1, u'+      gcc_assert (cst_fits_shwi_p (mask));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_checking_assert (i_bound == tree_to_double_int (bound));'), (3, 1, u'+    gcc_checking_assert (i_bound == max_wide_int (bound));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: record_estimate
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_checking_assert (i_bound == tree_to_double_int (bound));'), (3, 1, u'+    gcc_checking_assert (i_bound == max_wide_int (bound));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-    gcc_checking_assert (i_bound == tree_to_double_int (bound));'), (3, 1, u'+    gcc_checking_assert (i_bound == max_wide_int (bound));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (unsignedp);'), (3, 1, u'+      gcc_assert (sign_p == UNSIGNED);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: expand_vector_divmod
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (unsignedp);'), (3, 1, u'+      gcc_assert (sign_p == UNSIGNED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (unsignedp);'), (3, 1, u'+      gcc_assert (sign_p == UNSIGNED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (unsignedp);'), (3, 1, u'+      gcc_assert (sign_p == UNSIGNED);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: expand_vector_divmod
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (unsignedp);'), (3, 1, u'+      gcc_assert (sign_p == UNSIGNED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (unsignedp);'), (3, 1, u'+      gcc_assert (sign_p == UNSIGNED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!unsignedp);'), (3, 1, u'+      gcc_assert (sign_p == SIGNED);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: expand_vector_divmod
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!unsignedp);'), (3, 1, u'+      gcc_assert (sign_p == SIGNED);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (!unsignedp);'), (3, 1, u'+      gcc_assert (sign_p == SIGNED);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-   OMP_CLAUSE nodes, which is enforced by asserts in tree_code_size.'), (5, 1, u'+   INTEGER_CST or OMP_CLAUSE nodes, which is enforced by asserts in')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: allocate_decl_uid
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-   OMP_CLAUSE nodes, which is enforced by asserts in tree_code_size.'), (5, 1, u'+   INTEGER_CST or OMP_CLAUSE nodes, which is enforced by asserts in')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-   OMP_CLAUSE nodes, which is enforced by asserts in tree_code_size.'), (5, 1, u'+   INTEGER_CST or OMP_CLAUSE nodes, which is enforced by asserts in')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\tgcc_assert (tmp.elt (l - 2) < 0);'), (17, 1, u'+\t\tgcc_assert (tmp.elt (l - 2) >= 0);')]
===========================================
===========================================
Total add: 16
Total del: 4
Header: force_fit_type_double
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\tgcc_assert (tmp.elt (l - 2) < 0);'), (17, 1, u'+\t\tgcc_assert (tmp.elt (l - 2) >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(15, 1, u'+\t\tgcc_assert (tmp.elt (l - 2) < 0);'), (17, 1, u'+\t\tgcc_assert (tmp.elt (l - 2) >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\tgcc_assert (pcst.elt (l - 2) < 0);'), (15, 1, u'+\tgcc_assert (pcst.elt (l - 2) >= 0);')]
===========================================
===========================================
Total add: 20
Total del: 0
Header: build_int_cst_wide
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\tgcc_assert (pcst.elt (l - 2) < 0);'), (15, 1, u'+\tgcc_assert (pcst.elt (l - 2) >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\tgcc_assert (pcst.elt (l - 2) < 0);'), (15, 1, u'+\tgcc_assert (pcst.elt (l - 2) >= 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (hi == 0 && low == 0);'), (3, 1, u'+      gcc_assert (cst.zero_p ());')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: build_int_cst_wide
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (hi == 0 && low == 0);'), (3, 1, u'+      gcc_assert (cst.zero_p ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (hi == 0 && low == 0);'), (3, 1, u'+      gcc_assert (cst.zero_p ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (TREE_INT_CST_LOW (t) == low);'), (3, 2, u'-\t  gcc_assert (TREE_INT_CST_HIGH (t) == hi);'), (4, 1, u'+\t  gcc_assert (TREE_INT_CST_NUNITS (t) == cst.get_len ());'), (6, 1, u'+\t    gcc_assert (TREE_INT_CST_ELT (t, i) == cst.elt (i));')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: build_int_cst_wide
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (TREE_INT_CST_LOW (t) == low);'), (3, 2, u'-\t  gcc_assert (TREE_INT_CST_HIGH (t) == hi);'), (4, 1, u'+\t  gcc_assert (TREE_INT_CST_NUNITS (t) == cst.get_len ());'), (6, 1, u'+\t    gcc_assert (TREE_INT_CST_ELT (t, i) == cst.elt (i));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (TREE_INT_CST_LOW (t) == low);'), (3, 2, u'-\t  gcc_assert (TREE_INT_CST_HIGH (t) == hi);'), (4, 1, u'+\t  gcc_assert (TREE_INT_CST_NUNITS (t) == cst.get_len ());'), (6, 1, u'+\t    gcc_assert (TREE_INT_CST_ELT (t, i) == cst.elt (i));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (hi == 0 && low == 0);'), (3, 1, u'+      gcc_assert (integer_zerop (t));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: cache_integer_cst
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (hi == 0 && low == 0);'), (3, 1, u'+      gcc_assert (integer_zerop (t));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (hi == 0 && low == 0);'), (3, 1, u'+      gcc_assert (integer_zerop (t));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert (TREE_INT_CST_LOW ((tree)*slot) == low'), (9, 1, u'+\tgcc_assert (wide_int::eq_p (((tree)*slot), t));')]
===========================================
===========================================
Total add: 4
Total del: 7
Header: cache_integer_cst
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert (TREE_INT_CST_LOW ((tree)*slot) == low'), (9, 1, u'+\tgcc_assert (wide_int::eq_p (((tree)*slot), t));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-\t  gcc_assert (TREE_INT_CST_LOW ((tree)*slot) == low'), (9, 1, u'+\tgcc_assert (wide_int::eq_p (((tree)*slot), t));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-      gcc_assert (shift_amount <= HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
Total add: 1
Total del: 29
Header: integer_all_onesp
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-      gcc_assert (shift_amount <= HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-      gcc_assert (shift_amount <= HOST_BITS_PER_WIDE_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (TREE_INT_CST_HIGH (x) == 0'), (8, 1, u'+  gcc_assert (cst_fits_shwi_p (x));')]
===========================================
===========================================
Total add: 2
Total del: 3
Header: int_cst_value
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (TREE_INT_CST_HIGH (x) == 0'), (8, 1, u'+  gcc_assert (cst_fits_shwi_p (x));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-  gcc_assert (TREE_INT_CST_HIGH (x) == 0'), (8, 1, u'+  gcc_assert (cst_fits_shwi_p (x));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) <= 2);'), (13, 2, u'-  gcc_assert (TREE_INT_CST_HIGH (x) == 0'), (15, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) == 1);')]
===========================================
===========================================
Total add: 8
Total del: 4
Header: widest_int_cst_value
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) <= 2);'), (13, 2, u'-  gcc_assert (TREE_INT_CST_HIGH (x) == 0'), (15, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) == 1);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) <= 2);'), (13, 2, u'-  gcc_assert (TREE_INT_CST_HIGH (x) == 0'), (15, 1, u'+  gcc_assert (TREE_INT_CST_NUNITS (x) == 1);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  gcc_assert (i.fits_uhwi ());'), (12, 1, u'+  gcc_assert (i.fits_uhwi_p ());')]
===========================================
===========================================
Total add: 4
Total del: 5
Header: array_size_for_constructor
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  gcc_assert (i.fits_uhwi ());'), (12, 1, u'+  gcc_assert (i.fits_uhwi_p ());')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-  gcc_assert (i.fits_uhwi ());'), (12, 1, u'+  gcc_assert (i.fits_uhwi_p ());')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t      gcc_assert (shift < HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
Total add: 5
Total del: 14
Header: output_constructor_bitfield
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t      gcc_assert (shift < HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 2, u'-\t      gcc_assert (shift < HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t      gcc_assert (shift < HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
Total add: 2
Total del: 8
Header: output_constructor_bitfield
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t      gcc_assert (shift < HOST_BITS_PER_DOUBLE_INT);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 2, u'-\t      gcc_assert (shift < HOST_BITS_PER_DOUBLE_INT);')]
===========================================
Class:class C : B <_Tp> 
Class:template <class U, class V> struct G : F <U, V> { 
Class:template <class U, class V> struct H : G <U, V> { 
Class:template <class U, class V> struct I : H <U, V>, E <U> { 
Class:template <class U, class V> void G <U, V>::g3 () { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (!e->speculative && !e->indirect_unknown_callee);'), (3, 1, u'+\t  gcc_assert (e->speculative && !e->indirect_unknown_callee);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: cgraph_speculative_call_info
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (!e->speculative && !e->indirect_unknown_callee);'), (3, 1, u'+\t  gcc_assert (e->speculative && !e->indirect_unknown_callee);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (!e->speculative && !e->indirect_unknown_callee);'), (3, 1, u'+\t  gcc_assert (e->speculative && !e->indirect_unknown_callee);')]
===========================================
Class:class complex2 
Class:class complex2 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!*slot);'), (5, 1, u'+      gcc_assert (((struct cgraph_edge *)*slot)->speculative);'), (8, 1, u'+  gcc_assert (!*slot || e->speculative);')]
===========================================
===========================================
Total add: 6
Total del: 1
Header: cgraph_add_edge_to_call_site_hash
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!*slot);'), (5, 1, u'+      gcc_assert (((struct cgraph_edge *)*slot)->speculative);'), (8, 1, u'+  gcc_assert (!*slot || e->speculative);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (!*slot);'), (5, 1, u'+      gcc_assert (((struct cgraph_edge *)*slot)->speculative);'), (8, 1, u'+  gcc_assert (!*slot || e->speculative);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (!cgraph_edge (caller, call_stmt));'), (5, 1, u'+      gcc_checking_assert (!(e=cgraph_edge (caller, call_stmt)) || e->speculative);')]
===========================================
===========================================
Total add: 4
Total del: 1
Header: cgraph_create_edge_1
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (!cgraph_edge (caller, call_stmt));'), (5, 1, u'+      gcc_checking_assert (!(e=cgraph_edge (caller, call_stmt)) || e->speculative);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_checking_assert (!cgraph_edge (caller, call_stmt));'), (5, 1, u'+      gcc_checking_assert (!(e=cgraph_edge (caller, call_stmt)) || e->speculative);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 1, u'+\t  gcc_assert (!e->speculative && !e->indirect_unknown_callee);'), (91, 1, u'+  gcc_assert (e->speculative && e2->speculative);')]
===========================================
===========================================
Total add: 104
Total del: 0
Header: cgraph_set_edge_callee
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 1, u'+\t  gcc_assert (!e->speculative && !e->indirect_unknown_callee);'), (91, 1, u'+  gcc_assert (e->speculative && e2->speculative);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(83, 1, u'+\t  gcc_assert (!e->speculative && !e->indirect_unknown_callee);'), (91, 1, u'+  gcc_assert (e->speculative && e2->speculative);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (edge->indirect_unknown_callee);')]
===========================================
===========================================
Total add: 15
Total del: 1
Header: cgraph_redirect_edge_callee
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (edge->indirect_unknown_callee);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+  gcc_assert (edge->indirect_unknown_callee);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t  gcc_assert (e2->speculative);')]
===========================================
===========================================
Total add: 44
Total del: 0
Header: cgraph_redirect_edge_call_stmt_to_callee
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t  gcc_assert (e2->speculative);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(17, 1, u'+\t  gcc_assert (e2->speculative);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\tgcc_assert (!edge->indirect_unknown_callee);')]
===========================================
===========================================
Total add: 17
Total del: 1
Header: cgraph_set_call_stmt_including_clones
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\tgcc_assert (!edge->indirect_unknown_callee);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 1, u'+\t\tgcc_assert (!edge->indirect_unknown_callee);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+\t\t\t  gcc_assert (!edge->indirect_unknown_callee);')]
===========================================
===========================================
Total add: 44
Total del: 17
Header: copy_bb
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+\t\t\t  gcc_assert (!edge->indirect_unknown_callee);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(19, 1, u'+\t\t\t  gcc_assert (!edge->indirect_unknown_callee);')]
===========================================
Class:  class Foo1 { 
Class: class Foo2 { 
Class: class Foo3 { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      lra_assert (GET_MODE_SIZE (GET_MODE (mem_pseudo))')]
===========================================
===========================================
Total add: 3
Total del: 2
Header: emit_spill_move
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      lra_assert (GET_MODE_SIZE (GET_MODE (mem_pseudo))')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      lra_assert (GET_MODE_SIZE (GET_MODE (mem_pseudo))')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-      gcc_assert (n_old_labels <= n_labels);')]
===========================================
===========================================
Total add: 1
Total del: 19
Header: shorten_branches
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-      gcc_assert (n_old_labels <= n_labels);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(16, 2, u'-      gcc_assert (n_old_labels <= n_labels);')]
===========================================
Class:  class Foo1 { 
Class: class Foo2 { 
Class: class Foo3 { 
Class:class pass_vtable_verify : public gimple_opt_pass class pass_vtable_verify : public gimple_opt_pass
Class:class DataEntryBase { class DataEntryBase 
Class: class Subscriptor { 
Class: class LagrangeEquidistant: public Polynomial<double> { 
Class:  class Nested: public LagrangeEquidistant   class Nested: public LagrangeEquidistant
Class: class Environment { class Environment 
Class: class EnvironmentImpl : public Environment { class EnvironmentImpl : public Environment 
Class: class EtherCtrl { class EtherCtrl 
Class: class EtherFrameWithLLC { class EtherFrameWithLLC 
Class:   class Handler    class Handler
Class: class Subscriptor { 
Class: class Subscriptor { 
Class: class Subscriptor { 
Class: class LagrangeEquidistant: public Polynomial<double> { 
Class:class pass_rl78_devirt : public rtl_opt_pass class pass_rl78_devirt : public rtl_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-\t  gcc_assert (DECL_STRUCT_FUNCTION (decl) == NULL);')]
===========================================
===========================================
Total add: 2
Total del: 29
Header: lto_materialize_function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-\t  gcc_assert (DECL_STRUCT_FUNCTION (decl) == NULL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 2, u'-\t  gcc_assert (DECL_STRUCT_FUNCTION (decl) == NULL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (!DECL_CONTEXT (decl)')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: cgraph_finalize_function
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (!DECL_CONTEXT (decl)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+      gcc_assert (!DECL_CONTEXT (decl)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t  gcc_assert (TREE_CODE (se.expr) == CONSTRUCTOR);')]
===========================================
===========================================
Total add: 9
Total del: 1
Header: gfc_conv_initializer
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t  gcc_assert (TREE_CODE (se.expr) == CONSTRUCTOR);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+\t  gcc_assert (TREE_CODE (se.expr) == CONSTRUCTOR);')]
===========================================
Class:class pass_asan : public gimple_opt_pass class pass_asan : public gimple_opt_pass
Class:class pass_asan_O0 : public gimple_opt_pass class pass_asan_O0 : public gimple_opt_pass
Class:class pass_inc_dec : public rtl_opt_pass class pass_inc_dec : public rtl_opt_pass
Class:class pass_reorder_blocks : public rtl_opt_pass class pass_reorder_blocks : public rtl_opt_pass
Class:class pass_duplicate_computed_gotos : public rtl_opt_pass class pass_duplicate_computed_gotos : public rtl_opt_pass
Class:class pass_partition_blocks : public rtl_opt_pass class pass_partition_blocks : public rtl_opt_pass
Class:class pass_branch_target_load_optimize1 : public rtl_opt_pass class pass_branch_target_load_optimize1 : public rtl_opt_pass
Class:class pass_branch_target_load_optimize2 : public rtl_opt_pass class pass_branch_target_load_optimize2 : public rtl_opt_pass
Class:class pass_jump : public rtl_opt_pass class pass_jump : public rtl_opt_pass
Class:class pass_jump2 : public rtl_opt_pass class pass_jump2 : public rtl_opt_pass
Class:class pass_expand : public rtl_opt_pass class pass_expand : public rtl_opt_pass
Class:class pass_free_cfg : public rtl_opt_pass class pass_free_cfg : public rtl_opt_pass
Class:class pass_into_cfg_layout_mode : public rtl_opt_pass class pass_into_cfg_layout_mode : public rtl_opt_pass
Class:class pass_outof_cfg_layout_mode : public rtl_opt_pass class pass_outof_cfg_layout_mode : public rtl_opt_pass
Class:class pass_build_cgraph_edges : public gimple_opt_pass class pass_build_cgraph_edges : public gimple_opt_pass
Class:class pass_rebuild_cgraph_edges : public gimple_opt_pass class pass_rebuild_cgraph_edges : public gimple_opt_pass
Class:class pass_remove_cgraph_callee_edges : public gimple_opt_pass class pass_remove_cgraph_callee_edges : public gimple_opt_pass
Class:class pass_stack_adjustments : public rtl_opt_pass class pass_stack_adjustments : public rtl_opt_pass
Class:class pass_combine : public rtl_opt_pass class pass_combine : public rtl_opt_pass
Class:class pass_compare_elim_after_reload : public rtl_opt_pass class pass_compare_elim_after_reload : public rtl_opt_pass
Class:class pass_mode_switch_use : public rtl_opt_pass class pass_mode_switch_use : public rtl_opt_pass
Class:class pass_resolve_sw_modes : public rtl_opt_pass class pass_resolve_sw_modes : public rtl_opt_pass
Class:class pass_insert_vzeroupper : public rtl_opt_pass class pass_insert_vzeroupper : public rtl_opt_pass
Class:class pass_mips_machine_reorg2 : public rtl_opt_pass class pass_mips_machine_reorg2 : public rtl_opt_pass
Class:class pass_work_around_errata : public rtl_opt_pass class pass_work_around_errata : public rtl_opt_pass
Class:class pass_rtl_cprop : public rtl_opt_pass class pass_rtl_cprop : public rtl_opt_pass
Class:class pass_cse : public rtl_opt_pass class pass_cse : public rtl_opt_pass
Class:class pass_cse2 : public rtl_opt_pass class pass_cse2 : public rtl_opt_pass
Class:class pass_cse_after_global_opts : public rtl_opt_pass class pass_cse_after_global_opts : public rtl_opt_pass
Class:class pass_ud_rtl_dce : public rtl_opt_pass class pass_ud_rtl_dce : public rtl_opt_pass
Class:class pass_fast_rtl_dce : public rtl_opt_pass class pass_fast_rtl_dce : public rtl_opt_pass
Class:class pass_df_initialize_opt : public rtl_opt_pass class pass_df_initialize_opt : public rtl_opt_pass
Class:class pass_df_initialize_no_opt : public rtl_opt_pass class pass_df_initialize_no_opt : public rtl_opt_pass
Class:class pass_df_finish : public rtl_opt_pass class pass_df_finish : public rtl_opt_pass
Class:class pass_rtl_dse1 : public rtl_opt_pass class pass_rtl_dse1 : public rtl_opt_pass
Class:class pass_rtl_dse2 : public rtl_opt_pass class pass_rtl_dse2 : public rtl_opt_pass
Class:class pass_dwarf2_frame : public rtl_opt_pass class pass_dwarf2_frame : public rtl_opt_pass
Class:class pass_set_nothrow_function_flags : public rtl_opt_pass class pass_set_nothrow_function_flags : public rtl_opt_pass
Class:class pass_convert_to_eh_region_ranges : public rtl_opt_pass class pass_convert_to_eh_region_ranges : public rtl_opt_pass
Class:class pass_compute_alignments : public rtl_opt_pass class pass_compute_alignments : public rtl_opt_pass
Class:class pass_final : public rtl_opt_pass class pass_final : public rtl_opt_pass
Class:class pass_shorten_branches : public rtl_opt_pass class pass_shorten_branches : public rtl_opt_pass
Class:class pass_clean_state : public rtl_opt_pass class pass_clean_state : public rtl_opt_pass
Class:class pass_instantiate_virtual_regs : public rtl_opt_pass class pass_instantiate_virtual_regs : public rtl_opt_pass
Class:class pass_leaf_regs : public rtl_opt_pass class pass_leaf_regs : public rtl_opt_pass
Class:class pass_thread_prologue_and_epilogue : public rtl_opt_pass class pass_thread_prologue_and_epilogue : public rtl_opt_pass
Class:class pass_match_asm_constraints : public rtl_opt_pass class pass_match_asm_constraints : public rtl_opt_pass
Class:class pass_rtl_fwprop : public rtl_opt_pass class pass_rtl_fwprop : public rtl_opt_pass
Class:class pass_rtl_fwprop_addr : public rtl_opt_pass class pass_rtl_fwprop_addr : public rtl_opt_pass
Class:class pass_rtl_pre : public rtl_opt_pass class pass_rtl_pre : public rtl_opt_pass
Class:class pass_rtl_hoist : public rtl_opt_pass class pass_rtl_hoist : public rtl_opt_pass
Class:class pass_lower_cf : public gimple_opt_pass class pass_lower_cf : public gimple_opt_pass
Class:class pass_strength_reduction : public gimple_opt_pass class pass_strength_reduction : public gimple_opt_pass
Class:class pass_rtl_ifcvt : public rtl_opt_pass class pass_rtl_ifcvt : public rtl_opt_pass
Class:class pass_if_after_combine : public rtl_opt_pass class pass_if_after_combine : public rtl_opt_pass
Class:class pass_if_after_reload : public rtl_opt_pass class pass_if_after_reload : public rtl_opt_pass
Class:class pass_initialize_regs : public rtl_opt_pass class pass_initialize_regs : public rtl_opt_pass
Class:class pass_ipa_cp : public ipa_opt_pass_d class pass_ipa_cp : public ipa_opt_pass_d
Class:class pass_inline_parameters : public gimple_opt_pass class pass_inline_parameters : public gimple_opt_pass
Class:class pass_early_inline : public gimple_opt_pass class pass_early_inline : public gimple_opt_pass
Class:class pass_ipa_inline : public ipa_opt_pass_d class pass_ipa_inline : public ipa_opt_pass_d
Class:class pass_ipa_pure_const : public ipa_opt_pass_d class pass_ipa_pure_const : public ipa_opt_pass_d
Class:class pass_local_pure_const : public gimple_opt_pass class pass_local_pure_const : public gimple_opt_pass
Class:class pass_ipa_reference : public ipa_opt_pass_d class pass_ipa_reference : public ipa_opt_pass_d
Class:class pass_split_functions : public gimple_opt_pass class pass_split_functions : public gimple_opt_pass
Class:class pass_feedback_split_functions : public gimple_opt_pass class pass_feedback_split_functions : public gimple_opt_pass
Class:class pass_ipa_function_and_variable_visibility : public simple_ipa_opt_pass class pass_ipa_function_and_variable_visibility : public simple_ipa_opt_pass
Class:class pass_ipa_free_inline_summary : public simple_ipa_opt_pass class pass_ipa_free_inline_summary : public simple_ipa_opt_pass
Class:class pass_ipa_whole_program_visibility : public ipa_opt_pass_d class pass_ipa_whole_program_visibility : public ipa_opt_pass_d
Class:class pass_ipa_profile : public ipa_opt_pass_d class pass_ipa_profile : public ipa_opt_pass_d
Class:class pass_ipa_cdtor_merge : public ipa_opt_pass_d class pass_ipa_cdtor_merge : public ipa_opt_pass_d
Class:class pass_ira : public rtl_opt_pass class pass_ira : public rtl_opt_pass
Class:class pass_reload : public rtl_opt_pass class pass_reload : public rtl_opt_pass
Class:class pass_cleanup_barriers : public rtl_opt_pass class pass_cleanup_barriers : public rtl_opt_pass
Class:class pass_loop2 : public rtl_opt_pass class pass_loop2 : public rtl_opt_pass
Class:class pass_rtl_loop_init : public rtl_opt_pass class pass_rtl_loop_init : public rtl_opt_pass
Class:class pass_rtl_loop_done : public rtl_opt_pass class pass_rtl_loop_done : public rtl_opt_pass
Class:class pass_rtl_move_loop_invariants : public rtl_opt_pass class pass_rtl_move_loop_invariants : public rtl_opt_pass
Class:class pass_rtl_unswitch : public rtl_opt_pass class pass_rtl_unswitch : public rtl_opt_pass
Class:class pass_rtl_unroll_and_peel_loops : public rtl_opt_pass class pass_rtl_unroll_and_peel_loops : public rtl_opt_pass
Class:class pass_rtl_doloop : public rtl_opt_pass class pass_rtl_doloop : public rtl_opt_pass
Class:class pass_lower_subreg : public rtl_opt_pass class pass_lower_subreg : public rtl_opt_pass
Class:class pass_lower_subreg2 : public rtl_opt_pass class pass_lower_subreg2 : public rtl_opt_pass
Class:class pass_ipa_lto_gimple_out : public ipa_opt_pass_d class pass_ipa_lto_gimple_out : public ipa_opt_pass_d
Class:class pass_ipa_lto_finish_out : public ipa_opt_pass_d class pass_ipa_lto_finish_out : public ipa_opt_pass_d
Class:class pass_mode_switching : public rtl_opt_pass class pass_mode_switching : public rtl_opt_pass
Class:class pass_sms : public rtl_opt_pass class pass_sms : public rtl_opt_pass
Class:class pass_expand_omp : public gimple_opt_pass class pass_expand_omp : public gimple_opt_pass
Class:class pass_lower_omp : public gimple_opt_pass class pass_lower_omp : public gimple_opt_pass
Class:class pass_diagnose_omp_blocks : public gimple_opt_pass class pass_diagnose_omp_blocks : public gimple_opt_pass
Class:class pass_early_local_passes : public simple_ipa_opt_pass class pass_early_local_passes : public simple_ipa_opt_pass
Class:class pass_all_early_optimizations : public gimple_opt_pass class pass_all_early_optimizations : public gimple_opt_pass
Class:class pass_all_optimizations : public gimple_opt_pass class pass_all_optimizations : public gimple_opt_pass
Class:class pass_all_optimizations_g : public gimple_opt_pass class pass_all_optimizations_g : public gimple_opt_pass
Class:class pass_rest_of_compilation : public rtl_opt_pass class pass_rest_of_compilation : public rtl_opt_pass
Class:class pass_postreload : public rtl_opt_pass class pass_postreload : public rtl_opt_pass
Class:class pass_gcse2 : public rtl_opt_pass class pass_gcse2 : public rtl_opt_pass
Class:class pass_postreload_cse : public rtl_opt_pass class pass_postreload_cse : public rtl_opt_pass
Class:class pass_profile : public gimple_opt_pass class pass_profile : public gimple_opt_pass
Class:class pass_strip_predict_hints : public gimple_opt_pass class pass_strip_predict_hints : public gimple_opt_pass
Class:class pass_peephole2 : public rtl_opt_pass class pass_peephole2 : public rtl_opt_pass
Class:class pass_split_all_insns : public rtl_opt_pass class pass_split_all_insns : public rtl_opt_pass
Class:class pass_split_after_reload : public rtl_opt_pass class pass_split_after_reload : public rtl_opt_pass
Class:class pass_split_before_regstack : public rtl_opt_pass class pass_split_before_regstack : public rtl_opt_pass
Class:class pass_split_before_sched2 : public rtl_opt_pass class pass_split_before_sched2 : public rtl_opt_pass
Class:class pass_split_for_shorten_branches : public rtl_opt_pass class pass_split_for_shorten_branches : public rtl_opt_pass
Class:class pass_ree : public rtl_opt_pass class pass_ree : public rtl_opt_pass
Class:class pass_stack_regs : public rtl_opt_pass class pass_stack_regs : public rtl_opt_pass
Class:class pass_stack_regs_run : public rtl_opt_pass class pass_stack_regs_run : public rtl_opt_pass
Class:class pass_cprop_hardreg : public rtl_opt_pass class pass_cprop_hardreg : public rtl_opt_pass
Class:class pass_reginfo_init : public rtl_opt_pass class pass_reginfo_init : public rtl_opt_pass
Class:class pass_regmove : public rtl_opt_pass class pass_regmove : public rtl_opt_pass
Class:class pass_regrename : public rtl_opt_pass class pass_regrename : public rtl_opt_pass
Class:class pass_delay_slots : public rtl_opt_pass class pass_delay_slots : public rtl_opt_pass
Class:class pass_machine_reorg : public rtl_opt_pass class pass_machine_reorg : public rtl_opt_pass
Class:class pass_sched : public rtl_opt_pass class pass_sched : public rtl_opt_pass
Class:class pass_sched2 : public rtl_opt_pass class pass_sched2 : public rtl_opt_pass
Class:class pass_stack_ptr_mod : public rtl_opt_pass class pass_stack_ptr_mod : public rtl_opt_pass
Class:class pass_rtl_store_motion : public rtl_opt_pass class pass_rtl_store_motion : public rtl_opt_pass
Class:class pass_dumb_plugin_example : public gimple_opt_pass class pass_dumb_plugin_example : public gimple_opt_pass
Class:class pass_warn_self_assign : public gimple_opt_pass class pass_warn_self_assign : public gimple_opt_pass
Class:class one_pass : public gimple_opt_pass class one_pass : public gimple_opt_pass
Class:class pass_warn_self_assign : public gimple_opt_pass class pass_warn_self_assign : public gimple_opt_pass
Class:class pass_tracer : public gimple_opt_pass class pass_tracer : public gimple_opt_pass
Class:class pass_diagnose_tm_blocks : public gimple_opt_pass class pass_diagnose_tm_blocks : public gimple_opt_pass
Class:class pass_lower_tm : public gimple_opt_pass class pass_lower_tm : public gimple_opt_pass
Class:class pass_tm_init : public gimple_opt_pass class pass_tm_init : public gimple_opt_pass
Class:class pass_tm_mark : public gimple_opt_pass class pass_tm_mark : public gimple_opt_pass
Class:class pass_tm_edges : public gimple_opt_pass class pass_tm_edges : public gimple_opt_pass
Class:class pass_tm_memopt : public gimple_opt_pass class pass_tm_memopt : public gimple_opt_pass
Class:class pass_ipa_tm : public simple_ipa_opt_pass class pass_ipa_tm : public simple_ipa_opt_pass
Class:class pass_call_cdce : public gimple_opt_pass class pass_call_cdce : public gimple_opt_pass
Class:class pass_build_cfg : public gimple_opt_pass class pass_build_cfg : public gimple_opt_pass
Class:class pass_split_crit_edges : public gimple_opt_pass class pass_split_crit_edges : public gimple_opt_pass
Class:class pass_warn_function_return : public gimple_opt_pass class pass_warn_function_return : public gimple_opt_pass
Class:class pass_warn_function_noreturn : public gimple_opt_pass class pass_warn_function_noreturn : public gimple_opt_pass
Class:class pass_warn_unused_result : public gimple_opt_pass class pass_warn_unused_result : public gimple_opt_pass
Class:class pass_merge_phi : public gimple_opt_pass class pass_merge_phi : public gimple_opt_pass
Class:class pass_lower_complex : public gimple_opt_pass class pass_lower_complex : public gimple_opt_pass
Class:class pass_lower_complex_O0 : public gimple_opt_pass class pass_lower_complex_O0 : public gimple_opt_pass
Class:class pass_lower_eh : public gimple_opt_pass class pass_lower_eh : public gimple_opt_pass
Class:class pass_refactor_eh : public gimple_opt_pass class pass_refactor_eh : public gimple_opt_pass
Class:class pass_lower_resx : public gimple_opt_pass class pass_lower_resx : public gimple_opt_pass
Class:class pass_lower_eh_dispatch : public gimple_opt_pass class pass_lower_eh_dispatch : public gimple_opt_pass
Class:class pass_cleanup_eh : public gimple_opt_pass class pass_cleanup_eh : public gimple_opt_pass
Class:class pass_ipa_lower_emutls : public simple_ipa_opt_pass class pass_ipa_lower_emutls : public simple_ipa_opt_pass
Class:class pass_if_conversion : public gimple_opt_pass class pass_if_conversion : public gimple_opt_pass
Class:class pass_build_ssa : public gimple_opt_pass class pass_build_ssa : public gimple_opt_pass
Class:class pass_loop_distribution : public gimple_opt_pass class pass_loop_distribution : public gimple_opt_pass
Class:class pass_mudflap_1 : public gimple_opt_pass class pass_mudflap_1 : public gimple_opt_pass
Class:class pass_mudflap_2 : public gimple_opt_pass class pass_mudflap_2 : public gimple_opt_pass
Class:class pass_mudflap_1 : public gimple_opt_pass class pass_mudflap_1 : public gimple_opt_pass
Class:class pass_mudflap_2 : public gimple_opt_pass class pass_mudflap_2 : public gimple_opt_pass
Class:class pass_nrv : public gimple_opt_pass class pass_nrv : public gimple_opt_pass
Class:class pass_return_slot : public gimple_opt_pass class pass_return_slot : public gimple_opt_pass
Class:class pass_object_sizes : public gimple_opt_pass class pass_object_sizes : public gimple_opt_pass
Class:class pass_cleanup_cfg_post_optimizing : public gimple_opt_pass class pass_cleanup_cfg_post_optimizing : public gimple_opt_pass
Class:class pass_fixup_cfg : public gimple_opt_pass class pass_fixup_cfg : public gimple_opt_pass
Class:class pass_ipa_tree_profile : public simple_ipa_opt_pass class pass_ipa_tree_profile : public simple_ipa_opt_pass
Class:class pass_sra_early : public gimple_opt_pass class pass_sra_early : public gimple_opt_pass
Class:class pass_sra : public gimple_opt_pass class pass_sra : public gimple_opt_pass
Class:class pass_early_ipa_sra : public gimple_opt_pass class pass_early_ipa_sra : public gimple_opt_pass
Class:class pass_ccp : public gimple_opt_pass class pass_ccp : public gimple_opt_pass
Class:class pass_fold_builtins : public gimple_opt_pass class pass_fold_builtins : public gimple_opt_pass
Class:class pass_copy_prop : public gimple_opt_pass class pass_copy_prop : public gimple_opt_pass
Class:class pass_rename_ssa_copies : public gimple_opt_pass class pass_rename_ssa_copies : public gimple_opt_pass
Class:class pass_dce : public gimple_opt_pass class pass_dce : public gimple_opt_pass
Class:class pass_dce_loop : public gimple_opt_pass class pass_dce_loop : public gimple_opt_pass
Class:class pass_cd_dce : public gimple_opt_pass class pass_cd_dce : public gimple_opt_pass
Class:class pass_dominator : public gimple_opt_pass class pass_dominator : public gimple_opt_pass
Class:class pass_phi_only_cprop : public gimple_opt_pass class pass_phi_only_cprop : public gimple_opt_pass
Class:class pass_dse : public gimple_opt_pass class pass_dse : public gimple_opt_pass
Class:class pass_forwprop : public gimple_opt_pass class pass_forwprop : public gimple_opt_pass
Class:class pass_tree_ifcombine : public gimple_opt_pass class pass_tree_ifcombine : public gimple_opt_pass
Class:class pass_ch : public gimple_opt_pass class pass_ch : public gimple_opt_pass
Class:class pass_tree_loop : public gimple_opt_pass class pass_tree_loop : public gimple_opt_pass
Class:class pass_tree_loop_init : public gimple_opt_pass class pass_tree_loop_init : public gimple_opt_pass
Class:class pass_lim : public gimple_opt_pass class pass_lim : public gimple_opt_pass
Class:class pass_tree_unswitch : public gimple_opt_pass class pass_tree_unswitch : public gimple_opt_pass
Class:class pass_predcom : public gimple_opt_pass class pass_predcom : public gimple_opt_pass
Class:class pass_vectorize : public gimple_opt_pass class pass_vectorize : public gimple_opt_pass
Class:class pass_graphite : public gimple_opt_pass class pass_graphite : public gimple_opt_pass
Class:class pass_graphite_transforms : public gimple_opt_pass class pass_graphite_transforms : public gimple_opt_pass
Class:class pass_check_data_deps : public gimple_opt_pass class pass_check_data_deps : public gimple_opt_pass
Class:class pass_iv_canon : public gimple_opt_pass class pass_iv_canon : public gimple_opt_pass
Class:class pass_scev_cprop : public gimple_opt_pass class pass_scev_cprop : public gimple_opt_pass
Class:class pass_record_bounds : public gimple_opt_pass class pass_record_bounds : public gimple_opt_pass
Class:class pass_complete_unroll : public gimple_opt_pass class pass_complete_unroll : public gimple_opt_pass
Class:class pass_complete_unrolli : public gimple_opt_pass class pass_complete_unrolli : public gimple_opt_pass
Class:class pass_parallelize_loops : public gimple_opt_pass class pass_parallelize_loops : public gimple_opt_pass
Class:class pass_loop_prefetch : public gimple_opt_pass class pass_loop_prefetch : public gimple_opt_pass
Class:class pass_iv_optimize : public gimple_opt_pass class pass_iv_optimize : public gimple_opt_pass
Class:class pass_tree_loop_done : public gimple_opt_pass class pass_tree_loop_done : public gimple_opt_pass
Class:class pass_cse_reciprocals : public gimple_opt_pass class pass_cse_reciprocals : public gimple_opt_pass
Class:class pass_cse_sincos : public gimple_opt_pass class pass_cse_sincos : public gimple_opt_pass
Class:class pass_optimize_bswap : public gimple_opt_pass class pass_optimize_bswap : public gimple_opt_pass
Class:class pass_optimize_widening_mul : public gimple_opt_pass class pass_optimize_widening_mul : public gimple_opt_pass
Class:class pass_phiopt : public gimple_opt_pass class pass_phiopt : public gimple_opt_pass
Class:class pass_cselim : public gimple_opt_pass class pass_cselim : public gimple_opt_pass
Class:class pass_phiprop : public gimple_opt_pass class pass_phiprop : public gimple_opt_pass
Class:class pass_pre : public gimple_opt_pass class pass_pre : public gimple_opt_pass
Class:class pass_fre : public gimple_opt_pass class pass_fre : public gimple_opt_pass
Class:class pass_reassoc : public gimple_opt_pass class pass_reassoc : public gimple_opt_pass
Class:class pass_sink_code : public gimple_opt_pass class pass_sink_code : public gimple_opt_pass
Class:class pass_strlen : public gimple_opt_pass class pass_strlen : public gimple_opt_pass
Class:class pass_build_alias : public gimple_opt_pass class pass_build_alias : public gimple_opt_pass
Class:class pass_build_ealias : public gimple_opt_pass class pass_build_ealias : public gimple_opt_pass
Class:class pass_ipa_pta : public simple_ipa_opt_pass class pass_ipa_pta : public simple_ipa_opt_pass
Class:class pass_uncprop : public gimple_opt_pass class pass_uncprop : public gimple_opt_pass
Class:class pass_late_warn_uninitialized : public gimple_opt_pass class pass_late_warn_uninitialized : public gimple_opt_pass
Class:class pass_init_datastructures : public gimple_opt_pass class pass_init_datastructures : public gimple_opt_pass
Class:class pass_early_warn_uninitialized : public gimple_opt_pass class pass_early_warn_uninitialized : public gimple_opt_pass
Class:class pass_update_address_taken : public gimple_opt_pass class pass_update_address_taken : public gimple_opt_pass
Class:class pass_release_ssa_names : public gimple_opt_pass class pass_release_ssa_names : public gimple_opt_pass
Class:class pass_stdarg : public gimple_opt_pass class pass_stdarg : public gimple_opt_pass
Class:class pass_convert_switch : public gimple_opt_pass class pass_convert_switch : public gimple_opt_pass
Class:class pass_tail_recursion : public gimple_opt_pass class pass_tail_recursion : public gimple_opt_pass
Class:class pass_tail_calls : public gimple_opt_pass class pass_tail_calls : public gimple_opt_pass
Class:class pass_lower_vector : public gimple_opt_pass class pass_lower_vector : public gimple_opt_pass
Class:class pass_lower_vector_ssa : public gimple_opt_pass class pass_lower_vector_ssa : public gimple_opt_pass
Class:class pass_slp_vectorize : public gimple_opt_pass class pass_slp_vectorize : public gimple_opt_pass
Class:class pass_ipa_increase_alignment : public simple_ipa_opt_pass class pass_ipa_increase_alignment : public simple_ipa_opt_pass
Class:class pass_vrp : public gimple_opt_pass class pass_vrp : public gimple_opt_pass
Class:class pass_ipa_free_lang_data : public simple_ipa_opt_pass class pass_ipa_free_lang_data : public simple_ipa_opt_pass
Class:class pass_tsan : public gimple_opt_pass class pass_tsan : public gimple_opt_pass
Class:class pass_tsan_O0 : public gimple_opt_pass class pass_tsan_O0 : public gimple_opt_pass
Class:class pass_variable_tracking : public rtl_opt_pass class pass_variable_tracking : public rtl_opt_pass
Class:class pass_web : public rtl_opt_pass class pass_web : public rtl_opt_pass
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    gcc_assert (NULL == PASS ## _ ## NUM); \\'), (10, 1, u'+        gcc_assert (PASS ## _1);                 \\')]
===========================================
===========================================
Total add: 12
Total del: 1
Header: pass_manager::pass_manager
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    gcc_assert (NULL == PASS ## _ ## NUM); \\'), (10, 1, u'+        gcc_assert (PASS ## _1);                 \\')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+    gcc_assert (NULL == PASS ## _ ## NUM); \\'), (10, 1, u'+        gcc_assert (PASS ## _1);                 \\')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL);')]
===========================================
===========================================
Total add: 28
Total del: 0
Header: alias_template_specialization_p
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 1, u'+  gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL);')]
===========================================
Class:class list
Class:template <template <class> class T> class C 
Class:class list
Class:class A 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (DECL_RESULT (node->symbol.decl));'), (3, 1, u'+\t    gcc_assert (in_lto_p || DECL_RESULT (node->symbol.decl));')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: symtab_remove_unreachable_nodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (DECL_RESULT (node->symbol.decl));'), (3, 1, u'+\t    gcc_assert (in_lto_p || DECL_RESULT (node->symbol.decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t    gcc_assert (DECL_RESULT (node->symbol.decl));'), (3, 1, u'+\t    gcc_assert (in_lto_p || DECL_RESULT (node->symbol.decl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_assert (TREE_CODE (t) != RESULT_DECL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: write_symbol
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_assert (TREE_CODE (t) != RESULT_DECL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_assert (TREE_CODE (t) != RESULT_DECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (useless_type_conversion_p (TREE_TYPE (restmp),')]
===========================================
===========================================
Total add: 57
Total del: 45
Header: assemble_thunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (useless_type_conversion_p (TREE_TYPE (restmp),')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (useless_type_conversion_p (TREE_TYPE (restmp),')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  gcc_assert (gimple_has_body_p (fndecl));')]
===========================================
===========================================
Total add: 1
Total del: 4
Header: ipa_populate_param_decls
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  gcc_assert (gimple_has_body_p (fndecl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+  gcc_assert (gimple_has_body_p (fndecl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (gimple_has_body_p (fndecl));')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: count_formal_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (gimple_has_body_p (fndecl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (gimple_has_body_p (fndecl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (!node->clone_of);')]
===========================================
===========================================
Total add: 2
Total del: 9
Header: ipa_initialize_node_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (!node->clone_of);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-      gcc_assert (!node->clone_of);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!flag_wpa);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ipa_get_vector_of_formal_parms
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!flag_wpa);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (!flag_wpa);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+\t      gcc_assert (TREE_CODE (replace_info->old_tree) == PARM_DECL);'), (34, 2, u'-\t    gcc_assert (TREE_CODE (replace_info->old_tree) == PARM_DECL);')]
===========================================
===========================================
Total add: 31
Total del: 7
Header: tree_function_versioning
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+\t      gcc_assert (TREE_CODE (replace_info->old_tree) == PARM_DECL);'), (34, 2, u'-\t    gcc_assert (TREE_CODE (replace_info->old_tree) == PARM_DECL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(24, 1, u'+\t      gcc_assert (TREE_CODE (replace_info->old_tree) == PARM_DECL);'), (34, 2, u'-\t    gcc_assert (TREE_CODE (replace_info->old_tree) == PARM_DECL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cgraph_function_flags_ready);')]
===========================================
===========================================
Total add: 0
Total del: 1
Header: cgraph_function_body_availability
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cgraph_function_flags_ready);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (cgraph_function_flags_ready);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-        gcc_assert (!node->global.inlined_to);'), (15, 2, u'-      gcc_assert (!node->symbol.aux);'), (26, 1, u'+\t  gcc_assert (!node->global.inlined_to);'), (31, 1, u'+\tgcc_assert (!node->symbol.aux);')]
===========================================
===========================================
Total add: 17
Total del: 14
Header: symtab_remove_unreachable_nodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-        gcc_assert (!node->global.inlined_to);'), (15, 2, u'-      gcc_assert (!node->symbol.aux);'), (26, 1, u'+\t  gcc_assert (!node->global.inlined_to);'), (31, 1, u'+\tgcc_assert (!node->symbol.aux);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 2, u'-        gcc_assert (!node->global.inlined_to);'), (15, 2, u'-      gcc_assert (!node->symbol.aux);'), (26, 1, u'+\t  gcc_assert (!node->global.inlined_to);'), (31, 1, u'+\tgcc_assert (!node->symbol.aux);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (pid < passes_by_id_size);'), (4, 1, u'+      gcc_assert (pid < passes->passes_by_id_size);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: input_node
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (pid < passes_by_id_size);'), (4, 1, u'+      gcc_assert (pid < passes->passes_by_id_size);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert (pid < passes_by_id_size);'), (4, 1, u'+      gcc_assert (pid < passes->passes_by_id_size);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (index < passes_by_id_size && index >= 0);'), (5, 1, u'+  gcc_assert (index < passes->passes_by_id_size && index >= 0);')]
===========================================
===========================================
Total add: 2
Total del: 2
Header: check_profile_consistency
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (index < passes_by_id_size && index >= 0);'), (5, 1, u'+  gcc_assert (index < passes->passes_by_id_size && index >= 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (index < passes_by_id_size && index >= 0);'), (5, 1, u'+  gcc_assert (index < passes->passes_by_id_size && index >= 0);')]
===========================================
Class:  template <class E> class initializer_list 
Class:template <class T> class foo  { template <class T> class foo  
Class:class bar 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (conv->kind == ck_ref_bind);')]
===========================================
===========================================
Total add: 8
Total del: 4
Header: initialize_reference
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (conv->kind == ck_ref_bind);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  gcc_assert (conv->kind == ck_ref_bind);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (context != NULL_TREE);')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: write_name
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (context != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+  gcc_assert (context != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (reg_size == 0);'), (3, 1, u'+\t  gcc_assert (reg_size == 0 || reg_size == epiphany_stack_offset);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: epiphany_compute_frame_size
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (reg_size == 0);'), (3, 1, u'+\t  gcc_assert (reg_size == 0 || reg_size == epiphany_stack_offset);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-\t  gcc_assert (reg_size == 0);'), (3, 1, u'+\t  gcc_assert (reg_size == 0 || reg_size == epiphany_stack_offset);')]
===========================================
Class:  template < typename > class new_allocator   template < typename > class new_allocator
Class:  template < typename _Tp > class allocator:__gnu_cxx::new_allocator < _Tp >   template < typename _Tp > class allocator:__gnu_cxx::new_allocator < _Tp >
Class:  template < class _E > class initializer_list   {   
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\tgcc_assert (pub->die->die_mark);')]
===========================================
===========================================
Total add: 1
Total del: 15
Header: output_pubnames
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\tgcc_assert (pub->die->die_mark);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 2, u'-\tgcc_assert (pub->die->die_mark);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            gcc_assert (pub->die->die_mark);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: output_pubnames
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            gcc_assert (pub->die->die_mark);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+            gcc_assert (pub->die->die_mark);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_assert (new_decl != old_decl);')]
===========================================
===========================================
Total add: 9
Total del: 0
Header: cgraph_create_virtual_clone
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_assert (new_decl != old_decl);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+  gcc_assert (new_decl != old_decl);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (!node->clone_of);')]
===========================================
===========================================
Total add: 1
Total del: 0
Header: ipa_initialize_node_params
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (!node->clone_of);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 1, u'+      gcc_assert (!node->clone_of);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      gcc_assert (parm);'), (13, 1, u'+      gcc_assert (!map->old_tree);')]
===========================================
===========================================
Total add: 2
Total del: 9
Header: output_node_opt_summary
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      gcc_assert (parm);'), (13, 1, u'+      gcc_assert (!map->old_tree);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(11, 2, u'-      gcc_assert (parm);'), (13, 1, u'+      gcc_assert (!map->old_tree);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t    gcc_assert (DECL_RESULT (node->symbol.decl));')]
===========================================
===========================================
Total add: 2
Total del: 0
Header: symtab_remove_unreachable_nodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t    gcc_assert (DECL_RESULT (node->symbol.decl));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\t    gcc_assert (DECL_RESULT (node->symbol.decl));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tgcc_assert (node->clone_of || !cgraph_function_with_gimple_body_p (node)')]
===========================================
===========================================
Total add: 3
Total del: 0
Header: symtab_remove_unreachable_nodes
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tgcc_assert (node->clone_of || !cgraph_function_with_gimple_body_p (node)')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 1, u'+\tgcc_assert (node->clone_of || !cgraph_function_with_gimple_body_p (node)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(142, 1, u'+\t  gcc_assert (!complement_final_p);'), (143, 1, u'+\t  gcc_assert (!complement_op1_p);'), (144, 1, u'+\t  gcc_assert (!complement_op2_p);'), (249, 1, u'+  gcc_assert (reload_completed);'), (250, 1, u'+  gcc_assert (IN_RANGE (regno0, FIRST_GPR_REGNO, LAST_GPR_REGNO));'), (251, 1, u'+  gcc_assert (IN_RANGE (regno1, FIRST_GPR_REGNO, LAST_GPR_REGNO));'), (254, 1, u'+  gcc_assert (nregs > 1);'), (257, 1, u'+    gcc_assert (IN_RANGE (REGNO (op2), FIRST_GPR_REGNO, LAST_GPR_REGNO));')]
===========================================
===========================================
Total add: 274
Total del: 0
Header: rs6000_set_up_by_prologue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(142, 1, u'+\t  gcc_assert (!complement_final_p);'), (143, 1, u'+\t  gcc_assert (!complement_op1_p);'), (144, 1, u'+\t  gcc_assert (!complement_op2_p);'), (249, 1, u'+  gcc_assert (reload_completed);'), (250, 1, u'+  gcc_assert (IN_RANGE (regno0, FIRST_GPR_REGNO, LAST_GPR_REGNO));'), (251, 1, u'+  gcc_assert (IN_RANGE (regno1, FIRST_GPR_REGNO, LAST_GPR_REGNO));'), (254, 1, u'+  gcc_assert (nregs > 1);'), (257, 1, u'+    gcc_assert (IN_RANGE (REGNO (op2), FIRST_GPR_REGNO, LAST_GPR_REGNO));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(142, 1, u'+\t  gcc_assert (!complement_final_p);'), (143, 1, u'+\t  gcc_assert (!complement_op1_p);'), (144, 1, u'+\t  gcc_assert (!complement_op2_p);'), (249, 1, u'+  gcc_assert (reload_completed);'), (250, 1, u'+  gcc_assert (IN_RANGE (regno0, FIRST_GPR_REGNO, LAST_GPR_REGNO));'), (251, 1, u'+  gcc_assert (IN_RANGE (regno1, FIRST_GPR_REGNO, LAST_GPR_REGNO));'), (254, 1, u'+  gcc_assert (nregs > 1);'), (257, 1, u'+    gcc_assert (IN_RANGE (REGNO (op2), FIRST_GPR_REGNO, LAST_GPR_REGNO));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\tgcc_assert (mode == Pmode || mode == ptr_mode);')]
===========================================
===========================================
Total add: 7
Total del: 4
Header: aarch64_load_symref_appropriately
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\tgcc_assert (mode == Pmode || mode == ptr_mode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+\tgcc_assert (mode == Pmode || mode == ptr_mode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+\t    gcc_assert (mode == Pmode);')]
===========================================
===========================================
Total add: 25
Total del: 3
Header: aarch64_load_symref_appropriately
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+\t    gcc_assert (mode == Pmode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(28, 1, u'+\t    gcc_assert (mode == Pmode);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert ((vcall_offset & 0x7) == 0);'), (3, 1, u'+      gcc_assert ((vcall_offset & (POINTER_BYTES - 1)) == 0);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: aarch64_output_mi_thunk
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert ((vcall_offset & 0x7) == 0);'), (3, 1, u'+      gcc_assert ((vcall_offset & (POINTER_BYTES - 1)) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-      gcc_assert ((vcall_offset & 0x7) == 0);'), (3, 1, u'+      gcc_assert ((vcall_offset & (POINTER_BYTES - 1)) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (xmode == DImode || xmode == SImode);')]
===========================================
===========================================
Total add: 4
Total del: 0
Header: aarch64_legitimize_reload_address
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (xmode == DImode || xmode == SImode);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+      gcc_assert (xmode == DImode || xmode == SImode);')]
===========================================
Class:   class c { class c 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (!MACHO_DYNAMIC_NO_PIC_P);')]
===========================================
===========================================
Total add: 0
Total del: 2
Header: machopic_output_function_base_name
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (!MACHO_DYNAMIC_NO_PIC_P);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(3, 2, u'-  gcc_assert (!MACHO_DYNAMIC_NO_PIC_P);')]
===========================================
Class:    class new_allocator {     class new_allocator 
Class:  class allocator   class allocator
Class:    class __sso_string_base;
Class:    class __alloctr_rebind_helper {     class __alloctr_rebind_helper 
Class:    class vector     class vector
Class:class DL { class DL 
Class:class FDB { class FDB 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t  gcc_assert (tmp_var != NULL_TREE);')]
===========================================
===========================================
Total add: 1
Total del: 2
Header: gfc_trans_scalar_assign
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t  gcc_assert (tmp_var != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 2, u'-\t  gcc_assert (tmp_var != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  __go_assert (key_size != 0 && key_size != -1UL);'), (3, 1, u'+  __go_assert (key_size != -1UL);')]
===========================================
===========================================
Total add: 1
Total del: 1
Header: __go_map_index
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  __go_assert (key_size != 0 && key_size != -1UL);'), (3, 1, u'+  __go_assert (key_size != -1UL);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(2, 2, u'-  __go_assert (key_size != 0 && key_size != -1UL);'), (3, 1, u'+  __go_assert (key_size != -1UL);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (tmp_var != NULL_TREE);')]
===========================================
===========================================
Total add: 10
Total del: 0
Header: gfc_trans_scalar_assign
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (tmp_var != NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(5, 1, u'+\t  gcc_assert (tmp_var != NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+      gcc_assert (se.post.head == NULL_TREE);')]
===========================================
===========================================
Total add: 96
Total del: 0
Header: gfc_build_final_call
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+      gcc_assert (se.post.head == NULL_TREE);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(64, 1, u'+      gcc_assert (se.post.head == NULL_TREE);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(20, 1, u'+static_assert(sizeof(ADLfoo(NY::Y{})) == 1, "");'), (21, 1, u'+static_assert(sizeof(ADLfoo(NX::X{})) == 2, "");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(6, 1, u'+static_assert(sizeof(po) >= sizeof(pf), "Conversion not supported");')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(12, 1, u'+  static_assert(A::value, "");'), (13, 1, u'+  static_assert(sizeof...(Types) == 0, "");')]
===========================================
Class:template < class T > class X { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(7, 1, u'+static_assert(l0==33,"Fail");'), (8, 1, u'+static_assert(l1==42,"Fail");')]
===========================================
Class: class Handler { 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  gcc_assert ((piece_size_n & (piece_size_n - 1)) == 0);')]
===========================================
===========================================
Total add: 7
Total del: 2
Header: expand_set_or_movmem_via_loop
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  gcc_assert ((piece_size_n & (piece_size_n - 1)) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(8, 1, u'+  gcc_assert ((piece_size_n & (piece_size_n - 1)) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 1, u'+  gcc_assert (code != CODE_FOR_nothing);'), (54, 1, u'+  gcc_assert (size_to_move % piece_size == 0);')]
===========================================
===========================================
Total add: 69
Total del: 6
Header: expand_setmem_via_rep_stos
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 1, u'+  gcc_assert (code != CODE_FOR_nothing);'), (54, 1, u'+  gcc_assert (size_to_move % piece_size == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(48, 1, u'+  gcc_assert (code != CODE_FOR_nothing);'), (54, 1, u'+  gcc_assert (size_to_move % piece_size == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      gcc_assert ((max_size & (max_size - 1)) == 0);')]
===========================================
===========================================
Total add: 9
Total del: 36
Header: expand_movmem_epilogue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      gcc_assert ((max_size & (max_size - 1)) == 0);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(10, 1, u'+      gcc_assert ((max_size & (max_size - 1)) == 0);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 2, u'-  gcc_assert (desired_alignment <= 8);')]
===========================================
===========================================
Total add: 12
Total del: 29
Header: expand_movmem_prologue
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 2, u'-  gcc_assert (desired_alignment <= 8);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(43, 2, u'-  gcc_assert (desired_alignment <= 8);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+  gcc_assert (alg != no_stringop);')]
===========================================
===========================================
Total add: 16
Total del: 34
Header: decide_alignment
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+  gcc_assert (alg != no_stringop);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(41, 1, u'+  gcc_assert (alg != no_stringop);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+      gcc_assert (optab_handler (mov_optab, move_mode) != CODE_FOR_nothing);')]
===========================================
===========================================
Total add: 29
Total del: 9
Header: ix86_expand_movmem
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+      gcc_assert (optab_handler (mov_optab, move_mode) != CODE_FOR_nothing);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(23, 1, u'+      gcc_assert (optab_handler (mov_optab, move_mode) != CODE_FOR_nothing);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  lra_assert (REG_P (op));'), (9, 1, u'+\t  gcc_assert (REG_P (op) && (int) REGNO (op) >= new_regno_start);')]
===========================================
===========================================
Total add: 15
Total del: 0
Header: curr_insn_transform
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  lra_assert (REG_P (op));'), (9, 1, u'+\t  gcc_assert (REG_P (op) && (int) REGNO (op) >= new_regno_start);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(4, 1, u'+\t  lra_assert (REG_P (op));'), (9, 1, u'+\t  gcc_assert (REG_P (op) && (int) REGNO (op) >= new_regno_start);')]
===========================================
Class:   class Foo { class Foo 
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(78, 1, u'+#define SA(X) static_assert(X, #X)')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t  gcc_assert (new_var != NULL_TREE && new_var != error_mark_node);')]
===========================================
===========================================
Total add: 12
Total del: 11
Header: replace_invariant_exprs
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t  gcc_assert (new_var != NULL_TREE && new_var != error_mark_node);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(9, 2, u'-\t  gcc_assert (new_var != NULL_TREE && new_var != error_mark_node);')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-      gcc_assert (array_ind_value && (array_ind_value != error_mark_node));')]
===========================================
===========================================
Total add: 2
Total del: 19
Header: expand_sec_reduce_builtin
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-      gcc_assert (array_ind_value && (array_ind_value != error_mark_node));')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(18, 2, u'-      gcc_assert (array_ind_value && (array_ind_value != error_mark_node));')]
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (array_type);')]
===========================================
===========================================
Total add: 5
Total del: 11
Header: cp_parser_array_notation
Functions:
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (array_type);')]
===========================================
===========================================
===========================================
Mock_Function_For_Asserts
0
0
0
0
[(13, 2, u'-      gcc_assert (array_type);')]
===========================================
Class:  Class (int func)   Class (int func)
