commit 42ca6d5ebde033ddfdf324187ec3e664c2b75c4f
Author: Jordan DeLong <jdelong@fb.com>
Date:   2013-09-30

    Clean up target cache
    
    Just delete some unused stuff, simplify the Cache<> template
    a lot.  Delete some vestigial things in MethodCache (the Pair,
    keyToPair function, etc).  That's all I'm going to do here for now.
    
    Reviewed By: @markw65
    
    Differential Revision: D990840

diff --git a/hphp/runtime/vm/jit/code-gen.cpp b/hphp/runtime/vm/jit/code-gen.cpp
index 3c8ebbd..26de72c 100644
--- a/hphp/runtime/vm/jit/code-gen.cpp
+++ b/hphp/runtime/vm/jit/code-gen.cpp
@@ -2441,17 +2441,8 @@ void CodeGenerator::cgLdObjMethod(IRInstruction *inst) {
   auto actRecReg = m_regs[actRec].reg();
-  auto const handle = MethodCache::alloc();
-
-  // lookup in the targetcache
-  if (debug) {
-    MethodCache::Pair p;
-    static_assert(sizeof(p.m_value) == 8,
-                  "MethodCache::Pair::m_value assumed to be 8 bytes");
-    static_assert(sizeof(p.m_key) == 8,
-                  "MethodCache::Pair::m_key assumed to be 8 bytes");
-  }
+  auto const handle = RDS::alloc<MethodCache>().handle();
 
   // preload handle->m_value
-  m_as.loadq(rVmTl[handle + offsetof(MethodCache::Pair, m_value)],
+  m_as.loadq(rVmTl[handle + offsetof(MethodCache, m_value)],
              m_rScratch);
-  m_as.cmpq (rVmTl[handle + offsetof(MethodCache::Pair, m_key)],
+  m_as.cmpq (rVmTl[handle + offsetof(MethodCache, m_key)],
              clsReg);
diff --git a/hphp/runtime/vm/jit/target-cache.cpp b/hphp/runtime/vm/jit/target-cache.cpp
index f581eb9..cf7e144 100644
--- a/hphp/runtime/vm/jit/target-cache.cpp
+++ b/hphp/runtime/vm/jit/target-cache.cpp
@@ -41,4 +41,3 @@ const StaticString s_call("__call");
 
-inline bool
-stringMatches(const StringData* rowString, const StringData* sd) {
+inline bool stringMatches(const StringData* rowString, const StringData* sd) {
   return rowString &&
@@ -55,5 +54,11 @@ T* handleToPtr(RDS::Handle h) {
 
+template<class Cache>
+typename Cache::Pair* keyToPair(Cache* cache, const StringData* k) {
+  assert(Util::isPowerOfTwo(Cache::kNumLines));
+  return cache->m_pairs + (k->hash() & (Cache::kNumLines - 1));
 }
 
-//=============================================================================
+}
+
+//////////////////////////////////////////////////////////////////////
 // FuncCache
@@ -65,3 +70,2 @@ static std::vector<RDS::Link<FuncCache> > funcCacheEntries;
 
-template<>
 RDS::Handle FuncCache::alloc() {
@@ -73,22 +77,6 @@ RDS::Handle FuncCache::alloc() {
 
-void invalidateForRenameFunction(const StringData* name) {
-  assert(name);
-  std::lock_guard<std::mutex> g(funcCacheMutex);
-  for (auto& h : funcCacheEntries) {
-    memset(h.get(), 0, sizeof *h);
-  }
-}
-
-template<>
-inline int
-FuncCache::hashKey(const StringData* sd) {
-  return sd->hash();
-}
-
-template<>
-const Func*
-FuncCache::lookup(RDS::Handle handle, StringData *sd, const void* /* ignored */) {
-  auto const thiz = handleToPtr<FuncCache>(handle);
+const Func* FuncCache::lookup(RDS::Handle handle, StringData* sd) {
   Func* func;
-  Pair* pair = thiz->keyToPair(sd);
+  auto const thiz = handleToPtr<FuncCache>(handle);
+  auto const pair = keyToPair(thiz, sd);
   const StringData* pairSd = pair->m_key;
@@ -105,3 +93,3 @@ FuncCache::lookup(RDS::Handle handle, StringData *sd, const void* /* ignored */)
     func->validate();
-    pair->m_key = func->name(); // use a static name
+    pair->m_key = const_cast<StringData*>(func->name()); // use a static name
     pair->m_value = func;
@@ -115,10 +103,50 @@ FuncCache::lookup(RDS::Handle handle, StringData *sd, const void* /* ignored */)
 
-//=============================================================================
-// MethodCache
+void invalidateForRenameFunction(const StringData* name) {
+  assert(name);
+  std::lock_guard<std::mutex> g(funcCacheMutex);
+  for (auto& h : funcCacheEntries) {
+    memset(h.get(), 0, sizeof *h);
+  }
+}
+
+//////////////////////////////////////////////////////////////////////
+// ClassCache
 
-inline int MethodCache::hashKey(uintptr_t c) {
-  pointer_hash<Class> h;
-  return h(reinterpret_cast<const Class*>(c));
+RDS::Handle ClassCache::alloc() {
+  return RDS::alloc<ClassCache,sizeof(Pair)>().handle();
 }
 
+const Class* ClassCache::lookup(RDS::Handle handle, StringData* name) {
+  auto const thiz = handleToPtr<ClassCache>(handle);
+  auto const pair = keyToPair(thiz, name);
+  const StringData* pairSd = pair->m_key;
+  if (!stringMatches(pairSd, name)) {
+    TRACE(1, "ClassCache miss: %s\n", name->data());
+    const NamedEntity *ne = Unit::GetNamedEntity(name);
+    Class *c = Unit::lookupClass(ne);
+    if (UNLIKELY(!c)) {
+      String normName = normalizeNS(name);
+      if (normName) {
+        return lookup(handle, normName.get());
+      } else {
+        c = Unit::loadMissingClass(ne, name);
+      }
+      if (UNLIKELY(!c)) {
+        raise_error(Strings::UNKNOWN_CLASS, name->data());
+      }
+    }
+
+    if (pair->m_key) decRefStr(pair->m_key);
+    pair->m_key = name;
+    name->incRefCount();
+    pair->m_value = c;
+  } else {
+    TRACE(1, "ClassCache hit: %s\n", name->data());
+  }
+  return pair->m_value;
+}
+
+//=============================================================================
+// MethodCache
+
 /*
@@ -159,11 +187,4 @@ static inline const Func* wouldCall(const Class* cls, const Func* prev) {
 
-/*
- * This is flagged NEVER_INLINE because if gcc inlines it, it will
- * hoist a bunch of initialization code (callee-saved regs pushes,
- * making a frame, and rsp adjustment) above the fast path.  When not
- * inlined, gcc is generating a jmp to this function instead of a
- * call.
- */
-HOT_FUNC_VM NEVER_INLINE
-void methodCacheSlowPath(MethodCache::Pair* mce,
+HOT_FUNC_VM
+void methodCacheSlowPath(MethodCache* mce,
                          ActRec* ar,