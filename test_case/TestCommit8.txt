commit 3c7c1abe45e89211de45b90a6eab38a85ef3f2f6
Author: Sunny Bains <Sunny.Bains@Oracle.Com>
Date:   2012-03-29

    Bug #13817703 - auto_increment_offset != 1 + innodb_autoinc_lock_mode=1 => bulk inserts fail
    
    Fix the calculation of the next autoinc value when offset > 1. Some of the
    results have changed due to the changes in the allocation calculation. The
    new calculation will result in slightly bigger gaps for bulk inserts.
    
    rb://866 Approved by Jimmy Yang.
    Backported from mysql-trunk (5.6)
    
    --BZR--
    revision-id: sunny.bains@oracle.com-20120329070208-ydrsql4mllvio325
    property-branch-nick: 5.5
    testament3-sha1: a9c18ccfbcbbdce6f74b7bfc8a02ef874c31033f

diff --git a/storage/innobase/handler/ha_innodb.cc b/storage/innobase/handler/ha_innodb.cc
index 9d4f999..9679a90 100644
--- a/storage/innobase/handler/ha_innodb.cc
+++ b/storage/innobase/handler/ha_innodb.cc
@@ -1449,5 +1449,5 @@ values we want to reserve for multi-value inserts e.g.,
 
-innobase_next_autoinc() will be called with increment set to
-n * 3 where autoinc_lock_mode != TRADITIONAL because we want
-to reserve 3 values for the multi-value INSERT above.
+innobase_next_autoinc() will be called with increment set to 3 where
+autoinc_lock_mode != TRADITIONAL because we want to reserve 3 values for
+the multi-value INSERT above.
 @return	the next value */
@@ -1458,3 +1458,4 @@ innobase_next_autoinc(
 	ulonglong	current,	/*!< in: Current value */
-	ulonglong	increment,	/*!< in: increment current by */
+	ulonglong	need,		/*!< in: count of values needed */
+	ulonglong	step,		/*!< in: AUTOINC increment step */
 	ulonglong	offset,		/*!< in: AUTOINC offset */
@@ -1463,9 +1464,15 @@ innobase_next_autoinc(
 	ulonglong	next_value;
+	ulonglong	block = need * step;
 
 	/* Should never be 0. */
-	ut_a(increment > 0);
+	ut_a(need > 0);
+	ut_a(block > 0);
+	ut_a(max_value > 0);
+
+	/* Current value should never be greater than the maximum. */
+	ut_a(current <= max_value);
 
 	/* According to MySQL documentation, if the offset is greater than
-	the increment then the offset is ignored. */
-	if (offset > increment) {
+	the step then the offset is ignored. */
+	if (offset > block) {
 		offset = 0;
@@ -1473,42 +1480,52 @@ innobase_next_autoinc(
 
-	if (max_value <= current) {
+	/* Check for overflow. */
+	if (block >= max_value
+	    || offset > max_value
+	    || current == max_value
+	    || max_value - offset <= offset) {
+
 		next_value = max_value;
-	} else if (offset <= 1) {
-		/* Offset 0 and 1 are the same, because there must be at
-		least one node in the system. */
-		if (max_value - current <= increment) {
+	} else {
+		ut_a(max_value > current);
+
+		ulonglong	free = max_value - current;
+
+		if (free < offset || free - offset <= block) {
 			next_value = max_value;
 		} else {
-			next_value = current + increment;
+			next_value = 0;
 		}
-	} else if (max_value > current) {
+	}
+
+	if (next_value == 0) {
+		ulonglong	next;
+
 		if (current > offset) {
-			next_value = ((current - offset) / increment) + 1;
+			next = (current - offset) / step;
 		} else {
-			next_value = ((offset - current) / increment) + 1;
+			next = (offset - current) / step;
 		}
 
-		ut_a(increment > 0);
-		ut_a(next_value > 0);
-
+		ut_a(max_value > next);
+		next_value = next * step;
 		/* Check for multiplication overflow. */
-		if (increment > (max_value / next_value)) {
+		ut_a(next_value >= next);
+		ut_a(max_value > next_value);
 
-			next_value = max_value;
-		} else {
-			next_value *= increment;
+		/* Check for overflow */
+		if (max_value - next_value >= block) {
 
-			ut_a(max_value >= next_value);
+			next_value += block;
 
-			/* Check for overflow. */
-			if (max_value - next_value <= offset) {
-				next_value = max_value;
-			} else {
+			if (max_value - next_value >= offset) {
 				next_value += offset;
+			} else {
+				next_value = max_value;
 			}
+		} else {
+			next_value = max_value;
 		}
-	} else {
-		next_value = max_value;
 	}
 
+	ut_a(next_value != 0);
 	ut_a(next_value <= max_value);
@@ -3748,3 +3765,3 @@ ha_innobase::innobase_initialize_autoinc()
 			auto_inc = innobase_next_autoinc(
-				read_auto_inc, 1, 1, col_max_value);
+				read_auto_inc, 1, 1, 0, col_max_value);
 
@@ -5248,7 +5265,7 @@ set_max_autoinc:
 
-					ulonglong	need;
 					ulonglong	offset;
+					ulonglong	increment;
 
 					offset = prebuilt->autoinc_offset;
-					need = prebuilt->autoinc_increment;
+					increment = prebuilt->autoinc_increment;
 
@@ -5256,3 +5273,4 @@ set_max_autoinc:
 						auto_inc,
-						need, offset, col_max_value);
+						1, increment, offset,
+						col_max_value);
 
@@ -5524,10 +5542,10 @@ ha_innobase::update_row(
 
-			ulonglong	need;
 			ulonglong	offset;
+			ulonglong	increment;
 
 			offset = prebuilt->autoinc_offset;
-			need = prebuilt->autoinc_increment;
+			increment = prebuilt->autoinc_increment;
 
 			auto_inc = innobase_next_autoinc(
-				auto_inc, need, offset, col_max_value);
+				auto_inc, 1, increment, offset, col_max_value);
 
@@ -10141,3 +10159,2 @@ ha_innobase::get_auto_increment(
 	if (innobase_autoinc_lock_mode != AUTOINC_OLD_STYLE_LOCKING) {
-		ulonglong	need;
 		ulonglong	current;
@@ -10146,3 +10163,2 @@ ha_innobase::get_auto_increment(
 		current = *first_value > col_max_value ? autoinc : *first_value;
-		need = *nb_reserved_values * increment;
 
@@ -10150,3 +10166,4 @@ ha_innobase::get_auto_increment(
 		next_value = innobase_next_autoinc(
-			current, need, offset, col_max_value);
+			current, *nb_reserved_values, increment, offset,
+			col_max_value);
 