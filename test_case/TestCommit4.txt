commit 9d4db30589c1db277981b965c33c3c6e45cfc668
Author: Liu Liu <i@liuliu.me>
Date:   2014-03-27

    assert on gemm if no blas library linked, fixed a typo in doc

diff --git a/lib/ccv_algebra.c b/lib/ccv_algebra.c
index f8de354..c185c9f 100644
--- a/lib/ccv_algebra.c
+++ b/lib/ccv_algebra.c
@@ -302,2 +302,4 @@ void ccv_gemm(ccv_matrix_t* a, ccv_matrix_t* b, double alpha, ccv_matrix_t* c, d
 	}
+#else
+	assert(0 && "You need a BLAS compatible library for this function, e.g. libatlas.");
 #endif
diff --git a/lib/ccv_convnet.c b/lib/ccv_convnet.c
index cdc7273..679bb50 100644
--- a/lib/ccv_convnet.c
+++ b/lib/ccv_convnet.c
@@ -369,22 +369,2 @@ static void _ccv_convnet_average_pool_forward_propagate(ccv_convnet_layer_t* lay
 
-static void _ccv_convnet_compute_softmax(ccv_dense_matrix_t* a, ccv_dense_matrix_t** b, int type)
-{
-	int ch = CCV_GET_CHANNEL(a->type);
-	assert(CCV_GET_DATA_TYPE(a->type) == CCV_32F);
-	ccv_dense_matrix_t* db = *b = ccv_dense_matrix_renew(*b, a->rows, a->cols, CCV_32F | ch, CCV_32F | ch, 0);
-	int i;
-	float* aptr = a->data.f32;
-	float* bptr = db->data.f32;
-	double max = aptr[0];
-	for (i = 1; i < a->rows * a->cols * ch; i++)
-		if (aptr[i] > max)
-			max = aptr[i];
-	double tt = 0;
-	for (i = 0; i < a->rows * a->cols * ch; i++)
-		tt += (bptr[i] = expf(aptr[i] - max));
-	tt = 1.0 / tt;
-	for (i = 0; i < a->rows * a->cols * ch; i++)
-		bptr[i] *= tt;
-}
-
 static void _ccv_convnet_layer_forward_propagate(ccv_convnet_layer_t* layer, ccv_dense_matrix_t* a, ccv_dense_matrix_t** b, ccv_dense_matrix_t** denoms)
@@ -1080,2 +1060,22 @@ static ccv_convnet_t* _ccv_convnet_update_new(ccv_convnet_t* convnet)
 
+static void _ccv_convnet_compute_softmax(ccv_dense_matrix_t* a, ccv_dense_matrix_t** b, int type)
+{
+	int ch = CCV_GET_CHANNEL(a->type);
+	assert(CCV_GET_DATA_TYPE(a->type) == CCV_32F);
+	ccv_dense_matrix_t* db = *b = ccv_dense_matrix_renew(*b, a->rows, a->cols, CCV_32F | ch, CCV_32F | ch, 0);
+	int i;
+	float* aptr = a->data.f32;
+	float* bptr = db->data.f32;
+	double max = aptr[0];
+	for (i = 1; i < a->rows * a->cols * ch; i++)
+		if (aptr[i] > max)
+			max = aptr[i];
+	double tt = 0;
+	for (i = 0; i < a->rows * a->cols * ch; i++)
+		tt += (bptr[i] = expf(aptr[i] - max));
+	tt = 1.0 / tt;
+	for (i = 0; i < a->rows * a->cols * ch; i++)
+		bptr[i] *= tt;
+}
+
 static void _ccv_convnet_classify(ccv_convnet_t* convnet, ccv_dense_matrix_t** a, int* labels, int batch)