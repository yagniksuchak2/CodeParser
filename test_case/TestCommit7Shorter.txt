commit dea880d9d8939eb3f1c9825d7870468613409e26
Author: Dmitry Lenev <dlenev@mysql.com>
Date:   2010-01-21

    Patch that changes metadata locking subsystem to use mutex per lock and
    condition variable per context instead of one mutex and one conditional
    variable for the whole subsystem.
    
    This should increase concurrency in this subsystem.
    
    It also opens the way for further changes which are necessary to solve
    such bugs as bug #46272 "MySQL 5.4.4, new MDL: unnecessary deadlock"
    and bug #37346 "innodb does not detect deadlock between update and alter
    table".
    
    Two other notable changes done by this patch:
    
    - MDL subsystem no longer implicitly acquires global intention exclusive
      metadata lock when per-object metadata lock is acquired. Now this has
      to be done by explicit calls outside of MDL subsystem.
    - Instead of using separate MDL_context for opening system tables/tables
      for purposes of I_S we now create MDL savepoint in the main context
      before opening tables and rollback to this savepoint after closing
      them. This means that it is now possible to get ER_LOCK_DEADLOCK error
      even not inside a transaction. This might happen in unlikely case when
      one runs DDL on one of system tables while also running DDL on some
      other tables. Cases when this ER_LOCK_DEADLOCK error is not justified
      will be addressed by advanced deadlock detector for MDL subsystem which
      we plan to implement.

diff --git a/sql/mdl.cc b/sql/mdl.cc
index af7f310..dce917a 100644
--- a/sql/mdl.cc
+++ b/sql/mdl.cc
@@ -23,2 +23,27 @@ static bool mdl_initialized= 0;
 
+
+/**
+  A collection of all MDL locks. A singleton,
+  there is only one instance of the map in the server.
+  Maps MDL_key to MDL_lock instances.
+*/
+
+class MDL_map
+{
+public:
+  void init();
+  void destroy();
+  MDL_lock *find(const MDL_key *key);
+  MDL_lock *find_or_insert(const MDL_key *key);
+  void remove(MDL_lock *lock);
+private:
+  bool move_from_hash_to_lock_mutex(MDL_lock *lock);
+private:
+  /** All acquired locks in the server. */
+  HASH m_locks;
+  /* Protects access to m_locks hash. */
+  pthread_mutex_t m_mutex;
+};
+
+
 /**
@@ -28,2 +53,6 @@ static bool mdl_initialized= 0;
   Can be seen as an MDL subsystem's version of TABLE_SHARE.
+
+  This is an abstract class which lacks information about
+  compatibility rules for lock types. They should be specified
+  in its descendants.
 */
@@ -41,8 +70,3 @@ public:
 
-  /** The type of lock (shared or exclusive). */
-  enum
-  {
-    MDL_LOCK_SHARED,
-    MDL_LOCK_EXCLUSIVE,
-  } type;
+public:
   /** The key of the object (data) being protected. */
@@ -51,3 +75,6 @@ public:
   Ticket_list granted;
+  /** Tickets for contexts waiting to acquire a shared lock. */
+  Ticket_list waiting_shared;
   /**
+    Tickets for contexts waiting to acquire an exclusive lock.
     There can be several upgraders and active exclusive
@@ -57,5 +84,7 @@ public:
   */
-  Ticket_list waiting;
+  Ticket_list waiting_exclusive;
   void   *cached_object;
   mdl_cached_object_release_hook cached_object_release_hook;
+  /** Mutex protecting this lock context. */
+  pthread_mutex_t m_mutex;
 
@@ -63,46 +92,79 @@ public:
   {
-    return (granted.is_empty() && waiting.is_empty());
+    return (granted.is_empty() && waiting_shared.is_empty() &&
+            waiting_exclusive.is_empty());
   }
 
-  bool can_grant_lock(const MDL_context *requestor_ctx,
-                      enum_mdl_type type, bool is_upgrade);
+  bool has_pending_exclusive_lock()
+  {
+    bool has_locks;
+    pthread_mutex_lock(&m_mutex);
+    has_locks= ! waiting_exclusive.is_empty();
+    pthread_mutex_unlock(&m_mutex);
+    return has_locks;
+  }
+  virtual bool can_grant_lock(const MDL_context *requestor_ctx,
+                              enum_mdl_type type, bool is_upgrade)= 0;
+  virtual void wake_up_waiters()= 0;
 
   inline static MDL_lock *create(const MDL_key *key);
-  inline static void destroy(MDL_lock *lock);
-private:
+
   MDL_lock(const MDL_key *key_arg)
-  : type(MDL_LOCK_SHARED),
-    key(key_arg),
+  : key(key_arg),
     cached_object(NULL),
-    cached_object_release_hook(NULL)
+    cached_object_release_hook(NULL),
+    m_ref_usage(0),
+    m_ref_release(0),
+    m_is_destroyed(FALSE)
   {
+    pthread_mutex_init(&m_mutex, NULL);
   }
-};
 
+  virtual ~MDL_lock()
+  {
+    pthread_mutex_destroy(&m_mutex);
+  }
+  inline static void destroy(MDL_lock *lock);
+public:
+  /**
+    These three members are used to make it possible to separate
+    the mdl_locks.m_mutex mutex and MDL_lock::m_mutex in
+    MDL_map::find_or_insert() for increased scalability.
+    The 'm_is_destroyed' member is only set by destroyers that
+    have both the mdl_locks.m_mutex and MDL_lock::m_mutex, thus
+    holding any of the mutexes is sufficient to read it.
+    The 'm_ref_usage; is incremented under protection by
+    mdl_locks.m_mutex, but when 'm_is_destroyed' is set to TRUE, this
+    member is moved to be protected by the MDL_lock::m_mutex.
+    This means that the MDL_map::find_or_insert() which only
+    holds the MDL_lock::m_mutex can compare it to 'm_ref_release'
+    without acquiring mdl_locks.m_mutex again and if equal it can also
+    destroy the lock object safely.
+    The 'm_ref_release' is incremented under protection by
+    MDL_lock::m_mutex.
+    Note since we are only interested in equality of these two
+    counters we don't have to worry about overflows as long as
+    their size is big enough to hold maximum number of concurrent
+    threads on the system.
+  */
+  uint m_ref_usage;
+  uint m_ref_release;
+  bool m_is_destroyed;
+};
 
-static pthread_mutex_t LOCK_mdl;
-static pthread_cond_t  COND_mdl;
-static HASH mdl_locks;
 
 /**
-  An implementation of the global metadata lock. The only
-  locking modes which are supported at the moment are SHARED and
-  INTENTION EXCLUSIVE. Note, that SHARED global metadata lock
-  is acquired automatically when one tries to acquire an EXCLUSIVE
-  or UPGRADABLE SHARED metadata lock on an individual object.
+  An implementation of the global metadata lock. The only locking modes
+  which are supported at the moment are SHARED and INTENTION EXCLUSIVE.
 */
 
-class MDL_global_lock
+class MDL_global_lock : public MDL_lock
 {
 public:
-  uint waiting_shared;
-  uint active_shared;
-  uint active_intention_exclusive;
+  MDL_global_lock(const MDL_key *key_arg)
+    : MDL_lock(key_arg)
+  { }
 
-  bool is_empty() const
-  {
-    return (waiting_shared == 0 && active_shared == 0 &&
-            active_intention_exclusive == 0);
-  }
-  bool is_lock_type_compatible(enum_mdl_type type, bool is_upgrade) const;
+  virtual bool can_grant_lock(const MDL_context *requestor_ctx,
+                              enum_mdl_type type, bool is_upgrade);
+  virtual void wake_up_waiters();
 };
@@ -110,4 +172,21 @@ public:
 
-static MDL_global_lock global_lock;
+/**
+  An implementation of a per-object lock. Supports SHARED, SHARED_UPGRADABLE,
+  SHARED HIGH PRIORITY and EXCLUSIVE locks.
+*/
+
+class MDL_object_lock : public MDL_lock
+{
+public:
+  MDL_object_lock(const MDL_key *key_arg)
+    : MDL_lock(key_arg)
+  { }
+
+  virtual bool can_grant_lock(const MDL_context *requestor_ctx,
+                              enum_mdl_type type, bool is_upgrade);
+  virtual void wake_up_waiters();
+};
+
 
+static MDL_map mdl_locks;
 
@@ -1694,31 +2216,8 @@ MDL_context::is_lock_owner(MDL_key::enum_mdl_namespace mdl_namespace,
 
-bool MDL_ticket::has_pending_conflicting_lock_impl() const
-{
-  DBUG_ASSERT(is_shared());
-  safe_mutex_assert_owner(&LOCK_mdl);
-
-  return !m_lock->waiting.is_empty();
-}
-
-
-/**
-  Check if we have any pending exclusive locks which conflict with
-  existing shared lock.
-
-  @pre The ticket must match an acquired lock.
-
-  @return TRUE if there is a pending conflicting lock request,
-          FALSE otherwise.
-*/
-
 bool MDL_ticket::has_pending_conflicting_lock() const
 {
-  bool result;
-
   safe_mutex_assert_not_owner(&LOCK_open);
+  DBUG_ASSERT(is_shared());
 
-  pthread_mutex_lock(&LOCK_mdl);
-  result= has_pending_conflicting_lock_impl();
-  pthread_mutex_unlock(&LOCK_mdl);
-  return result;
+  return m_lock->has_pending_exclusive_lock();
 }